{
  "root": true,
  "env": {
    "browser": true,
    "webextensions": true
  },
  "overrides": [
    {
      "files": ["*.ts", "*.js"],
      "plugins": ["@typescript-eslint", "rxjs", "rxjs-angular", "import"],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "project": ["./tsconfig.eslint.json"],
        "sourceType": "module",
        "ecmaVersion": 2020
      },
      "extends": [
        "eslint:recommended",
        "plugin:@angular-eslint/recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:import/recommended",
        "plugin:import/typescript",
        "plugin:rxjs/recommended",
        "prettier"
      ],
      "settings": {
        "import/parsers": {
          "@typescript-eslint/parser": [".ts"]
        },
        "import/resolver": {
          "typescript": {
            "alwaysTryTypes": true
          }
        }
      },
      "rules": {
        "@angular-eslint/component-class-suffix": 0,
        "@angular-eslint/contextual-lifecycle": 0,
        "@angular-eslint/directive-class-suffix": 0,
        "@angular-eslint/no-empty-lifecycle-method": 0,
        "@angular-eslint/no-host-metadata-property": 0,
        "@angular-eslint/no-input-rename": 0,
        "@angular-eslint/no-inputs-metadata-property": 0,
        "@angular-eslint/no-output-native": 0,
        "@angular-eslint/no-output-on-prefix": 0,
        "@angular-eslint/no-output-rename": 0,
        "@angular-eslint/no-outputs-metadata-property": 0,
        "@angular-eslint/use-lifecycle-interface": "error",
        "@angular-eslint/use-pipe-transform-interface": 0,
        "@typescript-eslint/no-explicit-any": "off", // TODO: This should be re-enabled
        "@typescript-eslint/no-unused-vars": ["error", { "args": "none" }],
        "@typescript-eslint/explicit-member-accessibility": [
          "error",
          {
            "accessibility": "no-public"
          }
        ],
        "@typescript-eslint/no-this-alias": [
          "error",
          {
            "allowedNames": ["self"]
          }
        ],
        "no-console": "error",
        "import/no-unresolved": "off", // TODO: Look into turning off once each package is an actual package.
        "import/order": [
          "error",
          {
            "alphabetize": {
              "order": "asc"
            },
            "newlines-between": "always",
            "pathGroups": [
              {
                "pattern": "@bitwarden/**",
                "group": "external",
                "position": "after"
              },
              {
                "pattern": "src/**/*",
                "group": "parent",
                "position": "before"
              }
            ],
            "pathGroupsExcludedImportTypes": ["builtin"]
          }
        ],
        "rxjs-angular/prefer-takeuntil": "error",
        "rxjs/no-exposed-subjects": ["error", { "allowProtected": true }],
        "no-restricted-syntax": [
          "error",
          {
            "message": "Calling `svgIcon` directly is not allowed",
            "selector": "CallExpression[callee.name='svgIcon']"
          },
          {
            "message": "Accessing FormGroup using `get` is not allowed, use `.value` instead",
            "selector": "ChainExpression[expression.object.callee.property.name='get'][expression.property.name='value']"
          }
        ],
        "curly": ["error", "all"],
        "import/namespace": ["off"], // This doesn't resolve namespace imports correctly, but TS will throw for this anyway
        "import/no-restricted-paths": [
          "error",
          {
            "zones": [
              // Do not allow angular/node code to be imported into common
              {
                "target": "./libs/common/**/*",
                "from": "./libs/angular/**/*"
              },
              {
                "target": "./libs/common/**/*",
                "from": "./libs/node/**/*"
              },
              {
                "target": "./libs/common/**/*",
                "from": "./libs/importer/**/*"
              },
              {
                "target": "./libs/common/**/*",
                "from": "./libs/exporter/**/*"
              }
            ]
          }
        ],
        "no-restricted-imports": [
          "error",
          { "patterns": ["src/**/*"], "paths": ["@fluffy-spoon/substitute"] }
        ]
      }
    },
    {
      "files": ["*.html"],
      "parser": "@angular-eslint/template-parser",
      "plugins": ["@angular-eslint/template", "tailwindcss"],
      "rules": {
        "@angular-eslint/template/button-has-type": "error",
        "tailwindcss/no-custom-classname": [
          "error",
          {
            // uses negative lookahead to whitelist any class that doesn't start with "tw-"
            // in other words: classnames that start with tw- must be valid TailwindCSS classes
            "whitelist": ["(?!(tw)\\-).*"]
          }
        ],
        "tailwindcss/enforces-negative-arbitrary-values": "error",
        "tailwindcss/enforces-shorthand": "error",
        "tailwindcss/no-contradicting-classname": "error"
      }
    },
    {
      "files": ["libs/common/src/**/*.ts"],
      "rules": {
        "no-restricted-imports": ["error", { "patterns": ["@bitwarden/common/*", "src/**/*"] }]
      }
    },
    {
      "files": ["libs/components/src/**/*.ts"],
      "rules": {
        "no-restricted-imports": ["error", { "patterns": ["@bitwarden/components/*", "src/**/*"] }]
      }
    },
    {
      "files": ["libs/angular/src/**/*.ts"],
      "rules": {
        "no-restricted-imports": ["error", { "patterns": ["@bitwarden/angular/*", "src/**/*"] }]
      }
    },
    {
      "files": ["libs/node/src/**/*.ts"],
      "rules": {
        "no-restricted-imports": ["error", { "patterns": ["@bitwarden/node/*", "src/**/*"] }]
      }
    },
    {
      "files": ["libs/importer/src/**/*.ts"],
      "rules": {
        "no-restricted-imports": ["error", { "patterns": ["@bitwarden/importer/*", "src/**/*"] }]
      }
    },
    {
      "files": ["libs/exporter/src/**/*.ts"],
      "rules": {
        "no-restricted-imports": ["error", { "patterns": ["@bitwarden/exporter/*", "src/**/*"] }]
      }
    }
  ]
}
