{"version":3,"file":"126.4516b08a30608b206242.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/guards/org-redirect.guard.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/group-add-edit.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/group-add-edit.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/groups.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/manage/groups.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-filter/vault-filter.service.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-filter/vault-filter.module.ts","webpack://@bitwarden/web-vault/./src/app/vault/individual-vault/attachments.component.html","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/attachments.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/individual-vault/collections.component.html","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/collections.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/individual-vault/vault-filter/components/vault-filter.component.html","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-filter/vault-filter.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-header/vault-header.component.html","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-header/vault-header.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault.component.html","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault.component.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault-routing.module.ts","webpack://@bitwarden/web-vault/./src/app/vault/org-vault/vault.module.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/organization-routing.module.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/organization.module.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/utils/form-selection-list.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/shared/components/access-selector/user-type.pipe.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/shared/components/access-selector/access-selector.component.html","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/shared/components/access-selector/access-selector.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/shared/components/access-selector/access-selector.models.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/shared/components/access-selector/access-selector.module.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/shared/components/collection-dialog/collection-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/shared/components/collection-dialog/collection-dialog.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/form-field/bit-validators/forbidden-characters.validator.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/shared/components/collection-dialog/collection-dialog.module.ts","webpack://@bitwarden/web-vault/./src/app/admin-console/organizations/shared/shared-organization.module.ts","webpack://@bitwarden/web-vault/../../libs/components/src/multi-select/multi-select.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/multi-select/multi-select.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/search/search.module.ts","webpack://@bitwarden/web-vault/../../libs/components/src/tabs/tab-group/tab-body.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/tabs/tab-group/tab-group.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/tabs/tab-group/tab-body.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/tabs/tab-group/tab-group.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/tabs/tab-group/tab-label.directive.ts","webpack://@bitwarden/web-vault/../../libs/components/src/tabs/tab-group/tab.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/tabs/tab-group/tab.component.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from \"@angular/router\";\n\nimport {\n  canAccessOrgAdmin,\n  OrganizationService,\n} from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class OrganizationRedirectGuard implements CanActivate {\n  constructor(private router: Router, private organizationService: OrganizationService) {}\n\n  async canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const org = this.organizationService.get(route.params.organizationId);\n\n    const customRedirect = route.data?.autoRedirectCallback;\n    if (customRedirect) {\n      let redirectPath = customRedirect(org);\n      if (typeof redirectPath === \"string\") {\n        redirectPath = [redirectPath];\n      }\n      return this.router.createUrlTree([state.url, ...redirectPath]);\n    }\n\n    if (canAccessOrgAdmin(org)) {\n      return this.router.createUrlTree([\"/organizations\", org.id]);\n    }\n    return this.router.createUrlTree([\"/\"]);\n  }\n}\n","import { DIALOG_DATA, DialogConfig, DialogRef } from \"@angular/cdk/dialog\";\nimport { ChangeDetectorRef, Component, Inject, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { catchError, combineLatest, from, map, of, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { DialogServiceAbstraction, SimpleDialogType } from \"@bitwarden/angular/services/dialog\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { OrganizationUserService } from \"@bitwarden/common/abstractions/organization-user/organization-user.service\";\nimport { CollectionService } from \"@bitwarden/common/admin-console/abstractions/collection.service\";\nimport { CollectionData } from \"@bitwarden/common/admin-console/models/data/collection.data\";\nimport { Collection } from \"@bitwarden/common/admin-console/models/domain/collection\";\nimport { CollectionDetailsResponse } from \"@bitwarden/common/admin-console/models/response/collection.response\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { GroupService, GroupView } from \"../core\";\nimport {\n  AccessItemType,\n  AccessItemValue,\n  AccessItemView,\n  convertToPermission,\n  convertToSelectionView,\n  PermissionMode,\n} from \"../shared/components/access-selector\";\n\n/**\n * Indices for the available tabs in the dialog\n */\nexport enum GroupAddEditTabType {\n  Info = 0,\n  Members = 1,\n  Collections = 2,\n}\n\nexport interface GroupAddEditDialogParams {\n  /**\n   * ID of the organization the group belongs to\n   */\n  organizationId: string;\n\n  /**\n   * Optional ID of the group being modified\n   */\n  groupId?: string;\n\n  /**\n   * Tab to open when the dialog is open.\n   * Defaults to Group Info\n   */\n  initialTab?: GroupAddEditTabType;\n}\n\nexport enum GroupAddEditDialogResultType {\n  Saved = \"saved\",\n  Canceled = \"canceled\",\n  Deleted = \"deleted\",\n}\n\n/**\n * Strongly typed helper to open a groupAddEditDialog\n * @param dialogService Instance of the dialog service that will be used to open the dialog\n * @param config Configuration for the dialog\n */\nexport const openGroupAddEditDialog = (\n  dialogService: DialogServiceAbstraction,\n  config: DialogConfig<GroupAddEditDialogParams>\n) => {\n  return dialogService.open<GroupAddEditDialogResultType, GroupAddEditDialogParams>(\n    GroupAddEditComponent,\n    config\n  );\n};\n\n@Component({\n  selector: \"app-group-add-edit\",\n  templateUrl: \"group-add-edit.component.html\",\n})\nexport class GroupAddEditComponent implements OnInit, OnDestroy {\n  protected PermissionMode = PermissionMode;\n  protected ResultType = GroupAddEditDialogResultType;\n\n  tabIndex: GroupAddEditTabType;\n  loading = true;\n  editMode = false;\n  title: string;\n  collections: AccessItemView[] = [];\n  members: AccessItemView[] = [];\n  group: GroupView;\n\n  groupForm = this.formBuilder.group({\n    accessAll: [false],\n    name: [\"\", [Validators.required, Validators.maxLength(100)]],\n    externalId: this.formBuilder.control({ value: \"\", disabled: true }),\n    members: [[] as AccessItemValue[]],\n    collections: [[] as AccessItemValue[]],\n  });\n\n  get groupId(): string | undefined {\n    return this.params.groupId;\n  }\n\n  get organizationId(): string {\n    return this.params.organizationId;\n  }\n\n  private destroy$ = new Subject<void>();\n\n  private get orgCollections$() {\n    return from(this.apiService.getCollections(this.organizationId)).pipe(\n      switchMap((response) => {\n        return from(\n          this.collectionService.decryptMany(\n            response.data.map(\n              (r) => new Collection(new CollectionData(r as CollectionDetailsResponse))\n            )\n          )\n        );\n      }),\n      map((collections) =>\n        collections.map<AccessItemView>((c) => ({\n          id: c.id,\n          type: AccessItemType.Collection,\n          labelName: c.name,\n          listName: c.name,\n        }))\n      )\n    );\n  }\n\n  private get orgMembers$() {\n    return from(this.organizationUserService.getAllUsers(this.organizationId)).pipe(\n      map((response) =>\n        response.data.map((m) => ({\n          id: m.id,\n          type: AccessItemType.Member,\n          email: m.email,\n          role: m.type,\n          listName: m.name?.length > 0 ? `${m.name} (${m.email})` : m.email,\n          labelName: m.name || m.email,\n          status: m.status,\n        }))\n      )\n    );\n  }\n\n  private get groupDetails$() {\n    if (!this.editMode) {\n      return of(undefined);\n    }\n\n    return combineLatest([\n      this.groupService.get(this.organizationId, this.groupId),\n      this.apiService.getGroupUsers(this.organizationId, this.groupId),\n    ]).pipe(\n      map(([groupView, users]) => {\n        groupView.members = users;\n        return groupView;\n      }),\n      catchError((e: unknown) => {\n        if (e instanceof ErrorResponse) {\n          this.logService.error(e.message);\n        } else {\n          this.logService.error(e.toString());\n        }\n        return of(undefined);\n      })\n    );\n  }\n\n  constructor(\n    @Inject(DIALOG_DATA) private params: GroupAddEditDialogParams,\n    private dialogRef: DialogRef<GroupAddEditDialogResultType>,\n    private apiService: ApiService,\n    private organizationUserService: OrganizationUserService,\n    private groupService: GroupService,\n    private i18nService: I18nService,\n    private collectionService: CollectionService,\n    private platformUtilsService: PlatformUtilsService,\n    private logService: LogService,\n    private formBuilder: FormBuilder,\n    private changeDetectorRef: ChangeDetectorRef,\n    private dialogService: DialogServiceAbstraction\n  ) {\n    this.tabIndex = params.initialTab ?? GroupAddEditTabType.Info;\n  }\n\n  ngOnInit() {\n    this.editMode = this.loading = this.groupId != null;\n    this.title = this.i18nService.t(this.editMode ? \"editGroup\" : \"newGroup\");\n\n    combineLatest([this.orgCollections$, this.orgMembers$, this.groupDetails$])\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(([collections, members, group]) => {\n        this.collections = collections;\n        this.members = members;\n        this.group = group;\n\n        if (this.group != undefined) {\n          // Must detect changes so that AccessSelector @Inputs() are aware of the latest\n          // collections/members set above, otherwise no selected values will be patched below\n          this.changeDetectorRef.detectChanges();\n\n          this.groupForm.patchValue({\n            name: this.group.name,\n            externalId: this.group.externalId,\n            accessAll: this.group.accessAll,\n            members: this.group.members.map((m) => ({\n              id: m,\n              type: AccessItemType.Member,\n            })),\n            collections: this.group.collections.map((gc) => ({\n              id: gc.id,\n              type: AccessItemType.Collection,\n              permission: convertToPermission(gc),\n            })),\n          });\n        }\n\n        this.loading = false;\n      });\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    this.groupForm.markAllAsTouched();\n\n    if (this.groupForm.invalid) {\n      if (this.tabIndex !== GroupAddEditTabType.Info) {\n        this.platformUtilsService.showToast(\n          \"error\",\n          null,\n          this.i18nService.t(\"fieldOnTabRequiresAttention\", this.i18nService.t(\"groupInfo\"))\n        );\n      }\n      return;\n    }\n\n    const groupView = new GroupView();\n    groupView.id = this.groupId;\n    groupView.organizationId = this.organizationId;\n\n    const formValue = this.groupForm.value;\n    groupView.name = formValue.name;\n    groupView.accessAll = formValue.accessAll;\n    groupView.members = formValue.members?.map((m) => m.id) ?? [];\n\n    if (!groupView.accessAll) {\n      groupView.collections = formValue.collections.map((c) => convertToSelectionView(c));\n    }\n\n    await this.groupService.save(groupView);\n\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(this.editMode ? \"editedGroupId\" : \"createdGroupId\", formValue.name)\n    );\n\n    this.dialogRef.close(GroupAddEditDialogResultType.Saved);\n  };\n\n  delete = async () => {\n    if (!this.editMode) {\n      return;\n    }\n\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: this.group.name,\n      content: { key: \"deleteGroupConfirmation\" },\n      type: SimpleDialogType.WARNING,\n    });\n    if (!confirmed) {\n      return false;\n    }\n\n    await this.groupService.delete(this.organizationId, this.groupId);\n\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"deletedGroupId\", this.group.name)\n    );\n    this.dialogRef.close(GroupAddEditDialogResultType.Deleted);\n  };\n}\n","<form [formGroup]=\"groupForm\" [bitSubmit]=\"submit\">\n  <bit-dialog [disablePadding]=\"!loading\" dialogSize=\"large\">\n    <span bitDialogTitle>\n      {{ title }}\n      <span *ngIf=\"editMode\" class=\"tw-text-sm tw-normal-case tw-text-muted\">{{\n        group?.name\n      }}</span>\n    </span>\n    <div bitDialogContent>\n      <div *ngIf=\"loading\">\n        <i\n          class=\"bwi bwi-spinner bwi-spin text-muted\"\n          title=\"{{ 'loading' | i18n }}\"\n          aria-hidden=\"true\"\n        ></i>\n        <span class=\"sr-only\">{{ \"loading\" | i18n }}</span>\n      </div>\n\n      <bit-tab-group *ngIf=\"!loading\" [(selectedIndex)]=\"tabIndex\">\n        <bit-tab label=\"{{ 'groupInfo' | i18n }}\">\n          <bit-form-field>\n            <bit-label>{{ \"name\" | i18n }}</bit-label>\n            <input bitInput appAutofocus type=\"text\" formControlName=\"name\" />\n            <bit-hint>{{ \"characterMaximum\" | i18n : 100 }}</bit-hint>\n          </bit-form-field>\n          <bit-form-field>\n            <bit-label>{{ \"externalId\" | i18n }}</bit-label>\n            <input bitInput type=\"text\" formControlName=\"externalId\" />\n            <bit-hint>{{ \"externalIdDesc\" | i18n }}</bit-hint>\n          </bit-form-field>\n        </bit-tab>\n\n        <bit-tab label=\"{{ 'members' | i18n }}\">\n          <p>{{ \"editGroupMembersDesc\" | i18n }}</p>\n          <bit-access-selector\n            formControlName=\"members\"\n            [items]=\"members\"\n            [showMemberRoles]=\"true\"\n            [permissionMode]=\"PermissionMode.Hidden\"\n            [columnHeader]=\"'member' | i18n\"\n            [selectorLabelText]=\"'selectMembers' | i18n\"\n            [emptySelectionText]=\"'noMembersAdded' | i18n\"\n          ></bit-access-selector>\n        </bit-tab>\n\n        <bit-tab label=\"{{ 'collections' | i18n }}\">\n          <p>{{ \"editGroupCollectionsDesc\" | i18n }}</p>\n          <div class=\"tw-my-3\">\n            <input type=\"checkbox\" formControlName=\"accessAll\" id=\"accessAll\" />\n            <label class=\"tw-mb-0 tw-text-lg\" for=\"accessAll\">{{\n              \"accessAllCollectionsDesc\" | i18n\n            }}</label>\n            <p class=\"tw-my-0 tw-text-muted\">{{ \"accessAllCollectionsHelp\" | i18n }}</p>\n          </div>\n          <ng-container *ngIf=\"!groupForm.value.accessAll\">\n            <bit-access-selector\n              formControlName=\"collections\"\n              [items]=\"collections\"\n              [permissionMode]=\"PermissionMode.Edit\"\n              [columnHeader]=\"'collection' | i18n\"\n              [selectorLabelText]=\"'selectCollections' | i18n\"\n              [emptySelectionText]=\"'noCollectionsAdded' | i18n\"\n            ></bit-access-selector>\n          </ng-container>\n        </bit-tab>\n      </bit-tab-group>\n    </div>\n    <ng-container bitDialogFooter>\n      <button bitButton buttonType=\"primary\" bitFormButton type=\"submit\">\n        {{ \"save\" | i18n }}\n      </button>\n      <button\n        bitButton\n        buttonType=\"secondary\"\n        type=\"button\"\n        bitDialogClose\n        [bit-dialog-close]=\"ResultType.Canceled\"\n      >\n        {{ \"cancel\" | i18n }}\n      </button>\n      <button\n        class=\"tw-ml-auto\"\n        type=\"button\"\n        buttonType=\"danger\"\n        bitIconButton=\"bwi-trash\"\n        bitFormButton\n        [bitAction]=\"delete\"\n        [appA11yTitle]=\"'delete' | i18n\"\n      ></button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","<div class=\"container page-content\">\n  <div class=\"tw-mb-4 tw-flex\">\n    <h1>{{ \"groups\" | i18n }}</h1>\n    <div class=\"tw-ml-auto tw-flex tw-items-center\">\n      <div class=\"tw-mr-2\">\n        <label class=\"sr-only\">{{ \"search\" | i18n }}</label>\n        <div class=\"tw-flex tw-items-center\">\n          <i class=\"bwi bwi-search bwi-fw tw-z-20 -tw-mr-7 tw-text-muted\" aria-hidden=\"true\"></i>\n          <input\n            bitInput\n            type=\"search\"\n            placeholder=\"{{ 'searchGroups' | i18n }}\"\n            class=\"tw-rounded-l tw-pl-9\"\n            [(ngModel)]=\"searchText\"\n          />\n        </div>\n      </div>\n      <button bitButton type=\"button\" buttonType=\"primary\" (click)=\"add()\">\n        <i class=\"bwi bwi-plus bwi-fw\" aria-hidden=\"true\"></i>\n        {{ \"newGroup\" | i18n }}\n      </button>\n    </div>\n  </div>\n  <ng-container *ngIf=\"loading\">\n    <i\n      class=\"bwi bwi-spinner bwi-spin text-muted\"\n      title=\"{{ 'loading' | i18n }}\"\n      aria-hidden=\"true\"\n    ></i>\n    <span class=\"sr-only\">{{ \"loading\" | i18n }}</span>\n  </ng-container>\n  <ng-container *ngIf=\"!loading && visibleGroups\">\n    <p *ngIf=\"!visibleGroups.length\">{{ \"noGroupsInList\" | i18n }}</p>\n    <bit-table\n      *ngIf=\"visibleGroups.length\"\n      infinite-scroll\n      [infiniteScrollDistance]=\"1\"\n      [infiniteScrollDisabled]=\"!isPaging()\"\n      (scrolled)=\"loadMore()\"\n    >\n      <ng-container header>\n        <tr>\n          <th bitCell class=\"tw-w-20\">\n            <input\n              type=\"checkbox\"\n              bitCheckbox\n              class=\"tw-mr-2\"\n              (change)=\"toggleAllVisible($event)\"\n              id=\"selectAll\"\n            />\n            <label class=\"tw-mb-0 !tw-font-bold !tw-text-muted\" for=\"selectAll\">{{\n              \"all\" | i18n\n            }}</label>\n          </th>\n          <th bitCell>{{ \"name\" | i18n }}</th>\n          <th bitCell>{{ \"collections\" | i18n }}</th>\n          <th bitCell class=\"tw-w-10\">\n            <button\n              [bitMenuTriggerFor]=\"headerMenu\"\n              type=\"button\"\n              bitIconButton=\"bwi-ellipsis-v\"\n              size=\"small\"\n              appA11yTitle=\"{{ 'options' | i18n }}\"\n            ></button>\n\n            <bit-menu #headerMenu>\n              <button type=\"button\" bitMenuItem (click)=\"deleteAllSelected()\">\n                <span class=\"tw-text-danger\"\n                  ><i aria-hidden=\"true\" class=\"bwi bwi-trash\"></i> {{ \"delete\" | i18n }}</span\n                >\n              </button>\n            </bit-menu>\n          </th>\n        </tr>\n      </ng-container>\n      <ng-template body>\n        <tr bitRow *ngFor=\"let g of visibleGroups\">\n          <td bitCell (click)=\"check(g)\" class=\"tw-cursor-pointer\">\n            <input type=\"checkbox\" bitCheckbox [(ngModel)]=\"g.checked\" />\n          </td>\n          <td bitCell class=\"tw-cursor-pointer tw-font-bold\" (click)=\"edit(g)\">\n            <button type=\"button\" bitLink>\n              {{ g.details.name }}\n            </button>\n          </td>\n          <td bitCell (click)=\"edit(g, ModalTabType.Collections)\" class=\"tw-cursor-pointer\">\n            <bit-badge-list\n              *ngIf=\"!g.details.accessAll\"\n              [items]=\"g.collectionNames\"\n              [maxItems]=\"3\"\n              badgeType=\"secondary\"\n            ></bit-badge-list>\n            <span *ngIf=\"g.details.accessAll\">{{ \"all\" | i18n }}</span>\n          </td>\n          <td bitCell>\n            <button\n              [bitMenuTriggerFor]=\"rowMenu\"\n              type=\"button\"\n              bitIconButton=\"bwi-ellipsis-v\"\n              size=\"small\"\n              appA11yTitle=\"{{ 'options' | i18n }}\"\n            ></button>\n\n            <bit-menu #rowMenu>\n              <button type=\"button\" bitMenuItem (click)=\"edit(g)\">\n                <i aria-hidden=\"true\" class=\"bwi bwi-pencil-square\"></i> {{ \"editInfo\" | i18n }}\n              </button>\n              <button type=\"button\" bitMenuItem (click)=\"edit(g, ModalTabType.Members)\">\n                <i aria-hidden=\"true\" class=\"bwi bwi-user\"></i> {{ \"members\" | i18n }}\n              </button>\n              <button type=\"button\" bitMenuItem (click)=\"edit(g, ModalTabType.Collections)\">\n                <i aria-hidden=\"true\" class=\"bwi bwi-collection\"></i> {{ \"collections\" | i18n }}\n              </button>\n              <button type=\"button\" bitMenuItem (click)=\"delete(g)\">\n                <span class=\"tw-text-danger\"\n                  ><i aria-hidden=\"true\" class=\"bwi bwi-trash\"></i> {{ \"delete\" | i18n }}</span\n                >\n              </button>\n            </bit-menu>\n          </td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </ng-container>\n  <ng-template #addEdit></ng-template>\n</div>\n","import { Component, OnDestroy, OnInit, ViewChild, ViewContainerRef } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  BehaviorSubject,\n  combineLatest,\n  concatMap,\n  from,\n  lastValueFrom,\n  map,\n  Subject,\n  switchMap,\n  takeUntil,\n  tap,\n} from \"rxjs\";\nimport { first } from \"rxjs/operators\";\n\nimport { SearchPipe } from \"@bitwarden/angular/pipes/search.pipe\";\nimport { DialogServiceAbstraction, SimpleDialogType } from \"@bitwarden/angular/services/dialog\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { SearchService } from \"@bitwarden/common/abstractions/search.service\";\nimport { CollectionService } from \"@bitwarden/common/admin-console/abstractions/collection.service\";\nimport { CollectionData } from \"@bitwarden/common/admin-console/models/data/collection.data\";\nimport { Collection } from \"@bitwarden/common/admin-console/models/domain/collection\";\nimport {\n  CollectionDetailsResponse,\n  CollectionResponse,\n} from \"@bitwarden/common/admin-console/models/response/collection.response\";\nimport { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\n\nimport { GroupService, GroupView } from \"../core\";\n\nimport {\n  GroupAddEditDialogResultType,\n  GroupAddEditTabType,\n  openGroupAddEditDialog,\n} from \"./group-add-edit.component\";\n\ntype CollectionViewMap = {\n  [id: string]: CollectionView;\n};\n\ntype GroupDetailsRow = {\n  /**\n   * Group Id (used for searching)\n   */\n  id: string;\n\n  /**\n   * Group name (used for searching)\n   */\n  name: string;\n\n  /**\n   * Details used for displaying group information\n   */\n  details: GroupView;\n\n  /**\n   * True if the group is selected in the table\n   */\n  checked?: boolean;\n\n  /**\n   * A list of collection names the group has access to\n   */\n  collectionNames?: string[];\n};\n\n@Component({\n  selector: \"app-org-groups\",\n  templateUrl: \"groups.component.html\",\n})\nexport class GroupsComponent implements OnInit, OnDestroy {\n  @ViewChild(\"addEdit\", { read: ViewContainerRef, static: true }) addEditModalRef: ViewContainerRef;\n  @ViewChild(\"usersTemplate\", { read: ViewContainerRef, static: true })\n  usersModalRef: ViewContainerRef;\n\n  loading = true;\n  organizationId: string;\n  groups: GroupDetailsRow[];\n\n  protected didScroll = false;\n  protected pageSize = 100;\n  protected ModalTabType = GroupAddEditTabType;\n\n  private pagedGroupsCount = 0;\n  private pagedGroups: GroupDetailsRow[];\n  private searchedGroups: GroupDetailsRow[];\n  private _searchText: string;\n  private destroy$ = new Subject<void>();\n  private refreshGroups$ = new BehaviorSubject<void>(null);\n\n  get searchText() {\n    return this._searchText;\n  }\n  set searchText(value: string) {\n    this._searchText = value;\n    // Manually update as we are not using the search pipe in the template\n    this.updateSearchedGroups();\n  }\n\n  /**\n   * The list of groups that should be visible in the table.\n   * This is needed as there are two modes (paging/searching) and\n   * we need a reference to the currently visible groups for\n   * the Select All checkbox\n   */\n  get visibleGroups(): GroupDetailsRow[] {\n    if (this.isPaging()) {\n      return this.pagedGroups;\n    }\n    if (this.isSearching()) {\n      return this.searchedGroups;\n    }\n    return this.groups;\n  }\n\n  constructor(\n    private apiService: ApiService,\n    private groupService: GroupService,\n    private route: ActivatedRoute,\n    private i18nService: I18nService,\n    private modalService: ModalService,\n    private dialogService: DialogServiceAbstraction,\n    private platformUtilsService: PlatformUtilsService,\n    private searchService: SearchService,\n    private logService: LogService,\n    private collectionService: CollectionService,\n    private searchPipe: SearchPipe\n  ) {}\n\n  async ngOnInit() {\n    this.route.params\n      .pipe(\n        tap((params) => (this.organizationId = params.organizationId)),\n        switchMap(() =>\n          combineLatest([\n            // collectionMap\n            from(this.apiService.getCollections(this.organizationId)).pipe(\n              concatMap((response) => this.toCollectionMap(response))\n            ),\n            // groups\n            this.refreshGroups$.pipe(\n              switchMap(() => this.groupService.getAll(this.organizationId))\n            ),\n          ])\n        ),\n        map(([collectionMap, groups]) => {\n          return groups\n            .sort(Utils.getSortFunction(this.i18nService, \"name\"))\n            .map<GroupDetailsRow>((g) => ({\n              id: g.id,\n              name: g.name,\n              details: g,\n              checked: false,\n              collectionNames: g.collections\n                .map((c) => collectionMap[c.id]?.name)\n                .sort(this.i18nService.collator?.compare),\n            }));\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((groups) => {\n        this.groups = groups;\n        this.resetPaging();\n        this.updateSearchedGroups();\n        this.loading = false;\n      });\n\n    this.route.queryParams\n      .pipe(\n        first(),\n        concatMap(async (qParams) => {\n          this.searchText = qParams.search;\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe();\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  loadMore() {\n    if (!this.groups || this.groups.length <= this.pageSize) {\n      return;\n    }\n    const pagedLength = this.pagedGroups.length;\n    let pagedSize = this.pageSize;\n    if (pagedLength === 0 && this.pagedGroupsCount > this.pageSize) {\n      pagedSize = this.pagedGroupsCount;\n    }\n    if (this.groups.length > pagedLength) {\n      this.pagedGroups = this.pagedGroups.concat(\n        this.groups.slice(pagedLength, pagedLength + pagedSize)\n      );\n    }\n    this.pagedGroupsCount = this.pagedGroups.length;\n    this.didScroll = this.pagedGroups.length > this.pageSize;\n  }\n\n  async edit(\n    group: GroupDetailsRow,\n    startingTabIndex: GroupAddEditTabType = GroupAddEditTabType.Info\n  ) {\n    const dialogRef = openGroupAddEditDialog(this.dialogService, {\n      data: {\n        initialTab: startingTabIndex,\n        organizationId: this.organizationId,\n        groupId: group != null ? group.details.id : null,\n      },\n    });\n\n    const result = await lastValueFrom(dialogRef.closed);\n\n    if (result == GroupAddEditDialogResultType.Saved) {\n      this.refreshGroups$.next();\n    } else if (result == GroupAddEditDialogResultType.Deleted) {\n      this.removeGroup(group.details.id);\n    }\n  }\n\n  add() {\n    this.edit(null);\n  }\n\n  async delete(groupRow: GroupDetailsRow) {\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: groupRow.details.name,\n      content: { key: \"deleteGroupConfirmation\" },\n      type: SimpleDialogType.WARNING,\n    });\n    if (!confirmed) {\n      return false;\n    }\n\n    try {\n      await this.groupService.delete(this.organizationId, groupRow.details.id);\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"deletedGroupId\", groupRow.details.name)\n      );\n      this.removeGroup(groupRow.details.id);\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async deleteAllSelected() {\n    const groupsToDelete = this.groups.filter((g) => g.checked);\n\n    if (groupsToDelete.length == 0) {\n      return;\n    }\n\n    const deleteMessage = groupsToDelete.map((g) => g.details.name).join(\", \");\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: {\n        key: \"deleteMultipleGroupsConfirmation\",\n        placeholders: [groupsToDelete.length.toString()],\n      },\n      content: deleteMessage,\n      type: SimpleDialogType.WARNING,\n    });\n    if (!confirmed) {\n      return false;\n    }\n\n    try {\n      await this.groupService.deleteMany(\n        this.organizationId,\n        groupsToDelete.map((g) => g.details.id)\n      );\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"deletedManyGroups\", groupsToDelete.length.toString())\n      );\n\n      groupsToDelete.forEach((g) => this.removeGroup(g.details.id));\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  resetPaging() {\n    this.pagedGroups = [];\n    this.loadMore();\n  }\n\n  isSearching() {\n    return this.searchService.isSearchable(this.searchText);\n  }\n\n  check(groupRow: GroupDetailsRow) {\n    groupRow.checked = !groupRow.checked;\n  }\n\n  toggleAllVisible(event: Event) {\n    this.visibleGroups.forEach((g) => (g.checked = (event.target as HTMLInputElement).checked));\n  }\n\n  isPaging() {\n    const searching = this.isSearching();\n    if (searching && this.didScroll) {\n      this.resetPaging();\n    }\n    return !searching && this.groups && this.groups.length > this.pageSize;\n  }\n\n  private removeGroup(id: string) {\n    const index = this.groups.findIndex((g) => g.details.id === id);\n    if (index > -1) {\n      this.groups.splice(index, 1);\n      this.resetPaging();\n      this.updateSearchedGroups();\n    }\n  }\n\n  private async toCollectionMap(response: ListResponse<CollectionResponse>) {\n    const collections = response.data.map(\n      (r) => new Collection(new CollectionData(r as CollectionDetailsResponse))\n    );\n    const decryptedCollections = await this.collectionService.decryptMany(collections);\n\n    // Convert to an object using collection Ids as keys for faster name lookups\n    const collectionMap: CollectionViewMap = {};\n    decryptedCollections.forEach((c) => (collectionMap[c.id] = c));\n\n    return collectionMap;\n  }\n\n  private updateSearchedGroups() {\n    if (this.searchService.isSearchable(this.searchText)) {\n      // Making use of the pipe in the component as we need know which groups where filtered\n      this.searchedGroups = this.searchPipe.transform(\n        this.groups,\n        this.searchText,\n        (group) => group.details.name,\n        (group) => group.details.id\n      );\n    }\n  }\n}\n","import { Injectable, OnDestroy } from \"@angular/core\";\nimport { map, Observable, ReplaySubject, Subject } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { TreeNode } from \"@bitwarden/common/models/domain/tree-node\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\n\nimport {\n  CollectionAdminService,\n  CollectionAdminView,\n} from \"../../../admin-console/organizations/core\";\nimport { StateService } from \"../../../core\";\nimport { VaultFilterService as BaseVaultFilterService } from \"../../individual-vault/vault-filter/services/vault-filter.service\";\nimport { CollectionFilter } from \"../../individual-vault/vault-filter/shared/models/vault-filter.type\";\n\n@Injectable()\nexport class VaultFilterService extends BaseVaultFilterService implements OnDestroy {\n  private destroy$ = new Subject<void>();\n  private _collections = new ReplaySubject<CollectionAdminView[]>(1);\n\n  filteredCollections$: Observable<CollectionAdminView[]> = this._collections.asObservable();\n\n  collectionTree$: Observable<TreeNode<CollectionFilter>> = this.filteredCollections$.pipe(\n    map((collections) => this.buildCollectionTree(collections))\n  );\n\n  constructor(\n    stateService: StateService,\n    organizationService: OrganizationService,\n    folderService: FolderService,\n    cipherService: CipherService,\n    policyService: PolicyService,\n    i18nService: I18nService,\n    protected collectionAdminService: CollectionAdminService\n  ) {\n    super(\n      stateService,\n      organizationService,\n      folderService,\n      cipherService,\n      policyService,\n      i18nService\n    );\n  }\n\n  async reloadCollections(collections: CollectionAdminView[]) {\n    this._collections.next(collections);\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","import { NgModule } from \"@angular/core\";\n\nimport { VaultFilterService as VaultFilterServiceAbstraction } from \"../../individual-vault/vault-filter/services/abstractions/vault-filter.service\";\nimport { VaultFilterSharedModule } from \"../../individual-vault/vault-filter/shared/vault-filter-shared.module\";\n\nimport { VaultFilterComponent } from \"./vault-filter.component\";\nimport { VaultFilterService } from \"./vault-filter.service\";\n\n@NgModule({\n  imports: [VaultFilterSharedModule],\n  declarations: [VaultFilterComponent],\n  exports: [VaultFilterComponent],\n  providers: [\n    {\n      provide: VaultFilterServiceAbstraction,\n      useClass: VaultFilterService,\n    },\n  ],\n})\nexport class VaultFilterModule {}\n","<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"attachmentsTitle\">\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form\n      class=\"modal-content\"\n      #form\n      (ngSubmit)=\"submit()\"\n      [appApiAction]=\"formPromise\"\n      ngNativeValidate\n    >\n      <div class=\"modal-header\">\n        <h1 class=\"modal-title\" id=\"attachmentsTitle\">\n          {{ \"attachments\" | i18n }}\n          <small *ngIf=\"cipher\">{{ cipher.name }}</small>\n        </h1>\n        <button\n          type=\"button\"\n          class=\"close\"\n          data-dismiss=\"modal\"\n          appA11yTitle=\"{{ 'close' | i18n }}\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n        <table class=\"table table-hover table-list\" *ngIf=\"cipher && cipher.hasAttachments\">\n          <tbody>\n            <tr *ngFor=\"let a of cipher.attachments\">\n              <td class=\"table-list-icon\">\n                <i\n                  class=\"bwi bwi-fw bwi-lg bwi-file\"\n                  *ngIf=\"!$any(a).downloading\"\n                  aria-hidden=\"true\"\n                ></i>\n                <i\n                  class=\"bwi bwi-spinner bwi-lg bwi-fw bwi-spin\"\n                  *ngIf=\"$any(a).downloading\"\n                  aria-hidden=\"true\"\n                ></i>\n              </td>\n              <td class=\"wrap\">\n                <div class=\"d-flex\">\n                  <a href=\"#\" appStopClick (click)=\"download(a)\">{{ a.fileName }}</a>\n                  <div *ngIf=\"showFixOldAttachments(a)\" class=\"ml-2\">\n                    <a\n                      href=\"https://bitwarden.com/help/attachments/#fixing-old-attachments\"\n                      target=\"_blank\"\n                      rel=\"noopener\"\n                    >\n                      <i\n                        class=\"bwi bwi-exclamation-triangle text-warning\"\n                        title=\"{{ 'attachmentFixDesc' | i18n }}\"\n                        aria-hidden=\"true\"\n                      ></i>\n                      <span class=\"sr-only\">{{ \"attachmentFixDesc\" | i18n }}</span></a\n                    >\n                    <button\n                      type=\"button\"\n                      class=\"btn btn-outline-primary btn-sm m-0 py-0 px-2\"\n                      (click)=\"reupload(a)\"\n                      #reuploadBtn\n                      [appApiAction]=\"reuploadPromises[a.id]\"\n                      [disabled]=\"$any(reuploadBtn).loading\"\n                    >\n                      {{ \"fix\" | i18n }}\n                    </button>\n                  </div>\n                </div>\n                <small>{{ a.sizeName }}</small>\n              </td>\n              <td class=\"table-list-options\" *ngIf=\"!viewOnly\">\n                <button\n                  class=\"btn btn-outline-danger\"\n                  type=\"button\"\n                  appStopClick\n                  appA11yTitle=\"{{ 'delete' | i18n }}\"\n                  (click)=\"delete(a)\"\n                  #deleteBtn\n                  [appApiAction]=\"deletePromises[a.id]\"\n                  [disabled]=\"$any(deleteBtn).loading\"\n                >\n                  <i\n                    class=\"bwi bwi-trash bwi-lg bwi-fw\"\n                    [hidden]=\"$any(deleteBtn).loading\"\n                    aria-hidden=\"true\"\n                  ></i>\n                  <i\n                    class=\"bwi bwi-spinner bwi-spin bwi-lg bwi-fw\"\n                    [hidden]=\"!$any(deleteBtn).loading\"\n                    title=\"{{ 'loading' | i18n }}\"\n                    aria-hidden=\"true\"\n                  ></i>\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <div *ngIf=\"!viewOnly\">\n          <h3>{{ \"newAttachment\" | i18n }}</h3>\n          <label for=\"file\" class=\"sr-only\">{{ \"file\" | i18n }}</label>\n          <input type=\"file\" id=\"file\" class=\"form-control-file\" name=\"file\" required />\n          <small class=\"form-text text-muted\">{{ \"maxFileSize\" | i18n }}</small>\n        </div>\n      </div>\n      <div class=\"modal-footer\">\n        <button\n          type=\"submit\"\n          class=\"btn btn-primary btn-submit\"\n          [disabled]=\"form.loading\"\n          *ngIf=\"!viewOnly\"\n        >\n          <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n          <span>{{ \"save\" | i18n }}</span>\n        </button>\n        <button type=\"button\" class=\"btn btn-outline-secondary\" data-dismiss=\"modal\">\n          {{ \"close\" | i18n }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { Component } from \"@angular/core\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CipherData } from \"@bitwarden/common/vault/models/data/cipher.data\";\nimport { Cipher } from \"@bitwarden/common/vault/models/domain/cipher\";\nimport { AttachmentView } from \"@bitwarden/common/vault/models/view/attachment.view\";\n\nimport { AttachmentsComponent as BaseAttachmentsComponent } from \"../individual-vault/attachments.component\";\n\n@Component({\n  selector: \"app-org-vault-attachments\",\n  templateUrl: \"../individual-vault/attachments.component.html\",\n})\nexport class AttachmentsComponent extends BaseAttachmentsComponent {\n  viewOnly = false;\n  organization: Organization;\n\n  constructor(\n    cipherService: CipherService,\n    i18nService: I18nService,\n    cryptoService: CryptoService,\n    stateService: StateService,\n    platformUtilsService: PlatformUtilsService,\n    apiService: ApiService,\n    logService: LogService,\n    fileDownloadService: FileDownloadService,\n    dialogService: DialogServiceAbstraction\n  ) {\n    super(\n      cipherService,\n      i18nService,\n      cryptoService,\n      stateService,\n      platformUtilsService,\n      apiService,\n      logService,\n      fileDownloadService,\n      dialogService\n    );\n  }\n\n  protected async reupload(attachment: AttachmentView) {\n    if (this.organization.canEditAnyCollection && this.showFixOldAttachments(attachment)) {\n      await super.reuploadCipherAttachment(attachment, true);\n    }\n  }\n\n  protected async loadCipher() {\n    if (!this.organization.canEditAnyCollection) {\n      return await super.loadCipher();\n    }\n    const response = await this.apiService.getCipherAdmin(this.cipherId);\n    return new Cipher(new CipherData(response));\n  }\n\n  protected saveCipherAttachment(file: File) {\n    return this.cipherService.saveAttachmentWithServer(\n      this.cipherDomain,\n      file,\n      this.organization.canEditAnyCollection\n    );\n  }\n\n  protected deleteCipherAttachment(attachmentId: string) {\n    if (!this.organization.canEditAnyCollection) {\n      return super.deleteCipherAttachment(attachmentId);\n    }\n    return this.apiService.deleteCipherAttachmentAdmin(this.cipherId, attachmentId);\n  }\n\n  protected showFixOldAttachments(attachment: AttachmentView) {\n    return attachment.key == null && this.organization.canEditAnyCollection;\n  }\n}\n","<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"collectionsTitle\">\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form class=\"modal-content\" #form (ngSubmit)=\"submit()\" [appApiAction]=\"formPromise\">\n      <div class=\"modal-header\">\n        <h1 class=\"modal-title\" id=\"collectionsTitle\">\n          {{ \"collections\" | i18n }}\n          <small *ngIf=\"cipher\">{{ cipher.name }}</small>\n        </h1>\n        <button\n          type=\"button\"\n          class=\"close\"\n          data-dismiss=\"modal\"\n          appA11yTitle=\"{{ 'close' | i18n }}\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body\">\n        <p>{{ \"collectionsDesc\" | i18n }}</p>\n        <div class=\"d-flex\">\n          <h3>{{ \"collections\" | i18n }}</h3>\n          <div class=\"ml-auto d-flex\" *ngIf=\"collections && collections.length\">\n            <button type=\"button\" (click)=\"selectAll(true)\" class=\"btn btn-link btn-sm py-0\">\n              {{ \"selectAll\" | i18n }}\n            </button>\n            <button type=\"button\" (click)=\"selectAll(false)\" class=\"btn btn-link btn-sm py-0\">\n              {{ \"unselectAll\" | i18n }}\n            </button>\n          </div>\n        </div>\n        <div *ngIf=\"!collections || !collections.length\">\n          {{ \"noCollectionsInList\" | i18n }}\n        </div>\n        <table class=\"table table-hover table-list mb-0\" *ngIf=\"collections && collections.length\">\n          <tbody>\n            <tr *ngFor=\"let c of collections; let i = index\" (click)=\"check(c)\">\n              <td class=\"table-list-checkbox\">\n                <input\n                  type=\"checkbox\"\n                  [(ngModel)]=\"$any(c).checked\"\n                  name=\"Collection[{{ i }}].Checked\"\n                  appStopProp\n                />\n              </td>\n              <td>\n                {{ c.name }}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <div class=\"modal-footer\">\n        <button type=\"submit\" class=\"btn btn-primary btn-submit\" [disabled]=\"form.loading\">\n          <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n          <span>{{ \"save\" | i18n }}</span>\n        </button>\n        <button type=\"button\" class=\"btn btn-outline-secondary\" data-dismiss=\"modal\">\n          {{ \"cancel\" | i18n }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { Component } from \"@angular/core\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CollectionService } from \"@bitwarden/common/admin-console/abstractions/collection.service\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CipherData } from \"@bitwarden/common/vault/models/data/cipher.data\";\nimport { Cipher } from \"@bitwarden/common/vault/models/domain/cipher\";\nimport { CipherCollectionsRequest } from \"@bitwarden/common/vault/models/request/cipher-collections.request\";\n\nimport { CollectionsComponent as BaseCollectionsComponent } from \"../individual-vault/collections.component\";\n\n@Component({\n  selector: \"app-org-vault-collections\",\n  templateUrl: \"../../vault/individual-vault/collections.component.html\",\n})\nexport class CollectionsComponent extends BaseCollectionsComponent {\n  organization: Organization;\n\n  constructor(\n    collectionService: CollectionService,\n    platformUtilsService: PlatformUtilsService,\n    i18nService: I18nService,\n    cipherService: CipherService,\n    private apiService: ApiService,\n    logService: LogService\n  ) {\n    super(collectionService, platformUtilsService, i18nService, cipherService, logService);\n    this.allowSelectNone = true;\n  }\n\n  protected async loadCipher() {\n    if (!this.organization.canViewAllCollections) {\n      return await super.loadCipher();\n    }\n    const response = await this.apiService.getCipherAdmin(this.cipherId);\n    return new Cipher(new CipherData(response));\n  }\n\n  protected loadCipherCollections() {\n    if (!this.organization.canViewAllCollections) {\n      return super.loadCipherCollections();\n    }\n    return this.collectionIds;\n  }\n\n  protected loadCollections() {\n    if (!this.organization.canViewAllCollections) {\n      return super.loadCollections();\n    }\n    return Promise.resolve(this.collections);\n  }\n\n  protected saveCollections() {\n    if (this.organization.canEditAnyCollection) {\n      const request = new CipherCollectionsRequest(this.cipherDomain.collectionIds);\n      return this.apiService.putCipherCollectionsAdmin(this.cipherId, request);\n    } else {\n      return super.saveCollections();\n    }\n  }\n}\n","<div class=\"card vault-filters\">\n  <div class=\"container loading-spinner\" *ngIf=\"!isLoaded\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\" aria-hidden=\"true\"></i>\n  </div>\n  <div *ngIf=\"isLoaded\">\n    <div class=\"card-header d-flex\">\n      {{ \"filters\" | i18n }}\n      <a\n        class=\"ml-auto\"\n        href=\"https://bitwarden.com/help/searching-vault/\"\n        target=\"_blank\"\n        rel=\"noopener\"\n        appA11yTitle=\"{{ 'learnMore' | i18n }}\"\n      >\n        <i class=\"bwi bwi-question-circle\" aria-hidden=\"true\"></i>\n      </a>\n    </div>\n    <div class=\"card-body\">\n      <input\n        type=\"search\"\n        placeholder=\"{{ searchPlaceholder | i18n }}\"\n        id=\"search\"\n        class=\"form-control\"\n        [ngModel]=\"searchText\"\n        (ngModelChange)=\"onSearchTextChanged($event)\"\n        autocomplete=\"off\"\n        appAutofocus\n      />\n      <ng-container *ngFor=\"let f of filtersList\">\n        <div class=\"filter\">\n          <app-filter-section [activeFilter]=\"activeFilter\" [section]=\"f\"> </app-filter-section>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</div>\n","import { Component, Input, OnDestroy, OnInit } from \"@angular/core\";\nimport { firstValueFrom, Subject } from \"rxjs\";\n\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { TreeNode } from \"@bitwarden/common/models/domain/tree-node\";\n\nimport { VaultFilterComponent as BaseVaultFilterComponent } from \"../../individual-vault/vault-filter/components/vault-filter.component\"; //../../vault/vault-filter/components/vault-filter.component\";\nimport {\n  VaultFilterList,\n  VaultFilterType,\n} from \"../../individual-vault/vault-filter/shared/models/vault-filter-section.type\";\nimport { CollectionFilter } from \"../../individual-vault/vault-filter/shared/models/vault-filter.type\";\n\n@Component({\n  selector: \"app-organization-vault-filter\",\n  templateUrl: \"../../individual-vault/vault-filter/components/vault-filter.component.html\",\n})\nexport class VaultFilterComponent extends BaseVaultFilterComponent implements OnInit, OnDestroy {\n  @Input() set organization(value: Organization) {\n    if (value && value !== this._organization) {\n      this._organization = value;\n      this.vaultFilterService.setOrganizationFilter(this._organization);\n    }\n  }\n  _organization: Organization;\n  protected destroy$: Subject<void>;\n\n  async ngOnInit() {\n    this.filters = await this.buildAllFilters();\n    if (!this.activeFilter.selectedCipherTypeNode) {\n      this.activeFilter.resetFilter();\n      this.activeFilter.selectedCollectionNode =\n        (await this.getDefaultFilter()) as TreeNode<CollectionFilter>;\n    }\n    this.isLoaded = true;\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  async buildAllFilters(): Promise<VaultFilterList> {\n    const builderFilter = {} as VaultFilterList;\n    builderFilter.typeFilter = await this.addTypeFilter([\"favorites\"]);\n    builderFilter.collectionFilter = await this.addCollectionFilter();\n    builderFilter.trashFilter = await this.addTrashFilter();\n    return builderFilter;\n  }\n\n  async getDefaultFilter(): Promise<TreeNode<VaultFilterType>> {\n    return await firstValueFrom(this.filters?.collectionFilter.data$);\n  }\n}\n","<div class=\"tw-mb-4 tw-flex tw-items-start tw-justify-between\">\n  <div>\n    <bit-breadcrumbs *ngIf=\"showBreadcrumbs\">\n      <bit-breadcrumb\n        [route]=\"[]\"\n        [queryParams]=\"{ organizationId: organization.id, collectionId: null }\"\n        queryParamsHandling=\"merge\"\n      >\n        {{ organization.name }} {{ \"vault\" | i18n | lowercase }}\n      </bit-breadcrumb>\n      <ng-container>\n        <bit-breadcrumb\n          *ngFor=\"let collection of collections\"\n          icon=\"bwi-collection\"\n          [route]=\"[]\"\n          [queryParams]=\"{ collectionId: collection.id }\"\n          queryParamsHandling=\"merge\"\n        >\n          {{ collection.name }}\n        </bit-breadcrumb>\n      </ng-container>\n    </bit-breadcrumbs>\n    <h1 class=\"tw-mb-0 tw-mt-1 tw-flex tw-items-center tw-space-x-2\">\n      <i\n        *ngIf=\"filter.collectionId !== undefined\"\n        class=\"bwi bwi-collection\"\n        aria-hidden=\"true\"\n      ></i>\n      <span>{{ title }}</span>\n      <ng-container *ngIf=\"collection !== undefined && (canEditCollection || canDeleteCollection)\">\n        <button\n          bitIconButton=\"bwi-angle-down\"\n          [bitMenuTriggerFor]=\"editCollectionMenu\"\n          size=\"small\"\n          type=\"button\"\n          aria-haspopup\n        ></button>\n        <bit-menu #editCollectionMenu>\n          <button\n            type=\"button\"\n            *ngIf=\"canEditCollection\"\n            bitMenuItem\n            (click)=\"editCollection(CollectionDialogTabType.Info)\"\n          >\n            <i class=\"bwi bwi-fw bwi-pencil-square\" aria-hidden=\"true\"></i>\n            {{ \"editInfo\" | i18n }}\n          </button>\n          <button\n            type=\"button\"\n            *ngIf=\"canEditCollection\"\n            bitMenuItem\n            (click)=\"editCollection(CollectionDialogTabType.Access)\"\n          >\n            <i class=\"bwi bwi-fw bwi-users\" aria-hidden=\"true\"></i>\n            {{ \"access\" | i18n }}\n          </button>\n          <button\n            type=\"button\"\n            *ngIf=\"canDeleteCollection\"\n            bitMenuItem\n            (click)=\"deleteCollection()\"\n          >\n            <span class=\"tw-text-danger\">\n              <i class=\"bwi bwi-fw bwi-trash\" aria-hidden=\"true\"></i>\n              {{ \"delete\" | i18n }}\n            </span>\n          </button>\n        </bit-menu>\n      </ng-container>\n      <small *ngIf=\"loading\">\n        <i\n          class=\"bwi bwi-spinner bwi-spin text-muted\"\n          title=\"{{ 'loading' | i18n }}\"\n          aria-hidden=\"true\"\n        ></i>\n        <span class=\"tw-sr-only\">{{ \"loading\" | i18n }}</span>\n      </small>\n    </h1>\n  </div>\n\n  <div *ngIf=\"filter.type !== 'trash' && filter.collectionId !== Unassigned\" class=\"tw-shrink-0\">\n    <div *ngIf=\"organization.canCreateNewCollections\" appListDropdown>\n      <button\n        bitButton\n        buttonType=\"primary\"\n        type=\"button\"\n        [bitMenuTriggerFor]=\"addOptions\"\n        id=\"newItemDropdown\"\n        appA11yTitle=\"{{ 'new' | i18n }}\"\n      >\n        {{ \"new\" | i18n }}<i class=\"bwi bwi-angle-down tw-ml-2\" aria-hidden=\"true\"></i>\n      </button>\n      <bit-menu #addOptions aria-labelledby=\"newItemDropdown\">\n        <button type=\"button\" bitMenuItem (click)=\"addCipher()\">\n          <i class=\"bwi bwi-fw bwi-globe\" aria-hidden=\"true\"></i>\n          {{ \"item\" | i18n }}\n        </button>\n        <button type=\"button\" bitMenuItem (click)=\"addCollection()\">\n          <i class=\"bwi bwi-fw bwi-collection\" aria-hidden=\"true\"></i>\n          {{ \"collection\" | i18n }}\n        </button>\n      </bit-menu>\n    </div>\n    <button\n      *ngIf=\"!organization.canCreateNewCollections\"\n      type=\"button\"\n      bitButton\n      buttonType=\"primary\"\n      (click)=\"addCipher()\"\n    >\n      <i class=\"bwi bwi-plus bwi-fw\" aria-hidden=\"true\"></i>\n      {{ \"newItem\" | i18n }}\n    </button>\n  </div>\n</div>\n","import { Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport {\n  SimpleDialogType,\n  DialogServiceAbstraction,\n  SimpleDialogCloseType,\n  SimpleDialogOptions,\n} from \"@bitwarden/angular/services/dialog\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { ProductType } from \"@bitwarden/common/enums\";\nimport { TreeNode } from \"@bitwarden/common/models/domain/tree-node\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\n\nimport {\n  CollectionAdminService,\n  CollectionAdminView,\n} from \"../../../admin-console/organizations/core\";\nimport { CollectionDialogTabType } from \"../../../admin-console/organizations/shared\";\nimport {\n  All,\n  RoutedVaultFilterModel,\n  Unassigned,\n} from \"../../individual-vault/vault-filter/shared/models/routed-vault-filter.model\";\n\n@Component({\n  selector: \"app-org-vault-header\",\n  templateUrl: \"./vault-header.component.html\",\n})\nexport class VaultHeaderComponent {\n  protected All = All;\n  protected Unassigned = Unassigned;\n\n  /**\n   * Boolean to determine the loading state of the header.\n   * Shows a loading spinner if set to true\n   */\n  @Input() loading: boolean;\n\n  /** Current active fitler */\n  @Input() filter: RoutedVaultFilterModel;\n\n  /** The organization currently being viewed */\n  @Input() organization: Organization;\n\n  /** Currently selected collection */\n  @Input() collection?: TreeNode<CollectionAdminView>;\n\n  /** Emits an event when the new item button is clicked in the header */\n  @Output() onAddCipher = new EventEmitter<void>();\n\n  /** Emits an event when the new collection button is clicked in the header */\n  @Output() onAddCollection = new EventEmitter<void>();\n\n  /** Emits an event when the edit collection button is clicked in the header */\n  @Output() onEditCollection = new EventEmitter<{ tab: CollectionDialogTabType }>();\n\n  /** Emits an event when the delete collection button is clicked in the header */\n  @Output() onDeleteCollection = new EventEmitter<void>();\n\n  protected CollectionDialogTabType = CollectionDialogTabType;\n  protected organizations$ = this.organizationService.organizations$;\n\n  constructor(\n    private organizationService: OrganizationService,\n    private i18nService: I18nService,\n    private dialogService: DialogServiceAbstraction,\n    private collectionAdminService: CollectionAdminService,\n    private router: Router\n  ) {}\n\n  get title() {\n    if (this.collection !== undefined) {\n      return this.collection.node.name;\n    }\n\n    if (this.filter.collectionId === Unassigned) {\n      return this.i18nService.t(\"unassigned\");\n    }\n\n    return `${this.organization.name} ${this.i18nService.t(\"vault\").toLowerCase()}`;\n  }\n\n  protected get showBreadcrumbs() {\n    return this.filter.collectionId !== undefined && this.filter.collectionId !== All;\n  }\n\n  /**\n   * A list of collection filters that form a chain from the organization root to currently selected collection.\n   * Begins from the organization root and excludes the currently selected collection.\n   */\n  protected get collections() {\n    if (this.collection == undefined) {\n      return [];\n    }\n\n    const collections = [this.collection];\n    while (collections[collections.length - 1].parent != undefined) {\n      collections.push(collections[collections.length - 1].parent);\n    }\n\n    return collections\n      .slice(1)\n      .reverse()\n      .map((treeNode) => treeNode.node);\n  }\n\n  private showFreeOrgUpgradeDialog(): void {\n    const orgUpgradeSimpleDialogOpts: SimpleDialogOptions = {\n      title: this.i18nService.t(\"upgradeOrganization\"),\n      content: this.i18nService.t(\n        this.organization.canEditSubscription\n          ? \"freeOrgMaxCollectionReachedManageBilling\"\n          : \"freeOrgMaxCollectionReachedNoManageBilling\",\n        this.organization.maxCollections\n      ),\n      type: SimpleDialogType.PRIMARY,\n    };\n\n    if (this.organization.canEditSubscription) {\n      orgUpgradeSimpleDialogOpts.acceptButtonText = this.i18nService.t(\"upgrade\");\n    } else {\n      orgUpgradeSimpleDialogOpts.acceptButtonText = this.i18nService.t(\"ok\");\n      orgUpgradeSimpleDialogOpts.cancelButtonText = null; // hide secondary btn\n    }\n\n    const simpleDialog = this.dialogService.openSimpleDialogRef(orgUpgradeSimpleDialogOpts);\n\n    firstValueFrom(simpleDialog.closed).then((result: SimpleDialogCloseType | undefined) => {\n      if (!result) {\n        return;\n      }\n\n      if (result == SimpleDialogCloseType.ACCEPT && this.organization.canEditSubscription) {\n        this.router.navigate([\"/organizations\", this.organization.id, \"billing\", \"subscription\"], {\n          queryParams: { upgrade: true },\n        });\n      }\n    });\n  }\n\n  get canEditCollection(): boolean {\n    // Only edit collections if not editing \"Unassigned\"\n    if (this.collection === undefined) {\n      return false;\n    }\n\n    // Otherwise, check if we can edit the specified collection\n    return (\n      this.organization.canEditAnyCollection ||\n      (this.organization.canEditAssignedCollections && this.collection?.node.assigned)\n    );\n  }\n\n  addCipher() {\n    this.onAddCipher.emit();\n  }\n\n  async addCollection() {\n    if (this.organization.planProductType === ProductType.Free) {\n      const collections = await this.collectionAdminService.getAll(this.organization.id);\n      if (collections.length === this.organization.maxCollections) {\n        this.showFreeOrgUpgradeDialog();\n        return;\n      }\n    }\n\n    this.onAddCollection.emit();\n  }\n\n  async editCollection(tab: CollectionDialogTabType): Promise<void> {\n    this.onEditCollection.emit({ tab });\n  }\n\n  get canDeleteCollection(): boolean {\n    // Only delete collections if not deleting \"Unassigned\"\n    if (this.collection === undefined) {\n      return false;\n    }\n\n    // Otherwise, check if we can delete the specified collection\n    return (\n      this.organization?.canDeleteAnyCollection ||\n      (this.organization?.canDeleteAssignedCollections && this.collection.node.assigned)\n    );\n  }\n\n  deleteCollection() {\n    this.onDeleteCollection.emit();\n  }\n}\n","<div class=\"container page-content\">\n  <div class=\"row\">\n    <div class=\"col-3\">\n      <div class=\"groupings\">\n        <div class=\"content\">\n          <div class=\"inner-content\">\n            <app-organization-vault-filter\n              #vaultFilter\n              [organization]=\"organization\"\n              [activeFilter]=\"activeFilter\"\n              [searchText]=\"currentSearchText$ | async\"\n              (searchTextChanged)=\"filterSearchText($event)\"\n            ></app-organization-vault-filter>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-9\">\n      <app-org-vault-header\n        [filter]=\"filter\"\n        [loading]=\"refreshing\"\n        [organization]=\"organization\"\n        [collection]=\"selectedCollection\"\n        (onAddCipher)=\"addCipher()\"\n        (onAddCollection)=\"addCollection()\"\n        (onEditCollection)=\"editCollection(selectedCollection.node, $event.tab)\"\n        (onDeleteCollection)=\"deleteCollection(selectedCollection.node)\"\n      ></app-org-vault-header>\n      <app-callout\n        type=\"warning\"\n        *ngIf=\"activeFilter.isDeleted\"\n        icon=\"bwi bwi-exclamation-triangle\"\n      >\n        {{ trashCleanupWarning }}\n      </app-callout>\n      <app-vault-items\n        [ciphers]=\"ciphers\"\n        [collections]=\"collections\"\n        [allCollections]=\"allCollections\"\n        [allOrganizations]=\"organization ? [organization] : []\"\n        [allGroups]=\"allGroups\"\n        [disabled]=\"loading\"\n        [showOwner]=\"false\"\n        [showCollections]=\"filter.type !== undefined\"\n        [showGroups]=\"\n          organization?.useGroups &&\n          ((filter.type === undefined && filter.collectionId === undefined) ||\n            filter.collectionId !== undefined)\n        \"\n        [showPremiumFeatures]=\"organization?.useTotp\"\n        [showBulkMove]=\"false\"\n        [showBulkTrashOptions]=\"filter.type === 'trash'\"\n        [useEvents]=\"organization?.useEvents\"\n        [editableCollections]=\"true\"\n        [cloneableOrganizationCiphers]=\"true\"\n        (onEvent)=\"onVaultItemsEvent($event)\"\n      >\n      </app-vault-items>\n      <div\n        class=\"tw-mt-6 tw-flex tw-h-full tw-flex-col tw-items-center tw-justify-start\"\n        *ngIf=\"showMissingCollectionPermissionMessage\"\n      >\n        <bit-icon [icon]=\"noItemIcon\" aria-hidden=\"true\"></bit-icon>\n        <p>{{ \"noPermissionToViewAllCollectionItems\" | i18n }}</p>\n      </div>\n      <div\n        class=\"tw-mt-6 tw-flex tw-h-full tw-flex-col tw-items-center tw-justify-start\"\n        *ngIf=\"isEmpty && !showMissingCollectionPermissionMessage && !performingInitialLoad\"\n      >\n        <bit-icon [icon]=\"noItemIcon\" aria-hidden=\"true\"></bit-icon>\n        <p>{{ \"noItemsInList\" | i18n }}</p>\n        <button\n          type=\"button\"\n          buttonType=\"primary\"\n          bitButton\n          (click)=\"addCipher()\"\n          *ngIf=\"filter.type !== 'trash' && filter.collectionId !== Unassigned\"\n        >\n          <i class=\"bwi bwi-plus bwi-fw\" aria-hidden=\"true\"></i>\n          {{ \"newItem\" | i18n }}\n        </button>\n      </div>\n      <div\n        class=\"tw-mt-6 tw-flex tw-h-full tw-flex-col tw-items-center tw-justify-start\"\n        *ngIf=\"performingInitialLoad\"\n      >\n        <i\n          class=\"bwi bwi-spinner bwi-spin text-muted\"\n          title=\"{{ 'loading' | i18n }}\"\n          aria-hidden=\"true\"\n        ></i>\n        <span class=\"sr-only\">{{ \"loading\" | i18n }}</span>\n      </div>\n    </div>\n  </div>\n  <ng-template #attachments></ng-template>\n  <ng-template #cipherAddEdit></ng-template>\n  <ng-template #collectionsModal></ng-template>\n  <ng-template #eventsTemplate></ng-template>\n</div>\n","import {\n  ChangeDetectorRef,\n  Component,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n  ViewContainerRef,\n} from \"@angular/core\";\nimport { ActivatedRoute, Params, Router } from \"@angular/router\";\nimport {\n  BehaviorSubject,\n  combineLatest,\n  firstValueFrom,\n  lastValueFrom,\n  Observable,\n  Subject,\n} from \"rxjs\";\nimport {\n  concatMap,\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  first,\n  map,\n  shareReplay,\n  switchMap,\n  takeUntil,\n  tap,\n} from \"rxjs/operators\";\n\nimport { SearchPipe } from \"@bitwarden/angular/pipes/search.pipe\";\nimport { DialogServiceAbstraction, SimpleDialogType } from \"@bitwarden/angular/services/dialog\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { SearchService } from \"@bitwarden/common/abstractions/search.service\";\nimport { TotpService } from \"@bitwarden/common/abstractions/totp.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\nimport { EventType } from \"@bitwarden/common/enums\";\nimport { ServiceUtils } from \"@bitwarden/common/misc/serviceUtils\";\nimport { TreeNode } from \"@bitwarden/common/models/domain/tree-node\";\nimport { BroadcasterService } from \"@bitwarden/common/platform/abstractions/broadcaster.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { PasswordRepromptService } from \"@bitwarden/common/vault/abstractions/password-reprompt.service\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { Icons } from \"@bitwarden/components\";\n\nimport {\n  CollectionAdminService,\n  CollectionAdminView,\n  GroupService,\n  GroupView,\n} from \"../../admin-console/organizations/core\";\nimport { EntityEventsComponent } from \"../../admin-console/organizations/manage/entity-events.component\";\nimport {\n  CollectionDialogResult,\n  CollectionDialogTabType,\n  openCollectionDialog,\n} from \"../../admin-console/organizations/shared\";\nimport { VaultFilterService } from \"../../vault/individual-vault/vault-filter/services/abstractions/vault-filter.service\";\nimport { VaultFilter } from \"../../vault/individual-vault/vault-filter/shared/models/vault-filter.model\";\nimport { VaultItemEvent } from \"../components/vault-items/vault-item-event\";\nimport {\n  BulkDeleteDialogResult,\n  openBulkDeleteDialog,\n} from \"../individual-vault/bulk-action-dialogs/bulk-delete-dialog/bulk-delete-dialog.component\";\nimport {\n  BulkRestoreDialogResult,\n  openBulkRestoreDialog,\n} from \"../individual-vault/bulk-action-dialogs/bulk-restore-dialog/bulk-restore-dialog.component\";\nimport { RoutedVaultFilterBridgeService } from \"../individual-vault/vault-filter/services/routed-vault-filter-bridge.service\";\nimport { RoutedVaultFilterService } from \"../individual-vault/vault-filter/services/routed-vault-filter.service\";\nimport { createFilterFunction } from \"../individual-vault/vault-filter/shared/models/filter-function\";\nimport {\n  All,\n  RoutedVaultFilterModel,\n  Unassigned,\n} from \"../individual-vault/vault-filter/shared/models/routed-vault-filter.model\";\nimport { getNestedCollectionTree } from \"../utils/collection-utils\";\n\nimport { AddEditComponent } from \"./add-edit.component\";\nimport { AttachmentsComponent } from \"./attachments.component\";\nimport { CollectionsComponent } from \"./collections.component\";\nimport { VaultFilterComponent } from \"./vault-filter/vault-filter.component\";\n\nconst BroadcasterSubscriptionId = \"OrgVaultComponent\";\nconst SearchTextDebounceInterval = 200;\n\n@Component({\n  selector: \"app-org-vault\",\n  templateUrl: \"vault.component.html\",\n  providers: [RoutedVaultFilterService, RoutedVaultFilterBridgeService],\n})\nexport class VaultComponent implements OnInit, OnDestroy {\n  protected Unassigned = Unassigned;\n\n  @ViewChild(\"vaultFilter\", { static: true })\n  vaultFilterComponent: VaultFilterComponent;\n  @ViewChild(\"attachments\", { read: ViewContainerRef, static: true })\n  attachmentsModalRef: ViewContainerRef;\n  @ViewChild(\"cipherAddEdit\", { read: ViewContainerRef, static: true })\n  cipherAddEditModalRef: ViewContainerRef;\n  @ViewChild(\"collectionsModal\", { read: ViewContainerRef, static: true })\n  collectionsModalRef: ViewContainerRef;\n  @ViewChild(\"eventsTemplate\", { read: ViewContainerRef, static: true })\n  eventsModalRef: ViewContainerRef;\n\n  trashCleanupWarning: string = null;\n  activeFilter: VaultFilter = new VaultFilter();\n\n  protected noItemIcon = Icons.Search;\n  protected performingInitialLoad = true;\n  protected refreshing = false;\n  protected processingEvent = false;\n  protected filter: RoutedVaultFilterModel = {};\n  protected organization: Organization;\n  protected allCollections: CollectionAdminView[];\n  protected allGroups: GroupView[];\n  protected ciphers: CipherView[];\n  protected collections: CollectionAdminView[];\n  protected selectedCollection: TreeNode<CollectionAdminView> | undefined;\n  protected isEmpty: boolean;\n  protected showMissingCollectionPermissionMessage: boolean;\n  protected currentSearchText$: Observable<string>;\n\n  private searchText$ = new Subject<string>();\n  private refresh$ = new BehaviorSubject<void>(null);\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    private route: ActivatedRoute,\n    private organizationService: OrganizationService,\n    protected vaultFilterService: VaultFilterService,\n    private routedVaultFilterBridgeService: RoutedVaultFilterBridgeService,\n    private routedVaultFilterService: RoutedVaultFilterService,\n    private router: Router,\n    private changeDetectorRef: ChangeDetectorRef,\n    private syncService: SyncService,\n    private i18nService: I18nService,\n    private modalService: ModalService,\n    private dialogService: DialogServiceAbstraction,\n    private messagingService: MessagingService,\n    private broadcasterService: BroadcasterService,\n    private ngZone: NgZone,\n    private platformUtilsService: PlatformUtilsService,\n    private cipherService: CipherService,\n    private passwordRepromptService: PasswordRepromptService,\n    private collectionAdminService: CollectionAdminService,\n    private searchService: SearchService,\n    private searchPipe: SearchPipe,\n    private groupService: GroupService,\n    private logService: LogService,\n    private eventCollectionService: EventCollectionService,\n    private totpService: TotpService,\n    private apiService: ApiService\n  ) {}\n\n  async ngOnInit() {\n    this.trashCleanupWarning = this.i18nService.t(\n      this.platformUtilsService.isSelfHost()\n        ? \"trashCleanupWarningSelfHosted\"\n        : \"trashCleanupWarning\"\n    );\n\n    const filter$ = this.routedVaultFilterService.filter$;\n    const organizationId$ = filter$.pipe(\n      map((filter) => filter.organizationId),\n      filter((filter) => filter !== undefined),\n      distinctUntilChanged()\n    );\n\n    const organization$ = organizationId$.pipe(\n      switchMap((organizationId) => this.organizationService.get$(organizationId)),\n      takeUntil(this.destroy$),\n      shareReplay({ refCount: false, bufferSize: 1 })\n    );\n\n    const firstSetup$ = combineLatest([organization$, this.route.queryParams]).pipe(\n      first(),\n      switchMap(async ([organization]) => {\n        this.organization = organization;\n\n        if (!organization.canUseAdminCollections) {\n          await this.syncService.fullSync(false);\n        }\n\n        return undefined;\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 })\n    );\n\n    this.broadcasterService.subscribe(BroadcasterSubscriptionId, (message: any) => {\n      this.ngZone.run(async () => {\n        switch (message.command) {\n          case \"syncCompleted\":\n            if (message.successfully) {\n              this.refresh();\n              this.changeDetectorRef.detectChanges();\n            }\n            break;\n        }\n      });\n    });\n\n    this.routedVaultFilterBridgeService.activeFilter$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((activeFilter) => {\n        this.activeFilter = activeFilter;\n      });\n\n    this.searchText$\n      .pipe(debounceTime(SearchTextDebounceInterval), takeUntil(this.destroy$))\n      .subscribe((searchText) =>\n        this.router.navigate([], {\n          queryParams: { search: Utils.isNullOrEmpty(searchText) ? null : searchText },\n          queryParamsHandling: \"merge\",\n          replaceUrl: true,\n        })\n      );\n\n    this.currentSearchText$ = this.route.queryParams.pipe(map((queryParams) => queryParams.search));\n\n    const allCollectionsWithoutUnassigned$ = organizationId$.pipe(\n      switchMap((orgId) => this.collectionAdminService.getAll(orgId)),\n      shareReplay({ refCount: true, bufferSize: 1 })\n    );\n\n    const allCollections$ = combineLatest([organizationId$, allCollectionsWithoutUnassigned$]).pipe(\n      map(([organizationId, allCollections]) => {\n        const noneCollection = new CollectionAdminView();\n        noneCollection.name = this.i18nService.t(\"unassigned\");\n        noneCollection.id = Unassigned;\n        noneCollection.organizationId = organizationId;\n        return allCollections.concat(noneCollection);\n      })\n    );\n\n    const allGroups$ = organizationId$.pipe(\n      switchMap((organizationId) => this.groupService.getAll(organizationId)),\n      shareReplay({ refCount: true, bufferSize: 1 })\n    );\n\n    const allCiphers$ = organization$.pipe(\n      concatMap(async (organization) => {\n        let ciphers;\n        if (organization.canEditAnyCollection) {\n          ciphers = await this.cipherService.getAllFromApiForOrganization(organization.id);\n        } else {\n          ciphers = (await this.cipherService.getAllDecrypted()).filter(\n            (c) => c.organizationId === organization.id\n          );\n        }\n        await this.searchService.indexCiphers(ciphers, organization.id);\n        return ciphers;\n      })\n    );\n\n    const ciphers$ = combineLatest([allCiphers$, filter$, this.currentSearchText$]).pipe(\n      filter(([ciphers, filter]) => ciphers != undefined && filter != undefined),\n      concatMap(async ([ciphers, filter, searchText]) => {\n        if (filter.collectionId === undefined && filter.type === undefined) {\n          return [];\n        }\n\n        const filterFunction = createFilterFunction(filter);\n\n        if (this.searchService.isSearchable(searchText)) {\n          return await this.searchService.searchCiphers(searchText, [filterFunction], ciphers);\n        }\n\n        return ciphers.filter(filterFunction);\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 })\n    );\n\n    const nestedCollections$ = allCollections$.pipe(\n      map((collections) => getNestedCollectionTree(collections)),\n      shareReplay({ refCount: true, bufferSize: 1 })\n    );\n\n    const collections$ = combineLatest([nestedCollections$, filter$, this.currentSearchText$]).pipe(\n      filter(([collections, filter]) => collections != undefined && filter != undefined),\n      map(([collections, filter, searchText]) => {\n        if (\n          filter.collectionId === Unassigned ||\n          (filter.collectionId === undefined && filter.type !== undefined)\n        ) {\n          return [];\n        }\n\n        let collectionsToReturn = [];\n        if (filter.collectionId === undefined || filter.collectionId === All) {\n          collectionsToReturn = collections.map((c) => c.node);\n        } else {\n          const selectedCollection = ServiceUtils.getTreeNodeObjectFromList(\n            collections,\n            filter.collectionId\n          );\n          collectionsToReturn = selectedCollection?.children.map((c) => c.node) ?? [];\n        }\n\n        if (this.searchService.isSearchable(searchText)) {\n          collectionsToReturn = this.searchPipe.transform(\n            collectionsToReturn,\n            searchText,\n            (collection) => collection.name,\n            (collection) => collection.id\n          );\n        }\n\n        return collectionsToReturn;\n      }),\n      takeUntil(this.destroy$),\n      shareReplay({ refCount: true, bufferSize: 1 })\n    );\n\n    const selectedCollection$ = combineLatest([nestedCollections$, filter$]).pipe(\n      filter(([collections, filter]) => collections != undefined && filter != undefined),\n      map(([collections, filter]) => {\n        if (\n          filter.collectionId === undefined ||\n          filter.collectionId === All ||\n          filter.collectionId === Unassigned\n        ) {\n          return undefined;\n        }\n\n        return ServiceUtils.getTreeNodeObjectFromList(collections, filter.collectionId);\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 })\n    );\n\n    const showMissingCollectionPermissionMessage$ = combineLatest([\n      filter$,\n      selectedCollection$,\n      organization$,\n    ]).pipe(\n      map(([filter, collection, organization]) => {\n        return (\n          // Filtering by unassigned, show message if not admin\n          (filter.collectionId === Unassigned && !organization.canUseAdminCollections) ||\n          // Filtering by a collection, so show message if user is not assigned\n          (collection != undefined &&\n            !collection.node.assigned &&\n            !organization.canUseAdminCollections)\n        );\n      }),\n      shareReplay({ refCount: true, bufferSize: 1 })\n    );\n\n    firstSetup$\n      .pipe(\n        switchMap(() => combineLatest([this.route.queryParams, organization$])),\n        switchMap(async ([qParams, organization]) => {\n          const cipherId = getCipherIdFromParams(qParams);\n          if (!cipherId) {\n            return;\n          }\n          if (\n            // Handle users with implicit collection access since they use the admin endpoint\n            organization.canUseAdminCollections ||\n            (await this.cipherService.get(cipherId)) != null\n          ) {\n            this.editCipherId(cipherId);\n          } else {\n            this.platformUtilsService.showToast(\n              \"error\",\n              this.i18nService.t(\"errorOccurred\"),\n              this.i18nService.t(\"unknownCipher\")\n            );\n            this.router.navigate([], {\n              queryParams: { cipherId: null, itemId: null },\n              queryParamsHandling: \"merge\",\n            });\n          }\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe();\n\n    firstSetup$\n      .pipe(\n        switchMap(() => combineLatest([this.route.queryParams, organization$, allCiphers$])),\n        switchMap(async ([qParams, organization, allCiphers$]) => {\n          const cipherId = qParams.viewEvents;\n          if (!cipherId) {\n            return;\n          }\n          const cipher = allCiphers$.find((c) => c.id === cipherId);\n          if (organization.useEvents && cipher != undefined) {\n            this.viewEvents(cipher);\n          } else {\n            this.platformUtilsService.showToast(\n              \"error\",\n              this.i18nService.t(\"errorOccurred\"),\n              this.i18nService.t(\"unknownCipher\")\n            );\n            this.router.navigate([], {\n              queryParams: { viewEvents: null },\n              queryParamsHandling: \"merge\",\n            });\n          }\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe();\n\n    firstSetup$\n      .pipe(\n        switchMap(() => this.refresh$),\n        tap(() => (this.refreshing = true)),\n        switchMap(() =>\n          combineLatest([\n            organization$,\n            filter$,\n            allCollections$,\n            allGroups$,\n            ciphers$,\n            collections$,\n            selectedCollection$,\n            showMissingCollectionPermissionMessage$,\n          ])\n        ),\n        takeUntil(this.destroy$)\n      )\n      .subscribe(\n        ([\n          organization,\n          filter,\n          allCollections,\n          allGroups,\n          ciphers,\n          collections,\n          selectedCollection,\n          showMissingCollectionPermissionMessage,\n        ]) => {\n          this.organization = organization;\n          this.filter = filter;\n          this.allCollections = allCollections;\n          this.allGroups = allGroups;\n          this.ciphers = ciphers;\n          this.collections = collections;\n          this.selectedCollection = selectedCollection;\n          this.showMissingCollectionPermissionMessage = showMissingCollectionPermissionMessage;\n\n          this.isEmpty = collections?.length === 0 && ciphers?.length === 0;\n\n          // This is a temporary fix to avoid double fetching collections.\n          // TODO: Remove when implementing new VVR menu\n          this.vaultFilterService.reloadCollections(allCollections);\n\n          this.refreshing = false;\n          this.performingInitialLoad = false;\n        }\n      );\n  }\n\n  get loading() {\n    return this.refreshing || this.processingEvent;\n  }\n\n  ngOnDestroy() {\n    this.broadcasterService.unsubscribe(BroadcasterSubscriptionId);\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  async onVaultItemsEvent(event: VaultItemEvent) {\n    this.processingEvent = true;\n\n    try {\n      if (event.type === \"viewAttachments\") {\n        await this.editCipherAttachments(event.item);\n      } else if (event.type === \"viewCollections\") {\n        await this.editCipherCollections(event.item);\n      } else if (event.type === \"clone\") {\n        await this.cloneCipher(event.item);\n      } else if (event.type === \"restore\") {\n        if (event.items.length === 1) {\n          await this.restore(event.items[0]);\n        } else {\n          await this.bulkRestore(event.items);\n        }\n      } else if (event.type === \"delete\") {\n        const ciphers = event.items.filter((i) => i.collection === undefined).map((i) => i.cipher);\n        const collections = event.items\n          .filter((i) => i.cipher === undefined)\n          .map((i) => i.collection);\n        if (ciphers.length === 1 && collections.length === 0) {\n          await this.deleteCipher(ciphers[0]);\n        } else if (ciphers.length === 0 && collections.length === 1) {\n          await this.deleteCollection(collections[0]);\n        } else {\n          await this.bulkDelete(ciphers, collections, this.organization);\n        }\n      } else if (event.type === \"copyField\") {\n        await this.copy(event.item, event.field);\n      } else if (event.type === \"edit\") {\n        await this.editCollection(event.item, CollectionDialogTabType.Info);\n      } else if (event.type === \"viewAccess\") {\n        await this.editCollection(event.item, CollectionDialogTabType.Access);\n      } else if (event.type === \"viewEvents\") {\n        await this.viewEvents(event.item);\n      }\n    } finally {\n      this.processingEvent = false;\n    }\n  }\n\n  filterSearchText(searchText: string) {\n    this.searchText$.next(searchText);\n  }\n\n  async editCipherAttachments(cipher: CipherView) {\n    if (this.organization.maxStorageGb == null || this.organization.maxStorageGb === 0) {\n      this.messagingService.send(\"upgradeOrganization\", { organizationId: cipher.organizationId });\n      return;\n    }\n\n    let madeAttachmentChanges = false;\n\n    const [modal] = await this.modalService.openViewRef(\n      AttachmentsComponent,\n      this.attachmentsModalRef,\n      (comp) => {\n        comp.organization = this.organization;\n        comp.cipherId = cipher.id;\n        comp.onUploadedAttachment\n          .pipe(takeUntil(this.destroy$))\n          .subscribe(() => (madeAttachmentChanges = true));\n        comp.onDeletedAttachment\n          .pipe(takeUntil(this.destroy$))\n          .subscribe(() => (madeAttachmentChanges = true));\n      }\n    );\n\n    modal.onClosed.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      if (madeAttachmentChanges) {\n        this.refresh();\n      }\n      madeAttachmentChanges = false;\n    });\n  }\n\n  async editCipherCollections(cipher: CipherView) {\n    const currCollections = await firstValueFrom(this.vaultFilterService.filteredCollections$);\n    const [modal] = await this.modalService.openViewRef(\n      CollectionsComponent,\n      this.collectionsModalRef,\n      (comp) => {\n        comp.collectionIds = cipher.collectionIds;\n        comp.collections = currCollections.filter((c) => !c.readOnly && c.id != Unassigned);\n        comp.organization = this.organization;\n        comp.cipherId = cipher.id;\n        comp.onSavedCollections.pipe(takeUntil(this.destroy$)).subscribe(() => {\n          modal.close();\n          this.refresh();\n        });\n      }\n    );\n  }\n\n  async addCipher() {\n    const collections = (await firstValueFrom(this.vaultFilterService.filteredCollections$)).filter(\n      (c) => !c.readOnly && c.id != Unassigned\n    );\n\n    await this.editCipher(null, (comp) => {\n      comp.type = this.activeFilter.cipherType;\n      comp.collections = collections;\n      if (this.activeFilter.collectionId) {\n        comp.collectionIds = [this.activeFilter.collectionId];\n      }\n    });\n  }\n\n  async navigateToCipher(cipher: CipherView) {\n    this.go({ itemId: cipher?.id });\n  }\n\n  async editCipher(\n    cipher: CipherView,\n    additionalComponentParameters?: (comp: AddEditComponent) => void\n  ) {\n    return this.editCipherId(cipher?.id, additionalComponentParameters);\n  }\n\n  async editCipherId(\n    cipherId: string,\n    additionalComponentParameters?: (comp: AddEditComponent) => void\n  ) {\n    const cipher = await this.cipherService.get(cipherId);\n    if (cipher != null && cipher.reprompt != 0) {\n      if (!(await this.passwordRepromptService.showPasswordPrompt())) {\n        this.go({ cipherId: null, itemId: null });\n        return;\n      }\n    }\n\n    const defaultComponentParameters = (comp: AddEditComponent) => {\n      comp.organization = this.organization;\n      comp.organizationId = this.organization.id;\n      comp.cipherId = cipherId;\n      comp.onSavedCipher.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        modal.close();\n        this.refresh();\n      });\n      comp.onDeletedCipher.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        modal.close();\n        this.refresh();\n      });\n      comp.onRestoredCipher.pipe(takeUntil(this.destroy$)).subscribe(() => {\n        modal.close();\n        this.refresh();\n      });\n    };\n\n    const [modal, childComponent] = await this.modalService.openViewRef(\n      AddEditComponent,\n      this.cipherAddEditModalRef,\n      additionalComponentParameters == null\n        ? defaultComponentParameters\n        : (comp) => {\n            defaultComponentParameters(comp);\n            additionalComponentParameters(comp);\n          }\n    );\n\n    modal.onClosedPromise().then(() => {\n      this.go({ cipherId: null, itemId: null });\n    });\n\n    return childComponent;\n  }\n\n  async cloneCipher(cipher: CipherView) {\n    const collections = (await firstValueFrom(this.vaultFilterService.filteredCollections$)).filter(\n      (c) => !c.readOnly && c.id != Unassigned\n    );\n\n    await this.editCipher(cipher, (comp) => {\n      comp.cloneMode = true;\n      comp.collections = collections;\n      comp.collectionIds = cipher.collectionIds;\n    });\n  }\n\n  async restore(c: CipherView): Promise<boolean> {\n    if (!(await this.repromptCipher([c]))) {\n      return;\n    }\n\n    if (!c.isDeleted) {\n      return;\n    }\n\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: { key: \"restoreItem\" },\n      content: { key: \"restoreItemConfirmation\" },\n      type: SimpleDialogType.WARNING,\n    });\n\n    if (!confirmed) {\n      return false;\n    }\n\n    try {\n      const asAdmin = this.organization?.canEditAnyCollection;\n      await this.cipherService.restoreWithServer(c.id, asAdmin);\n      this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"restoredItem\"));\n      this.refresh();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async bulkRestore(ciphers: CipherView[]) {\n    if (!(await this.repromptCipher(ciphers))) {\n      return;\n    }\n\n    const selectedCipherIds = ciphers.map((cipher) => cipher.id);\n    if (selectedCipherIds.length === 0) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\")\n      );\n      return;\n    }\n\n    const dialog = openBulkRestoreDialog(this.dialogService, {\n      data: { cipherIds: selectedCipherIds },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    if (result === BulkRestoreDialogResult.Restored) {\n      this.refresh();\n    }\n  }\n\n  async deleteCipher(c: CipherView): Promise<boolean> {\n    if (!(await this.repromptCipher([c]))) {\n      return;\n    }\n\n    const permanent = c.isDeleted;\n\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: { key: permanent ? \"permanentlyDeleteItem\" : \"deleteItem\" },\n      content: { key: permanent ? \"permanentlyDeleteItemConfirmation\" : \"deleteItemConfirmation\" },\n      type: SimpleDialogType.WARNING,\n    });\n\n    if (!confirmed) {\n      return false;\n    }\n\n    try {\n      await this.deleteCipherWithServer(c.id, permanent);\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(permanent ? \"permanentlyDeletedItem\" : \"deletedItem\")\n      );\n      this.refresh();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async deleteCollection(collection: CollectionView): Promise<void> {\n    if (\n      !this.organization.canDeleteAssignedCollections &&\n      !this.organization.canDeleteAnyCollection\n    ) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"missingPermissions\")\n      );\n      return;\n    }\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: collection.name,\n      content: { key: \"deleteCollectionConfirmation\" },\n      type: SimpleDialogType.WARNING,\n    });\n\n    if (!confirmed) {\n      return;\n    }\n    try {\n      await this.apiService.deleteCollection(this.organization?.id, collection.id);\n      this.platformUtilsService.showToast(\n        \"success\",\n        null,\n        this.i18nService.t(\"deletedCollectionId\", collection.name)\n      );\n\n      // Navigate away if we deleted the colletion we were viewing\n      if (this.selectedCollection?.node.id === collection.id) {\n        this.router.navigate([], {\n          queryParams: { collectionId: this.selectedCollection.parent?.node.id ?? null },\n          queryParamsHandling: \"merge\",\n          replaceUrl: true,\n        });\n      }\n\n      this.refresh();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async bulkDelete(\n    ciphers: CipherView[],\n    collections: CollectionView[],\n    organization: Organization\n  ) {\n    if (!(await this.repromptCipher(ciphers))) {\n      return;\n    }\n\n    if (ciphers.length === 0 && collections.length === 0) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\")\n      );\n      return;\n    }\n    const dialog = openBulkDeleteDialog(this.dialogService, {\n      data: {\n        permanent: this.filter.type === \"trash\",\n        cipherIds: ciphers.map((c) => c.id),\n        collectionIds: collections.map((c) => c.id),\n        organization,\n      },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    if (result === BulkDeleteDialogResult.Deleted) {\n      this.refresh();\n    }\n  }\n\n  async copy(cipher: CipherView, field: \"username\" | \"password\" | \"totp\") {\n    let aType;\n    let value;\n    let typeI18nKey;\n\n    if (field === \"username\") {\n      aType = \"Username\";\n      value = cipher.login.username;\n      typeI18nKey = \"username\";\n    } else if (field === \"password\") {\n      aType = \"Password\";\n      value = cipher.login.password;\n      typeI18nKey = \"password\";\n    } else if (field === \"totp\") {\n      aType = \"TOTP\";\n      value = await this.totpService.getCode(cipher.login.totp);\n      typeI18nKey = \"verificationCodeTotp\";\n    } else {\n      this.platformUtilsService.showToast(\"info\", null, this.i18nService.t(\"unexpectedError\"));\n      return;\n    }\n\n    if (\n      this.passwordRepromptService.protectedFields().includes(aType) &&\n      !(await this.repromptCipher([cipher]))\n    ) {\n      return;\n    }\n\n    if (!cipher.viewPassword) {\n      return;\n    }\n\n    this.platformUtilsService.copyToClipboard(value, { window: window });\n    this.platformUtilsService.showToast(\n      \"info\",\n      null,\n      this.i18nService.t(\"valueCopied\", this.i18nService.t(typeI18nKey))\n    );\n\n    if (field === \"password\") {\n      this.eventCollectionService.collect(EventType.Cipher_ClientCopiedPassword, cipher.id);\n    } else if (field === \"totp\") {\n      this.eventCollectionService.collect(EventType.Cipher_ClientCopiedHiddenField, cipher.id);\n    }\n  }\n\n  async addCollection(): Promise<void> {\n    const dialog = openCollectionDialog(this.dialogService, {\n      data: {\n        organizationId: this.organization?.id,\n        parentCollectionId: this.selectedCollection?.node.id,\n      },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    if (result === CollectionDialogResult.Saved || result === CollectionDialogResult.Deleted) {\n      this.refresh();\n    }\n  }\n\n  async editCollection(c: CollectionView, tab: CollectionDialogTabType): Promise<void> {\n    const dialog = openCollectionDialog(this.dialogService, {\n      data: { collectionId: c?.id, organizationId: this.organization?.id, initialTab: tab },\n    });\n\n    const result = await lastValueFrom(dialog.closed);\n    if (result === CollectionDialogResult.Saved || result === CollectionDialogResult.Deleted) {\n      this.refresh();\n    }\n  }\n\n  async viewEvents(cipher: CipherView) {\n    await this.modalService.openViewRef(EntityEventsComponent, this.eventsModalRef, (comp) => {\n      comp.name = cipher.name;\n      comp.organizationId = this.organization.id;\n      comp.entityId = cipher.id;\n      comp.showUser = true;\n      comp.entity = \"cipher\";\n    });\n  }\n\n  protected deleteCipherWithServer(id: string, permanent: boolean) {\n    const asAdmin = this.organization?.canEditAnyCollection;\n    return permanent\n      ? this.cipherService.deleteWithServer(id, asAdmin)\n      : this.cipherService.softDeleteWithServer(id, asAdmin);\n  }\n\n  protected async repromptCipher(ciphers: CipherView[]) {\n    const notProtected = !ciphers.find((cipher) => cipher.reprompt !== CipherRepromptType.None);\n\n    return notProtected || (await this.passwordRepromptService.showPasswordPrompt());\n  }\n\n  private refresh() {\n    this.refresh$.next();\n  }\n\n  private go(queryParams: any = null) {\n    if (queryParams == null) {\n      queryParams = {\n        type: this.activeFilter.cipherType,\n        collectionId: this.activeFilter.collectionId,\n        deleted: this.activeFilter.isDeleted || null,\n      };\n    }\n\n    this.router.navigate([], {\n      relativeTo: this.route,\n      queryParams: queryParams,\n      queryParamsHandling: \"merge\",\n      replaceUrl: true,\n    });\n  }\n}\n\n/**\n * Allows backwards compatibility with\n * old links that used the original `cipherId` param\n */\nconst getCipherIdFromParams = (params: Params): string => {\n  return params[\"itemId\"] || params[\"cipherId\"];\n};\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { canAccessVaultTab } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\n\nimport { OrganizationPermissionsGuard } from \"../../admin-console/organizations/guards/org-permissions.guard\";\n\nimport { VaultComponent } from \"./vault.component\";\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: VaultComponent,\n    canActivate: [OrganizationPermissionsGuard],\n    data: { titleId: \"vaults\", organizationPermissions: canAccessVaultTab },\n  },\n];\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class VaultRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { BreadcrumbsModule } from \"@bitwarden/components\";\n\nimport { LooseComponentsModule } from \"../../shared/loose-components.module\";\nimport { SharedModule } from \"../../shared/shared.module\";\nimport { OrganizationBadgeModule } from \"../../vault/individual-vault/organization-badge/organization-badge.module\";\nimport { PipesModule } from \"../../vault/individual-vault/pipes/pipes.module\";\nimport { VaultItemsModule } from \"../components/vault-items/vault-items.module\";\n\nimport { CollectionBadgeModule } from \"./collection-badge/collection-badge.module\";\nimport { GroupBadgeModule } from \"./group-badge/group-badge.module\";\nimport { VaultFilterModule } from \"./vault-filter/vault-filter.module\";\nimport { VaultHeaderComponent } from \"./vault-header/vault-header.component\";\nimport { VaultRoutingModule } from \"./vault-routing.module\";\nimport { VaultComponent } from \"./vault.component\";\n\n@NgModule({\n  imports: [\n    VaultRoutingModule,\n    VaultFilterModule,\n    SharedModule,\n    LooseComponentsModule,\n    GroupBadgeModule,\n    CollectionBadgeModule,\n    OrganizationBadgeModule,\n    PipesModule,\n    BreadcrumbsModule,\n    VaultItemsModule,\n  ],\n  declarations: [VaultComponent, VaultHeaderComponent],\n  exports: [VaultComponent],\n})\nexport class VaultModule {}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { AuthGuard } from \"@bitwarden/angular/auth/guards/auth.guard\";\nimport {\n  canAccessOrgAdmin,\n  canAccessGroupsTab,\n  canAccessMembersTab,\n  canAccessVaultTab,\n  canAccessReportingTab,\n  canAccessSettingsTab,\n} from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\n\nimport { OrganizationPermissionsGuard } from \"../../admin-console/organizations/guards/org-permissions.guard\";\nimport { OrganizationRedirectGuard } from \"../../admin-console/organizations/guards/org-redirect.guard\";\nimport { OrganizationLayoutComponent } from \"../../admin-console/organizations/layouts/organization-layout.component\";\nimport { GroupsComponent } from \"../../admin-console/organizations/manage/groups.component\";\nimport { VaultModule } from \"../../vault/org-vault/vault.module\";\n\nconst routes: Routes = [\n  {\n    path: \":organizationId\",\n    component: OrganizationLayoutComponent,\n    canActivate: [AuthGuard, OrganizationPermissionsGuard],\n    data: {\n      organizationPermissions: canAccessOrgAdmin,\n    },\n    children: [\n      {\n        path: \"\",\n        pathMatch: \"full\",\n        canActivate: [OrganizationRedirectGuard],\n        data: {\n          autoRedirectCallback: getOrganizationRoute,\n        },\n        children: [], // This is required to make the auto redirect work, },\n      },\n      {\n        path: \"vault\",\n        loadChildren: () => VaultModule,\n      },\n      {\n        path: \"settings\",\n        loadChildren: () =>\n          import(\"./settings/organization-settings.module\").then(\n            (m) => m.OrganizationSettingsModule\n          ),\n      },\n      {\n        path: \"members\",\n        loadChildren: () => import(\"./members\").then((m) => m.MembersModule),\n      },\n      {\n        path: \"groups\",\n        component: GroupsComponent,\n        canActivate: [OrganizationPermissionsGuard],\n        data: {\n          titleId: \"groups\",\n          organizationPermissions: canAccessGroupsTab,\n        },\n      },\n      {\n        path: \"reporting\",\n        loadChildren: () =>\n          import(\"../organizations/reporting/organization-reporting.module\").then(\n            (m) => m.OrganizationReportingModule\n          ),\n      },\n      {\n        path: \"billing\",\n        loadChildren: () =>\n          import(\"../../billing/organizations/organization-billing.module\").then(\n            (m) => m.OrganizationBillingModule\n          ),\n      },\n    ],\n  },\n];\n\nfunction getOrganizationRoute(organization: Organization): string {\n  if (canAccessVaultTab(organization)) {\n    return \"vault\";\n  }\n  if (canAccessMembersTab(organization)) {\n    return \"members\";\n  }\n  if (canAccessGroupsTab(organization)) {\n    return \"groups\";\n  }\n  if (canAccessReportingTab(organization)) {\n    return \"reporting\";\n  }\n  if (canAccessSettingsTab(organization)) {\n    return \"settings\";\n  }\n  return undefined;\n}\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OrganizationsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { CoreOrganizationModule } from \"./core\";\nimport { GroupAddEditComponent } from \"./manage/group-add-edit.component\";\nimport { GroupsComponent } from \"./manage/groups.component\";\nimport { OrganizationsRoutingModule } from \"./organization-routing.module\";\nimport { SharedOrganizationModule } from \"./shared\";\nimport { AccessSelectorModule } from \"./shared/components/access-selector\";\n\n@NgModule({\n  imports: [\n    SharedOrganizationModule,\n    AccessSelectorModule,\n    CoreOrganizationModule,\n    OrganizationsRoutingModule,\n  ],\n  declarations: [GroupsComponent, GroupAddEditComponent],\n})\nexport class OrganizationModule {}\n","import { AbstractControl, FormArray } from \"@angular/forms\";\n\nexport type SelectionItemId = {\n  id: string;\n};\n\nfunction findSortedIndex<T>(sortedArray: T[], val: T, compareFn: (a: T, b: T) => number) {\n  let low = 0;\n  let high = sortedArray.length || 0;\n  let mid = -1,\n    c = 0;\n  while (low < high) {\n    mid = Math.floor((low + high) / 2);\n    c = compareFn(sortedArray[mid], val);\n    if (c < 0) {\n      low = mid + 1;\n    } else if (c > 0) {\n      high = mid;\n    } else {\n      return mid;\n    }\n  }\n  return low;\n}\n\n/**\n * Utility to help manage a list of selectable items for use with Reactive Angular forms and FormArrays.\n *\n * It supports selecting/deselecting items, keeping items sorted, and synchronizing the selected items\n * with an array of FormControl.\n *\n * The first type parameter TItem represents the item being selected/deselected, it must have an `id`\n * property for identification/comparison. The second type parameter TControlValue represents the value\n * type of the form control.\n */\nexport class FormSelectionList<\n  TItem extends SelectionItemId,\n  TControlValue extends SelectionItemId\n> {\n  allItems: TItem[] = [];\n  /**\n   * Sorted list of selected items\n   * Immutable and should be recreated whenever a modification is made\n   */\n  selectedItems: TItem[] = [];\n\n  /**\n   * Sorted list of deselected items\n   * Immutable and should be recreated whenever a modification is made\n   */\n  deselectedItems: TItem[] = [];\n\n  /**\n   * Sorted FormArray that corresponds and stays in sync with the selectedItems\n   */\n  formArray: FormArray<AbstractControl<Partial<TControlValue>, TControlValue>> = new FormArray([]);\n\n  /**\n   * Construct a new FormSelectionList\n   * @param controlFactory - Factory responsible for creating initial form controls for each selected item. It is\n   * provided a copy of the selected item for any form control initialization logic. Specify any additional form\n   * control options or validators here.\n   * @param compareFn - Comparison function used for sorting the items.\n   */\n  constructor(\n    private controlFactory: (item: TItem) => AbstractControl<Partial<TControlValue>, TControlValue>,\n    private compareFn: (a: TItem, b: TItem) => number\n  ) {}\n\n  /**\n   * Select multiple items by their ids at once. Optionally provide an initial form control value.\n   * @param ids - List of ids to select\n   * @param initialValue - Value that will be applied to the corresponding form controls\n   * The provided `id` arguments will be automatically assigned to each form control value\n   */\n  selectItems(ids: string[], initialValue?: Partial<TControlValue> | undefined) {\n    for (const id of ids) {\n      this.selectItem(id, initialValue);\n    }\n  }\n\n  /**\n   * Deselect multiple items by their ids at once\n   * @param ids - List of ids to deselect\n   */\n  deselectItems(ids: string[]) {\n    for (const id of ids) {\n      this.deselectItem(id);\n    }\n  }\n\n  deselectAll() {\n    this.formArray.clear();\n    this.selectedItems = [];\n    this.deselectedItems = [...this.allItems];\n  }\n\n  /**\n   * Select a single item by id.\n   *\n   * Maintains list order for both selected items, deselected items, and the FormArray.\n   *\n   * @param id - Id of the item to select\n   * @param initialValue - Value that will be applied to the corresponding form control for the selected item.\n   * The provided `id` argument will be automatically assigned unless explicitly set in the initialValue.\n   */\n  selectItem(id: string, initialValue?: Partial<TControlValue>) {\n    const index = this.deselectedItems.findIndex((o) => o.id === id);\n\n    if (index === -1) {\n      return;\n    }\n\n    const selectedOption = this.deselectedItems[index];\n\n    // Note: Changes to the deselected/selected arrays must create a new copy of the array\n    // in order for Angular's Change Detection to pick up the modification (i.e. treat the arrays as immutable)\n\n    // Remove from the list of deselected options\n    this.deselectedItems = [\n      ...this.deselectedItems.slice(0, index),\n      ...this.deselectedItems.slice(index + 1),\n    ];\n\n    // Insert into the sorted selected options list\n    const sortedInsertIndex = findSortedIndex(this.selectedItems, selectedOption, this.compareFn);\n\n    this.selectedItems = [\n      ...this.selectedItems.slice(0, sortedInsertIndex),\n      selectedOption,\n      ...this.selectedItems.slice(sortedInsertIndex),\n    ];\n\n    const newControl = this.controlFactory(selectedOption);\n\n    // Patch the value and ensure the `id` is set\n    newControl.patchValue({\n      id,\n      ...initialValue,\n    });\n\n    this.formArray.insert(sortedInsertIndex, newControl);\n  }\n\n  /**\n   * Deselect a single item by id.\n   *\n   * Maintains list order for both selected items, deselected items, and the FormArray.\n   *\n   * @param id - Id of the item to deselect\n   */\n  deselectItem(id: string) {\n    const index = this.selectedItems.findIndex((o) => o.id === id);\n\n    if (index === -1) {\n      return;\n    }\n\n    const deselectedOption = this.selectedItems[index];\n\n    // Note: Changes to the deselected/selected arrays must create a new copy of the array\n    // in order for Angular's Change Detection to pick up the modification (i.e. treat the arrays as immutable)\n\n    // Remove from the list of selected items (and FormArray)\n    this.selectedItems = [\n      ...this.selectedItems.slice(0, index),\n      ...this.selectedItems.slice(index + 1),\n    ];\n    this.formArray.removeAt(index);\n\n    // Insert into the sorted deselected array\n    const sortedInsertIndex = findSortedIndex(\n      this.deselectedItems,\n      deselectedOption,\n      this.compareFn\n    );\n\n    this.deselectedItems = [\n      ...this.deselectedItems.slice(0, sortedInsertIndex),\n      deselectedOption,\n      ...this.deselectedItems.slice(sortedInsertIndex),\n    ];\n  }\n\n  /**\n   * Populate the list of deselected items, and optional specify which items should be selected and with what initial\n   * value for their Form Control\n   * @param items - A list of all items. (Will be sorted internally)\n   * @param selectedItems - The items to select initially\n   */\n  populateItems(items: TItem[], selectedItems: TControlValue[] = []) {\n    this.formArray.clear();\n    this.allItems = [...items].sort(this.compareFn);\n    this.selectedItems = [];\n    this.deselectedItems = [...this.allItems];\n\n    for (const selectedItem of selectedItems) {\n      this.selectItem(selectedItem.id, selectedItem);\n    }\n  }\n\n  /**\n   * Helper method to iterate over each \"selected\" form control and its corresponding item\n   * @param fn - The function to call for each form control and its corresponding item\n   */\n  forEachControlItem(\n    fn: (control: AbstractControl<Partial<TControlValue>, TControlValue>, value: TItem) => void\n  ) {\n    for (let i = 0; i < this.formArray.length; i++) {\n      // The selectedItems array and formArray are explicitly kept in sync,\n      // so we can safely assume the index of the form control and item are the same\n      fn(this.formArray.at(i), this.selectedItems[i]);\n    }\n  }\n}\n","import { Pipe, PipeTransform } from \"@angular/core\";\n\nimport { OrganizationUserType } from \"@bitwarden/common/admin-console/enums\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\n\n@Pipe({\n  name: \"userType\",\n})\nexport class UserTypePipe implements PipeTransform {\n  constructor(private i18nService: I18nService) {}\n\n  transform(value?: OrganizationUserType, unknownText?: string): string {\n    if (value == null) {\n      return unknownText ?? this.i18nService.t(\"unknown\");\n    }\n    switch (value) {\n      case OrganizationUserType.Owner:\n        return this.i18nService.t(\"owner\");\n      case OrganizationUserType.Admin:\n        return this.i18nService.t(\"admin\");\n      case OrganizationUserType.User:\n        return this.i18nService.t(\"user\");\n      case OrganizationUserType.Manager:\n        return this.i18nService.t(\"manager\");\n      case OrganizationUserType.Custom:\n        return this.i18nService.t(\"custom\");\n    }\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable tailwindcss/no-custom-classname -->\n<div class=\"tw-flex\">\n  <bit-form-field *ngIf=\"permissionMode == 'edit'\" class=\"tw-mr-3 tw-shrink-0\">\n    <bit-label>{{ \"permission\" | i18n }}</bit-label>\n    <!--\n      Built-in select height differs between browsers, this fix makes sure we match bit-multi-select height.\n      We might want to reconsider this fix when/if we implement\n      [CL-78] [Improvement] Completely restyled selects (https://bitwarden.atlassian.net/browse/CL-78)\n    -->\n    <select\n      class=\"tw-h-[35px]\"\n      bitInput\n      [disabled]=\"disabled\"\n      [(ngModel)]=\"initialPermission\"\n      [ngModelOptions]=\"{ standalone: true }\"\n      (blur)=\"handleBlur()\"\n    >\n      <option *ngFor=\"let p of permissionList\" [value]=\"p.perm\">\n        {{ p.labelId | i18n }}\n      </option>\n    </select>\n  </bit-form-field>\n\n  <bit-form-field class=\"tw-grow\">\n    <bit-label>{{ selectorLabelText }}</bit-label>\n    <bit-multi-select\n      class=\"tw-w-full\"\n      [baseItems]=\"selectionList.deselectedItems\"\n      [removeSelectedItems]=\"true\"\n      [disabled]=\"disabled\"\n      (onItemsConfirmed)=\"selectItems($event)\"\n      (blur)=\"handleBlur()\"\n    ></bit-multi-select>\n    <bit-hint *ngIf=\"selectorHelpText\">{{ selectorHelpText }}</bit-hint>\n  </bit-form-field>\n</div>\n\n<bit-table [formGroup]=\"formGroup\">\n  <ng-container header>\n    <tr>\n      <th bitCell>{{ columnHeader }}</th>\n      <th bitCell id=\"permissionColHeading\" *ngIf=\"permissionMode != 'hidden'\">\n        <div class=\"tw-border tw-border-solid tw-border-transparent\">\n          {{ \"permission\" | i18n }}\n        </div>\n      </th>\n      <th bitCell id=\"roleColHeading\" *ngIf=\"showMemberRoles\">{{ \"role\" | i18n }}</th>\n      <th bitCell id=\"groupColHeading\" *ngIf=\"showGroupColumn\">{{ \"group\" | i18n }}</th>\n      <th bitCell class=\"tw-w-20\"></th>\n    </tr>\n  </ng-container>\n  <ng-template body formArrayName=\"items\">\n    <tr\n      bitRow\n      *ngFor=\"let item of selectionList.selectedItems; let i = index\"\n      [formGroupName]=\"i\"\n      [ngClass]=\"{ 'tw-text-muted': item.readonly }\"\n      alignContent=\"middle\"\n    >\n      <td bitCell [ngSwitch]=\"item.type\">\n        <div class=\"tw-flex tw-items-center\" *ngSwitchCase=\"itemType.Member\">\n          <bit-avatar size=\"small\" class=\"tw-mr-3\" text=\"{{ item.labelName }}\"></bit-avatar>\n          <div class=\"tw-flex tw-flex-col\">\n            <div>\n              {{ item.labelName }}\n              <span *ngIf=\"$any(item).status == 0\" bitBadge badgeType=\"secondary\">\n                {{ \"invited\" | i18n }}\n              </span>\n            </div>\n            <div class=\"tw-text-xs tw-text-muted\" *ngIf=\"$any(item).status != 0\">\n              {{ $any(item).email }}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"tw-flex tw-items-center\" *ngSwitchDefault>\n          <i\n            class=\"bwi tw-mr-3 tw-px-0.5 tw-text-2xl\"\n            [ngClass]=\"item.icon || itemIcon(item)\"\n            aria-hidden=\"true\"\n          ></i>\n          <span>{{ item.labelName }}</span>\n        </div>\n      </td>\n\n      <td bitCell *ngIf=\"permissionMode != 'hidden'\">\n        <ng-container *ngIf=\"canEditItemPermission(item); else readOnlyPerm\">\n          <label class=\"sr-only\" [for]=\"'permission' + i\"\n            >{{ item.labelName }} {{ \"permission\" | i18n }}</label\n          >\n          <div class=\"tw-relative tw-inline-block\">\n            <select\n              bitInput\n              class=\"tw-apperance-none -tw-ml-3 tw-max-w-40 tw-appearance-none tw-overflow-ellipsis !tw-rounded tw-border-transparent !tw-bg-transparent tw-pr-6 tw-font-bold hover:tw-border-primary-700\"\n              formControlName=\"permission\"\n              [id]=\"'permission' + i\"\n              (blur)=\"handleBlur()\"\n            >\n              <option *ngFor=\"let p of permissionList\" [value]=\"p.perm\">\n                {{ p.labelId | i18n }}\n              </option>\n            </select>\n            <label\n              [for]=\"'permission' + i\"\n              class=\"tw-absolute tw-inset-y-0 tw-right-4 tw-mb-0 tw-flex tw-items-center\"\n            >\n              <i class=\"bwi bwi-sm bwi-angle-down tw-leading-[0]\"></i>\n            </label>\n          </div>\n        </ng-container>\n\n        <ng-template #readOnlyPerm>\n          <div\n            *ngIf=\"item.accessAllItems\"\n            class=\"tw-max-w-40 tw-overflow-hidden tw-overflow-ellipsis tw-whitespace-nowrap tw-border tw-border-solid tw-border-transparent tw-font-bold tw-text-muted\"\n            [appA11yTitle]=\"accessAllLabelId(item) | i18n\"\n          >\n            {{ \"canEdit\" | i18n }}\n            <i class=\"bwi bwi-filter tw-ml-1\" aria-hidden=\"true\"></i>\n          </div>\n\n          <div\n            *ngIf=\"item.readonly\"\n            class=\"tw-max-w-40 tw-overflow-hidden tw-overflow-ellipsis tw-whitespace-nowrap tw-font-bold tw-text-muted\"\n            [title]=\"permissionLabelId(item.readonlyPermission) | i18n\"\n          >\n            {{ permissionLabelId(item.readonlyPermission) | i18n }}\n          </div>\n        </ng-template>\n      </td>\n\n      <td bitCell *ngIf=\"showMemberRoles\">\n        {{ $any(item).role | userType : \"-\" }}\n      </td>\n\n      <td bitCell *ngIf=\"showGroupColumn\">\n        {{ $any(item).viaGroupName ?? \"-\" }}\n      </td>\n\n      <td bitCell class=\"tw-text-right\">\n        <button\n          *ngIf=\"!item.readonly\"\n          type=\"button\"\n          bitIconButton=\"bwi-close\"\n          buttonType=\"muted\"\n          appA11yTitle=\"{{ 'remove' | i18n }} {{ item.labelName }}\"\n          [disabled]=\"disabled\"\n          (click)=\"selectionList.deselectItem(item.id); handleBlur()\"\n        ></button>\n      </td>\n    </tr>\n    <tr *ngIf=\"selectionList.selectedItems.length == 0\">\n      <td bitCell>{{ emptySelectionText }}</td>\n    </tr>\n  </ng-template>\n</bit-table>\n","import { Component, forwardRef, Input, OnDestroy, OnInit } from \"@angular/core\";\nimport {\n  ControlValueAccessor,\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  NG_VALUE_ACCESSOR,\n} from \"@angular/forms\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { ControlsOf } from \"@bitwarden/angular/types/controls-of\";\nimport { FormSelectionList } from \"@bitwarden/angular/utils/form-selection-list\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { SelectItemView } from \"@bitwarden/components/src/multi-select/models/select-item-view\";\n\nimport {\n  AccessItemType,\n  AccessItemValue,\n  AccessItemView,\n  CollectionPermission,\n} from \"./access-selector.models\";\n\nexport enum PermissionMode {\n  /**\n   * No permission controls or column present. No permission values are emitted.\n   */\n  Hidden = \"hidden\",\n\n  /**\n   * No permission controls. Column rendered an if available on an item. No permission values are emitted\n   */\n  Readonly = \"readonly\",\n\n  /**\n   * Permission Controls and column present. Permission values are emitted.\n   */\n  Edit = \"edit\",\n}\n\n@Component({\n  selector: \"bit-access-selector\",\n  templateUrl: \"access-selector.component.html\",\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AccessSelectorComponent),\n      multi: true,\n    },\n  ],\n})\nexport class AccessSelectorComponent implements ControlValueAccessor, OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private notifyOnChange: (v: unknown) => void;\n  private notifyOnTouch: () => void;\n  private pauseChangeNotification: boolean;\n\n  /**\n   * Updates the enabled/disabled state of provided row form group based on the item's readonly state.\n   * If a row is enabled, it also updates the enabled/disabled state of the permission control\n   * based on the item's accessAllItems state and the current value of `permissionMode`.\n   * @param controlRow - The form group for the row to update\n   * @param item - The access item that is represented by the row\n   */\n  private updateRowControlDisableState = (\n    controlRow: FormGroup<ControlsOf<AccessItemValue>>,\n    item: AccessItemView\n  ) => {\n    // Disable entire row form group if readonly\n    if (item.readonly) {\n      controlRow.disable();\n    } else {\n      controlRow.enable();\n\n      // The enable() above also enables the permission control, so we need to disable it again\n      // Disable permission control if accessAllItems is enabled or not in Edit mode\n      if (item.accessAllItems || this.permissionMode != PermissionMode.Edit) {\n        controlRow.controls.permission.disable();\n      }\n    }\n  };\n\n  /**\n   * Updates the enabled/disabled state of ALL row form groups based on each item's readonly state.\n   */\n  private updateAllRowControlDisableStates = () => {\n    this.selectionList.forEachControlItem((controlRow, item) => {\n      this.updateRowControlDisableState(controlRow as FormGroup<ControlsOf<AccessItemValue>>, item);\n    });\n  };\n\n  /**\n   * The internal selection list that tracks the value of this form control / component.\n   * It's responsible for keeping items sorted and synced with the rendered form controls\n   * @protected\n   */\n  protected selectionList = new FormSelectionList<AccessItemView, AccessItemValue>((item) => {\n    const permissionControl = this.formBuilder.control(this.initialPermission);\n\n    const fg = this.formBuilder.group<ControlsOf<AccessItemValue>>({\n      id: new FormControl(item.id),\n      type: new FormControl(item.type),\n      permission: permissionControl,\n    });\n\n    this.updateRowControlDisableState(fg, item);\n\n    return fg;\n  }, this._itemComparator.bind(this));\n\n  /**\n   * Internal form group for this component.\n   * @protected\n   */\n  protected formGroup = this.formBuilder.group({\n    items: this.selectionList.formArray,\n  });\n\n  protected itemType = AccessItemType;\n  protected permissionList = [\n    { perm: CollectionPermission.View, labelId: \"canView\" },\n    { perm: CollectionPermission.ViewExceptPass, labelId: \"canViewExceptPass\" },\n    { perm: CollectionPermission.Edit, labelId: \"canEdit\" },\n    { perm: CollectionPermission.EditExceptPass, labelId: \"canEditExceptPass\" },\n  ];\n  protected initialPermission = CollectionPermission.View;\n\n  disabled: boolean;\n\n  /**\n   * List of all selectable items that. Sorted internally.\n   */\n  @Input()\n  get items(): AccessItemView[] {\n    return this.selectionList.allItems;\n  }\n\n  set items(val: AccessItemView[]) {\n    const selected = (this.selectionList.formArray.getRawValue() ?? []).concat(\n      val.filter((m) => m.readonly)\n    );\n    this.selectionList.populateItems(\n      val.map((m) => {\n        m.icon = m.icon ?? this.itemIcon(m); // Ensure an icon is set\n        return m;\n      }),\n      selected\n    );\n  }\n\n  /**\n   * Permission mode that controls if the permission form controls and column should be present.\n   */\n  @Input()\n  get permissionMode(): PermissionMode {\n    return this._permissionMode;\n  }\n\n  set permissionMode(value: PermissionMode) {\n    this._permissionMode = value;\n    // Update any internal permission controls\n    this.updateAllRowControlDisableStates();\n  }\n  private _permissionMode: PermissionMode = PermissionMode.Hidden;\n\n  /**\n   * Column header for the selected items table\n   */\n  @Input() columnHeader: string;\n\n  /**\n   * Label used for the ng selector\n   */\n  @Input() selectorLabelText: string;\n\n  /**\n   * Helper text displayed under the ng selector\n   */\n  @Input() selectorHelpText: string;\n\n  /**\n   * Text that is shown in the table when no items are selected\n   */\n  @Input() emptySelectionText: string;\n\n  /**\n   * Flag for if the member roles column should be present\n   */\n  @Input() showMemberRoles: boolean;\n\n  /**\n   * Flag for if the group column should be present\n   */\n  @Input() showGroupColumn: boolean;\n\n  constructor(\n    private readonly formBuilder: FormBuilder,\n    private readonly i18nService: I18nService\n  ) {}\n\n  /** Required for NG_VALUE_ACCESSOR */\n  registerOnChange(fn: any): void {\n    this.notifyOnChange = fn;\n  }\n\n  /** Required for NG_VALUE_ACCESSOR */\n  registerOnTouched(fn: any): void {\n    this.notifyOnTouch = fn;\n  }\n\n  /** Required for NG_VALUE_ACCESSOR */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n\n    // Keep the internal FormGroup in sync\n    if (this.disabled) {\n      this.formGroup.disable();\n    } else {\n      this.formGroup.enable();\n\n      // The enable() above automatically enables all the row controls,\n      // so we need to disable the readonly ones again\n      this.updateAllRowControlDisableStates();\n    }\n  }\n\n  /** Required for NG_VALUE_ACCESSOR */\n  writeValue(selectedItems: AccessItemValue[]): void {\n    // Modifying the selection list, mistakenly fires valueChanges in the\n    // internal form array, so we need to know to pause external notification\n    this.pauseChangeNotification = true;\n\n    // Always clear the internal selection list on a new value\n    this.selectionList.deselectAll();\n\n    // We need to also select any read only items to appear in the table\n    this.selectionList.selectItems(this.items.filter((m) => m.readonly).map((m) => m.id));\n\n    // If the new value is null, then we're done\n    if (selectedItems == null) {\n      this.pauseChangeNotification = false;\n      return;\n    }\n\n    // Unable to handle other value types, throw\n    if (!Array.isArray(selectedItems)) {\n      throw new Error(\"The access selector component only supports Array form values!\");\n    }\n\n    // Iterate and internally select each item\n    for (const value of selectedItems) {\n      this.selectionList.selectItem(value.id, value);\n    }\n\n    this.pauseChangeNotification = false;\n  }\n\n  ngOnInit() {\n    // Watch the internal formArray for changes and propagate them\n    this.selectionList.formArray.valueChanges.pipe(takeUntil(this.destroy$)).subscribe((v) => {\n      if (!this.notifyOnChange || this.pauseChangeNotification) {\n        return;\n      }\n      // Disabled form arrays emit values for disabled controls, we override this to emit an empty array to avoid\n      // emitting values for disabled controls that are \"readonly\" in the table\n      if (this.selectionList.formArray.disabled) {\n        this.notifyOnChange([]);\n        return;\n      }\n      this.notifyOnChange(v);\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  protected handleBlur() {\n    if (!this.notifyOnTouch) {\n      return;\n    }\n\n    this.notifyOnTouch();\n  }\n\n  protected selectItems(items: SelectItemView[]) {\n    this.pauseChangeNotification = true;\n    this.selectionList.selectItems(items.map((i) => i.id));\n    this.pauseChangeNotification = false;\n    if (this.notifyOnChange != undefined) {\n      this.notifyOnChange(this.selectionList.formArray.value);\n    }\n  }\n\n  protected itemIcon(item: AccessItemView) {\n    switch (item.type) {\n      case AccessItemType.Collection:\n        return \"bwi-collection\";\n      case AccessItemType.Group:\n        return \"bwi-users\";\n      case AccessItemType.Member:\n        return \"bwi-user\";\n    }\n  }\n\n  protected permissionLabelId(perm: CollectionPermission) {\n    return this.permissionList.find((p) => p.perm == perm)?.labelId;\n  }\n\n  protected accessAllLabelId(item: AccessItemView) {\n    return item.type == AccessItemType.Group ? \"groupAccessAll\" : \"memberAccessAll\";\n  }\n\n  protected canEditItemPermission(item: AccessItemView) {\n    return this.permissionMode == PermissionMode.Edit && !item.readonly && !item.accessAllItems;\n  }\n\n  private _itemComparator(a: AccessItemView, b: AccessItemView) {\n    return (\n      a.type - b.type ||\n      this.i18nService.collator.compare(a.listName, b.listName) ||\n      this.i18nService.collator.compare(a.labelName, b.labelName) ||\n      Number(b.readonly) - Number(a.readonly)\n    );\n  }\n}\n","import {\n  OrganizationUserStatusType,\n  OrganizationUserType,\n} from \"@bitwarden/common/admin-console/enums\";\nimport { SelectItemView } from \"@bitwarden/components\";\n\nimport { CollectionAccessSelectionView } from \"../../../core\";\n\n/**\n * Permission options that replace/correspond with readOnly and hidePassword server fields.\n */\nexport enum CollectionPermission {\n  View = \"view\",\n  ViewExceptPass = \"viewExceptPass\",\n  Edit = \"edit\",\n  EditExceptPass = \"editExceptPass\",\n}\n\nexport enum AccessItemType {\n  Collection,\n  Group,\n  Member,\n}\n\n/**\n * A \"generic\" type that describes an item that can be selected from a\n * ng-select list and have its collection permission modified.\n *\n * Currently, it supports Collections, Groups, and Members. Members require some additional\n * details to render in the AccessSelectorComponent so their type is defined separately\n * and then joined back with the base type.\n *\n */\nexport type AccessItemView =\n  | SelectItemView & {\n      /**\n       * Flag that this group/member can access all items.\n       * This will disable the permission editor for this item.\n       */\n      accessAllItems?: boolean;\n\n      /**\n       * Flag that this item cannot be modified.\n       * This will disable the permission editor and will keep\n       * the item always selected.\n       */\n      readonly?: boolean;\n\n      /**\n       * Optional permission that will be rendered for this\n       * item if it set to readonly.\n       */\n      readonlyPermission?: CollectionPermission;\n    } & (\n        | {\n            type: AccessItemType.Collection;\n            viaGroupName?: string;\n          }\n        | {\n            type: AccessItemType.Group;\n          }\n        | {\n            type: AccessItemType.Member; // Members have a few extra details required to display, so they're added here\n            email: string;\n            role: OrganizationUserType;\n            status: OrganizationUserStatusType;\n          }\n      );\n\n/**\n * A type that is emitted as a value for the ngControl\n */\nexport type AccessItemValue = {\n  id: string;\n  permission?: CollectionPermission;\n  type: AccessItemType;\n};\n\n/**\n * Converts the CollectionAccessSelectionView interface to one of the new CollectionPermission values\n * for the dropdown in the AccessSelectorComponent\n * @param value\n */\nexport const convertToPermission = (value: CollectionAccessSelectionView) => {\n  if (value.readOnly) {\n    return value.hidePasswords ? CollectionPermission.ViewExceptPass : CollectionPermission.View;\n  } else {\n    return value.hidePasswords ? CollectionPermission.EditExceptPass : CollectionPermission.Edit;\n  }\n};\n\n/**\n * Converts an AccessItemValue back into a CollectionAccessView class using the CollectionPermission\n * to determine the values for `readOnly` and `hidePassword`\n * @param value\n */\nexport const convertToSelectionView = (value: AccessItemValue) => {\n  return new CollectionAccessSelectionView({\n    id: value.id,\n    readOnly: readOnly(value.permission),\n    hidePasswords: hidePassword(value.permission),\n  });\n};\n\nconst readOnly = (perm: CollectionPermission) =>\n  [CollectionPermission.View, CollectionPermission.ViewExceptPass].includes(perm);\n\nconst hidePassword = (perm: CollectionPermission) =>\n  [CollectionPermission.ViewExceptPass, CollectionPermission.EditExceptPass].includes(perm);\n","import { NgModule } from \"@angular/core\";\n\nimport { SharedModule } from \"../../../../../shared\";\n\nimport { AccessSelectorComponent } from \"./access-selector.component\";\nimport { UserTypePipe } from \"./user-type.pipe\";\n\n@NgModule({\n  imports: [SharedModule],\n  declarations: [AccessSelectorComponent, UserTypePipe],\n  exports: [AccessSelectorComponent],\n})\nexport class AccessSelectorModule {}\n","import { DIALOG_DATA, DialogConfig, DialogRef } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { combineLatest, of, shareReplay, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { DialogServiceAbstraction, SimpleDialogType } from \"@bitwarden/angular/services/dialog\";\nimport { OrganizationUserService } from \"@bitwarden/common/abstractions/organization-user/organization-user.service\";\nimport { OrganizationUserUserDetailsResponse } from \"@bitwarden/common/abstractions/organization-user/responses\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { BitValidators } from \"@bitwarden/components\";\n\nimport {\n  CollectionAdminService,\n  CollectionAdminView,\n  GroupService,\n  GroupView,\n} from \"../../../core\";\nimport {\n  AccessItemType,\n  AccessItemValue,\n  AccessItemView,\n  convertToPermission,\n  convertToSelectionView,\n  PermissionMode,\n} from \"../access-selector\";\n\nexport enum CollectionDialogTabType {\n  Info = 0,\n  Access = 1,\n}\n\nexport interface CollectionDialogParams {\n  collectionId?: string;\n  organizationId: string;\n  initialTab?: CollectionDialogTabType;\n  parentCollectionId?: string;\n}\n\nexport enum CollectionDialogResult {\n  Saved = \"saved\",\n  Canceled = \"canceled\",\n  Deleted = \"deleted\",\n}\n\n@Component({\n  templateUrl: \"collection-dialog.component.html\",\n})\nexport class CollectionDialogComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n\n  protected tabIndex: CollectionDialogTabType;\n  protected loading = true;\n  protected organization?: Organization;\n  protected collection?: CollectionView;\n  protected nestOptions: CollectionView[] = [];\n  protected accessItems: AccessItemView[] = [];\n  protected deletedParentName: string | undefined;\n  protected formGroup = this.formBuilder.group({\n    name: [\"\", [Validators.required, BitValidators.forbiddenCharacters([\"/\"])]],\n    externalId: \"\",\n    parent: undefined as string | undefined,\n    access: [[] as AccessItemValue[]],\n  });\n  protected PermissionMode = PermissionMode;\n\n  constructor(\n    @Inject(DIALOG_DATA) private params: CollectionDialogParams,\n    private formBuilder: FormBuilder,\n    private dialogRef: DialogRef<CollectionDialogResult>,\n    private organizationService: OrganizationService,\n    private groupService: GroupService,\n    private collectionService: CollectionAdminService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private organizationUserService: OrganizationUserService,\n    private dialogService: DialogServiceAbstraction\n  ) {\n    this.tabIndex = params.initialTab ?? CollectionDialogTabType.Info;\n  }\n\n  ngOnInit() {\n    const organization$ = of(this.organizationService.get(this.params.organizationId)).pipe(\n      shareReplay({ refCount: true, bufferSize: 1 })\n    );\n    const groups$ = organization$.pipe(\n      switchMap((organization) => {\n        if (!organization.useGroups) {\n          return of([] as GroupView[]);\n        }\n\n        return this.groupService.getAll(this.params.organizationId);\n      })\n    );\n\n    combineLatest({\n      organization: organization$,\n      collections: this.collectionService.getAll(this.params.organizationId),\n      collectionDetails: this.params.collectionId\n        ? this.collectionService.get(this.params.organizationId, this.params.collectionId)\n        : of(null),\n      groups: groups$,\n      users: this.organizationUserService.getAllUsers(this.params.organizationId),\n    })\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(({ organization, collections, collectionDetails, groups, users }) => {\n        this.organization = organization;\n        this.accessItems = [].concat(\n          groups.map(mapGroupToAccessItemView),\n          users.data.map(mapUserToAccessItemView)\n        );\n\n        if (this.params.collectionId) {\n          this.collection = collections.find((c) => c.id === this.collectionId);\n          this.nestOptions = collections.filter((c) => c.id !== this.collectionId);\n\n          if (!this.collection) {\n            throw new Error(\"Could not find collection to edit.\");\n          }\n\n          const { name, parent } = parseName(this.collection);\n          if (parent !== undefined && !this.nestOptions.find((c) => c.name === parent)) {\n            this.deletedParentName = parent;\n          }\n\n          const accessSelections = mapToAccessSelections(collectionDetails);\n          this.formGroup.patchValue({\n            name,\n            externalId: this.collection.externalId,\n            parent,\n            access: accessSelections,\n          });\n        } else {\n          this.nestOptions = collections;\n          const parent = collections.find((c) => c.id === this.params.parentCollectionId);\n          this.formGroup.patchValue({ parent: parent?.name ?? undefined });\n        }\n\n        this.loading = false;\n      });\n  }\n\n  protected get collectionId() {\n    return this.params.collectionId;\n  }\n\n  protected get editMode() {\n    return this.params.collectionId != undefined;\n  }\n\n  protected async cancel() {\n    this.close(CollectionDialogResult.Canceled);\n  }\n\n  protected submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      if (this.tabIndex === CollectionDialogTabType.Access) {\n        this.platformUtilsService.showToast(\n          \"error\",\n          null,\n          this.i18nService.t(\"fieldOnTabRequiresAttention\", this.i18nService.t(\"collectionInfo\"))\n        );\n      }\n      return;\n    }\n\n    const collectionView = new CollectionAdminView();\n    collectionView.id = this.params.collectionId;\n    collectionView.organizationId = this.params.organizationId;\n    collectionView.externalId = this.formGroup.controls.externalId.value;\n    collectionView.groups = this.formGroup.controls.access.value\n      .filter((v) => v.type === AccessItemType.Group)\n      .map(convertToSelectionView);\n    collectionView.users = this.formGroup.controls.access.value\n      .filter((v) => v.type === AccessItemType.Member)\n      .map(convertToSelectionView);\n\n    const parent = this.formGroup.controls.parent.value;\n    if (parent) {\n      collectionView.name = `${parent}/${this.formGroup.controls.name.value}`;\n    } else {\n      collectionView.name = this.formGroup.controls.name.value;\n    }\n\n    await this.collectionService.save(collectionView);\n\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\n        this.editMode ? \"editedCollectionId\" : \"createdCollectionId\",\n        collectionView.name\n      )\n    );\n\n    this.close(CollectionDialogResult.Saved);\n  };\n\n  protected delete = async () => {\n    const confirmed = await this.dialogService.openSimpleDialog({\n      title: this.collection?.name,\n      content: { key: \"deleteCollectionConfirmation\" },\n      type: SimpleDialogType.WARNING,\n    });\n\n    if (!confirmed && this.params.collectionId) {\n      return false;\n    }\n\n    await this.collectionService.delete(this.params.organizationId, this.params.collectionId);\n\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"deletedCollectionId\", this.collection?.name)\n    );\n\n    this.close(CollectionDialogResult.Deleted);\n  };\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private close(result: CollectionDialogResult) {\n    this.dialogRef.close(result);\n  }\n}\n\nfunction parseName(collection: CollectionView) {\n  const nameParts = collection.name?.split(\"/\");\n  const name = nameParts[nameParts.length - 1];\n  const parent = nameParts.length > 1 ? nameParts.slice(0, -1).join(\"/\") : undefined;\n\n  return { name, parent };\n}\n\nfunction mapGroupToAccessItemView(group: GroupView): AccessItemView {\n  return {\n    id: group.id,\n    type: AccessItemType.Group,\n    listName: group.name,\n    labelName: group.name,\n    accessAllItems: group.accessAll,\n    readonly: group.accessAll,\n  };\n}\n\n// TODO: Use view when user apis are migrated to a service\nfunction mapUserToAccessItemView(user: OrganizationUserUserDetailsResponse): AccessItemView {\n  return {\n    id: user.id,\n    type: AccessItemType.Member,\n    email: user.email,\n    role: user.type,\n    listName: user.name?.length > 0 ? `${user.name} (${user.email})` : user.email,\n    labelName: user.name ?? user.email,\n    status: user.status,\n    accessAllItems: user.accessAll,\n    readonly: user.accessAll,\n  };\n}\n\nfunction mapToAccessSelections(collectionDetails: CollectionAdminView): AccessItemValue[] {\n  if (collectionDetails == undefined) {\n    return [];\n  }\n  return [].concat(\n    collectionDetails.groups.map<AccessItemValue>((selection) => ({\n      id: selection.id,\n      type: AccessItemType.Group,\n      permission: convertToPermission(selection),\n    })),\n    collectionDetails.users.map<AccessItemValue>((selection) => ({\n      id: selection.id,\n      type: AccessItemType.Member,\n      permission: convertToPermission(selection),\n    }))\n  );\n}\n\n/**\n * Strongly typed helper to open a CollectionDialog\n * @param dialogService Instance of the dialog service that will be used to open the dialog\n * @param config Configuration for the dialog\n */\nexport function openCollectionDialog(\n  dialogService: DialogServiceAbstraction,\n  config: DialogConfig<CollectionDialogParams>\n) {\n  return dialogService.open<CollectionDialogResult, CollectionDialogParams>(\n    CollectionDialogComponent,\n    config\n  );\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog [disablePadding]=\"!loading\" dialogSize=\"large\">\n    <span bitDialogTitle>\n      <ng-container *ngIf=\"editMode\">\n        {{ \"editCollection\" | i18n }}\n        <span class=\"tw-text-sm tw-normal-case tw-text-muted\" *ngIf=\"!loading\">{{\n          collection.name\n        }}</span>\n      </ng-container>\n      <ng-container *ngIf=\"!editMode\">\n        {{ \"newCollection\" | i18n }}\n      </ng-container>\n    </span>\n    <div bitDialogContent>\n      <ng-container *ngIf=\"loading\" #spinner>\n        <i class=\"bwi bwi-spinner bwi-lg bwi-spin\" aria-hidden=\"true\"></i>\n      </ng-container>\n      <bit-tab-group *ngIf=\"!loading\" [(selectedIndex)]=\"tabIndex\">\n        <bit-tab label=\"{{ 'collectionInfo' | i18n }}\">\n          <bit-form-field>\n            <bit-label>{{ \"name\" | i18n }}</bit-label>\n            <input bitInput appAutofocus formControlName=\"name\" />\n          </bit-form-field>\n\n          <bit-form-field>\n            <bit-label>{{ \"externalId\" | i18n }}</bit-label>\n            <input bitInput formControlName=\"externalId\" />\n            <bit-hint>{{ \"externalIdDesc\" | i18n }}</bit-hint>\n          </bit-form-field>\n\n          <bit-form-field>\n            <bit-label>{{ \"nestCollectionUnder\" | i18n }}</bit-label>\n            <bit-select bitInput formControlName=\"parent\">\n              <bit-option [value]=\"undefined\" [label]=\"'noCollection' | i18n\"> </bit-option>\n              <bit-option\n                *ngIf=\"deletedParentName\"\n                disabled\n                icon=\"bwi-collection\"\n                [value]=\"deletedParentName\"\n                label=\"{{ deletedParentName }} ({{ 'deleted' | i18n }})\"\n              >\n              </bit-option>\n              <bit-option\n                *ngFor=\"let collection of nestOptions\"\n                icon=\"bwi-collection\"\n                [value]=\"collection.name\"\n                [label]=\"collection.name\"\n              >\n              </bit-option>\n            </bit-select>\n          </bit-form-field>\n        </bit-tab>\n        <bit-tab label=\"{{ 'access' | i18n }}\">\n          <bit-access-selector\n            *ngIf=\"organization.useGroups\"\n            [permissionMode]=\"PermissionMode.Edit\"\n            formControlName=\"access\"\n            [items]=\"accessItems\"\n            [columnHeader]=\"'groupAndMemberColumnHeader' | i18n\"\n            [selectorLabelText]=\"'selectGroupsAndMembers' | i18n\"\n            [selectorHelpText]=\"'userPermissionOverrideHelper' | i18n\"\n            [emptySelectionText]=\"'noMembersOrGroupsAdded' | i18n\"\n          ></bit-access-selector>\n          <bit-access-selector\n            *ngIf=\"!organization.useGroups\"\n            [permissionMode]=\"PermissionMode.Edit\"\n            formControlName=\"access\"\n            [items]=\"accessItems\"\n            [columnHeader]=\"'memberColumnHeader' | i18n\"\n            [selectorLabelText]=\"'selectMembers' | i18n\"\n            [emptySelectionText]=\"'noMembersAdded' | i18n\"\n          ></bit-access-selector>\n        </bit-tab>\n      </bit-tab-group>\n    </div>\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton bitFormButton buttonType=\"primary\" [disabled]=\"loading\">\n        {{ \"save\" | i18n }}\n      </button>\n      <button\n        type=\"button\"\n        bitButton\n        bitFormButton\n        buttonType=\"secondary\"\n        (click)=\"cancel()\"\n        [disabled]=\"loading\"\n      >\n        {{ \"cancel\" | i18n }}\n      </button>\n      <button\n        *ngIf=\"editMode && organization?.canDeleteAssignedCollections\"\n        type=\"button\"\n        bitIconButton=\"bwi-trash\"\n        buttonType=\"danger\"\n        class=\"tw-ml-auto\"\n        bitFormButton\n        [appA11yTitle]=\"'delete' | i18n\"\n        [bitAction]=\"delete\"\n        [disabled]=\"loading\"\n      ></button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","import { AbstractControl, FormControl, ValidationErrors, ValidatorFn } from \"@angular/forms\";\n\nexport function forbiddenCharacters(characters: string[]): ValidatorFn {\n  return (control: AbstractControl): ValidationErrors | null => {\n    if (!(control instanceof FormControl)) {\n      throw new Error(\"forbiddenCharacters only supports validating FormControls\");\n    }\n\n    if (control.value === null || control.value === undefined) {\n      return null;\n    }\n\n    const value = String(control.value);\n\n    for (const char of value) {\n      if (characters.includes(char)) {\n        return { forbiddenCharacters: { value: control.value, characters } };\n      }\n    }\n\n    return null;\n  };\n}\n","import { NgModule } from \"@angular/core\";\n\nimport { SelectModule } from \"@bitwarden/components\";\n\nimport { AccessSelectorModule } from \"../../../../../admin-console/organizations/shared/components/access-selector/access-selector.module\";\nimport { SharedModule } from \"../../../../../shared\";\n\nimport { CollectionDialogComponent } from \"./collection-dialog.component\";\n\n@NgModule({\n  imports: [SharedModule, AccessSelectorModule, SelectModule],\n  declarations: [CollectionDialogComponent],\n  exports: [CollectionDialogComponent],\n})\nexport class CollectionDialogModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SearchModule } from \"@bitwarden/components\";\n\nimport { SharedModule } from \"../../../shared/shared.module\";\n\nimport { AccessSelectorModule } from \"./components/access-selector/access-selector.module\";\nimport { CollectionDialogModule } from \"./components/collection-dialog\";\n\n@NgModule({\n  imports: [SharedModule, CollectionDialogModule, AccessSelectorModule, SearchModule],\n  declarations: [],\n  exports: [SharedModule, CollectionDialogModule, AccessSelectorModule, SearchModule],\n})\nexport class SharedOrganizationModule {}\n","<ng-select\n  [items]=\"baseItems\"\n  [(ngModel)]=\"selectedItems\"\n  (ngModelChange)=\"onChange($event)\"\n  (blur)=\"onBlur()\"\n  bindLabel=\"listName\"\n  groupBy=\"parentGrouping\"\n  [placeholder]=\"placeholder\"\n  [loading]=\"loading\"\n  [loadingText]=\"loadingText\"\n  notFoundText=\"{{ 'multiSelectNotFound' | i18n }}\"\n  clearAllText=\"{{ 'multiSelectClearAll' | i18n }}\"\n  [multiple]=\"true\"\n  [selectOnTab]=\"true\"\n  [closeOnSelect]=\"false\"\n  (close)=\"onDropdownClosed()\"\n  [disabled]=\"disabled\"\n  [clearSearchOnAdd]=\"true\"\n  [labelForId]=\"labelForId\"\n  [keyDownFn]=\"keyDown\"\n  appendTo=\"body\"\n>\n  <ng-template ng-loadingspinner-tmp>\n    <i class=\"bwi bwi-spinner bwi-spin tw-mr-1\" [title]=\"loadingText\" aria-hidden=\"true\"></i>\n  </ng-template>\n  <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\n    <button\n      type=\"button\"\n      bitBadge\n      badgeType=\"primary\"\n      class=\"tw-mr-1 disabled:tw-border-0\"\n      [disabled]=\"disabled\"\n      (click)=\"clear(item)\"\n    >\n      <i\n        *ngIf=\"item.icon != null\"\n        class=\"tw-mr-1 bwi bwi-fw {{ item.icon }}\"\n        aria-hidden=\"true\"\n      ></i>\n      {{ item.labelName }}\n      <i class=\"bwi bwi-fw bwi-close bwi-sm tw-ml-1\" aria-hidden=\"true\"></i>\n    </button>\n  </ng-template>\n  <ng-template ng-option-tmp let-item=\"item\">\n    <div class=\"tw-flex\">\n      <div class=\"tw-w-7 tw-flex-none\">\n        <i *ngIf=\"isSelected(item)\" class=\"bwi bwi-fw bwi-check\" aria-hidden=\"true\"></i>\n      </div>\n      <div class=\"tw-mr-2 tw-flex-initial\">\n        <i *ngIf=\"item.icon != null\" class=\"bwi bwi-fw {{ item.icon }}\" aria-hidden=\"true\"></i>\n      </div>\n      <div class=\"tw-flex-1\">\n        {{ item.listName }}\n      </div>\n    </div>\n  </ng-template>\n</ng-select>\n","import { hasModifierKey } from \"@angular/cdk/keycodes\";\nimport {\n  Component,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  EventEmitter,\n  HostBinding,\n  Optional,\n  Self,\n} from \"@angular/core\";\nimport { ControlValueAccessor, NgControl, Validators } from \"@angular/forms\";\nimport { NgSelectComponent } from \"@ng-select/ng-select\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\n\nimport { BitFormFieldControl } from \"../form-field/form-field-control\";\n\nimport { SelectItemView } from \"./models/select-item-view\";\n\n// Increments for each instance of this component\nlet nextId = 0;\n\n@Component({\n  selector: \"bit-multi-select\",\n  templateUrl: \"./multi-select.component.html\",\n  providers: [{ provide: BitFormFieldControl, useExisting: MultiSelectComponent }],\n})\n/**\n * This component has been implemented to only support Multi-select list events\n */\nexport class MultiSelectComponent implements OnInit, BitFormFieldControl, ControlValueAccessor {\n  @ViewChild(NgSelectComponent) select: NgSelectComponent;\n\n  // Parent component should only pass selectable items (complete list - selected items = baseItems)\n  @Input() baseItems: SelectItemView[];\n  // Defaults to native ng-select behavior - set to \"true\" to clear selected items on dropdown close\n  @Input() removeSelectedItems = false;\n  @Input() placeholder: string;\n  @Input() loading = false;\n  @Input() disabled = false;\n\n  // Internal tracking of selected items\n  @Input() selectedItems: SelectItemView[];\n\n  // Default values for our implementation\n  loadingText: string;\n\n  protected searchInputId = `search-input-${nextId++}`;\n\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  private notifyOnChange?: (value: SelectItemView[]) => void;\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  private notifyOnTouched?: () => void;\n\n  @Output() onItemsConfirmed = new EventEmitter<any[]>();\n\n  constructor(private i18nService: I18nService, @Optional() @Self() private ngControl?: NgControl) {\n    if (ngControl != null) {\n      ngControl.valueAccessor = this;\n    }\n  }\n\n  ngOnInit(): void {\n    // Default Text Values\n    this.placeholder = this.placeholder ?? this.i18nService.t(\"multiSelectPlaceholder\");\n    this.loadingText = this.i18nService.t(\"multiSelectLoading\");\n  }\n\n  /** Function for customizing keyboard navigation */\n  /** Needs to be arrow function to retain `this` scope. */\n  keyDown = (event: KeyboardEvent) => {\n    if (!this.select.isOpen && event.key === \"Enter\" && !hasModifierKey(event)) {\n      return false;\n    }\n\n    if (this.select.isOpen && event.key === \"Enter\" && !hasModifierKey(event)) {\n      this.select.close();\n      event.preventDefault();\n      return false;\n    }\n\n    if (this.select.isOpen && event.key === \"Escape\" && !hasModifierKey(event)) {\n      this.selectedItems = [];\n      this.select.close();\n      event.stopPropagation();\n      return false;\n    }\n\n    return true;\n  };\n\n  /** Helper method for showing selected state in custom template */\n  isSelected(item: any): boolean {\n    return this.selectedItems?.find((selected) => selected.id === item.id) != undefined;\n  }\n\n  /**\n   * The `close` callback will act as the only trigger for signifying the user's intent of completing the selection\n   * of items. Selected items will be emitted to the parent component in order to allow for separate data handling.\n   */\n  onDropdownClosed(): void {\n    // Early exit\n    if (this.selectedItems == null || this.selectedItems.length == 0) {\n      return;\n    }\n\n    // Emit results to parent component\n    this.onItemsConfirmed.emit(this.selectedItems);\n\n    // Remove selected items from base list based on input property\n    if (this.removeSelectedItems) {\n      let updatedBaseItems = this.baseItems;\n      this.selectedItems.forEach((selectedItem) => {\n        updatedBaseItems = updatedBaseItems.filter((item) => selectedItem.id !== item.id);\n      });\n\n      // Reset Lists\n      this.selectedItems = null;\n      this.baseItems = updatedBaseItems;\n    }\n  }\n\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  writeValue(obj: SelectItemView[]): void {\n    this.selectedItems = obj;\n  }\n\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  registerOnChange(fn: (value: SelectItemView[]) => void): void {\n    this.notifyOnChange = fn;\n  }\n\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  registerOnTouched(fn: any): void {\n    this.notifyOnTouched = fn;\n  }\n\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  protected onChange(items: SelectItemView[]) {\n    if (!this.notifyOnChange) {\n      return;\n    }\n\n    this.notifyOnChange(items);\n  }\n\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  protected onBlur() {\n    if (!this.notifyOnTouched) {\n      return;\n    }\n\n    this.notifyOnTouched();\n  }\n\n  /**Implemented as part of BitFormFieldControl */\n  @HostBinding(\"attr.aria-describedby\")\n  get ariaDescribedBy() {\n    return this._ariaDescribedBy;\n  }\n  set ariaDescribedBy(value: string) {\n    this._ariaDescribedBy = value;\n    this.select?.searchInput.nativeElement.setAttribute(\"aria-describedby\", value);\n  }\n  private _ariaDescribedBy: string;\n\n  /**Implemented as part of BitFormFieldControl */\n  get labelForId() {\n    return this.searchInputId;\n  }\n\n  /**Implemented as part of BitFormFieldControl */\n  @HostBinding() @Input() id = `bit-multi-select-${nextId++}`;\n\n  /**Implemented as part of BitFormFieldControl */\n  @HostBinding(\"attr.required\")\n  @Input()\n  get required() {\n    return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n  }\n  set required(value: any) {\n    this._required = value != null && value !== false;\n  }\n  private _required: boolean;\n\n  /**Implemented as part of BitFormFieldControl */\n  get hasError() {\n    return this.ngControl?.status === \"INVALID\" && this.ngControl?.touched;\n  }\n\n  /**Implemented as part of BitFormFieldControl */\n  get error(): [string, any] {\n    const key = Object.keys(this.ngControl?.errors)[0];\n    return [key, this.ngControl?.errors[key]];\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\n\nimport { InputModule } from \"../input/input.module\";\nimport { SharedModule } from \"../shared\";\n\nimport { SearchComponent } from \"./search.component\";\n\n@NgModule({\n  imports: [SharedModule, InputModule, FormsModule],\n  declarations: [SearchComponent],\n  exports: [SearchComponent],\n})\nexport class SearchModule {}\n","import { TemplatePortal } from \"@angular/cdk/portal\";\nimport { Component, HostBinding, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"bit-tab-body\",\n  templateUrl: \"tab-body.component.html\",\n})\nexport class TabBodyComponent {\n  private _firstRender: boolean;\n\n  @Input() content: TemplatePortal;\n  @Input() preserveContent = false;\n\n  @HostBinding(\"attr.hidden\") get hidden() {\n    return !this.active || null;\n  }\n\n  @Input()\n  get active() {\n    return this._active;\n  }\n  set active(value: boolean) {\n    this._active = value;\n    if (this._active) {\n      this._firstRender = true;\n    }\n  }\n  private _active: boolean;\n\n  /**\n   * The tab content to render.\n   * Inactive tabs that have never been rendered/active do not have their\n   * content rendered by default for performance. If `preserveContent` is `true`\n   * then the content persists after the first time content is rendered.\n   */\n  get tabContent() {\n    if (this.active) {\n      return this.content;\n    }\n    if (this.preserveContent && this._firstRender) {\n      return this.content;\n    }\n    return null;\n  }\n}\n","<bit-tab-header>\n  <div\n    bitTabListContainer\n    role=\"tablist\"\n    [attr.aria-label]=\"label\"\n    (keydown)=\"keyManager.onKeydown($event)\"\n  >\n    <button\n      bitTabListItem\n      *ngFor=\"let tab of tabs; let i = index\"\n      type=\"button\"\n      role=\"tab\"\n      [id]=\"getTabLabelId(i)\"\n      [active]=\"tab.isActive\"\n      [disabled]=\"tab.disabled\"\n      [attr.aria-selected]=\"selectedIndex === i\"\n      [attr.tabindex]=\"selectedIndex === i ? 0 : -1\"\n      (click)=\"selectTab(i)\"\n    >\n      <ng-container [ngTemplateOutlet]=\"content\"></ng-container>\n\n      <ng-template #content>\n        <ng-template [ngIf]=\"tab.templateLabel\" [ngIfElse]=\"tabTextLabel\">\n          <ng-container [ngTemplateOutlet]=\"tab.templateLabel.templateRef\"></ng-container>\n        </ng-template>\n\n        <ng-template #tabTextLabel>{{ tab.textLabel }}</ng-template>\n      </ng-template>\n    </button>\n  </div>\n</bit-tab-header>\n<div class=\"tw-px-4 tw-pt-5\">\n  <bit-tab-body\n    role=\"tabpanel\"\n    *ngFor=\"let tab of tabs; let i = index\"\n    [id]=\"getTabContentId(i)\"\n    [attr.tabindex]=\"tab.contentTabIndex\"\n    [attr.labeledby]=\"getTabLabelId(i)\"\n    [active]=\"tab.isActive\"\n    [content]=\"tab.content\"\n    [preserveContent]=\"preserveContent\"\n  >\n  </bit-tab-body>\n</div>\n","<ng-template [cdkPortalOutlet]=\"tabContent\"></ng-template>\n","import { FocusKeyManager } from \"@angular/cdk/a11y\";\nimport { coerceNumberProperty } from \"@angular/cdk/coercion\";\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChildren,\n} from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { TabListItemDirective } from \"../shared/tab-list-item.directive\";\n\nimport { TabComponent } from \"./tab.component\";\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n@Component({\n  selector: \"bit-tab-group\",\n  templateUrl: \"./tab-group.component.html\",\n})\nexport class TabGroupComponent\n  implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy\n{\n  private readonly _groupId: number;\n  private readonly destroy$ = new Subject<void>();\n  private _indexToSelect: number | null = 0;\n\n  /**\n   * Aria label for the tab list menu\n   */\n  @Input() label = \"\";\n\n  /**\n   * Keep the content of off-screen tabs in the DOM.\n   * Useful for keeping <audio> or <video> elements from re-initializing\n   * after navigating between tabs.\n   */\n  @Input() preserveContent = false;\n\n  @ContentChildren(TabComponent) tabs: QueryList<TabComponent>;\n  @ViewChildren(TabListItemDirective) tabLabels: QueryList<TabListItemDirective>;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null {\n    return this._selectedIndex;\n  }\n  set selectedIndex(value: number) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<BitTabChangeEvent> =\n    new EventEmitter<BitTabChangeEvent>();\n\n  /**\n   * Focus key manager for keeping tab controls accessible.\n   * https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/tablist_role#keyboard_interactions\n   */\n  keyManager: FocusKeyManager<TabListItemDirective>;\n\n  constructor() {\n    this._groupId = nextId++;\n  }\n\n  protected getTabContentId(id: number): string {\n    return `bit-tab-content-${this._groupId}-${id}`;\n  }\n\n  protected getTabLabelId(id: number): string {\n    return `bit-tab-label-${this._groupId}-${id}`;\n  }\n\n  selectTab(index: number) {\n    this.selectedIndex = index;\n  }\n\n  /**\n   * After content is checked, the tab group knows what tabs are defined and which index\n   * should be currently selected.\n   */\n  ngAfterContentChecked(): void {\n    const indexToSelect = (this._indexToSelect = this._clampTabIndex(this._indexToSelect));\n\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit({\n          index: indexToSelect,\n          tab: this.tabs.toArray()[indexToSelect],\n        });\n      }\n\n      // These values need to be updated after change detection as\n      // the checked content may have references to them.\n      Promise.resolve().then(() => {\n        this.tabs.forEach((tab, index) => (tab.isActive = index === indexToSelect));\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n\n      // Manually update the _selectedIndex and keyManager active item\n      this._selectedIndex = indexToSelect;\n      if (this.keyManager) {\n        this.keyManager.setActiveItem(indexToSelect);\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.keyManager = new FocusKeyManager(this.tabLabels)\n      .withHorizontalOrientation(\"ltr\")\n      .withWrap()\n      .withHomeAndEnd();\n  }\n\n  ngAfterContentInit() {\n    // Subscribe to any changes in the number of tabs, in order to be able\n    // to re-render content when new tabs are added or removed.\n    this.tabs.changes.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // If the selected tab didn't explicitly change, keep the previously\n      // selected tab selected/active\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this.tabs.toArray();\n        let selectedTab: TabComponent | undefined;\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Set both _indexToSelect and _selectedIndex to avoid firing a change\n            // event which could cause an infinite loop if adding a tab within the\n            // selectedIndexChange event\n            this._indexToSelect = this._selectedIndex = i;\n            selectedTab = tabs[i];\n            break;\n          }\n        }\n\n        // No active tab found and a tab does exist means the active tab\n        // was removed, so a new active tab must be set manually\n        if (!selectedTab && tabs[indexToSelect]) {\n          tabs[indexToSelect].isActive = true;\n          this.selectedTabChange.emit({\n            index: indexToSelect,\n            tab: tabs[indexToSelect],\n          });\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private _clampTabIndex(index: number): number {\n    return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));\n  }\n}\n\nexport class BitTabChangeEvent {\n  /**\n   * The currently selected tab index\n   */\n  index: number;\n  /**\n   * The currently selected tab\n   */\n  tab: TabComponent;\n}\n","import { Directive, TemplateRef } from \"@angular/core\";\n\n/**\n * Used to identify template based tab labels (allows complex labels instead of just plaintext)\n *\n * @example\n * ```\n * <bit-tab>\n *   <ng-template bitTabLabel>\n *     <i class=\"bwi bwi-search\"></i> Search\n *   </ng-template>\n *\n *   <p>Tab Content</p>\n * </bit-tab>\n * ```\n */\n@Directive({\n  selector: \"[bitTabLabel]\",\n})\nexport class TabLabelDirective {\n  constructor(public templateRef: TemplateRef<unknown>) {}\n}\n","<ng-template><ng-content></ng-content></ng-template>\n","import { TemplatePortal } from \"@angular/cdk/portal\";\nimport {\n  Component,\n  ContentChild,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n} from \"@angular/core\";\n\nimport { TabLabelDirective } from \"./tab-label.directive\";\n\n@Component({\n  selector: \"bit-tab\",\n  templateUrl: \"./tab.component.html\",\n  host: {\n    role: \"tabpanel\",\n  },\n})\nexport class TabComponent implements OnInit {\n  @Input() disabled = false;\n  @Input(\"label\") textLabel = \"\";\n\n  /**\n   * Optional tabIndex for the tabPanel that contains this tab's content.\n   *\n   * If the tabpanel does not contain any focusable elements or the first element with content is not focusable,\n   * this should be set to 0 to include it in the tab sequence of the page.\n   *\n   * @remarks See note 4 of https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/\n   */\n  @Input() contentTabIndex: number | undefined;\n\n  @ViewChild(TemplateRef, { static: true }) implicitContent: TemplateRef<unknown>;\n  @ContentChild(TabLabelDirective) templateLabel: TabLabelDirective;\n\n  private _contentPortal: TemplatePortal | null = null;\n\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  isActive: boolean;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {}\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this.implicitContent, this._viewContainerRef);\n  }\n}\n"],"names":["OrganizationRedirectGuard","constructor","router","organizationService","canActivate","route","state","org","this","get","params","organizationId","customRedirect","data","autoRedirectCallback","redirectPath","createUrlTree","url","id","GroupAddEditTabType","GroupAddEditDialogResultType","GroupAddEditComponent","groupId","orgCollections$","from","apiService","getCollections","pipe","switchMap","response","collectionService","decryptMany","map","r","collections","c","type","Collection","labelName","name","listName","orgMembers$","organizationUserService","getAllUsers","m","Member","email","role","length","status","groupDetails$","editMode","combineLatest","groupService","getGroupUsers","groupView","users","members","catchError","e","logService","error","message","toString","of","undefined","dialogRef","i18nService","platformUtilsService","formBuilder","changeDetectorRef","dialogService","PermissionMode","ResultType","loading","groupForm","group","accessAll","required","maxLength","externalId","control","value","disabled","destroy$","Subject","submit","markAllAsTouched","invalid","tabIndex","Info","showToast","t","formValue","save","close","Saved","delete","openSimpleDialog","title","content","key","WARNING","Deleted","initialTab","ngOnInit","takeUntil","subscribe","detectChanges","patchValue","gc","permission","ngOnDestroy","next","complete","check","edit","loadMore","toggleAllVisible","deleteAllSelected","GroupsComponent","searchText","_searchText","updateSearchedGroups","visibleGroups","isPaging","pagedGroups","isSearching","searchedGroups","groups","modalService","searchService","searchPipe","didScroll","pageSize","ModalTabType","pagedGroupsCount","refreshGroups$","BehaviorSubject","tap","concatMap","toCollectionMap","getAll","collectionMap","sort","getSortFunction","g","details","checked","collectionNames","collator","compare","resetPaging","queryParams","first","qParams","search","pagedLength","pagedSize","concat","slice","startingTabIndex","config","open","result","lastValueFrom","closed","removeGroup","add","groupRow","groupsToDelete","filter","deleteMessage","join","placeholders","deleteMany","forEach","isSearchable","event","target","searching","index","findIndex","splice","decryptedCollections","transform","VaultFilterService","stateService","folderService","cipherService","policyService","collectionAdminService","super","_collections","ReplaySubject","filteredCollections$","asObservable","collectionTree$","buildCollectionTree","reloadCollections","VaultFilterModule","provide","useClass","reupload","download","AttachmentsComponent","cryptoService","fileDownloadService","viewOnly","attachment","organization","canEditAnyCollection","showFixOldAttachments","reuploadCipherAttachment","loadCipher","getCipherAdmin","cipherId","saveCipherAttachment","file","saveAttachmentWithServer","cipherDomain","deleteCipherAttachment","attachmentId","deleteCipherAttachmentAdmin","selectAll","CollectionsComponent","allowSelectNone","canViewAllCollections","loadCipherCollections","collectionIds","loadCollections","Promise","resolve","saveCollections","request","putCipherCollectionsAdmin","onSearchTextChanged","VaultFilterComponent","_organization","vaultFilterService","setOrganizationFilter","filters","buildAllFilters","activeFilter","selectedCipherTypeNode","resetFilter","selectedCollectionNode","getDefaultFilter","isLoaded","builderFilter","typeFilter","addTypeFilter","collectionFilter","addCollectionFilter","trashFilter","addTrashFilter","firstValueFrom","data$","editCollection","deleteCollection","addCipher","addCollection","VaultHeaderComponent","All","Unassigned","onAddCipher","onAddCollection","onEditCollection","onDeleteCollection","CollectionDialogTabType","organizations$","collection","node","collectionId","toLowerCase","showBreadcrumbs","parent","push","reverse","treeNode","showFreeOrgUpgradeDialog","orgUpgradeSimpleDialogOpts","canEditSubscription","maxCollections","PRIMARY","acceptButtonText","cancelButtonText","simpleDialog","openSimpleDialogRef","then","ACCEPT","navigate","upgrade","canEditCollection","canEditAssignedCollections","assigned","emit","planProductType","Free","tab","canDeleteCollection","canDeleteAnyCollection","canDeleteAssignedCollections","BroadcasterSubscriptionId","VaultComponent","routedVaultFilterBridgeService","routedVaultFilterService","syncService","messagingService","broadcasterService","ngZone","passwordRepromptService","eventCollectionService","totpService","trashCleanupWarning","noItemIcon","performingInitialLoad","refreshing","processingEvent","searchText$","refresh$","isSelfHost","filter$","organizationId$","distinctUntilChanged","organization$","get$","shareReplay","refCount","bufferSize","firstSetup$","canUseAdminCollections","fullSync","run","command","successfully","refresh","activeFilter$","debounceTime","isNullOrEmpty","queryParamsHandling","replaceUrl","currentSearchText$","allCollectionsWithoutUnassigned$","orgId","allCollections$","allCollections","noneCollection","allGroups$","allCiphers$","ciphers","getAllFromApiForOrganization","getAllDecrypted","indexCiphers","ciphers$","filterFunction","searchCiphers","nestedCollections$","collections$","collectionsToReturn","selectedCollection","getTreeNodeObjectFromList","children","selectedCollection$","showMissingCollectionPermissionMessage$","getCipherIdFromParams","editCipherId","itemId","viewEvents","cipher","find","useEvents","allGroups","showMissingCollectionPermissionMessage","isEmpty","unsubscribe","onVaultItemsEvent","editCipherAttachments","item","editCipherCollections","cloneCipher","items","restore","bulkRestore","i","deleteCipher","bulkDelete","copy","field","Access","filterSearchText","maxStorageGb","send","madeAttachmentChanges","modal","openViewRef","attachmentsModalRef","comp","onUploadedAttachment","onDeletedAttachment","onClosed","currCollections","collectionsModalRef","readOnly","onSavedCollections","editCipher","cipherType","navigateToCipher","go","additionalComponentParameters","reprompt","showPasswordPrompt","defaultComponentParameters","onSavedCipher","onDeletedCipher","onRestoredCipher","childComponent","cipherAddEditModalRef","onClosedPromise","cloneMode","repromptCipher","isDeleted","asAdmin","restoreWithServer","selectedCipherIds","dialog","cipherIds","Restored","permanent","deleteCipherWithServer","aType","typeI18nKey","login","username","password","getCode","totp","protectedFields","includes","viewPassword","copyToClipboard","window","collect","Cipher_ClientCopiedPassword","Cipher_ClientCopiedHiddenField","parentCollectionId","eventsModalRef","entityId","showUser","entity","deleteWithServer","softDeleteWithServer","notProtected","None","deleted","relativeTo","routes","path","component","titleId","organizationPermissions","VaultRoutingModule","forChild","VaultModule","pathMatch","loadChildren","OrganizationSettingsModule","MembersModule","OrganizationReportingModule","OrganizationBillingModule","OrganizationsRoutingModule","OrganizationModule","findSortedIndex","sortedArray","val","compareFn","low","high","mid","Math","floor","FormSelectionList","controlFactory","allItems","selectedItems","deselectedItems","formArray","selectItems","ids","initialValue","selectItem","deselectItems","deselectItem","deselectAll","clear","o","selectedOption","sortedInsertIndex","newControl","insert","deselectedOption","removeAt","populateItems","selectedItem","forEachControlItem","fn","at","UserTypePipe","unknownText","Owner","Admin","User","Manager","Custom","handleBlur","selectionList","AccessSelectorComponent","selected","getRawValue","readonly","icon","itemIcon","permissionMode","_permissionMode","updateAllRowControlDisableStates","updateRowControlDisableState","controlRow","disable","enable","accessAllItems","Edit","controls","permissionControl","initialPermission","fg","_itemComparator","bind","formGroup","itemType","permissionList","perm","View","labelId","ViewExceptPass","EditExceptPass","Hidden","registerOnChange","notifyOnChange","registerOnTouched","notifyOnTouch","setDisabledState","isDisabled","writeValue","pauseChangeNotification","Array","isArray","Error","valueChanges","v","Group","permissionLabelId","p","accessAllLabelId","canEditItemPermission","a","b","Number","useExisting","multi","CollectionPermission","AccessItemType","convertToPermission","hidePasswords","convertToSelectionView","hidePassword","AccessSelectorModule","CollectionDialogResult","CollectionDialogComponent","characters","nestOptions","accessItems","String","char","forbiddenCharacters","access","collectionView","groups$","useGroups","collectionDetails","mapGroupToAccessItemView","mapUserToAccessItemView","nameParts","split","parseName","deletedParentName","accessSelections","selection","mapToAccessSelections","cancel","Canceled","user","openCollectionDialog","CollectionDialogModule","SharedOrganizationModule","nextId","MultiSelectComponent","ngControl","removeSelectedItems","searchInputId","onItemsConfirmed","keyDown","select","isOpen","preventDefault","stopPropagation","valueAccessor","placeholder","loadingText","isSelected","onDropdownClosed","updatedBaseItems","baseItems","obj","notifyOnTouched","onChange","onBlur","ariaDescribedBy","_ariaDescribedBy","searchInput","nativeElement","setAttribute","labelForId","_required","hasValidator","hasError","touched","Object","keys","errors","SearchModule","TabBodyComponent","preserveContent","hidden","active","_active","_firstRender","tabContent","selectTab","TabGroupComponent","selectedIndex","_selectedIndex","_indexToSelect","label","selectedIndexChange","selectedTabChange","_groupId","getTabContentId","getTabLabelId","ngAfterContentChecked","indexToSelect","_clampTabIndex","isFirstRun","tabs","toArray","isActive","keyManager","setActiveItem","ngAfterViewInit","tabLabels","withHorizontalOrientation","withWrap","withHomeAndEnd","ngAfterContentInit","changes","selectedTab","min","max","TabLabelDirective","templateRef","TabComponent","_contentPortal","_viewContainerRef","textLabel","implicitContent"],"sourceRoot":""}