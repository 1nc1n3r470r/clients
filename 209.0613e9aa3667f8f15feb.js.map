{"version":3,"file":"209.0613e9aa3667f8f15feb.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/../../libs/angular/src/auth/components/user-verification-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/components/user-verification-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/components/user-verification-prompt.component.html","webpack://@bitwarden/web-vault/../../libs/angular/src/components/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/file-password-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/file-password-prompt.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/components/export-scope-callout.component.html","webpack://@bitwarden/web-vault/../../libs/angular/src/components/export-scope-callout.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/directives/box-row.directive.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-error.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import-api.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import-api.service.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-organization-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/kvp.request.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-result.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/base-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/ascendo-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avast/avast-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avast/avast-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avira-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/blackberry-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/chrome-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-password-protected-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/blur-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/buttercup-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/clipperz-html-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/codebook-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/dashlane/dashlane-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/dashlane/dashlane-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/encryptr-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/enpass/enpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/enpass/enpass-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/firefox-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/fsecure/fsecure-fsk-types.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/fsecure/fsecure-fsk-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/gnome-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/kaspersky-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keepass2-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keepassx-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keeper/keeper-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/logmeonce-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/meldium-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/msecure-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/myki-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/nordpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/types/onepassword-1pux-importer-types.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-1pif-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-1pux-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/cipher-import-context.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-mac-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-win-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/padlock-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passkeep-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passky/passky-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passman-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passpack-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordagent-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordboss-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passworddragon-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordsafe-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordwallet-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/psono/psono-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/remembear-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/roboform-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/safari-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/safeincloud-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/saferpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/securesafe-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/splashid-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/stickypassword-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/truekey-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/upm-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/yoti-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/zohovault-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-options.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import.service.ts"],"sourcesContent":["import { Directive } from \"@angular/core\";\nimport { FormBuilder, FormControl } from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\n\nimport { ModalRef } from \"../../components/modal/modal.ref\";\nimport { ModalConfig } from \"../../services/modal.service\";\n\n/**\n * Used to verify the user's identity (using their master password or email-based OTP for Key Connector users). You can customize all of the text in the modal.\n */\n@Directive()\nexport class UserVerificationPromptComponent {\n  confirmDescription = this.config.data.confirmDescription;\n  confirmButtonText = this.config.data.confirmButtonText;\n  modalTitle = this.config.data.modalTitle;\n  secret = new FormControl();\n\n  constructor(\n    private modalRef: ModalRef,\n    protected config: ModalConfig,\n    protected userVerificationService: UserVerificationService,\n    private formBuilder: FormBuilder,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  async submit() {\n    try {\n      //Incorrect secret will throw an invalid password error.\n      await this.userVerificationService.verifyUser(this.secret.value);\n    } catch (e) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"error\"),\n        this.i18nService.t(\"invalidMasterPassword\")\n      );\n      return;\n    }\n\n    this.modalRef.close(true);\n  }\n}\n","import { Component } from \"@angular/core\";\n\nimport { UserVerificationPromptComponent as BaseUserVerificationPrompt } from \"@bitwarden/angular/auth/components/user-verification-prompt.component\";\n\n@Component({\n  templateUrl: \"user-verification-prompt.component.html\",\n})\nexport class UserVerificationPromptComponent extends BaseUserVerificationPrompt {}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable @angular-eslint/template/button-has-type -->\n<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"confirmUserTitle\">\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form class=\"modal-content\" #form (ngSubmit)=\"submit()\">\n      <h2 class=\"tw-my-6 tw-px-3.5 tw-font-semibold\" id=\"modalTitle | i18n \">\n        {{ modalTitle | i18n | uppercase }}\n      </h2>\n      <div class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-p-3.5\">\n        {{ confirmDescription | i18n }}\n      </div>\n      <div class=\"tw-p-3.5\">\n        <app-user-verification ngDefaultControl [formControl]=\"secret\" name=\"secret\">\n        </app-user-verification>\n      </div>\n      <div\n        class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-p-3.5\"\n      >\n        <button bitButton buttonType=\"primary\" type=\"submit\" appBlurClick>\n          <span>{{ confirmButtonText | i18n }}</span>\n        </button>\n        <button bitButton buttonType=\"secondary\" data-dismiss=\"modal\">\n          {{ \"cancel\" | i18n }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { Directive, EventEmitter, OnDestroy, OnInit, Output } from \"@angular/core\";\nimport { UntypedFormBuilder, Validators } from \"@angular/forms\";\nimport { merge, takeUntil, Subject, startWith } from \"rxjs\";\n\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { ExportService } from \"@bitwarden/common/abstractions/export.service\";\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums/policy-type\";\nimport { EncryptedExportType, EventType } from \"@bitwarden/common/enums\";\n\n@Directive()\nexport class ExportComponent implements OnInit, OnDestroy {\n  @Output() onSaved = new EventEmitter();\n\n  formPromise: Promise<string>;\n  disabledByPolicy = false;\n\n  exportForm = this.formBuilder.group({\n    format: [\"json\"],\n    secret: [\"\"],\n    filePassword: [\"\", Validators.required],\n    confirmFilePassword: [\"\", Validators.required],\n    fileEncryptionType: [EncryptedExportType.AccountEncrypted],\n  });\n\n  formatOptions = [\n    { name: \".json\", value: \"json\" },\n    { name: \".csv\", value: \"csv\" },\n    { name: \".json (Encrypted)\", value: \"encrypted_json\" },\n  ];\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected exportService: ExportService,\n    protected eventCollectionService: EventCollectionService,\n    private policyService: PolicyService,\n    protected win: Window,\n    private logService: LogService,\n    private userVerificationService: UserVerificationService,\n    private formBuilder: UntypedFormBuilder,\n    protected fileDownloadService: FileDownloadService\n  ) {}\n\n  async ngOnInit() {\n    this.policyService\n      .policyAppliesToActiveUser$(PolicyType.DisablePersonalVaultExport)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((policyAppliesToActiveUser) => {\n        this.disabledByPolicy = policyAppliesToActiveUser;\n      });\n\n    await this.checkExportDisabled();\n\n    merge(\n      this.exportForm.get(\"format\").valueChanges,\n      this.exportForm.get(\"fileEncryptionType\").valueChanges\n    )\n      .pipe(takeUntil(this.destroy$))\n      .pipe(startWith(0))\n      .subscribe(() => this.adjustValidators());\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n  }\n\n  async checkExportDisabled() {\n    if (this.disabledByPolicy) {\n      this.exportForm.disable();\n    }\n  }\n\n  get encryptedFormat() {\n    return this.format === \"encrypted_json\";\n  }\n\n  protected async doExport() {\n    try {\n      this.formPromise = this.getExportData();\n      const data = await this.formPromise;\n      this.downloadFile(data);\n      this.saved();\n      await this.collectEvent();\n      this.exportForm.get(\"secret\").setValue(\"\");\n      this.exportForm.clearValidators();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async submit() {\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const acceptedWarning = await this.warningDialog();\n    if (!acceptedWarning) {\n      return;\n    }\n    const secret = this.exportForm.get(\"secret\").value;\n\n    try {\n      await this.userVerificationService.verifyUser(secret);\n    } catch (e) {\n      this.platformUtilsService.showToast(\"error\", this.i18nService.t(\"errorOccurred\"), e.message);\n      return;\n    }\n\n    this.doExport();\n  }\n\n  async warningDialog() {\n    if (this.encryptedFormat) {\n      return await this.platformUtilsService.showDialog(\n        \"<p>\" +\n          this.i18nService.t(\"encExportKeyWarningDesc\") +\n          \"<p>\" +\n          this.i18nService.t(\"encExportAccountWarningDesc\"),\n        this.i18nService.t(\"confirmVaultExport\"),\n        this.i18nService.t(\"exportVault\"),\n        this.i18nService.t(\"cancel\"),\n        \"warning\",\n        true\n      );\n    } else {\n      return await this.platformUtilsService.showDialog(\n        this.i18nService.t(\"exportWarningDesc\"),\n        this.i18nService.t(\"confirmVaultExport\"),\n        this.i18nService.t(\"exportVault\"),\n        this.i18nService.t(\"cancel\"),\n        \"warning\"\n      );\n    }\n  }\n\n  protected saved() {\n    this.onSaved.emit();\n  }\n\n  protected getExportData() {\n    if (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    ) {\n      return this.exportService.getPasswordProtectedExport(this.filePassword);\n    } else {\n      return this.exportService.getExport(this.format, null);\n    }\n  }\n\n  protected getFileName(prefix?: string) {\n    let extension = this.format;\n    if (this.format === \"encrypted_json\") {\n      if (prefix == null) {\n        prefix = \"encrypted\";\n      } else {\n        prefix = \"encrypted_\" + prefix;\n      }\n      extension = \"json\";\n    }\n    return this.exportService.getFileName(prefix, extension);\n  }\n\n  protected async collectEvent(): Promise<void> {\n    await this.eventCollectionService.collect(EventType.User_ClientExportedVault);\n  }\n\n  get format() {\n    return this.exportForm.get(\"format\").value;\n  }\n\n  get filePassword() {\n    return this.exportForm.get(\"filePassword\").value;\n  }\n\n  get confirmFilePassword() {\n    return this.exportForm.get(\"confirmFilePassword\").value;\n  }\n\n  get fileEncryptionType() {\n    return this.exportForm.get(\"fileEncryptionType\").value;\n  }\n\n  adjustValidators() {\n    this.exportForm.get(\"confirmFilePassword\").reset();\n    this.exportForm.get(\"filePassword\").reset();\n\n    if (this.encryptedFormat && this.fileEncryptionType == EncryptedExportType.FileEncrypted) {\n      this.exportForm.controls.filePassword.enable();\n      this.exportForm.controls.confirmFilePassword.enable();\n    } else {\n      this.exportForm.controls.filePassword.disable();\n      this.exportForm.controls.confirmFilePassword.disable();\n    }\n  }\n\n  private downloadFile(csv: string): void {\n    const fileName = this.getFileName();\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: csv,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable tailwindcss/no-custom-classname -->\n<form\n  #form\n  (ngSubmit)=\"submit()\"\n  [appApiAction]=\"formPromise\"\n  [formGroup]=\"exportForm\"\n  *ngIf=\"exportForm\"\n>\n  <div class=\"page-header\">\n    <h1>{{ \"exportVault\" | i18n }}</h1>\n  </div>\n\n  <app-callout type=\"error\" title=\"{{ 'vaultExportDisabled' | i18n }}\" *ngIf=\"disabledByPolicy\">\n    {{ \"personalVaultExportPolicyInEffect\" | i18n }}\n  </app-callout>\n  <app-export-scope-callout\n    [organizationId]=\"organizationId\"\n    *ngIf=\"!disabledByPolicy\"\n  ></app-export-scope-callout>\n\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <bit-form-field>\n        <bit-label class=\"tw-text-lg\" for=\"format\">{{ \"fileFormat\" | i18n }}</bit-label>\n        <select bitInput name=\"format\" formControlName=\"format\">\n          <option *ngFor=\"let f of formatOptions\" [value]=\"f.value\">{{ f.name }}</option>\n        </select>\n      </bit-form-field>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"form-group col-6\">\n      <ng-container *ngIf=\"format === 'encrypted_json'\">\n        <div role=\"radiogroup\" aria-labelledby=\"exportTypeHeading\">\n          <label id=\"exportTypeHeading\" class=\"tw-semi-bold tw-text-lg\">\n            {{ \"exportTypeHeading\" | i18n }}\n          </label>\n\n          <div appBoxRow name=\"FileTypeOptions\" class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"AccountEncrypted\"\n                [value]=\"encryptedExportType.AccountEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.AccountEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"AccountEncrypted\">\n                {{ \"accountRestricted\" | i18n }}\n              </label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 pb-2 tw-text-sm\">\n            {{ \"accountRestrictedOptionDescription\" | i18n }}\n          </div>\n\n          <div class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"FileEncrypted\"\n                [value]=\"encryptedExportType.FileEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.FileEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"FileEncrypted\">{{\n                \"passwordProtected\" | i18n\n              }}</label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 tw-text-sm\">\n            {{ \"passwordProtectedOptionDescription\" | i18n }}\n          </div>\n        </div>\n        <br />\n\n        <ng-container *ngIf=\"fileEncryptionType == encryptedExportType.FileEncrypted\">\n          <bit-form-field>\n            <bit-label>{{ \"filePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"filePassword\"\n              formControlName=\"filePassword\"\n              name=\"password\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n            <bit-hint>{{ \"exportPasswordDescription\" | i18n }}</bit-hint>\n          </bit-form-field>\n          <bit-form-field>\n            <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"confirmFilePassword\"\n              formControlName=\"confirmFilePassword\"\n              name=\"confirmFilePassword\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n          </bit-form-field>\n        </ng-container>\n      </ng-container>\n\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary btn-submit\"\n        [disabled]=\"form.loading || disabledByPolicy\"\n        [ngClass]=\"{ manual: disabledByPolicy }\"\n      >\n        <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n        <span>{{ \"confirmFormat\" | i18n }}</span>\n      </button>\n    </div>\n  </div>\n</form>\n","import { Component } from \"@angular/core\";\nimport { UntypedFormBuilder } from \"@angular/forms\";\n\nimport { ExportComponent as BaseExportComponent } from \"@bitwarden/angular/components/export.component\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { ExportService } from \"@bitwarden/common/abstractions/export.service\";\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { EncryptedExportType } from \"@bitwarden/common/enums\";\n\nimport { UserVerificationPromptComponent } from \"../../components/user-verification-prompt.component\";\n\n@Component({\n  selector: \"app-export\",\n  templateUrl: \"export.component.html\",\n})\nexport class ExportComponent extends BaseExportComponent {\n  organizationId: string;\n  encryptedExportType = EncryptedExportType;\n  protected showFilePassword: boolean;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    platformUtilsService: PlatformUtilsService,\n    exportService: ExportService,\n    eventCollectionService: EventCollectionService,\n    policyService: PolicyService,\n    logService: LogService,\n    userVerificationService: UserVerificationService,\n    formBuilder: UntypedFormBuilder,\n    fileDownloadService: FileDownloadService,\n    private modalService: ModalService\n  ) {\n    super(\n      cryptoService,\n      i18nService,\n      platformUtilsService,\n      exportService,\n      eventCollectionService,\n      policyService,\n      window,\n      logService,\n      userVerificationService,\n      formBuilder,\n      fileDownloadService\n    );\n  }\n\n  async submit() {\n    if (this.isFileEncryptedExport && this.filePassword != this.confirmFilePassword) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"filePasswordAndConfirmFilePasswordDoNotMatch\")\n      );\n      return;\n    }\n\n    this.exportForm.markAllAsTouched();\n    if (!this.exportForm.valid) {\n      return;\n    }\n\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    this.doExport();\n  }\n\n  protected saved() {\n    super.saved();\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"exportSuccess\"));\n  }\n\n  private verifyUser() {\n    let confirmDescription = \"exportWarningDesc\";\n    if (this.isFileEncryptedExport) {\n      confirmDescription = \"fileEncryptedExportWarningDesc\";\n    } else if (this.isAccountEncryptedExport) {\n      confirmDescription = \"encExportKeyWarningDesc\";\n    }\n\n    const ref = this.modalService.open(UserVerificationPromptComponent, {\n      allowMultipleModals: true,\n      data: {\n        confirmDescription: confirmDescription,\n        confirmButtonText: \"exportVault\",\n        modalTitle: \"confirmVaultExport\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return ref.onClosedPromise();\n  }\n\n  get isFileEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    );\n  }\n\n  get isAccountEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.AccountEncrypted\n    );\n  }\n}\n","import { Component } from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\n\nimport { ModalRef } from \"@bitwarden/angular/components/modal/modal.ref\";\n\n@Component({\n  templateUrl: \"file-password-prompt.component.html\",\n})\nexport class FilePasswordPromptComponent {\n  filePassword = new FormControl(\"\", Validators.required);\n\n  constructor(private modalRef: ModalRef) {}\n\n  submit() {\n    this.filePassword.markAsTouched();\n    if (!this.filePassword.valid) {\n      return;\n    }\n\n    this.modalRef.close(this.filePassword.value);\n  }\n\n  cancel() {\n    this.modalRef.close(null);\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable tailwindcss/no-custom-classname -->\n<div\n  class=\"modal fade\"\n  role=\"dialog\"\n  aria-modal=\"true\"\n  [attr.aria-labelledby]=\"'confirmVaultImport' | i18n\"\n>\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form #form (ngSubmit)=\"submit()\">\n      <div class=\"form-group modal-content\">\n        <h2 class=\"tw-my-6 tw-ml-3.5 tw-font-semibold\" id=\"confirmVaultImport\">\n          {{ \"confirmVaultImport\" | i18n | uppercase }}\n        </h2>\n        <div\n          class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-px-3.5 tw-pt-3.5\"\n        >\n          {{ \"confirmVaultImportDesc\" | i18n }}\n          <bit-form-field class=\"tw-pt-3.5\">\n            <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              name=\"filePassword\"\n              [formControl]=\"filePassword\"\n              appAutofocus\n              appInputVerbatim\n            />\n            <button type=\"button\" bitSuffix bitIconButton bitPasswordInputToggle></button>\n          </bit-form-field>\n        </div>\n        <div\n          class=\"tw-flex tw-w-full tw-flex-wrap tw-items-center tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-px-3.5 tw-pb-3.5 tw-pt-4\"\n        >\n          <button bitButton buttonType=\"primary\" class=\"tw-mr-2\" type=\"submit\" appBlurClick>\n            <span>{{ \"importData\" | i18n }}</span>\n          </button>\n          <button bitButton buttonType=\"secondary\" type=\"button\" (click)=\"cancel()\">\n            <span>{{ \"cancel\" | i18n }}</span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n","<div class=\"page-header\">\n  <h1>{{ \"importData\" | i18n }}</h1>\n</div>\n<app-callout type=\"info\" *ngIf=\"importBlockedByPolicy\">\n  {{ \"personalOwnershipPolicyInEffectImports\" | i18n }}\n</app-callout>\n<form #form (ngSubmit)=\"submit()\" ngNativeValidate>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"form-group\">\n        <label for=\"type\">1. {{ \"selectFormat\" | i18n }}</label>\n        <select\n          id=\"type\"\n          name=\"Format\"\n          [(ngModel)]=\"format\"\n          class=\"form-control\"\n          [disabled]=\"importBlockedByPolicy\"\n          required\n        >\n          <option *ngFor=\"let o of featuredImportOptions\" [ngValue]=\"o.id\">{{ o.name }}</option>\n          <ng-container *ngIf=\"importOptions && importOptions.length\">\n            <option value=\"-\" disabled></option>\n            <option *ngFor=\"let o of importOptions\" [ngValue]=\"o.id\">{{ o.name }}</option>\n          </ng-container>\n        </select>\n      </div>\n    </div>\n  </div>\n  <app-callout type=\"info\" title=\"{{ getFormatInstructionTitle() }}\" *ngIf=\"format\">\n    <ng-container *ngIf=\"format === 'bitwardencsv' || format === 'bitwardenjson'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/export-your-data/\">\n        https://bitwarden.com/help/export-your-data/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'lastpasscsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-lastpass/\">\n        https://bitwarden.com/help/import-from-lastpass/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepassxcsv'\">\n      Using the KeePassX desktop application, navigate to \"Database\" &rarr; \"Export to CSV file\" and\n      save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'aviracsv'\">\n      In the Avira web vault, go to \"Settings\" &rarr; \"My Data\" &rarr; \"Export data\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blurcsv'\">\n      In the Blur web vault, click your username at the top and go to \"Settings\" &rarr; \"Export\n      Data\", then click \"Export CSV\" for your \"Accounts\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safeincloudxml'\">\n      Using the SaveInCloud desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As XML\"\n      and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'padlockcsv'\">\n      Using the Padlock desktop application, click the hamburger icon in the top left corner and\n      navigate to \"Settings\" &rarr; \"Export\" button and save the file \"As CSV\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepass2xml'\">\n      Using the KeePass 2 desktop application, navigate to \"File\" &rarr; \"Export\" and select the\n      \"KeePass XML (2.x)\" option.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'upmcsv'\">\n      Using the Universal Password Manager desktop application, navigate to \"Database\" &rarr;\n      \"Export\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'saferpasscsv'\">\n      Using the SaferPass browser extension, click the hamburger icon in the top left corner and\n      navigate to \"Settings\". Click the \"Export accounts\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'meldiumcsv'\">\n      Using the Meldium web vault, navigate to \"Settings\". Locate the \"Export data\" function and\n      click \"Show me my data\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepercsv'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .csv File\" option. Click\n      \"Export\" to save the CSV file.\n    </ng-container>\n    <!--\n    <ng-container *ngIf=\"format === 'keeperjson'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .json File\" option. Click\n      \"Export\" to save the JSON file.\n    </ng-container>\n    -->\n    <ng-container\n      *ngIf=\"format === 'chromecsv' || format === 'operacsv' || format === 'vivaldicsv'\"\n    >\n      <span *ngIf=\"format !== 'chromecsv'\">\n        The process is exactly the same as importing from Google Chrome.\n      </span>\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-chrome/\">\n        https://bitwarden.com/help/import-from-chrome/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'firefoxcsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-firefox/\">\n        https://bitwarden.com/help/import-from-firefox/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safaricsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-safari/\">\n        https://bitwarden.com/help/import-from-safari/</a\n      >.\n    </ng-container>\n    <ng-container\n      *ngIf=\"\n        format === '1password1pux' ||\n        format === '1password1pif' ||\n        format === '1passwordwincsv' ||\n        format === '1passwordmaccsv'\n      \"\n    >\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-1password/\">\n        https://bitwarden.com/help/import-from-1password/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passworddragonxml'\">\n      Using the Password Dragon desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"To\n      XML\". In the dialog that pops up select \"All Rows\" and check all fields. Click the \"Export\"\n      button and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpasscsv'\">\n      Using the Enpass desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As CSV\".\n      Select \"OK\" to the warning alert and save the CSV file. Note that the importer only supports\n      files exported while Enpass is set to the English language, so adjust your settings\n      accordingly.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpassjson'\">\n      Using the Enpass 6 desktop application, click the menu button and navigate to \"File\" &rarr;\n      \"Export\". Select the \".json\" file format option and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'pwsafexml'\">\n      Using the Password Safe desktop application, navigate to \"File\" &rarr; \"Export To\" &rarr; \"XML\n      format...\" and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanecsv'\">\n      Log in to Dashlane, click on \"My Account\" &rarr; \"Settings\" &rarr; \"Export file\" and select\n      \"Export as a CSV file\". This will download a zip archive containing various CSV files. Unzip\n      the archive and import each CSV file individually.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanejson'\">\n      Dashlane no longer supports the JSON format. Only use this if you have an existing JSON for\n      import. Use the CSV importer when creating new exports.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'msecurecsv'\">\n      Using the mSecure desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"CSV File...\"\n      and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'stickypasswordxml'\">\n      Using the Sticky Password desktop application, navigate to \"Menu\" (top right) &rarr; \"Export\"\n      &rarr; \"Export all\". Select the unencrypted format XML option and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'truekeycsv'\">\n      Using the True Key desktop application, click the gear icon (top right) and then navigate to\n      \"App Settings\". Click the \"Export\" button, enter your password and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'clipperzhtml'\">\n      Log into the Clipperz web application (clipperz.is/app). Click the hamburger menu icon in the\n      top right to expand the navigation bar. Navigate to \"Data\" &rarr; \"Export\". Click the\n      \"download HTML+JSON\" button to save the HTML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'roboformcsv'\">\n      Using the RoboForm Editor desktop application, navigate to \"RoboForm\" (top left) &rarr;\n      \"Options\" &rarr; \"Account &amp; Data\" and click the \"Export\" button. Select all of your data,\n      change the \"Format\" to \"CSV file\" and then click the \"Export\" button to save the CSV file.\n      Note: RoboForm only allows you to export Logins. Other items will not be exported.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passboltcsv'\">\n      Log into the Passbolt web vault and navigate to the \"Passwords\" listing. Select all of the\n      passwords you would like to export and click the \"Export\" button at the top of the listing.\n      Choose the \"csv (lastpass)\" export format and click the \"Export\" button.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'ascendocsv'\">\n      Using the Ascendo DataVault desktop application, navigate to \"Tools\" &rarr; \"Export\". In the\n      dialog that pops up, select the \"All Items (DVX, CSV)\" option. Click the \"Ok\" button to save\n      the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordbossjson'\">\n      Using the Password Boss desktop application, navigate to \"File\" &rarr; \"Export data\" &rarr;\n      \"Password Boss JSON - not encrypted\" and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'zohovaultcsv'\">\n      Log into the Zoho web vault (vault.zoho.com). Navigate to \"Tools\" &rarr; \"Export Secrets\".\n      Select \"All Secrets\" and click the \"Zoho Vault Format CSV\" button. Highlight and copy the data\n      from the textarea. Open a text editor like Notepad and paste the data. Save the data from the\n      text editor as\n      <code>zoho_export.csv</code>.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'splashidcsv'\">\n      Using the SplashID Safe desktop application, click on the SplashID blue lock logo in the top\n      right corner. Navigate to \"Export\" &rarr; \"Export as CSV\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkeepcsv'\">\n      Using the PassKeep mobile app, navigate to \"Backup/Restore\". Locate the \"CSV Backup/Restore\"\n      section and click \"Backup to CSV\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'gnomejson'\">\n      Make sure you have python-keyring and python-gnomekeyring installed. Save the\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bit.ly/2GpOMTg\"\n        >GNOME Keyring Import/Export</a\n      >\n      python script to your desktop as <code>pw_helper.py</code>. Open terminal and run\n      <code>chmod +rx Desktop/pw_helper.py</code> and then\n      <code>python Desktop/pw_helper.py export Desktop/my_passwords.json</code>. Then upload the\n      resulting <code>my_passwords.json</code> file here to Bitwarden.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordagentcsv'\">\n      Using the Password Agent desktop application navigate to \"File\" &rarr; \"Export\", select the\n      \"Fields to export\" button and check all of the fields, change the \"Output format\" to \"CSV\",\n      and then click the \"Start\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passpackcsv'\">\n      Log into the Passpack website vault and navigate to \"Settings\" &rarr; \"Export\", then click the\n      \"Download\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passmanjson'\">\n      Open your Passman vault and click on \"Settings\" in the bottom left corner. In the \"Settings\"\n      window switch to the \"Export credentials\" tab and choose \"JSON\" as the export type. Enter your\n      vault's passphrase and click the \"Export\" button to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastcsv'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to CSV file\" option to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastjson'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to JSON file\" option to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'fsecurefsk'\">\n      Open the F-Secure KEY desktop application and navigate to \"Settings\" &rarr; \"Export\n      Passwords\". Select the \"Export\" button, enter your master password, and save the FSK file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'kasperskytxt'\">\n      Open the Kaspersky Password Manager desktop application and navigate to \"Settings\" &rarr;\n      \"Import/Export\". Locate the \"Export to text file\" section and select the \"Export\" button to\n      save the TXT file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'remembearcsv'\">\n      Open the RememBear desktop application and navigate to \"Settings\" &rarr; \"Account\" &rarr;\n      \"Export\". Enter your master password and select the \"Export Anyway\" button to save the CSV\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordwallettxt'\">\n      Open the PasswordWallet desktop application and navigate to \"File\" &rarr; \"Export\" &rarr;\n      \"Visible entries to text file\". Enter your password and select the \"Ok\" button to save the TXT\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'mykicsv'\">\n      Open the Myki desktop browser extension and navigate to \"Advanced\" &rarr; \"Export Accounts\"\n      and then scan the QR code with your mobile device. Various CSV files will then be saved to\n      your computer's downloads folder.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'securesafecsv'\">\n      Export your SecureSafe password safe to a CSV file with a comma delimiter.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'logmeoncecsv'\">\n      Open the LogMeOnce browser extension, then navigate to \"Open Menu\" &rarr; \"Export To\" and\n      select \"CSV File\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blackberrycsv'\">\n      Open the BlackBerry Password Keeper application, then navigate to \"Settings\" &rarr;\n      \"Import/Export\". Select \"Export Passwords\" and follow the instructions on screen to save the\n      unencrypted CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'buttercupcsv'\">\n      Open the Buttercup desktop application and unlock your vault. Right click on your vault's icon\n      and select \"Export\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'codebookcsv'\">\n      Open the Codebook desktop application and log in. Navigate to \"File\" &rarr; \"Export all\", then\n      click \"Yes\" on the dialog and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'encryptrcsv'\">\n      Open the newest version of the Encryptr desktop application and allow all of your data to\n      sync. Once syncing of your data is complete, the download icon in the top right corner will\n      turn pink. Click the download icon and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'yoticsv'\">\n      From the Yoti browser extension, click on \"Settings\", then \"Export Saved Logins\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'psonojson'\">\n      Log in to the Psono web vault, click on the \"Signed in as\"-dropdown, select \"Others\". Go to\n      the \"Export\"-tab and select the json type export and then click on Export.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkyjson'\">\n      Log in to \"https://vault.passky.org\" &rarr; \"Import & Export\" &rarr; \"Export\" in the Passky\n      section. (\"Backup\" is unsupported as it is encrypted).\n    </ng-container>\n  </app-callout>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"form-group\">\n        <label for=\"file\">2. {{ \"selectImportFile\" | i18n }}</label>\n        <br />\n        <div class=\"file-selector\">\n          <button\n            type=\"button\"\n            class=\"btn btn-outline-primary\"\n            (click)=\"fileSelector.click()\"\n            [disabled]=\"importBlockedByPolicy\"\n          >\n            {{ \"chooseFile\" | i18n }}\n          </button>\n          {{ this.fileSelected ? this.fileSelected.name : (\"noFileChosen\" | i18n) }}\n        </div>\n        <input\n          #fileSelector\n          type=\"file\"\n          id=\"file\"\n          class=\"form-control-file\"\n          name=\"file\"\n          (change)=\"setSelectedFile($event)\"\n          hidden\n          [disabled]=\"importBlockedByPolicy\"\n        />\n      </div>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"fileContents\">{{ \"orCopyPasteFileContents\" | i18n }}</label>\n    <textarea\n      id=\"fileContents\"\n      class=\"form-control\"\n      name=\"FileContents\"\n      [(ngModel)]=\"fileContents\"\n      [disabled]=\"importBlockedByPolicy\"\n    ></textarea>\n  </div>\n  <button\n    type=\"submit\"\n    class=\"btn btn-primary btn-submit\"\n    [disabled]=\"loading || importBlockedByPolicy\"\n    [ngClass]=\"{ manual: importBlockedByPolicy }\"\n  >\n    <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n    <span>{{ \"importData\" | i18n }}</span>\n  </button>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport * as JSZip from \"jszip\";\nimport { firstValueFrom } from \"rxjs\";\nimport Swal, { SweetAlertIcon } from \"sweetalert2\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums/policy-type\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport {\n  ImportOption,\n  ImportType,\n  ImportError,\n  ImportServiceAbstraction,\n} from \"@bitwarden/importer\";\n\nimport { FilePasswordPromptComponent } from \"./file-password-prompt.component\";\n\n@Component({\n  selector: \"app-import\",\n  templateUrl: \"import.component.html\",\n})\nexport class ImportComponent implements OnInit {\n  featuredImportOptions: ImportOption[];\n  importOptions: ImportOption[];\n  format: ImportType = null;\n  fileContents: string;\n  fileSelected: File;\n  formPromise: Promise<ImportError>;\n  loading = false;\n  importBlockedByPolicy = false;\n\n  protected organizationId: string = null;\n  protected successNavigate: any[] = [\"vault\"];\n\n  constructor(\n    protected i18nService: I18nService,\n    protected importService: ImportServiceAbstraction,\n    protected router: Router,\n    protected platformUtilsService: PlatformUtilsService,\n    protected policyService: PolicyService,\n    private logService: LogService,\n    protected modalService: ModalService,\n    protected syncService: SyncService\n  ) {}\n\n  async ngOnInit() {\n    this.setImportOptions();\n\n    this.importBlockedByPolicy = await firstValueFrom(\n      this.policyService.policyAppliesToActiveUser$(PolicyType.PersonalOwnership)\n    );\n  }\n\n  async submit() {\n    if (this.importBlockedByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalOwnershipPolicyInEffectImports\")\n      );\n      return;\n    }\n\n    this.loading = true;\n\n    const importer = this.importService.getImporter(this.format, this.organizationId);\n    if (importer === null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFormat\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    const fileEl = document.getElementById(\"file\") as HTMLInputElement;\n    const files = fileEl.files;\n    if (\n      (files == null || files.length === 0) &&\n      (this.fileContents == null || this.fileContents === \"\")\n    ) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    let fileContents = this.fileContents;\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    try {\n      this.formPromise = this.importService.import(importer, fileContents, this.organizationId);\n      let error = await this.formPromise;\n\n      if (error?.passwordRequired) {\n        const filePassword = await this.getFilePassword();\n        if (filePassword == null) {\n          this.loading = false;\n          return;\n        }\n\n        error = await this.doPasswordProtectedImport(filePassword, fileContents);\n      }\n\n      if (error != null) {\n        this.error(error);\n        this.loading = false;\n        return;\n      }\n\n      //No errors, display success message\n      this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"importSuccess\"));\n      this.syncService.fullSync(true);\n      this.router.navigate(this.successNavigate);\n    } catch (e) {\n      this.logService.error(e);\n    }\n\n    this.loading = false;\n  }\n\n  getFormatInstructionTitle() {\n    if (this.format == null) {\n      return null;\n    }\n\n    const results = this.featuredImportOptions\n      .concat(this.importOptions)\n      .filter((o) => o.id === this.format);\n    if (results.length > 0) {\n      return this.i18nService.t(\"instructionsFor\", results[0].name);\n    }\n    return null;\n  }\n\n  protected setImportOptions() {\n    this.featuredImportOptions = [\n      {\n        id: null,\n        name: \"-- \" + this.i18nService.t(\"select\") + \" --\",\n      },\n      ...this.importService.featuredImportOptions,\n    ];\n    this.importOptions = [...this.importService.regularImportOptions].sort((a, b) => {\n      if (a.name == null && b.name != null) {\n        return -1;\n      }\n      if (a.name != null && b.name == null) {\n        return 1;\n      }\n      if (a.name == null && b.name == null) {\n        return 0;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(a.name, b.name)\n        : a.name.localeCompare(b.name);\n    });\n  }\n\n  setSelectedFile(event: Event) {\n    const fileInputEl = <HTMLInputElement>event.target;\n    this.fileSelected = fileInputEl.files.length > 0 ? fileInputEl.files[0] : null;\n  }\n\n  private async error(error: Error) {\n    await Swal.fire({\n      heightAuto: false,\n      buttonsStyling: false,\n      icon: \"error\" as SweetAlertIcon,\n      iconHtml: `<i class=\"swal-custom-icon bwi bwi-error text-danger\"></i>`,\n      input: \"textarea\",\n      inputValue: error.message,\n      inputAttributes: {\n        readonly: \"true\",\n      },\n      titleText: this.i18nService.t(\"importError\"),\n      text: this.i18nService.t(\"importErrorDesc\"),\n      showConfirmButton: true,\n      confirmButtonText: this.i18nService.t(\"ok\"),\n      onOpen: (popupEl) => {\n        popupEl.querySelector(\".swal2-textarea\").scrollTo(0, 0);\n      },\n    });\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    if (this.format === \"1password1pux\") {\n      return this.extract1PuxContent(file);\n    }\n\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        if (this.format === \"lastpasscsv\" && file.type === \"text/html\") {\n          const parser = new DOMParser();\n          const doc = parser.parseFromString((evt.target as any).result, \"text/html\");\n          const pre = doc.querySelector(\"pre\");\n          if (pre != null) {\n            resolve(pre.textContent);\n            return;\n          }\n          reject();\n          return;\n        }\n\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private extract1PuxContent(file: File): Promise<string> {\n    return new JSZip()\n      .loadAsync(file)\n      .then((zip) => {\n        return zip.file(\"export.data\").async(\"string\");\n      })\n      .then(\n        function success(content) {\n          return content;\n        },\n        function error(e) {\n          return \"\";\n        }\n      );\n  }\n\n  async getFilePassword(): Promise<string> {\n    const ref = this.modalService.open(FilePasswordPromptComponent, {\n      allowMultipleModals: true,\n    });\n\n    if (ref == null) {\n      return null;\n    }\n\n    return await ref.onClosedPromise();\n  }\n\n  async doPasswordProtectedImport(\n    filePassword: string,\n    fileContents: string\n  ): Promise<ImportError> {\n    const passwordProtectedImporter = this.importService.getImporter(\n      \"bitwardenpasswordprotected\",\n      this.organizationId,\n      filePassword\n    );\n\n    return this.importService.import(passwordProtectedImporter, fileContents, this.organizationId);\n  }\n}\n","<ng-container *ngIf=\"show\">\n  <app-callout type=\"info\" title=\"{{ scopeConfig.title | i18n }}\">\n    {{ scopeConfig.description | i18n : scopeConfig.scopeIdentifier }}\n  </app-callout>\n</ng-container>\n","import { Component, Input, OnInit } from \"@angular/core\";\n\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\n\n@Component({\n  selector: \"app-export-scope-callout\",\n  templateUrl: \"export-scope-callout.component.html\",\n})\nexport class ExportScopeCalloutComponent implements OnInit {\n  @Input() organizationId: string = null;\n\n  show = false;\n  scopeConfig: {\n    title: string;\n    description: string;\n    scopeIdentifier: string;\n  };\n\n  constructor(\n    protected organizationService: OrganizationService,\n    protected stateService: StateService\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    if (!this.organizationService.hasOrganizations()) {\n      return;\n    }\n    this.scopeConfig =\n      this.organizationId != null\n        ? {\n            title: \"exportingOrganizationVaultTitle\",\n            description: \"exportingOrganizationVaultDescription\",\n            scopeIdentifier: this.organizationService.get(this.organizationId).name,\n          }\n        : {\n            title: \"exportingPersonalVaultTitle\",\n            description: \"exportingPersonalVaultDescription\",\n            scopeIdentifier: await this.stateService.getEmail(),\n          };\n    this.show = true;\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from \"@angular/core\";\n\n@Directive({\n  selector: \"[appBoxRow]\",\n})\nexport class BoxRowDirective implements OnInit {\n  el: HTMLElement = null;\n  formEls: Element[];\n\n  constructor(elRef: ElementRef) {\n    this.el = elRef.nativeElement;\n  }\n\n  ngOnInit(): void {\n    this.formEls = Array.from(\n      this.el.querySelectorAll('input:not([type=\"hidden\"]), select, textarea')\n    );\n    this.formEls.forEach((formEl) => {\n      formEl.addEventListener(\n        \"focus\",\n        () => {\n          this.el.classList.add(\"active\");\n        },\n        false\n      );\n\n      formEl.addEventListener(\n        \"blur\",\n        () => {\n          this.el.classList.remove(\"active\");\n        },\n        false\n      );\n    });\n  }\n\n  @HostListener(\"click\", [\"$event\"]) onClick(event: Event) {\n    const target = event.target as HTMLElement;\n    if (\n      target !== this.el &&\n      !target.classList.contains(\"progress\") &&\n      !target.classList.contains(\"progress-bar\")\n    ) {\n      return;\n    }\n\n    if (this.formEls.length > 0) {\n      const formEl = this.formEls[0] as HTMLElement;\n      if (formEl.tagName.toLowerCase() === \"input\") {\n        const inputEl = formEl as HTMLInputElement;\n        if (inputEl.type != null && inputEl.type.toLowerCase() === \"checkbox\") {\n          inputEl.click();\n          return;\n        }\n      }\n      formEl.focus();\n    }\n  }\n}\n","export class ImportError extends Error {\n  constructor(message?: string, public passwordRequired: boolean = false) {\n    super(message);\n  }\n}\n","import { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nexport abstract class ImportApiServiceAbstraction {\n  postImportCiphers: (request: ImportCiphersRequest) => Promise<any>;\n  postImportOrganizationCiphers: (\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ) => Promise<any>;\n}\n","import { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nimport { ImportApiServiceAbstraction } from \"./import-api.service.abstraction\";\n\nexport class ImportApiService implements ImportApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  async postImportCiphers(request: ImportCiphersRequest): Promise<any> {\n    return await this.apiService.send(\"POST\", \"/ciphers/import\", request, true, false);\n  }\n\n  async postImportOrganizationCiphers(\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ): Promise<any> {\n    return await this.apiService.send(\n      \"POST\",\n      \"/ciphers/import-organization?organizationId=\" + organizationId,\n      request,\n      true,\n      false\n    );\n  }\n}\n","import { Importer } from \"../importers/importer\";\nimport { ImportError } from \"../models/import-error\";\nimport { ImportOption, ImportType } from \"../models/import-options\";\n\nexport abstract class ImportServiceAbstraction {\n  featuredImportOptions: readonly ImportOption[];\n  regularImportOptions: readonly ImportOption[];\n  getImportOptions: () => ImportOption[];\n  import: (\n    importer: Importer,\n    fileContents: string,\n    organizationId?: string\n  ) => Promise<ImportError>;\n  getImporter: (\n    format: ImportType | \"bitwardenpasswordprotected\",\n    organizationId: string,\n    password?: string\n  ) => Importer;\n}\n","import { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { FolderRequest } from \"../../vault/models/request/folder.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  folders: FolderRequest[] = [];\n  folderRelationships: KvpRequest<number, number>[] = [];\n}\n","import { CollectionRequest } from \"../../admin-console/models/request/collection.request\";\nimport { CipherRequest } from \"../../vault/models/request/cipher.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportOrganizationCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  collections: CollectionRequest[] = [];\n  collectionRelationships: KvpRequest<number, number>[] = [];\n}\n","export class KvpRequest<TK, TV> {\n  key: TK;\n  value: TV;\n\n  constructor(key: TK, value: TV) {\n    this.key = key;\n    this.value = value;\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nexport class ImportResult {\n  success = false;\n  missingPassword = false;\n  errorMessage: string;\n  ciphers: CipherView[] = [];\n  folders: FolderView[] = [];\n  folderRelationships: [number, number][] = [];\n  collections: CollectionView[] = [];\n  collectionRelationships: [number, number][] = [];\n}\n","import * as papa from \"papaparse\";\n\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\nimport { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { ConsoleLogService } from \"@bitwarden/common/services/consoleLog.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { LoginUriView } from \"@bitwarden/common/vault/models/view/login-uri.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nexport abstract class BaseImporter {\n  organizationId: string = null;\n\n  protected logService: LogService = new ConsoleLogService(false);\n\n  protected newLineRegex = /(?:\\r\\n|\\r|\\n)/;\n\n  protected passwordFieldNames = [\n    \"password\",\n    \"pass word\",\n    \"passphrase\",\n    \"pass phrase\",\n    \"pass\",\n    \"code\",\n    \"code word\",\n    \"codeword\",\n    \"secret\",\n    \"secret word\",\n    \"personpwd\",\n    \"key\",\n    \"keyword\",\n    \"key word\",\n    \"keyphrase\",\n    \"key phrase\",\n    \"form_pw\",\n    \"wppassword\",\n    \"pin\",\n    \"pwd\",\n    \"pw\",\n    \"pword\",\n    \"passwd\",\n    \"p\",\n    \"serial\",\n    \"serial#\",\n    \"license key\",\n    \"reg #\",\n\n    // Non-English names\n    \"passwort\",\n  ];\n\n  protected usernameFieldNames = [\n    \"user\",\n    \"name\",\n    \"user name\",\n    \"username\",\n    \"login name\",\n    \"email\",\n    \"e-mail\",\n    \"id\",\n    \"userid\",\n    \"user id\",\n    \"login\",\n    \"form_loginname\",\n    \"wpname\",\n    \"mail\",\n    \"loginid\",\n    \"login id\",\n    \"log\",\n    \"personlogin\",\n    \"first name\",\n    \"last name\",\n    \"card#\",\n    \"account #\",\n    \"member\",\n    \"member #\",\n\n    // Non-English names\n    \"nom\",\n    \"benutzername\",\n  ];\n\n  protected notesFieldNames = [\n    \"note\",\n    \"notes\",\n    \"comment\",\n    \"comments\",\n    \"memo\",\n    \"description\",\n    \"free form\",\n    \"freeform\",\n    \"free text\",\n    \"freetext\",\n    \"free\",\n\n    // Non-English names\n    \"kommentar\",\n  ];\n\n  protected uriFieldNames: string[] = [\n    \"url\",\n    \"hyper link\",\n    \"hyperlink\",\n    \"link\",\n    \"host\",\n    \"hostname\",\n    \"host name\",\n    \"server\",\n    \"address\",\n    \"hyper ref\",\n    \"href\",\n    \"web\",\n    \"website\",\n    \"web site\",\n    \"site\",\n    \"web-site\",\n    \"uri\",\n\n    // Non-English names\n    \"ort\",\n    \"adresse\",\n  ];\n\n  protected parseCsvOptions = {\n    encoding: \"UTF-8\",\n    skipEmptyLines: false,\n  };\n\n  protected get organization() {\n    return this.organizationId != null;\n  }\n\n  protected parseXml(data: string): Document {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(data, \"application/xml\");\n    return doc != null && doc.querySelector(\"parsererror\") == null ? doc : null;\n  }\n\n  protected parseCsv(data: string, header: boolean, options: any = {}): any[] {\n    const parseOptions: papa.ParseConfig<string> = Object.assign(\n      { header: header },\n      this.parseCsvOptions,\n      options\n    );\n    data = this.splitNewLine(data).join(\"\\n\").trim();\n    const result = papa.parse(data, parseOptions);\n    if (result.errors != null && result.errors.length > 0) {\n      result.errors.forEach((e) => {\n        if (e.row != null) {\n          this.logService.warning(\"Error parsing row \" + e.row + \": \" + e.message);\n        }\n      });\n    }\n    return result.data && result.data.length > 0 ? result.data : null;\n  }\n\n  protected parseSingleRowCsv(rowData: string) {\n    if (this.isNullOrWhitespace(rowData)) {\n      return null;\n    }\n    const parsedRow = this.parseCsv(rowData, false);\n    if (parsedRow != null && parsedRow.length > 0 && parsedRow[0].length > 0) {\n      return parsedRow[0];\n    }\n    return null;\n  }\n\n  protected makeUriArray(uri: string | string[]): LoginUriView[] {\n    if (uri == null) {\n      return null;\n    }\n\n    if (typeof uri === \"string\") {\n      const loginUri = new LoginUriView();\n      loginUri.uri = this.fixUri(uri);\n      if (this.isNullOrWhitespace(loginUri.uri)) {\n        return null;\n      }\n      loginUri.match = null;\n      return [loginUri];\n    }\n\n    if (uri.length > 0) {\n      const returnArr: LoginUriView[] = [];\n      uri.forEach((u) => {\n        const loginUri = new LoginUriView();\n        loginUri.uri = this.fixUri(u);\n        if (this.isNullOrWhitespace(loginUri.uri)) {\n          return;\n        }\n        loginUri.match = null;\n        returnArr.push(loginUri);\n      });\n      return returnArr.length === 0 ? null : returnArr;\n    }\n\n    return null;\n  }\n\n  protected fixUri(uri: string) {\n    if (uri == null) {\n      return null;\n    }\n    uri = uri.trim();\n    if (uri.indexOf(\"://\") === -1 && uri.indexOf(\".\") >= 0) {\n      uri = \"http://\" + uri;\n    }\n    if (uri.length > 1000) {\n      return uri.substring(0, 1000);\n    }\n    return uri;\n  }\n\n  protected nameFromUrl(url: string) {\n    const hostname = Utils.getHostname(url);\n    if (this.isNullOrWhitespace(hostname)) {\n      return null;\n    }\n    return hostname.startsWith(\"www.\") ? hostname.replace(\"www.\", \"\") : hostname;\n  }\n\n  protected isNullOrWhitespace(str: string): boolean {\n    return Utils.isNullOrWhitespace(str);\n  }\n\n  protected getValueOrDefault(str: string, defaultValue: string = null): string {\n    if (this.isNullOrWhitespace(str)) {\n      return defaultValue;\n    }\n    return str;\n  }\n\n  protected splitNewLine(str: string): string[] {\n    return str.split(this.newLineRegex);\n  }\n\n  // ref https://stackoverflow.com/a/5911300\n  protected getCardBrand(cardNum: string) {\n    if (this.isNullOrWhitespace(cardNum)) {\n      return null;\n    }\n\n    // Visa\n    let re = new RegExp(\"^4\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    // Mastercard\n    // Updated for Mastercard 2017 BINs expansion\n    if (\n      /^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$/.test(\n        cardNum\n      )\n    ) {\n      return \"Mastercard\";\n    }\n\n    // AMEX\n    re = new RegExp(\"^3[47]\");\n    if (cardNum.match(re) != null) {\n      return \"Amex\";\n    }\n\n    // Discover\n    re = new RegExp(\n      \"^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)\"\n    );\n    if (cardNum.match(re) != null) {\n      return \"Discover\";\n    }\n\n    // Diners\n    re = new RegExp(\"^36\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // Diners - Carte Blanche\n    re = new RegExp(\"^30[0-5]\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // JCB\n    re = new RegExp(\"^35(2[89]|[3-8][0-9])\");\n    if (cardNum.match(re) != null) {\n      return \"JCB\";\n    }\n\n    // Visa Electron\n    re = new RegExp(\"^(4026|417500|4508|4844|491(3|7))\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    return null;\n  }\n\n  protected setCardExpiration(cipher: CipherView, expiration: string): boolean {\n    if (!this.isNullOrWhitespace(expiration)) {\n      expiration = expiration.replace(/\\s/g, \"\");\n      const parts = expiration.split(\"/\");\n      if (parts.length === 2) {\n        let month: string = null;\n        let year: string = null;\n        if (parts[0].length === 1 || parts[0].length === 2) {\n          month = parts[0];\n          if (month.length === 2 && month[0] === \"0\") {\n            month = month.substr(1, 1);\n          }\n        }\n        if (parts[1].length === 2 || parts[1].length === 4) {\n          year = month.length === 2 ? \"20\" + parts[1] : parts[1];\n        }\n        if (month != null && year != null) {\n          cipher.card.expMonth = month;\n          cipher.card.expYear = year;\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  protected moveFoldersToCollections(result: ImportResult) {\n    result.folderRelationships.forEach((r) => result.collectionRelationships.push(r));\n    result.collections = result.folders.map((f) => {\n      const collection = new CollectionView();\n      collection.name = f.name;\n      return collection;\n    });\n    result.folderRelationships = [];\n    result.folders = [];\n  }\n\n  protected querySelectorDirectChild(parentEl: Element, query: string) {\n    const els = this.querySelectorAllDirectChild(parentEl, query);\n    return els.length === 0 ? null : els[0];\n  }\n\n  protected querySelectorAllDirectChild(parentEl: Element, query: string) {\n    return Array.from(parentEl.querySelectorAll(query)).filter((el) => el.parentNode === parentEl);\n  }\n\n  protected initLoginCipher() {\n    const cipher = new CipherView();\n    cipher.favorite = false;\n    cipher.notes = \"\";\n    cipher.fields = [];\n    cipher.login = new LoginView();\n    cipher.type = CipherType.Login;\n    return cipher;\n  }\n\n  protected cleanupCipher(cipher: CipherView) {\n    if (cipher == null) {\n      return;\n    }\n    if (cipher.type !== CipherType.Login) {\n      cipher.login = null;\n    }\n    if (this.isNullOrWhitespace(cipher.name)) {\n      cipher.name = \"--\";\n    }\n    if (this.isNullOrWhitespace(cipher.notes)) {\n      cipher.notes = null;\n    } else {\n      cipher.notes = cipher.notes.trim();\n    }\n    if (cipher.fields != null && cipher.fields.length === 0) {\n      cipher.fields = null;\n    }\n  }\n\n  protected processKvp(\n    cipher: CipherView,\n    key: string,\n    value: string,\n    type: FieldType = FieldType.Text\n  ) {\n    if (this.isNullOrWhitespace(value)) {\n      return;\n    }\n    if (this.isNullOrWhitespace(key)) {\n      key = \"\";\n    }\n    if (value.length > 200 || value.trim().search(this.newLineRegex) > -1) {\n      if (cipher.notes == null) {\n        cipher.notes = \"\";\n      }\n      cipher.notes += key + \": \" + this.splitNewLine(value).join(\"\\n\") + \"\\n\";\n    } else {\n      if (cipher.fields == null) {\n        cipher.fields = [];\n      }\n      const field = new FieldView();\n      field.type = type;\n      field.name = key;\n      field.value = value;\n      cipher.fields.push(field);\n    }\n  }\n\n  protected processFolder(result: ImportResult, folderName: string) {\n    let folderIndex = result.folders.length;\n    const hasFolder = !this.isNullOrWhitespace(folderName);\n    // Replace backslashes with forward slashes, ensuring we create sub-folders\n    folderName = folderName.replace(\"\\\\\", \"/\");\n    let addFolder = hasFolder;\n\n    if (hasFolder) {\n      for (let i = 0; i < result.folders.length; i++) {\n        if (result.folders[i].name === folderName) {\n          addFolder = false;\n          folderIndex = i;\n          break;\n        }\n      }\n    }\n\n    if (addFolder) {\n      const f = new FolderView();\n      f.name = folderName;\n      result.folders.push(f);\n    }\n    if (hasFolder) {\n      result.folderRelationships.push([result.ciphers.length, folderIndex]);\n    }\n  }\n\n  protected convertToNoteIfNeeded(cipher: CipherView) {\n    if (\n      cipher.type === CipherType.Login &&\n      this.isNullOrWhitespace(cipher.login.username) &&\n      this.isNullOrWhitespace(cipher.login.password) &&\n      (cipher.login.uris == null || cipher.login.uris.length === 0)\n    ) {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    }\n  }\n\n  protected processFullName(cipher: CipherView, fullName: string) {\n    if (this.isNullOrWhitespace(fullName)) {\n      return;\n    }\n\n    const nameParts = fullName.split(\" \");\n    if (nameParts.length > 0) {\n      cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n    }\n    if (nameParts.length === 2) {\n      cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n    } else if (nameParts.length >= 3) {\n      cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n      cipher.identity.lastName = nameParts.slice(2, nameParts.length).join(\" \");\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AscendoCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 2) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const val: string = value[i + 2];\n          const field: string = value[i + 1];\n          if (this.isNullOrWhitespace(val) || this.isNullOrWhitespace(field)) {\n            continue;\n          }\n\n          const fieldLower = field.toLowerCase();\n          if (cipher.login.password == null && this.passwordFieldNames.indexOf(fieldLower) > -1) {\n            cipher.login.password = this.getValueOrDefault(val);\n          } else if (\n            cipher.login.username == null &&\n            this.usernameFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.username = this.getValueOrDefault(val);\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n          } else {\n            this.processKvp(cipher, field, val);\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.login.uris = this.makeUriArray(value.web);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.username = this.getValueOrDefault(value.login);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.logins != null) {\n      results.logins.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.pwd);\n        cipher.login.username = this.getValueOrDefault(value.loginName);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.notes != null) {\n      results.notes.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.name = this.getValueOrDefault(value.label);\n        cipher.notes = this.getValueOrDefault(value.text);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.cards != null) {\n      results.cards.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Card;\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.card.cardholderName = this.getValueOrDefault(value.holderName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        if (value.expirationDate != null) {\n          if (value.expirationDate.month != null) {\n            cipher.card.expMonth = value.expirationDate.month + \"\";\n          }\n          if (value.expirationDate.year != null) {\n            cipher.card.expYear = value.expirationDate.year + \"\";\n          }\n        }\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AviraCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.name,\n        this.getValueOrDefault(this.nameFromUrl(value.website), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.website);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (\n        this.isNullOrWhitespace(value.username) &&\n        !this.isNullOrWhitespace(value.secondary_username)\n      ) {\n        cipher.login.username = value.secondary_username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.notes = this.getValueOrDefault(value.secondary_username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlackBerryCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.grouping === \"list\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.favorite = value.fav === \"1\";\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.extra);\n      if (value.grouping !== \"note\") {\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ChromeCsvImporter extends BaseImporter implements Importer {\n  private androidPatternRegex = new RegExp(\"^android:\\\\/\\\\/.*(?<=@)(.*)(?=\\\\/)\");\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      let name = value.name;\n      if (!name && this.androidPatternRegex.test(value.url)) {\n        name = value.url.match(this.androidPatternRegex)[1];\n      }\n      cipher.name = this.getValueOrDefault(name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\nimport { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.organization && !this.isNullOrWhitespace(value.collections)) {\n        const collections = (value.collections as string).split(\",\");\n        collections.forEach((col) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === col) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = col;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization) {\n        this.processFolder(result, value.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.favorite =\n        !this.organization && this.getValueOrDefault(value.favorite, \"0\") !== \"0\" ? true : false;\n      cipher.type = CipherType.Login;\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      try {\n        cipher.reprompt = parseInt(\n          this.getValueOrDefault(value.reprompt, CipherRepromptType.None.toString()),\n          10\n        );\n      } catch (e) {\n        // eslint-disable-next-line\n        console.error(\"Unable to parse reprompt value\", e);\n        cipher.reprompt = CipherRepromptType.None;\n      }\n\n      if (!this.isNullOrWhitespace(value.fields)) {\n        const fields = this.splitNewLine(value.fields);\n        for (let i = 0; i < fields.length; i++) {\n          if (this.isNullOrWhitespace(fields[i])) {\n            continue;\n          }\n\n          const delimPosition = fields[i].lastIndexOf(\": \");\n          if (delimPosition === -1) {\n            continue;\n          }\n\n          if (cipher.fields == null) {\n            cipher.fields = [];\n          }\n\n          const field = new FieldView();\n          field.name = fields[i].substr(0, delimPosition);\n          field.value = null;\n          field.type = FieldType.Text;\n          if (fields[i].length > delimPosition + 2) {\n            field.value = fields[i].substr(delimPosition + 2);\n          }\n          cipher.fields.push(field);\n        }\n      }\n\n      const valueType = value.type != null ? value.type.toLowerCase() : null;\n      switch (valueType) {\n        case \"note\":\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote = new SecureNoteView();\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default: {\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.totp = this.getValueOrDefault(value.login_totp || value.totp);\n          cipher.login.username = this.getValueOrDefault(value.login_username || value.username);\n          cipher.login.password = this.getValueOrDefault(value.login_password || value.password);\n          const uris = this.parseSingleRowCsv(value.login_uri || value.uri);\n          cipher.login.uris = this.makeUriArray(uris);\n          break;\n        }\n      }\n\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { CipherWithIdExport } from \"@bitwarden/common/models/export/cipher-with-ids.export\";\nimport { CollectionWithIdExport } from \"@bitwarden/common/models/export/collection-with-id.export\";\nimport { FolderWithIdExport } from \"@bitwarden/common/models/export/folder-with-id.export\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenJsonImporter extends BaseImporter implements Importer {\n  private results: any;\n  private result: ImportResult;\n\n  constructor(protected cryptoService: CryptoService, protected i18nService: I18nService) {\n    super();\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    this.results = JSON.parse(data);\n    if (this.results == null || this.results.items == null) {\n      if (this.results?.passwordProtected) {\n        this.result.success = false;\n        this.result.missingPassword = true;\n        this.result.errorMessage = this.i18nService.t(\"importPasswordRequired\");\n        return this.result;\n      }\n\n      this.result.success = false;\n      return this.result;\n    }\n\n    if (this.results.encrypted) {\n      await this.parseEncrypted();\n    } else {\n      this.parseDecrypted();\n    }\n\n    return this.result;\n  }\n\n  private async parseEncrypted() {\n    if (this.results.encKeyValidation_DO_NOT_EDIT != null) {\n      const orgKey = await this.cryptoService.getOrgKey(this.organizationId);\n      const encKeyValidation = new EncString(this.results.encKeyValidation_DO_NOT_EDIT);\n      const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n        encKeyValidation,\n        orgKey\n      );\n      if (encKeyValidationDecrypt === null) {\n        this.result.success = false;\n        this.result.errorMessage = this.i18nService.t(\"importEncKeyError\");\n        return;\n      }\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    if (this.organization && this.results.collections != null) {\n      for (const c of this.results.collections as CollectionWithIdExport[]) {\n        const collection = CollectionWithIdExport.toDomain(c);\n        if (collection != null) {\n          collection.id = null;\n          collection.organizationId = this.organizationId;\n          const view = await collection.decrypt();\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(view);\n        }\n      }\n    } else if (!this.organization && this.results.folders != null) {\n      for (const f of this.results.folders as FolderWithIdExport[]) {\n        const folder = FolderWithIdExport.toDomain(f);\n        if (folder != null) {\n          folder.id = null;\n          const view = await folder.decrypt();\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(view);\n        }\n      }\n    }\n\n    for (const c of this.results.items as CipherWithIdExport[]) {\n      const cipher = CipherWithIdExport.toDomain(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.folderId = null;\n      cipher.organizationId = this.organizationId;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      const view = await cipher.decrypt();\n      this.cleanupCipher(view);\n      this.result.ciphers.push(view);\n    }\n\n    this.result.success = true;\n  }\n\n  private parseDecrypted() {\n    const groupingsMap = new Map<string, number>();\n    if (this.organization && this.results.collections != null) {\n      this.results.collections.forEach((c: CollectionWithIdExport) => {\n        const collection = CollectionWithIdExport.toView(c);\n        if (collection != null) {\n          collection.id = null;\n          collection.organizationId = null;\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(collection);\n        }\n      });\n    } else if (!this.organization && this.results.folders != null) {\n      this.results.folders.forEach((f: FolderWithIdExport) => {\n        const folder = FolderWithIdExport.toView(f);\n        if (folder != null) {\n          folder.id = null;\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(folder);\n        }\n      });\n    }\n\n    this.results.items.forEach((c: CipherWithIdExport) => {\n      const cipher = CipherWithIdExport.toView(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.folderId = null;\n      cipher.organizationId = null;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n  }\n}\n","import { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { KdfConfig } from \"@bitwarden/common/auth/models/domain/kdf-config\";\nimport { KdfType } from \"@bitwarden/common/enums\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { Importer } from \"../importer\";\n\nimport { BitwardenJsonImporter } from \"./bitwarden-json-importer\";\nimport { BitwardenPasswordProtectedFileFormat } from \"./bitwarden-password-protected-types\";\nexport class BitwardenPasswordProtectedImporter extends BitwardenJsonImporter implements Importer {\n  private key: SymmetricCryptoKey;\n\n  constructor(cryptoService: CryptoService, i18nService: I18nService, private password: string) {\n    super(cryptoService, i18nService);\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const parsedData = JSON.parse(data);\n    if (this.cannotParseFile(parsedData)) {\n      result.success = false;\n      return result;\n    }\n\n    if (!(await this.checkPassword(parsedData))) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"invalidFilePassword\");\n      return result;\n    }\n\n    const encData = new EncString(parsedData.data);\n    const clearTextData = await this.cryptoService.decryptToUtf8(encData, this.key);\n    return await super.parse(clearTextData);\n  }\n\n  private async checkPassword(jdoc: BitwardenPasswordProtectedFileFormat): Promise<boolean> {\n    this.key = await this.cryptoService.makePinKey(\n      this.password,\n      jdoc.salt,\n      jdoc.kdfType,\n      new KdfConfig(jdoc.kdfIterations, jdoc.kdfMemory, jdoc.kdfParallelism)\n    );\n\n    const encKeyValidation = new EncString(jdoc.encKeyValidation_DO_NOT_EDIT);\n\n    const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n      encKeyValidation,\n      this.key\n    );\n    if (encKeyValidationDecrypt === null) {\n      return false;\n    }\n    return true;\n  }\n\n  private cannotParseFile(jdoc: BitwardenPasswordProtectedFileFormat): boolean {\n    return (\n      !jdoc ||\n      !jdoc.encrypted ||\n      !jdoc.passwordProtected ||\n      !jdoc.salt ||\n      !jdoc.kdfIterations ||\n      typeof jdoc.kdfIterations !== \"number\" ||\n      jdoc.kdfType == null ||\n      KdfType[jdoc.kdfType] == null ||\n      !jdoc.encKeyValidation_DO_NOT_EDIT ||\n      !jdoc.data\n    );\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlurCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.label === \"null\") {\n        value.label = null;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.label,\n        this.getValueOrDefault(this.nameFromUrl(value.domain), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.domain);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (this.isNullOrWhitespace(value.email) && !this.isNullOrWhitespace(value.username)) {\n        cipher.login.username = value.username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.email);\n        cipher.notes = this.getValueOrDefault(value.username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst OfficialProps = [\"!group_id\", \"!group_name\", \"title\", \"username\", \"password\", \"URL\", \"id\"];\n\nexport class ButtercupCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value[\"!group_name\"]));\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      let processingCustomFields = false;\n      for (const prop in value) {\n        // eslint-disable-next-line\n        if (value.hasOwnProperty(prop)) {\n          if (!processingCustomFields && OfficialProps.indexOf(prop) === -1) {\n            processingCustomFields = true;\n          }\n          if (processingCustomFields) {\n            this.processKvp(cipher, prop, value[prop]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ClipperzHtmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const textarea = doc.querySelector(\"textarea\");\n    if (textarea == null || this.isNullOrWhitespace(textarea.textContent)) {\n      result.errorMessage = \"Missing textarea.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const entries = JSON.parse(textarea.textContent);\n    entries.forEach((entry: any) => {\n      const cipher = this.initLoginCipher();\n      if (!this.isNullOrWhitespace(entry.label)) {\n        cipher.name = entry.label.split(\" \")[0];\n      }\n      if (entry.data != null && !this.isNullOrWhitespace(entry.data.notes)) {\n        cipher.notes = entry.data.notes.split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (entry.currentVersion != null && entry.currentVersion.fields != null) {\n        for (const property in entry.currentVersion.fields) {\n          // eslint-disable-next-line\n          if (!entry.currentVersion.fields.hasOwnProperty(property)) {\n            continue;\n          }\n\n          const field = entry.currentVersion.fields[property];\n          const actionType = field.actionType != null ? field.actionType.toLowerCase() : null;\n          switch (actionType) {\n            case \"password\":\n              cipher.login.password = this.getValueOrDefault(field.value);\n              break;\n            case \"email\":\n            case \"username\":\n            case \"user\":\n            case \"name\":\n              cipher.login.username = this.getValueOrDefault(field.value);\n              break;\n            case \"url\":\n              cipher.login.uris = this.makeUriArray(field.value);\n              break;\n            default: {\n              const labelLower = field.label != null ? field.label.toLowerCase() : null;\n              if (\n                cipher.login.password == null &&\n                this.passwordFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.password = this.getValueOrDefault(field.value);\n              } else if (\n                cipher.login.username == null &&\n                this.usernameFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.username = this.getValueOrDefault(field.value);\n              } else if (\n                (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n                this.uriFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.uris = this.makeUriArray(field.value);\n              } else {\n                this.processKvp(cipher, field.label, field.value);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class CodebookCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value.Category));\n\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite) === \"True\";\n      cipher.name = this.getValueOrDefault(value.Entry, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.login.username = this.getValueOrDefault(value.Username, value.Email);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.totp = this.getValueOrDefault(value.TOTP);\n      cipher.login.uris = this.makeUriArray(value.Website);\n\n      if (!this.isNullOrWhitespace(value.Username)) {\n        this.processKvp(cipher, \"Email\", value.Email);\n      }\n      this.processKvp(cipher, \"Phone\", value.Phone);\n      this.processKvp(cipher, \"PIN\", value.PIN);\n      this.processKvp(cipher, \"Account\", value.Account);\n      this.processKvp(cipher, \"Date\", value.Date);\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CredentialsRecord,\n  IdRecord,\n  PaymentsRecord,\n  PersonalInformationRecord,\n  SecureNoteRecord,\n} from \"./types/dashlane-csv-types\";\n\nconst _mappedCredentialsColums = new Set([\n  \"title\",\n  \"note\",\n  \"username\",\n  \"password\",\n  \"url\",\n  \"otpSecret\",\n  \"category\",\n]);\n\nconst _mappedPersonalInfoAsIdentiyColumns = new Set([\n  \"type\",\n  \"title\",\n  \"first_name\",\n  \"middle_name\",\n  \"last_name\",\n  \"login\",\n  \"email\",\n  \"phone_number\",\n  \"address\",\n  \"country\",\n  \"state\",\n  \"city\",\n  \"zip\",\n  // Skip item_name as we already have set a combined name\n  \"item_name\",\n]);\n\nconst _mappedSecureNoteColumns = new Set([\"title\", \"note\"]);\n\nexport class DashlaneCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results[0].type != null && results[0].title != null) {\n      const personalRecords = results as PersonalInformationRecord[];\n\n      // If personalRecords has only one \"name\" then create an Identity-Cipher\n      if (personalRecords.filter((x) => x.type === \"name\").length === 1) {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        results.forEach((row) => {\n          this.parsePersonalInformationRecordAsIdentity(cipher, row);\n        });\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n        result.success = true;\n        return Promise.resolve(result);\n      }\n    }\n\n    results.forEach((row) => {\n      const cipher = this.initLoginCipher();\n\n      const rowKeys = Object.keys(row);\n      if (rowKeys[0] === \"username\") {\n        this.processFolder(result, row.category);\n        this.parseCredentialsRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"account_name\") {\n        this.parsePaymentRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"number\") {\n        this.parseIdRecord(cipher, row);\n      }\n\n      if ((rowKeys[0] === \"type\") != null && rowKeys[1] === \"title\") {\n        this.parsePersonalInformationRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"title\" && rowKeys[1] === \"note\") {\n        this.parseSecureNoteRecords(cipher, row);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  parseCredentialsRecord(cipher: CipherView, row: CredentialsRecord) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    cipher.name = row.title;\n    cipher.notes = row.note;\n    cipher.login.username = row.username;\n    cipher.login.password = row.password;\n    cipher.login.totp = row.otpSecret;\n    cipher.login.uris = this.makeUriArray(row.url);\n\n    this.importUnmappedFields(cipher, row, _mappedCredentialsColums);\n  }\n\n  parsePaymentRecord(cipher: CipherView, row: PaymentsRecord) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n\n    cipher.name = row.account_name;\n    let mappedValues: string[] = [];\n    switch (row.type) {\n      case \"credit_card\":\n        cipher.card.cardholderName = row.account_name;\n        cipher.card.number = row.cc_number;\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = row.code;\n        this.setCardExpiration(cipher, `${row.expiration_month}/${row.expiration_year}`);\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\n          \"account_name\",\n          \"account_holder\",\n          \"cc_number\",\n          \"code\",\n          \"expiration_month\",\n          \"expiration_year\",\n        ];\n        break;\n      case \"bank\":\n        cipher.card.cardholderName = row.account_holder;\n        cipher.card.number = row.account_number;\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\"account_name\", \"account_holder\", \"account_number\"];\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parseIdRecord(cipher: CipherView, row: IdRecord) {\n    cipher.type = CipherType.Identity;\n    cipher.identity = new IdentityView();\n\n    const mappedValues: string[] = [\"name\", \"number\"];\n    switch (row.type) {\n      case \"card\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        break;\n      case \"passport\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.passportNumber = row.number;\n        break;\n      case \"license\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        cipher.identity.state = row.state;\n\n        mappedValues.push(\"state\");\n        break;\n      case \"social_security\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.ssn = row.number;\n        break;\n      case \"tax_number\":\n        cipher.name = row.type;\n        cipher.identity.licenseNumber = row.number;\n        break;\n\n      default:\n        break;\n    }\n\n    // If you add more mapped fields please extend this\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parsePersonalInformationRecord(cipher: CipherView, row: PersonalInformationRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    if (row.type === \"name\") {\n      cipher.name = `${row.title} ${row.first_name} ${row.middle_name} ${row.last_name}`\n        .replace(\"  \", \" \")\n        .trim();\n    } else {\n      cipher.name = row.item_name;\n    }\n\n    const dataRow = row as any;\n    Object.keys(row).forEach((key) => {\n      this.processKvp(cipher, key, dataRow[key]);\n    });\n  }\n\n  parsePersonalInformationRecordAsIdentity(cipher: CipherView, row: PersonalInformationRecord) {\n    switch (row.type) {\n      case \"name\":\n        this.processFullName(cipher, `${row.first_name} ${row.middle_name} ${row.last_name}`);\n        cipher.identity.title = row.title;\n        cipher.name = cipher.identity.fullName;\n\n        cipher.identity.username = row.login;\n        break;\n      case \"email\":\n        cipher.identity.email = row.email;\n        break;\n      case \"number\":\n        cipher.identity.phone = row.phone_number;\n        break;\n      case \"address\":\n        cipher.identity.address1 = row.address;\n        cipher.identity.city = row.city;\n        cipher.identity.postalCode = row.zip;\n        cipher.identity.state = row.state;\n        cipher.identity.country = row.country;\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, _mappedPersonalInfoAsIdentiyColumns);\n  }\n\n  parseSecureNoteRecords(cipher: CipherView, row: SecureNoteRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = row.title;\n    cipher.notes = row.note;\n\n    this.importUnmappedFields(cipher, row, _mappedSecureNoteColumns);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nconst HandledResults = new Set([\n  \"ADDRESS\",\n  \"AUTHENTIFIANT\",\n  \"BANKSTATEMENT\",\n  \"IDCARD\",\n  \"IDENTITY\",\n  \"PAYMENTMEANS_CREDITCARD\",\n  \"PAYMENTMEAN_PAYPAL\",\n  \"EMAIL\",\n]);\n\nexport class DashlaneJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    if (results.ADDRESS != null) {\n      this.processAddress(results.ADDRESS);\n    }\n    if (results.AUTHENTIFIANT != null) {\n      this.processAuth(results.AUTHENTIFIANT);\n    }\n    if (results.BANKSTATEMENT != null) {\n      this.processNote(results.BANKSTATEMENT, \"BankAccountName\");\n    }\n    if (results.IDCARD != null) {\n      this.processNote(results.IDCARD, \"Fullname\");\n    }\n    if (results.PAYMENTMEANS_CREDITCARD != null) {\n      this.processCard(results.PAYMENTMEANS_CREDITCARD);\n    }\n    if (results.IDENTITY != null) {\n      this.processIdentity(results.IDENTITY);\n    }\n\n    for (const key in results) {\n      // eslint-disable-next-line\n      if (results.hasOwnProperty(key) && !HandledResults.has(key)) {\n        this.processNote(results[key], null, \"Generic Note\");\n      }\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processAuth(results: any[]) {\n    results.forEach((credential: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(credential.title);\n\n      cipher.login.username = this.getValueOrDefault(\n        credential.login,\n        this.getValueOrDefault(credential.secondaryLogin)\n      );\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.domain);\n      cipher.notes += this.getValueOrDefault(credential.note, \"\");\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processIdentity(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.fullName, \"\");\n      const nameParts = cipher.name.split(\" \");\n      if (nameParts.length > 0) {\n        cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n      }\n      if (nameParts.length === 2) {\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n      } else if (nameParts.length === 3) {\n        cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[2]);\n      }\n      cipher.identity.username = this.getValueOrDefault(obj.pseudo);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processAddress(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.addressName);\n      cipher.identity.address1 = this.getValueOrDefault(obj.addressFull);\n      cipher.identity.city = this.getValueOrDefault(obj.city);\n      cipher.identity.state = this.getValueOrDefault(obj.state);\n      cipher.identity.postalCode = this.getValueOrDefault(obj.zipcode);\n      cipher.identity.country = this.getValueOrDefault(obj.country);\n      if (cipher.identity.country != null) {\n        cipher.identity.country = cipher.identity.country.toUpperCase();\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processCard(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.card = new CardView();\n      cipher.type = CipherType.Card;\n      cipher.name = this.getValueOrDefault(obj.bank);\n      cipher.card.number = this.getValueOrDefault(obj.cardNumber);\n      cipher.card.brand = this.getCardBrand(cipher.card.number);\n      cipher.card.cardholderName = this.getValueOrDefault(obj.owner);\n      if (!this.isNullOrWhitespace(cipher.card.brand)) {\n        if (this.isNullOrWhitespace(cipher.name)) {\n          cipher.name = cipher.card.brand;\n        } else {\n          cipher.name += \" - \" + cipher.card.brand;\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processNote(results: any[], nameProperty: string, name: string = null) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.secureNote = new SecureNoteView();\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote.type = SecureNoteType.Generic;\n      if (name != null) {\n        cipher.name = name;\n      } else {\n        cipher.name = this.getValueOrDefault(obj[nameProperty]);\n      }\n      for (const key in obj) {\n        // eslint-disable-next-line\n        if (obj.hasOwnProperty(key) && key !== nameProperty) {\n          this.processKvp(cipher, key, obj[key].toString());\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class EncryptrCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Label, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      const text = this.getValueOrDefault(value.Text);\n      if (!this.isNullOrWhitespace(text)) {\n        if (this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = text;\n        } else {\n          cipher.notes += \"\\n\\n\" + text;\n        }\n      }\n\n      const type = value[\"Entry Type\"];\n      if (type === \"Password\") {\n        cipher.login.username = this.getValueOrDefault(value.Username);\n        cipher.login.password = this.getValueOrDefault(value.Password);\n        cipher.login.uris = this.makeUriArray(value[\"Site URL\"]);\n      } else if (type === \"Credit Card\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value[\"Name on card\"]);\n        cipher.card.number = this.getValueOrDefault(value[\"Card Number\"]);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.CVV);\n        const expiry = this.getValueOrDefault(value.Expiry);\n        if (!this.isNullOrWhitespace(expiry)) {\n          const expParts = expiry.split(\"/\");\n          if (expParts.length > 1) {\n            cipher.card.expMonth = parseInt(expParts[0], null).toString();\n            cipher.card.expYear = (2000 + parseInt(expParts[1], null)).toString();\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class EnpassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let firstRow = true;\n    results.forEach((value) => {\n      if (value.length < 2 || (firstRow && (value[0] === \"Title\" || value[0] === \"title\"))) {\n        firstRow = false;\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (\n        value.length === 2 ||\n        (!this.containsField(value, \"username\") &&\n          !this.containsField(value, \"password\") &&\n          !this.containsField(value, \"email\") &&\n          !this.containsField(value, \"url\"))\n      ) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      }\n\n      if (\n        this.containsField(value, \"cardholder\") &&\n        this.containsField(value, \"number\") &&\n        this.containsField(value, \"expiry date\")\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      }\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const fieldValue: string = value[i + 2];\n          if (this.isNullOrWhitespace(fieldValue)) {\n            continue;\n          }\n\n          const fieldName: string = value[i + 1];\n          const fieldNameLower = fieldName.toLowerCase();\n\n          if (cipher.type === CipherType.Login) {\n            if (\n              fieldNameLower === \"url\" &&\n              (cipher.login.uris == null || cipher.login.uris.length === 0)\n            ) {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              continue;\n            } else if (\n              (fieldNameLower === \"username\" || fieldNameLower === \"email\") &&\n              this.isNullOrWhitespace(cipher.login.username)\n            ) {\n              cipher.login.username = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"password\" &&\n              this.isNullOrWhitespace(cipher.login.password)\n            ) {\n              cipher.login.password = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n              cipher.login.totp = fieldValue;\n              continue;\n            }\n          } else if (cipher.type === CipherType.Card) {\n            if (\n              fieldNameLower === \"cardholder\" &&\n              this.isNullOrWhitespace(cipher.card.cardholderName)\n            ) {\n              cipher.card.cardholderName = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"number\" && this.isNullOrWhitespace(cipher.card.number)) {\n              cipher.card.number = fieldValue;\n              cipher.card.brand = this.getCardBrand(fieldValue);\n              continue;\n            } else if (fieldNameLower === \"cvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n              cipher.card.code = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"expiry date\" &&\n              this.isNullOrWhitespace(cipher.card.expMonth) &&\n              this.isNullOrWhitespace(cipher.card.expYear)\n            ) {\n              if (this.setCardExpiration(cipher, fieldValue)) {\n                continue;\n              }\n            } else if (fieldNameLower === \"type\") {\n              // Skip since brand was determined from number above\n              continue;\n            }\n          }\n\n          this.processKvp(cipher, fieldName, fieldValue);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private containsField(fields: any[], name: string) {\n    if (fields == null || name == null) {\n      return false;\n    }\n    return (\n      fields.filter((f) => !this.isNullOrWhitespace(f) && f.toLowerCase() === name.toLowerCase())\n        .length > 0\n    );\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { EnpassJsonFile, EnpassFolder, EnpassField } from \"./types/enpass-json-type\";\n\ntype EnpassFolderTreeItem = EnpassFolder & { children: EnpassFolderTreeItem[] };\nconst androidUrlRegex = new RegExp(\"androidapp://.*==@\", \"g\");\n\nexport class EnpassJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: EnpassJsonFile = JSON.parse(data);\n    if (results == null || results.items == null || results.items.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    const foldersIndexMap = new Map<string, number>();\n    const folderTree = this.buildFolderTree(results.folders);\n    this.flattenFolderTree(null, folderTree, foldersMap);\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((item) => {\n      if (item.folders != null && item.folders.length > 0 && foldersIndexMap.has(item.folders[0])) {\n        result.folderRelationships.push([\n          result.ciphers.length,\n          foldersIndexMap.get(item.folders[0]),\n        ]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(item.title);\n      cipher.favorite = item.favorite > 0;\n\n      if (item.template_type != null && item.fields != null && item.fields.length > 0) {\n        if (\n          item.template_type.indexOf(\"login.\") === 0 ||\n          item.template_type.indexOf(\"password.\") === 0\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else if (item.template_type.indexOf(\"creditcard.\") === 0) {\n          this.processCard(cipher, item.fields);\n        } else if (\n          item.template_type.indexOf(\"identity.\") < 0 &&\n          item.fields.some((f) => f.type === \"password\" && !this.isNullOrWhitespace(f.value))\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else {\n          this.processNote(cipher, item.fields);\n        }\n      }\n\n      cipher.notes += \"\\n\" + this.getValueOrDefault(item.note, \"\");\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private processLogin(cipher: CipherView, fields: EnpassField[]) {\n    const urls: string[] = [];\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n\n      if (\n        (field.type === \"username\" || field.type === \"email\") &&\n        this.isNullOrWhitespace(cipher.login.username)\n      ) {\n        cipher.login.username = field.value;\n      } else if (field.type === \"password\" && this.isNullOrWhitespace(cipher.login.password)) {\n        cipher.login.password = field.value;\n      } else if (field.type === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n        cipher.login.totp = field.value;\n      } else if (field.type === \"url\") {\n        urls.push(field.value);\n      } else if (field.type === \".Android#\") {\n        let cleanedValue = field.value.startsWith(\"androidapp://\")\n          ? field.value\n          : \"androidapp://\" + field.value;\n        cleanedValue = cleanedValue.replace(\"android://\", \"\");\n        cleanedValue = cleanedValue.replace(androidUrlRegex, \"androidapp://\");\n        urls.push(cleanedValue);\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n    cipher.login.uris = this.makeUriArray(urls);\n  }\n\n  private processCard(cipher: CipherView, fields: EnpassField[]) {\n    cipher.card = new CardView();\n    cipher.type = CipherType.Card;\n    fields.forEach((field) => {\n      if (\n        this.isNullOrWhitespace(field.value) ||\n        field.type === \"section\" ||\n        field.type === \"ccType\"\n      ) {\n        return;\n      }\n\n      if (field.type === \"ccName\" && this.isNullOrWhitespace(cipher.card.cardholderName)) {\n        cipher.card.cardholderName = field.value;\n      } else if (field.type === \"ccNumber\" && this.isNullOrWhitespace(cipher.card.number)) {\n        cipher.card.number = field.value;\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n      } else if (field.type === \"ccCvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n        cipher.card.code = field.value;\n      } else if (field.type === \"ccExpiry\" && this.isNullOrWhitespace(cipher.card.expYear)) {\n        if (!this.setCardExpiration(cipher, field.value)) {\n          this.processKvp(\n            cipher,\n            field.label,\n            field.value,\n            field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n          );\n        }\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n  }\n\n  private processNote(cipher: CipherView, fields: EnpassField[]) {\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n      this.processKvp(\n        cipher,\n        field.label,\n        field.value,\n        field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n      );\n    });\n  }\n\n  private buildFolderTree(folders: EnpassFolder[]): EnpassFolderTreeItem[] {\n    if (folders == null) {\n      return [];\n    }\n    const folderTree: EnpassFolderTreeItem[] = [];\n    const map = new Map<string, EnpassFolderTreeItem>([]);\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      map.set(obj.uuid, obj);\n      obj.children = [];\n    });\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      if (obj.parent_uuid != null && obj.parent_uuid !== \"\" && map.has(obj.parent_uuid)) {\n        map.get(obj.parent_uuid).children.push(obj);\n      } else {\n        folderTree.push(obj);\n      }\n    });\n    return folderTree;\n  }\n\n  private flattenFolderTree(\n    titlePrefix: string,\n    tree: EnpassFolderTreeItem[],\n    map: Map<string, string>\n  ) {\n    if (tree == null) {\n      return;\n    }\n    tree.forEach((f) => {\n      if (f.title != null && f.title.trim() !== \"\") {\n        let title = f.title.trim();\n        if (titlePrefix != null && titlePrefix.trim() !== \"\") {\n          title = titlePrefix + \"/\" + title;\n        }\n        map.set(f.uuid, title);\n        if (f.children != null && f.children.length !== 0) {\n          this.flattenFolderTree(title, f.children, map);\n        }\n      }\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class FirefoxCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results\n      .filter((value) => {\n        return value.url !== \"chrome://FirefoxAccounts\";\n      })\n      .forEach((value) => {\n        const cipher = this.initLoginCipher();\n        const url = this.getValueOrDefault(value.url, this.getValueOrDefault(value.hostname));\n        cipher.name = this.getValueOrDefault(this.nameFromUrl(url), \"--\");\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.uris = this.makeUriArray(url);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export interface FskFile {\n  data: Data;\n}\n\nexport interface Data {\n  [key: string]: FskEntry;\n}\n\nexport enum FskEntryTypesEnum {\n  Login = 1,\n  CreditCard = 2,\n}\n\nexport interface FskEntry {\n  color: string;\n  creditCvv: string;\n  creditExpiry: string;\n  creditNumber: string;\n  favorite: number; // UNIX timestamp\n  notes: string;\n  password: string;\n  passwordList: PasswordList[];\n  passwordModifiedDate: number; // UNIX timestamp\n  rev: string | number;\n  service: string;\n  style: string;\n  type: FskEntryTypesEnum;\n  url: string;\n  username: string;\n  createdDate: number; // UNIX timestamp\n  modifiedDate: number; // UNIX timestamp\n}\n\nexport interface PasswordList {\n  changedate: string;\n  password: string;\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { FskEntry, FskEntryTypesEnum, FskFile } from \"./fsecure-fsk-types\";\n\nexport class FSecureFskImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: FskFile = JSON.parse(data);\n    if (results == null || results.data == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const key in results.data) {\n      // eslint-disable-next-line\n      if (!results.data.hasOwnProperty(key)) {\n        continue;\n      }\n\n      const value = results.data[key];\n      const cipher = this.parseEntry(value);\n      result.ciphers.push(cipher);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseEntry(entry: FskEntry): CipherView {\n    const cipher = this.initLoginCipher();\n    cipher.name = this.getValueOrDefault(entry.service);\n    cipher.notes = this.getValueOrDefault(entry.notes);\n    cipher.favorite = entry.favorite > 0;\n\n    switch (entry.type) {\n      case FskEntryTypesEnum.Login:\n        this.handleLoginEntry(entry, cipher);\n        break;\n      case FskEntryTypesEnum.CreditCard:\n        this.handleCreditCardEntry(entry, cipher);\n        break;\n      default:\n        return;\n        break;\n    }\n\n    this.convertToNoteIfNeeded(cipher);\n    this.cleanupCipher(cipher);\n    return cipher;\n  }\n\n  private handleLoginEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.login.username = this.getValueOrDefault(entry.username);\n    cipher.login.password = this.getValueOrDefault(entry.password);\n    cipher.login.uris = this.makeUriArray(entry.url);\n  }\n\n  private handleCreditCardEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n    cipher.card.cardholderName = this.getValueOrDefault(entry.username);\n    cipher.card.number = this.getValueOrDefault(entry.creditNumber);\n    cipher.card.brand = this.getCardBrand(cipher.card.number);\n    cipher.card.code = this.getValueOrDefault(entry.creditCvv);\n    if (!this.isNullOrWhitespace(entry.creditExpiry)) {\n      if (!this.setCardExpiration(cipher, entry.creditExpiry)) {\n        this.processKvp(cipher, \"Expiration\", entry.creditExpiry);\n      }\n    }\n    if (!this.isNullOrWhitespace(entry.password)) {\n      this.processKvp(cipher, \"PIN\", entry.password);\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class GnomeJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || Object.keys(results).length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const keyRing in results) {\n      if (\n        !results.hasOwnProperty(keyRing) || // eslint-disable-line\n        this.isNullOrWhitespace(keyRing) ||\n        results[keyRing].length === 0\n      ) {\n        continue;\n      }\n\n      results[keyRing].forEach((value: any) => {\n        if (\n          this.isNullOrWhitespace(value.display_name) ||\n          value.display_name.indexOf(\"http\") !== 0\n        ) {\n          return;\n        }\n\n        this.processFolder(result, keyRing);\n        const cipher = this.initLoginCipher();\n        cipher.name = value.display_name.replace(\"http://\", \"\").replace(\"https://\", \"\");\n        if (cipher.name.length > 30) {\n          cipher.name = cipher.name.substring(0, 30);\n        }\n        cipher.login.password = this.getValueOrDefault(value.secret);\n        cipher.login.uris = this.makeUriArray(value.display_name);\n\n        if (value.attributes != null) {\n          cipher.login.username =\n            value.attributes != null\n              ? this.getValueOrDefault(value.attributes.username_value)\n              : null;\n          for (const attr in value.attributes) {\n            if (\n              !value.attributes.hasOwnProperty(attr) || // eslint-disable-line\n              attr === \"username_value\" ||\n              attr === \"xdg:schema\"\n            ) {\n              continue;\n            }\n            this.processKvp(cipher, attr, value.attributes[attr]);\n          }\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst NotesHeader = \"Notes\\n\\n\";\nconst ApplicationsHeader = \"Applications\\n\\n\";\nconst WebsitesHeader = \"Websites\\n\\n\";\nconst Delimiter = \"\\n---\\n\";\n\nexport class KasperskyTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n\n    let notesData: string;\n    let applicationsData: string;\n    let websitesData: string;\n    let workingData = this.splitNewLine(data).join(\"\\n\");\n\n    if (workingData.indexOf(NotesHeader) !== -1) {\n      const parts = workingData.split(NotesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        notesData = parts[1];\n      }\n    }\n    if (workingData.indexOf(ApplicationsHeader) !== -1) {\n      const parts = workingData.split(ApplicationsHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        applicationsData = parts[1];\n      }\n    }\n    if (workingData.indexOf(WebsitesHeader) === 0) {\n      const parts = workingData.split(WebsitesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        websitesData = parts[1];\n      }\n    }\n\n    const notes = this.parseDataCategory(notesData);\n    const applications = this.parseDataCategory(applicationsData);\n    const websites = this.parseDataCategory(websitesData);\n\n    notes.forEach((n) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(n.get(\"Name\"));\n      cipher.notes = this.getValueOrDefault(n.get(\"Text\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    websites.concat(applications).forEach((w) => {\n      const cipher = this.initLoginCipher();\n      const nameKey = w.has(\"Website name\") ? \"Website name\" : \"Application\";\n      cipher.name = this.getValueOrDefault(w.get(nameKey), \"\");\n      if (!this.isNullOrWhitespace(w.get(\"Login name\"))) {\n        if (!this.isNullOrWhitespace(cipher.name)) {\n          cipher.name += \": \";\n        }\n        cipher.name += w.get(\"Login name\");\n      }\n      cipher.notes = this.getValueOrDefault(w.get(\"Comment\"));\n      if (w.has(\"Website URL\")) {\n        cipher.login.uris = this.makeUriArray(w.get(\"Website URL\"));\n      }\n      cipher.login.username = this.getValueOrDefault(w.get(\"Login\"));\n      cipher.login.password = this.getValueOrDefault(w.get(\"Password\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseDataCategory(data: string): Map<string, string>[] {\n    if (this.isNullOrWhitespace(data) || data.indexOf(Delimiter) === -1) {\n      return [];\n    }\n    const items: Map<string, string>[] = [];\n    data.split(Delimiter).forEach((p) => {\n      if (p.indexOf(\"\\n\") === -1) {\n        return;\n      }\n      const item = new Map<string, string>();\n      let itemComment: string;\n      let itemCommentKey: string;\n      p.split(\"\\n\").forEach((l) => {\n        if (itemComment != null) {\n          itemComment += \"\\n\" + l;\n          return;\n        }\n        const colonIndex = l.indexOf(\":\");\n        let key: string;\n        let val: string;\n        if (colonIndex === -1) {\n          return;\n        } else {\n          key = l.substring(0, colonIndex);\n          if (l.length > colonIndex + 1) {\n            val = l.substring(colonIndex + 2);\n          }\n        }\n        if (key != null) {\n          item.set(key, val);\n        }\n        if (key === \"Comment\" || key === \"Text\") {\n          itemComment = val;\n          itemCommentKey = key;\n        }\n      });\n      if (itemComment != null && itemCommentKey != null) {\n        item.set(itemCommentKey, itemComment);\n      }\n      if (item.size === 0) {\n        return;\n      }\n      items.push(item);\n    });\n    return items;\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePass2XmlImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    //Note: The doc.querySelector(\"KeePassFile > Root > Group\") no longers works on node and we have to breakdown the query by nodes\n    const KeePassFileNode = doc.querySelector(\"KeePassFile\");\n\n    if (KeePassFileNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const RootNode = KeePassFileNode.querySelector(\"Root\");\n    if (RootNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const rootGroup = RootNode.querySelector(\"Group\");\n    if (rootGroup == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root > Group` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    this.traverse(rootGroup, true, \"\");\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  traverse(node: Element, isRootNode: boolean, groupPrefixName: string) {\n    const folderIndex = this.result.folders.length;\n    let groupName = groupPrefixName;\n\n    if (!isRootNode) {\n      if (groupName !== \"\") {\n        groupName += \"/\";\n      }\n      const nameEl = this.querySelectorDirectChild(node, \"Name\");\n      groupName += nameEl == null ? \"-\" : nameEl.textContent;\n      const folder = new FolderView();\n      folder.name = groupName;\n      this.result.folders.push(folder);\n    }\n\n    this.querySelectorAllDirectChild(node, \"Entry\").forEach((entry) => {\n      const cipherIndex = this.result.ciphers.length;\n\n      const cipher = this.initLoginCipher();\n      this.querySelectorAllDirectChild(entry, \"String\").forEach((entryString) => {\n        const valueEl = this.querySelectorDirectChild(entryString, \"Value\");\n        const value = valueEl != null ? valueEl.textContent : null;\n        if (this.isNullOrWhitespace(value)) {\n          return;\n        }\n        const keyEl = this.querySelectorDirectChild(entryString, \"Key\");\n        const key = keyEl != null ? keyEl.textContent : null;\n\n        if (key === \"URL\") {\n          cipher.login.uris = this.makeUriArray(value);\n        } else if (key === \"UserName\") {\n          cipher.login.username = value;\n        } else if (key === \"Password\") {\n          cipher.login.password = value;\n        } else if (key === \"otp\") {\n          cipher.login.totp = value.replace(\"key=\", \"\");\n        } else if (key === \"Title\") {\n          cipher.name = value;\n        } else if (key === \"Notes\") {\n          cipher.notes += value + \"\\n\";\n        } else {\n          let type = FieldType.Text;\n          const attrs = valueEl.attributes as any;\n          if (\n            attrs.length > 0 &&\n            attrs.ProtectInMemory != null &&\n            attrs.ProtectInMemory.value === \"True\"\n          ) {\n            type = FieldType.Hidden;\n          }\n          this.processKvp(cipher, key, value, type);\n        }\n      });\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n\n      if (!isRootNode) {\n        this.result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    this.querySelectorAllDirectChild(node, \"Group\").forEach((group) => {\n      this.traverse(group, false, groupName);\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePassXCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(value.Title)) {\n        return;\n      }\n\n      value.Group =\n        !this.isNullOrWhitespace(value.Group) && value.Group.startsWith(\"Root/\")\n          ? value.Group.replace(\"Root/\", \"\")\n          : value.Group;\n      const groupName = !this.isNullOrWhitespace(value.Group) ? value.Group : null;\n      this.processFolder(result, groupName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class KeeperCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 6) {\n        return;\n      }\n\n      this.processFolder(result, value[0]);\n      const cipher = this.initLoginCipher();\n\n      const notes = this.getValueOrDefault(value[5]);\n      if (notes) {\n        cipher.notes = `${notes}\\n`;\n      }\n\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[4]);\n\n      if (value.length > 7) {\n        // we have some custom fields.\n        for (let i = 7; i < value.length; i = i + 2) {\n          if (value[i] == \"TFC:Keeper\") {\n            cipher.login.totp = value[i + 1];\n          } else {\n            this.processKvp(cipher, value[i], value[i + 1]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LastPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipherIndex = result.ciphers.length;\n      let folderIndex = result.folders.length;\n      let grouping = value.grouping;\n      if (grouping != null) {\n        // eslint-disable-next-line\n        grouping = grouping.replace(/\\\\/g, \"/\").replace(/[\\x00-\\x1F\\x7F-\\x9F]/g, \"\");\n      }\n      const hasFolder = this.getValueOrDefault(grouping, \"(none)\") !== \"(none)\";\n      let addFolder = hasFolder;\n\n      if (hasFolder) {\n        for (let i = 0; i < result.folders.length; i++) {\n          if (result.folders[i].name === grouping) {\n            addFolder = false;\n            folderIndex = i;\n            break;\n          }\n        }\n      }\n\n      const cipher = this.buildBaseCipher(value);\n      if (cipher.type === CipherType.Login) {\n        cipher.notes = this.getValueOrDefault(value.extra);\n        cipher.login = new LoginView();\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.totp);\n      } else if (cipher.type === CipherType.SecureNote) {\n        this.parseSecureNote(value, cipher);\n      } else if (cipher.type === CipherType.Card) {\n        cipher.card = this.parseCard(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n      } else if (cipher.type === CipherType.Identity) {\n        cipher.identity = this.parseIdentity(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n        if (!this.isNullOrWhitespace(value.ccnum)) {\n          // there is a card on this identity too\n          const cardCipher = this.buildBaseCipher(value);\n          cardCipher.identity = null;\n          cardCipher.type = CipherType.Card;\n          cardCipher.card = this.parseCard(value);\n          result.ciphers.push(cardCipher);\n        }\n      }\n\n      result.ciphers.push(cipher);\n\n      if (addFolder) {\n        const f = new FolderView();\n        f.name = grouping;\n        result.folders.push(f);\n      }\n      if (hasFolder) {\n        result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private buildBaseCipher(value: any) {\n    const cipher = new CipherView();\n    // eslint-disable-next-line\n    if (value.hasOwnProperty(\"profilename\") && value.hasOwnProperty(\"profilelanguage\")) {\n      // form fill\n      cipher.favorite = false;\n      cipher.name = this.getValueOrDefault(value.profilename, \"--\");\n      cipher.type = CipherType.Card;\n\n      if (\n        !this.isNullOrWhitespace(value.title) ||\n        !this.isNullOrWhitespace(value.firstname) ||\n        !this.isNullOrWhitespace(value.lastname) ||\n        !this.isNullOrWhitespace(value.address1) ||\n        !this.isNullOrWhitespace(value.phone) ||\n        !this.isNullOrWhitespace(value.username) ||\n        !this.isNullOrWhitespace(value.email)\n      ) {\n        cipher.type = CipherType.Identity;\n      }\n    } else {\n      // site or secure note\n      cipher.favorite = !this.organization && this.getValueOrDefault(value.fav, \"0\") === \"1\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.type = value.url === \"http://sn\" ? CipherType.SecureNote : CipherType.Login;\n    }\n    return cipher;\n  }\n\n  private parseCard(value: any): CardView {\n    const card = new CardView();\n    card.cardholderName = this.getValueOrDefault(value.ccname);\n    card.number = this.getValueOrDefault(value.ccnum);\n    card.code = this.getValueOrDefault(value.cccsc);\n    card.brand = this.getCardBrand(value.ccnum);\n\n    if (!this.isNullOrWhitespace(value.ccexp) && value.ccexp.indexOf(\"-\") > -1) {\n      const ccexpParts = (value.ccexp as string).split(\"-\");\n      if (ccexpParts.length > 1) {\n        card.expYear = ccexpParts[0];\n        card.expMonth = ccexpParts[1];\n        if (card.expMonth.length === 2 && card.expMonth[0] === \"0\") {\n          card.expMonth = card.expMonth[1];\n        }\n      }\n    }\n\n    return card;\n  }\n\n  private parseIdentity(value: any): IdentityView {\n    const identity = new IdentityView();\n    identity.title = this.getValueOrDefault(value.title);\n    identity.firstName = this.getValueOrDefault(value.firstname);\n    identity.middleName = this.getValueOrDefault(value.middlename);\n    identity.lastName = this.getValueOrDefault(value.lastname);\n    identity.username = this.getValueOrDefault(value.username);\n    identity.company = this.getValueOrDefault(value.company);\n    identity.ssn = this.getValueOrDefault(value.ssn);\n    identity.address1 = this.getValueOrDefault(value.address1);\n    identity.address2 = this.getValueOrDefault(value.address2);\n    identity.address3 = this.getValueOrDefault(value.address3);\n    identity.city = this.getValueOrDefault(value.city);\n    identity.state = this.getValueOrDefault(value.state);\n    identity.postalCode = this.getValueOrDefault(value.zip);\n    identity.country = this.getValueOrDefault(value.country);\n    identity.email = this.getValueOrDefault(value.email);\n    identity.phone = this.getValueOrDefault(value.phone);\n\n    if (!this.isNullOrWhitespace(identity.title)) {\n      identity.title = identity.title.charAt(0).toUpperCase() + identity.title.slice(1);\n    }\n\n    return identity;\n  }\n\n  private parseSecureNote(value: any, cipher: CipherView) {\n    const extraParts = this.splitNewLine(value.extra);\n    let processedNote = false;\n\n    if (extraParts.length) {\n      const typeParts = extraParts[0].split(\":\");\n      if (\n        typeParts.length > 1 &&\n        typeParts[0] === \"NoteType\" &&\n        (typeParts[1] === \"Credit Card\" || typeParts[1] === \"Address\")\n      ) {\n        if (typeParts[1] === \"Credit Card\") {\n          const mappedData = this.parseSecureNoteMapping<CardView>(cipher, extraParts, {\n            Number: \"number\",\n            \"Name on Card\": \"cardholderName\",\n            \"Security Code\": \"code\",\n            // LP provides date in a format like 'June,2020'\n            // Store in expMonth, then parse and modify\n            \"Expiration Date\": \"expMonth\",\n          });\n\n          if (this.isNullOrWhitespace(mappedData.expMonth) || mappedData.expMonth === \",\") {\n            // No expiration data\n            mappedData.expMonth = undefined;\n          } else {\n            const [monthString, year] = mappedData.expMonth.split(\",\");\n            // Parse month name into number\n            if (!this.isNullOrWhitespace(monthString)) {\n              const month = new Date(Date.parse(monthString.trim() + \" 1, 2012\")).getMonth() + 1;\n              if (isNaN(month)) {\n                mappedData.expMonth = undefined;\n              } else {\n                mappedData.expMonth = month.toString();\n              }\n            } else {\n              mappedData.expMonth = undefined;\n            }\n            if (!this.isNullOrWhitespace(year)) {\n              mappedData.expYear = year;\n            }\n          }\n\n          cipher.type = CipherType.Card;\n          cipher.card = mappedData;\n        } else if (typeParts[1] === \"Address\") {\n          const mappedData = this.parseSecureNoteMapping<IdentityView>(cipher, extraParts, {\n            Title: \"title\",\n            \"First Name\": \"firstName\",\n            \"Last Name\": \"lastName\",\n            \"Middle Name\": \"middleName\",\n            Company: \"company\",\n            \"Address 1\": \"address1\",\n            \"Address 2\": \"address2\",\n            \"Address 3\": \"address3\",\n            \"City / Town\": \"city\",\n            State: \"state\",\n            \"Zip / Postal Code\": \"postalCode\",\n            Country: \"country\",\n            \"Email Address\": \"email\",\n            Username: \"username\",\n          });\n          cipher.type = CipherType.Identity;\n          cipher.identity = mappedData;\n        }\n        processedNote = true;\n      }\n    }\n\n    if (!processedNote) {\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n      cipher.notes = this.getValueOrDefault(value.extra);\n    }\n  }\n\n  private parseSecureNoteMapping<T>(cipher: CipherView, extraParts: string[], map: any): T {\n    const dataObj: any = {};\n\n    let processingNotes = false;\n    extraParts.forEach((extraPart) => {\n      let key: string = null;\n      let val: string = null;\n      if (!processingNotes) {\n        if (this.isNullOrWhitespace(extraPart)) {\n          return;\n        }\n        const colonIndex = extraPart.indexOf(\":\");\n        if (colonIndex === -1) {\n          key = extraPart;\n        } else {\n          key = extraPart.substring(0, colonIndex);\n          if (extraPart.length > colonIndex) {\n            val = extraPart.substring(colonIndex + 1);\n          }\n        }\n        if (this.isNullOrWhitespace(key) || this.isNullOrWhitespace(val) || key === \"NoteType\") {\n          return;\n        }\n      }\n\n      if (processingNotes) {\n        cipher.notes += \"\\n\" + extraPart;\n      } else if (key === \"Notes\") {\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes += \"\\n\" + val;\n        } else {\n          cipher.notes = val;\n        }\n        processingNotes = true;\n        // eslint-disable-next-line\n      } else if (map.hasOwnProperty(key)) {\n        dataObj[map[key]] = val;\n      } else {\n        this.processKvp(cipher, key, val);\n      }\n    });\n\n    return dataObj;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LogMeOnceCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 4) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[1]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MeldiumCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.DisplayName, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.login.username = this.getValueOrDefault(value.UserName);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MSecureCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      const folderName =\n        this.getValueOrDefault(value[0], \"Unassigned\") !== \"Unassigned\" ? value[0] : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[2], \"--\");\n\n      if (value[1] === \"Web Logins\" || value[1] === \"Login\") {\n        cipher.login.uris = this.makeUriArray(value[4]);\n        cipher.login.username = this.getValueOrDefault(value[5]);\n        cipher.login.password = this.getValueOrDefault(value[6]);\n        cipher.notes = !this.isNullOrWhitespace(value[3]) ? value[3].split(\"\\\\n\").join(\"\\n\") : null;\n      } else if (value.length > 3) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        for (let i = 3; i < value.length; i++) {\n          if (!this.isNullOrWhitespace(value[i])) {\n            cipher.notes += value[i] + \"\\n\";\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(value[1]) && cipher.type !== CipherType.Login) {\n        cipher.name = value[1] + \": \" + cipher.name;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst mappedBaseColumns = [\"nickname\", \"additionalInfo\"];\nconst _mappedUserAccountColumns = new Set(\n  mappedBaseColumns.concat([\"url\", \"username\", \"password\", \"twofaSecret\"])\n);\nconst _mappedCreditCardColumns = new Set(\n  mappedBaseColumns.concat([\"cardNumber\", \"cardName\", \"exp_month\", \"exp_year\", \"cvv\"])\n);\n\nconst _mappedIdentityColumns = new Set(\n  mappedBaseColumns.concat([\n    \"title\",\n    \"firstName\",\n    \"middleName\",\n    \"lastName\",\n    \"email\",\n    \"firstAddressLine\",\n    \"secondAddressLine\",\n    \"city\",\n    \"country\",\n    \"zipCode\",\n  ])\n);\n\nconst _mappedIdCardColumns = new Set(mappedBaseColumns.concat([\"idName\", \"idNumber\", \"idCountry\"]));\n\nconst _mappedTwoFaColumns = new Set(mappedBaseColumns.concat([\"authToken\"]));\n\nconst _mappedUserNoteColumns = new Set(mappedBaseColumns.concat([\"content\"]));\n\nexport class MykiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.nickname, \"--\");\n      cipher.notes = this.getValueOrDefault(value.additionalInfo);\n\n      if (value.url !== undefined) {\n        // Accounts\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.twofaSecret);\n\n        this.importUnmappedFields(cipher, value, _mappedUserAccountColumns);\n      } else if (value.authToken !== undefined) {\n        // TwoFA\n        cipher.login.totp = this.getValueOrDefault(value.authToken);\n\n        this.importUnmappedFields(cipher, value, _mappedTwoFaColumns);\n      } else if (value.cardNumber !== undefined) {\n        // Cards\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.expMonth = this.getValueOrDefault(value.exp_month);\n        cipher.card.expYear = this.getValueOrDefault(value.exp_year);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n\n        this.importUnmappedFields(cipher, value, _mappedCreditCardColumns);\n      } else if (value.firstName !== undefined) {\n        // Identities\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        cipher.identity.title = this.getValueOrDefault(value.title);\n        cipher.identity.firstName = this.getValueOrDefault(value.firstName);\n        cipher.identity.middleName = this.getValueOrDefault(value.middleName);\n        cipher.identity.lastName = this.getValueOrDefault(value.lastName);\n        cipher.identity.phone = this.getValueOrDefault(value.number);\n        cipher.identity.email = this.getValueOrDefault(value.email);\n        cipher.identity.address1 = this.getValueOrDefault(value.firstAddressLine);\n        cipher.identity.address2 = this.getValueOrDefault(value.secondAddressLine);\n        cipher.identity.city = this.getValueOrDefault(value.city);\n        cipher.identity.country = this.getValueOrDefault(value.country);\n        cipher.identity.postalCode = this.getValueOrDefault(value.zipCode);\n\n        this.importUnmappedFields(cipher, value, _mappedIdentityColumns);\n      } else if (value.idType !== undefined) {\n        // IdCards\n\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        this.processFullName(cipher, value.idName);\n        cipher.identity.country = this.getValueOrDefault(value.idCountry);\n\n        switch (value.idType) {\n          // case \"Driver's License\":\n          // case \"ID Card\":\n          // case \"Outdoor License\":\n          // case \"Software License\":\n          // case \"Tax Number\":\n          // case \"Bank Account\":\n          // case \"Insurance Card\":\n          // case \"Health Card\":\n          // case \"Membership\":\n          // case \"Database\":\n          // case \"Reward Program\":\n          // case \"Tour Visa\":\n          case \"Passport\":\n            cipher.identity.passportNumber = value.idNumber;\n            break;\n          case \"Social Security\":\n            cipher.identity.ssn = value.idNumber;\n            break;\n          default:\n            cipher.identity.licenseNumber = value.idNumber;\n            break;\n        }\n\n        this.importUnmappedFields(cipher, value, _mappedIdCardColumns);\n      } else if (value.content !== undefined) {\n        // Notes\n        cipher.secureNote = new SecureNoteView();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.notes = this.getValueOrDefault(value.content);\n\n        this.importUnmappedFields(cipher, value, _mappedUserNoteColumns);\n      } else {\n        return;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\ntype nodePassCsvParsed = {\n  name: string;\n  url: string;\n  username: string;\n  password: string;\n  note: string;\n  cardholdername: string;\n  cardnumber: string;\n  cvc: string;\n  expirydate: string;\n  zipcode: string;\n  folder: string;\n  full_name: string;\n  phone_number: string;\n  email: string;\n  address1: string;\n  address2: string;\n  city: string;\n  country: string;\n  state: string;\n};\n\nexport class NordPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: nodePassCsvParsed[] = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((record) => {\n      const recordType = this.evaluateType(record);\n      if (recordType === undefined) {\n        return;\n      }\n\n      if (!this.organization) {\n        this.processFolder(result, record.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.name = this.getValueOrDefault(record.name, \"--\");\n      cipher.notes = this.getValueOrDefault(record.note);\n\n      switch (recordType) {\n        case CipherType.Login:\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.username = this.getValueOrDefault(record.username);\n          cipher.login.password = this.getValueOrDefault(record.password);\n          cipher.login.uris = this.makeUriArray(record.url);\n          break;\n        case CipherType.Card:\n          cipher.type = CipherType.Card;\n          cipher.card.cardholderName = this.getValueOrDefault(record.cardholdername);\n          cipher.card.number = this.getValueOrDefault(record.cardnumber);\n          cipher.card.code = this.getValueOrDefault(record.cvc);\n          cipher.card.brand = this.getCardBrand(cipher.card.number);\n          this.setCardExpiration(cipher, record.expirydate);\n          break;\n\n        case CipherType.Identity:\n          cipher.type = CipherType.Identity;\n\n          this.processFullName(cipher, this.getValueOrDefault(record.full_name));\n          cipher.identity.address1 = this.getValueOrDefault(record.address1);\n          cipher.identity.address2 = this.getValueOrDefault(record.address2);\n          cipher.identity.city = this.getValueOrDefault(record.city);\n          cipher.identity.state = this.getValueOrDefault(record.state);\n          cipher.identity.postalCode = this.getValueOrDefault(record.zipcode);\n          cipher.identity.country = this.getValueOrDefault(record.country);\n          if (cipher.identity.country != null) {\n            cipher.identity.country = cipher.identity.country.toUpperCase();\n          }\n          cipher.identity.email = this.getValueOrDefault(record.email);\n          cipher.identity.phone = this.getValueOrDefault(record.phone_number);\n          break;\n        case CipherType.SecureNote:\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default:\n          break;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private evaluateType(record: nodePassCsvParsed): CipherType {\n    if (!this.isNullOrWhitespace(record.username)) {\n      return CipherType.Login;\n    }\n\n    if (!this.isNullOrWhitespace(record.cardnumber)) {\n      return CipherType.Card;\n    }\n\n    if (!this.isNullOrWhitespace(record.full_name)) {\n      return CipherType.Identity;\n    }\n\n    if (!this.isNullOrWhitespace(record.note)) {\n      return CipherType.SecureNote;\n    }\n\n    return undefined;\n  }\n}\n","export interface ExportData {\n  accounts?: AccountsEntity[] | null;\n}\nexport interface AccountsEntity {\n  attrs: AccountAttributes;\n  vaults?: VaultsEntity[] | null;\n}\nexport interface AccountAttributes {\n  accountName: string;\n  name: string;\n  avatar: string;\n  email: string;\n  uuid: string;\n  domain: string;\n}\nexport interface VaultsEntity {\n  attrs: VaultAttributes;\n  items?: Item[] | null;\n}\nexport interface VaultAttributes {\n  uuid: string;\n  desc: string;\n  avatar: string;\n  name: string;\n  type: string;\n}\n\nexport enum CategoryEnum {\n  Login = \"001\",\n  CreditCard = \"002\",\n  SecureNote = \"003\",\n  Identity = \"004\",\n  Password = \"005\",\n  Document = \"006\",\n  SoftwareLicense = \"100\",\n  BankAccount = \"101\",\n  Database = \"102\",\n  DriversLicense = \"103\",\n  OutdoorLicense = \"104\",\n  Membership = \"105\",\n  Passport = \"106\",\n  RewardsProgram = \"107\",\n  SocialSecurityNumber = \"108\",\n  WirelessRouter = \"109\",\n  Server = \"110\",\n  EmailAccount = \"111\",\n  API_Credential = \"112\",\n  MedicalRecord = \"113\",\n}\n\nexport interface Item {\n  uuid: string;\n  favIndex: number;\n  createdAt: number;\n  updatedAt: number;\n  trashed?: boolean;\n  categoryUuid: string;\n  details: Details;\n  overview: Overview;\n}\nexport interface Details {\n  loginFields?: (LoginFieldsEntity | null)[] | null;\n  notesPlain?: string | null;\n  sections?: (SectionsEntity | null)[] | null;\n  passwordHistory?: (PasswordHistoryEntity | null)[] | null;\n  documentAttributes?: DocumentAttributes | null;\n  password?: string | null;\n}\n\nexport enum LoginFieldTypeEnum {\n  TextOrHtml = \"T\",\n  EmailAddress = \"E\",\n  URL = \"U\",\n  Number = \"N\",\n  Password = \"P\",\n  TextArea = \"A\",\n  PhoneNumber = \"T\",\n  CheckBox = \"C\",\n}\nexport interface LoginFieldsEntity {\n  value: string;\n  id: string;\n  name: string;\n  fieldType: LoginFieldTypeEnum | string;\n  designation?: string | null;\n}\nexport interface SectionsEntity {\n  title: string;\n  name?: string | null;\n  fields?: FieldsEntity[] | null;\n}\nexport interface FieldsEntity {\n  title: string;\n  id: string;\n  value: Value;\n  indexAtSource: number;\n  guarded: boolean;\n  multiline: boolean;\n  dontGenerate: boolean;\n  placeholder?: string;\n  inputTraits: InputTraits;\n  clipboardFilter?: string | null;\n}\nexport interface Value {\n  totp?: string | null;\n  date?: number | null;\n  string?: string | null;\n  concealed?: string | null;\n  email?: Email | null;\n  phone?: string | null;\n  menu?: string | null;\n  gender?: string | null;\n  monthYear?: number | null;\n  url?: string | null;\n  address?: Address | null;\n  creditCardType?: string | null;\n  creditCardNumber?: string | null;\n  reference?: string | null;\n}\n\nexport interface Email {\n  email_address: string;\n  provider: string;\n}\n\nexport interface Address {\n  street: string;\n  city: string;\n  country: string;\n  zip: string;\n  state: string;\n}\nexport interface InputTraits {\n  keyboard: string;\n  correction: string;\n  capitalization: string;\n}\nexport interface PasswordHistoryEntity {\n  value: string;\n  time: number;\n}\nexport interface DocumentAttributes {\n  fileName: string;\n  documentId: string;\n  decryptedSize: number;\n}\nexport interface Overview {\n  subtitle: string;\n  title: string;\n  url: string;\n  urls?: UrlsEntity[] | null;\n  ps?: number | null;\n  pbe?: number | null;\n  pgrng?: boolean | null;\n  tags?: string[] | null;\n}\nexport interface UrlsEntity {\n  label: string;\n  url: string;\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class OnePassword1PifImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    data.split(this.newLineRegex).forEach((line) => {\n      if (this.isNullOrWhitespace(line) || line[0] !== \"{\") {\n        return;\n      }\n      const item = JSON.parse(line);\n      if (item.trashed === true) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n\n      if (this.isNullOrWhitespace(item.hmac)) {\n        this.processStandardItem(item, cipher);\n      } else {\n        this.processWinOpVaultItem(item, cipher);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processWinOpVaultItem(item: any, cipher: CipherView) {\n    if (item.overview != null) {\n      cipher.name = this.getValueOrDefault(item.overview.title);\n      if (item.overview.URLs != null) {\n        const urls: string[] = [];\n        item.overview.URLs.forEach((url: any) => {\n          if (!this.isNullOrWhitespace(url.u)) {\n            urls.push(url.u);\n          }\n        });\n        cipher.login.uris = this.makeUriArray(urls);\n      }\n    }\n\n    if (item.details != null) {\n      if (item.details.passwordHistory != null) {\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n      }\n      if (\n        !this.isNullOrWhitespace(item.details.ccnum) ||\n        !this.isNullOrWhitespace(item.details.cvv)\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      } else if (\n        !this.isNullOrWhitespace(item.details.firstname) ||\n        !this.isNullOrWhitespace(item.details.address1)\n      ) {\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n      }\n      if (cipher.type === CipherType.Login && !this.isNullOrWhitespace(item.details.password)) {\n        cipher.login.password = item.details.password;\n      }\n      if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n        cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (item.details.fields != null) {\n        this.parseFields(item.details.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.details.sections != null) {\n        item.details.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private processStandardItem(item: any, cipher: CipherView) {\n    cipher.favorite = item.openContents && item.openContents.faveIndex ? true : false;\n    cipher.name = this.getValueOrDefault(item.title);\n\n    if (item.typeName === \"securenotes.SecureNote\") {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    } else if (item.typeName === \"wallet.financial.CreditCard\") {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    } else if (item.typeName === \"identities.Identity\") {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    } else {\n      cipher.login.uris = this.makeUriArray(item.location);\n    }\n\n    if (item.secureContents != null) {\n      if (item.secureContents.passwordHistory != null) {\n        this.parsePasswordHistory(item.secureContents.passwordHistory, cipher);\n      }\n      if (!this.isNullOrWhitespace(item.secureContents.notesPlain)) {\n        cipher.notes = item.secureContents.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (cipher.type === CipherType.Login) {\n        if (!this.isNullOrWhitespace(item.secureContents.password)) {\n          cipher.login.password = item.secureContents.password;\n        }\n        if (item.secureContents.URLs != null) {\n          const urls: string[] = [];\n          item.secureContents.URLs.forEach((u: any) => {\n            if (!this.isNullOrWhitespace(u.url)) {\n              urls.push(u.url);\n            }\n          });\n          if (urls.length > 0) {\n            cipher.login.uris = this.makeUriArray(urls);\n          }\n        }\n      }\n      if (item.secureContents.fields != null) {\n        this.parseFields(item.secureContents.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.secureContents.sections != null) {\n        item.secureContents.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private parsePasswordHistory(items: any[], cipher: CipherView) {\n    const maxSize = items.length > 5 ? 5 : items.length;\n    cipher.passwordHistory = items\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n\n  private parseFields(\n    fields: any[],\n    cipher: CipherView,\n    designationKey: string,\n    valueKey: string,\n    nameKey: string\n  ) {\n    fields.forEach((field: any) => {\n      if (field[valueKey] == null || field[valueKey].toString().trim() === \"\") {\n        return;\n      }\n\n      // TODO: when date FieldType exists, store this as a date field type instead of formatted Text if k is 'date'\n      const fieldValue =\n        field.k === \"date\"\n          ? new Date(field[valueKey] * 1000).toUTCString()\n          : field[valueKey].toString();\n      const fieldDesignation =\n        field[designationKey] != null ? field[designationKey].toString() : null;\n\n      if (cipher.type === CipherType.Login) {\n        if (this.isNullOrWhitespace(cipher.login.username) && fieldDesignation === \"username\") {\n          cipher.login.username = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.password) &&\n          fieldDesignation === \"password\"\n        ) {\n          cipher.login.password = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.totp) &&\n          fieldDesignation != null &&\n          fieldDesignation.startsWith(\"TOTP_\")\n        ) {\n          cipher.login.totp = fieldValue;\n          return;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.isNullOrWhitespace(cipher.card.number) && fieldDesignation === \"ccnum\") {\n          cipher.card.number = fieldValue;\n          cipher.card.brand = this.getCardBrand(fieldValue);\n          return;\n        } else if (this.isNullOrWhitespace(cipher.card.code) && fieldDesignation === \"cvv\") {\n          cipher.card.code = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.cardholderName) &&\n          fieldDesignation === \"cardholder\"\n        ) {\n          cipher.card.cardholderName = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.expiration) &&\n          fieldDesignation === \"expiry\" &&\n          fieldValue.length === 6\n        ) {\n          cipher.card.expMonth = (fieldValue as string).substr(4, 2);\n          if (cipher.card.expMonth[0] === \"0\") {\n            cipher.card.expMonth = cipher.card.expMonth.substr(1, 1);\n          }\n          cipher.card.expYear = (fieldValue as string).substr(0, 4);\n          return;\n        } else if (fieldDesignation === \"type\") {\n          // Skip since brand was determined from number above\n          return;\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        const identity = cipher.identity;\n        if (this.isNullOrWhitespace(identity.firstName) && fieldDesignation === \"firstname\") {\n          identity.firstName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.lastName) && fieldDesignation === \"lastname\") {\n          identity.lastName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.middleName) && fieldDesignation === \"initial\") {\n          identity.middleName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.phone) && fieldDesignation === \"defphone\") {\n          identity.phone = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.company) && fieldDesignation === \"company\") {\n          identity.company = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.email) && fieldDesignation === \"email\") {\n          identity.email = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.username) && fieldDesignation === \"username\") {\n          identity.username = fieldValue;\n          return;\n        } else if (fieldDesignation === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip } = field[valueKey];\n          identity.address1 = this.getValueOrDefault(street);\n          identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            identity.country = country.toUpperCase();\n          }\n          identity.postalCode = this.getValueOrDefault(zip);\n          return;\n        }\n      }\n\n      const fieldName = this.isNullOrWhitespace(field[nameKey]) ? \"no_name\" : field[nameKey];\n      if (\n        fieldName === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      const fieldType = field.k === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CategoryEnum,\n  Details,\n  ExportData,\n  FieldsEntity,\n  Item,\n  LoginFieldTypeEnum,\n  Overview,\n  PasswordHistoryEntity,\n  SectionsEntity,\n  UrlsEntity,\n  Value,\n  VaultsEntity,\n} from \"./types/onepassword-1pux-importer-types\";\n\nexport class OnePassword1PuxImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const exportData: ExportData = JSON.parse(data);\n\n    const account = exportData.accounts[0];\n    // TODO Add handling of multiple vaults\n    // const personalVaults = account.vaults[0].filter((v) => v.attrs.type === VaultAttributeTypeEnum.Personal);\n    account.vaults.forEach((vault: VaultsEntity) => {\n      vault.items.forEach((item: Item) => {\n        if (item.trashed === true) {\n          return;\n        }\n\n        const cipher = this.initLoginCipher();\n\n        const category = item.categoryUuid as CategoryEnum;\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.Password:\n          case CategoryEnum.WirelessRouter:\n          case CategoryEnum.Server:\n          case CategoryEnum.API_Credential:\n            cipher.type = CipherType.Login;\n            cipher.login = new LoginView();\n            break;\n          case CategoryEnum.CreditCard:\n          case CategoryEnum.BankAccount:\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            break;\n          case CategoryEnum.SecureNote:\n          case CategoryEnum.SoftwareLicense:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.MedicalRecord:\n            // case CategoryEnum.Document:\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case CategoryEnum.Identity:\n          case CategoryEnum.DriversLicense:\n          case CategoryEnum.OutdoorLicense:\n          case CategoryEnum.Membership:\n          case CategoryEnum.Passport:\n          case CategoryEnum.RewardsProgram:\n          case CategoryEnum.SocialSecurityNumber:\n            cipher.type = CipherType.Identity;\n            cipher.identity = new IdentityView();\n            break;\n          default:\n            break;\n        }\n\n        cipher.favorite = item.favIndex === 1 ? true : false;\n\n        this.processOverview(item.overview, cipher);\n\n        this.processLoginFields(item, cipher);\n\n        this.processDetails(category, item.details, cipher);\n\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n\n        this.processSections(category, item.details.sections, cipher);\n\n        if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n          cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        this.result.ciphers.push(cipher);\n      });\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processOverview(overview: Overview, cipher: CipherView) {\n    if (overview == null) {\n      return;\n    }\n\n    cipher.name = this.getValueOrDefault(overview.title);\n\n    if (overview.urls != null) {\n      const urls: string[] = [];\n      overview.urls.forEach((url: UrlsEntity) => {\n        if (!this.isNullOrWhitespace(url.url)) {\n          urls.push(url.url);\n        }\n      });\n      cipher.login.uris = this.makeUriArray(urls);\n    }\n\n    if (overview.tags != null && overview.tags.length > 0) {\n      const folderName = this.capitalize(overview.tags[0]);\n      this.processFolder(this.result, folderName);\n    }\n  }\n\n  private capitalize(inputString: string): string {\n    return inputString.trim().replace(/\\w\\S*/g, (w) => w.replace(/^\\w/, (c) => c.toUpperCase()));\n  }\n\n  private processLoginFields(item: Item, cipher: CipherView) {\n    if (item.details == null) {\n      return;\n    }\n\n    if (item.details.loginFields == null || item.details.loginFields.length === 0) {\n      return;\n    }\n\n    item.details.loginFields.forEach((loginField) => {\n      if (loginField.designation === \"username\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.username = loginField.value;\n        return;\n      }\n\n      if (loginField.designation === \"password\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.password = loginField.value;\n        return;\n      }\n\n      let fieldValue = loginField.value;\n      let fieldType: FieldType = FieldType.Text;\n      switch (loginField.fieldType) {\n        case LoginFieldTypeEnum.Password:\n          fieldType = FieldType.Hidden;\n          break;\n        case LoginFieldTypeEnum.CheckBox:\n          fieldValue = loginField.value !== \"\" ? \"true\" : \"false\";\n          fieldType = FieldType.Boolean;\n          break;\n        default:\n          break;\n      }\n      this.processKvp(cipher, loginField.name, fieldValue, fieldType);\n    });\n  }\n\n  private processDetails(category: CategoryEnum, details: Details, cipher: CipherView) {\n    if (category !== CategoryEnum.Password) {\n      return;\n    }\n\n    if (details == null) {\n      return;\n    }\n    cipher.login.password = details.password;\n  }\n\n  private processSections(category: CategoryEnum, sections: SectionsEntity[], cipher: CipherView) {\n    if (sections == null || sections.length === 0) {\n      return;\n    }\n\n    sections.forEach((section: SectionsEntity) => {\n      if (section.fields == null) {\n        return;\n      }\n\n      this.parseSectionFields(category, section.fields, cipher);\n    });\n  }\n\n  private parseSectionFields(category: CategoryEnum, fields: FieldsEntity[], cipher: CipherView) {\n    fields.forEach((field: FieldsEntity) => {\n      const valueKey = Object.keys(field.value)[0];\n      const anyField = field as any;\n\n      if (\n        anyField.value == null ||\n        anyField.value[valueKey] == null ||\n        anyField.value[valueKey] === \"\"\n      ) {\n        return;\n      }\n\n      const fieldName = this.getFieldName(field.id, field.title);\n      const fieldValue = this.extractValue(field.value, valueKey);\n\n      if (cipher.type === CipherType.Login) {\n        if (this.fillLogin(field, fieldValue, cipher)) {\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.WirelessRouter:\n            break;\n\n          case CategoryEnum.Server:\n            if (this.isNullOrWhitespace(cipher.login.uri) && field.id === \"url\") {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              return;\n            }\n            break;\n\n          case CategoryEnum.API_Credential:\n            if (this.fillApiCredentials(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.fillCreditCard(field, fieldValue, cipher)) {\n          return;\n        }\n\n        if (category === CategoryEnum.BankAccount) {\n          if (this.fillBankAccount(field, fieldValue, cipher)) {\n            return;\n          }\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        if (this.fillIdentity(field, fieldValue, cipher, valueKey)) {\n          return;\n        }\n        if (valueKey === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip, state } = field.value.address;\n          cipher.identity.address1 = this.getValueOrDefault(street);\n          cipher.identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            cipher.identity.country = country.toUpperCase();\n          }\n          cipher.identity.postalCode = this.getValueOrDefault(zip);\n          cipher.identity.state = this.getValueOrDefault(state);\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Identity:\n            break;\n          case CategoryEnum.DriversLicense:\n            if (this.fillDriversLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.OutdoorLicense:\n            if (this.fillOutdoorLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Membership:\n            if (this.fillMembership(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Passport:\n            if (this.fillPassport(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.RewardsProgram:\n            if (this.fillRewardsProgram(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.SocialSecurityNumber:\n            if (this.fillSSN(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (valueKey === \"email\") {\n        // fieldValue is an object casted into a string, so access the plain value instead\n        const { email_address, provider } = field.value.email;\n        this.processKvp(cipher, fieldName, email_address, FieldType.Text);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return;\n      }\n\n      // Do not include a password field if it's already in the history\n      if (\n        field.title === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      // TODO ?? If one of the fields is marked as guarded, then activate Password-Reprompt for the entire item\n      if (field.guarded && cipher.reprompt === CipherRepromptType.None) {\n        cipher.reprompt = CipherRepromptType.Password;\n      }\n\n      const fieldType = valueKey === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n\n  private getFieldName(id: string, title: string): string {\n    if (this.isNullOrWhitespace(title)) {\n      return id;\n    }\n\n    // Naive approach of checking if the fields id is usable\n    if (id.length > 25 && RegExp(/[0-9]{2}[A-Z]{2}/, \"i\").test(id)) {\n      return title;\n    }\n    return id;\n  }\n\n  private extractValue(value: Value, valueKey: string): string {\n    if (valueKey === \"date\") {\n      return new Date(value.date * 1000).toUTCString();\n    }\n\n    if (valueKey === \"monthYear\") {\n      return value.monthYear.toString();\n    }\n\n    return (value as any)[valueKey];\n  }\n\n  private fillLogin(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.username) && fieldName === \"username\") {\n      cipher.login.username = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"password\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (\n      this.isNullOrWhitespace(cipher.login.totp) &&\n      field.id != null &&\n      field.id.startsWith(\"TOTP_\")\n    ) {\n      cipher.login.totp = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillApiCredentials(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"credential\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.uri) && fieldName === \"hostname\") {\n      cipher.login.uris = this.makeUriArray(fieldValue);\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillCreditCard(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.number) && field.id === \"ccnum\") {\n      cipher.card.number = fieldValue;\n      cipher.card.brand = this.getCardBrand(fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.code) && field.id === \"cvv\") {\n      cipher.card.code = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"cardholder\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.expiration) && field.id === \"expiry\") {\n      const monthYear: string = fieldValue.toString().trim();\n      cipher.card.expMonth = monthYear.substring(4, 6);\n      if (cipher.card.expMonth[0] === \"0\") {\n        cipher.card.expMonth = cipher.card.expMonth.substring(1, 2);\n      }\n      cipher.card.expYear = monthYear.substring(0, 4);\n      return true;\n    }\n\n    if (field.id === \"type\") {\n      // Skip since brand was determined from number above\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillBankAccount(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"owner\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillIdentity(\n    field: FieldsEntity,\n    fieldValue: string,\n    cipher: CipherView,\n    valueKey: string\n  ): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"firstname\") {\n      cipher.identity.firstName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.lastName) && field.id === \"lastname\") {\n      cipher.identity.lastName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.middleName) && field.id === \"initial\") {\n      cipher.identity.middleName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"defphone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.email)) {\n      if (valueKey === \"email\") {\n        const { email_address, provider } = field.value.email;\n        cipher.identity.email = this.getValueOrDefault(email_address);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return true;\n      }\n\n      if (field.id === \"email\") {\n        cipher.identity.email = fieldValue;\n        return true;\n      }\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.username) && field.id === \"username\") {\n      cipher.identity.username = fieldValue;\n      return true;\n    }\n    return false;\n  }\n\n  private fillDriversLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.address1) && field.id === \"address\") {\n      cipher.identity.address1 = fieldValue;\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.licenseNumber) && field.id === \"number\") {\n      cipher.identity.licenseNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillOutdoorLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillMembership(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"org_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"phone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillPassport(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO Iso\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"issuing_country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.passportNumber) && field.id === \"number\") {\n      cipher.identity.passportNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillRewardsProgram(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillSSN(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.ssn) && field.id === \"number\") {\n      cipher.identity.ssn = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private parsePasswordHistory(historyItems: PasswordHistoryEntity[], cipher: CipherView) {\n    if (historyItems == null || historyItems.length === 0) {\n      return;\n    }\n\n    const maxSize = historyItems.length > 5 ? 5 : historyItems.length;\n    cipher.passwordHistory = historyItems\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nexport class CipherImportContext {\n  lowerProperty: string;\n  constructor(public importRecord: any, public property: string, public cipher: CipherView) {\n    this.lowerProperty = property.toLowerCase();\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\n\nexport const IgnoredProperties = [\n  \"ainfo\",\n  \"autosubmit\",\n  \"notesplain\",\n  \"ps\",\n  \"scope\",\n  \"tags\",\n  \"title\",\n  \"uuid\",\n  \"notes\",\n];\n\nexport abstract class OnePasswordCsvImporter extends BaseImporter implements Importer {\n  protected loginPropertyParsers = [\n    this.setLoginUsername,\n    this.setLoginPassword,\n    this.setLoginUris,\n  ];\n  protected creditCardPropertyParsers = [\n    this.setCreditCardNumber,\n    this.setCreditCardVerification,\n    this.setCreditCardCardholderName,\n    this.setCreditCardExpiry,\n  ];\n  protected identityPropertyParsers = [\n    this.setIdentityFirstName,\n    this.setIdentityInitial,\n    this.setIdentityLastName,\n    this.setIdentityUserName,\n    this.setIdentityEmail,\n    this.setIdentityPhone,\n    this.setIdentityCompany,\n  ];\n\n  abstract setCipherType(value: any, cipher: CipherView): void;\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true, {\n      quoteChar: '\"',\n      escapeChar: \"\\\\\",\n    });\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(this.getProp(value, \"title\"))) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.getProp(value, \"title\"), \"--\");\n\n      this.setNotes(value, cipher);\n\n      this.setCipherType(value, cipher);\n\n      let altUsername: string = null;\n      for (const property in value) {\n        // eslint-disable-next-line\n        if (!value.hasOwnProperty(property) || this.isNullOrWhitespace(value[property])) {\n          continue;\n        }\n\n        const context = new CipherImportContext(value, property, cipher);\n        if (cipher.type === CipherType.Login && this.setKnownLoginValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Card && this.setKnownCreditCardValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Identity && this.setKnownIdentityValue(context)) {\n          continue;\n        }\n\n        altUsername = this.setUnknownValue(context, altUsername);\n      }\n\n      if (\n        cipher.type === CipherType.Login &&\n        !this.isNullOrWhitespace(altUsername) &&\n        this.isNullOrWhitespace(cipher.login.username) &&\n        altUsername.indexOf(\"://\") === -1\n      ) {\n        cipher.login.username = altUsername;\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  protected getProp(obj: any, name: string): any {\n    const lowerObj = Object.entries(obj).reduce((agg: any, entry: [string, any]) => {\n      agg[entry[0].toLowerCase()] = entry[1];\n      return agg;\n    }, {});\n    return lowerObj[name.toLowerCase()];\n  }\n\n  protected getPropByRegexp(obj: any, regexp: RegExp): any {\n    const matchingKeys = Object.keys(obj).reduce((agg: string[], key: string) => {\n      if (key.match(regexp)) {\n        agg.push(key);\n      }\n      return agg;\n    }, []);\n    if (matchingKeys.length === 0) {\n      return null;\n    } else {\n      return obj[matchingKeys[0]];\n    }\n  }\n\n  protected getPropIncluding(obj: any, name: string): any {\n    const includesMap = Object.keys(obj).reduce((agg: string[], entry: string) => {\n      if (entry.toLowerCase().includes(name.toLowerCase())) {\n        agg.push(entry);\n      }\n      return agg;\n    }, []);\n    if (includesMap.length === 0) {\n      return null;\n    } else {\n      return obj[includesMap[0]];\n    }\n  }\n\n  protected setNotes(importRecord: any, cipher: CipherView) {\n    cipher.notes =\n      this.getValueOrDefault(this.getProp(importRecord, \"notesPlain\"), \"\") +\n      \"\\n\" +\n      this.getValueOrDefault(this.getProp(importRecord, \"notes\"), \"\") +\n      \"\\n\";\n    cipher.notes.trim();\n  }\n\n  protected setKnownLoginValue(context: CipherImportContext): boolean {\n    return this.loginPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownCreditCardValue(context: CipherImportContext): boolean {\n    return this.creditCardPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownIdentityValue(context: CipherImportContext): boolean {\n    return this.identityPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setUnknownValue(context: CipherImportContext, altUsername: string): string {\n    if (\n      IgnoredProperties.indexOf(context.lowerProperty) === -1 &&\n      !context.lowerProperty.startsWith(\"section:\") &&\n      !context.lowerProperty.startsWith(\"section \")\n    ) {\n      if (altUsername == null && context.lowerProperty === \"email\") {\n        return context.importRecord[context.property];\n      } else if (\n        context.lowerProperty === \"created date\" ||\n        context.lowerProperty === \"modified date\"\n      ) {\n        const readableDate = new Date(\n          parseInt(context.importRecord[context.property], 10) * 1000\n        ).toUTCString();\n        this.processKvp(context.cipher, \"1Password \" + context.property, readableDate);\n        return null;\n      }\n      if (\n        context.lowerProperty.includes(\"password\") ||\n        context.lowerProperty.includes(\"key\") ||\n        context.lowerProperty.includes(\"secret\")\n      ) {\n        this.processKvp(\n          context.cipher,\n          context.property,\n          context.importRecord[context.property],\n          FieldType.Hidden\n        );\n      } else {\n        this.processKvp(context.cipher, context.property, context.importRecord[context.property]);\n      }\n    }\n    return null;\n  }\n\n  protected setIdentityFirstName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.firstName) &&\n      context.lowerProperty.includes(\"first name\")\n    ) {\n      context.cipher.identity.firstName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityInitial(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.middleName) &&\n      context.lowerProperty.includes(\"initial\")\n    ) {\n      context.cipher.identity.middleName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityLastName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.lastName) &&\n      context.lowerProperty.includes(\"last name\")\n    ) {\n      context.cipher.identity.lastName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityUserName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.username) &&\n      context.lowerProperty.includes(\"username\")\n    ) {\n      context.cipher.identity.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityCompany(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.company) &&\n      context.lowerProperty.includes(\"company\")\n    ) {\n      context.cipher.identity.company = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityPhone(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.phone) &&\n      context.lowerProperty.includes(\"default phone\")\n    ) {\n      context.cipher.identity.phone = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityEmail(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.email) &&\n      context.lowerProperty.includes(\"email\")\n    ) {\n      context.cipher.identity.email = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardNumber(context: CipherImportContext): boolean {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.number) &&\n      context.lowerProperty.includes(\"number\")\n    ) {\n      context.cipher.card.number = context.importRecord[context.property];\n      context.cipher.card.brand = this.getCardBrand(context.cipher.card.number);\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardVerification(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.code) &&\n      context.lowerProperty.includes(\"verification number\")\n    ) {\n      context.cipher.card.code = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardCardholderName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.cardholderName) &&\n      context.lowerProperty.includes(\"cardholder name\")\n    ) {\n      context.cipher.card.cardholderName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\") &&\n      context.importRecord[context.property].length === 7\n    ) {\n      context.cipher.card.expMonth = (context.importRecord[context.property] as string).substr(\n        0,\n        2\n      );\n      if (context.cipher.card.expMonth[0] === \"0\") {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = (context.importRecord[context.property] as string).substr(3, 4);\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginPassword(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.password) &&\n      context.lowerProperty === \"password\"\n    ) {\n      context.cipher.login.password = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUsername(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.username) &&\n      context.lowerProperty === \"username\"\n    ) {\n      context.cipher.login.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUris(context: CipherImportContext) {\n    if (\n      (context.cipher.login.uris == null || context.cipher.login.uris.length === 0) &&\n      context.lowerProperty === \"urls\"\n    ) {\n      const urls = context.importRecord[context.property].split(this.newLineRegex);\n      context.cipher.login.uris = this.makeUriArray(urls);\n      return true;\n    } else if (context.lowerProperty === \"url\") {\n      if (context.cipher.login.uris == null) {\n        context.cipher.login.uris = [];\n      }\n      context.cipher.login.uris.concat(this.makeUriArray(context.importRecord[context.property]));\n      return true;\n    }\n    return false;\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { IgnoredProperties, OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordMacCsvImporter extends OnePasswordCsvImporter implements Importer {\n  setCipherType(value: any, cipher: CipherView) {\n    const onePassType = this.getValueOrDefault(this.getProp(value, \"type\"), \"Login\");\n    switch (onePassType) {\n      case \"Credit Card\":\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Identity\":\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Login\":\n      case \"Secure Note\":\n        IgnoredProperties.push(\"type\");\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\nimport { OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordWinCsvImporter extends OnePasswordCsvImporter implements Importer {\n  constructor() {\n    super();\n    this.identityPropertyParsers.push(this.setIdentityAddress);\n  }\n\n  setCipherType(value: any, cipher: CipherView) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: number/i)) &&\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: expiry date/i))\n    ) {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    }\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: first name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: initial/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: last name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /internet \\d+: email/i))\n    ) {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    }\n  }\n\n  setIdentityAddress(context: CipherImportContext) {\n    if (context.lowerProperty.match(/address \\d+: address/i)) {\n      this.processKvp(context.cipher, \"address\", context.importRecord[context.property]);\n      return true;\n    }\n    return false;\n  }\n\n  setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\")\n    ) {\n      const expSplit = (context.importRecord[context.property] as string).split(\"/\");\n      context.cipher.card.expMonth = expSplit[0];\n      if (context.cipher.card.expMonth[0] === \"0\" && context.cipher.card.expMonth.length === 2) {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = expSplit[2].length > 4 ? expSplit[2].substr(0, 4) : expSplit[2];\n      return true;\n    }\n    return false;\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PadlockCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let headers: string[] = null;\n    results.forEach((value) => {\n      if (headers == null) {\n        headers = value.map((v: string) => v);\n        return;\n      }\n\n      if (value.length < 2 || value.length !== headers.length) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value[1])) {\n        if (this.organization) {\n          const tags = (value[1] as string).split(\",\");\n          tags.forEach((tag) => {\n            tag = tag.trim();\n            let addCollection = true;\n            let collectionIndex = result.collections.length;\n\n            for (let i = 0; i < result.collections.length; i++) {\n              if (result.collections[i].name === tag) {\n                addCollection = false;\n                collectionIndex = i;\n                break;\n              }\n            }\n\n            if (addCollection) {\n              const collection = new CollectionView();\n              collection.name = tag;\n              result.collections.push(collection);\n            }\n\n            result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n          });\n        } else {\n          const tags = (value[1] as string).split(\",\");\n          const tag = tags.length > 0 ? tags[0].trim() : null;\n          this.processFolder(result, tag);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      for (let i = 2; i < value.length; i++) {\n        const header = headers[i].trim().toLowerCase();\n        if (this.isNullOrWhitespace(value[i]) || this.isNullOrWhitespace(header)) {\n          continue;\n        }\n\n        if (this.usernameFieldNames.indexOf(header) > -1) {\n          cipher.login.username = value[i];\n        } else if (this.passwordFieldNames.indexOf(header) > -1) {\n          cipher.login.password = value[i];\n        } else if (this.uriFieldNames.indexOf(header) > -1) {\n          cipher.login.uris = this.makeUriArray(value[i]);\n        } else {\n          this.processKvp(cipher, headers[i], value[i]);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassKeepCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValue(\"category\", value));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValue(\"description\", value);\n      cipher.name = this.getValueOrDefault(this.getValue(\"title\", value), \"--\");\n      cipher.login.username = this.getValue(\"username\", value);\n      cipher.login.password = this.getValue(\"password\", value);\n      cipher.login.uris = this.makeUriArray(this.getValue(\"site\", value));\n      this.processKvp(cipher, \"Password 2\", this.getValue(\"password2\", value));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private getValue(key: string, value: any) {\n    return this.getValueOrDefault(value[key], this.getValueOrDefault(value[\" \" + key]));\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { PasskyJsonExport } from \"./passky-json-types\";\n\nexport class PasskyJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const passkyExport: PasskyJsonExport = JSON.parse(data);\n    if (\n      passkyExport == null ||\n      passkyExport.passwords == null ||\n      passkyExport.passwords.length === 0\n    ) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (passkyExport.encrypted == true) {\n      result.success = false;\n      result.errorMessage = \"Unable to import an encrypted passky backup.\";\n      return Promise.resolve(result);\n    }\n\n    passkyExport.passwords.forEach((record) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = record.website;\n      cipher.login.username = record.username;\n      cipher.login.password = record.password;\n\n      cipher.login.uris = this.makeUriArray(record.website);\n      cipher.notes = record.message;\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassmanJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((credential: any) => {\n      if (credential.tags != null && credential.tags.length > 0) {\n        const folderName = credential.tags[0].text;\n        this.processFolder(result, folderName);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = credential.label;\n\n      cipher.login.username = this.getValueOrDefault(credential.username);\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.url);\n      cipher.notes += this.getValueOrDefault(credential.description, \"\");\n      if (credential.otp != null) {\n        cipher.login.totp = this.getValueOrDefault(credential.otp.secret);\n      }\n\n      if (credential.custom_fields != null) {\n        credential.custom_fields.forEach((customField: any) => {\n          switch (customField.field_type) {\n            case \"text\":\n            case \"password\":\n              this.processKvp(cipher, customField.label, customField.value);\n              break;\n          }\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasspackCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const tagsJson = !this.isNullOrWhitespace(value.Tags) ? JSON.parse(value.Tags) : null;\n      const tags: string[] =\n        tagsJson != null && tagsJson.tags != null && tagsJson.tags.length > 0\n          ? tagsJson.tags\n              .map((tagJson: string) => {\n                try {\n                  const t = JSON.parse(tagJson);\n                  return this.getValueOrDefault(t.tag);\n                } catch {\n                  // Ignore error\n                }\n                return null;\n              })\n              .filter((t: string) => !this.isNullOrWhitespace(t))\n          : null;\n\n      if (this.organization && tags != null && tags.length > 0) {\n        tags.forEach((tag) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === tag) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = tag;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization && tags != null && tags.length > 0) {\n        this.processFolder(result, tags[0]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes, \"\");\n      cipher.notes += \"\\n\\n\" + this.getValueOrDefault(value[\"Shared Notes\"], \"\") + \"\\n\";\n      cipher.name = this.getValueOrDefault(value[\"Entry Name\"], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User ID\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n        value.__parsed_extra.forEach((extra: string) => {\n          if (!this.isNullOrWhitespace(extra)) {\n            cipher.notes += \"\\n\" + extra;\n          }\n        });\n      }\n\n      const fieldsJson = !this.isNullOrWhitespace(value[\"Extra Fields\"])\n        ? JSON.parse(value[\"Extra Fields\"])\n        : null;\n      const fields =\n        fieldsJson != null && fieldsJson.extraFields != null && fieldsJson.extraFields.length > 0\n          ? fieldsJson.extraFields.map((fieldJson: string) => {\n              try {\n                return JSON.parse(fieldJson);\n              } catch {\n                // Ignore error\n              }\n              return null;\n            })\n          : null;\n      if (fields != null) {\n        fields.forEach((f: any) => {\n          if (f != null) {\n            this.processKvp(cipher, f.name, f.data);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordAgentCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let newVersion = true;\n    results.forEach((value) => {\n      if (value.length !== 5 && value.length < 9) {\n        return;\n      }\n      const altFormat = value.length === 10 && value[0] === \"0\";\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[altFormat ? 1 : 0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[altFormat ? 2 : 1]);\n      cipher.login.password = this.getValueOrDefault(value[altFormat ? 3 : 2]);\n      if (value.length === 5) {\n        newVersion = false;\n        cipher.notes = this.getValueOrDefault(value[4]);\n        cipher.login.uris = this.makeUriArray(value[3]);\n      } else {\n        const folder = this.getValueOrDefault(value[altFormat ? 9 : 8], \"(None)\");\n        let folderName = folder !== \"(None)\" ? folder.split(\"\\\\\").join(\"/\") : null;\n        if (folderName != null) {\n          folderName = folder.split(\" > \").join(\"/\");\n          folderName = folder.split(\">\").join(\"/\");\n        }\n        this.processFolder(result, folderName);\n        cipher.notes = this.getValueOrDefault(value[altFormat ? 5 : 3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (newVersion && this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordBossJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.items == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    results.folders.forEach((value: any) => {\n      foldersMap.set(value.id, value.name);\n    });\n    const foldersIndexMap = new Map<string, number>();\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((value: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.login.uris = this.makeUriArray(value.login_url);\n\n      if (value.folder != null && foldersIndexMap.has(value.folder)) {\n        result.folderRelationships.push([result.ciphers.length, foldersIndexMap.get(value.folder)]);\n      }\n\n      if (value.identifiers == null) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value.identifiers.notes)) {\n        cipher.notes = value.identifiers.notes.split(\"\\\\r\\\\n\").join(\"\\n\").split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (value.type === \"CreditCard\") {\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n      }\n\n      for (const property in value.identifiers) {\n        // eslint-disable-next-line\n        if (!value.identifiers.hasOwnProperty(property)) {\n          continue;\n        }\n        const valObj = value.identifiers[property];\n        const val = valObj != null ? valObj.toString() : null;\n        if (\n          this.isNullOrWhitespace(val) ||\n          property === \"notes\" ||\n          property === \"ignoreItemInSecurityScore\"\n        ) {\n          continue;\n        }\n\n        if (property === \"custom_fields\") {\n          valObj.forEach((cf: any) => {\n            this.processKvp(cipher, cf.name, cf.value);\n          });\n          continue;\n        }\n\n        if (cipher.type === CipherType.Card) {\n          if (property === \"cardNumber\") {\n            cipher.card.number = val;\n            cipher.card.brand = this.getCardBrand(val);\n            continue;\n          } else if (property === \"nameOnCard\") {\n            cipher.card.cardholderName = val;\n            continue;\n          } else if (property === \"security_code\") {\n            cipher.card.code = val;\n            continue;\n          } else if (property === \"expires\") {\n            try {\n              const expDate = new Date(val);\n              cipher.card.expYear = expDate.getFullYear().toString();\n              cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n            } catch {\n              // Ignore error\n            }\n            continue;\n          } else if (property === \"cardType\") {\n            continue;\n          }\n        } else {\n          if (\n            (property === \"username\" || property === \"email\") &&\n            this.isNullOrWhitespace(cipher.login.username)\n          ) {\n            cipher.login.username = val;\n            continue;\n          } else if (property === \"password\") {\n            cipher.login.password = val;\n            continue;\n          } else if (property === \"totp\") {\n            cipher.login.totp = val;\n            continue;\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(property) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n            continue;\n          }\n        }\n\n        this.processKvp(cipher, property, val);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordDragonXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const records = doc.querySelectorAll(\"PasswordManager > record\");\n    Array.from(records).forEach((record) => {\n      const category = this.querySelectorDirectChild(record, \"Category\");\n      const categoryText =\n        category != null &&\n        !this.isNullOrWhitespace(category.textContent) &&\n        category.textContent !== \"Unfiled\"\n          ? category.textContent\n          : null;\n      this.processFolder(result, categoryText);\n\n      const accountName = this.querySelectorDirectChild(record, \"Account-Name\");\n      const userId = this.querySelectorDirectChild(record, \"User-Id\");\n      const password = this.querySelectorDirectChild(record, \"Password\");\n      const url = this.querySelectorDirectChild(record, \"URL\");\n      const notes = this.querySelectorDirectChild(record, \"Notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name =\n        accountName != null ? this.getValueOrDefault(accountName.textContent, \"--\") : \"--\";\n      cipher.notes = notes != null ? this.getValueOrDefault(notes.textContent) : \"\";\n      cipher.login.username = userId != null ? this.getValueOrDefault(userId.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      const attributes: string[] = [];\n      for (let i = 1; i <= 10; i++) {\n        attributes.push(\"Attribute-\" + i);\n      }\n\n      this.querySelectorAllDirectChild(record, attributes.join(\",\")).forEach((attr) => {\n        if (this.isNullOrWhitespace(attr.textContent) || attr.textContent === \"null\") {\n          return;\n        }\n        this.processKvp(cipher, attr.tagName, attr.textContent);\n      });\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordSafeXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const passwordSafe = doc.querySelector(\"passwordsafe\");\n    if (passwordSafe == null) {\n      result.errorMessage = \"Missing `passwordsafe` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const notesDelimiter = passwordSafe.getAttribute(\"delimiter\");\n    const entries = doc.querySelectorAll(\"passwordsafe > entry\");\n    Array.from(entries).forEach((entry) => {\n      const group = this.querySelectorDirectChild(entry, \"group\");\n      const groupText =\n        group != null && !this.isNullOrWhitespace(group.textContent)\n          ? group.textContent.split(\".\").join(\"/\")\n          : null;\n      this.processFolder(result, groupText);\n\n      const title = this.querySelectorDirectChild(entry, \"title\");\n      const username = this.querySelectorDirectChild(entry, \"username\");\n      const email = this.querySelectorDirectChild(entry, \"email\");\n      const password = this.querySelectorDirectChild(entry, \"password\");\n      const url = this.querySelectorDirectChild(entry, \"url\");\n      const notes = this.querySelectorDirectChild(entry, \"notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name = title != null ? this.getValueOrDefault(title.textContent, \"--\") : \"--\";\n      cipher.notes =\n        notes != null\n          ? this.getValueOrDefault(notes.textContent, \"\").split(notesDelimiter).join(\"\\n\")\n          : null;\n      cipher.login.username =\n        username != null ? this.getValueOrDefault(username.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      if (this.isNullOrWhitespace(cipher.login.username) && email != null) {\n        cipher.login.username = this.getValueOrDefault(email.textContent);\n      } else if (email != null && !this.isNullOrWhitespace(email.textContent)) {\n        cipher.notes = this.isNullOrWhitespace(cipher.notes)\n          ? \"Email: \" + email.textContent\n          : cipher.notes + \"\\n\" + \"Email: \" + email.textContent;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordWalletTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 1) {\n        return;\n      }\n      if (value.length > 5) {\n        this.processFolder(result, value[5]);\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      if (value.length > 4) {\n        cipher.notes = this.getValueOrDefault(value[4], \"\").split(\"¬\").join(\"\\n\");\n      }\n      if (value.length > 2) {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n      }\n      if (value.length > 3) {\n        cipher.login.password = this.getValueOrDefault(value[3]);\n      }\n      if (value.length > 1) {\n        cipher.login.uris = this.makeUriArray(value[1]);\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  AppPasswordEntry,\n  BookmarkEntry,\n  EnvironmentVariablesEntry,\n  FoldersEntity,\n  GPGEntry,\n  NotesEntry,\n  PsonoItemTypes,\n  PsonoJsonExport,\n  TOTPEntry,\n  WebsitePasswordEntry,\n} from \"./psono-json-types\";\n\nexport class PsonoJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const psonoExport: PsonoJsonExport = JSON.parse(data);\n    if (psonoExport == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    this.parseFolders(result, psonoExport.folders);\n    this.handleItemParsing(result, psonoExport.items);\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFolders(result: ImportResult, folders: FoldersEntity[]) {\n    if (folders == null || folders.length === 0) {\n      return;\n    }\n\n    folders.forEach((folder) => {\n      if (folder.items == null || folder.items.length == 0) {\n        return;\n      }\n\n      this.processFolder(result, folder.name);\n\n      this.handleItemParsing(result, folder.items);\n    });\n  }\n\n  private handleItemParsing(result: ImportResult, items?: PsonoItemTypes[]) {\n    if (items == null || items.length === 0) {\n      return;\n    }\n\n    items.forEach((record) => {\n      const cipher = this.parsePsonoItem(record);\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n  }\n\n  private parsePsonoItem(item: PsonoItemTypes): CipherView {\n    const cipher = this.initLoginCipher();\n\n    switch (item.type) {\n      case \"website_password\":\n        this.parseWebsiteLogins(item, cipher);\n        break;\n      case \"application_password\":\n        this.parseApplicationPasswords(item, cipher);\n        break;\n      case \"environment_variables\":\n        this.parseEnvironmentVariables(item, cipher);\n        break;\n      case \"totp\":\n        this.parseTOTP(item, cipher);\n        break;\n      case \"bookmark\":\n        this.parseBookmarks(item, cipher);\n        break;\n      // Skipping this until we can save GPG into notes/custom fields\n      // case \"mail_gpg_own_key\":\n      //   this.parseGPG(item, cipher);\n      //   break;\n      case \"note\":\n        this.parseNotes(item, cipher);\n        break;\n      default:\n        break;\n    }\n\n    return cipher;\n  }\n\n  readonly WEBSITE_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"website_password_title\",\n    \"website_password_notes\",\n    \"website_password_username\",\n    \"website_password_password\",\n    \"website_password_url\",\n    \"autosubmit\",\n    \"website_password_auto_submit\",\n    \"urlfilter\",\n    \"website_password_url_filter\",\n  ]);\n  private parseWebsiteLogins(entry: WebsitePasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"website_password\") {\n      return;\n    }\n\n    cipher.name = entry.website_password_title;\n    cipher.notes = entry.website_password_notes;\n\n    cipher.login.username = entry.website_password_username;\n    cipher.login.password = entry.website_password_password;\n\n    cipher.login.uris = this.makeUriArray(entry.website_password_url);\n\n    this.processKvp(\n      cipher,\n      \"website_password_auto_submit\",\n      entry.website_password_auto_submit.toString(),\n      FieldType.Boolean\n    );\n\n    this.processKvp(cipher, \"website_password_url_filter\", entry.website_password_url_filter);\n\n    this.importUnmappedFields(cipher, entry, this.WEBSITE_mappedValues);\n  }\n\n  readonly APP_PWD_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"application_password_title\",\n    \"application_password_notes\",\n    \"application_password_username\",\n    \"application_password_password\",\n  ]);\n  private parseApplicationPasswords(entry: AppPasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"application_password\") {\n      return;\n    }\n\n    cipher.name = entry.application_password_title;\n    cipher.notes = entry.application_password_notes;\n\n    cipher.login.username = entry.application_password_username;\n    cipher.login.password = entry.application_password_password;\n\n    this.importUnmappedFields(cipher, entry, this.APP_PWD_mappedValues);\n  }\n\n  readonly BOOKMARK_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"bookmark_title\",\n    \"bookmark_notes\",\n    \"bookmark_url\",\n  ]);\n  private parseBookmarks(entry: BookmarkEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"bookmark\") {\n      return;\n    }\n\n    cipher.name = entry.bookmark_title;\n    cipher.notes = entry.bookmark_notes;\n\n    cipher.login.uris = this.makeUriArray(entry.bookmark_url);\n\n    this.importUnmappedFields(cipher, entry, this.BOOKMARK_mappedValues);\n  }\n\n  readonly NOTES_mappedValues = new Set([\"type\", \"name\", \"note_title\", \"note_notes\"]);\n  private parseNotes(entry: NotesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"note\") {\n      return;\n    }\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.note_title;\n    cipher.notes = entry.note_notes;\n\n    this.importUnmappedFields(cipher, entry, this.NOTES_mappedValues);\n  }\n\n  readonly TOTP_mappedValues = new Set([\"type\", \"name\", \"totp_title\", \"totp_notes\", \"totp_code\"]);\n  private parseTOTP(entry: TOTPEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"totp\") {\n      return;\n    }\n\n    cipher.name = entry.totp_title;\n    cipher.notes = entry.totp_notes;\n\n    cipher.login.totp = entry.totp_code;\n\n    this.importUnmappedFields(cipher, entry, this.TOTP_mappedValues);\n  }\n\n  readonly ENV_VARIABLES_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"environment_variables_title\",\n    \"environment_variables_notes\",\n    \"environment_variables_variables\",\n  ]);\n  private parseEnvironmentVariables(entry: EnvironmentVariablesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"environment_variables\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.environment_variables_title;\n    cipher.notes = entry.environment_variables_notes;\n\n    entry.environment_variables_variables.forEach((KvPair) => {\n      this.processKvp(cipher, KvPair.key, KvPair.value);\n    });\n\n    this.importUnmappedFields(cipher, entry, this.ENV_VARIABLES_mappedValues);\n  }\n\n  readonly GPG_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"mail_gpg_own_key_title\",\n    \"mail_gpg_own_key_public\",\n    \"mail_gpg_own_key_name\",\n    \"mail_gpg_own_key_email\",\n    \"mail_gpg_own_key_private\",\n  ]);\n  private parseGPG(entry: GPGEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"mail_gpg_own_key\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.mail_gpg_own_key_title;\n    cipher.notes = entry.mail_gpg_own_key_public;\n\n    this.processKvp(cipher, \"mail_gpg_own_key_name\", entry.mail_gpg_own_key_name);\n    this.processKvp(cipher, \"mail_gpg_own_key_email\", entry.mail_gpg_own_key_email);\n    this.processKvp(\n      cipher,\n      \"mail_gpg_own_key_private\",\n      entry.mail_gpg_own_key_private,\n      FieldType.Hidden\n    );\n\n    this.importUnmappedFields(cipher, entry, this.GPG_mappedValues);\n  }\n\n  private importUnmappedFields(\n    cipher: CipherView,\n    entry: PsonoItemTypes,\n    mappedValues: Set<string>\n  ) {\n    const unmappedFields = Object.keys(entry).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = entry as any;\n      this.processKvp(cipher, key, item[key].toString());\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RememBearCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.trash === \"true\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.notes);\n      if (value.type === \"LoginItem\") {\n        cipher.login.uris = this.makeUriArray(value.website);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      } else if (value.type === \"CreditCardItem\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.verification);\n\n        try {\n          const expMonth = this.getValueOrDefault(value.expiryMonth);\n          if (expMonth != null) {\n            const expMonthNumber = parseInt(expMonth, null);\n            if (expMonthNumber != null && expMonthNumber >= 1 && expMonthNumber <= 12) {\n              cipher.card.expMonth = expMonthNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n        try {\n          const expYear = this.getValueOrDefault(value.expiryYear);\n          if (expYear != null) {\n            const expYearNumber = parseInt(expYear, null);\n            if (expYearNumber != null) {\n              cipher.card.expYear = expYearNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n\n        const pin = this.getValueOrDefault(value.pin);\n        if (pin != null) {\n          this.processKvp(cipher, \"PIN\", pin);\n        }\n        const zip = this.getValueOrDefault(value.zipCode);\n        if (zip != null) {\n          this.processKvp(cipher, \"Zip Code\", zip);\n        }\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RoboFormCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let i = 1;\n    results.forEach((value) => {\n      const folder =\n        !this.isNullOrWhitespace(value.Folder) && value.Folder.startsWith(\"/\")\n          ? value.Folder.replace(\"/\", \"\")\n          : value.Folder;\n      const folderName = !this.isNullOrWhitespace(folder) ? folder : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Login);\n      cipher.login.password = this.getValueOrDefault(value.Pwd);\n      cipher.login.uris = this.makeUriArray(value.Url);\n\n      if (!this.isNullOrWhitespace(value.Rf_fields)) {\n        let fields: string[] = [value.Rf_fields];\n        if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n          fields = fields.concat(value.__parsed_extra);\n        }\n        fields.forEach((field: string) => {\n          const parts = field.split(\":\");\n          if (parts.length < 3) {\n            return;\n          }\n          const key = parts[0] === \"-no-name-\" ? null : parts[0];\n          const val = parts.length === 4 && parts[2] === \"rck\" ? parts[1] : parts[2];\n          this.processKvp(cipher, key, val);\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n\n      if (\n        i === results.length &&\n        cipher.name === \"--\" &&\n        this.isNullOrWhitespace(cipher.login.password)\n      ) {\n        return;\n      }\n\n      result.ciphers.push(cipher);\n      i++;\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafariCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url ?? value.URL);\n      cipher.login.totp = this.getValueOrDefault(value.OTPAuth);\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafeInCloudXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const db = doc.querySelector(\"database\");\n    if (db == null) {\n      result.errorMessage = \"Missing `database` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, number>();\n\n    Array.from(doc.querySelectorAll(\"database > label\")).forEach((labelEl) => {\n      const name = labelEl.getAttribute(\"name\");\n      const id = labelEl.getAttribute(\"id\");\n      if (!this.isNullOrWhitespace(name) && !this.isNullOrWhitespace(id)) {\n        foldersMap.set(id, result.folders.length);\n        const folder = new FolderView();\n        folder.name = name;\n        result.folders.push(folder);\n      }\n    });\n\n    Array.from(doc.querySelectorAll(\"database > card\")).forEach((cardEl) => {\n      if (cardEl.getAttribute(\"template\") === \"true\" || cardEl.getAttribute(\"deleted\") === \"true\") {\n        return;\n      }\n\n      const labelIdEl = this.querySelectorDirectChild(cardEl, \"label_id\");\n      if (labelIdEl != null) {\n        const labelId = labelIdEl.textContent;\n        if (!this.isNullOrWhitespace(labelId) && foldersMap.has(labelId)) {\n          result.folderRelationships.push([result.ciphers.length, foldersMap.get(labelId)]);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(cardEl.getAttribute(\"title\"), \"--\");\n\n      if (cardEl.getAttribute(\"star\") === \"true\") {\n        cipher.favorite = true;\n      }\n\n      const cardType = cardEl.getAttribute(\"type\");\n      if (cardType === \"note\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      } else {\n        Array.from(this.querySelectorAllDirectChild(cardEl, \"field\")).forEach((fieldEl) => {\n          const text = fieldEl.textContent;\n          if (this.isNullOrWhitespace(text)) {\n            return;\n          }\n          const name = fieldEl.getAttribute(\"name\");\n          const fieldType = this.getValueOrDefault(fieldEl.getAttribute(\"type\"), \"\").toLowerCase();\n          if (fieldType === \"login\") {\n            cipher.login.username = text;\n          } else if (fieldType === \"password\" || fieldType === \"secret\") {\n            // safeInCloud allows for more than one password. we just insert them here and find the one used as password later\n            this.processKvp(cipher, name, text, FieldType.Hidden);\n          } else if (fieldType === \"one_time_password\") {\n            cipher.login.totp = text;\n          } else if (fieldType === \"notes\") {\n            cipher.notes += text + \"\\n\";\n          } else if (fieldType === \"weblogin\" || fieldType === \"website\") {\n            cipher.login.uris = this.makeUriArray(text);\n          } else {\n            this.processKvp(cipher, name, text);\n          }\n        });\n      }\n\n      Array.from(this.querySelectorAllDirectChild(cardEl, \"notes\")).forEach((notesEl) => {\n        cipher.notes += notesEl.textContent + \"\\n\";\n      });\n\n      this.setPassword(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  // Choose a password from all passwords. Take one that has password in its name, or the first one if there is no such entry\n  // if its name is password, we can safely remove it form the fields. otherwise, it would maybe be best to keep it as a hidden field\n  setPassword(cipher: CipherView) {\n    const candidates = cipher.fields.filter((field) => field.type === FieldType.Hidden);\n    if (!candidates.length) {\n      return;\n    }\n\n    let choice: FieldView;\n    for (const field of candidates) {\n      if (this.passwordFieldNames.includes(field.name.toLowerCase())) {\n        choice = field;\n        cipher.fields = cipher.fields.filter((f) => f !== choice);\n        break;\n      }\n    }\n\n    if (!choice) {\n      choice = candidates[0];\n    }\n\n    cipher.login.password = choice.value;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SaferPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.nameFromUrl(value.url), \"--\");\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SecureSafeCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title);\n      cipher.notes = this.getValueOrDefault(value.Comment);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SplashIdCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      this.processFolder(result, this.getValueOrDefault(value[value.length - 1]));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 2], \"\");\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n\n      if (value[0] === \"Web Logins\" || value[0] === \"Servers\" || value[0] === \"Email Accounts\") {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n        cipher.login.password = this.getValueOrDefault(value[3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n        this.parseFieldsToNotes(cipher, 5, value);\n      } else {\n        this.parseFieldsToNotes(cipher, 2, value);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFieldsToNotes(cipher: CipherView, startIndex: number, value: any) {\n    // last 3 rows do not get parsed\n    for (let i = startIndex; i < value.length - 3; i++) {\n      if (this.isNullOrWhitespace(value[i])) {\n        continue;\n      }\n      cipher.notes += value[i] + \"\\n\";\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class StickyPasswordXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const loginNodes = doc.querySelectorAll(\"root > Database > Logins > Login\");\n    Array.from(loginNodes).forEach((loginNode) => {\n      const accountId = loginNode.getAttribute(\"ID\");\n      if (this.isNullOrWhitespace(accountId)) {\n        return;\n      }\n\n      const usernameText = loginNode.getAttribute(\"Name\");\n      const passwordText = loginNode.getAttribute(\"Password\");\n      let titleText: string = null;\n      let linkText: string = null;\n      let notesText: string = null;\n      let groupId: string = null;\n      let groupText: string = null;\n\n      const accountLogin = doc.querySelector(\n        \"root > Database > Accounts > Account > \" +\n          'LoginLinks > Login[SourceLoginID=\"' +\n          accountId +\n          '\"]'\n      );\n      if (accountLogin != null) {\n        const account = accountLogin.parentElement.parentElement;\n        if (account != null) {\n          titleText = account.getAttribute(\"Name\");\n          linkText = account.getAttribute(\"Link\");\n          groupId = account.getAttribute(\"ParentID\");\n          notesText = account.getAttribute(\"Comments\");\n          if (!this.isNullOrWhitespace(notesText)) {\n            notesText = notesText.split(\"/n\").join(\"\\n\");\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(groupId)) {\n        groupText = this.buildGroupText(doc, groupId, \"\");\n        this.processFolder(result, groupText);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(titleText, \"--\");\n      cipher.notes = this.getValueOrDefault(notesText);\n      cipher.login.username = this.getValueOrDefault(usernameText);\n      cipher.login.password = this.getValueOrDefault(passwordText);\n      cipher.login.uris = this.makeUriArray(linkText);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  buildGroupText(doc: Document, groupId: string, groupText: string): string {\n    const group = doc.querySelector('root > Database > Groups > Group[ID=\"' + groupId + '\"]');\n    if (group == null) {\n      return groupText;\n    }\n    if (!this.isNullOrWhitespace(groupText)) {\n      groupText = \"/\" + groupText;\n    }\n    groupText = group.getAttribute(\"Name\") + groupText;\n    return this.buildGroupText(doc, group.getAttribute(\"ParentID\"), groupText);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst PropertiesToIgnore = [\n  \"kind\",\n  \"autologin\",\n  \"favorite\",\n  \"hexcolor\",\n  \"protectedwithpassword\",\n  \"subdomainonly\",\n  \"type\",\n  \"tk_export_version\",\n  \"note\",\n  \"title\",\n  \"document_content\",\n];\n\nexport class TrueKeyCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.favorite, \"\").toLowerCase() === \"true\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.notes = this.getValueOrDefault(value.memo, \"\");\n      cipher.login.username = this.getValueOrDefault(value.login);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n\n      if (value.kind !== \"login\") {\n        cipher.name = this.getValueOrDefault(value.title, \"--\");\n        cipher.notes = this.getValueOrDefault(value.note, \"\");\n      }\n\n      if (value.kind === \"cc\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        if (!this.isNullOrWhitespace(value.expiryDate)) {\n          try {\n            const expDate = new Date(value.expiryDate);\n            cipher.card.expYear = expDate.getFullYear().toString();\n            cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n          } catch {\n            // Ignore error\n          }\n        }\n      } else if (value.kind !== \"login\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = this.getValueOrDefault(value.document_content, \"\");\n        }\n        for (const property in value) {\n          if (\n            value.hasOwnProperty(property) && // eslint-disable-line\n            PropertiesToIgnore.indexOf(property.toLowerCase()) < 0 &&\n            !this.isNullOrWhitespace(value[property])\n          ) {\n            this.processKvp(cipher, property, value[property]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class UpmCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length !== 5) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.notes = this.getValueOrDefault(value[4]);\n      cipher.login.username = this.getValueOrDefault(value[1]);\n      cipher.login.password = this.getValueOrDefault(value[2]);\n      cipher.login.uris = this.makeUriArray(value[3]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class YotiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User name\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ZohoVaultCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (\n        this.isNullOrWhitespace(value[\"Password Name\"]) &&\n        this.isNullOrWhitespace(value[\"Secret Name\"])\n      ) {\n        return;\n      }\n      this.processFolder(result, this.getValueOrDefault(value.ChamberName));\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite, \"0\") === \"1\";\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(\n        value[\"Password Name\"],\n        this.getValueOrDefault(value[\"Secret Name\"], \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(\n        this.getValueOrDefault(value[\"Password URL\"], this.getValueOrDefault(value[\"Secret URL\"]))\n      );\n      this.parseData(cipher, value.SecretData);\n      this.parseData(cipher, value.CustomData);\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseData(cipher: CipherView, data: string) {\n    if (this.isNullOrWhitespace(data)) {\n      return;\n    }\n    const dataLines = this.splitNewLine(data);\n    dataLines.forEach((line) => {\n      const delimPosition = line.indexOf(\":\");\n      if (delimPosition < 0) {\n        return;\n      }\n      const field = line.substring(0, delimPosition);\n      const value = line.length > delimPosition ? line.substring(delimPosition + 1) : null;\n      if (\n        this.isNullOrWhitespace(field) ||\n        this.isNullOrWhitespace(value) ||\n        field === \"SecretType\"\n      ) {\n        return;\n      }\n      const fieldLower = field.toLowerCase();\n      if (cipher.login.username == null && this.usernameFieldNames.indexOf(fieldLower) > -1) {\n        cipher.login.username = value;\n      } else if (\n        cipher.login.password == null &&\n        this.passwordFieldNames.indexOf(fieldLower) > -1\n      ) {\n        cipher.login.password = value;\n      } else {\n        this.processKvp(cipher, field, value);\n      }\n    });\n  }\n}\n","export interface ImportOption {\n  id: string;\n  name: string;\n}\n\nexport const featuredImportOptions = [\n  { id: \"bitwardenjson\", name: \"Bitwarden (json)\" },\n  { id: \"bitwardencsv\", name: \"Bitwarden (csv)\" },\n  { id: \"chromecsv\", name: \"Chrome (csv)\" },\n  { id: \"dashlanecsv\", name: \"Dashlane (csv)\" },\n  { id: \"firefoxcsv\", name: \"Firefox (csv)\" },\n  { id: \"keepass2xml\", name: \"KeePass 2 (xml)\" },\n  { id: \"lastpasscsv\", name: \"LastPass (csv)\" },\n  { id: \"safaricsv\", name: \"Safari and macOS (csv)\" },\n  { id: \"1password1pux\", name: \"1Password (1pux)\" },\n] as const;\n\nexport const regularImportOptions = [\n  { id: \"keepassxcsv\", name: \"KeePassX (csv)\" },\n  { id: \"1password1pif\", name: \"1Password (1pif)\" },\n  { id: \"1passwordwincsv\", name: \"1Password 6 and 7 Windows (csv)\" },\n  { id: \"1passwordmaccsv\", name: \"1Password 6 and 7 Mac (csv)\" },\n  { id: \"dashlanejson\", name: \"Dashlane (json)\" },\n  { id: \"roboformcsv\", name: \"RoboForm (csv)\" },\n  { id: \"keepercsv\", name: \"Keeper (csv)\" },\n  // Temporarily remove this option for the Feb release\n  // { id: \"keeperjson\", name: \"Keeper (json)\" },\n  { id: \"enpasscsv\", name: \"Enpass (csv)\" },\n  { id: \"enpassjson\", name: \"Enpass (json)\" },\n  { id: \"safeincloudxml\", name: \"SafeInCloud (xml)\" },\n  { id: \"pwsafexml\", name: \"Password Safe (xml)\" },\n  { id: \"stickypasswordxml\", name: \"Sticky Password (xml)\" },\n  { id: \"msecurecsv\", name: \"mSecure (csv)\" },\n  { id: \"truekeycsv\", name: \"True Key (csv)\" },\n  { id: \"passwordbossjson\", name: \"Password Boss (json)\" },\n  { id: \"zohovaultcsv\", name: \"Zoho Vault (csv)\" },\n  { id: \"splashidcsv\", name: \"SplashID (csv)\" },\n  { id: \"passworddragonxml\", name: \"Password Dragon (xml)\" },\n  { id: \"padlockcsv\", name: \"Padlock (csv)\" },\n  { id: \"passboltcsv\", name: \"Passbolt (csv)\" },\n  { id: \"clipperzhtml\", name: \"Clipperz (html)\" },\n  { id: \"aviracsv\", name: \"Avira (csv)\" },\n  { id: \"saferpasscsv\", name: \"SaferPass (csv)\" },\n  { id: \"upmcsv\", name: \"Universal Password Manager (csv)\" },\n  { id: \"ascendocsv\", name: \"Ascendo DataVault (csv)\" },\n  { id: \"meldiumcsv\", name: \"Meldium (csv)\" },\n  { id: \"passkeepcsv\", name: \"PassKeep (csv)\" },\n  { id: \"operacsv\", name: \"Opera (csv)\" },\n  { id: \"vivaldicsv\", name: \"Vivaldi (csv)\" },\n  { id: \"gnomejson\", name: \"GNOME Passwords and Keys/Seahorse (json)\" },\n  { id: \"blurcsv\", name: \"Blur (csv)\" },\n  { id: \"passwordagentcsv\", name: \"Password Agent (csv)\" },\n  { id: \"passpackcsv\", name: \"Passpack (csv)\" },\n  { id: \"passmanjson\", name: \"Passman (json)\" },\n  { id: \"avastcsv\", name: \"Avast Passwords (csv)\" },\n  { id: \"avastjson\", name: \"Avast Passwords (json)\" },\n  { id: \"fsecurefsk\", name: \"F-Secure KEY (fsk)\" },\n  { id: \"kasperskytxt\", name: \"Kaspersky Password Manager (txt)\" },\n  { id: \"remembearcsv\", name: \"RememBear (csv)\" },\n  { id: \"passwordwallettxt\", name: \"PasswordWallet (txt)\" },\n  { id: \"mykicsv\", name: \"Myki (csv)\" },\n  { id: \"securesafecsv\", name: \"SecureSafe (csv)\" },\n  { id: \"logmeoncecsv\", name: \"LogMeOnce (csv)\" },\n  { id: \"blackberrycsv\", name: \"BlackBerry Password Keeper (csv)\" },\n  { id: \"buttercupcsv\", name: \"Buttercup (csv)\" },\n  { id: \"codebookcsv\", name: \"Codebook (csv)\" },\n  { id: \"encryptrcsv\", name: \"Encryptr (csv)\" },\n  { id: \"yoticsv\", name: \"Yoti (csv)\" },\n  { id: \"nordpasscsv\", name: \"Nordpass (csv)\" },\n  { id: \"psonojson\", name: \"Psono (json)\" },\n  { id: \"passkyjson\", name: \"Passky (json)\" },\n] as const;\n\nexport type ImportType =\n  | (typeof featuredImportOptions)[number][\"id\"]\n  | (typeof regularImportOptions)[number][\"id\"];\n","import { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { CollectionService } from \"@bitwarden/common/admin-console/abstractions/collection.service\";\nimport { CollectionRequest } from \"@bitwarden/common/admin-console/models/request/collection.request\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\nimport { KvpRequest } from \"@bitwarden/common/models/request/kvp.request\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherRequest } from \"@bitwarden/common/vault/models/request/cipher.request\";\nimport { FolderRequest } from \"@bitwarden/common/vault/models/request/folder.request\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport {\n  AscendoCsvImporter,\n  AvastCsvImporter,\n  AvastJsonImporter,\n  AviraCsvImporter,\n  BitwardenCsvImporter,\n  BitwardenJsonImporter,\n  BitwardenPasswordProtectedImporter,\n  BlackBerryCsvImporter,\n  BlurCsvImporter,\n  ButtercupCsvImporter,\n  ChromeCsvImporter,\n  ClipperzHtmlImporter,\n  CodebookCsvImporter,\n  DashlaneCsvImporter,\n  DashlaneJsonImporter,\n  EncryptrCsvImporter,\n  EnpassCsvImporter,\n  EnpassJsonImporter,\n  FirefoxCsvImporter,\n  FSecureFskImporter,\n  GnomeJsonImporter,\n  KasperskyTxtImporter,\n  KeePass2XmlImporter,\n  KeePassXCsvImporter,\n  KeeperCsvImporter,\n  // KeeperJsonImporter,\n  LastPassCsvImporter,\n  LogMeOnceCsvImporter,\n  MSecureCsvImporter,\n  MeldiumCsvImporter,\n  MykiCsvImporter,\n  NordPassCsvImporter,\n  OnePassword1PifImporter,\n  OnePassword1PuxImporter,\n  OnePasswordMacCsvImporter,\n  OnePasswordWinCsvImporter,\n  PadlockCsvImporter,\n  PassKeepCsvImporter,\n  PasskyJsonImporter,\n  PassmanJsonImporter,\n  PasspackCsvImporter,\n  PasswordAgentCsvImporter,\n  PasswordBossJsonImporter,\n  PasswordDragonXmlImporter,\n  PasswordSafeXmlImporter,\n  PasswordWalletTxtImporter,\n  PsonoJsonImporter,\n  RememBearCsvImporter,\n  RoboFormCsvImporter,\n  SafariCsvImporter,\n  SafeInCloudXmlImporter,\n  SaferPassCsvImporter,\n  SecureSafeCsvImporter,\n  SplashIdCsvImporter,\n  StickyPasswordXmlImporter,\n  TrueKeyCsvImporter,\n  UpmCsvImporter,\n  YotiCsvImporter,\n  ZohoVaultCsvImporter,\n} from \"../importers\";\nimport { Importer } from \"../importers/importer\";\nimport { ImportError } from \"../models/import-error\";\nimport {\n  featuredImportOptions,\n  ImportOption,\n  ImportType,\n  regularImportOptions,\n} from \"../models/import-options\";\nimport { ImportResult } from \"../models/import-result\";\nimport { ImportApiServiceAbstraction } from \"../services/import-api.service.abstraction\";\nimport { ImportServiceAbstraction } from \"../services/import.service.abstraction\";\n\nexport class ImportService implements ImportServiceAbstraction {\n  featuredImportOptions = featuredImportOptions as readonly ImportOption[];\n\n  regularImportOptions = regularImportOptions as readonly ImportOption[];\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private importApiService: ImportApiServiceAbstraction,\n    private i18nService: I18nService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService\n  ) {}\n\n  getImportOptions(): ImportOption[] {\n    return this.featuredImportOptions.concat(this.regularImportOptions);\n  }\n\n  async import(\n    importer: Importer,\n    fileContents: string,\n    organizationId: string = null\n  ): Promise<ImportError> {\n    const importResult = await importer.parse(fileContents);\n    if (importResult.success) {\n      if (importResult.folders.length === 0 && importResult.ciphers.length === 0) {\n        return new ImportError(this.i18nService.t(\"importNothingError\"));\n      } else if (importResult.ciphers.length > 0) {\n        const halfway = Math.floor(importResult.ciphers.length / 2);\n        const last = importResult.ciphers.length - 1;\n\n        if (\n          this.badData(importResult.ciphers[0]) &&\n          this.badData(importResult.ciphers[halfway]) &&\n          this.badData(importResult.ciphers[last])\n        ) {\n          return new ImportError(this.i18nService.t(\"importFormatError\"));\n        }\n      }\n      try {\n        await this.postImport(importResult, organizationId);\n      } catch (error) {\n        const errorResponse = new ErrorResponse(error, 400);\n        return this.handleServerError(errorResponse, importResult);\n      }\n      return null;\n    } else {\n      if (!Utils.isNullOrWhitespace(importResult.errorMessage)) {\n        return new ImportError(importResult.errorMessage, importResult.missingPassword);\n      } else {\n        return new ImportError(\n          this.i18nService.t(\"importFormatError\"),\n          importResult.missingPassword\n        );\n      }\n    }\n  }\n\n  getImporter(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    organizationId: string = null,\n    password: string = null\n  ): Importer {\n    const importer = this.getImporterInstance(format, password);\n    if (importer == null) {\n      return null;\n    }\n    importer.organizationId = organizationId;\n    return importer;\n  }\n\n  private getImporterInstance(format: ImportType | \"bitwardenpasswordprotected\", password: string) {\n    if (format == null) {\n      return null;\n    }\n\n    switch (format) {\n      case \"bitwardencsv\":\n        return new BitwardenCsvImporter();\n      case \"bitwardenjson\":\n        return new BitwardenJsonImporter(this.cryptoService, this.i18nService);\n      case \"bitwardenpasswordprotected\":\n        return new BitwardenPasswordProtectedImporter(\n          this.cryptoService,\n          this.i18nService,\n          password\n        );\n      case \"lastpasscsv\":\n      case \"passboltcsv\":\n        return new LastPassCsvImporter();\n      case \"keepassxcsv\":\n        return new KeePassXCsvImporter();\n      case \"aviracsv\":\n        return new AviraCsvImporter();\n      case \"blurcsv\":\n        return new BlurCsvImporter();\n      case \"safeincloudxml\":\n        return new SafeInCloudXmlImporter();\n      case \"padlockcsv\":\n        return new PadlockCsvImporter();\n      case \"keepass2xml\":\n        return new KeePass2XmlImporter();\n      case \"chromecsv\":\n      case \"operacsv\":\n      case \"vivaldicsv\":\n        return new ChromeCsvImporter();\n      case \"firefoxcsv\":\n        return new FirefoxCsvImporter();\n      case \"upmcsv\":\n        return new UpmCsvImporter();\n      case \"saferpasscsv\":\n        return new SaferPassCsvImporter();\n      case \"safaricsv\":\n        return new SafariCsvImporter();\n      case \"meldiumcsv\":\n        return new MeldiumCsvImporter();\n      case \"1password1pif\":\n        return new OnePassword1PifImporter();\n      case \"1password1pux\":\n        return new OnePassword1PuxImporter();\n      case \"1passwordwincsv\":\n        return new OnePasswordWinCsvImporter();\n      case \"1passwordmaccsv\":\n        return new OnePasswordMacCsvImporter();\n      case \"keepercsv\":\n        return new KeeperCsvImporter();\n      // case \"keeperjson\":\n      //   return new KeeperJsonImporter();\n      case \"passworddragonxml\":\n        return new PasswordDragonXmlImporter();\n      case \"enpasscsv\":\n        return new EnpassCsvImporter();\n      case \"enpassjson\":\n        return new EnpassJsonImporter();\n      case \"pwsafexml\":\n        return new PasswordSafeXmlImporter();\n      case \"dashlanecsv\":\n        return new DashlaneCsvImporter();\n      case \"dashlanejson\":\n        return new DashlaneJsonImporter();\n      case \"msecurecsv\":\n        return new MSecureCsvImporter();\n      case \"stickypasswordxml\":\n        return new StickyPasswordXmlImporter();\n      case \"truekeycsv\":\n        return new TrueKeyCsvImporter();\n      case \"clipperzhtml\":\n        return new ClipperzHtmlImporter();\n      case \"roboformcsv\":\n        return new RoboFormCsvImporter();\n      case \"ascendocsv\":\n        return new AscendoCsvImporter();\n      case \"passwordbossjson\":\n        return new PasswordBossJsonImporter();\n      case \"zohovaultcsv\":\n        return new ZohoVaultCsvImporter();\n      case \"splashidcsv\":\n        return new SplashIdCsvImporter();\n      case \"passkeepcsv\":\n        return new PassKeepCsvImporter();\n      case \"gnomejson\":\n        return new GnomeJsonImporter();\n      case \"passwordagentcsv\":\n        return new PasswordAgentCsvImporter();\n      case \"passpackcsv\":\n        return new PasspackCsvImporter();\n      case \"passmanjson\":\n        return new PassmanJsonImporter();\n      case \"avastcsv\":\n        return new AvastCsvImporter();\n      case \"avastjson\":\n        return new AvastJsonImporter();\n      case \"fsecurefsk\":\n        return new FSecureFskImporter();\n      case \"kasperskytxt\":\n        return new KasperskyTxtImporter();\n      case \"remembearcsv\":\n        return new RememBearCsvImporter();\n      case \"passwordwallettxt\":\n        return new PasswordWalletTxtImporter();\n      case \"mykicsv\":\n        return new MykiCsvImporter();\n      case \"securesafecsv\":\n        return new SecureSafeCsvImporter();\n      case \"logmeoncecsv\":\n        return new LogMeOnceCsvImporter();\n      case \"blackberrycsv\":\n        return new BlackBerryCsvImporter();\n      case \"buttercupcsv\":\n        return new ButtercupCsvImporter();\n      case \"codebookcsv\":\n        return new CodebookCsvImporter();\n      case \"encryptrcsv\":\n        return new EncryptrCsvImporter();\n      case \"yoticsv\":\n        return new YotiCsvImporter();\n      case \"nordpasscsv\":\n        return new NordPassCsvImporter();\n      case \"psonojson\":\n        return new PsonoJsonImporter();\n      case \"passkyjson\":\n        return new PasskyJsonImporter();\n      default:\n        return null;\n    }\n  }\n\n  private async postImport(importResult: ImportResult, organizationId: string = null) {\n    if (organizationId == null) {\n      const request = new ImportCiphersRequest();\n      for (let i = 0; i < importResult.ciphers.length; i++) {\n        const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n        request.ciphers.push(new CipherRequest(c));\n      }\n      if (importResult.folders != null) {\n        for (let i = 0; i < importResult.folders.length; i++) {\n          const f = await this.folderService.encrypt(importResult.folders[i]);\n          request.folders.push(new FolderRequest(f));\n        }\n      }\n      if (importResult.folderRelationships != null) {\n        importResult.folderRelationships.forEach((r) =>\n          request.folderRelationships.push(new KvpRequest(r[0], r[1]))\n        );\n      }\n      return await this.importApiService.postImportCiphers(request);\n    } else {\n      const request = new ImportOrganizationCiphersRequest();\n      for (let i = 0; i < importResult.ciphers.length; i++) {\n        importResult.ciphers[i].organizationId = organizationId;\n        const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n        request.ciphers.push(new CipherRequest(c));\n      }\n      if (importResult.collections != null) {\n        for (let i = 0; i < importResult.collections.length; i++) {\n          importResult.collections[i].organizationId = organizationId;\n          const c = await this.collectionService.encrypt(importResult.collections[i]);\n          request.collections.push(new CollectionRequest(c));\n        }\n      }\n      if (importResult.collectionRelationships != null) {\n        importResult.collectionRelationships.forEach((r) =>\n          request.collectionRelationships.push(new KvpRequest(r[0], r[1]))\n        );\n      }\n      return await this.importApiService.postImportOrganizationCiphers(organizationId, request);\n    }\n  }\n\n  private badData(c: CipherView) {\n    return (\n      (c.name == null || c.name === \"--\") &&\n      c.type === CipherType.Login &&\n      c.login != null &&\n      Utils.isNullOrWhitespace(c.login.password)\n    );\n  }\n\n  private handleServerError(errorResponse: ErrorResponse, importResult: ImportResult): ImportError {\n    if (errorResponse.validationErrors == null) {\n      return new ImportError(errorResponse.message);\n    }\n\n    let errorMessage = \"\";\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const i = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Ciphers\":\n          item = importResult.ciphers[i];\n          itemType = CipherType[item.type];\n          break;\n        case \"Folders\":\n          item = importResult.folders[i];\n          itemType = \"Folder\";\n          break;\n        case \"Collections\":\n          item = importResult.collections[i];\n          itemType = \"Collection\";\n          break;\n        default:\n          return;\n      }\n\n      if (index > 0) {\n        errorMessage += \"\\n\\n\";\n      }\n\n      if (itemType !== \"Folder\" && itemType !== \"Collection\") {\n        errorMessage += \"[\" + (i + 1) + \"] \";\n      }\n\n      errorMessage += \"[\" + itemType + '] \"' + item.name + '\": ' + value;\n    });\n\n    return new ImportError(errorMessage);\n  }\n}\n"],"names":["constructor","modalRef","config","userVerificationService","formBuilder","platformUtilsService","i18nService","confirmDescription","this","data","confirmButtonText","modalTitle","secret","submit","verifyUser","value","e","showToast","t","close","UserVerificationPromptComponent","cryptoService","exportService","eventCollectionService","policyService","win","logService","fileDownloadService","onSaved","disabledByPolicy","exportForm","group","format","filePassword","confirmFilePassword","fileEncryptionType","formatOptions","name","destroy$","Subject","ngOnInit","policyAppliesToActiveUser$","pipe","takeUntil","subscribe","policyAppliesToActiveUser","checkExportDisabled","merge","get","valueChanges","startWith","adjustValidators","ngOnDestroy","next","disable","encryptedFormat","doExport","formPromise","getExportData","downloadFile","saved","collectEvent","setValue","clearValidators","error","warningDialog","message","showDialog","emit","getPasswordProtectedExport","getExport","getFileName","prefix","extension","collect","reset","controls","enable","csv","fileName","download","blobData","blobOptions","type","ExportComponent","modalService","super","window","encryptedExportType","isFileEncryptedExport","markAllAsTouched","valid","isAccountEncryptedExport","ref","open","allowMultipleModals","onClosedPromise","FilePasswordPromptComponent","markAsTouched","cancel","ImportComponent","importService","router","syncService","loading","importBlockedByPolicy","organizationId","successNavigate","setImportOptions","firstValueFrom","importer","getImporter","files","document","getElementById","length","fileContents","content","getFileContents","import","passwordRequired","getFilePassword","doPasswordProtectedImport","fullSync","navigate","getFormatInstructionTitle","results","featuredImportOptions","concat","importOptions","filter","o","id","regularImportOptions","sort","a","b","collator","compare","localeCompare","setSelectedFile","event","fileInputEl","target","fileSelected","heightAuto","buttonsStyling","icon","iconHtml","input","inputValue","inputAttributes","readonly","titleText","text","showConfirmButton","onOpen","popupEl","querySelector","scrollTo","file","extract1PuxContent","Promise","resolve","reject","reader","FileReader","readAsText","onload","evt","pre","DOMParser","parseFromString","result","textContent","onerror","loadAsync","then","zip","async","passwordProtectedImporter","title","ExportScopeCalloutComponent","organizationService","stateService","show","hasOrganizations","scopeConfig","description","scopeIdentifier","getEmail","BoxRowDirective","elRef","el","nativeElement","formEls","Array","from","querySelectorAll","forEach","formEl","addEventListener","classList","add","remove","onClick","contains","tagName","toLowerCase","inputEl","click","focus","ImportError","Error","ImportApiServiceAbstraction","ImportApiService","apiService","postImportCiphers","request","send","postImportOrganizationCiphers","ImportServiceAbstraction","ImportCiphersRequest","ciphers","folders","folderRelationships","ImportOrganizationCiphersRequest","collections","collectionRelationships","KvpRequest","key","success","missingPassword","newLineRegex","passwordFieldNames","usernameFieldNames","notesFieldNames","uriFieldNames","parseCsvOptions","encoding","skipEmptyLines","organization","parseXml","doc","parseCsv","header","options","parseOptions","Object","assign","splitNewLine","join","trim","errors","row","warning","parseSingleRowCsv","rowData","isNullOrWhitespace","parsedRow","makeUriArray","uri","loginUri","fixUri","match","returnArr","u","push","indexOf","substring","nameFromUrl","url","hostname","startsWith","replace","str","getValueOrDefault","defaultValue","split","getCardBrand","cardNum","re","RegExp","test","setCardExpiration","cipher","expiration","parts","month","year","substr","card","expMonth","expYear","moveFoldersToCollections","r","map","f","collection","querySelectorDirectChild","parentEl","query","els","querySelectorAllDirectChild","parentNode","initLoginCipher","favorite","notes","fields","login","cleanupCipher","processKvp","search","field","processFolder","folderName","folderIndex","hasFolder","addFolder","i","convertToNoteIfNeeded","username","password","uris","secureNote","processFullName","fullName","nameParts","identity","firstName","lastName","middleName","slice","AscendoCsvImporter","parse","val","fieldLower","AvastCsvImporter","web","AvastJsonImporter","JSON","logins","custName","note","pwd","loginName","label","cards","cardholderName","holderName","number","cardNumber","code","cvv","brand","expirationDate","AviraCsvImporter","website","secondary_username","BlackBerryCsvImporter","grouping","fav","extra","ChromeCsvImporter","androidPatternRegex","BitwardenCsvImporter","col","addCollection","collectionIndex","folder","reprompt","parseInt","console","delimPosition","lastIndexOf","totp","login_totp","login_username","login_password","login_uri","BitwardenJsonImporter","items","passwordProtected","errorMessage","encrypted","parseEncrypted","parseDecrypted","encKeyValidation_DO_NOT_EDIT","orgKey","getOrgKey","encKeyValidation","decryptToUtf8","groupingsMap","Map","c","view","decrypt","set","folderId","collectionIds","passwordHistory","has","cId","BitwardenPasswordProtectedImporter","parsedData","cannotParseFile","checkPassword","encData","clearTextData","jdoc","makePinKey","salt","kdfType","kdfIterations","kdfMemory","kdfParallelism","BlurCsvImporter","domain","email","OfficialProps","ButtercupCsvImporter","URL","processingCustomFields","prop","hasOwnProperty","ClipperzHtmlImporter","textarea","entry","currentVersion","property","actionType","labelLower","CodebookCsvImporter","Category","Favorite","Entry","Note","Username","Email","Password","TOTP","Website","Phone","PIN","Account","Date","_mappedCredentialsColums","Set","_mappedPersonalInfoAsIdentiyColumns","_mappedSecureNoteColumns","DashlaneCsvImporter","x","parsePersonalInformationRecordAsIdentity","rowKeys","keys","category","parseCredentialsRecord","parsePaymentRecord","parseIdRecord","parsePersonalInformationRecord","parseSecureNoteRecords","otpSecret","importUnmappedFields","account_name","mappedValues","cc_number","expiration_month","expiration_year","account_holder","account_number","licenseNumber","passportNumber","state","ssn","first_name","middle_name","last_name","item_name","dataRow","phone","phone_number","address1","address","city","postalCode","country","item","HandledResults","DashlaneJsonImporter","ADDRESS","processAddress","AUTHENTIFIANT","processAuth","BANKSTATEMENT","processNote","IDCARD","PAYMENTMEANS_CREDITCARD","processCard","IDENTITY","processIdentity","credential","secondaryLogin","obj","pseudo","addressName","addressFull","zipcode","toUpperCase","bank","owner","nameProperty","toString","EncryptrCsvImporter","Label","Notes","Text","CVV","expiry","Expiry","expParts","EnpassCsvImporter","firstRow","containsField","fieldValue","fieldName","fieldNameLower","androidUrlRegex","EnpassJsonImporter","foldersMap","foldersIndexMap","folderTree","buildFolderTree","flattenFolderTree","template_type","processLogin","some","urls","cleanedValue","sensitive","uuid","children","parent_uuid","titlePrefix","tree","FirefoxCsvImporter","FskEntryTypesEnum","FSecureFskImporter","parseEntry","service","Login","handleLoginEntry","CreditCard","handleCreditCardEntry","creditNumber","creditCvv","creditExpiry","GnomeJsonImporter","keyRing","display_name","attributes","username_value","attr","NotesHeader","ApplicationsHeader","WebsitesHeader","Delimiter","KasperskyTxtImporter","notesData","applicationsData","websitesData","workingData","parseDataCategory","applications","websites","n","w","nameKey","p","itemComment","itemCommentKey","l","colonIndex","size","KeePass2XmlImporter","KeePassFileNode","RootNode","rootGroup","traverse","node","isRootNode","groupPrefixName","groupName","nameEl","cipherIndex","entryString","valueEl","keyEl","attrs","ProtectInMemory","KeePassXCsvImporter","Title","Group","KeeperCsvImporter","LastPassCsvImporter","buildBaseCipher","parseSecureNote","parseCard","parseIdentity","ccnum","cardCipher","profilename","firstname","lastname","ccname","cccsc","ccexp","ccexpParts","middlename","company","address2","address3","charAt","extraParts","processedNote","typeParts","mappedData","parseSecureNoteMapping","Number","undefined","monthString","getMonth","isNaN","Company","State","Country","dataObj","processingNotes","extraPart","LogMeOnceCsvImporter","MeldiumCsvImporter","DisplayName","UserName","Url","MSecureCsvImporter","mappedBaseColumns","_mappedUserAccountColumns","_mappedCreditCardColumns","_mappedIdentityColumns","_mappedIdCardColumns","_mappedTwoFaColumns","_mappedUserNoteColumns","MykiCsvImporter","nickname","additionalInfo","twofaSecret","authToken","cardName","exp_month","exp_year","firstAddressLine","secondAddressLine","zipCode","idType","idName","idCountry","idNumber","NordPassCsvImporter","record","recordType","evaluateType","cardholdername","cardnumber","cvc","expirydate","full_name","CategoryEnum","LoginFieldTypeEnum","OnePassword1PifImporter","line","trashed","hmac","processStandardItem","processWinOpVaultItem","overview","URLs","details","parsePasswordHistory","notesPlain","parseFields","sections","section","openContents","faveIndex","typeName","location","secureContents","maxSize","h","time","ph","lastUsedDate","designationKey","valueKey","k","toUTCString","fieldDesignation","street","fieldType","OnePassword1PuxImporter","accounts","vaults","vault","categoryUuid","Database","WirelessRouter","Server","API_Credential","BankAccount","SecureNote","SoftwareLicense","EmailAccount","MedicalRecord","Identity","DriversLicense","OutdoorLicense","Membership","Passport","RewardsProgram","SocialSecurityNumber","favIndex","processOverview","processLoginFields","processDetails","processSections","tags","capitalize","inputString","loginFields","loginField","designation","CheckBox","parseSectionFields","anyField","getFieldName","extractValue","fillLogin","fillApiCredentials","fillCreditCard","fillBankAccount","fillIdentity","fillDriversLicense","fillOutdoorLicense","fillMembership","fillPassport","fillRewardsProgram","fillSSN","email_address","provider","guarded","date","monthYear","historyItems","CipherImportContext","importRecord","lowerProperty","IgnoredProperties","OnePasswordCsvImporter","loginPropertyParsers","setLoginUsername","setLoginPassword","setLoginUris","creditCardPropertyParsers","setCreditCardNumber","setCreditCardVerification","setCreditCardCardholderName","setCreditCardExpiry","identityPropertyParsers","setIdentityFirstName","setIdentityInitial","setIdentityLastName","setIdentityUserName","setIdentityEmail","setIdentityPhone","setIdentityCompany","quoteChar","escapeChar","getProp","setNotes","setCipherType","altUsername","context","setKnownLoginValue","setKnownCreditCardValue","setKnownIdentityValue","setUnknownValue","entries","reduce","agg","getPropByRegexp","regexp","matchingKeys","getPropIncluding","includesMap","includes","func","bind","readableDate","OnePasswordMacCsvImporter","OnePasswordWinCsvImporter","setIdentityAddress","expSplit","PadlockCsvImporter","headers","v","tag","PassKeepCsvImporter","getValue","PasskyJsonImporter","passkyExport","passwords","PassmanJsonImporter","otp","custom_fields","customField","field_type","PasspackCsvImporter","tagsJson","Tags","tagJson","__parsed_extra","fieldsJson","extraFields","fieldJson","PasswordAgentCsvImporter","newVersion","altFormat","PasswordBossJsonImporter","login_url","identifiers","valObj","expDate","getFullYear","cf","PasswordDragonXmlImporter","records","categoryText","accountName","userId","PasswordSafeXmlImporter","passwordSafe","notesDelimiter","getAttribute","groupText","PasswordWalletTxtImporter","PsonoJsonImporter","WEBSITE_mappedValues","APP_PWD_mappedValues","BOOKMARK_mappedValues","NOTES_mappedValues","TOTP_mappedValues","ENV_VARIABLES_mappedValues","GPG_mappedValues","psonoExport","parseFolders","handleItemParsing","parsePsonoItem","parseWebsiteLogins","parseApplicationPasswords","parseEnvironmentVariables","parseTOTP","parseBookmarks","parseNotes","website_password_title","website_password_notes","website_password_username","website_password_password","website_password_url","website_password_auto_submit","website_password_url_filter","application_password_title","application_password_notes","application_password_username","application_password_password","bookmark_title","bookmark_notes","bookmark_url","note_title","note_notes","totp_title","totp_notes","totp_code","environment_variables_title","environment_variables_notes","environment_variables_variables","KvPair","parseGPG","mail_gpg_own_key_title","mail_gpg_own_key_public","mail_gpg_own_key_name","mail_gpg_own_key_email","mail_gpg_own_key_private","RememBearCsvImporter","trash","cardholder","verification","expiryMonth","expMonthNumber","expiryYear","expYearNumber","pin","RoboFormCsvImporter","Folder","Name","Pwd","Rf_fields","SafariCsvImporter","OTPAuth","SafeInCloudXmlImporter","labelEl","cardEl","labelIdEl","labelId","fieldEl","notesEl","setPassword","candidates","choice","SaferPassCsvImporter","SecureSafeCsvImporter","Comment","SplashIdCsvImporter","parseFieldsToNotes","startIndex","StickyPasswordXmlImporter","loginNodes","loginNode","accountId","usernameText","passwordText","linkText","notesText","groupId","accountLogin","account","parentElement","buildGroupText","PropertiesToIgnore","TrueKeyCsvImporter","memo","kind","expiryDate","document_content","UpmCsvImporter","YotiCsvImporter","ZohoVaultCsvImporter","ChamberName","parseData","SecretData","CustomData","ImportService","cipherService","folderService","importApiService","collectionService","getImportOptions","importResult","halfway","Math","floor","last","badData","postImport","errorResponse","handleServerError","getImporterInstance","encrypt","validationErrors","index","itemType"],"sourceRoot":""}