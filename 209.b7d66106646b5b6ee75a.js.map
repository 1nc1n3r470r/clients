{"version":3,"file":"209.b7d66106646b5b6ee75a.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/../../libs/angular/src/auth/components/user-verification-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/components/user-verification-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/components/user-verification-prompt.component.html","webpack://@bitwarden/web-vault/../../libs/angular/src/components/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/file-password-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/file-password-prompt.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/components/export-scope-callout.component.html","webpack://@bitwarden/web-vault/../../libs/angular/src/components/export-scope-callout.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/directives/box-row.directive.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-error.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import-api.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import-api.service.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/common/src/admin-console/models/request/collection-with-id.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-organization-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/kvp.request.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-result.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/base-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/ascendo-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avast/avast-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avast/avast-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avira-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/blackberry-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/chrome-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-password-protected-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/blur-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/buttercup-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/clipperz-html-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/codebook-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/dashlane/dashlane-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/dashlane/dashlane-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/encryptr-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/enpass/enpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/enpass/enpass-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/firefox-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/fsecure/fsecure-fsk-types.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/fsecure/fsecure-fsk-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/gnome-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/kaspersky-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keepass2-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keepassx-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keeper/keeper-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/logmeonce-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/meldium-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/msecure-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/myki-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/nordpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/types/onepassword-1pux-importer-types.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-1pif-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-1pux-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/cipher-import-context.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-mac-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-win-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/padlock-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passkeep-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passky/passky-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passman-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passpack-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordagent-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordboss-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passworddragon-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordsafe-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordwallet-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/psono/psono-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/remembear-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/roboform-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/safari-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/safeincloud-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/saferpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/securesafe-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/splashid-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/stickypassword-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/truekey-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/upm-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/yoti-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/zohovault-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-options.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import.service.ts"],"sourcesContent":["import { Directive } from \"@angular/core\";\nimport { FormBuilder, FormControl } from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\n\nimport { ModalRef } from \"../../components/modal/modal.ref\";\nimport { ModalConfig } from \"../../services/modal.service\";\n\n/**\n * Used to verify the user's identity (using their master password or email-based OTP for Key Connector users). You can customize all of the text in the modal.\n */\n@Directive()\nexport class UserVerificationPromptComponent {\n  confirmDescription = this.config.data.confirmDescription;\n  confirmButtonText = this.config.data.confirmButtonText;\n  modalTitle = this.config.data.modalTitle;\n  secret = new FormControl();\n\n  constructor(\n    private modalRef: ModalRef,\n    protected config: ModalConfig,\n    protected userVerificationService: UserVerificationService,\n    private formBuilder: FormBuilder,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  async submit() {\n    try {\n      //Incorrect secret will throw an invalid password error.\n      await this.userVerificationService.verifyUser(this.secret.value);\n    } catch (e) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"error\"),\n        this.i18nService.t(\"invalidMasterPassword\")\n      );\n      return;\n    }\n\n    this.modalRef.close(true);\n  }\n}\n","import { Component } from \"@angular/core\";\n\nimport { UserVerificationPromptComponent as BaseUserVerificationPrompt } from \"@bitwarden/angular/auth/components/user-verification-prompt.component\";\n\n@Component({\n  templateUrl: \"user-verification-prompt.component.html\",\n})\nexport class UserVerificationPromptComponent extends BaseUserVerificationPrompt {}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable @angular-eslint/template/button-has-type -->\n<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"confirmUserTitle\">\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form class=\"modal-content\" #form (ngSubmit)=\"submit()\">\n      <h2 class=\"tw-my-6 tw-px-3.5 tw-font-semibold\" id=\"modalTitle | i18n \">\n        {{ modalTitle | i18n | uppercase }}\n      </h2>\n      <div class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-p-3.5\">\n        {{ confirmDescription | i18n }}\n      </div>\n      <div class=\"tw-p-3.5\">\n        <app-user-verification ngDefaultControl [formControl]=\"secret\" name=\"secret\">\n        </app-user-verification>\n      </div>\n      <div\n        class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-p-3.5\"\n      >\n        <button bitButton buttonType=\"primary\" type=\"submit\" appBlurClick>\n          <span>{{ confirmButtonText | i18n }}</span>\n        </button>\n        <button bitButton buttonType=\"secondary\" data-dismiss=\"modal\">\n          {{ \"cancel\" | i18n }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { Directive, EventEmitter, OnDestroy, OnInit, Output } from \"@angular/core\";\nimport { UntypedFormBuilder, Validators } from \"@angular/forms\";\nimport { merge, takeUntil, Subject, startWith } from \"rxjs\";\n\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { ExportService } from \"@bitwarden/common/abstractions/export.service\";\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { EncryptedExportType, EventType } from \"@bitwarden/common/enums\";\n\n@Directive()\nexport class ExportComponent implements OnInit, OnDestroy {\n  @Output() onSaved = new EventEmitter();\n\n  formPromise: Promise<string>;\n  disabledByPolicy = false;\n\n  exportForm = this.formBuilder.group({\n    format: [\"json\"],\n    secret: [\"\"],\n    filePassword: [\"\", Validators.required],\n    confirmFilePassword: [\"\", Validators.required],\n    fileEncryptionType: [EncryptedExportType.AccountEncrypted],\n  });\n\n  formatOptions = [\n    { name: \".json\", value: \"json\" },\n    { name: \".csv\", value: \"csv\" },\n    { name: \".json (Encrypted)\", value: \"encrypted_json\" },\n  ];\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected exportService: ExportService,\n    protected eventCollectionService: EventCollectionService,\n    private policyService: PolicyService,\n    protected win: Window,\n    private logService: LogService,\n    private userVerificationService: UserVerificationService,\n    private formBuilder: UntypedFormBuilder,\n    protected fileDownloadService: FileDownloadService\n  ) {}\n\n  async ngOnInit() {\n    this.policyService\n      .policyAppliesToActiveUser$(PolicyType.DisablePersonalVaultExport)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((policyAppliesToActiveUser) => {\n        this.disabledByPolicy = policyAppliesToActiveUser;\n      });\n\n    await this.checkExportDisabled();\n\n    merge(\n      this.exportForm.get(\"format\").valueChanges,\n      this.exportForm.get(\"fileEncryptionType\").valueChanges\n    )\n      .pipe(takeUntil(this.destroy$))\n      .pipe(startWith(0))\n      .subscribe(() => this.adjustValidators());\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n  }\n\n  async checkExportDisabled() {\n    if (this.disabledByPolicy) {\n      this.exportForm.disable();\n    }\n  }\n\n  get encryptedFormat() {\n    return this.format === \"encrypted_json\";\n  }\n\n  protected async doExport() {\n    try {\n      this.formPromise = this.getExportData();\n      const data = await this.formPromise;\n      this.downloadFile(data);\n      this.saved();\n      await this.collectEvent();\n      this.exportForm.get(\"secret\").setValue(\"\");\n      this.exportForm.clearValidators();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async submit() {\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const acceptedWarning = await this.warningDialog();\n    if (!acceptedWarning) {\n      return;\n    }\n    const secret = this.exportForm.get(\"secret\").value;\n\n    try {\n      await this.userVerificationService.verifyUser(secret);\n    } catch (e) {\n      this.platformUtilsService.showToast(\"error\", this.i18nService.t(\"errorOccurred\"), e.message);\n      return;\n    }\n\n    this.doExport();\n  }\n\n  async warningDialog() {\n    if (this.encryptedFormat) {\n      return await this.platformUtilsService.showDialog(\n        \"<p>\" +\n          this.i18nService.t(\"encExportKeyWarningDesc\") +\n          \"<p>\" +\n          this.i18nService.t(\"encExportAccountWarningDesc\"),\n        this.i18nService.t(\"confirmVaultExport\"),\n        this.i18nService.t(\"exportVault\"),\n        this.i18nService.t(\"cancel\"),\n        \"warning\",\n        true\n      );\n    } else {\n      return await this.platformUtilsService.showDialog(\n        this.i18nService.t(\"exportWarningDesc\"),\n        this.i18nService.t(\"confirmVaultExport\"),\n        this.i18nService.t(\"exportVault\"),\n        this.i18nService.t(\"cancel\"),\n        \"warning\"\n      );\n    }\n  }\n\n  protected saved() {\n    this.onSaved.emit();\n  }\n\n  protected getExportData() {\n    if (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    ) {\n      return this.exportService.getPasswordProtectedExport(this.filePassword);\n    } else {\n      return this.exportService.getExport(this.format, null);\n    }\n  }\n\n  protected getFileName(prefix?: string) {\n    let extension = this.format;\n    if (this.format === \"encrypted_json\") {\n      if (prefix == null) {\n        prefix = \"encrypted\";\n      } else {\n        prefix = \"encrypted_\" + prefix;\n      }\n      extension = \"json\";\n    }\n    return this.exportService.getFileName(prefix, extension);\n  }\n\n  protected async collectEvent(): Promise<void> {\n    await this.eventCollectionService.collect(EventType.User_ClientExportedVault);\n  }\n\n  get format() {\n    return this.exportForm.get(\"format\").value;\n  }\n\n  get filePassword() {\n    return this.exportForm.get(\"filePassword\").value;\n  }\n\n  get confirmFilePassword() {\n    return this.exportForm.get(\"confirmFilePassword\").value;\n  }\n\n  get fileEncryptionType() {\n    return this.exportForm.get(\"fileEncryptionType\").value;\n  }\n\n  adjustValidators() {\n    this.exportForm.get(\"confirmFilePassword\").reset();\n    this.exportForm.get(\"filePassword\").reset();\n\n    if (this.encryptedFormat && this.fileEncryptionType == EncryptedExportType.FileEncrypted) {\n      this.exportForm.controls.filePassword.enable();\n      this.exportForm.controls.confirmFilePassword.enable();\n    } else {\n      this.exportForm.controls.filePassword.disable();\n      this.exportForm.controls.confirmFilePassword.disable();\n    }\n  }\n\n  private downloadFile(csv: string): void {\n    const fileName = this.getFileName();\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: csv,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable tailwindcss/no-custom-classname -->\n<form\n  #form\n  (ngSubmit)=\"submit()\"\n  [appApiAction]=\"formPromise\"\n  [formGroup]=\"exportForm\"\n  *ngIf=\"exportForm\"\n>\n  <div class=\"page-header\">\n    <h1>{{ \"exportVault\" | i18n }}</h1>\n  </div>\n\n  <app-callout type=\"error\" title=\"{{ 'vaultExportDisabled' | i18n }}\" *ngIf=\"disabledByPolicy\">\n    {{ \"personalVaultExportPolicyInEffect\" | i18n }}\n  </app-callout>\n  <app-export-scope-callout\n    [organizationId]=\"organizationId\"\n    *ngIf=\"!disabledByPolicy\"\n  ></app-export-scope-callout>\n\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <bit-form-field>\n        <bit-label class=\"tw-text-lg\" for=\"format\">{{ \"fileFormat\" | i18n }}</bit-label>\n        <select bitInput name=\"format\" formControlName=\"format\">\n          <option *ngFor=\"let f of formatOptions\" [value]=\"f.value\">{{ f.name }}</option>\n        </select>\n      </bit-form-field>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"form-group col-6\">\n      <ng-container *ngIf=\"format === 'encrypted_json'\">\n        <div role=\"radiogroup\" aria-labelledby=\"exportTypeHeading\">\n          <label id=\"exportTypeHeading\" class=\"tw-semi-bold tw-text-lg\">\n            {{ \"exportTypeHeading\" | i18n }}\n          </label>\n\n          <div appBoxRow name=\"FileTypeOptions\" class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"AccountEncrypted\"\n                [value]=\"encryptedExportType.AccountEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.AccountEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"AccountEncrypted\">\n                {{ \"accountRestricted\" | i18n }}\n              </label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 pb-2 tw-text-sm\">\n            {{ \"accountRestrictedOptionDescription\" | i18n }}\n          </div>\n\n          <div class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"FileEncrypted\"\n                [value]=\"encryptedExportType.FileEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.FileEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"FileEncrypted\">{{\n                \"passwordProtected\" | i18n\n              }}</label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 tw-text-sm\">\n            {{ \"passwordProtectedOptionDescription\" | i18n }}\n          </div>\n        </div>\n        <br />\n\n        <ng-container *ngIf=\"fileEncryptionType == encryptedExportType.FileEncrypted\">\n          <bit-form-field>\n            <bit-label>{{ \"filePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"filePassword\"\n              formControlName=\"filePassword\"\n              name=\"password\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n            <bit-hint>{{ \"exportPasswordDescription\" | i18n }}</bit-hint>\n          </bit-form-field>\n          <bit-form-field>\n            <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"confirmFilePassword\"\n              formControlName=\"confirmFilePassword\"\n              name=\"confirmFilePassword\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n          </bit-form-field>\n        </ng-container>\n      </ng-container>\n\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary btn-submit\"\n        [disabled]=\"form.loading || disabledByPolicy\"\n        [ngClass]=\"{ manual: disabledByPolicy }\"\n      >\n        <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n        <span>{{ \"confirmFormat\" | i18n }}</span>\n      </button>\n    </div>\n  </div>\n</form>\n","import { Component } from \"@angular/core\";\nimport { UntypedFormBuilder } from \"@angular/forms\";\n\nimport { ExportComponent as BaseExportComponent } from \"@bitwarden/angular/components/export.component\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { ExportService } from \"@bitwarden/common/abstractions/export.service\";\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { EncryptedExportType } from \"@bitwarden/common/enums\";\n\nimport { UserVerificationPromptComponent } from \"../../components/user-verification-prompt.component\";\n\n@Component({\n  selector: \"app-export\",\n  templateUrl: \"export.component.html\",\n})\nexport class ExportComponent extends BaseExportComponent {\n  organizationId: string;\n  encryptedExportType = EncryptedExportType;\n  protected showFilePassword: boolean;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    platformUtilsService: PlatformUtilsService,\n    exportService: ExportService,\n    eventCollectionService: EventCollectionService,\n    policyService: PolicyService,\n    logService: LogService,\n    userVerificationService: UserVerificationService,\n    formBuilder: UntypedFormBuilder,\n    fileDownloadService: FileDownloadService,\n    private modalService: ModalService\n  ) {\n    super(\n      cryptoService,\n      i18nService,\n      platformUtilsService,\n      exportService,\n      eventCollectionService,\n      policyService,\n      window,\n      logService,\n      userVerificationService,\n      formBuilder,\n      fileDownloadService\n    );\n  }\n\n  async submit() {\n    if (this.isFileEncryptedExport && this.filePassword != this.confirmFilePassword) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"filePasswordAndConfirmFilePasswordDoNotMatch\")\n      );\n      return;\n    }\n\n    this.exportForm.markAllAsTouched();\n    if (!this.exportForm.valid) {\n      return;\n    }\n\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    this.doExport();\n  }\n\n  protected saved() {\n    super.saved();\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"exportSuccess\"));\n  }\n\n  private verifyUser() {\n    let confirmDescription = \"exportWarningDesc\";\n    if (this.isFileEncryptedExport) {\n      confirmDescription = \"fileEncryptedExportWarningDesc\";\n    } else if (this.isAccountEncryptedExport) {\n      confirmDescription = \"encExportKeyWarningDesc\";\n    }\n\n    const ref = this.modalService.open(UserVerificationPromptComponent, {\n      allowMultipleModals: true,\n      data: {\n        confirmDescription: confirmDescription,\n        confirmButtonText: \"exportVault\",\n        modalTitle: \"confirmVaultExport\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return ref.onClosedPromise();\n  }\n\n  get isFileEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    );\n  }\n\n  get isAccountEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.AccountEncrypted\n    );\n  }\n}\n","import { Component } from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\n\nimport { ModalRef } from \"@bitwarden/angular/components/modal/modal.ref\";\n\n@Component({\n  templateUrl: \"file-password-prompt.component.html\",\n})\nexport class FilePasswordPromptComponent {\n  filePassword = new FormControl(\"\", Validators.required);\n\n  constructor(private modalRef: ModalRef) {}\n\n  submit() {\n    this.filePassword.markAsTouched();\n    if (!this.filePassword.valid) {\n      return;\n    }\n\n    this.modalRef.close(this.filePassword.value);\n  }\n\n  cancel() {\n    this.modalRef.close(null);\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable tailwindcss/no-custom-classname -->\n<div\n  class=\"modal fade\"\n  role=\"dialog\"\n  aria-modal=\"true\"\n  [attr.aria-labelledby]=\"'confirmVaultImport' | i18n\"\n>\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form #form (ngSubmit)=\"submit()\">\n      <div class=\"form-group modal-content\">\n        <h2 class=\"tw-my-6 tw-ml-3.5 tw-font-semibold\" id=\"confirmVaultImport\">\n          {{ \"confirmVaultImport\" | i18n | uppercase }}\n        </h2>\n        <div\n          class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-px-3.5 tw-pt-3.5\"\n        >\n          {{ \"confirmVaultImportDesc\" | i18n }}\n          <bit-form-field class=\"tw-pt-3.5\">\n            <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              name=\"filePassword\"\n              [formControl]=\"filePassword\"\n              appAutofocus\n              appInputVerbatim\n            />\n            <button type=\"button\" bitSuffix bitIconButton bitPasswordInputToggle></button>\n          </bit-form-field>\n        </div>\n        <div\n          class=\"tw-flex tw-w-full tw-flex-wrap tw-items-center tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-px-3.5 tw-pb-3.5 tw-pt-4\"\n        >\n          <button bitButton buttonType=\"primary\" class=\"tw-mr-2\" type=\"submit\" appBlurClick>\n            <span>{{ \"importData\" | i18n }}</span>\n          </button>\n          <button bitButton buttonType=\"secondary\" type=\"button\" (click)=\"cancel()\">\n            <span>{{ \"cancel\" | i18n }}</span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n","<div class=\"page-header\">\n  <h1>{{ \"importData\" | i18n }}</h1>\n</div>\n<app-callout type=\"info\" *ngIf=\"importBlockedByPolicy\">\n  {{ \"personalOwnershipPolicyInEffectImports\" | i18n }}\n</app-callout>\n<form #form (ngSubmit)=\"submit()\" ngNativeValidate>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"form-group\">\n        <label for=\"type\">1. {{ \"selectFormat\" | i18n }}</label>\n        <select\n          id=\"type\"\n          name=\"Format\"\n          [(ngModel)]=\"format\"\n          class=\"form-control\"\n          [disabled]=\"importBlockedByPolicy\"\n          required\n        >\n          <option *ngFor=\"let o of featuredImportOptions\" [ngValue]=\"o.id\">{{ o.name }}</option>\n          <ng-container *ngIf=\"importOptions && importOptions.length\">\n            <option value=\"-\" disabled></option>\n            <option *ngFor=\"let o of importOptions\" [ngValue]=\"o.id\">{{ o.name }}</option>\n          </ng-container>\n        </select>\n      </div>\n    </div>\n  </div>\n  <app-callout type=\"info\" title=\"{{ getFormatInstructionTitle() }}\" *ngIf=\"format\">\n    <ng-container *ngIf=\"format === 'bitwardencsv' || format === 'bitwardenjson'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/export-your-data/\">\n        https://bitwarden.com/help/export-your-data/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'lastpasscsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-lastpass/\">\n        https://bitwarden.com/help/import-from-lastpass/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepassxcsv'\">\n      Using the KeePassX desktop application, navigate to \"Database\" &rarr; \"Export to CSV file\" and\n      save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'aviracsv'\">\n      In the Avira web vault, go to \"Settings\" &rarr; \"My Data\" &rarr; \"Export data\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blurcsv'\">\n      In the Blur web vault, click your username at the top and go to \"Settings\" &rarr; \"Export\n      Data\", then click \"Export CSV\" for your \"Accounts\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safeincloudxml'\">\n      Using the SaveInCloud desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As XML\"\n      and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'padlockcsv'\">\n      Using the Padlock desktop application, click the hamburger icon in the top left corner and\n      navigate to \"Settings\" &rarr; \"Export\" button and save the file \"As CSV\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepass2xml'\">\n      Using the KeePass 2 desktop application, navigate to \"File\" &rarr; \"Export\" and select the\n      \"KeePass XML (2.x)\" option.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'upmcsv'\">\n      Using the Universal Password Manager desktop application, navigate to \"Database\" &rarr;\n      \"Export\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'saferpasscsv'\">\n      Using the SaferPass browser extension, click the hamburger icon in the top left corner and\n      navigate to \"Settings\". Click the \"Export accounts\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'meldiumcsv'\">\n      Using the Meldium web vault, navigate to \"Settings\". Locate the \"Export data\" function and\n      click \"Show me my data\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepercsv'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .csv File\" option. Click\n      \"Export\" to save the CSV file.\n    </ng-container>\n    <!--\n    <ng-container *ngIf=\"format === 'keeperjson'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .json File\" option. Click\n      \"Export\" to save the JSON file.\n    </ng-container>\n    -->\n    <ng-container\n      *ngIf=\"format === 'chromecsv' || format === 'operacsv' || format === 'vivaldicsv'\"\n    >\n      <span *ngIf=\"format !== 'chromecsv'\">\n        The process is exactly the same as importing from Google Chrome.\n      </span>\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-chrome/\">\n        https://bitwarden.com/help/import-from-chrome/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'firefoxcsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-firefox/\">\n        https://bitwarden.com/help/import-from-firefox/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safaricsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-safari/\">\n        https://bitwarden.com/help/import-from-safari/</a\n      >.\n    </ng-container>\n    <ng-container\n      *ngIf=\"\n        format === '1password1pux' ||\n        format === '1password1pif' ||\n        format === '1passwordwincsv' ||\n        format === '1passwordmaccsv'\n      \"\n    >\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-1password/\">\n        https://bitwarden.com/help/import-from-1password/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passworddragonxml'\">\n      Using the Password Dragon desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"To\n      XML\". In the dialog that pops up select \"All Rows\" and check all fields. Click the \"Export\"\n      button and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpasscsv'\">\n      Using the Enpass desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As CSV\".\n      Select \"OK\" to the warning alert and save the CSV file. Note that the importer only supports\n      files exported while Enpass is set to the English language, so adjust your settings\n      accordingly.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpassjson'\">\n      Using the Enpass 6 desktop application, click the menu button and navigate to \"File\" &rarr;\n      \"Export\". Select the \".json\" file format option and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'pwsafexml'\">\n      Using the Password Safe desktop application, navigate to \"File\" &rarr; \"Export To\" &rarr; \"XML\n      format...\" and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanecsv'\">\n      Log in to Dashlane, click on \"My Account\" &rarr; \"Settings\" &rarr; \"Export file\" and select\n      \"Export as a CSV file\". This will download a zip archive containing various CSV files. Unzip\n      the archive and import each CSV file individually.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanejson'\">\n      Dashlane no longer supports the JSON format. Only use this if you have an existing JSON for\n      import. Use the CSV importer when creating new exports.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'msecurecsv'\">\n      Using the mSecure desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"CSV File...\"\n      and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'stickypasswordxml'\">\n      Using the Sticky Password desktop application, navigate to \"Menu\" (top right) &rarr; \"Export\"\n      &rarr; \"Export all\". Select the unencrypted format XML option and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'truekeycsv'\">\n      Using the True Key desktop application, click the gear icon (top right) and then navigate to\n      \"App Settings\". Click the \"Export\" button, enter your password and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'clipperzhtml'\">\n      Log into the Clipperz web application (clipperz.is/app). Click the hamburger menu icon in the\n      top right to expand the navigation bar. Navigate to \"Data\" &rarr; \"Export\". Click the\n      \"download HTML+JSON\" button to save the HTML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'roboformcsv'\">\n      Using the RoboForm Editor desktop application, navigate to \"RoboForm\" (top left) &rarr;\n      \"Options\" &rarr; \"Account &amp; Data\" and click the \"Export\" button. Select all of your data,\n      change the \"Format\" to \"CSV file\" and then click the \"Export\" button to save the CSV file.\n      Note: RoboForm only allows you to export Logins. Other items will not be exported.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passboltcsv'\">\n      Log into the Passbolt web vault and navigate to the \"Passwords\" listing. Select all of the\n      passwords you would like to export and click the \"Export\" button at the top of the listing.\n      Choose the \"csv (lastpass)\" export format and click the \"Export\" button.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'ascendocsv'\">\n      Using the Ascendo DataVault desktop application, navigate to \"Tools\" &rarr; \"Export\". In the\n      dialog that pops up, select the \"All Items (DVX, CSV)\" option. Click the \"Ok\" button to save\n      the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordbossjson'\">\n      Using the Password Boss desktop application, navigate to \"File\" &rarr; \"Export data\" &rarr;\n      \"Password Boss JSON - not encrypted\" and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'zohovaultcsv'\">\n      Log into the Zoho web vault (vault.zoho.com). Navigate to \"Tools\" &rarr; \"Export Secrets\".\n      Select \"All Secrets\" and click the \"Zoho Vault Format CSV\" button. Highlight and copy the data\n      from the textarea. Open a text editor like Notepad and paste the data. Save the data from the\n      text editor as\n      <code>zoho_export.csv</code>.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'splashidcsv'\">\n      Using the SplashID Safe desktop application, click on the SplashID blue lock logo in the top\n      right corner. Navigate to \"Export\" &rarr; \"Export as CSV\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkeepcsv'\">\n      Using the PassKeep mobile app, navigate to \"Backup/Restore\". Locate the \"CSV Backup/Restore\"\n      section and click \"Backup to CSV\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'gnomejson'\">\n      Make sure you have python-keyring and python-gnomekeyring installed. Save the\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bit.ly/2GpOMTg\"\n        >GNOME Keyring Import/Export</a\n      >\n      python script to your desktop as <code>pw_helper.py</code>. Open terminal and run\n      <code>chmod +rx Desktop/pw_helper.py</code> and then\n      <code>python Desktop/pw_helper.py export Desktop/my_passwords.json</code>. Then upload the\n      resulting <code>my_passwords.json</code> file here to Bitwarden.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordagentcsv'\">\n      Using the Password Agent desktop application navigate to \"File\" &rarr; \"Export\", select the\n      \"Fields to export\" button and check all of the fields, change the \"Output format\" to \"CSV\",\n      and then click the \"Start\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passpackcsv'\">\n      Log into the Passpack website vault and navigate to \"Settings\" &rarr; \"Export\", then click the\n      \"Download\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passmanjson'\">\n      Open your Passman vault and click on \"Settings\" in the bottom left corner. In the \"Settings\"\n      window switch to the \"Export credentials\" tab and choose \"JSON\" as the export type. Enter your\n      vault's passphrase and click the \"Export\" button to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastcsv'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to CSV file\" option to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastjson'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to JSON file\" option to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'fsecurefsk'\">\n      Open the F-Secure KEY desktop application and navigate to \"Settings\" &rarr; \"Export\n      Passwords\". Select the \"Export\" button, enter your master password, and save the FSK file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'kasperskytxt'\">\n      Open the Kaspersky Password Manager desktop application and navigate to \"Settings\" &rarr;\n      \"Import/Export\". Locate the \"Export to text file\" section and select the \"Export\" button to\n      save the TXT file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'remembearcsv'\">\n      Open the RememBear desktop application and navigate to \"Settings\" &rarr; \"Account\" &rarr;\n      \"Export\". Enter your master password and select the \"Export Anyway\" button to save the CSV\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordwallettxt'\">\n      Open the PasswordWallet desktop application and navigate to \"File\" &rarr; \"Export\" &rarr;\n      \"Visible entries to text file\". Enter your password and select the \"Ok\" button to save the TXT\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'mykicsv'\">\n      Open the Myki desktop browser extension and navigate to \"Advanced\" &rarr; \"Export Accounts\"\n      and then scan the QR code with your mobile device. Various CSV files will then be saved to\n      your computer's downloads folder.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'securesafecsv'\">\n      Export your SecureSafe password safe to a CSV file with a comma delimiter.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'logmeoncecsv'\">\n      Open the LogMeOnce browser extension, then navigate to \"Open Menu\" &rarr; \"Export To\" and\n      select \"CSV File\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blackberrycsv'\">\n      Open the BlackBerry Password Keeper application, then navigate to \"Settings\" &rarr;\n      \"Import/Export\". Select \"Export Passwords\" and follow the instructions on screen to save the\n      unencrypted CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'buttercupcsv'\">\n      Open the Buttercup desktop application and unlock your vault. Right click on your vault's icon\n      and select \"Export\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'codebookcsv'\">\n      Open the Codebook desktop application and log in. Navigate to \"File\" &rarr; \"Export all\", then\n      click \"Yes\" on the dialog and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'encryptrcsv'\">\n      Open the newest version of the Encryptr desktop application and allow all of your data to\n      sync. Once syncing of your data is complete, the download icon in the top right corner will\n      turn pink. Click the download icon and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'yoticsv'\">\n      From the Yoti browser extension, click on \"Settings\", then \"Export Saved Logins\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'psonojson'\">\n      Log in to the Psono web vault, click on the \"Signed in as\"-dropdown, select \"Others\". Go to\n      the \"Export\"-tab and select the json type export and then click on Export.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkyjson'\">\n      Log in to \"https://vault.passky.org\" &rarr; \"Import & Export\" &rarr; \"Export\" in the Passky\n      section. (\"Backup\" is unsupported as it is encrypted).\n    </ng-container>\n  </app-callout>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"form-group\">\n        <label for=\"file\">2. {{ \"selectImportFile\" | i18n }}</label>\n        <br />\n        <div class=\"file-selector\">\n          <button\n            type=\"button\"\n            class=\"btn btn-outline-primary\"\n            (click)=\"fileSelector.click()\"\n            [disabled]=\"importBlockedByPolicy\"\n          >\n            {{ \"chooseFile\" | i18n }}\n          </button>\n          {{ this.fileSelected ? this.fileSelected.name : (\"noFileChosen\" | i18n) }}\n        </div>\n        <input\n          #fileSelector\n          type=\"file\"\n          id=\"file\"\n          class=\"form-control-file\"\n          name=\"file\"\n          (change)=\"setSelectedFile($event)\"\n          hidden\n          [disabled]=\"importBlockedByPolicy\"\n        />\n      </div>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"fileContents\">{{ \"orCopyPasteFileContents\" | i18n }}</label>\n    <textarea\n      id=\"fileContents\"\n      class=\"form-control\"\n      name=\"FileContents\"\n      [(ngModel)]=\"fileContents\"\n      [disabled]=\"importBlockedByPolicy\"\n    ></textarea>\n  </div>\n  <button\n    type=\"submit\"\n    class=\"btn btn-primary btn-submit\"\n    [disabled]=\"loading || importBlockedByPolicy\"\n    [ngClass]=\"{ manual: importBlockedByPolicy }\"\n  >\n    <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n    <span>{{ \"importData\" | i18n }}</span>\n  </button>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport * as JSZip from \"jszip\";\nimport { firstValueFrom } from \"rxjs\";\nimport Swal, { SweetAlertIcon } from \"sweetalert2\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport {\n  ImportOption,\n  ImportType,\n  ImportError,\n  ImportServiceAbstraction,\n} from \"@bitwarden/importer\";\n\nimport { FilePasswordPromptComponent } from \"./file-password-prompt.component\";\n\n@Component({\n  selector: \"app-import\",\n  templateUrl: \"import.component.html\",\n})\nexport class ImportComponent implements OnInit {\n  featuredImportOptions: ImportOption[];\n  importOptions: ImportOption[];\n  format: ImportType = null;\n  fileContents: string;\n  fileSelected: File;\n  formPromise: Promise<ImportError>;\n  loading = false;\n  importBlockedByPolicy = false;\n\n  protected organizationId: string = null;\n  protected successNavigate: any[] = [\"vault\"];\n\n  constructor(\n    protected i18nService: I18nService,\n    protected importService: ImportServiceAbstraction,\n    protected router: Router,\n    protected platformUtilsService: PlatformUtilsService,\n    protected policyService: PolicyService,\n    private logService: LogService,\n    protected modalService: ModalService,\n    protected syncService: SyncService\n  ) {}\n\n  async ngOnInit() {\n    this.setImportOptions();\n\n    this.importBlockedByPolicy = await firstValueFrom(\n      this.policyService.policyAppliesToActiveUser$(PolicyType.PersonalOwnership)\n    );\n  }\n\n  async submit() {\n    if (this.importBlockedByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalOwnershipPolicyInEffectImports\")\n      );\n      return;\n    }\n\n    this.loading = true;\n\n    const importer = this.importService.getImporter(this.format, this.organizationId);\n    if (importer === null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFormat\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    const fileEl = document.getElementById(\"file\") as HTMLInputElement;\n    const files = fileEl.files;\n    if (\n      (files == null || files.length === 0) &&\n      (this.fileContents == null || this.fileContents === \"\")\n    ) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    let fileContents = this.fileContents;\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    try {\n      this.formPromise = this.importService.import(importer, fileContents, this.organizationId);\n      let error = await this.formPromise;\n\n      if (error?.passwordRequired) {\n        const filePassword = await this.getFilePassword();\n        if (filePassword == null) {\n          this.loading = false;\n          return;\n        }\n\n        error = await this.doPasswordProtectedImport(filePassword, fileContents);\n      }\n\n      if (error != null) {\n        this.error(error);\n        this.loading = false;\n        return;\n      }\n\n      //No errors, display success message\n      this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"importSuccess\"));\n      this.syncService.fullSync(true);\n      this.router.navigate(this.successNavigate);\n    } catch (e) {\n      this.logService.error(e);\n    }\n\n    this.loading = false;\n  }\n\n  getFormatInstructionTitle() {\n    if (this.format == null) {\n      return null;\n    }\n\n    const results = this.featuredImportOptions\n      .concat(this.importOptions)\n      .filter((o) => o.id === this.format);\n    if (results.length > 0) {\n      return this.i18nService.t(\"instructionsFor\", results[0].name);\n    }\n    return null;\n  }\n\n  protected setImportOptions() {\n    this.featuredImportOptions = [\n      {\n        id: null,\n        name: \"-- \" + this.i18nService.t(\"select\") + \" --\",\n      },\n      ...this.importService.featuredImportOptions,\n    ];\n    this.importOptions = [...this.importService.regularImportOptions].sort((a, b) => {\n      if (a.name == null && b.name != null) {\n        return -1;\n      }\n      if (a.name != null && b.name == null) {\n        return 1;\n      }\n      if (a.name == null && b.name == null) {\n        return 0;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(a.name, b.name)\n        : a.name.localeCompare(b.name);\n    });\n  }\n\n  setSelectedFile(event: Event) {\n    const fileInputEl = <HTMLInputElement>event.target;\n    this.fileSelected = fileInputEl.files.length > 0 ? fileInputEl.files[0] : null;\n  }\n\n  private async error(error: Error) {\n    await Swal.fire({\n      heightAuto: false,\n      buttonsStyling: false,\n      icon: \"error\" as SweetAlertIcon,\n      iconHtml: `<i class=\"swal-custom-icon bwi bwi-error text-danger\"></i>`,\n      input: \"textarea\",\n      inputValue: error.message,\n      inputAttributes: {\n        readonly: \"true\",\n      },\n      titleText: this.i18nService.t(\"importError\"),\n      text: this.i18nService.t(\"importErrorDesc\"),\n      showConfirmButton: true,\n      confirmButtonText: this.i18nService.t(\"ok\"),\n      onOpen: (popupEl) => {\n        popupEl.querySelector(\".swal2-textarea\").scrollTo(0, 0);\n      },\n    });\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    if (this.format === \"1password1pux\") {\n      return this.extract1PuxContent(file);\n    }\n\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        if (this.format === \"lastpasscsv\" && file.type === \"text/html\") {\n          const parser = new DOMParser();\n          const doc = parser.parseFromString((evt.target as any).result, \"text/html\");\n          const pre = doc.querySelector(\"pre\");\n          if (pre != null) {\n            resolve(pre.textContent);\n            return;\n          }\n          reject();\n          return;\n        }\n\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private extract1PuxContent(file: File): Promise<string> {\n    return new JSZip()\n      .loadAsync(file)\n      .then((zip) => {\n        return zip.file(\"export.data\").async(\"string\");\n      })\n      .then(\n        function success(content) {\n          return content;\n        },\n        function error(e) {\n          return \"\";\n        }\n      );\n  }\n\n  async getFilePassword(): Promise<string> {\n    const ref = this.modalService.open(FilePasswordPromptComponent, {\n      allowMultipleModals: true,\n    });\n\n    if (ref == null) {\n      return null;\n    }\n\n    return await ref.onClosedPromise();\n  }\n\n  async doPasswordProtectedImport(\n    filePassword: string,\n    fileContents: string\n  ): Promise<ImportError> {\n    const passwordProtectedImporter = this.importService.getImporter(\n      \"bitwardenpasswordprotected\",\n      this.organizationId,\n      filePassword\n    );\n\n    return this.importService.import(passwordProtectedImporter, fileContents, this.organizationId);\n  }\n}\n","<ng-container *ngIf=\"show\">\n  <app-callout type=\"info\" title=\"{{ scopeConfig.title | i18n }}\">\n    {{ scopeConfig.description | i18n : scopeConfig.scopeIdentifier }}\n  </app-callout>\n</ng-container>\n","import { Component, Input, OnInit } from \"@angular/core\";\n\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\n\n@Component({\n  selector: \"app-export-scope-callout\",\n  templateUrl: \"export-scope-callout.component.html\",\n})\nexport class ExportScopeCalloutComponent implements OnInit {\n  @Input() organizationId: string = null;\n\n  show = false;\n  scopeConfig: {\n    title: string;\n    description: string;\n    scopeIdentifier: string;\n  };\n\n  constructor(\n    protected organizationService: OrganizationService,\n    protected stateService: StateService\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    if (!this.organizationService.hasOrganizations()) {\n      return;\n    }\n    this.scopeConfig =\n      this.organizationId != null\n        ? {\n            title: \"exportingOrganizationVaultTitle\",\n            description: \"exportingOrganizationVaultDescription\",\n            scopeIdentifier: this.organizationService.get(this.organizationId).name,\n          }\n        : {\n            title: \"exportingPersonalVaultTitle\",\n            description: \"exportingPersonalVaultDescription\",\n            scopeIdentifier: await this.stateService.getEmail(),\n          };\n    this.show = true;\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from \"@angular/core\";\n\n@Directive({\n  selector: \"[appBoxRow]\",\n})\nexport class BoxRowDirective implements OnInit {\n  el: HTMLElement = null;\n  formEls: Element[];\n\n  constructor(elRef: ElementRef) {\n    this.el = elRef.nativeElement;\n  }\n\n  ngOnInit(): void {\n    this.formEls = Array.from(\n      this.el.querySelectorAll('input:not([type=\"hidden\"]), select, textarea')\n    );\n    this.formEls.forEach((formEl) => {\n      formEl.addEventListener(\n        \"focus\",\n        () => {\n          this.el.classList.add(\"active\");\n        },\n        false\n      );\n\n      formEl.addEventListener(\n        \"blur\",\n        () => {\n          this.el.classList.remove(\"active\");\n        },\n        false\n      );\n    });\n  }\n\n  @HostListener(\"click\", [\"$event\"]) onClick(event: Event) {\n    const target = event.target as HTMLElement;\n    if (\n      target !== this.el &&\n      !target.classList.contains(\"progress\") &&\n      !target.classList.contains(\"progress-bar\")\n    ) {\n      return;\n    }\n\n    if (this.formEls.length > 0) {\n      const formEl = this.formEls[0] as HTMLElement;\n      if (formEl.tagName.toLowerCase() === \"input\") {\n        const inputEl = formEl as HTMLInputElement;\n        if (inputEl.type != null && inputEl.type.toLowerCase() === \"checkbox\") {\n          inputEl.click();\n          return;\n        }\n      }\n      formEl.focus();\n    }\n  }\n}\n","export class ImportError extends Error {\n  constructor(message?: string, public passwordRequired: boolean = false) {\n    super(message);\n  }\n}\n","import { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nexport abstract class ImportApiServiceAbstraction {\n  postImportCiphers: (request: ImportCiphersRequest) => Promise<any>;\n  postImportOrganizationCiphers: (\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ) => Promise<any>;\n}\n","import { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nimport { ImportApiServiceAbstraction } from \"./import-api.service.abstraction\";\n\nexport class ImportApiService implements ImportApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  async postImportCiphers(request: ImportCiphersRequest): Promise<any> {\n    return await this.apiService.send(\"POST\", \"/ciphers/import\", request, true, false);\n  }\n\n  async postImportOrganizationCiphers(\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ): Promise<any> {\n    return await this.apiService.send(\n      \"POST\",\n      \"/ciphers/import-organization?organizationId=\" + organizationId,\n      request,\n      true,\n      false\n    );\n  }\n}\n","import { Importer } from \"../importers/importer\";\nimport { ImportError } from \"../models/import-error\";\nimport { ImportOption, ImportType } from \"../models/import-options\";\n\nexport abstract class ImportServiceAbstraction {\n  featuredImportOptions: readonly ImportOption[];\n  regularImportOptions: readonly ImportOption[];\n  getImportOptions: () => ImportOption[];\n  import: (\n    importer: Importer,\n    fileContents: string,\n    organizationId?: string\n  ) => Promise<ImportError>;\n  getImporter: (\n    format: ImportType | \"bitwardenpasswordprotected\",\n    organizationId: string,\n    password?: string\n  ) => Importer;\n}\n","import { Collection } from \"../domain/collection\";\nimport { CollectionRequest } from \"../request/collection.request\";\n\nexport class CollectionWithIdRequest extends CollectionRequest {\n  id: string;\n\n  constructor(collection?: Collection) {\n    if (collection == null) {\n      return;\n    }\n    super(collection);\n    this.id = collection.id;\n  }\n}\n","import { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { FolderWithIdRequest } from \"../../vault/models/request/folder-with-id.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  folders: FolderWithIdRequest[] = [];\n  folderRelationships: KvpRequest<number, number>[] = [];\n}\n","import { CollectionWithIdRequest } from \"../../admin-console/models/request/collection-with-id.request\";\nimport { CipherRequest } from \"../../vault/models/request/cipher.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportOrganizationCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  collections: CollectionWithIdRequest[] = [];\n  collectionRelationships: KvpRequest<number, number>[] = [];\n}\n","export class KvpRequest<TK, TV> {\n  key: TK;\n  value: TV;\n\n  constructor(key: TK, value: TV) {\n    this.key = key;\n    this.value = value;\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nexport class ImportResult {\n  success = false;\n  missingPassword = false;\n  errorMessage: string;\n  ciphers: CipherView[] = [];\n  folders: FolderView[] = [];\n  folderRelationships: [number, number][] = [];\n  collections: CollectionView[] = [];\n  collectionRelationships: [number, number][] = [];\n}\n","import * as papa from \"papaparse\";\n\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\nimport { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { ConsoleLogService } from \"@bitwarden/common/services/consoleLog.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { LoginUriView } from \"@bitwarden/common/vault/models/view/login-uri.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nexport abstract class BaseImporter {\n  organizationId: string = null;\n\n  protected logService: LogService = new ConsoleLogService(false);\n\n  protected newLineRegex = /(?:\\r\\n|\\r|\\n)/;\n\n  protected passwordFieldNames = [\n    \"password\",\n    \"pass word\",\n    \"passphrase\",\n    \"pass phrase\",\n    \"pass\",\n    \"code\",\n    \"code word\",\n    \"codeword\",\n    \"secret\",\n    \"secret word\",\n    \"personpwd\",\n    \"key\",\n    \"keyword\",\n    \"key word\",\n    \"keyphrase\",\n    \"key phrase\",\n    \"form_pw\",\n    \"wppassword\",\n    \"pin\",\n    \"pwd\",\n    \"pw\",\n    \"pword\",\n    \"passwd\",\n    \"p\",\n    \"serial\",\n    \"serial#\",\n    \"license key\",\n    \"reg #\",\n\n    // Non-English names\n    \"passwort\",\n  ];\n\n  protected usernameFieldNames = [\n    \"user\",\n    \"name\",\n    \"user name\",\n    \"username\",\n    \"login name\",\n    \"email\",\n    \"e-mail\",\n    \"id\",\n    \"userid\",\n    \"user id\",\n    \"login\",\n    \"form_loginname\",\n    \"wpname\",\n    \"mail\",\n    \"loginid\",\n    \"login id\",\n    \"log\",\n    \"personlogin\",\n    \"first name\",\n    \"last name\",\n    \"card#\",\n    \"account #\",\n    \"member\",\n    \"member #\",\n\n    // Non-English names\n    \"nom\",\n    \"benutzername\",\n  ];\n\n  protected notesFieldNames = [\n    \"note\",\n    \"notes\",\n    \"comment\",\n    \"comments\",\n    \"memo\",\n    \"description\",\n    \"free form\",\n    \"freeform\",\n    \"free text\",\n    \"freetext\",\n    \"free\",\n\n    // Non-English names\n    \"kommentar\",\n  ];\n\n  protected uriFieldNames: string[] = [\n    \"url\",\n    \"hyper link\",\n    \"hyperlink\",\n    \"link\",\n    \"host\",\n    \"hostname\",\n    \"host name\",\n    \"server\",\n    \"address\",\n    \"hyper ref\",\n    \"href\",\n    \"web\",\n    \"website\",\n    \"web site\",\n    \"site\",\n    \"web-site\",\n    \"uri\",\n\n    // Non-English names\n    \"ort\",\n    \"adresse\",\n  ];\n\n  protected parseCsvOptions = {\n    encoding: \"UTF-8\",\n    skipEmptyLines: false,\n  };\n\n  protected get organization() {\n    return this.organizationId != null;\n  }\n\n  protected parseXml(data: string): Document {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(data, \"application/xml\");\n    return doc != null && doc.querySelector(\"parsererror\") == null ? doc : null;\n  }\n\n  protected parseCsv(data: string, header: boolean, options: any = {}): any[] {\n    const parseOptions: papa.ParseConfig<string> = Object.assign(\n      { header: header },\n      this.parseCsvOptions,\n      options\n    );\n    data = this.splitNewLine(data).join(\"\\n\").trim();\n    const result = papa.parse(data, parseOptions);\n    if (result.errors != null && result.errors.length > 0) {\n      result.errors.forEach((e) => {\n        if (e.row != null) {\n          this.logService.warning(\"Error parsing row \" + e.row + \": \" + e.message);\n        }\n      });\n    }\n    return result.data && result.data.length > 0 ? result.data : null;\n  }\n\n  protected parseSingleRowCsv(rowData: string) {\n    if (this.isNullOrWhitespace(rowData)) {\n      return null;\n    }\n    const parsedRow = this.parseCsv(rowData, false);\n    if (parsedRow != null && parsedRow.length > 0 && parsedRow[0].length > 0) {\n      return parsedRow[0];\n    }\n    return null;\n  }\n\n  protected makeUriArray(uri: string | string[]): LoginUriView[] {\n    if (uri == null) {\n      return null;\n    }\n\n    if (typeof uri === \"string\") {\n      const loginUri = new LoginUriView();\n      loginUri.uri = this.fixUri(uri);\n      if (this.isNullOrWhitespace(loginUri.uri)) {\n        return null;\n      }\n      loginUri.match = null;\n      return [loginUri];\n    }\n\n    if (uri.length > 0) {\n      const returnArr: LoginUriView[] = [];\n      uri.forEach((u) => {\n        const loginUri = new LoginUriView();\n        loginUri.uri = this.fixUri(u);\n        if (this.isNullOrWhitespace(loginUri.uri)) {\n          return;\n        }\n        loginUri.match = null;\n        returnArr.push(loginUri);\n      });\n      return returnArr.length === 0 ? null : returnArr;\n    }\n\n    return null;\n  }\n\n  protected fixUri(uri: string) {\n    if (uri == null) {\n      return null;\n    }\n    uri = uri.trim();\n    if (uri.indexOf(\"://\") === -1 && uri.indexOf(\".\") >= 0) {\n      uri = \"http://\" + uri;\n    }\n    if (uri.length > 1000) {\n      return uri.substring(0, 1000);\n    }\n    return uri;\n  }\n\n  protected nameFromUrl(url: string) {\n    const hostname = Utils.getHostname(url);\n    if (this.isNullOrWhitespace(hostname)) {\n      return null;\n    }\n    return hostname.startsWith(\"www.\") ? hostname.replace(\"www.\", \"\") : hostname;\n  }\n\n  protected isNullOrWhitespace(str: string): boolean {\n    return Utils.isNullOrWhitespace(str);\n  }\n\n  protected getValueOrDefault(str: string, defaultValue: string = null): string {\n    if (this.isNullOrWhitespace(str)) {\n      return defaultValue;\n    }\n    return str;\n  }\n\n  protected splitNewLine(str: string): string[] {\n    return str.split(this.newLineRegex);\n  }\n\n  // ref https://stackoverflow.com/a/5911300\n  protected getCardBrand(cardNum: string) {\n    if (this.isNullOrWhitespace(cardNum)) {\n      return null;\n    }\n\n    // Visa\n    let re = new RegExp(\"^4\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    // Mastercard\n    // Updated for Mastercard 2017 BINs expansion\n    if (\n      /^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$/.test(\n        cardNum\n      )\n    ) {\n      return \"Mastercard\";\n    }\n\n    // AMEX\n    re = new RegExp(\"^3[47]\");\n    if (cardNum.match(re) != null) {\n      return \"Amex\";\n    }\n\n    // Discover\n    re = new RegExp(\n      \"^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)\"\n    );\n    if (cardNum.match(re) != null) {\n      return \"Discover\";\n    }\n\n    // Diners\n    re = new RegExp(\"^36\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // Diners - Carte Blanche\n    re = new RegExp(\"^30[0-5]\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // JCB\n    re = new RegExp(\"^35(2[89]|[3-8][0-9])\");\n    if (cardNum.match(re) != null) {\n      return \"JCB\";\n    }\n\n    // Visa Electron\n    re = new RegExp(\"^(4026|417500|4508|4844|491(3|7))\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    return null;\n  }\n\n  protected setCardExpiration(cipher: CipherView, expiration: string): boolean {\n    if (!this.isNullOrWhitespace(expiration)) {\n      expiration = expiration.replace(/\\s/g, \"\");\n      const parts = expiration.split(\"/\");\n      if (parts.length === 2) {\n        let month: string = null;\n        let year: string = null;\n        if (parts[0].length === 1 || parts[0].length === 2) {\n          month = parts[0];\n          if (month.length === 2 && month[0] === \"0\") {\n            month = month.substr(1, 1);\n          }\n        }\n        if (parts[1].length === 2 || parts[1].length === 4) {\n          year = month.length === 2 ? \"20\" + parts[1] : parts[1];\n        }\n        if (month != null && year != null) {\n          cipher.card.expMonth = month;\n          cipher.card.expYear = year;\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  protected moveFoldersToCollections(result: ImportResult) {\n    result.folderRelationships.forEach((r) => result.collectionRelationships.push(r));\n    result.collections = result.folders.map((f) => {\n      const collection = new CollectionView();\n      collection.name = f.name;\n      collection.id = f.id;\n      return collection;\n    });\n    result.folderRelationships = [];\n    result.folders = [];\n  }\n\n  protected querySelectorDirectChild(parentEl: Element, query: string) {\n    const els = this.querySelectorAllDirectChild(parentEl, query);\n    return els.length === 0 ? null : els[0];\n  }\n\n  protected querySelectorAllDirectChild(parentEl: Element, query: string) {\n    return Array.from(parentEl.querySelectorAll(query)).filter((el) => el.parentNode === parentEl);\n  }\n\n  protected initLoginCipher() {\n    const cipher = new CipherView();\n    cipher.favorite = false;\n    cipher.notes = \"\";\n    cipher.fields = [];\n    cipher.login = new LoginView();\n    cipher.type = CipherType.Login;\n    return cipher;\n  }\n\n  protected cleanupCipher(cipher: CipherView) {\n    if (cipher == null) {\n      return;\n    }\n    if (cipher.type !== CipherType.Login) {\n      cipher.login = null;\n    }\n    if (this.isNullOrWhitespace(cipher.name)) {\n      cipher.name = \"--\";\n    }\n    if (this.isNullOrWhitespace(cipher.notes)) {\n      cipher.notes = null;\n    } else {\n      cipher.notes = cipher.notes.trim();\n    }\n    if (cipher.fields != null && cipher.fields.length === 0) {\n      cipher.fields = null;\n    }\n  }\n\n  protected processKvp(\n    cipher: CipherView,\n    key: string,\n    value: string,\n    type: FieldType = FieldType.Text\n  ) {\n    if (this.isNullOrWhitespace(value)) {\n      return;\n    }\n    if (this.isNullOrWhitespace(key)) {\n      key = \"\";\n    }\n    if (value.length > 200 || value.trim().search(this.newLineRegex) > -1) {\n      if (cipher.notes == null) {\n        cipher.notes = \"\";\n      }\n      cipher.notes += key + \": \" + this.splitNewLine(value).join(\"\\n\") + \"\\n\";\n    } else {\n      if (cipher.fields == null) {\n        cipher.fields = [];\n      }\n      const field = new FieldView();\n      field.type = type;\n      field.name = key;\n      field.value = value;\n      cipher.fields.push(field);\n    }\n  }\n\n  protected processFolder(result: ImportResult, folderName: string) {\n    let folderIndex = result.folders.length;\n    const hasFolder = !this.isNullOrWhitespace(folderName);\n    // Replace backslashes with forward slashes, ensuring we create sub-folders\n    folderName = folderName.replace(\"\\\\\", \"/\");\n    let addFolder = hasFolder;\n\n    if (hasFolder) {\n      for (let i = 0; i < result.folders.length; i++) {\n        if (result.folders[i].name === folderName) {\n          addFolder = false;\n          folderIndex = i;\n          break;\n        }\n      }\n    }\n\n    if (addFolder) {\n      const f = new FolderView();\n      f.name = folderName;\n      result.folders.push(f);\n    }\n    if (hasFolder) {\n      result.folderRelationships.push([result.ciphers.length, folderIndex]);\n    }\n  }\n\n  protected convertToNoteIfNeeded(cipher: CipherView) {\n    if (\n      cipher.type === CipherType.Login &&\n      this.isNullOrWhitespace(cipher.login.username) &&\n      this.isNullOrWhitespace(cipher.login.password) &&\n      (cipher.login.uris == null || cipher.login.uris.length === 0)\n    ) {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    }\n  }\n\n  protected processFullName(cipher: CipherView, fullName: string) {\n    if (this.isNullOrWhitespace(fullName)) {\n      return;\n    }\n\n    const nameParts = fullName.split(\" \");\n    if (nameParts.length > 0) {\n      cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n    }\n    if (nameParts.length === 2) {\n      cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n    } else if (nameParts.length >= 3) {\n      cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n      cipher.identity.lastName = nameParts.slice(2, nameParts.length).join(\" \");\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AscendoCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 2) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const val: string = value[i + 2];\n          const field: string = value[i + 1];\n          if (this.isNullOrWhitespace(val) || this.isNullOrWhitespace(field)) {\n            continue;\n          }\n\n          const fieldLower = field.toLowerCase();\n          if (cipher.login.password == null && this.passwordFieldNames.indexOf(fieldLower) > -1) {\n            cipher.login.password = this.getValueOrDefault(val);\n          } else if (\n            cipher.login.username == null &&\n            this.usernameFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.username = this.getValueOrDefault(val);\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n          } else {\n            this.processKvp(cipher, field, val);\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.login.uris = this.makeUriArray(value.web);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.username = this.getValueOrDefault(value.login);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.logins != null) {\n      results.logins.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.pwd);\n        cipher.login.username = this.getValueOrDefault(value.loginName);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.notes != null) {\n      results.notes.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.name = this.getValueOrDefault(value.label);\n        cipher.notes = this.getValueOrDefault(value.text);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.cards != null) {\n      results.cards.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Card;\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.card.cardholderName = this.getValueOrDefault(value.holderName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        if (value.expirationDate != null) {\n          if (value.expirationDate.month != null) {\n            cipher.card.expMonth = value.expirationDate.month + \"\";\n          }\n          if (value.expirationDate.year != null) {\n            cipher.card.expYear = value.expirationDate.year + \"\";\n          }\n        }\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AviraCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.name,\n        this.getValueOrDefault(this.nameFromUrl(value.website), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.website);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (\n        this.isNullOrWhitespace(value.username) &&\n        !this.isNullOrWhitespace(value.secondary_username)\n      ) {\n        cipher.login.username = value.secondary_username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.notes = this.getValueOrDefault(value.secondary_username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlackBerryCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.grouping === \"list\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.favorite = value.fav === \"1\";\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.extra);\n      if (value.grouping !== \"note\") {\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ChromeCsvImporter extends BaseImporter implements Importer {\n  private androidPatternRegex = new RegExp(\"^android:\\\\/\\\\/.*(?<=@)(.*)(?=\\\\/)\");\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      let name = value.name;\n      if (!name && this.androidPatternRegex.test(value.url)) {\n        name = value.url.match(this.androidPatternRegex)[1];\n      }\n      cipher.name = this.getValueOrDefault(name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\nimport { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.organization && !this.isNullOrWhitespace(value.collections)) {\n        const collections = (value.collections as string).split(\",\");\n        collections.forEach((col) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === col) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = col;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization) {\n        this.processFolder(result, value.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.favorite =\n        !this.organization && this.getValueOrDefault(value.favorite, \"0\") !== \"0\" ? true : false;\n      cipher.type = CipherType.Login;\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      try {\n        cipher.reprompt = parseInt(\n          this.getValueOrDefault(value.reprompt, CipherRepromptType.None.toString()),\n          10\n        );\n      } catch (e) {\n        // eslint-disable-next-line\n        console.error(\"Unable to parse reprompt value\", e);\n        cipher.reprompt = CipherRepromptType.None;\n      }\n\n      if (!this.isNullOrWhitespace(value.fields)) {\n        const fields = this.splitNewLine(value.fields);\n        for (let i = 0; i < fields.length; i++) {\n          if (this.isNullOrWhitespace(fields[i])) {\n            continue;\n          }\n\n          const delimPosition = fields[i].lastIndexOf(\": \");\n          if (delimPosition === -1) {\n            continue;\n          }\n\n          if (cipher.fields == null) {\n            cipher.fields = [];\n          }\n\n          const field = new FieldView();\n          field.name = fields[i].substr(0, delimPosition);\n          field.value = null;\n          field.type = FieldType.Text;\n          if (fields[i].length > delimPosition + 2) {\n            field.value = fields[i].substr(delimPosition + 2);\n          }\n          cipher.fields.push(field);\n        }\n      }\n\n      const valueType = value.type != null ? value.type.toLowerCase() : null;\n      switch (valueType) {\n        case \"note\":\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote = new SecureNoteView();\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default: {\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.totp = this.getValueOrDefault(value.login_totp || value.totp);\n          cipher.login.username = this.getValueOrDefault(value.login_username || value.username);\n          cipher.login.password = this.getValueOrDefault(value.login_password || value.password);\n          const uris = this.parseSingleRowCsv(value.login_uri || value.uri);\n          cipher.login.uris = this.makeUriArray(uris);\n          break;\n        }\n      }\n\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { CipherWithIdExport } from \"@bitwarden/common/models/export/cipher-with-ids.export\";\nimport { CollectionWithIdExport } from \"@bitwarden/common/models/export/collection-with-id.export\";\nimport { FolderWithIdExport } from \"@bitwarden/common/models/export/folder-with-id.export\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenJsonImporter extends BaseImporter implements Importer {\n  private results: any;\n  private result: ImportResult;\n\n  constructor(protected cryptoService: CryptoService, protected i18nService: I18nService) {\n    super();\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    this.results = JSON.parse(data);\n    if (this.results == null || this.results.items == null) {\n      if (this.results?.passwordProtected) {\n        this.result.success = false;\n        this.result.missingPassword = true;\n        this.result.errorMessage = this.i18nService.t(\"importPasswordRequired\");\n        return this.result;\n      }\n\n      this.result.success = false;\n      return this.result;\n    }\n\n    if (this.results.encrypted) {\n      await this.parseEncrypted();\n    } else {\n      this.parseDecrypted();\n    }\n\n    return this.result;\n  }\n\n  private async parseEncrypted() {\n    if (this.results.encKeyValidation_DO_NOT_EDIT != null) {\n      const orgKey = await this.cryptoService.getOrgKey(this.organizationId);\n      const encKeyValidation = new EncString(this.results.encKeyValidation_DO_NOT_EDIT);\n      const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n        encKeyValidation,\n        orgKey\n      );\n      if (encKeyValidationDecrypt === null) {\n        this.result.success = false;\n        this.result.errorMessage = this.i18nService.t(\"importEncKeyError\");\n        return;\n      }\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    if (this.organization && this.results.collections != null) {\n      for (const c of this.results.collections as CollectionWithIdExport[]) {\n        const collection = CollectionWithIdExport.toDomain(c);\n        if (collection != null) {\n          collection.organizationId = this.organizationId;\n          const view = await collection.decrypt();\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(view);\n        }\n      }\n    } else if (!this.organization && this.results.folders != null) {\n      for (const f of this.results.folders as FolderWithIdExport[]) {\n        const folder = FolderWithIdExport.toDomain(f);\n        if (folder != null) {\n          const view = await folder.decrypt();\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(view);\n        }\n      }\n    }\n\n    for (const c of this.results.items as CipherWithIdExport[]) {\n      const cipher = CipherWithIdExport.toDomain(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = this.organizationId;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      const view = await cipher.decrypt();\n      this.cleanupCipher(view);\n      this.result.ciphers.push(view);\n    }\n\n    this.result.success = true;\n  }\n\n  private parseDecrypted() {\n    const groupingsMap = new Map<string, number>();\n    if (this.organization && this.results.collections != null) {\n      this.results.collections.forEach((c: CollectionWithIdExport) => {\n        const collection = CollectionWithIdExport.toView(c);\n        if (collection != null) {\n          collection.organizationId = null;\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(collection);\n        }\n      });\n    } else if (!this.organization && this.results.folders != null) {\n      this.results.folders.forEach((f: FolderWithIdExport) => {\n        const folder = FolderWithIdExport.toView(f);\n        if (folder != null) {\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(folder);\n        }\n      });\n    }\n\n    this.results.items.forEach((c: CipherWithIdExport) => {\n      const cipher = CipherWithIdExport.toView(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = null;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n  }\n}\n","import { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { KdfConfig } from \"@bitwarden/common/auth/models/domain/kdf-config\";\nimport { KdfType } from \"@bitwarden/common/enums\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { Importer } from \"../importer\";\n\nimport { BitwardenJsonImporter } from \"./bitwarden-json-importer\";\nimport { BitwardenPasswordProtectedFileFormat } from \"./bitwarden-password-protected-types\";\nexport class BitwardenPasswordProtectedImporter extends BitwardenJsonImporter implements Importer {\n  private key: SymmetricCryptoKey;\n\n  constructor(cryptoService: CryptoService, i18nService: I18nService, private password: string) {\n    super(cryptoService, i18nService);\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const parsedData = JSON.parse(data);\n    if (this.cannotParseFile(parsedData)) {\n      result.success = false;\n      return result;\n    }\n\n    if (!(await this.checkPassword(parsedData))) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"invalidFilePassword\");\n      return result;\n    }\n\n    const encData = new EncString(parsedData.data);\n    const clearTextData = await this.cryptoService.decryptToUtf8(encData, this.key);\n    return await super.parse(clearTextData);\n  }\n\n  private async checkPassword(jdoc: BitwardenPasswordProtectedFileFormat): Promise<boolean> {\n    this.key = await this.cryptoService.makePinKey(\n      this.password,\n      jdoc.salt,\n      jdoc.kdfType,\n      new KdfConfig(jdoc.kdfIterations, jdoc.kdfMemory, jdoc.kdfParallelism)\n    );\n\n    const encKeyValidation = new EncString(jdoc.encKeyValidation_DO_NOT_EDIT);\n\n    const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n      encKeyValidation,\n      this.key\n    );\n    if (encKeyValidationDecrypt === null) {\n      return false;\n    }\n    return true;\n  }\n\n  private cannotParseFile(jdoc: BitwardenPasswordProtectedFileFormat): boolean {\n    return (\n      !jdoc ||\n      !jdoc.encrypted ||\n      !jdoc.passwordProtected ||\n      !jdoc.salt ||\n      !jdoc.kdfIterations ||\n      typeof jdoc.kdfIterations !== \"number\" ||\n      jdoc.kdfType == null ||\n      KdfType[jdoc.kdfType] == null ||\n      !jdoc.encKeyValidation_DO_NOT_EDIT ||\n      !jdoc.data\n    );\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlurCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.label === \"null\") {\n        value.label = null;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.label,\n        this.getValueOrDefault(this.nameFromUrl(value.domain), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.domain);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (this.isNullOrWhitespace(value.email) && !this.isNullOrWhitespace(value.username)) {\n        cipher.login.username = value.username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.email);\n        cipher.notes = this.getValueOrDefault(value.username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst OfficialProps = [\"!group_id\", \"!group_name\", \"title\", \"username\", \"password\", \"URL\", \"id\"];\n\nexport class ButtercupCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value[\"!group_name\"]));\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      let processingCustomFields = false;\n      for (const prop in value) {\n        // eslint-disable-next-line\n        if (value.hasOwnProperty(prop)) {\n          if (!processingCustomFields && OfficialProps.indexOf(prop) === -1) {\n            processingCustomFields = true;\n          }\n          if (processingCustomFields) {\n            this.processKvp(cipher, prop, value[prop]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ClipperzHtmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const textarea = doc.querySelector(\"textarea\");\n    if (textarea == null || this.isNullOrWhitespace(textarea.textContent)) {\n      result.errorMessage = \"Missing textarea.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const entries = JSON.parse(textarea.textContent);\n    entries.forEach((entry: any) => {\n      const cipher = this.initLoginCipher();\n      if (!this.isNullOrWhitespace(entry.label)) {\n        cipher.name = entry.label.split(\" \")[0];\n      }\n      if (entry.data != null && !this.isNullOrWhitespace(entry.data.notes)) {\n        cipher.notes = entry.data.notes.split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (entry.currentVersion != null && entry.currentVersion.fields != null) {\n        for (const property in entry.currentVersion.fields) {\n          // eslint-disable-next-line\n          if (!entry.currentVersion.fields.hasOwnProperty(property)) {\n            continue;\n          }\n\n          const field = entry.currentVersion.fields[property];\n          const actionType = field.actionType != null ? field.actionType.toLowerCase() : null;\n          switch (actionType) {\n            case \"password\":\n              cipher.login.password = this.getValueOrDefault(field.value);\n              break;\n            case \"email\":\n            case \"username\":\n            case \"user\":\n            case \"name\":\n              cipher.login.username = this.getValueOrDefault(field.value);\n              break;\n            case \"url\":\n              cipher.login.uris = this.makeUriArray(field.value);\n              break;\n            default: {\n              const labelLower = field.label != null ? field.label.toLowerCase() : null;\n              if (\n                cipher.login.password == null &&\n                this.passwordFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.password = this.getValueOrDefault(field.value);\n              } else if (\n                cipher.login.username == null &&\n                this.usernameFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.username = this.getValueOrDefault(field.value);\n              } else if (\n                (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n                this.uriFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.uris = this.makeUriArray(field.value);\n              } else {\n                this.processKvp(cipher, field.label, field.value);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class CodebookCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value.Category));\n\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite) === \"True\";\n      cipher.name = this.getValueOrDefault(value.Entry, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.login.username = this.getValueOrDefault(value.Username, value.Email);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.totp = this.getValueOrDefault(value.TOTP);\n      cipher.login.uris = this.makeUriArray(value.Website);\n\n      if (!this.isNullOrWhitespace(value.Username)) {\n        this.processKvp(cipher, \"Email\", value.Email);\n      }\n      this.processKvp(cipher, \"Phone\", value.Phone);\n      this.processKvp(cipher, \"PIN\", value.PIN);\n      this.processKvp(cipher, \"Account\", value.Account);\n      this.processKvp(cipher, \"Date\", value.Date);\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CredentialsRecord,\n  IdRecord,\n  PaymentsRecord,\n  PersonalInformationRecord,\n  SecureNoteRecord,\n} from \"./types/dashlane-csv-types\";\n\nconst _mappedCredentialsColums = new Set([\n  \"title\",\n  \"note\",\n  \"username\",\n  \"password\",\n  \"url\",\n  \"otpSecret\",\n  \"category\",\n]);\n\nconst _mappedPersonalInfoAsIdentiyColumns = new Set([\n  \"type\",\n  \"title\",\n  \"first_name\",\n  \"middle_name\",\n  \"last_name\",\n  \"login\",\n  \"email\",\n  \"phone_number\",\n  \"address\",\n  \"country\",\n  \"state\",\n  \"city\",\n  \"zip\",\n  // Skip item_name as we already have set a combined name\n  \"item_name\",\n]);\n\nconst _mappedSecureNoteColumns = new Set([\"title\", \"note\"]);\n\nexport class DashlaneCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results[0].type != null && results[0].title != null) {\n      const personalRecords = results as PersonalInformationRecord[];\n\n      // If personalRecords has only one \"name\" then create an Identity-Cipher\n      if (personalRecords.filter((x) => x.type === \"name\").length === 1) {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        results.forEach((row) => {\n          this.parsePersonalInformationRecordAsIdentity(cipher, row);\n        });\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n        result.success = true;\n        return Promise.resolve(result);\n      }\n    }\n\n    results.forEach((row) => {\n      const cipher = this.initLoginCipher();\n\n      const rowKeys = Object.keys(row);\n      if (rowKeys[0] === \"username\") {\n        this.processFolder(result, row.category);\n        this.parseCredentialsRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"account_name\") {\n        this.parsePaymentRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"number\") {\n        this.parseIdRecord(cipher, row);\n      }\n\n      if ((rowKeys[0] === \"type\") != null && rowKeys[1] === \"title\") {\n        this.parsePersonalInformationRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"title\" && rowKeys[1] === \"note\") {\n        this.parseSecureNoteRecords(cipher, row);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  parseCredentialsRecord(cipher: CipherView, row: CredentialsRecord) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    cipher.name = row.title;\n    cipher.notes = row.note;\n    cipher.login.username = row.username;\n    cipher.login.password = row.password;\n    cipher.login.totp = row.otpSecret;\n    cipher.login.uris = this.makeUriArray(row.url);\n\n    this.importUnmappedFields(cipher, row, _mappedCredentialsColums);\n  }\n\n  parsePaymentRecord(cipher: CipherView, row: PaymentsRecord) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n\n    cipher.name = row.account_name;\n    let mappedValues: string[] = [];\n    switch (row.type) {\n      case \"credit_card\":\n        cipher.card.cardholderName = row.account_name;\n        cipher.card.number = row.cc_number;\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = row.code;\n        this.setCardExpiration(cipher, `${row.expiration_month}/${row.expiration_year}`);\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\n          \"account_name\",\n          \"account_holder\",\n          \"cc_number\",\n          \"code\",\n          \"expiration_month\",\n          \"expiration_year\",\n        ];\n        break;\n      case \"bank\":\n        cipher.card.cardholderName = row.account_holder;\n        cipher.card.number = row.account_number;\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\"account_name\", \"account_holder\", \"account_number\"];\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parseIdRecord(cipher: CipherView, row: IdRecord) {\n    cipher.type = CipherType.Identity;\n    cipher.identity = new IdentityView();\n\n    const mappedValues: string[] = [\"name\", \"number\"];\n    switch (row.type) {\n      case \"card\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        break;\n      case \"passport\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.passportNumber = row.number;\n        break;\n      case \"license\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        cipher.identity.state = row.state;\n\n        mappedValues.push(\"state\");\n        break;\n      case \"social_security\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.ssn = row.number;\n        break;\n      case \"tax_number\":\n        cipher.name = row.type;\n        cipher.identity.licenseNumber = row.number;\n        break;\n\n      default:\n        break;\n    }\n\n    // If you add more mapped fields please extend this\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parsePersonalInformationRecord(cipher: CipherView, row: PersonalInformationRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    if (row.type === \"name\") {\n      cipher.name = `${row.title} ${row.first_name} ${row.middle_name} ${row.last_name}`\n        .replace(\"  \", \" \")\n        .trim();\n    } else {\n      cipher.name = row.item_name;\n    }\n\n    const dataRow = row as any;\n    Object.keys(row).forEach((key) => {\n      this.processKvp(cipher, key, dataRow[key]);\n    });\n  }\n\n  parsePersonalInformationRecordAsIdentity(cipher: CipherView, row: PersonalInformationRecord) {\n    switch (row.type) {\n      case \"name\":\n        this.processFullName(cipher, `${row.first_name} ${row.middle_name} ${row.last_name}`);\n        cipher.identity.title = row.title;\n        cipher.name = cipher.identity.fullName;\n\n        cipher.identity.username = row.login;\n        break;\n      case \"email\":\n        cipher.identity.email = row.email;\n        break;\n      case \"number\":\n        cipher.identity.phone = row.phone_number;\n        break;\n      case \"address\":\n        cipher.identity.address1 = row.address;\n        cipher.identity.city = row.city;\n        cipher.identity.postalCode = row.zip;\n        cipher.identity.state = row.state;\n        cipher.identity.country = row.country;\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, _mappedPersonalInfoAsIdentiyColumns);\n  }\n\n  parseSecureNoteRecords(cipher: CipherView, row: SecureNoteRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = row.title;\n    cipher.notes = row.note;\n\n    this.importUnmappedFields(cipher, row, _mappedSecureNoteColumns);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nconst HandledResults = new Set([\n  \"ADDRESS\",\n  \"AUTHENTIFIANT\",\n  \"BANKSTATEMENT\",\n  \"IDCARD\",\n  \"IDENTITY\",\n  \"PAYMENTMEANS_CREDITCARD\",\n  \"PAYMENTMEAN_PAYPAL\",\n  \"EMAIL\",\n]);\n\nexport class DashlaneJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    if (results.ADDRESS != null) {\n      this.processAddress(results.ADDRESS);\n    }\n    if (results.AUTHENTIFIANT != null) {\n      this.processAuth(results.AUTHENTIFIANT);\n    }\n    if (results.BANKSTATEMENT != null) {\n      this.processNote(results.BANKSTATEMENT, \"BankAccountName\");\n    }\n    if (results.IDCARD != null) {\n      this.processNote(results.IDCARD, \"Fullname\");\n    }\n    if (results.PAYMENTMEANS_CREDITCARD != null) {\n      this.processCard(results.PAYMENTMEANS_CREDITCARD);\n    }\n    if (results.IDENTITY != null) {\n      this.processIdentity(results.IDENTITY);\n    }\n\n    for (const key in results) {\n      // eslint-disable-next-line\n      if (results.hasOwnProperty(key) && !HandledResults.has(key)) {\n        this.processNote(results[key], null, \"Generic Note\");\n      }\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processAuth(results: any[]) {\n    results.forEach((credential: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(credential.title);\n\n      cipher.login.username = this.getValueOrDefault(\n        credential.login,\n        this.getValueOrDefault(credential.secondaryLogin)\n      );\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.domain);\n      cipher.notes += this.getValueOrDefault(credential.note, \"\");\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processIdentity(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.fullName, \"\");\n      const nameParts = cipher.name.split(\" \");\n      if (nameParts.length > 0) {\n        cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n      }\n      if (nameParts.length === 2) {\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n      } else if (nameParts.length === 3) {\n        cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[2]);\n      }\n      cipher.identity.username = this.getValueOrDefault(obj.pseudo);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processAddress(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.addressName);\n      cipher.identity.address1 = this.getValueOrDefault(obj.addressFull);\n      cipher.identity.city = this.getValueOrDefault(obj.city);\n      cipher.identity.state = this.getValueOrDefault(obj.state);\n      cipher.identity.postalCode = this.getValueOrDefault(obj.zipcode);\n      cipher.identity.country = this.getValueOrDefault(obj.country);\n      if (cipher.identity.country != null) {\n        cipher.identity.country = cipher.identity.country.toUpperCase();\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processCard(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.card = new CardView();\n      cipher.type = CipherType.Card;\n      cipher.name = this.getValueOrDefault(obj.bank);\n      cipher.card.number = this.getValueOrDefault(obj.cardNumber);\n      cipher.card.brand = this.getCardBrand(cipher.card.number);\n      cipher.card.cardholderName = this.getValueOrDefault(obj.owner);\n      if (!this.isNullOrWhitespace(cipher.card.brand)) {\n        if (this.isNullOrWhitespace(cipher.name)) {\n          cipher.name = cipher.card.brand;\n        } else {\n          cipher.name += \" - \" + cipher.card.brand;\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processNote(results: any[], nameProperty: string, name: string = null) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.secureNote = new SecureNoteView();\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote.type = SecureNoteType.Generic;\n      if (name != null) {\n        cipher.name = name;\n      } else {\n        cipher.name = this.getValueOrDefault(obj[nameProperty]);\n      }\n      for (const key in obj) {\n        // eslint-disable-next-line\n        if (obj.hasOwnProperty(key) && key !== nameProperty) {\n          this.processKvp(cipher, key, obj[key].toString());\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class EncryptrCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Label, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      const text = this.getValueOrDefault(value.Text);\n      if (!this.isNullOrWhitespace(text)) {\n        if (this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = text;\n        } else {\n          cipher.notes += \"\\n\\n\" + text;\n        }\n      }\n\n      const type = value[\"Entry Type\"];\n      if (type === \"Password\") {\n        cipher.login.username = this.getValueOrDefault(value.Username);\n        cipher.login.password = this.getValueOrDefault(value.Password);\n        cipher.login.uris = this.makeUriArray(value[\"Site URL\"]);\n      } else if (type === \"Credit Card\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value[\"Name on card\"]);\n        cipher.card.number = this.getValueOrDefault(value[\"Card Number\"]);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.CVV);\n        const expiry = this.getValueOrDefault(value.Expiry);\n        if (!this.isNullOrWhitespace(expiry)) {\n          const expParts = expiry.split(\"/\");\n          if (expParts.length > 1) {\n            cipher.card.expMonth = parseInt(expParts[0], null).toString();\n            cipher.card.expYear = (2000 + parseInt(expParts[1], null)).toString();\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class EnpassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let firstRow = true;\n    results.forEach((value) => {\n      if (value.length < 2 || (firstRow && (value[0] === \"Title\" || value[0] === \"title\"))) {\n        firstRow = false;\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (\n        value.length === 2 ||\n        (!this.containsField(value, \"username\") &&\n          !this.containsField(value, \"password\") &&\n          !this.containsField(value, \"email\") &&\n          !this.containsField(value, \"url\"))\n      ) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      }\n\n      if (\n        this.containsField(value, \"cardholder\") &&\n        this.containsField(value, \"number\") &&\n        this.containsField(value, \"expiry date\")\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      }\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const fieldValue: string = value[i + 2];\n          if (this.isNullOrWhitespace(fieldValue)) {\n            continue;\n          }\n\n          const fieldName: string = value[i + 1];\n          const fieldNameLower = fieldName.toLowerCase();\n\n          if (cipher.type === CipherType.Login) {\n            if (\n              fieldNameLower === \"url\" &&\n              (cipher.login.uris == null || cipher.login.uris.length === 0)\n            ) {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              continue;\n            } else if (\n              (fieldNameLower === \"username\" || fieldNameLower === \"email\") &&\n              this.isNullOrWhitespace(cipher.login.username)\n            ) {\n              cipher.login.username = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"password\" &&\n              this.isNullOrWhitespace(cipher.login.password)\n            ) {\n              cipher.login.password = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n              cipher.login.totp = fieldValue;\n              continue;\n            }\n          } else if (cipher.type === CipherType.Card) {\n            if (\n              fieldNameLower === \"cardholder\" &&\n              this.isNullOrWhitespace(cipher.card.cardholderName)\n            ) {\n              cipher.card.cardholderName = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"number\" && this.isNullOrWhitespace(cipher.card.number)) {\n              cipher.card.number = fieldValue;\n              cipher.card.brand = this.getCardBrand(fieldValue);\n              continue;\n            } else if (fieldNameLower === \"cvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n              cipher.card.code = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"expiry date\" &&\n              this.isNullOrWhitespace(cipher.card.expMonth) &&\n              this.isNullOrWhitespace(cipher.card.expYear)\n            ) {\n              if (this.setCardExpiration(cipher, fieldValue)) {\n                continue;\n              }\n            } else if (fieldNameLower === \"type\") {\n              // Skip since brand was determined from number above\n              continue;\n            }\n          }\n\n          this.processKvp(cipher, fieldName, fieldValue);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private containsField(fields: any[], name: string) {\n    if (fields == null || name == null) {\n      return false;\n    }\n    return (\n      fields.filter((f) => !this.isNullOrWhitespace(f) && f.toLowerCase() === name.toLowerCase())\n        .length > 0\n    );\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { EnpassJsonFile, EnpassFolder, EnpassField } from \"./types/enpass-json-type\";\n\ntype EnpassFolderTreeItem = EnpassFolder & { children: EnpassFolderTreeItem[] };\nconst androidUrlRegex = new RegExp(\"androidapp://.*==@\", \"g\");\n\nexport class EnpassJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: EnpassJsonFile = JSON.parse(data);\n    if (results == null || results.items == null || results.items.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    const foldersIndexMap = new Map<string, number>();\n    const folderTree = this.buildFolderTree(results.folders);\n    this.flattenFolderTree(null, folderTree, foldersMap);\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((item) => {\n      if (item.folders != null && item.folders.length > 0 && foldersIndexMap.has(item.folders[0])) {\n        result.folderRelationships.push([\n          result.ciphers.length,\n          foldersIndexMap.get(item.folders[0]),\n        ]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(item.title);\n      cipher.favorite = item.favorite > 0;\n\n      if (item.template_type != null && item.fields != null && item.fields.length > 0) {\n        if (\n          item.template_type.indexOf(\"login.\") === 0 ||\n          item.template_type.indexOf(\"password.\") === 0\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else if (item.template_type.indexOf(\"creditcard.\") === 0) {\n          this.processCard(cipher, item.fields);\n        } else if (\n          item.template_type.indexOf(\"identity.\") < 0 &&\n          item.fields.some((f) => f.type === \"password\" && !this.isNullOrWhitespace(f.value))\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else {\n          this.processNote(cipher, item.fields);\n        }\n      }\n\n      cipher.notes += \"\\n\" + this.getValueOrDefault(item.note, \"\");\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private processLogin(cipher: CipherView, fields: EnpassField[]) {\n    const urls: string[] = [];\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n\n      if (\n        (field.type === \"username\" || field.type === \"email\") &&\n        this.isNullOrWhitespace(cipher.login.username)\n      ) {\n        cipher.login.username = field.value;\n      } else if (field.type === \"password\" && this.isNullOrWhitespace(cipher.login.password)) {\n        cipher.login.password = field.value;\n      } else if (field.type === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n        cipher.login.totp = field.value;\n      } else if (field.type === \"url\") {\n        urls.push(field.value);\n      } else if (field.type === \".Android#\") {\n        let cleanedValue = field.value.startsWith(\"androidapp://\")\n          ? field.value\n          : \"androidapp://\" + field.value;\n        cleanedValue = cleanedValue.replace(\"android://\", \"\");\n        cleanedValue = cleanedValue.replace(androidUrlRegex, \"androidapp://\");\n        urls.push(cleanedValue);\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n    cipher.login.uris = this.makeUriArray(urls);\n  }\n\n  private processCard(cipher: CipherView, fields: EnpassField[]) {\n    cipher.card = new CardView();\n    cipher.type = CipherType.Card;\n    fields.forEach((field) => {\n      if (\n        this.isNullOrWhitespace(field.value) ||\n        field.type === \"section\" ||\n        field.type === \"ccType\"\n      ) {\n        return;\n      }\n\n      if (field.type === \"ccName\" && this.isNullOrWhitespace(cipher.card.cardholderName)) {\n        cipher.card.cardholderName = field.value;\n      } else if (field.type === \"ccNumber\" && this.isNullOrWhitespace(cipher.card.number)) {\n        cipher.card.number = field.value;\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n      } else if (field.type === \"ccCvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n        cipher.card.code = field.value;\n      } else if (field.type === \"ccExpiry\" && this.isNullOrWhitespace(cipher.card.expYear)) {\n        if (!this.setCardExpiration(cipher, field.value)) {\n          this.processKvp(\n            cipher,\n            field.label,\n            field.value,\n            field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n          );\n        }\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n  }\n\n  private processNote(cipher: CipherView, fields: EnpassField[]) {\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n      this.processKvp(\n        cipher,\n        field.label,\n        field.value,\n        field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n      );\n    });\n  }\n\n  private buildFolderTree(folders: EnpassFolder[]): EnpassFolderTreeItem[] {\n    if (folders == null) {\n      return [];\n    }\n    const folderTree: EnpassFolderTreeItem[] = [];\n    const map = new Map<string, EnpassFolderTreeItem>([]);\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      map.set(obj.uuid, obj);\n      obj.children = [];\n    });\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      if (obj.parent_uuid != null && obj.parent_uuid !== \"\" && map.has(obj.parent_uuid)) {\n        map.get(obj.parent_uuid).children.push(obj);\n      } else {\n        folderTree.push(obj);\n      }\n    });\n    return folderTree;\n  }\n\n  private flattenFolderTree(\n    titlePrefix: string,\n    tree: EnpassFolderTreeItem[],\n    map: Map<string, string>\n  ) {\n    if (tree == null) {\n      return;\n    }\n    tree.forEach((f) => {\n      if (f.title != null && f.title.trim() !== \"\") {\n        let title = f.title.trim();\n        if (titlePrefix != null && titlePrefix.trim() !== \"\") {\n          title = titlePrefix + \"/\" + title;\n        }\n        map.set(f.uuid, title);\n        if (f.children != null && f.children.length !== 0) {\n          this.flattenFolderTree(title, f.children, map);\n        }\n      }\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class FirefoxCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results\n      .filter((value) => {\n        return value.url !== \"chrome://FirefoxAccounts\";\n      })\n      .forEach((value) => {\n        const cipher = this.initLoginCipher();\n        const url = this.getValueOrDefault(value.url, this.getValueOrDefault(value.hostname));\n        cipher.name = this.getValueOrDefault(this.nameFromUrl(url), \"--\");\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.uris = this.makeUriArray(url);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export interface FskFile {\n  data: Data;\n}\n\nexport interface Data {\n  [key: string]: FskEntry;\n}\n\nexport enum FskEntryTypesEnum {\n  Login = 1,\n  CreditCard = 2,\n}\n\nexport interface FskEntry {\n  color: string;\n  creditCvv: string;\n  creditExpiry: string;\n  creditNumber: string;\n  favorite: number; // UNIX timestamp\n  notes: string;\n  password: string;\n  passwordList: PasswordList[];\n  passwordModifiedDate: number; // UNIX timestamp\n  rev: string | number;\n  service: string;\n  style: string;\n  type: FskEntryTypesEnum;\n  url: string;\n  username: string;\n  createdDate: number; // UNIX timestamp\n  modifiedDate: number; // UNIX timestamp\n}\n\nexport interface PasswordList {\n  changedate: string;\n  password: string;\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { FskEntry, FskEntryTypesEnum, FskFile } from \"./fsecure-fsk-types\";\n\nexport class FSecureFskImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: FskFile = JSON.parse(data);\n    if (results == null || results.data == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const key in results.data) {\n      // eslint-disable-next-line\n      if (!results.data.hasOwnProperty(key)) {\n        continue;\n      }\n\n      const value = results.data[key];\n      const cipher = this.parseEntry(value);\n      result.ciphers.push(cipher);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseEntry(entry: FskEntry): CipherView {\n    const cipher = this.initLoginCipher();\n    cipher.name = this.getValueOrDefault(entry.service);\n    cipher.notes = this.getValueOrDefault(entry.notes);\n    cipher.favorite = entry.favorite > 0;\n\n    switch (entry.type) {\n      case FskEntryTypesEnum.Login:\n        this.handleLoginEntry(entry, cipher);\n        break;\n      case FskEntryTypesEnum.CreditCard:\n        this.handleCreditCardEntry(entry, cipher);\n        break;\n      default:\n        return;\n        break;\n    }\n\n    this.convertToNoteIfNeeded(cipher);\n    this.cleanupCipher(cipher);\n    return cipher;\n  }\n\n  private handleLoginEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.login.username = this.getValueOrDefault(entry.username);\n    cipher.login.password = this.getValueOrDefault(entry.password);\n    cipher.login.uris = this.makeUriArray(entry.url);\n  }\n\n  private handleCreditCardEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n    cipher.card.cardholderName = this.getValueOrDefault(entry.username);\n    cipher.card.number = this.getValueOrDefault(entry.creditNumber);\n    cipher.card.brand = this.getCardBrand(cipher.card.number);\n    cipher.card.code = this.getValueOrDefault(entry.creditCvv);\n    if (!this.isNullOrWhitespace(entry.creditExpiry)) {\n      if (!this.setCardExpiration(cipher, entry.creditExpiry)) {\n        this.processKvp(cipher, \"Expiration\", entry.creditExpiry);\n      }\n    }\n    if (!this.isNullOrWhitespace(entry.password)) {\n      this.processKvp(cipher, \"PIN\", entry.password);\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class GnomeJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || Object.keys(results).length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const keyRing in results) {\n      if (\n        !results.hasOwnProperty(keyRing) || // eslint-disable-line\n        this.isNullOrWhitespace(keyRing) ||\n        results[keyRing].length === 0\n      ) {\n        continue;\n      }\n\n      results[keyRing].forEach((value: any) => {\n        if (\n          this.isNullOrWhitespace(value.display_name) ||\n          value.display_name.indexOf(\"http\") !== 0\n        ) {\n          return;\n        }\n\n        this.processFolder(result, keyRing);\n        const cipher = this.initLoginCipher();\n        cipher.name = value.display_name.replace(\"http://\", \"\").replace(\"https://\", \"\");\n        if (cipher.name.length > 30) {\n          cipher.name = cipher.name.substring(0, 30);\n        }\n        cipher.login.password = this.getValueOrDefault(value.secret);\n        cipher.login.uris = this.makeUriArray(value.display_name);\n\n        if (value.attributes != null) {\n          cipher.login.username =\n            value.attributes != null\n              ? this.getValueOrDefault(value.attributes.username_value)\n              : null;\n          for (const attr in value.attributes) {\n            if (\n              !value.attributes.hasOwnProperty(attr) || // eslint-disable-line\n              attr === \"username_value\" ||\n              attr === \"xdg:schema\"\n            ) {\n              continue;\n            }\n            this.processKvp(cipher, attr, value.attributes[attr]);\n          }\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst NotesHeader = \"Notes\\n\\n\";\nconst ApplicationsHeader = \"Applications\\n\\n\";\nconst WebsitesHeader = \"Websites\\n\\n\";\nconst Delimiter = \"\\n---\\n\";\n\nexport class KasperskyTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n\n    let notesData: string;\n    let applicationsData: string;\n    let websitesData: string;\n    let workingData = this.splitNewLine(data).join(\"\\n\");\n\n    if (workingData.indexOf(NotesHeader) !== -1) {\n      const parts = workingData.split(NotesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        notesData = parts[1];\n      }\n    }\n    if (workingData.indexOf(ApplicationsHeader) !== -1) {\n      const parts = workingData.split(ApplicationsHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        applicationsData = parts[1];\n      }\n    }\n    if (workingData.indexOf(WebsitesHeader) === 0) {\n      const parts = workingData.split(WebsitesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        websitesData = parts[1];\n      }\n    }\n\n    const notes = this.parseDataCategory(notesData);\n    const applications = this.parseDataCategory(applicationsData);\n    const websites = this.parseDataCategory(websitesData);\n\n    notes.forEach((n) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(n.get(\"Name\"));\n      cipher.notes = this.getValueOrDefault(n.get(\"Text\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    websites.concat(applications).forEach((w) => {\n      const cipher = this.initLoginCipher();\n      const nameKey = w.has(\"Website name\") ? \"Website name\" : \"Application\";\n      cipher.name = this.getValueOrDefault(w.get(nameKey), \"\");\n      if (!this.isNullOrWhitespace(w.get(\"Login name\"))) {\n        if (!this.isNullOrWhitespace(cipher.name)) {\n          cipher.name += \": \";\n        }\n        cipher.name += w.get(\"Login name\");\n      }\n      cipher.notes = this.getValueOrDefault(w.get(\"Comment\"));\n      if (w.has(\"Website URL\")) {\n        cipher.login.uris = this.makeUriArray(w.get(\"Website URL\"));\n      }\n      cipher.login.username = this.getValueOrDefault(w.get(\"Login\"));\n      cipher.login.password = this.getValueOrDefault(w.get(\"Password\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseDataCategory(data: string): Map<string, string>[] {\n    if (this.isNullOrWhitespace(data) || data.indexOf(Delimiter) === -1) {\n      return [];\n    }\n    const items: Map<string, string>[] = [];\n    data.split(Delimiter).forEach((p) => {\n      if (p.indexOf(\"\\n\") === -1) {\n        return;\n      }\n      const item = new Map<string, string>();\n      let itemComment: string;\n      let itemCommentKey: string;\n      p.split(\"\\n\").forEach((l) => {\n        if (itemComment != null) {\n          itemComment += \"\\n\" + l;\n          return;\n        }\n        const colonIndex = l.indexOf(\":\");\n        let key: string;\n        let val: string;\n        if (colonIndex === -1) {\n          return;\n        } else {\n          key = l.substring(0, colonIndex);\n          if (l.length > colonIndex + 1) {\n            val = l.substring(colonIndex + 2);\n          }\n        }\n        if (key != null) {\n          item.set(key, val);\n        }\n        if (key === \"Comment\" || key === \"Text\") {\n          itemComment = val;\n          itemCommentKey = key;\n        }\n      });\n      if (itemComment != null && itemCommentKey != null) {\n        item.set(itemCommentKey, itemComment);\n      }\n      if (item.size === 0) {\n        return;\n      }\n      items.push(item);\n    });\n    return items;\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePass2XmlImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    //Note: The doc.querySelector(\"KeePassFile > Root > Group\") no longers works on node and we have to breakdown the query by nodes\n    const KeePassFileNode = doc.querySelector(\"KeePassFile\");\n\n    if (KeePassFileNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const RootNode = KeePassFileNode.querySelector(\"Root\");\n    if (RootNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const rootGroup = RootNode.querySelector(\"Group\");\n    if (rootGroup == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root > Group` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    this.traverse(rootGroup, true, \"\");\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  traverse(node: Element, isRootNode: boolean, groupPrefixName: string) {\n    const folderIndex = this.result.folders.length;\n    let groupName = groupPrefixName;\n\n    if (!isRootNode) {\n      if (groupName !== \"\") {\n        groupName += \"/\";\n      }\n      const nameEl = this.querySelectorDirectChild(node, \"Name\");\n      groupName += nameEl == null ? \"-\" : nameEl.textContent;\n      const folder = new FolderView();\n      folder.name = groupName;\n      this.result.folders.push(folder);\n    }\n\n    this.querySelectorAllDirectChild(node, \"Entry\").forEach((entry) => {\n      const cipherIndex = this.result.ciphers.length;\n\n      const cipher = this.initLoginCipher();\n      this.querySelectorAllDirectChild(entry, \"String\").forEach((entryString) => {\n        const valueEl = this.querySelectorDirectChild(entryString, \"Value\");\n        const value = valueEl != null ? valueEl.textContent : null;\n        if (this.isNullOrWhitespace(value)) {\n          return;\n        }\n        const keyEl = this.querySelectorDirectChild(entryString, \"Key\");\n        const key = keyEl != null ? keyEl.textContent : null;\n\n        if (key === \"URL\") {\n          cipher.login.uris = this.makeUriArray(value);\n        } else if (key === \"UserName\") {\n          cipher.login.username = value;\n        } else if (key === \"Password\") {\n          cipher.login.password = value;\n        } else if (key === \"otp\") {\n          cipher.login.totp = value.replace(\"key=\", \"\");\n        } else if (key === \"Title\") {\n          cipher.name = value;\n        } else if (key === \"Notes\") {\n          cipher.notes += value + \"\\n\";\n        } else {\n          let type = FieldType.Text;\n          const attrs = valueEl.attributes as any;\n          if (\n            attrs.length > 0 &&\n            attrs.ProtectInMemory != null &&\n            attrs.ProtectInMemory.value === \"True\"\n          ) {\n            type = FieldType.Hidden;\n          }\n          this.processKvp(cipher, key, value, type);\n        }\n      });\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n\n      if (!isRootNode) {\n        this.result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    this.querySelectorAllDirectChild(node, \"Group\").forEach((group) => {\n      this.traverse(group, false, groupName);\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePassXCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(value.Title)) {\n        return;\n      }\n\n      value.Group =\n        !this.isNullOrWhitespace(value.Group) && value.Group.startsWith(\"Root/\")\n          ? value.Group.replace(\"Root/\", \"\")\n          : value.Group;\n      const groupName = !this.isNullOrWhitespace(value.Group) ? value.Group : null;\n      this.processFolder(result, groupName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class KeeperCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 6) {\n        return;\n      }\n\n      this.processFolder(result, value[0]);\n      const cipher = this.initLoginCipher();\n\n      const notes = this.getValueOrDefault(value[5]);\n      if (notes) {\n        cipher.notes = `${notes}\\n`;\n      }\n\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[4]);\n\n      if (value.length > 7) {\n        // we have some custom fields.\n        for (let i = 7; i < value.length; i = i + 2) {\n          if (value[i] == \"TFC:Keeper\") {\n            cipher.login.totp = value[i + 1];\n          } else {\n            this.processKvp(cipher, value[i], value[i + 1]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LastPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipherIndex = result.ciphers.length;\n      let folderIndex = result.folders.length;\n      let grouping = value.grouping;\n      if (grouping != null) {\n        // eslint-disable-next-line\n        grouping = grouping.replace(/\\\\/g, \"/\").replace(/[\\x00-\\x1F\\x7F-\\x9F]/g, \"\");\n      }\n      const hasFolder = this.getValueOrDefault(grouping, \"(none)\") !== \"(none)\";\n      let addFolder = hasFolder;\n\n      if (hasFolder) {\n        for (let i = 0; i < result.folders.length; i++) {\n          if (result.folders[i].name === grouping) {\n            addFolder = false;\n            folderIndex = i;\n            break;\n          }\n        }\n      }\n\n      const cipher = this.buildBaseCipher(value);\n      if (cipher.type === CipherType.Login) {\n        cipher.notes = this.getValueOrDefault(value.extra);\n        cipher.login = new LoginView();\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.totp);\n      } else if (cipher.type === CipherType.SecureNote) {\n        this.parseSecureNote(value, cipher);\n      } else if (cipher.type === CipherType.Card) {\n        cipher.card = this.parseCard(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n      } else if (cipher.type === CipherType.Identity) {\n        cipher.identity = this.parseIdentity(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n        if (!this.isNullOrWhitespace(value.ccnum)) {\n          // there is a card on this identity too\n          const cardCipher = this.buildBaseCipher(value);\n          cardCipher.identity = null;\n          cardCipher.type = CipherType.Card;\n          cardCipher.card = this.parseCard(value);\n          result.ciphers.push(cardCipher);\n        }\n      }\n\n      result.ciphers.push(cipher);\n\n      if (addFolder) {\n        const f = new FolderView();\n        f.name = grouping;\n        result.folders.push(f);\n      }\n      if (hasFolder) {\n        result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private buildBaseCipher(value: any) {\n    const cipher = new CipherView();\n    // eslint-disable-next-line\n    if (value.hasOwnProperty(\"profilename\") && value.hasOwnProperty(\"profilelanguage\")) {\n      // form fill\n      cipher.favorite = false;\n      cipher.name = this.getValueOrDefault(value.profilename, \"--\");\n      cipher.type = CipherType.Card;\n\n      if (\n        !this.isNullOrWhitespace(value.title) ||\n        !this.isNullOrWhitespace(value.firstname) ||\n        !this.isNullOrWhitespace(value.lastname) ||\n        !this.isNullOrWhitespace(value.address1) ||\n        !this.isNullOrWhitespace(value.phone) ||\n        !this.isNullOrWhitespace(value.username) ||\n        !this.isNullOrWhitespace(value.email)\n      ) {\n        cipher.type = CipherType.Identity;\n      }\n    } else {\n      // site or secure note\n      cipher.favorite = !this.organization && this.getValueOrDefault(value.fav, \"0\") === \"1\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.type = value.url === \"http://sn\" ? CipherType.SecureNote : CipherType.Login;\n    }\n    return cipher;\n  }\n\n  private parseCard(value: any): CardView {\n    const card = new CardView();\n    card.cardholderName = this.getValueOrDefault(value.ccname);\n    card.number = this.getValueOrDefault(value.ccnum);\n    card.code = this.getValueOrDefault(value.cccsc);\n    card.brand = this.getCardBrand(value.ccnum);\n\n    if (!this.isNullOrWhitespace(value.ccexp) && value.ccexp.indexOf(\"-\") > -1) {\n      const ccexpParts = (value.ccexp as string).split(\"-\");\n      if (ccexpParts.length > 1) {\n        card.expYear = ccexpParts[0];\n        card.expMonth = ccexpParts[1];\n        if (card.expMonth.length === 2 && card.expMonth[0] === \"0\") {\n          card.expMonth = card.expMonth[1];\n        }\n      }\n    }\n\n    return card;\n  }\n\n  private parseIdentity(value: any): IdentityView {\n    const identity = new IdentityView();\n    identity.title = this.getValueOrDefault(value.title);\n    identity.firstName = this.getValueOrDefault(value.firstname);\n    identity.middleName = this.getValueOrDefault(value.middlename);\n    identity.lastName = this.getValueOrDefault(value.lastname);\n    identity.username = this.getValueOrDefault(value.username);\n    identity.company = this.getValueOrDefault(value.company);\n    identity.ssn = this.getValueOrDefault(value.ssn);\n    identity.address1 = this.getValueOrDefault(value.address1);\n    identity.address2 = this.getValueOrDefault(value.address2);\n    identity.address3 = this.getValueOrDefault(value.address3);\n    identity.city = this.getValueOrDefault(value.city);\n    identity.state = this.getValueOrDefault(value.state);\n    identity.postalCode = this.getValueOrDefault(value.zip);\n    identity.country = this.getValueOrDefault(value.country);\n    identity.email = this.getValueOrDefault(value.email);\n    identity.phone = this.getValueOrDefault(value.phone);\n\n    if (!this.isNullOrWhitespace(identity.title)) {\n      identity.title = identity.title.charAt(0).toUpperCase() + identity.title.slice(1);\n    }\n\n    return identity;\n  }\n\n  private parseSecureNote(value: any, cipher: CipherView) {\n    const extraParts = this.splitNewLine(value.extra);\n    let processedNote = false;\n\n    if (extraParts.length) {\n      const typeParts = extraParts[0].split(\":\");\n      if (\n        typeParts.length > 1 &&\n        typeParts[0] === \"NoteType\" &&\n        (typeParts[1] === \"Credit Card\" || typeParts[1] === \"Address\")\n      ) {\n        if (typeParts[1] === \"Credit Card\") {\n          const mappedData = this.parseSecureNoteMapping<CardView>(cipher, extraParts, {\n            Number: \"number\",\n            \"Name on Card\": \"cardholderName\",\n            \"Security Code\": \"code\",\n            // LP provides date in a format like 'June,2020'\n            // Store in expMonth, then parse and modify\n            \"Expiration Date\": \"expMonth\",\n          });\n\n          if (this.isNullOrWhitespace(mappedData.expMonth) || mappedData.expMonth === \",\") {\n            // No expiration data\n            mappedData.expMonth = undefined;\n          } else {\n            const [monthString, year] = mappedData.expMonth.split(\",\");\n            // Parse month name into number\n            if (!this.isNullOrWhitespace(monthString)) {\n              const month = new Date(Date.parse(monthString.trim() + \" 1, 2012\")).getMonth() + 1;\n              if (isNaN(month)) {\n                mappedData.expMonth = undefined;\n              } else {\n                mappedData.expMonth = month.toString();\n              }\n            } else {\n              mappedData.expMonth = undefined;\n            }\n            if (!this.isNullOrWhitespace(year)) {\n              mappedData.expYear = year;\n            }\n          }\n\n          cipher.type = CipherType.Card;\n          cipher.card = mappedData;\n        } else if (typeParts[1] === \"Address\") {\n          const mappedData = this.parseSecureNoteMapping<IdentityView>(cipher, extraParts, {\n            Title: \"title\",\n            \"First Name\": \"firstName\",\n            \"Last Name\": \"lastName\",\n            \"Middle Name\": \"middleName\",\n            Company: \"company\",\n            \"Address 1\": \"address1\",\n            \"Address 2\": \"address2\",\n            \"Address 3\": \"address3\",\n            \"City / Town\": \"city\",\n            State: \"state\",\n            \"Zip / Postal Code\": \"postalCode\",\n            Country: \"country\",\n            \"Email Address\": \"email\",\n            Username: \"username\",\n          });\n          cipher.type = CipherType.Identity;\n          cipher.identity = mappedData;\n        }\n        processedNote = true;\n      }\n    }\n\n    if (!processedNote) {\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n      cipher.notes = this.getValueOrDefault(value.extra);\n    }\n  }\n\n  private parseSecureNoteMapping<T>(cipher: CipherView, extraParts: string[], map: any): T {\n    const dataObj: any = {};\n\n    let processingNotes = false;\n    extraParts.forEach((extraPart) => {\n      let key: string = null;\n      let val: string = null;\n      if (!processingNotes) {\n        if (this.isNullOrWhitespace(extraPart)) {\n          return;\n        }\n        const colonIndex = extraPart.indexOf(\":\");\n        if (colonIndex === -1) {\n          key = extraPart;\n        } else {\n          key = extraPart.substring(0, colonIndex);\n          if (extraPart.length > colonIndex) {\n            val = extraPart.substring(colonIndex + 1);\n          }\n        }\n        if (this.isNullOrWhitespace(key) || this.isNullOrWhitespace(val) || key === \"NoteType\") {\n          return;\n        }\n      }\n\n      if (processingNotes) {\n        cipher.notes += \"\\n\" + extraPart;\n      } else if (key === \"Notes\") {\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes += \"\\n\" + val;\n        } else {\n          cipher.notes = val;\n        }\n        processingNotes = true;\n        // eslint-disable-next-line\n      } else if (map.hasOwnProperty(key)) {\n        dataObj[map[key]] = val;\n      } else {\n        this.processKvp(cipher, key, val);\n      }\n    });\n\n    return dataObj;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LogMeOnceCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 4) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[1]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MeldiumCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.DisplayName, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.login.username = this.getValueOrDefault(value.UserName);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MSecureCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      const folderName =\n        this.getValueOrDefault(value[0], \"Unassigned\") !== \"Unassigned\" ? value[0] : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[2], \"--\");\n\n      if (value[1] === \"Web Logins\" || value[1] === \"Login\") {\n        cipher.login.uris = this.makeUriArray(value[4]);\n        cipher.login.username = this.getValueOrDefault(value[5]);\n        cipher.login.password = this.getValueOrDefault(value[6]);\n        cipher.notes = !this.isNullOrWhitespace(value[3]) ? value[3].split(\"\\\\n\").join(\"\\n\") : null;\n      } else if (value.length > 3) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        for (let i = 3; i < value.length; i++) {\n          if (!this.isNullOrWhitespace(value[i])) {\n            cipher.notes += value[i] + \"\\n\";\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(value[1]) && cipher.type !== CipherType.Login) {\n        cipher.name = value[1] + \": \" + cipher.name;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst mappedBaseColumns = [\"nickname\", \"additionalInfo\"];\nconst _mappedUserAccountColumns = new Set(\n  mappedBaseColumns.concat([\"url\", \"username\", \"password\", \"twofaSecret\"])\n);\nconst _mappedCreditCardColumns = new Set(\n  mappedBaseColumns.concat([\"cardNumber\", \"cardName\", \"exp_month\", \"exp_year\", \"cvv\"])\n);\n\nconst _mappedIdentityColumns = new Set(\n  mappedBaseColumns.concat([\n    \"title\",\n    \"firstName\",\n    \"middleName\",\n    \"lastName\",\n    \"email\",\n    \"firstAddressLine\",\n    \"secondAddressLine\",\n    \"city\",\n    \"country\",\n    \"zipCode\",\n  ])\n);\n\nconst _mappedIdCardColumns = new Set(mappedBaseColumns.concat([\"idName\", \"idNumber\", \"idCountry\"]));\n\nconst _mappedTwoFaColumns = new Set(mappedBaseColumns.concat([\"authToken\"]));\n\nconst _mappedUserNoteColumns = new Set(mappedBaseColumns.concat([\"content\"]));\n\nexport class MykiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.nickname, \"--\");\n      cipher.notes = this.getValueOrDefault(value.additionalInfo);\n\n      if (value.url !== undefined) {\n        // Accounts\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.twofaSecret);\n\n        this.importUnmappedFields(cipher, value, _mappedUserAccountColumns);\n      } else if (value.authToken !== undefined) {\n        // TwoFA\n        cipher.login.totp = this.getValueOrDefault(value.authToken);\n\n        this.importUnmappedFields(cipher, value, _mappedTwoFaColumns);\n      } else if (value.cardNumber !== undefined) {\n        // Cards\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.expMonth = this.getValueOrDefault(value.exp_month);\n        cipher.card.expYear = this.getValueOrDefault(value.exp_year);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n\n        this.importUnmappedFields(cipher, value, _mappedCreditCardColumns);\n      } else if (value.firstName !== undefined) {\n        // Identities\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        cipher.identity.title = this.getValueOrDefault(value.title);\n        cipher.identity.firstName = this.getValueOrDefault(value.firstName);\n        cipher.identity.middleName = this.getValueOrDefault(value.middleName);\n        cipher.identity.lastName = this.getValueOrDefault(value.lastName);\n        cipher.identity.phone = this.getValueOrDefault(value.number);\n        cipher.identity.email = this.getValueOrDefault(value.email);\n        cipher.identity.address1 = this.getValueOrDefault(value.firstAddressLine);\n        cipher.identity.address2 = this.getValueOrDefault(value.secondAddressLine);\n        cipher.identity.city = this.getValueOrDefault(value.city);\n        cipher.identity.country = this.getValueOrDefault(value.country);\n        cipher.identity.postalCode = this.getValueOrDefault(value.zipCode);\n\n        this.importUnmappedFields(cipher, value, _mappedIdentityColumns);\n      } else if (value.idType !== undefined) {\n        // IdCards\n\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        this.processFullName(cipher, value.idName);\n        cipher.identity.country = this.getValueOrDefault(value.idCountry);\n\n        switch (value.idType) {\n          // case \"Driver's License\":\n          // case \"ID Card\":\n          // case \"Outdoor License\":\n          // case \"Software License\":\n          // case \"Tax Number\":\n          // case \"Bank Account\":\n          // case \"Insurance Card\":\n          // case \"Health Card\":\n          // case \"Membership\":\n          // case \"Database\":\n          // case \"Reward Program\":\n          // case \"Tour Visa\":\n          case \"Passport\":\n            cipher.identity.passportNumber = value.idNumber;\n            break;\n          case \"Social Security\":\n            cipher.identity.ssn = value.idNumber;\n            break;\n          default:\n            cipher.identity.licenseNumber = value.idNumber;\n            break;\n        }\n\n        this.importUnmappedFields(cipher, value, _mappedIdCardColumns);\n      } else if (value.content !== undefined) {\n        // Notes\n        cipher.secureNote = new SecureNoteView();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.notes = this.getValueOrDefault(value.content);\n\n        this.importUnmappedFields(cipher, value, _mappedUserNoteColumns);\n      } else {\n        return;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\ntype nodePassCsvParsed = {\n  name: string;\n  url: string;\n  username: string;\n  password: string;\n  note: string;\n  cardholdername: string;\n  cardnumber: string;\n  cvc: string;\n  expirydate: string;\n  zipcode: string;\n  folder: string;\n  full_name: string;\n  phone_number: string;\n  email: string;\n  address1: string;\n  address2: string;\n  city: string;\n  country: string;\n  state: string;\n};\n\nexport class NordPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: nodePassCsvParsed[] = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((record) => {\n      const recordType = this.evaluateType(record);\n      if (recordType === undefined) {\n        return;\n      }\n\n      if (!this.organization) {\n        this.processFolder(result, record.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.name = this.getValueOrDefault(record.name, \"--\");\n      cipher.notes = this.getValueOrDefault(record.note);\n\n      switch (recordType) {\n        case CipherType.Login:\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.username = this.getValueOrDefault(record.username);\n          cipher.login.password = this.getValueOrDefault(record.password);\n          cipher.login.uris = this.makeUriArray(record.url);\n          break;\n        case CipherType.Card:\n          cipher.type = CipherType.Card;\n          cipher.card.cardholderName = this.getValueOrDefault(record.cardholdername);\n          cipher.card.number = this.getValueOrDefault(record.cardnumber);\n          cipher.card.code = this.getValueOrDefault(record.cvc);\n          cipher.card.brand = this.getCardBrand(cipher.card.number);\n          this.setCardExpiration(cipher, record.expirydate);\n          break;\n\n        case CipherType.Identity:\n          cipher.type = CipherType.Identity;\n\n          this.processFullName(cipher, this.getValueOrDefault(record.full_name));\n          cipher.identity.address1 = this.getValueOrDefault(record.address1);\n          cipher.identity.address2 = this.getValueOrDefault(record.address2);\n          cipher.identity.city = this.getValueOrDefault(record.city);\n          cipher.identity.state = this.getValueOrDefault(record.state);\n          cipher.identity.postalCode = this.getValueOrDefault(record.zipcode);\n          cipher.identity.country = this.getValueOrDefault(record.country);\n          if (cipher.identity.country != null) {\n            cipher.identity.country = cipher.identity.country.toUpperCase();\n          }\n          cipher.identity.email = this.getValueOrDefault(record.email);\n          cipher.identity.phone = this.getValueOrDefault(record.phone_number);\n          break;\n        case CipherType.SecureNote:\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default:\n          break;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private evaluateType(record: nodePassCsvParsed): CipherType {\n    if (!this.isNullOrWhitespace(record.username)) {\n      return CipherType.Login;\n    }\n\n    if (!this.isNullOrWhitespace(record.cardnumber)) {\n      return CipherType.Card;\n    }\n\n    if (!this.isNullOrWhitespace(record.full_name)) {\n      return CipherType.Identity;\n    }\n\n    if (!this.isNullOrWhitespace(record.note)) {\n      return CipherType.SecureNote;\n    }\n\n    return undefined;\n  }\n}\n","export interface ExportData {\n  accounts?: AccountsEntity[] | null;\n}\nexport interface AccountsEntity {\n  attrs: AccountAttributes;\n  vaults?: VaultsEntity[] | null;\n}\nexport interface AccountAttributes {\n  accountName: string;\n  name: string;\n  avatar: string;\n  email: string;\n  uuid: string;\n  domain: string;\n}\nexport interface VaultsEntity {\n  attrs: VaultAttributes;\n  items?: Item[] | null;\n}\nexport interface VaultAttributes {\n  uuid: string;\n  desc: string;\n  avatar: string;\n  name: string;\n  type: string;\n}\n\nexport enum CategoryEnum {\n  Login = \"001\",\n  CreditCard = \"002\",\n  SecureNote = \"003\",\n  Identity = \"004\",\n  Password = \"005\",\n  Document = \"006\",\n  SoftwareLicense = \"100\",\n  BankAccount = \"101\",\n  Database = \"102\",\n  DriversLicense = \"103\",\n  OutdoorLicense = \"104\",\n  Membership = \"105\",\n  Passport = \"106\",\n  RewardsProgram = \"107\",\n  SocialSecurityNumber = \"108\",\n  WirelessRouter = \"109\",\n  Server = \"110\",\n  EmailAccount = \"111\",\n  API_Credential = \"112\",\n  MedicalRecord = \"113\",\n}\n\nexport interface Item {\n  uuid: string;\n  favIndex: number;\n  createdAt: number;\n  updatedAt: number;\n  trashed?: boolean;\n  categoryUuid: string;\n  details: Details;\n  overview: Overview;\n}\nexport interface Details {\n  loginFields?: (LoginFieldsEntity | null)[] | null;\n  notesPlain?: string | null;\n  sections?: (SectionsEntity | null)[] | null;\n  passwordHistory?: (PasswordHistoryEntity | null)[] | null;\n  documentAttributes?: DocumentAttributes | null;\n  password?: string | null;\n}\n\nexport enum LoginFieldTypeEnum {\n  TextOrHtml = \"T\",\n  EmailAddress = \"E\",\n  URL = \"U\",\n  Number = \"N\",\n  Password = \"P\",\n  TextArea = \"A\",\n  PhoneNumber = \"T\",\n  CheckBox = \"C\",\n}\nexport interface LoginFieldsEntity {\n  value: string;\n  id: string;\n  name: string;\n  fieldType: LoginFieldTypeEnum | string;\n  designation?: string | null;\n}\nexport interface SectionsEntity {\n  title: string;\n  name?: string | null;\n  fields?: FieldsEntity[] | null;\n}\nexport interface FieldsEntity {\n  title: string;\n  id: string;\n  value: Value;\n  indexAtSource: number;\n  guarded: boolean;\n  multiline: boolean;\n  dontGenerate: boolean;\n  placeholder?: string;\n  inputTraits: InputTraits;\n  clipboardFilter?: string | null;\n}\nexport interface Value {\n  totp?: string | null;\n  date?: number | null;\n  string?: string | null;\n  concealed?: string | null;\n  email?: Email | null;\n  phone?: string | null;\n  menu?: string | null;\n  gender?: string | null;\n  monthYear?: number | null;\n  url?: string | null;\n  address?: Address | null;\n  creditCardType?: string | null;\n  creditCardNumber?: string | null;\n  reference?: string | null;\n}\n\nexport interface Email {\n  email_address: string;\n  provider: string;\n}\n\nexport interface Address {\n  street: string;\n  city: string;\n  country: string;\n  zip: string;\n  state: string;\n}\nexport interface InputTraits {\n  keyboard: string;\n  correction: string;\n  capitalization: string;\n}\nexport interface PasswordHistoryEntity {\n  value: string;\n  time: number;\n}\nexport interface DocumentAttributes {\n  fileName: string;\n  documentId: string;\n  decryptedSize: number;\n}\nexport interface Overview {\n  subtitle: string;\n  title: string;\n  url: string;\n  urls?: UrlsEntity[] | null;\n  ps?: number | null;\n  pbe?: number | null;\n  pgrng?: boolean | null;\n  tags?: string[] | null;\n}\nexport interface UrlsEntity {\n  label: string;\n  url: string;\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class OnePassword1PifImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    data.split(this.newLineRegex).forEach((line) => {\n      if (this.isNullOrWhitespace(line) || line[0] !== \"{\") {\n        return;\n      }\n      const item = JSON.parse(line);\n      if (item.trashed === true) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n\n      if (this.isNullOrWhitespace(item.hmac)) {\n        this.processStandardItem(item, cipher);\n      } else {\n        this.processWinOpVaultItem(item, cipher);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processWinOpVaultItem(item: any, cipher: CipherView) {\n    if (item.overview != null) {\n      cipher.name = this.getValueOrDefault(item.overview.title);\n      if (item.overview.URLs != null) {\n        const urls: string[] = [];\n        item.overview.URLs.forEach((url: any) => {\n          if (!this.isNullOrWhitespace(url.u)) {\n            urls.push(url.u);\n          }\n        });\n        cipher.login.uris = this.makeUriArray(urls);\n      }\n    }\n\n    if (item.details != null) {\n      if (item.details.passwordHistory != null) {\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n      }\n      if (\n        !this.isNullOrWhitespace(item.details.ccnum) ||\n        !this.isNullOrWhitespace(item.details.cvv)\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      } else if (\n        !this.isNullOrWhitespace(item.details.firstname) ||\n        !this.isNullOrWhitespace(item.details.address1)\n      ) {\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n      }\n      if (cipher.type === CipherType.Login && !this.isNullOrWhitespace(item.details.password)) {\n        cipher.login.password = item.details.password;\n      }\n      if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n        cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (item.details.fields != null) {\n        this.parseFields(item.details.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.details.sections != null) {\n        item.details.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private processStandardItem(item: any, cipher: CipherView) {\n    cipher.favorite = item.openContents && item.openContents.faveIndex ? true : false;\n    cipher.name = this.getValueOrDefault(item.title);\n\n    if (item.typeName === \"securenotes.SecureNote\") {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    } else if (item.typeName === \"wallet.financial.CreditCard\") {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    } else if (item.typeName === \"identities.Identity\") {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    } else {\n      cipher.login.uris = this.makeUriArray(item.location);\n    }\n\n    if (item.secureContents != null) {\n      if (item.secureContents.passwordHistory != null) {\n        this.parsePasswordHistory(item.secureContents.passwordHistory, cipher);\n      }\n      if (!this.isNullOrWhitespace(item.secureContents.notesPlain)) {\n        cipher.notes = item.secureContents.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (cipher.type === CipherType.Login) {\n        if (!this.isNullOrWhitespace(item.secureContents.password)) {\n          cipher.login.password = item.secureContents.password;\n        }\n        if (item.secureContents.URLs != null) {\n          const urls: string[] = [];\n          item.secureContents.URLs.forEach((u: any) => {\n            if (!this.isNullOrWhitespace(u.url)) {\n              urls.push(u.url);\n            }\n          });\n          if (urls.length > 0) {\n            cipher.login.uris = this.makeUriArray(urls);\n          }\n        }\n      }\n      if (item.secureContents.fields != null) {\n        this.parseFields(item.secureContents.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.secureContents.sections != null) {\n        item.secureContents.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private parsePasswordHistory(items: any[], cipher: CipherView) {\n    const maxSize = items.length > 5 ? 5 : items.length;\n    cipher.passwordHistory = items\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n\n  private parseFields(\n    fields: any[],\n    cipher: CipherView,\n    designationKey: string,\n    valueKey: string,\n    nameKey: string\n  ) {\n    fields.forEach((field: any) => {\n      if (field[valueKey] == null || field[valueKey].toString().trim() === \"\") {\n        return;\n      }\n\n      // TODO: when date FieldType exists, store this as a date field type instead of formatted Text if k is 'date'\n      const fieldValue =\n        field.k === \"date\"\n          ? new Date(field[valueKey] * 1000).toUTCString()\n          : field[valueKey].toString();\n      const fieldDesignation =\n        field[designationKey] != null ? field[designationKey].toString() : null;\n\n      if (cipher.type === CipherType.Login) {\n        if (this.isNullOrWhitespace(cipher.login.username) && fieldDesignation === \"username\") {\n          cipher.login.username = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.password) &&\n          fieldDesignation === \"password\"\n        ) {\n          cipher.login.password = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.totp) &&\n          fieldDesignation != null &&\n          fieldDesignation.startsWith(\"TOTP_\")\n        ) {\n          cipher.login.totp = fieldValue;\n          return;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.isNullOrWhitespace(cipher.card.number) && fieldDesignation === \"ccnum\") {\n          cipher.card.number = fieldValue;\n          cipher.card.brand = this.getCardBrand(fieldValue);\n          return;\n        } else if (this.isNullOrWhitespace(cipher.card.code) && fieldDesignation === \"cvv\") {\n          cipher.card.code = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.cardholderName) &&\n          fieldDesignation === \"cardholder\"\n        ) {\n          cipher.card.cardholderName = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.expiration) &&\n          fieldDesignation === \"expiry\" &&\n          fieldValue.length === 6\n        ) {\n          cipher.card.expMonth = (fieldValue as string).substr(4, 2);\n          if (cipher.card.expMonth[0] === \"0\") {\n            cipher.card.expMonth = cipher.card.expMonth.substr(1, 1);\n          }\n          cipher.card.expYear = (fieldValue as string).substr(0, 4);\n          return;\n        } else if (fieldDesignation === \"type\") {\n          // Skip since brand was determined from number above\n          return;\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        const identity = cipher.identity;\n        if (this.isNullOrWhitespace(identity.firstName) && fieldDesignation === \"firstname\") {\n          identity.firstName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.lastName) && fieldDesignation === \"lastname\") {\n          identity.lastName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.middleName) && fieldDesignation === \"initial\") {\n          identity.middleName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.phone) && fieldDesignation === \"defphone\") {\n          identity.phone = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.company) && fieldDesignation === \"company\") {\n          identity.company = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.email) && fieldDesignation === \"email\") {\n          identity.email = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.username) && fieldDesignation === \"username\") {\n          identity.username = fieldValue;\n          return;\n        } else if (fieldDesignation === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip } = field[valueKey];\n          identity.address1 = this.getValueOrDefault(street);\n          identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            identity.country = country.toUpperCase();\n          }\n          identity.postalCode = this.getValueOrDefault(zip);\n          return;\n        }\n      }\n\n      const fieldName = this.isNullOrWhitespace(field[nameKey]) ? \"no_name\" : field[nameKey];\n      if (\n        fieldName === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      const fieldType = field.k === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CategoryEnum,\n  Details,\n  ExportData,\n  FieldsEntity,\n  Item,\n  LoginFieldTypeEnum,\n  Overview,\n  PasswordHistoryEntity,\n  SectionsEntity,\n  UrlsEntity,\n  Value,\n  VaultsEntity,\n} from \"./types/onepassword-1pux-importer-types\";\n\nexport class OnePassword1PuxImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const exportData: ExportData = JSON.parse(data);\n\n    const account = exportData.accounts[0];\n    // TODO Add handling of multiple vaults\n    // const personalVaults = account.vaults[0].filter((v) => v.attrs.type === VaultAttributeTypeEnum.Personal);\n    account.vaults.forEach((vault: VaultsEntity) => {\n      vault.items.forEach((item: Item) => {\n        if (item.trashed === true) {\n          return;\n        }\n\n        const cipher = this.initLoginCipher();\n\n        const category = item.categoryUuid as CategoryEnum;\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.Password:\n          case CategoryEnum.WirelessRouter:\n          case CategoryEnum.Server:\n          case CategoryEnum.API_Credential:\n            cipher.type = CipherType.Login;\n            cipher.login = new LoginView();\n            break;\n          case CategoryEnum.CreditCard:\n          case CategoryEnum.BankAccount:\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            break;\n          case CategoryEnum.SecureNote:\n          case CategoryEnum.SoftwareLicense:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.MedicalRecord:\n            // case CategoryEnum.Document:\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case CategoryEnum.Identity:\n          case CategoryEnum.DriversLicense:\n          case CategoryEnum.OutdoorLicense:\n          case CategoryEnum.Membership:\n          case CategoryEnum.Passport:\n          case CategoryEnum.RewardsProgram:\n          case CategoryEnum.SocialSecurityNumber:\n            cipher.type = CipherType.Identity;\n            cipher.identity = new IdentityView();\n            break;\n          default:\n            break;\n        }\n\n        cipher.favorite = item.favIndex === 1 ? true : false;\n\n        this.processOverview(item.overview, cipher);\n\n        this.processLoginFields(item, cipher);\n\n        this.processDetails(category, item.details, cipher);\n\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n\n        this.processSections(category, item.details.sections, cipher);\n\n        if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n          cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        this.result.ciphers.push(cipher);\n      });\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processOverview(overview: Overview, cipher: CipherView) {\n    if (overview == null) {\n      return;\n    }\n\n    cipher.name = this.getValueOrDefault(overview.title);\n\n    if (overview.urls != null) {\n      const urls: string[] = [];\n      overview.urls.forEach((url: UrlsEntity) => {\n        if (!this.isNullOrWhitespace(url.url)) {\n          urls.push(url.url);\n        }\n      });\n      cipher.login.uris = this.makeUriArray(urls);\n    }\n\n    if (overview.tags != null && overview.tags.length > 0) {\n      const folderName = this.capitalize(overview.tags[0]);\n      this.processFolder(this.result, folderName);\n    }\n  }\n\n  private capitalize(inputString: string): string {\n    return inputString.trim().replace(/\\w\\S*/g, (w) => w.replace(/^\\w/, (c) => c.toUpperCase()));\n  }\n\n  private processLoginFields(item: Item, cipher: CipherView) {\n    if (item.details == null) {\n      return;\n    }\n\n    if (item.details.loginFields == null || item.details.loginFields.length === 0) {\n      return;\n    }\n\n    item.details.loginFields.forEach((loginField) => {\n      if (loginField.designation === \"username\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.username = loginField.value;\n        return;\n      }\n\n      if (loginField.designation === \"password\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.password = loginField.value;\n        return;\n      }\n\n      let fieldValue = loginField.value;\n      let fieldType: FieldType = FieldType.Text;\n      switch (loginField.fieldType) {\n        case LoginFieldTypeEnum.Password:\n          fieldType = FieldType.Hidden;\n          break;\n        case LoginFieldTypeEnum.CheckBox:\n          fieldValue = loginField.value !== \"\" ? \"true\" : \"false\";\n          fieldType = FieldType.Boolean;\n          break;\n        default:\n          break;\n      }\n      this.processKvp(cipher, loginField.name, fieldValue, fieldType);\n    });\n  }\n\n  private processDetails(category: CategoryEnum, details: Details, cipher: CipherView) {\n    if (category !== CategoryEnum.Password) {\n      return;\n    }\n\n    if (details == null) {\n      return;\n    }\n    cipher.login.password = details.password;\n  }\n\n  private processSections(category: CategoryEnum, sections: SectionsEntity[], cipher: CipherView) {\n    if (sections == null || sections.length === 0) {\n      return;\n    }\n\n    sections.forEach((section: SectionsEntity) => {\n      if (section.fields == null) {\n        return;\n      }\n\n      this.parseSectionFields(category, section.fields, cipher);\n    });\n  }\n\n  private parseSectionFields(category: CategoryEnum, fields: FieldsEntity[], cipher: CipherView) {\n    fields.forEach((field: FieldsEntity) => {\n      const valueKey = Object.keys(field.value)[0];\n      const anyField = field as any;\n\n      if (\n        anyField.value == null ||\n        anyField.value[valueKey] == null ||\n        anyField.value[valueKey] === \"\"\n      ) {\n        return;\n      }\n\n      const fieldName = this.getFieldName(field.id, field.title);\n      const fieldValue = this.extractValue(field.value, valueKey);\n\n      if (cipher.type === CipherType.Login) {\n        if (this.fillLogin(field, fieldValue, cipher)) {\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.WirelessRouter:\n            break;\n\n          case CategoryEnum.Server:\n            if (this.isNullOrWhitespace(cipher.login.uri) && field.id === \"url\") {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              return;\n            }\n            break;\n\n          case CategoryEnum.API_Credential:\n            if (this.fillApiCredentials(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.fillCreditCard(field, fieldValue, cipher)) {\n          return;\n        }\n\n        if (category === CategoryEnum.BankAccount) {\n          if (this.fillBankAccount(field, fieldValue, cipher)) {\n            return;\n          }\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        if (this.fillIdentity(field, fieldValue, cipher, valueKey)) {\n          return;\n        }\n        if (valueKey === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip, state } = field.value.address;\n          cipher.identity.address1 = this.getValueOrDefault(street);\n          cipher.identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            cipher.identity.country = country.toUpperCase();\n          }\n          cipher.identity.postalCode = this.getValueOrDefault(zip);\n          cipher.identity.state = this.getValueOrDefault(state);\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Identity:\n            break;\n          case CategoryEnum.DriversLicense:\n            if (this.fillDriversLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.OutdoorLicense:\n            if (this.fillOutdoorLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Membership:\n            if (this.fillMembership(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Passport:\n            if (this.fillPassport(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.RewardsProgram:\n            if (this.fillRewardsProgram(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.SocialSecurityNumber:\n            if (this.fillSSN(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (valueKey === \"email\") {\n        // fieldValue is an object casted into a string, so access the plain value instead\n        const { email_address, provider } = field.value.email;\n        this.processKvp(cipher, fieldName, email_address, FieldType.Text);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return;\n      }\n\n      // Do not include a password field if it's already in the history\n      if (\n        field.title === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      // TODO ?? If one of the fields is marked as guarded, then activate Password-Reprompt for the entire item\n      if (field.guarded && cipher.reprompt === CipherRepromptType.None) {\n        cipher.reprompt = CipherRepromptType.Password;\n      }\n\n      const fieldType = valueKey === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n\n  private getFieldName(id: string, title: string): string {\n    if (this.isNullOrWhitespace(title)) {\n      return id;\n    }\n\n    // Naive approach of checking if the fields id is usable\n    if (id.length > 25 && RegExp(/[0-9]{2}[A-Z]{2}/, \"i\").test(id)) {\n      return title;\n    }\n    return id;\n  }\n\n  private extractValue(value: Value, valueKey: string): string {\n    if (valueKey === \"date\") {\n      return new Date(value.date * 1000).toUTCString();\n    }\n\n    if (valueKey === \"monthYear\") {\n      return value.monthYear.toString();\n    }\n\n    return (value as any)[valueKey];\n  }\n\n  private fillLogin(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.username) && fieldName === \"username\") {\n      cipher.login.username = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"password\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (\n      this.isNullOrWhitespace(cipher.login.totp) &&\n      field.id != null &&\n      field.id.startsWith(\"TOTP_\")\n    ) {\n      cipher.login.totp = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillApiCredentials(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"credential\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.uri) && fieldName === \"hostname\") {\n      cipher.login.uris = this.makeUriArray(fieldValue);\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillCreditCard(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.number) && field.id === \"ccnum\") {\n      cipher.card.number = fieldValue;\n      cipher.card.brand = this.getCardBrand(fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.code) && field.id === \"cvv\") {\n      cipher.card.code = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"cardholder\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.expiration) && field.id === \"expiry\") {\n      const monthYear: string = fieldValue.toString().trim();\n      cipher.card.expMonth = monthYear.substring(4, 6);\n      if (cipher.card.expMonth[0] === \"0\") {\n        cipher.card.expMonth = cipher.card.expMonth.substring(1, 2);\n      }\n      cipher.card.expYear = monthYear.substring(0, 4);\n      return true;\n    }\n\n    if (field.id === \"type\") {\n      // Skip since brand was determined from number above\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillBankAccount(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"owner\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillIdentity(\n    field: FieldsEntity,\n    fieldValue: string,\n    cipher: CipherView,\n    valueKey: string\n  ): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"firstname\") {\n      cipher.identity.firstName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.lastName) && field.id === \"lastname\") {\n      cipher.identity.lastName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.middleName) && field.id === \"initial\") {\n      cipher.identity.middleName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"defphone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.email)) {\n      if (valueKey === \"email\") {\n        const { email_address, provider } = field.value.email;\n        cipher.identity.email = this.getValueOrDefault(email_address);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return true;\n      }\n\n      if (field.id === \"email\") {\n        cipher.identity.email = fieldValue;\n        return true;\n      }\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.username) && field.id === \"username\") {\n      cipher.identity.username = fieldValue;\n      return true;\n    }\n    return false;\n  }\n\n  private fillDriversLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.address1) && field.id === \"address\") {\n      cipher.identity.address1 = fieldValue;\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.licenseNumber) && field.id === \"number\") {\n      cipher.identity.licenseNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillOutdoorLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillMembership(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"org_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"phone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillPassport(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO Iso\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"issuing_country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.passportNumber) && field.id === \"number\") {\n      cipher.identity.passportNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillRewardsProgram(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillSSN(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.ssn) && field.id === \"number\") {\n      cipher.identity.ssn = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private parsePasswordHistory(historyItems: PasswordHistoryEntity[], cipher: CipherView) {\n    if (historyItems == null || historyItems.length === 0) {\n      return;\n    }\n\n    const maxSize = historyItems.length > 5 ? 5 : historyItems.length;\n    cipher.passwordHistory = historyItems\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nexport class CipherImportContext {\n  lowerProperty: string;\n  constructor(public importRecord: any, public property: string, public cipher: CipherView) {\n    this.lowerProperty = property.toLowerCase();\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\n\nexport const IgnoredProperties = [\n  \"ainfo\",\n  \"autosubmit\",\n  \"notesplain\",\n  \"ps\",\n  \"scope\",\n  \"tags\",\n  \"title\",\n  \"uuid\",\n  \"notes\",\n];\n\nexport abstract class OnePasswordCsvImporter extends BaseImporter implements Importer {\n  protected loginPropertyParsers = [\n    this.setLoginUsername,\n    this.setLoginPassword,\n    this.setLoginUris,\n  ];\n  protected creditCardPropertyParsers = [\n    this.setCreditCardNumber,\n    this.setCreditCardVerification,\n    this.setCreditCardCardholderName,\n    this.setCreditCardExpiry,\n  ];\n  protected identityPropertyParsers = [\n    this.setIdentityFirstName,\n    this.setIdentityInitial,\n    this.setIdentityLastName,\n    this.setIdentityUserName,\n    this.setIdentityEmail,\n    this.setIdentityPhone,\n    this.setIdentityCompany,\n  ];\n\n  abstract setCipherType(value: any, cipher: CipherView): void;\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true, {\n      quoteChar: '\"',\n      escapeChar: \"\\\\\",\n    });\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(this.getProp(value, \"title\"))) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.getProp(value, \"title\"), \"--\");\n\n      this.setNotes(value, cipher);\n\n      this.setCipherType(value, cipher);\n\n      let altUsername: string = null;\n      for (const property in value) {\n        // eslint-disable-next-line\n        if (!value.hasOwnProperty(property) || this.isNullOrWhitespace(value[property])) {\n          continue;\n        }\n\n        const context = new CipherImportContext(value, property, cipher);\n        if (cipher.type === CipherType.Login && this.setKnownLoginValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Card && this.setKnownCreditCardValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Identity && this.setKnownIdentityValue(context)) {\n          continue;\n        }\n\n        altUsername = this.setUnknownValue(context, altUsername);\n      }\n\n      if (\n        cipher.type === CipherType.Login &&\n        !this.isNullOrWhitespace(altUsername) &&\n        this.isNullOrWhitespace(cipher.login.username) &&\n        altUsername.indexOf(\"://\") === -1\n      ) {\n        cipher.login.username = altUsername;\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  protected getProp(obj: any, name: string): any {\n    const lowerObj = Object.entries(obj).reduce((agg: any, entry: [string, any]) => {\n      agg[entry[0].toLowerCase()] = entry[1];\n      return agg;\n    }, {});\n    return lowerObj[name.toLowerCase()];\n  }\n\n  protected getPropByRegexp(obj: any, regexp: RegExp): any {\n    const matchingKeys = Object.keys(obj).reduce((agg: string[], key: string) => {\n      if (key.match(regexp)) {\n        agg.push(key);\n      }\n      return agg;\n    }, []);\n    if (matchingKeys.length === 0) {\n      return null;\n    } else {\n      return obj[matchingKeys[0]];\n    }\n  }\n\n  protected getPropIncluding(obj: any, name: string): any {\n    const includesMap = Object.keys(obj).reduce((agg: string[], entry: string) => {\n      if (entry.toLowerCase().includes(name.toLowerCase())) {\n        agg.push(entry);\n      }\n      return agg;\n    }, []);\n    if (includesMap.length === 0) {\n      return null;\n    } else {\n      return obj[includesMap[0]];\n    }\n  }\n\n  protected setNotes(importRecord: any, cipher: CipherView) {\n    cipher.notes =\n      this.getValueOrDefault(this.getProp(importRecord, \"notesPlain\"), \"\") +\n      \"\\n\" +\n      this.getValueOrDefault(this.getProp(importRecord, \"notes\"), \"\") +\n      \"\\n\";\n    cipher.notes.trim();\n  }\n\n  protected setKnownLoginValue(context: CipherImportContext): boolean {\n    return this.loginPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownCreditCardValue(context: CipherImportContext): boolean {\n    return this.creditCardPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownIdentityValue(context: CipherImportContext): boolean {\n    return this.identityPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setUnknownValue(context: CipherImportContext, altUsername: string): string {\n    if (\n      IgnoredProperties.indexOf(context.lowerProperty) === -1 &&\n      !context.lowerProperty.startsWith(\"section:\") &&\n      !context.lowerProperty.startsWith(\"section \")\n    ) {\n      if (altUsername == null && context.lowerProperty === \"email\") {\n        return context.importRecord[context.property];\n      } else if (\n        context.lowerProperty === \"created date\" ||\n        context.lowerProperty === \"modified date\"\n      ) {\n        const readableDate = new Date(\n          parseInt(context.importRecord[context.property], 10) * 1000\n        ).toUTCString();\n        this.processKvp(context.cipher, \"1Password \" + context.property, readableDate);\n        return null;\n      }\n      if (\n        context.lowerProperty.includes(\"password\") ||\n        context.lowerProperty.includes(\"key\") ||\n        context.lowerProperty.includes(\"secret\")\n      ) {\n        this.processKvp(\n          context.cipher,\n          context.property,\n          context.importRecord[context.property],\n          FieldType.Hidden\n        );\n      } else {\n        this.processKvp(context.cipher, context.property, context.importRecord[context.property]);\n      }\n    }\n    return null;\n  }\n\n  protected setIdentityFirstName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.firstName) &&\n      context.lowerProperty.includes(\"first name\")\n    ) {\n      context.cipher.identity.firstName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityInitial(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.middleName) &&\n      context.lowerProperty.includes(\"initial\")\n    ) {\n      context.cipher.identity.middleName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityLastName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.lastName) &&\n      context.lowerProperty.includes(\"last name\")\n    ) {\n      context.cipher.identity.lastName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityUserName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.username) &&\n      context.lowerProperty.includes(\"username\")\n    ) {\n      context.cipher.identity.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityCompany(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.company) &&\n      context.lowerProperty.includes(\"company\")\n    ) {\n      context.cipher.identity.company = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityPhone(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.phone) &&\n      context.lowerProperty.includes(\"default phone\")\n    ) {\n      context.cipher.identity.phone = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityEmail(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.email) &&\n      context.lowerProperty.includes(\"email\")\n    ) {\n      context.cipher.identity.email = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardNumber(context: CipherImportContext): boolean {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.number) &&\n      context.lowerProperty.includes(\"number\")\n    ) {\n      context.cipher.card.number = context.importRecord[context.property];\n      context.cipher.card.brand = this.getCardBrand(context.cipher.card.number);\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardVerification(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.code) &&\n      context.lowerProperty.includes(\"verification number\")\n    ) {\n      context.cipher.card.code = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardCardholderName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.cardholderName) &&\n      context.lowerProperty.includes(\"cardholder name\")\n    ) {\n      context.cipher.card.cardholderName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\") &&\n      context.importRecord[context.property].length === 7\n    ) {\n      context.cipher.card.expMonth = (context.importRecord[context.property] as string).substr(\n        0,\n        2\n      );\n      if (context.cipher.card.expMonth[0] === \"0\") {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = (context.importRecord[context.property] as string).substr(3, 4);\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginPassword(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.password) &&\n      context.lowerProperty === \"password\"\n    ) {\n      context.cipher.login.password = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUsername(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.username) &&\n      context.lowerProperty === \"username\"\n    ) {\n      context.cipher.login.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUris(context: CipherImportContext) {\n    if (\n      (context.cipher.login.uris == null || context.cipher.login.uris.length === 0) &&\n      context.lowerProperty === \"urls\"\n    ) {\n      const urls = context.importRecord[context.property].split(this.newLineRegex);\n      context.cipher.login.uris = this.makeUriArray(urls);\n      return true;\n    } else if (context.lowerProperty === \"url\") {\n      if (context.cipher.login.uris == null) {\n        context.cipher.login.uris = [];\n      }\n      context.cipher.login.uris.concat(this.makeUriArray(context.importRecord[context.property]));\n      return true;\n    }\n    return false;\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { IgnoredProperties, OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordMacCsvImporter extends OnePasswordCsvImporter implements Importer {\n  setCipherType(value: any, cipher: CipherView) {\n    const onePassType = this.getValueOrDefault(this.getProp(value, \"type\"), \"Login\");\n    switch (onePassType) {\n      case \"Credit Card\":\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Identity\":\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Login\":\n      case \"Secure Note\":\n        IgnoredProperties.push(\"type\");\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\nimport { OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordWinCsvImporter extends OnePasswordCsvImporter implements Importer {\n  constructor() {\n    super();\n    this.identityPropertyParsers.push(this.setIdentityAddress);\n  }\n\n  setCipherType(value: any, cipher: CipherView) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: number/i)) &&\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: expiry date/i))\n    ) {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    }\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: first name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: initial/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: last name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /internet \\d+: email/i))\n    ) {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    }\n  }\n\n  setIdentityAddress(context: CipherImportContext) {\n    if (context.lowerProperty.match(/address \\d+: address/i)) {\n      this.processKvp(context.cipher, \"address\", context.importRecord[context.property]);\n      return true;\n    }\n    return false;\n  }\n\n  setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\")\n    ) {\n      const expSplit = (context.importRecord[context.property] as string).split(\"/\");\n      context.cipher.card.expMonth = expSplit[0];\n      if (context.cipher.card.expMonth[0] === \"0\" && context.cipher.card.expMonth.length === 2) {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = expSplit[2].length > 4 ? expSplit[2].substr(0, 4) : expSplit[2];\n      return true;\n    }\n    return false;\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PadlockCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let headers: string[] = null;\n    results.forEach((value) => {\n      if (headers == null) {\n        headers = value.map((v: string) => v);\n        return;\n      }\n\n      if (value.length < 2 || value.length !== headers.length) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value[1])) {\n        if (this.organization) {\n          const tags = (value[1] as string).split(\",\");\n          tags.forEach((tag) => {\n            tag = tag.trim();\n            let addCollection = true;\n            let collectionIndex = result.collections.length;\n\n            for (let i = 0; i < result.collections.length; i++) {\n              if (result.collections[i].name === tag) {\n                addCollection = false;\n                collectionIndex = i;\n                break;\n              }\n            }\n\n            if (addCollection) {\n              const collection = new CollectionView();\n              collection.name = tag;\n              result.collections.push(collection);\n            }\n\n            result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n          });\n        } else {\n          const tags = (value[1] as string).split(\",\");\n          const tag = tags.length > 0 ? tags[0].trim() : null;\n          this.processFolder(result, tag);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      for (let i = 2; i < value.length; i++) {\n        const header = headers[i].trim().toLowerCase();\n        if (this.isNullOrWhitespace(value[i]) || this.isNullOrWhitespace(header)) {\n          continue;\n        }\n\n        if (this.usernameFieldNames.indexOf(header) > -1) {\n          cipher.login.username = value[i];\n        } else if (this.passwordFieldNames.indexOf(header) > -1) {\n          cipher.login.password = value[i];\n        } else if (this.uriFieldNames.indexOf(header) > -1) {\n          cipher.login.uris = this.makeUriArray(value[i]);\n        } else {\n          this.processKvp(cipher, headers[i], value[i]);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassKeepCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValue(\"category\", value));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValue(\"description\", value);\n      cipher.name = this.getValueOrDefault(this.getValue(\"title\", value), \"--\");\n      cipher.login.username = this.getValue(\"username\", value);\n      cipher.login.password = this.getValue(\"password\", value);\n      cipher.login.uris = this.makeUriArray(this.getValue(\"site\", value));\n      this.processKvp(cipher, \"Password 2\", this.getValue(\"password2\", value));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private getValue(key: string, value: any) {\n    return this.getValueOrDefault(value[key], this.getValueOrDefault(value[\" \" + key]));\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { PasskyJsonExport } from \"./passky-json-types\";\n\nexport class PasskyJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const passkyExport: PasskyJsonExport = JSON.parse(data);\n    if (\n      passkyExport == null ||\n      passkyExport.passwords == null ||\n      passkyExport.passwords.length === 0\n    ) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (passkyExport.encrypted == true) {\n      result.success = false;\n      result.errorMessage = \"Unable to import an encrypted passky backup.\";\n      return Promise.resolve(result);\n    }\n\n    passkyExport.passwords.forEach((record) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = record.website;\n      cipher.login.username = record.username;\n      cipher.login.password = record.password;\n\n      cipher.login.uris = this.makeUriArray(record.website);\n      cipher.notes = record.message;\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassmanJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((credential: any) => {\n      if (credential.tags != null && credential.tags.length > 0) {\n        const folderName = credential.tags[0].text;\n        this.processFolder(result, folderName);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = credential.label;\n\n      cipher.login.username = this.getValueOrDefault(credential.username);\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.url);\n      cipher.notes += this.getValueOrDefault(credential.description, \"\");\n      if (credential.otp != null) {\n        cipher.login.totp = this.getValueOrDefault(credential.otp.secret);\n      }\n\n      if (credential.custom_fields != null) {\n        credential.custom_fields.forEach((customField: any) => {\n          switch (customField.field_type) {\n            case \"text\":\n            case \"password\":\n              this.processKvp(cipher, customField.label, customField.value);\n              break;\n          }\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasspackCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const tagsJson = !this.isNullOrWhitespace(value.Tags) ? JSON.parse(value.Tags) : null;\n      const tags: string[] =\n        tagsJson != null && tagsJson.tags != null && tagsJson.tags.length > 0\n          ? tagsJson.tags\n              .map((tagJson: string) => {\n                try {\n                  const t = JSON.parse(tagJson);\n                  return this.getValueOrDefault(t.tag);\n                } catch {\n                  // Ignore error\n                }\n                return null;\n              })\n              .filter((t: string) => !this.isNullOrWhitespace(t))\n          : null;\n\n      if (this.organization && tags != null && tags.length > 0) {\n        tags.forEach((tag) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === tag) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = tag;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization && tags != null && tags.length > 0) {\n        this.processFolder(result, tags[0]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes, \"\");\n      cipher.notes += \"\\n\\n\" + this.getValueOrDefault(value[\"Shared Notes\"], \"\") + \"\\n\";\n      cipher.name = this.getValueOrDefault(value[\"Entry Name\"], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User ID\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n        value.__parsed_extra.forEach((extra: string) => {\n          if (!this.isNullOrWhitespace(extra)) {\n            cipher.notes += \"\\n\" + extra;\n          }\n        });\n      }\n\n      const fieldsJson = !this.isNullOrWhitespace(value[\"Extra Fields\"])\n        ? JSON.parse(value[\"Extra Fields\"])\n        : null;\n      const fields =\n        fieldsJson != null && fieldsJson.extraFields != null && fieldsJson.extraFields.length > 0\n          ? fieldsJson.extraFields.map((fieldJson: string) => {\n              try {\n                return JSON.parse(fieldJson);\n              } catch {\n                // Ignore error\n              }\n              return null;\n            })\n          : null;\n      if (fields != null) {\n        fields.forEach((f: any) => {\n          if (f != null) {\n            this.processKvp(cipher, f.name, f.data);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordAgentCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let newVersion = true;\n    results.forEach((value) => {\n      if (value.length !== 5 && value.length < 9) {\n        return;\n      }\n      const altFormat = value.length === 10 && value[0] === \"0\";\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[altFormat ? 1 : 0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[altFormat ? 2 : 1]);\n      cipher.login.password = this.getValueOrDefault(value[altFormat ? 3 : 2]);\n      if (value.length === 5) {\n        newVersion = false;\n        cipher.notes = this.getValueOrDefault(value[4]);\n        cipher.login.uris = this.makeUriArray(value[3]);\n      } else {\n        const folder = this.getValueOrDefault(value[altFormat ? 9 : 8], \"(None)\");\n        let folderName = folder !== \"(None)\" ? folder.split(\"\\\\\").join(\"/\") : null;\n        if (folderName != null) {\n          folderName = folder.split(\" > \").join(\"/\");\n          folderName = folder.split(\">\").join(\"/\");\n        }\n        this.processFolder(result, folderName);\n        cipher.notes = this.getValueOrDefault(value[altFormat ? 5 : 3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (newVersion && this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordBossJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.items == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    results.folders.forEach((value: any) => {\n      foldersMap.set(value.id, value.name);\n    });\n    const foldersIndexMap = new Map<string, number>();\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((value: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.login.uris = this.makeUriArray(value.login_url);\n\n      if (value.folder != null && foldersIndexMap.has(value.folder)) {\n        result.folderRelationships.push([result.ciphers.length, foldersIndexMap.get(value.folder)]);\n      }\n\n      if (value.identifiers == null) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value.identifiers.notes)) {\n        cipher.notes = value.identifiers.notes.split(\"\\\\r\\\\n\").join(\"\\n\").split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (value.type === \"CreditCard\") {\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n      }\n\n      for (const property in value.identifiers) {\n        // eslint-disable-next-line\n        if (!value.identifiers.hasOwnProperty(property)) {\n          continue;\n        }\n        const valObj = value.identifiers[property];\n        const val = valObj != null ? valObj.toString() : null;\n        if (\n          this.isNullOrWhitespace(val) ||\n          property === \"notes\" ||\n          property === \"ignoreItemInSecurityScore\"\n        ) {\n          continue;\n        }\n\n        if (property === \"custom_fields\") {\n          valObj.forEach((cf: any) => {\n            this.processKvp(cipher, cf.name, cf.value);\n          });\n          continue;\n        }\n\n        if (cipher.type === CipherType.Card) {\n          if (property === \"cardNumber\") {\n            cipher.card.number = val;\n            cipher.card.brand = this.getCardBrand(val);\n            continue;\n          } else if (property === \"nameOnCard\") {\n            cipher.card.cardholderName = val;\n            continue;\n          } else if (property === \"security_code\") {\n            cipher.card.code = val;\n            continue;\n          } else if (property === \"expires\") {\n            try {\n              const expDate = new Date(val);\n              cipher.card.expYear = expDate.getFullYear().toString();\n              cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n            } catch {\n              // Ignore error\n            }\n            continue;\n          } else if (property === \"cardType\") {\n            continue;\n          }\n        } else {\n          if (\n            (property === \"username\" || property === \"email\") &&\n            this.isNullOrWhitespace(cipher.login.username)\n          ) {\n            cipher.login.username = val;\n            continue;\n          } else if (property === \"password\") {\n            cipher.login.password = val;\n            continue;\n          } else if (property === \"totp\") {\n            cipher.login.totp = val;\n            continue;\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(property) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n            continue;\n          }\n        }\n\n        this.processKvp(cipher, property, val);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordDragonXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const records = doc.querySelectorAll(\"PasswordManager > record\");\n    Array.from(records).forEach((record) => {\n      const category = this.querySelectorDirectChild(record, \"Category\");\n      const categoryText =\n        category != null &&\n        !this.isNullOrWhitespace(category.textContent) &&\n        category.textContent !== \"Unfiled\"\n          ? category.textContent\n          : null;\n      this.processFolder(result, categoryText);\n\n      const accountName = this.querySelectorDirectChild(record, \"Account-Name\");\n      const userId = this.querySelectorDirectChild(record, \"User-Id\");\n      const password = this.querySelectorDirectChild(record, \"Password\");\n      const url = this.querySelectorDirectChild(record, \"URL\");\n      const notes = this.querySelectorDirectChild(record, \"Notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name =\n        accountName != null ? this.getValueOrDefault(accountName.textContent, \"--\") : \"--\";\n      cipher.notes = notes != null ? this.getValueOrDefault(notes.textContent) : \"\";\n      cipher.login.username = userId != null ? this.getValueOrDefault(userId.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      const attributes: string[] = [];\n      for (let i = 1; i <= 10; i++) {\n        attributes.push(\"Attribute-\" + i);\n      }\n\n      this.querySelectorAllDirectChild(record, attributes.join(\",\")).forEach((attr) => {\n        if (this.isNullOrWhitespace(attr.textContent) || attr.textContent === \"null\") {\n          return;\n        }\n        this.processKvp(cipher, attr.tagName, attr.textContent);\n      });\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordSafeXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const passwordSafe = doc.querySelector(\"passwordsafe\");\n    if (passwordSafe == null) {\n      result.errorMessage = \"Missing `passwordsafe` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const notesDelimiter = passwordSafe.getAttribute(\"delimiter\");\n    const entries = doc.querySelectorAll(\"passwordsafe > entry\");\n    Array.from(entries).forEach((entry) => {\n      const group = this.querySelectorDirectChild(entry, \"group\");\n      const groupText =\n        group != null && !this.isNullOrWhitespace(group.textContent)\n          ? group.textContent.split(\".\").join(\"/\")\n          : null;\n      this.processFolder(result, groupText);\n\n      const title = this.querySelectorDirectChild(entry, \"title\");\n      const username = this.querySelectorDirectChild(entry, \"username\");\n      const email = this.querySelectorDirectChild(entry, \"email\");\n      const password = this.querySelectorDirectChild(entry, \"password\");\n      const url = this.querySelectorDirectChild(entry, \"url\");\n      const notes = this.querySelectorDirectChild(entry, \"notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name = title != null ? this.getValueOrDefault(title.textContent, \"--\") : \"--\";\n      cipher.notes =\n        notes != null\n          ? this.getValueOrDefault(notes.textContent, \"\").split(notesDelimiter).join(\"\\n\")\n          : null;\n      cipher.login.username =\n        username != null ? this.getValueOrDefault(username.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      if (this.isNullOrWhitespace(cipher.login.username) && email != null) {\n        cipher.login.username = this.getValueOrDefault(email.textContent);\n      } else if (email != null && !this.isNullOrWhitespace(email.textContent)) {\n        cipher.notes = this.isNullOrWhitespace(cipher.notes)\n          ? \"Email: \" + email.textContent\n          : cipher.notes + \"\\n\" + \"Email: \" + email.textContent;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordWalletTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 1) {\n        return;\n      }\n      if (value.length > 5) {\n        this.processFolder(result, value[5]);\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      if (value.length > 4) {\n        cipher.notes = this.getValueOrDefault(value[4], \"\").split(\"¬\").join(\"\\n\");\n      }\n      if (value.length > 2) {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n      }\n      if (value.length > 3) {\n        cipher.login.password = this.getValueOrDefault(value[3]);\n      }\n      if (value.length > 1) {\n        cipher.login.uris = this.makeUriArray(value[1]);\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  AppPasswordEntry,\n  BookmarkEntry,\n  EnvironmentVariablesEntry,\n  FoldersEntity,\n  GPGEntry,\n  NotesEntry,\n  PsonoItemTypes,\n  PsonoJsonExport,\n  TOTPEntry,\n  WebsitePasswordEntry,\n} from \"./psono-json-types\";\n\nexport class PsonoJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const psonoExport: PsonoJsonExport = JSON.parse(data);\n    if (psonoExport == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    this.parseFolders(result, psonoExport.folders);\n    this.handleItemParsing(result, psonoExport.items);\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFolders(result: ImportResult, folders: FoldersEntity[]) {\n    if (folders == null || folders.length === 0) {\n      return;\n    }\n\n    folders.forEach((folder) => {\n      if (folder.items == null || folder.items.length == 0) {\n        return;\n      }\n\n      this.processFolder(result, folder.name);\n\n      this.handleItemParsing(result, folder.items);\n    });\n  }\n\n  private handleItemParsing(result: ImportResult, items?: PsonoItemTypes[]) {\n    if (items == null || items.length === 0) {\n      return;\n    }\n\n    items.forEach((record) => {\n      const cipher = this.parsePsonoItem(record);\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n  }\n\n  private parsePsonoItem(item: PsonoItemTypes): CipherView {\n    const cipher = this.initLoginCipher();\n\n    switch (item.type) {\n      case \"website_password\":\n        this.parseWebsiteLogins(item, cipher);\n        break;\n      case \"application_password\":\n        this.parseApplicationPasswords(item, cipher);\n        break;\n      case \"environment_variables\":\n        this.parseEnvironmentVariables(item, cipher);\n        break;\n      case \"totp\":\n        this.parseTOTP(item, cipher);\n        break;\n      case \"bookmark\":\n        this.parseBookmarks(item, cipher);\n        break;\n      // Skipping this until we can save GPG into notes/custom fields\n      // case \"mail_gpg_own_key\":\n      //   this.parseGPG(item, cipher);\n      //   break;\n      case \"note\":\n        this.parseNotes(item, cipher);\n        break;\n      default:\n        break;\n    }\n\n    return cipher;\n  }\n\n  readonly WEBSITE_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"website_password_title\",\n    \"website_password_notes\",\n    \"website_password_username\",\n    \"website_password_password\",\n    \"website_password_url\",\n    \"autosubmit\",\n    \"website_password_auto_submit\",\n    \"urlfilter\",\n    \"website_password_url_filter\",\n  ]);\n  private parseWebsiteLogins(entry: WebsitePasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"website_password\") {\n      return;\n    }\n\n    cipher.name = entry.website_password_title;\n    cipher.notes = entry.website_password_notes;\n\n    cipher.login.username = entry.website_password_username;\n    cipher.login.password = entry.website_password_password;\n\n    cipher.login.uris = this.makeUriArray(entry.website_password_url);\n\n    this.processKvp(\n      cipher,\n      \"website_password_auto_submit\",\n      entry.website_password_auto_submit.toString(),\n      FieldType.Boolean\n    );\n\n    this.processKvp(cipher, \"website_password_url_filter\", entry.website_password_url_filter);\n\n    this.importUnmappedFields(cipher, entry, this.WEBSITE_mappedValues);\n  }\n\n  readonly APP_PWD_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"application_password_title\",\n    \"application_password_notes\",\n    \"application_password_username\",\n    \"application_password_password\",\n  ]);\n  private parseApplicationPasswords(entry: AppPasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"application_password\") {\n      return;\n    }\n\n    cipher.name = entry.application_password_title;\n    cipher.notes = entry.application_password_notes;\n\n    cipher.login.username = entry.application_password_username;\n    cipher.login.password = entry.application_password_password;\n\n    this.importUnmappedFields(cipher, entry, this.APP_PWD_mappedValues);\n  }\n\n  readonly BOOKMARK_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"bookmark_title\",\n    \"bookmark_notes\",\n    \"bookmark_url\",\n  ]);\n  private parseBookmarks(entry: BookmarkEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"bookmark\") {\n      return;\n    }\n\n    cipher.name = entry.bookmark_title;\n    cipher.notes = entry.bookmark_notes;\n\n    cipher.login.uris = this.makeUriArray(entry.bookmark_url);\n\n    this.importUnmappedFields(cipher, entry, this.BOOKMARK_mappedValues);\n  }\n\n  readonly NOTES_mappedValues = new Set([\"type\", \"name\", \"note_title\", \"note_notes\"]);\n  private parseNotes(entry: NotesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"note\") {\n      return;\n    }\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.note_title;\n    cipher.notes = entry.note_notes;\n\n    this.importUnmappedFields(cipher, entry, this.NOTES_mappedValues);\n  }\n\n  readonly TOTP_mappedValues = new Set([\"type\", \"name\", \"totp_title\", \"totp_notes\", \"totp_code\"]);\n  private parseTOTP(entry: TOTPEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"totp\") {\n      return;\n    }\n\n    cipher.name = entry.totp_title;\n    cipher.notes = entry.totp_notes;\n\n    cipher.login.totp = entry.totp_code;\n\n    this.importUnmappedFields(cipher, entry, this.TOTP_mappedValues);\n  }\n\n  readonly ENV_VARIABLES_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"environment_variables_title\",\n    \"environment_variables_notes\",\n    \"environment_variables_variables\",\n  ]);\n  private parseEnvironmentVariables(entry: EnvironmentVariablesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"environment_variables\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.environment_variables_title;\n    cipher.notes = entry.environment_variables_notes;\n\n    entry.environment_variables_variables.forEach((KvPair) => {\n      this.processKvp(cipher, KvPair.key, KvPair.value);\n    });\n\n    this.importUnmappedFields(cipher, entry, this.ENV_VARIABLES_mappedValues);\n  }\n\n  readonly GPG_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"mail_gpg_own_key_title\",\n    \"mail_gpg_own_key_public\",\n    \"mail_gpg_own_key_name\",\n    \"mail_gpg_own_key_email\",\n    \"mail_gpg_own_key_private\",\n  ]);\n  private parseGPG(entry: GPGEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"mail_gpg_own_key\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.mail_gpg_own_key_title;\n    cipher.notes = entry.mail_gpg_own_key_public;\n\n    this.processKvp(cipher, \"mail_gpg_own_key_name\", entry.mail_gpg_own_key_name);\n    this.processKvp(cipher, \"mail_gpg_own_key_email\", entry.mail_gpg_own_key_email);\n    this.processKvp(\n      cipher,\n      \"mail_gpg_own_key_private\",\n      entry.mail_gpg_own_key_private,\n      FieldType.Hidden\n    );\n\n    this.importUnmappedFields(cipher, entry, this.GPG_mappedValues);\n  }\n\n  private importUnmappedFields(\n    cipher: CipherView,\n    entry: PsonoItemTypes,\n    mappedValues: Set<string>\n  ) {\n    const unmappedFields = Object.keys(entry).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = entry as any;\n      this.processKvp(cipher, key, item[key].toString());\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RememBearCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.trash === \"true\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.notes);\n      if (value.type === \"LoginItem\") {\n        cipher.login.uris = this.makeUriArray(value.website);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      } else if (value.type === \"CreditCardItem\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.verification);\n\n        try {\n          const expMonth = this.getValueOrDefault(value.expiryMonth);\n          if (expMonth != null) {\n            const expMonthNumber = parseInt(expMonth, null);\n            if (expMonthNumber != null && expMonthNumber >= 1 && expMonthNumber <= 12) {\n              cipher.card.expMonth = expMonthNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n        try {\n          const expYear = this.getValueOrDefault(value.expiryYear);\n          if (expYear != null) {\n            const expYearNumber = parseInt(expYear, null);\n            if (expYearNumber != null) {\n              cipher.card.expYear = expYearNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n\n        const pin = this.getValueOrDefault(value.pin);\n        if (pin != null) {\n          this.processKvp(cipher, \"PIN\", pin);\n        }\n        const zip = this.getValueOrDefault(value.zipCode);\n        if (zip != null) {\n          this.processKvp(cipher, \"Zip Code\", zip);\n        }\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RoboFormCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let i = 1;\n    results.forEach((value) => {\n      const folder =\n        !this.isNullOrWhitespace(value.Folder) && value.Folder.startsWith(\"/\")\n          ? value.Folder.replace(\"/\", \"\")\n          : value.Folder;\n      const folderName = !this.isNullOrWhitespace(folder) ? folder : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Login);\n      cipher.login.password = this.getValueOrDefault(value.Pwd);\n      cipher.login.uris = this.makeUriArray(value.Url);\n\n      if (!this.isNullOrWhitespace(value.Rf_fields)) {\n        let fields: string[] = [value.Rf_fields];\n        if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n          fields = fields.concat(value.__parsed_extra);\n        }\n        fields.forEach((field: string) => {\n          const parts = field.split(\":\");\n          if (parts.length < 3) {\n            return;\n          }\n          const key = parts[0] === \"-no-name-\" ? null : parts[0];\n          const val = parts.length === 4 && parts[2] === \"rck\" ? parts[1] : parts[2];\n          this.processKvp(cipher, key, val);\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n\n      if (\n        i === results.length &&\n        cipher.name === \"--\" &&\n        this.isNullOrWhitespace(cipher.login.password)\n      ) {\n        return;\n      }\n\n      result.ciphers.push(cipher);\n      i++;\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafariCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url ?? value.URL);\n      cipher.login.totp = this.getValueOrDefault(value.OTPAuth);\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafeInCloudXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const db = doc.querySelector(\"database\");\n    if (db == null) {\n      result.errorMessage = \"Missing `database` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, number>();\n\n    Array.from(doc.querySelectorAll(\"database > label\")).forEach((labelEl) => {\n      const name = labelEl.getAttribute(\"name\");\n      const id = labelEl.getAttribute(\"id\");\n      if (!this.isNullOrWhitespace(name) && !this.isNullOrWhitespace(id)) {\n        foldersMap.set(id, result.folders.length);\n        const folder = new FolderView();\n        folder.name = name;\n        result.folders.push(folder);\n      }\n    });\n\n    Array.from(doc.querySelectorAll(\"database > card\")).forEach((cardEl) => {\n      if (cardEl.getAttribute(\"template\") === \"true\" || cardEl.getAttribute(\"deleted\") === \"true\") {\n        return;\n      }\n\n      const labelIdEl = this.querySelectorDirectChild(cardEl, \"label_id\");\n      if (labelIdEl != null) {\n        const labelId = labelIdEl.textContent;\n        if (!this.isNullOrWhitespace(labelId) && foldersMap.has(labelId)) {\n          result.folderRelationships.push([result.ciphers.length, foldersMap.get(labelId)]);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(cardEl.getAttribute(\"title\"), \"--\");\n\n      if (cardEl.getAttribute(\"star\") === \"true\") {\n        cipher.favorite = true;\n      }\n\n      const cardType = cardEl.getAttribute(\"type\");\n      if (cardType === \"note\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      } else {\n        Array.from(this.querySelectorAllDirectChild(cardEl, \"field\")).forEach((fieldEl) => {\n          const text = fieldEl.textContent;\n          if (this.isNullOrWhitespace(text)) {\n            return;\n          }\n          const name = fieldEl.getAttribute(\"name\");\n          const fieldType = this.getValueOrDefault(fieldEl.getAttribute(\"type\"), \"\").toLowerCase();\n          if (fieldType === \"login\") {\n            cipher.login.username = text;\n          } else if (fieldType === \"password\" || fieldType === \"secret\") {\n            // safeInCloud allows for more than one password. we just insert them here and find the one used as password later\n            this.processKvp(cipher, name, text, FieldType.Hidden);\n          } else if (fieldType === \"one_time_password\") {\n            cipher.login.totp = text;\n          } else if (fieldType === \"notes\") {\n            cipher.notes += text + \"\\n\";\n          } else if (fieldType === \"weblogin\" || fieldType === \"website\") {\n            cipher.login.uris = this.makeUriArray(text);\n          } else {\n            this.processKvp(cipher, name, text);\n          }\n        });\n      }\n\n      Array.from(this.querySelectorAllDirectChild(cardEl, \"notes\")).forEach((notesEl) => {\n        cipher.notes += notesEl.textContent + \"\\n\";\n      });\n\n      this.setPassword(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  // Choose a password from all passwords. Take one that has password in its name, or the first one if there is no such entry\n  // if its name is password, we can safely remove it form the fields. otherwise, it would maybe be best to keep it as a hidden field\n  setPassword(cipher: CipherView) {\n    const candidates = cipher.fields.filter((field) => field.type === FieldType.Hidden);\n    if (!candidates.length) {\n      return;\n    }\n\n    let choice: FieldView;\n    for (const field of candidates) {\n      if (this.passwordFieldNames.includes(field.name.toLowerCase())) {\n        choice = field;\n        cipher.fields = cipher.fields.filter((f) => f !== choice);\n        break;\n      }\n    }\n\n    if (!choice) {\n      choice = candidates[0];\n    }\n\n    cipher.login.password = choice.value;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SaferPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.nameFromUrl(value.url), \"--\");\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SecureSafeCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title);\n      cipher.notes = this.getValueOrDefault(value.Comment);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SplashIdCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      this.processFolder(result, this.getValueOrDefault(value[value.length - 1]));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 2], \"\");\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n\n      if (value[0] === \"Web Logins\" || value[0] === \"Servers\" || value[0] === \"Email Accounts\") {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n        cipher.login.password = this.getValueOrDefault(value[3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n        this.parseFieldsToNotes(cipher, 5, value);\n      } else {\n        this.parseFieldsToNotes(cipher, 2, value);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFieldsToNotes(cipher: CipherView, startIndex: number, value: any) {\n    // last 3 rows do not get parsed\n    for (let i = startIndex; i < value.length - 3; i++) {\n      if (this.isNullOrWhitespace(value[i])) {\n        continue;\n      }\n      cipher.notes += value[i] + \"\\n\";\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class StickyPasswordXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const loginNodes = doc.querySelectorAll(\"root > Database > Logins > Login\");\n    Array.from(loginNodes).forEach((loginNode) => {\n      const accountId = loginNode.getAttribute(\"ID\");\n      if (this.isNullOrWhitespace(accountId)) {\n        return;\n      }\n\n      const usernameText = loginNode.getAttribute(\"Name\");\n      const passwordText = loginNode.getAttribute(\"Password\");\n      let titleText: string = null;\n      let linkText: string = null;\n      let notesText: string = null;\n      let groupId: string = null;\n      let groupText: string = null;\n\n      const accountLogin = doc.querySelector(\n        \"root > Database > Accounts > Account > \" +\n          'LoginLinks > Login[SourceLoginID=\"' +\n          accountId +\n          '\"]'\n      );\n      if (accountLogin != null) {\n        const account = accountLogin.parentElement.parentElement;\n        if (account != null) {\n          titleText = account.getAttribute(\"Name\");\n          linkText = account.getAttribute(\"Link\");\n          groupId = account.getAttribute(\"ParentID\");\n          notesText = account.getAttribute(\"Comments\");\n          if (!this.isNullOrWhitespace(notesText)) {\n            notesText = notesText.split(\"/n\").join(\"\\n\");\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(groupId)) {\n        groupText = this.buildGroupText(doc, groupId, \"\");\n        this.processFolder(result, groupText);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(titleText, \"--\");\n      cipher.notes = this.getValueOrDefault(notesText);\n      cipher.login.username = this.getValueOrDefault(usernameText);\n      cipher.login.password = this.getValueOrDefault(passwordText);\n      cipher.login.uris = this.makeUriArray(linkText);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  buildGroupText(doc: Document, groupId: string, groupText: string): string {\n    const group = doc.querySelector('root > Database > Groups > Group[ID=\"' + groupId + '\"]');\n    if (group == null) {\n      return groupText;\n    }\n    if (!this.isNullOrWhitespace(groupText)) {\n      groupText = \"/\" + groupText;\n    }\n    groupText = group.getAttribute(\"Name\") + groupText;\n    return this.buildGroupText(doc, group.getAttribute(\"ParentID\"), groupText);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst PropertiesToIgnore = [\n  \"kind\",\n  \"autologin\",\n  \"favorite\",\n  \"hexcolor\",\n  \"protectedwithpassword\",\n  \"subdomainonly\",\n  \"type\",\n  \"tk_export_version\",\n  \"note\",\n  \"title\",\n  \"document_content\",\n];\n\nexport class TrueKeyCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.favorite, \"\").toLowerCase() === \"true\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.notes = this.getValueOrDefault(value.memo, \"\");\n      cipher.login.username = this.getValueOrDefault(value.login);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n\n      if (value.kind !== \"login\") {\n        cipher.name = this.getValueOrDefault(value.title, \"--\");\n        cipher.notes = this.getValueOrDefault(value.note, \"\");\n      }\n\n      if (value.kind === \"cc\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        if (!this.isNullOrWhitespace(value.expiryDate)) {\n          try {\n            const expDate = new Date(value.expiryDate);\n            cipher.card.expYear = expDate.getFullYear().toString();\n            cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n          } catch {\n            // Ignore error\n          }\n        }\n      } else if (value.kind !== \"login\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = this.getValueOrDefault(value.document_content, \"\");\n        }\n        for (const property in value) {\n          if (\n            value.hasOwnProperty(property) && // eslint-disable-line\n            PropertiesToIgnore.indexOf(property.toLowerCase()) < 0 &&\n            !this.isNullOrWhitespace(value[property])\n          ) {\n            this.processKvp(cipher, property, value[property]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class UpmCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length !== 5) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.notes = this.getValueOrDefault(value[4]);\n      cipher.login.username = this.getValueOrDefault(value[1]);\n      cipher.login.password = this.getValueOrDefault(value[2]);\n      cipher.login.uris = this.makeUriArray(value[3]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class YotiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User name\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ZohoVaultCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (\n        this.isNullOrWhitespace(value[\"Password Name\"]) &&\n        this.isNullOrWhitespace(value[\"Secret Name\"])\n      ) {\n        return;\n      }\n      this.processFolder(result, this.getValueOrDefault(value.ChamberName));\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite, \"0\") === \"1\";\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(\n        value[\"Password Name\"],\n        this.getValueOrDefault(value[\"Secret Name\"], \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(\n        this.getValueOrDefault(value[\"Password URL\"], this.getValueOrDefault(value[\"Secret URL\"]))\n      );\n      this.parseData(cipher, value.SecretData);\n      this.parseData(cipher, value.CustomData);\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseData(cipher: CipherView, data: string) {\n    if (this.isNullOrWhitespace(data)) {\n      return;\n    }\n    const dataLines = this.splitNewLine(data);\n    dataLines.forEach((line) => {\n      const delimPosition = line.indexOf(\":\");\n      if (delimPosition < 0) {\n        return;\n      }\n      const field = line.substring(0, delimPosition);\n      const value = line.length > delimPosition ? line.substring(delimPosition + 1) : null;\n      if (\n        this.isNullOrWhitespace(field) ||\n        this.isNullOrWhitespace(value) ||\n        field === \"SecretType\"\n      ) {\n        return;\n      }\n      const fieldLower = field.toLowerCase();\n      if (cipher.login.username == null && this.usernameFieldNames.indexOf(fieldLower) > -1) {\n        cipher.login.username = value;\n      } else if (\n        cipher.login.password == null &&\n        this.passwordFieldNames.indexOf(fieldLower) > -1\n      ) {\n        cipher.login.password = value;\n      } else {\n        this.processKvp(cipher, field, value);\n      }\n    });\n  }\n}\n","export interface ImportOption {\n  id: string;\n  name: string;\n}\n\nexport const featuredImportOptions = [\n  { id: \"bitwardenjson\", name: \"Bitwarden (json)\" },\n  { id: \"bitwardencsv\", name: \"Bitwarden (csv)\" },\n  { id: \"chromecsv\", name: \"Chrome (csv)\" },\n  { id: \"dashlanecsv\", name: \"Dashlane (csv)\" },\n  { id: \"firefoxcsv\", name: \"Firefox (csv)\" },\n  { id: \"keepass2xml\", name: \"KeePass 2 (xml)\" },\n  { id: \"lastpasscsv\", name: \"LastPass (csv)\" },\n  { id: \"safaricsv\", name: \"Safari and macOS (csv)\" },\n  { id: \"1password1pux\", name: \"1Password (1pux)\" },\n] as const;\n\nexport const regularImportOptions = [\n  { id: \"keepassxcsv\", name: \"KeePassX (csv)\" },\n  { id: \"1password1pif\", name: \"1Password (1pif)\" },\n  { id: \"1passwordwincsv\", name: \"1Password 6 and 7 Windows (csv)\" },\n  { id: \"1passwordmaccsv\", name: \"1Password 6 and 7 Mac (csv)\" },\n  { id: \"dashlanejson\", name: \"Dashlane (json)\" },\n  { id: \"roboformcsv\", name: \"RoboForm (csv)\" },\n  { id: \"keepercsv\", name: \"Keeper (csv)\" },\n  // Temporarily remove this option for the Feb release\n  // { id: \"keeperjson\", name: \"Keeper (json)\" },\n  { id: \"enpasscsv\", name: \"Enpass (csv)\" },\n  { id: \"enpassjson\", name: \"Enpass (json)\" },\n  { id: \"safeincloudxml\", name: \"SafeInCloud (xml)\" },\n  { id: \"pwsafexml\", name: \"Password Safe (xml)\" },\n  { id: \"stickypasswordxml\", name: \"Sticky Password (xml)\" },\n  { id: \"msecurecsv\", name: \"mSecure (csv)\" },\n  { id: \"truekeycsv\", name: \"True Key (csv)\" },\n  { id: \"passwordbossjson\", name: \"Password Boss (json)\" },\n  { id: \"zohovaultcsv\", name: \"Zoho Vault (csv)\" },\n  { id: \"splashidcsv\", name: \"SplashID (csv)\" },\n  { id: \"passworddragonxml\", name: \"Password Dragon (xml)\" },\n  { id: \"padlockcsv\", name: \"Padlock (csv)\" },\n  { id: \"passboltcsv\", name: \"Passbolt (csv)\" },\n  { id: \"clipperzhtml\", name: \"Clipperz (html)\" },\n  { id: \"aviracsv\", name: \"Avira (csv)\" },\n  { id: \"saferpasscsv\", name: \"SaferPass (csv)\" },\n  { id: \"upmcsv\", name: \"Universal Password Manager (csv)\" },\n  { id: \"ascendocsv\", name: \"Ascendo DataVault (csv)\" },\n  { id: \"meldiumcsv\", name: \"Meldium (csv)\" },\n  { id: \"passkeepcsv\", name: \"PassKeep (csv)\" },\n  { id: \"operacsv\", name: \"Opera (csv)\" },\n  { id: \"vivaldicsv\", name: \"Vivaldi (csv)\" },\n  { id: \"gnomejson\", name: \"GNOME Passwords and Keys/Seahorse (json)\" },\n  { id: \"blurcsv\", name: \"Blur (csv)\" },\n  { id: \"passwordagentcsv\", name: \"Password Agent (csv)\" },\n  { id: \"passpackcsv\", name: \"Passpack (csv)\" },\n  { id: \"passmanjson\", name: \"Passman (json)\" },\n  { id: \"avastcsv\", name: \"Avast Passwords (csv)\" },\n  { id: \"avastjson\", name: \"Avast Passwords (json)\" },\n  { id: \"fsecurefsk\", name: \"F-Secure KEY (fsk)\" },\n  { id: \"kasperskytxt\", name: \"Kaspersky Password Manager (txt)\" },\n  { id: \"remembearcsv\", name: \"RememBear (csv)\" },\n  { id: \"passwordwallettxt\", name: \"PasswordWallet (txt)\" },\n  { id: \"mykicsv\", name: \"Myki (csv)\" },\n  { id: \"securesafecsv\", name: \"SecureSafe (csv)\" },\n  { id: \"logmeoncecsv\", name: \"LogMeOnce (csv)\" },\n  { id: \"blackberrycsv\", name: \"BlackBerry Password Keeper (csv)\" },\n  { id: \"buttercupcsv\", name: \"Buttercup (csv)\" },\n  { id: \"codebookcsv\", name: \"Codebook (csv)\" },\n  { id: \"encryptrcsv\", name: \"Encryptr (csv)\" },\n  { id: \"yoticsv\", name: \"Yoti (csv)\" },\n  { id: \"nordpasscsv\", name: \"Nordpass (csv)\" },\n  { id: \"psonojson\", name: \"Psono (json)\" },\n  { id: \"passkyjson\", name: \"Passky (json)\" },\n] as const;\n\nexport type ImportType =\n  | (typeof featuredImportOptions)[number][\"id\"]\n  | (typeof regularImportOptions)[number][\"id\"];\n","import { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { CollectionService } from \"@bitwarden/common/admin-console/abstractions/collection.service\";\nimport { CollectionWithIdRequest } from \"@bitwarden/common/admin-console/models/request/collection-with-id.request\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\nimport { KvpRequest } from \"@bitwarden/common/models/request/kvp.request\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherRequest } from \"@bitwarden/common/vault/models/request/cipher.request\";\nimport { FolderWithIdRequest } from \"@bitwarden/common/vault/models/request/folder-with-id.request\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport {\n  AscendoCsvImporter,\n  AvastCsvImporter,\n  AvastJsonImporter,\n  AviraCsvImporter,\n  BitwardenCsvImporter,\n  BitwardenJsonImporter,\n  BitwardenPasswordProtectedImporter,\n  BlackBerryCsvImporter,\n  BlurCsvImporter,\n  ButtercupCsvImporter,\n  ChromeCsvImporter,\n  ClipperzHtmlImporter,\n  CodebookCsvImporter,\n  DashlaneCsvImporter,\n  DashlaneJsonImporter,\n  EncryptrCsvImporter,\n  EnpassCsvImporter,\n  EnpassJsonImporter,\n  FirefoxCsvImporter,\n  FSecureFskImporter,\n  GnomeJsonImporter,\n  KasperskyTxtImporter,\n  KeePass2XmlImporter,\n  KeePassXCsvImporter,\n  KeeperCsvImporter,\n  // KeeperJsonImporter,\n  LastPassCsvImporter,\n  LogMeOnceCsvImporter,\n  MSecureCsvImporter,\n  MeldiumCsvImporter,\n  MykiCsvImporter,\n  NordPassCsvImporter,\n  OnePassword1PifImporter,\n  OnePassword1PuxImporter,\n  OnePasswordMacCsvImporter,\n  OnePasswordWinCsvImporter,\n  PadlockCsvImporter,\n  PassKeepCsvImporter,\n  PasskyJsonImporter,\n  PassmanJsonImporter,\n  PasspackCsvImporter,\n  PasswordAgentCsvImporter,\n  PasswordBossJsonImporter,\n  PasswordDragonXmlImporter,\n  PasswordSafeXmlImporter,\n  PasswordWalletTxtImporter,\n  PsonoJsonImporter,\n  RememBearCsvImporter,\n  RoboFormCsvImporter,\n  SafariCsvImporter,\n  SafeInCloudXmlImporter,\n  SaferPassCsvImporter,\n  SecureSafeCsvImporter,\n  SplashIdCsvImporter,\n  StickyPasswordXmlImporter,\n  TrueKeyCsvImporter,\n  UpmCsvImporter,\n  YotiCsvImporter,\n  ZohoVaultCsvImporter,\n} from \"../importers\";\nimport { Importer } from \"../importers/importer\";\nimport { ImportError } from \"../models/import-error\";\nimport {\n  featuredImportOptions,\n  ImportOption,\n  ImportType,\n  regularImportOptions,\n} from \"../models/import-options\";\nimport { ImportResult } from \"../models/import-result\";\nimport { ImportApiServiceAbstraction } from \"../services/import-api.service.abstraction\";\nimport { ImportServiceAbstraction } from \"../services/import.service.abstraction\";\n\nexport class ImportService implements ImportServiceAbstraction {\n  featuredImportOptions = featuredImportOptions as readonly ImportOption[];\n\n  regularImportOptions = regularImportOptions as readonly ImportOption[];\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private importApiService: ImportApiServiceAbstraction,\n    private i18nService: I18nService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService\n  ) {}\n\n  getImportOptions(): ImportOption[] {\n    return this.featuredImportOptions.concat(this.regularImportOptions);\n  }\n\n  async import(\n    importer: Importer,\n    fileContents: string,\n    organizationId: string = null\n  ): Promise<ImportError> {\n    const importResult = await importer.parse(fileContents);\n    if (importResult.success) {\n      if (importResult.folders.length === 0 && importResult.ciphers.length === 0) {\n        return new ImportError(this.i18nService.t(\"importNothingError\"));\n      } else if (importResult.ciphers.length > 0) {\n        const halfway = Math.floor(importResult.ciphers.length / 2);\n        const last = importResult.ciphers.length - 1;\n\n        if (\n          this.badData(importResult.ciphers[0]) &&\n          this.badData(importResult.ciphers[halfway]) &&\n          this.badData(importResult.ciphers[last])\n        ) {\n          return new ImportError(this.i18nService.t(\"importFormatError\"));\n        }\n      }\n      try {\n        await this.postImport(importResult, organizationId);\n      } catch (error) {\n        const errorResponse = new ErrorResponse(error, 400);\n        return this.handleServerError(errorResponse, importResult);\n      }\n      return null;\n    } else {\n      if (!Utils.isNullOrWhitespace(importResult.errorMessage)) {\n        return new ImportError(importResult.errorMessage, importResult.missingPassword);\n      } else {\n        return new ImportError(\n          this.i18nService.t(\"importFormatError\"),\n          importResult.missingPassword\n        );\n      }\n    }\n  }\n\n  getImporter(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    organizationId: string = null,\n    password: string = null\n  ): Importer {\n    const importer = this.getImporterInstance(format, password);\n    if (importer == null) {\n      return null;\n    }\n    importer.organizationId = organizationId;\n    return importer;\n  }\n\n  private getImporterInstance(format: ImportType | \"bitwardenpasswordprotected\", password: string) {\n    if (format == null) {\n      return null;\n    }\n\n    switch (format) {\n      case \"bitwardencsv\":\n        return new BitwardenCsvImporter();\n      case \"bitwardenjson\":\n        return new BitwardenJsonImporter(this.cryptoService, this.i18nService);\n      case \"bitwardenpasswordprotected\":\n        return new BitwardenPasswordProtectedImporter(\n          this.cryptoService,\n          this.i18nService,\n          password\n        );\n      case \"lastpasscsv\":\n      case \"passboltcsv\":\n        return new LastPassCsvImporter();\n      case \"keepassxcsv\":\n        return new KeePassXCsvImporter();\n      case \"aviracsv\":\n        return new AviraCsvImporter();\n      case \"blurcsv\":\n        return new BlurCsvImporter();\n      case \"safeincloudxml\":\n        return new SafeInCloudXmlImporter();\n      case \"padlockcsv\":\n        return new PadlockCsvImporter();\n      case \"keepass2xml\":\n        return new KeePass2XmlImporter();\n      case \"chromecsv\":\n      case \"operacsv\":\n      case \"vivaldicsv\":\n        return new ChromeCsvImporter();\n      case \"firefoxcsv\":\n        return new FirefoxCsvImporter();\n      case \"upmcsv\":\n        return new UpmCsvImporter();\n      case \"saferpasscsv\":\n        return new SaferPassCsvImporter();\n      case \"safaricsv\":\n        return new SafariCsvImporter();\n      case \"meldiumcsv\":\n        return new MeldiumCsvImporter();\n      case \"1password1pif\":\n        return new OnePassword1PifImporter();\n      case \"1password1pux\":\n        return new OnePassword1PuxImporter();\n      case \"1passwordwincsv\":\n        return new OnePasswordWinCsvImporter();\n      case \"1passwordmaccsv\":\n        return new OnePasswordMacCsvImporter();\n      case \"keepercsv\":\n        return new KeeperCsvImporter();\n      // case \"keeperjson\":\n      //   return new KeeperJsonImporter();\n      case \"passworddragonxml\":\n        return new PasswordDragonXmlImporter();\n      case \"enpasscsv\":\n        return new EnpassCsvImporter();\n      case \"enpassjson\":\n        return new EnpassJsonImporter();\n      case \"pwsafexml\":\n        return new PasswordSafeXmlImporter();\n      case \"dashlanecsv\":\n        return new DashlaneCsvImporter();\n      case \"dashlanejson\":\n        return new DashlaneJsonImporter();\n      case \"msecurecsv\":\n        return new MSecureCsvImporter();\n      case \"stickypasswordxml\":\n        return new StickyPasswordXmlImporter();\n      case \"truekeycsv\":\n        return new TrueKeyCsvImporter();\n      case \"clipperzhtml\":\n        return new ClipperzHtmlImporter();\n      case \"roboformcsv\":\n        return new RoboFormCsvImporter();\n      case \"ascendocsv\":\n        return new AscendoCsvImporter();\n      case \"passwordbossjson\":\n        return new PasswordBossJsonImporter();\n      case \"zohovaultcsv\":\n        return new ZohoVaultCsvImporter();\n      case \"splashidcsv\":\n        return new SplashIdCsvImporter();\n      case \"passkeepcsv\":\n        return new PassKeepCsvImporter();\n      case \"gnomejson\":\n        return new GnomeJsonImporter();\n      case \"passwordagentcsv\":\n        return new PasswordAgentCsvImporter();\n      case \"passpackcsv\":\n        return new PasspackCsvImporter();\n      case \"passmanjson\":\n        return new PassmanJsonImporter();\n      case \"avastcsv\":\n        return new AvastCsvImporter();\n      case \"avastjson\":\n        return new AvastJsonImporter();\n      case \"fsecurefsk\":\n        return new FSecureFskImporter();\n      case \"kasperskytxt\":\n        return new KasperskyTxtImporter();\n      case \"remembearcsv\":\n        return new RememBearCsvImporter();\n      case \"passwordwallettxt\":\n        return new PasswordWalletTxtImporter();\n      case \"mykicsv\":\n        return new MykiCsvImporter();\n      case \"securesafecsv\":\n        return new SecureSafeCsvImporter();\n      case \"logmeoncecsv\":\n        return new LogMeOnceCsvImporter();\n      case \"blackberrycsv\":\n        return new BlackBerryCsvImporter();\n      case \"buttercupcsv\":\n        return new ButtercupCsvImporter();\n      case \"codebookcsv\":\n        return new CodebookCsvImporter();\n      case \"encryptrcsv\":\n        return new EncryptrCsvImporter();\n      case \"yoticsv\":\n        return new YotiCsvImporter();\n      case \"nordpasscsv\":\n        return new NordPassCsvImporter();\n      case \"psonojson\":\n        return new PsonoJsonImporter();\n      case \"passkyjson\":\n        return new PasskyJsonImporter();\n      default:\n        return null;\n    }\n  }\n\n  private async postImport(importResult: ImportResult, organizationId: string = null) {\n    if (organizationId == null) {\n      const request = new ImportCiphersRequest();\n      for (let i = 0; i < importResult.ciphers.length; i++) {\n        const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n        request.ciphers.push(new CipherRequest(c));\n      }\n      if (importResult.folders != null) {\n        for (let i = 0; i < importResult.folders.length; i++) {\n          const f = await this.folderService.encrypt(importResult.folders[i]);\n          request.folders.push(new FolderWithIdRequest(f));\n        }\n      }\n      if (importResult.folderRelationships != null) {\n        importResult.folderRelationships.forEach((r) =>\n          request.folderRelationships.push(new KvpRequest(r[0], r[1]))\n        );\n      }\n      return await this.importApiService.postImportCiphers(request);\n    } else {\n      const request = new ImportOrganizationCiphersRequest();\n      for (let i = 0; i < importResult.ciphers.length; i++) {\n        importResult.ciphers[i].organizationId = organizationId;\n        const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n        request.ciphers.push(new CipherRequest(c));\n      }\n      if (importResult.collections != null) {\n        for (let i = 0; i < importResult.collections.length; i++) {\n          importResult.collections[i].organizationId = organizationId;\n          const c = await this.collectionService.encrypt(importResult.collections[i]);\n          request.collections.push(new CollectionWithIdRequest(c));\n        }\n      }\n      if (importResult.collectionRelationships != null) {\n        importResult.collectionRelationships.forEach((r) =>\n          request.collectionRelationships.push(new KvpRequest(r[0], r[1]))\n        );\n      }\n      return await this.importApiService.postImportOrganizationCiphers(organizationId, request);\n    }\n  }\n\n  private badData(c: CipherView) {\n    return (\n      (c.name == null || c.name === \"--\") &&\n      c.type === CipherType.Login &&\n      c.login != null &&\n      Utils.isNullOrWhitespace(c.login.password)\n    );\n  }\n\n  private handleServerError(errorResponse: ErrorResponse, importResult: ImportResult): ImportError {\n    if (errorResponse.validationErrors == null) {\n      return new ImportError(errorResponse.message);\n    }\n\n    let errorMessage = \"\";\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const i = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Ciphers\":\n          item = importResult.ciphers[i];\n          itemType = CipherType[item.type];\n          break;\n        case \"Folders\":\n          item = importResult.folders[i];\n          itemType = \"Folder\";\n          break;\n        case \"Collections\":\n          item = importResult.collections[i];\n          itemType = \"Collection\";\n          break;\n        default:\n          return;\n      }\n\n      if (index > 0) {\n        errorMessage += \"\\n\\n\";\n      }\n\n      if (itemType !== \"Folder\" && itemType !== \"Collection\") {\n        errorMessage += \"[\" + (i + 1) + \"] \";\n      }\n\n      errorMessage += \"[\" + itemType + '] \"' + item.name + '\": ' + value;\n    });\n\n    return new ImportError(errorMessage);\n  }\n}\n"],"names":["constructor","modalRef","config","userVerificationService","formBuilder","platformUtilsService","i18nService","confirmDescription","this","data","confirmButtonText","modalTitle","secret","submit","verifyUser","value","e","showToast","t","close","UserVerificationPromptComponent","cryptoService","exportService","eventCollectionService","policyService","win","logService","fileDownloadService","onSaved","disabledByPolicy","exportForm","group","format","filePassword","confirmFilePassword","fileEncryptionType","formatOptions","name","destroy$","Subject","ngOnInit","policyAppliesToActiveUser$","pipe","takeUntil","subscribe","policyAppliesToActiveUser","checkExportDisabled","merge","get","valueChanges","startWith","adjustValidators","ngOnDestroy","next","disable","encryptedFormat","doExport","formPromise","getExportData","downloadFile","saved","collectEvent","setValue","clearValidators","error","warningDialog","message","showDialog","emit","getPasswordProtectedExport","getExport","getFileName","prefix","extension","collect","reset","controls","enable","csv","fileName","download","blobData","blobOptions","type","ExportComponent","modalService","super","window","encryptedExportType","isFileEncryptedExport","markAllAsTouched","valid","isAccountEncryptedExport","ref","open","allowMultipleModals","onClosedPromise","FilePasswordPromptComponent","markAsTouched","cancel","ImportComponent","importService","router","syncService","loading","importBlockedByPolicy","organizationId","successNavigate","setImportOptions","firstValueFrom","importer","getImporter","files","document","getElementById","length","fileContents","content","getFileContents","import","passwordRequired","getFilePassword","doPasswordProtectedImport","fullSync","navigate","getFormatInstructionTitle","results","featuredImportOptions","concat","importOptions","filter","o","id","regularImportOptions","sort","a","b","collator","compare","localeCompare","setSelectedFile","event","fileInputEl","target","fileSelected","heightAuto","buttonsStyling","icon","iconHtml","input","inputValue","inputAttributes","readonly","titleText","text","showConfirmButton","onOpen","popupEl","querySelector","scrollTo","file","extract1PuxContent","Promise","resolve","reject","reader","FileReader","readAsText","onload","evt","pre","DOMParser","parseFromString","result","textContent","onerror","loadAsync","then","zip","async","passwordProtectedImporter","title","ExportScopeCalloutComponent","organizationService","stateService","show","hasOrganizations","scopeConfig","description","scopeIdentifier","getEmail","BoxRowDirective","elRef","el","nativeElement","formEls","Array","from","querySelectorAll","forEach","formEl","addEventListener","classList","add","remove","onClick","contains","tagName","toLowerCase","inputEl","click","focus","ImportError","Error","ImportApiServiceAbstraction","ImportApiService","apiService","postImportCiphers","request","send","postImportOrganizationCiphers","ImportServiceAbstraction","CollectionWithIdRequest","collection","ImportCiphersRequest","ciphers","folders","folderRelationships","ImportOrganizationCiphersRequest","collections","collectionRelationships","KvpRequest","key","success","missingPassword","newLineRegex","passwordFieldNames","usernameFieldNames","notesFieldNames","uriFieldNames","parseCsvOptions","encoding","skipEmptyLines","organization","parseXml","doc","parseCsv","header","options","parseOptions","Object","assign","splitNewLine","join","trim","errors","row","warning","parseSingleRowCsv","rowData","isNullOrWhitespace","parsedRow","makeUriArray","uri","loginUri","fixUri","match","returnArr","u","push","indexOf","substring","nameFromUrl","url","hostname","startsWith","replace","str","getValueOrDefault","defaultValue","split","getCardBrand","cardNum","re","RegExp","test","setCardExpiration","cipher","expiration","parts","month","year","substr","card","expMonth","expYear","moveFoldersToCollections","r","map","f","querySelectorDirectChild","parentEl","query","els","querySelectorAllDirectChild","parentNode","initLoginCipher","favorite","notes","fields","login","cleanupCipher","processKvp","search","field","processFolder","folderName","folderIndex","hasFolder","addFolder","i","convertToNoteIfNeeded","username","password","uris","secureNote","processFullName","fullName","nameParts","identity","firstName","lastName","middleName","slice","AscendoCsvImporter","parse","val","fieldLower","AvastCsvImporter","web","AvastJsonImporter","JSON","logins","custName","note","pwd","loginName","label","cards","cardholderName","holderName","number","cardNumber","code","cvv","brand","expirationDate","AviraCsvImporter","website","secondary_username","BlackBerryCsvImporter","grouping","fav","extra","ChromeCsvImporter","androidPatternRegex","BitwardenCsvImporter","col","addCollection","collectionIndex","folder","reprompt","parseInt","console","delimPosition","lastIndexOf","totp","login_totp","login_username","login_password","login_uri","BitwardenJsonImporter","items","passwordProtected","errorMessage","encrypted","parseEncrypted","parseDecrypted","encKeyValidation_DO_NOT_EDIT","orgKey","getOrgKey","encKeyValidation","decryptToUtf8","groupingsMap","Map","c","view","decrypt","set","collectionIds","passwordHistory","folderId","has","cId","BitwardenPasswordProtectedImporter","parsedData","cannotParseFile","checkPassword","encData","clearTextData","jdoc","makePinKey","salt","kdfType","kdfIterations","kdfMemory","kdfParallelism","BlurCsvImporter","domain","email","OfficialProps","ButtercupCsvImporter","URL","processingCustomFields","prop","hasOwnProperty","ClipperzHtmlImporter","textarea","entry","currentVersion","property","actionType","labelLower","CodebookCsvImporter","Category","Favorite","Entry","Note","Username","Email","Password","TOTP","Website","Phone","PIN","Account","Date","_mappedCredentialsColums","Set","_mappedPersonalInfoAsIdentiyColumns","_mappedSecureNoteColumns","DashlaneCsvImporter","x","parsePersonalInformationRecordAsIdentity","rowKeys","keys","category","parseCredentialsRecord","parsePaymentRecord","parseIdRecord","parsePersonalInformationRecord","parseSecureNoteRecords","otpSecret","importUnmappedFields","account_name","mappedValues","cc_number","expiration_month","expiration_year","account_holder","account_number","licenseNumber","passportNumber","state","ssn","first_name","middle_name","last_name","item_name","dataRow","phone","phone_number","address1","address","city","postalCode","country","item","HandledResults","DashlaneJsonImporter","ADDRESS","processAddress","AUTHENTIFIANT","processAuth","BANKSTATEMENT","processNote","IDCARD","PAYMENTMEANS_CREDITCARD","processCard","IDENTITY","processIdentity","credential","secondaryLogin","obj","pseudo","addressName","addressFull","zipcode","toUpperCase","bank","owner","nameProperty","toString","EncryptrCsvImporter","Label","Notes","Text","CVV","expiry","Expiry","expParts","EnpassCsvImporter","firstRow","containsField","fieldValue","fieldName","fieldNameLower","androidUrlRegex","EnpassJsonImporter","foldersMap","foldersIndexMap","folderTree","buildFolderTree","flattenFolderTree","template_type","processLogin","some","urls","cleanedValue","sensitive","uuid","children","parent_uuid","titlePrefix","tree","FirefoxCsvImporter","FskEntryTypesEnum","FSecureFskImporter","parseEntry","service","Login","handleLoginEntry","CreditCard","handleCreditCardEntry","creditNumber","creditCvv","creditExpiry","GnomeJsonImporter","keyRing","display_name","attributes","username_value","attr","NotesHeader","ApplicationsHeader","WebsitesHeader","Delimiter","KasperskyTxtImporter","notesData","applicationsData","websitesData","workingData","parseDataCategory","applications","websites","n","w","nameKey","p","itemComment","itemCommentKey","l","colonIndex","size","KeePass2XmlImporter","KeePassFileNode","RootNode","rootGroup","traverse","node","isRootNode","groupPrefixName","groupName","nameEl","cipherIndex","entryString","valueEl","keyEl","attrs","ProtectInMemory","KeePassXCsvImporter","Title","Group","KeeperCsvImporter","LastPassCsvImporter","buildBaseCipher","parseSecureNote","parseCard","parseIdentity","ccnum","cardCipher","profilename","firstname","lastname","ccname","cccsc","ccexp","ccexpParts","middlename","company","address2","address3","charAt","extraParts","processedNote","typeParts","mappedData","parseSecureNoteMapping","Number","undefined","monthString","getMonth","isNaN","Company","State","Country","dataObj","processingNotes","extraPart","LogMeOnceCsvImporter","MeldiumCsvImporter","DisplayName","UserName","Url","MSecureCsvImporter","mappedBaseColumns","_mappedUserAccountColumns","_mappedCreditCardColumns","_mappedIdentityColumns","_mappedIdCardColumns","_mappedTwoFaColumns","_mappedUserNoteColumns","MykiCsvImporter","nickname","additionalInfo","twofaSecret","authToken","cardName","exp_month","exp_year","firstAddressLine","secondAddressLine","zipCode","idType","idName","idCountry","idNumber","NordPassCsvImporter","record","recordType","evaluateType","cardholdername","cardnumber","cvc","expirydate","full_name","CategoryEnum","LoginFieldTypeEnum","OnePassword1PifImporter","line","trashed","hmac","processStandardItem","processWinOpVaultItem","overview","URLs","details","parsePasswordHistory","notesPlain","parseFields","sections","section","openContents","faveIndex","typeName","location","secureContents","maxSize","h","time","ph","lastUsedDate","designationKey","valueKey","k","toUTCString","fieldDesignation","street","fieldType","OnePassword1PuxImporter","accounts","vaults","vault","categoryUuid","Database","WirelessRouter","Server","API_Credential","BankAccount","SecureNote","SoftwareLicense","EmailAccount","MedicalRecord","Identity","DriversLicense","OutdoorLicense","Membership","Passport","RewardsProgram","SocialSecurityNumber","favIndex","processOverview","processLoginFields","processDetails","processSections","tags","capitalize","inputString","loginFields","loginField","designation","CheckBox","parseSectionFields","anyField","getFieldName","extractValue","fillLogin","fillApiCredentials","fillCreditCard","fillBankAccount","fillIdentity","fillDriversLicense","fillOutdoorLicense","fillMembership","fillPassport","fillRewardsProgram","fillSSN","email_address","provider","guarded","date","monthYear","historyItems","CipherImportContext","importRecord","lowerProperty","IgnoredProperties","OnePasswordCsvImporter","loginPropertyParsers","setLoginUsername","setLoginPassword","setLoginUris","creditCardPropertyParsers","setCreditCardNumber","setCreditCardVerification","setCreditCardCardholderName","setCreditCardExpiry","identityPropertyParsers","setIdentityFirstName","setIdentityInitial","setIdentityLastName","setIdentityUserName","setIdentityEmail","setIdentityPhone","setIdentityCompany","quoteChar","escapeChar","getProp","setNotes","setCipherType","altUsername","context","setKnownLoginValue","setKnownCreditCardValue","setKnownIdentityValue","setUnknownValue","entries","reduce","agg","getPropByRegexp","regexp","matchingKeys","getPropIncluding","includesMap","includes","func","bind","readableDate","OnePasswordMacCsvImporter","OnePasswordWinCsvImporter","setIdentityAddress","expSplit","PadlockCsvImporter","headers","v","tag","PassKeepCsvImporter","getValue","PasskyJsonImporter","passkyExport","passwords","PassmanJsonImporter","otp","custom_fields","customField","field_type","PasspackCsvImporter","tagsJson","Tags","tagJson","__parsed_extra","fieldsJson","extraFields","fieldJson","PasswordAgentCsvImporter","newVersion","altFormat","PasswordBossJsonImporter","login_url","identifiers","valObj","expDate","getFullYear","cf","PasswordDragonXmlImporter","records","categoryText","accountName","userId","PasswordSafeXmlImporter","passwordSafe","notesDelimiter","getAttribute","groupText","PasswordWalletTxtImporter","PsonoJsonImporter","WEBSITE_mappedValues","APP_PWD_mappedValues","BOOKMARK_mappedValues","NOTES_mappedValues","TOTP_mappedValues","ENV_VARIABLES_mappedValues","GPG_mappedValues","psonoExport","parseFolders","handleItemParsing","parsePsonoItem","parseWebsiteLogins","parseApplicationPasswords","parseEnvironmentVariables","parseTOTP","parseBookmarks","parseNotes","website_password_title","website_password_notes","website_password_username","website_password_password","website_password_url","website_password_auto_submit","website_password_url_filter","application_password_title","application_password_notes","application_password_username","application_password_password","bookmark_title","bookmark_notes","bookmark_url","note_title","note_notes","totp_title","totp_notes","totp_code","environment_variables_title","environment_variables_notes","environment_variables_variables","KvPair","parseGPG","mail_gpg_own_key_title","mail_gpg_own_key_public","mail_gpg_own_key_name","mail_gpg_own_key_email","mail_gpg_own_key_private","RememBearCsvImporter","trash","cardholder","verification","expiryMonth","expMonthNumber","expiryYear","expYearNumber","pin","RoboFormCsvImporter","Folder","Name","Pwd","Rf_fields","SafariCsvImporter","OTPAuth","SafeInCloudXmlImporter","labelEl","cardEl","labelIdEl","labelId","fieldEl","notesEl","setPassword","candidates","choice","SaferPassCsvImporter","SecureSafeCsvImporter","Comment","SplashIdCsvImporter","parseFieldsToNotes","startIndex","StickyPasswordXmlImporter","loginNodes","loginNode","accountId","usernameText","passwordText","linkText","notesText","groupId","accountLogin","account","parentElement","buildGroupText","PropertiesToIgnore","TrueKeyCsvImporter","memo","kind","expiryDate","document_content","UpmCsvImporter","YotiCsvImporter","ZohoVaultCsvImporter","ChamberName","parseData","SecretData","CustomData","ImportService","cipherService","folderService","importApiService","collectionService","getImportOptions","importResult","halfway","Math","floor","last","badData","postImport","errorResponse","handleServerError","getImporterInstance","encrypt","validationErrors","index","itemType"],"sourceRoot":""}