{"version":3,"file":"212.9b295be12c9693465235.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/import-error-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/import-error-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/import-success-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/import-success-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/file-password-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/file-password-prompt.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/directives/box-row.directive.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export-scope-callout.component.html","webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export-scope-callout.component.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import-api.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import-api.service.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-organization-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/kvp.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/request/collection-with-id.request.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-result.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/base-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/ascendo-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avast/avast-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avast/avast-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avira-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/blackberry-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/chrome-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-password-protected-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/blur-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/buttercup-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/clipperz-html-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/codebook-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/dashlane/dashlane-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/dashlane/dashlane-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/encryptr-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/enpass/enpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/enpass/enpass-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/firefox-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/fsecure/fsecure-fsk-types.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/fsecure/fsecure-fsk-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/gnome-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/kaspersky-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keepass2-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keepassx-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keeper/keeper-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/logmeonce-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/meldium-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/msecure-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/myki-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/nordpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/types/onepassword-1pux-importer-types.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-1pif-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-1pux-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/cipher-import-context.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-mac-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-win-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/padlock-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passkeep-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passky/passky-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passman-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passpack-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordagent-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordboss-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passworddragon-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordsafe-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordwallet-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/protonpass/types/protonpass-json-type.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/protonpass/protonpass-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/psono/psono-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/remembear-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/roboform-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/safari-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/safeincloud-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/saferpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/securesafe-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/splashid-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/stickypassword-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/truekey-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/upm-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/yoti-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/zohovault-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-options.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import.service.ts"],"sourcesContent":["import { Directive, EventEmitter, OnDestroy, OnInit, Output } from \"@angular/core\";\nimport { UntypedFormBuilder, Validators } from \"@angular/forms\";\nimport { merge, startWith, Subject, takeUntil } from \"rxjs\";\n\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { EncryptedExportType, EventType } from \"@bitwarden/common/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { DialogService } from \"@bitwarden/components\";\nimport { VaultExportServiceAbstraction } from \"@bitwarden/exporter/vault-export\";\n\n@Directive()\nexport class ExportComponent implements OnInit, OnDestroy {\n  @Output() onSaved = new EventEmitter();\n\n  formPromise: Promise<string>;\n  private _disabledByPolicy = false;\n\n  protected get disabledByPolicy(): boolean {\n    return this._disabledByPolicy;\n  }\n\n  exportForm = this.formBuilder.group({\n    format: [\"json\"],\n    secret: [\"\"],\n    filePassword: [\"\", Validators.required],\n    confirmFilePassword: [\"\", Validators.required],\n    fileEncryptionType: [EncryptedExportType.AccountEncrypted],\n  });\n\n  formatOptions = [\n    { name: \".json\", value: \"json\" },\n    { name: \".csv\", value: \"csv\" },\n    { name: \".json (Encrypted)\", value: \"encrypted_json\" },\n  ];\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected exportService: VaultExportServiceAbstraction,\n    protected eventCollectionService: EventCollectionService,\n    private policyService: PolicyService,\n    protected win: Window,\n    private logService: LogService,\n    private userVerificationService: UserVerificationService,\n    private formBuilder: UntypedFormBuilder,\n    protected fileDownloadService: FileDownloadService,\n    protected dialogService: DialogService\n  ) {}\n\n  async ngOnInit() {\n    this.policyService\n      .policyAppliesToActiveUser$(PolicyType.DisablePersonalVaultExport)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((policyAppliesToActiveUser) => {\n        this._disabledByPolicy = policyAppliesToActiveUser;\n        if (this.disabledByPolicy) {\n          this.exportForm.disable();\n        }\n      });\n\n    merge(\n      this.exportForm.get(\"format\").valueChanges,\n      this.exportForm.get(\"fileEncryptionType\").valueChanges\n    )\n      .pipe(takeUntil(this.destroy$))\n      .pipe(startWith(0))\n      .subscribe(() => this.adjustValidators());\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n  }\n\n  get encryptedFormat() {\n    return this.format === \"encrypted_json\";\n  }\n\n  protected async doExport() {\n    try {\n      this.formPromise = this.getExportData();\n      const data = await this.formPromise;\n      this.downloadFile(data);\n      this.saved();\n      await this.collectEvent();\n      this.exportForm.get(\"secret\").setValue(\"\");\n      this.exportForm.clearValidators();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async submit() {\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const acceptedWarning = await this.warningDialog();\n    if (!acceptedWarning) {\n      return;\n    }\n    const secret = this.exportForm.get(\"secret\").value;\n\n    try {\n      await this.userVerificationService.verifyUser(secret);\n    } catch (e) {\n      this.platformUtilsService.showToast(\"error\", this.i18nService.t(\"errorOccurred\"), e.message);\n      return;\n    }\n\n    this.doExport();\n  }\n\n  async warningDialog() {\n    if (this.encryptedFormat) {\n      return await this.dialogService.openSimpleDialog({\n        title: { key: \"confirmVaultExport\" },\n        content:\n          this.i18nService.t(\"encExportKeyWarningDesc\") +\n          \" \" +\n          this.i18nService.t(\"encExportAccountWarningDesc\"),\n        acceptButtonText: { key: \"exportVault\" },\n        type: \"warning\",\n      });\n    } else {\n      return await this.dialogService.openSimpleDialog({\n        title: { key: \"confirmVaultExport\" },\n        content: { key: \"exportWarningDesc\" },\n        acceptButtonText: { key: \"exportVault\" },\n        type: \"warning\",\n      });\n    }\n  }\n\n  protected saved() {\n    this.onSaved.emit();\n  }\n\n  protected getExportData() {\n    if (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    ) {\n      return this.exportService.getPasswordProtectedExport(this.filePassword);\n    } else {\n      return this.exportService.getExport(this.format, null);\n    }\n  }\n\n  protected getFileName(prefix?: string) {\n    let extension = this.format;\n    if (this.format === \"encrypted_json\") {\n      if (prefix == null) {\n        prefix = \"encrypted\";\n      } else {\n        prefix = \"encrypted_\" + prefix;\n      }\n      extension = \"json\";\n    }\n    return this.exportService.getFileName(prefix, extension);\n  }\n\n  protected async collectEvent(): Promise<void> {\n    await this.eventCollectionService.collect(EventType.User_ClientExportedVault);\n  }\n\n  get format() {\n    return this.exportForm.get(\"format\").value;\n  }\n\n  get filePassword() {\n    return this.exportForm.get(\"filePassword\").value;\n  }\n\n  get confirmFilePassword() {\n    return this.exportForm.get(\"confirmFilePassword\").value;\n  }\n\n  get fileEncryptionType() {\n    return this.exportForm.get(\"fileEncryptionType\").value;\n  }\n\n  adjustValidators() {\n    this.exportForm.get(\"confirmFilePassword\").reset();\n    this.exportForm.get(\"filePassword\").reset();\n\n    if (this.encryptedFormat && this.fileEncryptionType == EncryptedExportType.FileEncrypted) {\n      this.exportForm.controls.filePassword.enable();\n      this.exportForm.controls.confirmFilePassword.enable();\n    } else {\n      this.exportForm.controls.filePassword.disable();\n      this.exportForm.controls.confirmFilePassword.disable();\n    }\n  }\n\n  private downloadFile(csv: string): void {\n    const fileName = this.getFileName();\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: csv,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable tailwindcss/no-custom-classname -->\n<form\n  #form\n  (ngSubmit)=\"submit()\"\n  [appApiAction]=\"formPromise\"\n  [formGroup]=\"exportForm\"\n  *ngIf=\"exportForm\"\n>\n  <div class=\"page-header\">\n    <h1>{{ \"exportVault\" | i18n }}</h1>\n  </div>\n\n  <app-callout type=\"error\" title=\"{{ 'vaultExportDisabled' | i18n }}\" *ngIf=\"disabledByPolicy\">\n    {{ \"personalVaultExportPolicyInEffect\" | i18n }}\n  </app-callout>\n  <app-export-scope-callout\n    [organizationId]=\"organizationId\"\n    *ngIf=\"!disabledByPolicy\"\n  ></app-export-scope-callout>\n\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <bit-form-field>\n        <bit-label class=\"tw-text-lg\" for=\"format\">{{ \"fileFormat\" | i18n }}</bit-label>\n        <select bitInput name=\"format\" formControlName=\"format\">\n          <option *ngFor=\"let f of formatOptions\" [value]=\"f.value\">{{ f.name }}</option>\n        </select>\n      </bit-form-field>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"form-group col-6\">\n      <ng-container *ngIf=\"format === 'encrypted_json'\">\n        <div role=\"radiogroup\" aria-labelledby=\"exportTypeHeading\">\n          <label id=\"exportTypeHeading\" class=\"tw-semi-bold tw-text-lg\">\n            {{ \"exportTypeHeading\" | i18n }}\n          </label>\n\n          <div appBoxRow name=\"FileTypeOptions\" class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"AccountEncrypted\"\n                [value]=\"encryptedExportType.AccountEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.AccountEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"AccountEncrypted\">\n                {{ \"accountRestricted\" | i18n }}\n              </label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 pb-2 tw-text-sm\">\n            {{ \"accountRestrictedOptionDescription\" | i18n }}\n          </div>\n\n          <div class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"FileEncrypted\"\n                [value]=\"encryptedExportType.FileEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.FileEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"FileEncrypted\">{{\n                \"passwordProtected\" | i18n\n              }}</label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 tw-text-sm\">\n            {{ \"passwordProtectedOptionDescription\" | i18n }}\n          </div>\n        </div>\n        <br />\n\n        <ng-container *ngIf=\"fileEncryptionType == encryptedExportType.FileEncrypted\">\n          <bit-form-field>\n            <bit-label>{{ \"filePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"filePassword\"\n              formControlName=\"filePassword\"\n              name=\"password\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n            <bit-hint>{{ \"exportPasswordDescription\" | i18n }}</bit-hint>\n          </bit-form-field>\n          <bit-form-field>\n            <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"confirmFilePassword\"\n              formControlName=\"confirmFilePassword\"\n              name=\"confirmFilePassword\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n          </bit-form-field>\n        </ng-container>\n      </ng-container>\n\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary btn-submit\"\n        [disabled]=\"form.loading || disabledByPolicy\"\n        [ngClass]=\"{ manual: disabledByPolicy }\"\n      >\n        <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n        <span>{{ \"confirmFormat\" | i18n }}</span>\n      </button>\n    </div>\n  </div>\n</form>\n","import { Component } from \"@angular/core\";\nimport { UntypedFormBuilder } from \"@angular/forms\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { ExportComponent as BaseExportComponent } from \"@bitwarden/angular/tools/export/components/export.component\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { EncryptedExportType } from \"@bitwarden/common/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { DialogService } from \"@bitwarden/components\";\nimport { VaultExportServiceAbstraction } from \"@bitwarden/exporter/vault-export\";\n\nimport { openUserVerificationPrompt } from \"../../auth/shared/components/user-verification\";\n\n@Component({\n  selector: \"app-export\",\n  templateUrl: \"export.component.html\",\n})\nexport class ExportComponent extends BaseExportComponent {\n  organizationId: string;\n  encryptedExportType = EncryptedExportType;\n  protected showFilePassword: boolean;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    platformUtilsService: PlatformUtilsService,\n    exportService: VaultExportServiceAbstraction,\n    eventCollectionService: EventCollectionService,\n    policyService: PolicyService,\n    logService: LogService,\n    userVerificationService: UserVerificationService,\n    formBuilder: UntypedFormBuilder,\n    fileDownloadService: FileDownloadService,\n    dialogService: DialogService\n  ) {\n    super(\n      cryptoService,\n      i18nService,\n      platformUtilsService,\n      exportService,\n      eventCollectionService,\n      policyService,\n      window,\n      logService,\n      userVerificationService,\n      formBuilder,\n      fileDownloadService,\n      dialogService\n    );\n  }\n\n  async submit() {\n    if (this.isFileEncryptedExport && this.filePassword != this.confirmFilePassword) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"filePasswordAndConfirmFilePasswordDoNotMatch\")\n      );\n      return;\n    }\n\n    this.exportForm.markAllAsTouched();\n    if (!this.exportForm.valid) {\n      return;\n    }\n\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    this.doExport();\n  }\n\n  protected saved() {\n    super.saved();\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"exportSuccess\"));\n  }\n\n  private verifyUser() {\n    let confirmDescription = \"exportWarningDesc\";\n    if (this.isFileEncryptedExport) {\n      confirmDescription = \"fileEncryptedExportWarningDesc\";\n    } else if (this.isAccountEncryptedExport) {\n      confirmDescription = \"encExportKeyWarningDesc\";\n    }\n\n    const ref = openUserVerificationPrompt(this.dialogService, {\n      data: {\n        confirmDescription: confirmDescription,\n        confirmButtonText: \"exportVault\",\n        modalTitle: \"confirmVaultExport\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return firstValueFrom(ref.closed);\n  }\n\n  get isFileEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    );\n  }\n\n  get isAccountEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.AccountEncrypted\n    );\n  }\n}\n","<bit-dialog>\n  <span bitDialogTitle>\n    {{ \"importError\" | i18n }}\n  </span>\n\n  <span bitDialogContent>\n    <div>{{ \"resolveTheErrorsBelowAndTryAgain\" | i18n }}</div>\n    <bit-table [dataSource]=\"dataSource\">\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"name\" | i18n }}</th>\n          <th bitCell>{{ \"description\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body let-rows$>\n        <tr bitRow *ngFor=\"let r of rows$ | async\">\n          <td bitCell>{{ r.type }}</td>\n          <td bitCell>{{ r.message }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </span>\n\n  <div bitDialogFooter>\n    <button bitButton bitDialogClose buttonType=\"primary\" type=\"button\">\n      {{ \"ok\" | i18n }}\n    </button>\n  </div>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { TableDataSource } from \"@bitwarden/components\";\n\nexport interface ErrorListItem {\n  type: string;\n  message: string;\n}\n\n@Component({\n  selector: \"app-import-error-dialog\",\n  templateUrl: \"./import-error-dialog.component.html\",\n})\nexport class ImportErrorDialogComponent implements OnInit {\n  protected dataSource = new TableDataSource<ErrorListItem>();\n\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) public data: Error) {}\n\n  ngOnInit(): void {\n    const split = this.data.message.split(\"\\n\\n\");\n    if (split.length == 1) {\n      this.dataSource.data = [{ type: \"\", message: this.data.message }];\n      return;\n    }\n\n    const data: ErrorListItem[] = [];\n    split.forEach((line) => {\n      data.push({ type: \"\", message: line });\n    });\n    this.dataSource.data = data;\n  }\n}\n","<bit-dialog>\n  <span bitDialogTitle>\n    {{ \"importSuccess\" | i18n }}\n  </span>\n\n  <div bitDialogContent>\n    <span>{{ \"importSuccessNumberOfItems\" | i18n : this.data.ciphers.length }}</span>\n    <bit-table [dataSource]=\"dataSource\">\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"type\" | i18n }}</th>\n          <th bitCell>{{ \"total\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body let-rows$>\n        <tr bitRow *ngFor=\"let r of rows$ | async\">\n          <td bitCell>\n            <i class=\"bwi bwi-fw bwi-{{ r.icon }}\" aria-hidden=\"true\"></i>\n            {{ r.type | i18n }}\n          </td>\n          <td bitCell>{{ r.count }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </div>\n\n  <ng-container bitDialogFooter>\n    <button bitButton bitDialogClose buttonType=\"primary\" type=\"button\">\n      {{ \"ok\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { TableDataSource } from \"@bitwarden/components\";\nimport { ImportResult } from \"@bitwarden/importer\";\n\nexport interface ResultList {\n  icon: string;\n  type: string;\n  count: number;\n}\n\n@Component({\n  templateUrl: \"./import-success-dialog.component.html\",\n})\nexport class ImportSuccessDialogComponent implements OnInit {\n  protected dataSource = new TableDataSource<ResultList>();\n\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) public data: ImportResult) {}\n\n  ngOnInit(): void {\n    if (this.data != null) {\n      this.dataSource.data = this.buildResultList();\n    }\n  }\n\n  private buildResultList(): ResultList[] {\n    let logins = 0;\n    let cards = 0;\n    let identities = 0;\n    let secureNotes = 0;\n    this.data.ciphers.map((c) => {\n      switch (c.type) {\n        case CipherType.Login:\n          logins++;\n          break;\n        case CipherType.Card:\n          cards++;\n          break;\n        case CipherType.SecureNote:\n          secureNotes++;\n          break;\n        case CipherType.Identity:\n          identities++;\n          break;\n        default:\n          break;\n      }\n    });\n\n    const list: ResultList[] = [];\n    if (logins > 0) {\n      list.push({ icon: \"globe\", type: \"typeLogin\", count: logins });\n    }\n    if (cards > 0) {\n      list.push({ icon: \"credit-card\", type: \"typeCard\", count: cards });\n    }\n    if (identities > 0) {\n      list.push({ icon: \"id-card\", type: \"typeIdentity\", count: identities });\n    }\n    if (secureNotes > 0) {\n      list.push({ icon: \"sticky-note\", type: \"typeSecureNote\", count: secureNotes });\n    }\n    if (this.data.folders.length > 0) {\n      list.push({ icon: \"folder\", type: \"folders\", count: this.data.folders.length });\n    }\n    if (this.data.collections.length > 0) {\n      list.push({\n        icon: \"collection\",\n        type: \"collections\",\n        count: this.data.collections.length,\n      });\n    }\n    return list;\n  }\n}\n","import { DialogRef } from \"@angular/cdk/dialog\";\nimport { Component } from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\n\n@Component({\n  templateUrl: \"file-password-prompt.component.html\",\n})\nexport class FilePasswordPromptComponent {\n  filePassword = new FormControl(\"\", Validators.required);\n\n  constructor(public dialogRef: DialogRef) {}\n\n  submit() {\n    this.filePassword.markAsTouched();\n    if (!this.filePassword.valid) {\n      return;\n    }\n    this.dialogRef.close(this.filePassword.value);\n  }\n}\n","<form (submit)=\"submit()\">\n  <bit-dialog>\n    <span bitDialogTitle>\n      {{ \"confirmVaultImport\" | i18n }}\n    </span>\n\n    <div bitDialogContent>\n      {{ \"confirmVaultImportDesc\" | i18n }}\n      <bit-form-field class=\"tw-mt-6\">\n        <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n        <input\n          bitInput\n          type=\"password\"\n          name=\"filePassword\"\n          [formControl]=\"filePassword\"\n          appAutofocus\n          appInputVerbatim\n        />\n        <button type=\"button\" bitSuffix bitIconButton bitPasswordInputToggle></button>\n      </bit-form-field>\n    </div>\n\n    <ng-container bitDialogFooter>\n      <button bitButton buttonType=\"primary\" type=\"submit\">\n        <span>{{ \"importData\" | i18n }}</span>\n      </button>\n      <button bitButton bitDialogClose buttonType=\"secondary\" type=\"button\">\n        <span>{{ \"cancel\" | i18n }}</span>\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","<h1 bitTypography=\"h1\">{{ \"importData\" | i18n }}</h1>\n\n<bit-callout type=\"info\" *ngIf=\"importBlockedByPolicy\">\n  {{ \"personalOwnershipPolicyInEffectImports\" | i18n }}\n</bit-callout>\n<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-form-field>\n    <bit-label\n      >{{ \"importDestination\" | i18n }}\n      <a\n        target=\"_blank\"\n        rel=\"noopener\"\n        appA11yTitle=\"{{ 'learnAboutImportOptions' | i18n }}\"\n        href=\"https://bitwarden.com/help/import-data/\"\n      >\n        <i class=\"bwi bwi-question-circle\" aria-hidden=\"true\"></i>\n      </a>\n    </bit-label>\n    <bit-select formControlName=\"vaultSelector\">\n      <bit-option\n        *ngIf=\"!importBlockedByPolicy\"\n        [label]=\"'myVault' | i18n\"\n        value=\"myVault\"\n        icon=\"bwi-user\"\n      />\n      <bit-option\n        *ngFor=\"let o of organizations$ | async\"\n        [value]=\"o.id\"\n        [label]=\"o.name\"\n        icon=\"bwi-business\"\n      />\n    </bit-select>\n  </bit-form-field>\n\n  <bit-form-field>\n    <bit-label>{{ organizationId ? (\"collection\" | i18n) : (\"folder\" | i18n) }}</bit-label>\n    <bit-select formControlName=\"targetSelector\">\n      <ng-container *ngIf=\"!organizationId\">\n        <bit-option [value]=\"null\" label=\"-- {{ 'selectImportFolder' | i18n }} --\" />\n        <bit-option\n          *ngFor=\"let f of folders$ | async\"\n          [value]=\"f.id\"\n          [label]=\"f.name\"\n          icon=\"bwi-folder\"\n        />\n      </ng-container>\n      <ng-container *ngIf=\"organizationId\">\n        <bit-option [value]=\"null\" label=\"-- {{ 'selectImportCollection' | i18n }} --\" />\n        <bit-option\n          *ngFor=\"let c of collections$ | async\"\n          [value]=\"c.id\"\n          [label]=\"c.name\"\n          icon=\"bwi-collection\"\n        />\n      </ng-container>\n    </bit-select>\n    <bit-hint>{{\n      \"importTargetHint\"\n        | i18n\n          : (organizationId ? (\"collection\" | i18n | lowercase) : (\"folder\" | i18n | lowercase))\n    }}</bit-hint>\n  </bit-form-field>\n\n  <bit-form-field class=\"tw-w-1/2\">\n    <bit-label>{{ \"fileFormat\" | i18n }}</bit-label>\n    <bit-select formControlName=\"format\">\n      <bit-option *ngFor=\"let o of featuredImportOptions\" [value]=\"o.id\" [label]=\"o.name\" />\n      <ng-container *ngIf=\"importOptions && importOptions.length\">\n        <bit-option value=\"-\" disabled />\n        <bit-option *ngFor=\"let o of importOptions\" [value]=\"o.id\" [label]=\"o.name\" />\n      </ng-container>\n    </bit-select>\n  </bit-form-field>\n  <bit-callout type=\"info\" title=\"{{ getFormatInstructionTitle() }}\" *ngIf=\"format\">\n    <ng-container *ngIf=\"format === 'bitwardencsv' || format === 'bitwardenjson'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/export-your-data/\">\n        https://bitwarden.com/help/export-your-data/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'lastpasscsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-lastpass/\">\n        https://bitwarden.com/help/import-from-lastpass/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepassxcsv'\">\n      Using the KeePassX desktop application, navigate to \"Database\" &rarr; \"Export to CSV file\" and\n      save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'aviracsv'\">\n      In the Avira web vault, go to \"Settings\" &rarr; \"My Data\" &rarr; \"Export data\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blurcsv'\">\n      In the Blur web vault, click your username at the top and go to \"Settings\" &rarr; \"Export\n      Data\", then click \"Export CSV\" for your \"Accounts\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safeincloudxml'\">\n      Using the SaveInCloud desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As XML\"\n      and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'padlockcsv'\">\n      Using the Padlock desktop application, click the hamburger icon in the top left corner and\n      navigate to \"Settings\" &rarr; \"Export\" button and save the file \"As CSV\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepass2xml'\">\n      Using the KeePass 2 desktop application, navigate to \"File\" &rarr; \"Export\" and select the\n      \"KeePass XML (2.x)\" option.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'upmcsv'\">\n      Using the Universal Password Manager desktop application, navigate to \"Database\" &rarr;\n      \"Export\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'saferpasscsv'\">\n      Using the SaferPass browser extension, click the hamburger icon in the top left corner and\n      navigate to \"Settings\". Click the \"Export accounts\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'meldiumcsv'\">\n      Using the Meldium web vault, navigate to \"Settings\". Locate the \"Export data\" function and\n      click \"Show me my data\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepercsv'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .csv File\" option. Click\n      \"Export\" to save the CSV file.\n    </ng-container>\n    <!--\n    <ng-container *ngIf=\"format === 'keeperjson'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .json File\" option. Click\n      \"Export\" to save the JSON file.\n    </ng-container>\n    -->\n    <ng-container\n      *ngIf=\"format === 'chromecsv' || format === 'operacsv' || format === 'vivaldicsv'\"\n    >\n      <span *ngIf=\"format !== 'chromecsv'\">\n        The process is exactly the same as importing from Google Chrome.\n      </span>\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-chrome/\">\n        https://bitwarden.com/help/import-from-chrome/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'firefoxcsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-firefox/\">\n        https://bitwarden.com/help/import-from-firefox/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safaricsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-safari/\">\n        https://bitwarden.com/help/import-from-safari/</a\n      >.\n    </ng-container>\n    <ng-container\n      *ngIf=\"\n        format === '1password1pux' ||\n        format === '1password1pif' ||\n        format === '1passwordwincsv' ||\n        format === '1passwordmaccsv'\n      \"\n    >\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-1password/\">\n        https://bitwarden.com/help/import-from-1password/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passworddragonxml'\">\n      Using the Password Dragon desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"To\n      XML\". In the dialog that pops up select \"All Rows\" and check all fields. Click the \"Export\"\n      button and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpasscsv'\">\n      Using the Enpass desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As CSV\".\n      Select \"OK\" to the warning alert and save the CSV file. Note that the importer only supports\n      files exported while Enpass is set to the English language, so adjust your settings\n      accordingly.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpassjson'\">\n      Using the Enpass 6 desktop application, click the menu button and navigate to \"File\" &rarr;\n      \"Export\". Select the \".json\" file format option and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'pwsafexml'\">\n      Using the Password Safe desktop application, navigate to \"File\" &rarr; \"Export To\" &rarr; \"XML\n      format...\" and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanecsv'\">\n      Log in to Dashlane, click on \"My Account\" &rarr; \"Settings\" &rarr; \"Export file\" and select\n      \"Export as a CSV file\". This will download a zip archive containing various CSV files. Unzip\n      the archive and import each CSV file individually.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanejson'\">\n      Dashlane no longer supports the JSON format. Only use this if you have an existing JSON for\n      import. Use the CSV importer when creating new exports.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'msecurecsv'\">\n      Using the mSecure desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"CSV File...\"\n      and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'stickypasswordxml'\">\n      Using the Sticky Password desktop application, navigate to \"Menu\" (top right) &rarr; \"Export\"\n      &rarr; \"Export all\". Select the unencrypted format XML option and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'truekeycsv'\">\n      Using the True Key desktop application, click the gear icon (top right) and then navigate to\n      \"App Settings\". Click the \"Export\" button, enter your password and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'clipperzhtml'\">\n      Log into the Clipperz web application (clipperz.is/app). Click the hamburger menu icon in the\n      top right to expand the navigation bar. Navigate to \"Data\" &rarr; \"Export\". Click the\n      \"download HTML+JSON\" button to save the HTML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'roboformcsv'\">\n      Using the RoboForm Editor desktop application, navigate to \"RoboForm\" (top left) &rarr;\n      \"Options\" &rarr; \"Account &amp; Data\" and click the \"Export\" button. Select all of your data,\n      change the \"Format\" to \"CSV file\" and then click the \"Export\" button to save the CSV file.\n      Note: RoboForm only allows you to export Logins. Other items will not be exported.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passboltcsv'\">\n      Log into the Passbolt web vault and navigate to the \"Passwords\" listing. Select all of the\n      passwords you would like to export and click the \"Export\" button at the top of the listing.\n      Choose the \"csv (lastpass)\" export format and click the \"Export\" button.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'ascendocsv'\">\n      Using the Ascendo DataVault desktop application, navigate to \"Tools\" &rarr; \"Export\". In the\n      dialog that pops up, select the \"All Items (DVX, CSV)\" option. Click the \"Ok\" button to save\n      the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordbossjson'\">\n      Using the Password Boss desktop application, navigate to \"File\" &rarr; \"Export data\" &rarr;\n      \"Password Boss JSON - not encrypted\" and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'zohovaultcsv'\">\n      Log into the Zoho web vault (vault.zoho.com). Navigate to \"Tools\" &rarr; \"Export Secrets\".\n      Select \"All Secrets\" and click the \"Zoho Vault Format CSV\" button. Highlight and copy the data\n      from the textarea. Open a text editor like Notepad and paste the data. Save the data from the\n      text editor as\n      <code>zoho_export.csv</code>.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'splashidcsv'\">\n      Using the SplashID Safe desktop application, click on the SplashID blue lock logo in the top\n      right corner. Navigate to \"Export\" &rarr; \"Export as CSV\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkeepcsv'\">\n      Using the PassKeep mobile app, navigate to \"Backup/Restore\". Locate the \"CSV Backup/Restore\"\n      section and click \"Backup to CSV\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'gnomejson'\">\n      Make sure you have python-keyring and python-gnomekeyring installed. Save the\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bit.ly/2GpOMTg\"\n        >GNOME Keyring Import/Export</a\n      >\n      python script to your desktop as <code>pw_helper.py</code>. Open terminal and run\n      <code>chmod +rx Desktop/pw_helper.py</code> and then\n      <code>python Desktop/pw_helper.py export Desktop/my_passwords.json</code>. Then upload the\n      resulting <code>my_passwords.json</code> file here to Bitwarden.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordagentcsv'\">\n      Using the Password Agent desktop application navigate to \"File\" &rarr; \"Export\", select the\n      \"Fields to export\" button and check all of the fields, change the \"Output format\" to \"CSV\",\n      and then click the \"Start\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passpackcsv'\">\n      Log into the Passpack website vault and navigate to \"Settings\" &rarr; \"Export\", then click the\n      \"Download\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passmanjson'\">\n      Open your Passman vault and click on \"Settings\" in the bottom left corner. In the \"Settings\"\n      window switch to the \"Export credentials\" tab and choose \"JSON\" as the export type. Enter your\n      vault's passphrase and click the \"Export\" button to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastcsv'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to CSV file\" option to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastjson'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to JSON file\" option to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'fsecurefsk'\">\n      Open the F-Secure KEY desktop application and navigate to \"Settings\" &rarr; \"Export\n      Passwords\". Select the \"Export\" button, enter your master password, and save the FSK file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'kasperskytxt'\">\n      Open the Kaspersky Password Manager desktop application and navigate to \"Settings\" &rarr;\n      \"Import/Export\". Locate the \"Export to text file\" section and select the \"Export\" button to\n      save the TXT file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'remembearcsv'\">\n      Open the RememBear desktop application and navigate to \"Settings\" &rarr; \"Account\" &rarr;\n      \"Export\". Enter your master password and select the \"Export Anyway\" button to save the CSV\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordwallettxt'\">\n      Open the PasswordWallet desktop application and navigate to \"File\" &rarr; \"Export\" &rarr;\n      \"Visible entries to text file\". Enter your password and select the \"Ok\" button to save the TXT\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'mykicsv'\">\n      Open the Myki desktop browser extension and navigate to \"Advanced\" &rarr; \"Export Accounts\"\n      and then scan the QR code with your mobile device. Various CSV files will then be saved to\n      your computer's downloads folder.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'securesafecsv'\">\n      Export your SecureSafe password safe to a CSV file with a comma delimiter.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'logmeoncecsv'\">\n      Open the LogMeOnce browser extension, then navigate to \"Open Menu\" &rarr; \"Export To\" and\n      select \"CSV File\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blackberrycsv'\">\n      Open the BlackBerry Password Keeper application, then navigate to \"Settings\" &rarr;\n      \"Import/Export\". Select \"Export Passwords\" and follow the instructions on screen to save the\n      unencrypted CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'buttercupcsv'\">\n      Open the Buttercup desktop application and unlock your vault. Right click on your vault's icon\n      and select \"Export\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'codebookcsv'\">\n      Open the Codebook desktop application and log in. Navigate to \"File\" &rarr; \"Export all\", then\n      click \"Yes\" on the dialog and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'encryptrcsv'\">\n      Open the newest version of the Encryptr desktop application and allow all of your data to\n      sync. Once syncing of your data is complete, the download icon in the top right corner will\n      turn pink. Click the download icon and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'yoticsv'\">\n      From the Yoti browser extension, click on \"Settings\", then \"Export Saved Logins\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'psonojson'\">\n      Log in to the Psono web vault, click on the \"Signed in as\"-dropdown, select \"Others\". Go to\n      the \"Export\"-tab and select the json type export and then click on Export.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkyjson'\">\n      Log in to \"https://vault.passky.org\" &rarr; \"Import & Export\" &rarr; \"Export\" in the Passky\n      section. (\"Backup\" is unsupported as it is encrypted).\n    </ng-container>\n    <ng-container *ngIf=\"format === 'protonpass'\">\n      In the ProtonPass browser extension, go to Settings > Export. Export without PGP encryption\n      and save the zip file.\n    </ng-container>\n  </bit-callout>\n  <bit-form-field>\n    <bit-label>{{ \"selectImportFile\" | i18n }}</bit-label>\n    <div class=\"file-selector\">\n      <button\n        bitButton\n        type=\"button\"\n        class=\"btn btn-outline-primary\"\n        (click)=\"fileSelector.click()\"\n      >\n        {{ \"chooseFile\" | i18n }}\n      </button>\n      {{ this.fileSelected ? this.fileSelected.name : (\"noFileChosen\" | i18n) }}\n    </div>\n    <input\n      bitInput\n      #fileSelector\n      type=\"file\"\n      id=\"file\"\n      class=\"form-control-file\"\n      name=\"file\"\n      formControlName=\"file\"\n      (change)=\"setSelectedFile($event)\"\n      hidden\n    />\n  </bit-form-field>\n  <bit-form-field>\n    <bit-label>{{ \"orCopyPasteFileContents\" | i18n }}</bit-label>\n    <textarea\n      id=\"fileContents\"\n      bitInput\n      name=\"FileContents\"\n      formControlName=\"fileContents\"\n    ></textarea>\n  </bit-form-field>\n  <button\n    bitButton\n    bitFormButton\n    type=\"submit\"\n    buttonType=\"primary\"\n    [disabled]=\"importBlockedByPolicy\"\n  >\n    {{ \"importData\" | i18n }}\n  </button>\n</form>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport * as JSZip from \"jszip\";\nimport { concat, Observable, Subject, lastValueFrom, combineLatest } from \"rxjs\";\nimport { map, takeUntil } from \"rxjs/operators\";\n\nimport {\n  canAccessImportExport,\n  OrganizationService,\n} from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { DialogService } from \"@bitwarden/components\";\nimport {\n  ImportOption,\n  ImportResult,\n  ImportServiceAbstraction,\n  ImportType,\n} from \"@bitwarden/importer\";\n\nimport {\n  FilePasswordPromptComponent,\n  ImportErrorDialogComponent,\n  ImportSuccessDialogComponent,\n} from \"./dialog\";\n\n@Component({\n  selector: \"app-import\",\n  templateUrl: \"import.component.html\",\n})\nexport class ImportComponent implements OnInit, OnDestroy {\n  featuredImportOptions: ImportOption[];\n  importOptions: ImportOption[];\n  format: ImportType = null;\n  fileSelected: File;\n\n  folders$: Observable<FolderView[]>;\n  collections$: Observable<CollectionView[]>;\n  organizations$: Observable<Organization[]>;\n\n  protected organizationId: string = null;\n  protected destroy$ = new Subject<void>();\n\n  private _importBlockedByPolicy = false;\n\n  formGroup = this.formBuilder.group({\n    vaultSelector: [\n      \"myVault\",\n      {\n        nonNullable: true,\n        validators: [Validators.required],\n      },\n    ],\n    targetSelector: [null],\n    format: [null as ImportType | null, [Validators.required]],\n    fileContents: [],\n    file: [],\n  });\n\n  constructor(\n    protected i18nService: I18nService,\n    protected importService: ImportServiceAbstraction,\n    protected router: Router,\n    protected platformUtilsService: PlatformUtilsService,\n    protected policyService: PolicyService,\n    private logService: LogService,\n    protected syncService: SyncService,\n    protected dialogService: DialogService,\n    protected folderService: FolderService,\n    protected collectionService: CollectionService,\n    protected organizationService: OrganizationService,\n    protected formBuilder: FormBuilder\n  ) {}\n\n  protected get importBlockedByPolicy(): boolean {\n    return this._importBlockedByPolicy;\n  }\n\n  /**\n   * Callback that is called after a successful import.\n   */\n  protected async onSuccessfulImport(): Promise<void> {\n    await this.router.navigate([\"vault\"]);\n  }\n\n  ngOnInit() {\n    this.setImportOptions();\n\n    this.organizations$ = concat(\n      this.organizationService.memberOrganizations$.pipe(\n        canAccessImportExport(this.i18nService),\n        map((orgs) => orgs.sort(Utils.getSortFunction(this.i18nService, \"name\")))\n      )\n    );\n\n    combineLatest([\n      this.policyService.policyAppliesToActiveUser$(PolicyType.PersonalOwnership),\n      this.organizations$,\n    ])\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(([policyApplies, orgs]) => {\n        this._importBlockedByPolicy = policyApplies;\n        if (policyApplies && orgs.length == 0) {\n          this.formGroup.disable();\n        }\n      });\n\n    if (this.organizationId) {\n      this.formGroup.controls.vaultSelector.patchValue(this.organizationId);\n      this.formGroup.controls.vaultSelector.disable();\n\n      this.collections$ = Utils.asyncToObservable(() =>\n        this.collectionService\n          .getAllDecrypted()\n          .then((c) => c.filter((c2) => c2.organizationId === this.organizationId))\n      );\n    } else {\n      // Filter out the `no folder`-item from folderViews$\n      this.folders$ = this.folderService.folderViews$.pipe(\n        map((folders) => folders.filter((f) => f.id != null))\n      );\n      this.formGroup.controls.targetSelector.disable();\n\n      this.formGroup.controls.vaultSelector.valueChanges\n        .pipe(takeUntil(this.destroy$))\n        .subscribe((value) => {\n          this.organizationId = value != \"myVault\" ? value : undefined;\n          if (!this._importBlockedByPolicy) {\n            this.formGroup.controls.targetSelector.enable();\n          }\n          if (value) {\n            this.collections$ = Utils.asyncToObservable(() =>\n              this.collectionService\n                .getAllDecrypted()\n                .then((c) => c.filter((c2) => c2.organizationId === value))\n            );\n          }\n        });\n\n      this.formGroup.controls.vaultSelector.setValue(\"myVault\");\n    }\n    this.formGroup.controls.format.valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((value) => {\n        this.format = value;\n      });\n  }\n\n  submit = async () => {\n    if (this.formGroup.invalid) {\n      this.formGroup.markAllAsTouched();\n      return;\n    }\n\n    await this.performImport();\n  };\n\n  protected async performImport() {\n    if (this.importBlockedByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalOwnershipPolicyInEffectImports\")\n      );\n      return;\n    }\n\n    const promptForPassword_callback = async () => {\n      return await this.getFilePassword();\n    };\n\n    const importer = this.importService.getImporter(\n      this.format,\n      promptForPassword_callback,\n      this.organizationId\n    );\n\n    if (importer === null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFormat\")\n      );\n      return;\n    }\n\n    const fileEl = document.getElementById(\"file\") as HTMLInputElement;\n    const files = fileEl.files;\n    let fileContents = this.formGroup.controls.fileContents.value;\n    if ((files == null || files.length === 0) && (fileContents == null || fileContents === \"\")) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      return;\n    }\n\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      return;\n    }\n\n    if (this.organizationId) {\n      await this.organizationService.get(this.organizationId)?.isAdmin;\n    }\n\n    try {\n      const result = await this.importService.import(\n        importer,\n        fileContents,\n        this.organizationId,\n        this.formGroup.controls.targetSelector.value,\n        this.isUserAdmin(this.organizationId)\n      );\n\n      //No errors, display success message\n      this.dialogService.open<unknown, ImportResult>(ImportSuccessDialogComponent, {\n        data: result,\n      });\n\n      this.syncService.fullSync(true);\n      await this.onSuccessfulImport();\n    } catch (e) {\n      this.dialogService.open<unknown, Error>(ImportErrorDialogComponent, {\n        data: e,\n      });\n      this.logService.error(e);\n    }\n  }\n\n  private isUserAdmin(organizationId?: string): boolean {\n    if (!organizationId) {\n      return false;\n    }\n    return this.organizationService.get(this.organizationId)?.isAdmin;\n  }\n\n  getFormatInstructionTitle() {\n    if (this.format == null) {\n      return null;\n    }\n\n    const results = this.featuredImportOptions\n      .concat(this.importOptions)\n      .filter((o) => o.id === this.format);\n    if (results.length > 0) {\n      return this.i18nService.t(\"instructionsFor\", results[0].name);\n    }\n    return null;\n  }\n\n  protected setImportOptions() {\n    this.featuredImportOptions = [\n      {\n        id: null,\n        name: \"-- \" + this.i18nService.t(\"select\") + \" --\",\n      },\n      ...this.importService.featuredImportOptions,\n    ];\n    this.importOptions = [...this.importService.regularImportOptions].sort((a, b) => {\n      if (a.name == null && b.name != null) {\n        return -1;\n      }\n      if (a.name != null && b.name == null) {\n        return 1;\n      }\n      if (a.name == null && b.name == null) {\n        return 0;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(a.name, b.name)\n        : a.name.localeCompare(b.name);\n    });\n  }\n\n  setSelectedFile(event: Event) {\n    const fileInputEl = <HTMLInputElement>event.target;\n    this.fileSelected = fileInputEl.files.length > 0 ? fileInputEl.files[0] : null;\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    if (this.format === \"1password1pux\" && file.name.endsWith(\".1pux\")) {\n      return this.extractZipContent(file, \"export.data\");\n    }\n    if (\n      this.format === \"protonpass\" &&\n      (file.type === \"application/zip\" ||\n        file.type == \"application/x-zip-compressed\" ||\n        file.name.endsWith(\".zip\"))\n    ) {\n      return this.extractZipContent(file, \"Proton Pass/data.json\");\n    }\n\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        if (this.format === \"lastpasscsv\" && file.type === \"text/html\") {\n          const parser = new DOMParser();\n          const doc = parser.parseFromString((evt.target as any).result, \"text/html\");\n          const pre = doc.querySelector(\"pre\");\n          if (pre != null) {\n            resolve(pre.textContent);\n            return;\n          }\n          reject();\n          return;\n        }\n\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private extractZipContent(zipFile: File, contentFilePath: string): Promise<string> {\n    return new JSZip()\n      .loadAsync(zipFile)\n      .then((zip) => {\n        return zip.file(contentFilePath).async(\"string\");\n      })\n      .then(\n        function success(content) {\n          return content;\n        },\n        function error(e) {\n          return \"\";\n        }\n      );\n  }\n\n  async getFilePassword(): Promise<string> {\n    const dialog = this.dialogService.open<string>(FilePasswordPromptComponent, {\n      ariaModal: true,\n    });\n\n    return await lastValueFrom(dialog.closed);\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from \"@angular/core\";\n\n@Directive({\n  selector: \"[appBoxRow]\",\n})\nexport class BoxRowDirective implements OnInit {\n  el: HTMLElement = null;\n  formEls: Element[];\n\n  constructor(elRef: ElementRef) {\n    this.el = elRef.nativeElement;\n  }\n\n  ngOnInit(): void {\n    this.formEls = Array.from(\n      this.el.querySelectorAll('input:not([type=\"hidden\"]), select, textarea')\n    );\n    this.formEls.forEach((formEl) => {\n      formEl.addEventListener(\n        \"focus\",\n        () => {\n          this.el.classList.add(\"active\");\n        },\n        false\n      );\n\n      formEl.addEventListener(\n        \"blur\",\n        () => {\n          this.el.classList.remove(\"active\");\n        },\n        false\n      );\n    });\n  }\n\n  @HostListener(\"click\", [\"$event\"]) onClick(event: Event) {\n    const target = event.target as HTMLElement;\n    if (\n      target !== this.el &&\n      !target.classList.contains(\"progress\") &&\n      !target.classList.contains(\"progress-bar\")\n    ) {\n      return;\n    }\n\n    if (this.formEls.length > 0) {\n      const formEl = this.formEls[0] as HTMLElement;\n      if (formEl.tagName.toLowerCase() === \"input\") {\n        const inputEl = formEl as HTMLInputElement;\n        if (inputEl.type != null && inputEl.type.toLowerCase() === \"checkbox\") {\n          inputEl.click();\n          return;\n        }\n      }\n      formEl.focus();\n    }\n  }\n}\n","<ng-container *ngIf=\"show\">\n  <app-callout type=\"info\" title=\"{{ scopeConfig.title | i18n }}\">\n    {{ scopeConfig.description | i18n : scopeConfig.scopeIdentifier }}\n  </app-callout>\n</ng-container>\n","import { Component, Input, OnInit } from \"@angular/core\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\n\n@Component({\n  selector: \"app-export-scope-callout\",\n  templateUrl: \"export-scope-callout.component.html\",\n})\nexport class ExportScopeCalloutComponent implements OnInit {\n  @Input() organizationId: string = null;\n\n  show = false;\n  scopeConfig: {\n    title: string;\n    description: string;\n    scopeIdentifier: string;\n  };\n\n  constructor(\n    protected organizationService: OrganizationService,\n    protected stateService: StateService\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    if (!this.organizationService.hasOrganizations()) {\n      return;\n    }\n    this.scopeConfig =\n      this.organizationId != null\n        ? {\n            title: \"exportingOrganizationVaultTitle\",\n            description: \"exportingOrganizationVaultDesc\",\n            scopeIdentifier: this.organizationService.get(this.organizationId).name,\n          }\n        : {\n            title: \"exportingPersonalVaultTitle\",\n            description: \"exportingIndividualVaultDescription\",\n            scopeIdentifier: await this.stateService.getEmail(),\n          };\n    this.show = true;\n  }\n}\n","import { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nexport abstract class ImportApiServiceAbstraction {\n  postImportCiphers: (request: ImportCiphersRequest) => Promise<any>;\n  postImportOrganizationCiphers: (\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ) => Promise<any>;\n}\n","import { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nimport { ImportApiServiceAbstraction } from \"./import-api.service.abstraction\";\n\nexport class ImportApiService implements ImportApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  async postImportCiphers(request: ImportCiphersRequest): Promise<any> {\n    return await this.apiService.send(\"POST\", \"/ciphers/import\", request, true, false);\n  }\n\n  async postImportOrganizationCiphers(\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ): Promise<any> {\n    return await this.apiService.send(\n      \"POST\",\n      \"/ciphers/import-organization?organizationId=\" + organizationId,\n      request,\n      true,\n      false\n    );\n  }\n}\n","import { Importer } from \"../importers/importer\";\nimport { ImportOption, ImportType } from \"../models/import-options\";\nimport { ImportResult } from \"../models/import-result\";\n\nexport abstract class ImportServiceAbstraction {\n  featuredImportOptions: readonly ImportOption[];\n  regularImportOptions: readonly ImportOption[];\n  getImportOptions: () => ImportOption[];\n  import: (\n    importer: Importer,\n    fileContents: string,\n    organizationId?: string,\n    selectedImportTarget?: string,\n    isUserAdmin?: boolean\n  ) => Promise<ImportResult>;\n  getImporter: (\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>,\n    organizationId: string\n  ) => Importer;\n}\n","import { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { FolderWithIdRequest } from \"../../vault/models/request/folder-with-id.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  folders: FolderWithIdRequest[] = [];\n  folderRelationships: KvpRequest<number, number>[] = [];\n}\n","import { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { CollectionWithIdRequest } from \"../../vault/models/request/collection-with-id.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportOrganizationCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  collections: CollectionWithIdRequest[] = [];\n  collectionRelationships: KvpRequest<number, number>[] = [];\n}\n","export class KvpRequest<TK, TV> {\n  key: TK;\n  value: TV;\n\n  constructor(key: TK, value: TV) {\n    this.key = key;\n    this.value = value;\n  }\n}\n","import { Collection } from \"../domain/collection\";\n\nimport { CollectionRequest } from \"./collection.request\";\n\nexport class CollectionWithIdRequest extends CollectionRequest {\n  id: string;\n\n  constructor(collection?: Collection) {\n    if (collection == null) {\n      return;\n    }\n    super(collection);\n    this.id = collection.id;\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nexport class ImportResult {\n  success = false;\n  errorMessage: string;\n  ciphers: CipherView[] = [];\n  folders: FolderView[] = [];\n  folderRelationships: [number, number][] = [];\n  collections: CollectionView[] = [];\n  collectionRelationships: [number, number][] = [];\n}\n","import * as papa from \"papaparse\";\n\nimport { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { ConsoleLogService } from \"@bitwarden/common/platform/services/console-log.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { LoginUriView } from \"@bitwarden/common/vault/models/view/login-uri.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nexport abstract class BaseImporter {\n  organizationId: string = null;\n\n  protected logService: LogService = new ConsoleLogService(false);\n\n  protected newLineRegex = /(?:\\r\\n|\\r|\\n)/;\n\n  protected passwordFieldNames = [\n    \"password\",\n    \"pass word\",\n    \"passphrase\",\n    \"pass phrase\",\n    \"pass\",\n    \"code\",\n    \"code word\",\n    \"codeword\",\n    \"secret\",\n    \"secret word\",\n    \"personpwd\",\n    \"key\",\n    \"keyword\",\n    \"key word\",\n    \"keyphrase\",\n    \"key phrase\",\n    \"form_pw\",\n    \"wppassword\",\n    \"pin\",\n    \"pwd\",\n    \"pw\",\n    \"pword\",\n    \"passwd\",\n    \"p\",\n    \"serial\",\n    \"serial#\",\n    \"license key\",\n    \"reg #\",\n\n    // Non-English names\n    \"passwort\",\n  ];\n\n  protected usernameFieldNames = [\n    \"user\",\n    \"name\",\n    \"user name\",\n    \"username\",\n    \"login name\",\n    \"email\",\n    \"e-mail\",\n    \"id\",\n    \"userid\",\n    \"user id\",\n    \"login\",\n    \"form_loginname\",\n    \"wpname\",\n    \"mail\",\n    \"loginid\",\n    \"login id\",\n    \"log\",\n    \"personlogin\",\n    \"first name\",\n    \"last name\",\n    \"card#\",\n    \"account #\",\n    \"member\",\n    \"member #\",\n\n    // Non-English names\n    \"nom\",\n    \"benutzername\",\n  ];\n\n  protected notesFieldNames = [\n    \"note\",\n    \"notes\",\n    \"comment\",\n    \"comments\",\n    \"memo\",\n    \"description\",\n    \"free form\",\n    \"freeform\",\n    \"free text\",\n    \"freetext\",\n    \"free\",\n\n    // Non-English names\n    \"kommentar\",\n  ];\n\n  protected uriFieldNames: string[] = [\n    \"url\",\n    \"hyper link\",\n    \"hyperlink\",\n    \"link\",\n    \"host\",\n    \"hostname\",\n    \"host name\",\n    \"server\",\n    \"address\",\n    \"hyper ref\",\n    \"href\",\n    \"web\",\n    \"website\",\n    \"web site\",\n    \"site\",\n    \"web-site\",\n    \"uri\",\n\n    // Non-English names\n    \"ort\",\n    \"adresse\",\n  ];\n\n  protected parseCsvOptions = {\n    encoding: \"UTF-8\",\n    skipEmptyLines: false,\n  };\n\n  protected get organization() {\n    return this.organizationId != null;\n  }\n\n  protected parseXml(data: string): Document {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(data, \"application/xml\");\n    return doc != null && doc.querySelector(\"parsererror\") == null ? doc : null;\n  }\n\n  protected parseCsv(data: string, header: boolean, options: any = {}): any[] {\n    const parseOptions: papa.ParseConfig<string> = Object.assign(\n      { header: header },\n      this.parseCsvOptions,\n      options\n    );\n    data = this.splitNewLine(data).join(\"\\n\").trim();\n    const result = papa.parse(data, parseOptions);\n    if (result.errors != null && result.errors.length > 0) {\n      result.errors.forEach((e) => {\n        if (e.row != null) {\n          this.logService.warning(\"Error parsing row \" + e.row + \": \" + e.message);\n        }\n      });\n    }\n    return result.data && result.data.length > 0 ? result.data : null;\n  }\n\n  protected parseSingleRowCsv(rowData: string) {\n    if (this.isNullOrWhitespace(rowData)) {\n      return null;\n    }\n    const parsedRow = this.parseCsv(rowData, false);\n    if (parsedRow != null && parsedRow.length > 0 && parsedRow[0].length > 0) {\n      return parsedRow[0];\n    }\n    return null;\n  }\n\n  protected makeUriArray(uri: string | string[]): LoginUriView[] {\n    if (uri == null) {\n      return null;\n    }\n\n    if (typeof uri === \"string\") {\n      const loginUri = new LoginUriView();\n      loginUri.uri = this.fixUri(uri);\n      if (this.isNullOrWhitespace(loginUri.uri)) {\n        return null;\n      }\n      loginUri.match = null;\n      return [loginUri];\n    }\n\n    if (uri.length > 0) {\n      const returnArr: LoginUriView[] = [];\n      uri.forEach((u) => {\n        const loginUri = new LoginUriView();\n        loginUri.uri = this.fixUri(u);\n        if (this.isNullOrWhitespace(loginUri.uri)) {\n          return;\n        }\n        loginUri.match = null;\n        returnArr.push(loginUri);\n      });\n      return returnArr.length === 0 ? null : returnArr;\n    }\n\n    return null;\n  }\n\n  protected fixUri(uri: string) {\n    if (uri == null) {\n      return null;\n    }\n    uri = uri.trim();\n    if (uri.indexOf(\"://\") === -1 && uri.indexOf(\".\") >= 0) {\n      uri = \"http://\" + uri;\n    }\n    if (uri.length > 1000) {\n      return uri.substring(0, 1000);\n    }\n    return uri;\n  }\n\n  protected nameFromUrl(url: string) {\n    const hostname = Utils.getHostname(url);\n    if (this.isNullOrWhitespace(hostname)) {\n      return null;\n    }\n    return hostname.startsWith(\"www.\") ? hostname.replace(\"www.\", \"\") : hostname;\n  }\n\n  protected isNullOrWhitespace(str: string): boolean {\n    return Utils.isNullOrWhitespace(str);\n  }\n\n  protected getValueOrDefault(str: string, defaultValue: string = null): string {\n    if (this.isNullOrWhitespace(str)) {\n      return defaultValue;\n    }\n    return str;\n  }\n\n  protected splitNewLine(str: string): string[] {\n    return str.split(this.newLineRegex);\n  }\n\n  protected setCardExpiration(cipher: CipherView, expiration: string): boolean {\n    if (this.isNullOrWhitespace(expiration)) {\n      return false;\n    }\n\n    expiration = expiration.replace(/\\s/g, \"\");\n\n    const monthRegex = \"0?(?<month>[1-9]|1[0-2])\";\n    const yearRegex = \"(?<year>(?:[1-2][0-9])?[0-9]{2})\";\n    const expiryRegex = new RegExp(`^${monthRegex}/${yearRegex}$`);\n\n    const expiryMatch = expiration.match(expiryRegex);\n\n    if (!expiryMatch) {\n      return false;\n    }\n\n    cipher.card.expMonth = expiryMatch.groups.month;\n    const year: string = expiryMatch.groups.year;\n    cipher.card.expYear = year.length === 2 ? \"20\" + year : year;\n    return true;\n  }\n\n  protected moveFoldersToCollections(result: ImportResult) {\n    result.folderRelationships.forEach((r) => result.collectionRelationships.push(r));\n    result.collections = result.folders.map((f) => {\n      const collection = new CollectionView();\n      collection.name = f.name;\n      collection.id = f.id;\n      return collection;\n    });\n    result.folderRelationships = [];\n    result.folders = [];\n  }\n\n  protected querySelectorDirectChild(parentEl: Element, query: string) {\n    const els = this.querySelectorAllDirectChild(parentEl, query);\n    return els.length === 0 ? null : els[0];\n  }\n\n  protected querySelectorAllDirectChild(parentEl: Element, query: string) {\n    return Array.from(parentEl.querySelectorAll(query)).filter((el) => el.parentNode === parentEl);\n  }\n\n  protected initLoginCipher() {\n    const cipher = new CipherView();\n    cipher.favorite = false;\n    cipher.notes = \"\";\n    cipher.fields = [];\n    cipher.login = new LoginView();\n    cipher.type = CipherType.Login;\n    return cipher;\n  }\n\n  protected cleanupCipher(cipher: CipherView) {\n    if (cipher == null) {\n      return;\n    }\n    if (cipher.type !== CipherType.Login) {\n      cipher.login = null;\n    }\n    if (this.isNullOrWhitespace(cipher.name)) {\n      cipher.name = \"--\";\n    }\n    if (this.isNullOrWhitespace(cipher.notes)) {\n      cipher.notes = null;\n    } else {\n      cipher.notes = cipher.notes.trim();\n    }\n    if (cipher.fields != null && cipher.fields.length === 0) {\n      cipher.fields = null;\n    }\n    if (cipher.passwordHistory != null && cipher.passwordHistory.length === 0) {\n      cipher.passwordHistory = null;\n    }\n  }\n\n  protected processKvp(\n    cipher: CipherView,\n    key: string,\n    value: string,\n    type: FieldType = FieldType.Text\n  ) {\n    if (this.isNullOrWhitespace(value)) {\n      return;\n    }\n    if (this.isNullOrWhitespace(key)) {\n      key = \"\";\n    }\n    if (value.length > 200 || value.trim().search(this.newLineRegex) > -1) {\n      if (cipher.notes == null) {\n        cipher.notes = \"\";\n      }\n      cipher.notes += key + \": \" + this.splitNewLine(value).join(\"\\n\") + \"\\n\";\n    } else {\n      if (cipher.fields == null) {\n        cipher.fields = [];\n      }\n      const field = new FieldView();\n      field.type = type;\n      field.name = key;\n      field.value = value;\n      cipher.fields.push(field);\n    }\n  }\n\n  protected processFolder(result: ImportResult, folderName: string) {\n    if (this.isNullOrWhitespace(folderName)) {\n      return;\n    }\n\n    let folderIndex = result.folders.length;\n    // Replace backslashes with forward slashes, ensuring we create sub-folders\n    folderName = folderName.replace(\"\\\\\", \"/\");\n    let addFolder = true;\n\n    for (let i = 0; i < result.folders.length; i++) {\n      if (result.folders[i].name === folderName) {\n        addFolder = false;\n        folderIndex = i;\n        break;\n      }\n    }\n\n    if (addFolder) {\n      const f = new FolderView();\n      f.name = folderName;\n      result.folders.push(f);\n    }\n\n    result.folderRelationships.push([result.ciphers.length, folderIndex]);\n  }\n\n  protected convertToNoteIfNeeded(cipher: CipherView) {\n    if (\n      cipher.type === CipherType.Login &&\n      this.isNullOrWhitespace(cipher.login.username) &&\n      this.isNullOrWhitespace(cipher.login.password) &&\n      (cipher.login.uris == null || cipher.login.uris.length === 0)\n    ) {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    }\n  }\n\n  protected processFullName(cipher: CipherView, fullName: string) {\n    if (this.isNullOrWhitespace(fullName)) {\n      return;\n    }\n\n    const nameParts = fullName.split(\" \");\n    if (nameParts.length > 0) {\n      cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n    }\n    if (nameParts.length === 2) {\n      cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n    } else if (nameParts.length >= 3) {\n      cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n      cipher.identity.lastName = nameParts.slice(2, nameParts.length).join(\" \");\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AscendoCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 2) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const val: string = value[i + 2];\n          const field: string = value[i + 1];\n          if (this.isNullOrWhitespace(val) || this.isNullOrWhitespace(field)) {\n            continue;\n          }\n\n          const fieldLower = field.toLowerCase();\n          if (cipher.login.password == null && this.passwordFieldNames.indexOf(fieldLower) > -1) {\n            cipher.login.password = this.getValueOrDefault(val);\n          } else if (\n            cipher.login.username == null &&\n            this.usernameFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.username = this.getValueOrDefault(val);\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n          } else {\n            this.processKvp(cipher, field, val);\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.login.uris = this.makeUriArray(value.web);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.username = this.getValueOrDefault(value.login);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.logins != null) {\n      results.logins.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.pwd);\n        cipher.login.username = this.getValueOrDefault(value.loginName);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.notes != null) {\n      results.notes.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.name = this.getValueOrDefault(value.label);\n        cipher.notes = this.getValueOrDefault(value.text);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.cards != null) {\n      results.cards.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Card;\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.card.cardholderName = this.getValueOrDefault(value.holderName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        if (value.expirationDate != null) {\n          if (value.expirationDate.month != null) {\n            cipher.card.expMonth = value.expirationDate.month + \"\";\n          }\n          if (value.expirationDate.year != null) {\n            cipher.card.expYear = value.expirationDate.year + \"\";\n          }\n        }\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AviraCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.name,\n        this.getValueOrDefault(this.nameFromUrl(value.website), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.website);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (\n        this.isNullOrWhitespace(value.username) &&\n        !this.isNullOrWhitespace(value.secondary_username)\n      ) {\n        cipher.login.username = value.secondary_username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.notes = this.getValueOrDefault(value.secondary_username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlackBerryCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.grouping === \"list\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.favorite = value.fav === \"1\";\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.extra);\n      if (value.grouping !== \"note\") {\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ChromeCsvImporter extends BaseImporter implements Importer {\n  private androidPatternRegex = new RegExp(\"^android:\\\\/\\\\/.*(?<=@)(.*)(?=\\\\/)\");\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      let name = value.name;\n      if (!name && this.androidPatternRegex.test(value.url)) {\n        name = value.url.match(this.androidPatternRegex)[1];\n      }\n      cipher.name = this.getValueOrDefault(name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.organization && !this.isNullOrWhitespace(value.collections)) {\n        const collections = (value.collections as string).split(\",\");\n        collections.forEach((col) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === col) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = col;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization) {\n        this.processFolder(result, value.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.favorite =\n        !this.organization && this.getValueOrDefault(value.favorite, \"0\") !== \"0\" ? true : false;\n      cipher.type = CipherType.Login;\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      try {\n        cipher.reprompt = parseInt(\n          this.getValueOrDefault(value.reprompt, CipherRepromptType.None.toString()),\n          10\n        );\n      } catch (e) {\n        // eslint-disable-next-line\n        console.error(\"Unable to parse reprompt value\", e);\n        cipher.reprompt = CipherRepromptType.None;\n      }\n\n      if (!this.isNullOrWhitespace(value.fields)) {\n        const fields = this.splitNewLine(value.fields);\n        for (let i = 0; i < fields.length; i++) {\n          if (this.isNullOrWhitespace(fields[i])) {\n            continue;\n          }\n\n          const delimPosition = fields[i].lastIndexOf(\": \");\n          if (delimPosition === -1) {\n            continue;\n          }\n\n          if (cipher.fields == null) {\n            cipher.fields = [];\n          }\n\n          const field = new FieldView();\n          field.name = fields[i].substr(0, delimPosition);\n          field.value = null;\n          field.type = FieldType.Text;\n          if (fields[i].length > delimPosition + 2) {\n            field.value = fields[i].substr(delimPosition + 2);\n          }\n          cipher.fields.push(field);\n        }\n      }\n\n      const valueType = value.type != null ? value.type.toLowerCase() : null;\n      switch (valueType) {\n        case \"note\":\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote = new SecureNoteView();\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default: {\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.totp = this.getValueOrDefault(value.login_totp || value.totp);\n          cipher.login.username = this.getValueOrDefault(value.login_username || value.username);\n          cipher.login.password = this.getValueOrDefault(value.login_password || value.password);\n          const uris = this.parseSingleRowCsv(value.login_uri || value.uri);\n          cipher.login.uris = this.makeUriArray(uris);\n          break;\n        }\n      }\n\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import {\n  CipherWithIdExport,\n  CollectionWithIdExport,\n  FolderWithIdExport,\n} from \"@bitwarden/common/models/export\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport {\n  BitwardenEncryptedIndividualJsonExport,\n  BitwardenEncryptedOrgJsonExport,\n  BitwardenJsonExport,\n  BitwardenUnEncryptedIndividualJsonExport,\n  BitwardenUnEncryptedOrgJsonExport,\n} from \"@bitwarden/exporter/vault-export/bitwarden-json-export-types\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  protected constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService,\n    protected cipherService: CipherService\n  ) {\n    super();\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results: BitwardenJsonExport = JSON.parse(data);\n    if (results == null || results.items == null) {\n      this.result.success = false;\n      return this.result;\n    }\n\n    if (results.encrypted) {\n      await this.parseEncrypted(results as any);\n    } else {\n      await this.parseDecrypted(results as any);\n    }\n\n    return this.result;\n  }\n\n  private async parseEncrypted(\n    results: BitwardenEncryptedIndividualJsonExport | BitwardenEncryptedOrgJsonExport\n  ) {\n    if (results.encKeyValidation_DO_NOT_EDIT != null) {\n      const orgKey = await this.cryptoService.getOrgKey(this.organizationId);\n      const encKeyValidation = new EncString(results.encKeyValidation_DO_NOT_EDIT);\n      const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n        encKeyValidation,\n        orgKey\n      );\n      if (encKeyValidationDecrypt === null) {\n        this.result.success = false;\n        this.result.errorMessage = this.i18nService.t(\"importEncKeyError\");\n        return;\n      }\n    }\n\n    const groupingsMap = this.organization\n      ? await this.parseCollections(results as BitwardenEncryptedOrgJsonExport)\n      : await this.parseFolders(results as BitwardenEncryptedIndividualJsonExport);\n\n    for (const c of results.items) {\n      const cipher = CipherWithIdExport.toDomain(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = this.organizationId;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      const view = await cipher.decrypt(\n        await this.cipherService.getKeyForCipherKeyDecryption(cipher)\n      );\n      this.cleanupCipher(view);\n      this.result.ciphers.push(view);\n    }\n\n    this.result.success = true;\n  }\n\n  private async parseDecrypted(\n    results: BitwardenUnEncryptedIndividualJsonExport | BitwardenUnEncryptedOrgJsonExport\n  ) {\n    const groupingsMap = this.organization\n      ? await this.parseCollections(results as BitwardenUnEncryptedOrgJsonExport)\n      : await this.parseFolders(results as BitwardenUnEncryptedIndividualJsonExport);\n\n    results.items.forEach((c) => {\n      const cipher = CipherWithIdExport.toView(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = null;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n  }\n\n  private async parseFolders(\n    data: BitwardenUnEncryptedIndividualJsonExport | BitwardenEncryptedIndividualJsonExport\n  ): Promise<Map<string, number>> | null {\n    if (data.folders == null) {\n      return null;\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    for (const f of data.folders) {\n      let folderView: FolderView;\n      if (data.encrypted) {\n        const folder = FolderWithIdExport.toDomain(f);\n        if (folder != null) {\n          folderView = await folder.decrypt();\n        }\n      } else {\n        folderView = FolderWithIdExport.toView(f);\n      }\n\n      if (folderView != null) {\n        groupingsMap.set(f.id, this.result.folders.length);\n        this.result.folders.push(folderView);\n      }\n    }\n    return groupingsMap;\n  }\n\n  private async parseCollections(\n    data: BitwardenUnEncryptedOrgJsonExport | BitwardenEncryptedOrgJsonExport\n  ): Promise<Map<string, number>> | null {\n    if (data.collections == null) {\n      return null;\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    for (const c of data.collections) {\n      let collectionView: CollectionView;\n      if (data.encrypted) {\n        const collection = CollectionWithIdExport.toDomain(c);\n        collection.organizationId = this.organizationId;\n        collectionView = await collection.decrypt();\n      } else {\n        collectionView = CollectionWithIdExport.toView(c);\n        collectionView.organizationId = null;\n      }\n\n      if (collectionView != null) {\n        groupingsMap.set(c.id, this.result.collections.length);\n        this.result.collections.push(collectionView);\n      }\n    }\n    return groupingsMap;\n  }\n}\n","import { KdfConfig } from \"@bitwarden/common/auth/models/domain/kdf-config\";\nimport { KdfType } from \"@bitwarden/common/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { BitwardenPasswordProtectedFileFormat } from \"@bitwarden/exporter/vault-export/bitwarden-json-export-types\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { Importer } from \"../importer\";\n\nimport { BitwardenJsonImporter } from \"./bitwarden-json-importer\";\n\nexport class BitwardenPasswordProtectedImporter extends BitwardenJsonImporter implements Importer {\n  private key: SymmetricCryptoKey;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    cipherService: CipherService,\n    private promptForPassword_callback: () => Promise<string>\n  ) {\n    super(cryptoService, i18nService, cipherService);\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const parsedData: BitwardenPasswordProtectedFileFormat = JSON.parse(data);\n\n    if (!parsedData) {\n      result.success = false;\n      return result;\n    }\n\n    // File is unencrypted\n    if (!parsedData?.encrypted) {\n      return await super.parse(data);\n    }\n\n    // File is account-encrypted\n    if (!parsedData?.passwordProtected) {\n      return await super.parse(data);\n    }\n\n    if (this.cannotParseFile(parsedData)) {\n      result.success = false;\n      return result;\n    }\n\n    // File is password-protected\n    const password = await this.promptForPassword_callback();\n    if (!(await this.checkPassword(parsedData, password))) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"invalidFilePassword\");\n      return result;\n    }\n\n    const encData = new EncString(parsedData.data);\n    const clearTextData = await this.cryptoService.decryptToUtf8(encData, this.key);\n    return await super.parse(clearTextData);\n  }\n\n  private async checkPassword(\n    jdoc: BitwardenPasswordProtectedFileFormat,\n    password: string\n  ): Promise<boolean> {\n    if (this.isNullOrWhitespace(password)) {\n      return false;\n    }\n\n    this.key = await this.cryptoService.makePinKey(\n      password,\n      jdoc.salt,\n      jdoc.kdfType,\n      new KdfConfig(jdoc.kdfIterations, jdoc.kdfMemory, jdoc.kdfParallelism)\n    );\n\n    const encKeyValidation = new EncString(jdoc.encKeyValidation_DO_NOT_EDIT);\n\n    const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n      encKeyValidation,\n      this.key\n    );\n    if (encKeyValidationDecrypt === null) {\n      return false;\n    }\n    return true;\n  }\n\n  private cannotParseFile(jdoc: BitwardenPasswordProtectedFileFormat): boolean {\n    return (\n      !jdoc ||\n      !jdoc.encrypted ||\n      !jdoc.passwordProtected ||\n      !jdoc.salt ||\n      !jdoc.kdfIterations ||\n      typeof jdoc.kdfIterations !== \"number\" ||\n      jdoc.kdfType == null ||\n      KdfType[jdoc.kdfType] == null ||\n      !jdoc.encKeyValidation_DO_NOT_EDIT ||\n      !jdoc.data\n    );\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlurCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.label === \"null\") {\n        value.label = null;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.label,\n        this.getValueOrDefault(this.nameFromUrl(value.domain), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.domain);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (this.isNullOrWhitespace(value.email) && !this.isNullOrWhitespace(value.username)) {\n        cipher.login.username = value.username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.email);\n        cipher.notes = this.getValueOrDefault(value.username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst OfficialProps = [\"!group_id\", \"!group_name\", \"title\", \"username\", \"password\", \"URL\", \"id\"];\n\nexport class ButtercupCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value[\"!group_name\"]));\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      let processingCustomFields = false;\n      for (const prop in value) {\n        // eslint-disable-next-line\n        if (value.hasOwnProperty(prop)) {\n          if (!processingCustomFields && OfficialProps.indexOf(prop) === -1) {\n            processingCustomFields = true;\n          }\n          if (processingCustomFields) {\n            this.processKvp(cipher, prop, value[prop]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ClipperzHtmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const textarea = doc.querySelector(\"textarea\");\n    if (textarea == null || this.isNullOrWhitespace(textarea.textContent)) {\n      result.errorMessage = \"Missing textarea.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const entries = JSON.parse(textarea.textContent);\n    entries.forEach((entry: any) => {\n      const cipher = this.initLoginCipher();\n      if (!this.isNullOrWhitespace(entry.label)) {\n        cipher.name = entry.label.split(\" \")[0];\n      }\n      if (entry.data != null && !this.isNullOrWhitespace(entry.data.notes)) {\n        cipher.notes = entry.data.notes.split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (entry.currentVersion != null && entry.currentVersion.fields != null) {\n        for (const property in entry.currentVersion.fields) {\n          // eslint-disable-next-line\n          if (!entry.currentVersion.fields.hasOwnProperty(property)) {\n            continue;\n          }\n\n          const field = entry.currentVersion.fields[property];\n          const actionType = field.actionType != null ? field.actionType.toLowerCase() : null;\n          switch (actionType) {\n            case \"password\":\n              cipher.login.password = this.getValueOrDefault(field.value);\n              break;\n            case \"email\":\n            case \"username\":\n            case \"user\":\n            case \"name\":\n              cipher.login.username = this.getValueOrDefault(field.value);\n              break;\n            case \"url\":\n              cipher.login.uris = this.makeUriArray(field.value);\n              break;\n            default: {\n              const labelLower = field.label != null ? field.label.toLowerCase() : null;\n              if (\n                cipher.login.password == null &&\n                this.passwordFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.password = this.getValueOrDefault(field.value);\n              } else if (\n                cipher.login.username == null &&\n                this.usernameFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.username = this.getValueOrDefault(field.value);\n              } else if (\n                (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n                this.uriFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.uris = this.makeUriArray(field.value);\n              } else {\n                this.processKvp(cipher, field.label, field.value);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class CodebookCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value.Category));\n\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite) === \"True\";\n      cipher.name = this.getValueOrDefault(value.Entry, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.login.username = this.getValueOrDefault(value.Username, value.Email);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.totp = this.getValueOrDefault(value.TOTP);\n      cipher.login.uris = this.makeUriArray(value.Website);\n\n      if (!this.isNullOrWhitespace(value.Username)) {\n        this.processKvp(cipher, \"Email\", value.Email);\n      }\n      this.processKvp(cipher, \"Phone\", value.Phone);\n      this.processKvp(cipher, \"PIN\", value.PIN);\n      this.processKvp(cipher, \"Account\", value.Account);\n      this.processKvp(cipher, \"Date\", value.Date);\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CredentialsRecord,\n  IdRecord,\n  PaymentsRecord,\n  PersonalInformationRecord,\n  SecureNoteRecord,\n} from \"./types/dashlane-csv-types\";\n\nconst _mappedCredentialsColumns = new Set([\n  \"title\",\n  \"note\",\n  \"username\",\n  \"password\",\n  \"url\",\n  \"otpSecret\",\n  \"category\",\n]);\n\nconst _mappedPersonalInfoAsIdentityColumns = new Set([\n  \"type\",\n  \"title\",\n  \"first_name\",\n  \"middle_name\",\n  \"last_name\",\n  \"login\",\n  \"email\",\n  \"phone_number\",\n  \"address\",\n  \"country\",\n  \"state\",\n  \"city\",\n  \"zip\",\n  // Skip item_name as we already have set a combined name\n  \"item_name\",\n]);\n\nconst _mappedSecureNoteColumns = new Set([\"title\", \"note\"]);\n\nexport class DashlaneCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results[0].type != null && results[0].title != null) {\n      const personalRecords = results as PersonalInformationRecord[];\n\n      // If personalRecords has only one \"name\" then create an Identity-Cipher\n      if (personalRecords.filter((x) => x.type === \"name\").length === 1) {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        results.forEach((row) => {\n          this.parsePersonalInformationRecordAsIdentity(cipher, row);\n        });\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n        result.success = true;\n        return Promise.resolve(result);\n      }\n    }\n\n    results.forEach((row) => {\n      const cipher = this.initLoginCipher();\n\n      const rowKeys = Object.keys(row);\n      if (rowKeys[0] === \"username\") {\n        this.processFolder(result, row.category);\n        this.parseCredentialsRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"account_name\") {\n        this.parsePaymentRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"number\") {\n        this.parseIdRecord(cipher, row);\n      }\n\n      if ((rowKeys[0] === \"type\") != null && rowKeys[1] === \"title\") {\n        this.parsePersonalInformationRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"title\" && rowKeys[1] === \"note\") {\n        this.parseSecureNoteRecords(cipher, row);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  parseCredentialsRecord(cipher: CipherView, row: CredentialsRecord) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    cipher.name = row.title;\n    cipher.notes = row.note;\n    cipher.login.username = row.username;\n    cipher.login.password = row.password;\n    cipher.login.totp = row.otpSecret;\n    cipher.login.uris = this.makeUriArray(row.url);\n\n    this.importUnmappedFields(cipher, row, _mappedCredentialsColumns);\n  }\n\n  parsePaymentRecord(cipher: CipherView, row: PaymentsRecord) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n\n    cipher.name = row.account_name;\n    let mappedValues: string[] = [];\n    switch (row.type) {\n      case \"credit_card\":\n        cipher.card.cardholderName = row.account_name;\n        cipher.card.number = row.cc_number;\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.code = row.code;\n        this.setCardExpiration(cipher, `${row.expiration_month}/${row.expiration_year}`);\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\n          \"account_name\",\n          \"account_holder\",\n          \"cc_number\",\n          \"code\",\n          \"expiration_month\",\n          \"expiration_year\",\n        ];\n        break;\n      case \"bank\":\n        cipher.card.cardholderName = row.account_holder;\n        cipher.card.number = row.account_number;\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\"account_name\", \"account_holder\", \"account_number\"];\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parseIdRecord(cipher: CipherView, row: IdRecord) {\n    cipher.type = CipherType.Identity;\n    cipher.identity = new IdentityView();\n\n    const mappedValues: string[] = [\"name\", \"number\"];\n    switch (row.type) {\n      case \"card\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        break;\n      case \"passport\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.passportNumber = row.number;\n        break;\n      case \"license\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        cipher.identity.state = row.state;\n\n        mappedValues.push(\"state\");\n        break;\n      case \"social_security\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.ssn = row.number;\n        break;\n      case \"tax_number\":\n        cipher.name = row.type;\n        cipher.identity.licenseNumber = row.number;\n        break;\n\n      default:\n        break;\n    }\n\n    // If you add more mapped fields please extend this\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parsePersonalInformationRecord(cipher: CipherView, row: PersonalInformationRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    if (row.type === \"name\") {\n      cipher.name = `${row.title} ${row.first_name} ${row.middle_name} ${row.last_name}`\n        .replace(\"  \", \" \")\n        .trim();\n    } else {\n      cipher.name = row.item_name;\n    }\n\n    const dataRow = row as any;\n    Object.keys(row).forEach((key) => {\n      this.processKvp(cipher, key, dataRow[key]);\n    });\n  }\n\n  parsePersonalInformationRecordAsIdentity(cipher: CipherView, row: PersonalInformationRecord) {\n    switch (row.type) {\n      case \"name\":\n        this.processFullName(cipher, `${row.first_name} ${row.middle_name} ${row.last_name}`);\n        cipher.identity.title = row.title;\n        cipher.name = cipher.identity.fullName;\n\n        cipher.identity.username = row.login;\n        break;\n      case \"email\":\n        cipher.identity.email = row.email;\n        break;\n      case \"number\":\n        cipher.identity.phone = row.phone_number;\n        break;\n      case \"address\":\n        cipher.identity.address1 = row.address;\n        cipher.identity.city = row.city;\n        cipher.identity.postalCode = row.zip;\n        cipher.identity.state = row.state;\n        cipher.identity.country = row.country;\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, _mappedPersonalInfoAsIdentityColumns);\n  }\n\n  parseSecureNoteRecords(cipher: CipherView, row: SecureNoteRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = row.title;\n    cipher.notes = row.note;\n\n    this.importUnmappedFields(cipher, row, _mappedSecureNoteColumns);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nconst HandledResults = new Set([\n  \"ADDRESS\",\n  \"AUTHENTIFIANT\",\n  \"BANKSTATEMENT\",\n  \"IDCARD\",\n  \"IDENTITY\",\n  \"PAYMENTMEANS_CREDITCARD\",\n  \"PAYMENTMEAN_PAYPAL\",\n  \"EMAIL\",\n]);\n\nexport class DashlaneJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    if (results.ADDRESS != null) {\n      this.processAddress(results.ADDRESS);\n    }\n    if (results.AUTHENTIFIANT != null) {\n      this.processAuth(results.AUTHENTIFIANT);\n    }\n    if (results.BANKSTATEMENT != null) {\n      this.processNote(results.BANKSTATEMENT, \"BankAccountName\");\n    }\n    if (results.IDCARD != null) {\n      this.processNote(results.IDCARD, \"Fullname\");\n    }\n    if (results.PAYMENTMEANS_CREDITCARD != null) {\n      this.processCard(results.PAYMENTMEANS_CREDITCARD);\n    }\n    if (results.IDENTITY != null) {\n      this.processIdentity(results.IDENTITY);\n    }\n\n    for (const key in results) {\n      // eslint-disable-next-line\n      if (results.hasOwnProperty(key) && !HandledResults.has(key)) {\n        this.processNote(results[key], null, \"Generic Note\");\n      }\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processAuth(results: any[]) {\n    results.forEach((credential: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(credential.title);\n\n      cipher.login.username = this.getValueOrDefault(\n        credential.login,\n        this.getValueOrDefault(credential.secondaryLogin)\n      );\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.domain);\n      cipher.notes += this.getValueOrDefault(credential.note, \"\");\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processIdentity(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.fullName, \"\");\n      const nameParts = cipher.name.split(\" \");\n      if (nameParts.length > 0) {\n        cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n      }\n      if (nameParts.length === 2) {\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n      } else if (nameParts.length === 3) {\n        cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[2]);\n      }\n      cipher.identity.username = this.getValueOrDefault(obj.pseudo);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processAddress(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.addressName);\n      cipher.identity.address1 = this.getValueOrDefault(obj.addressFull);\n      cipher.identity.city = this.getValueOrDefault(obj.city);\n      cipher.identity.state = this.getValueOrDefault(obj.state);\n      cipher.identity.postalCode = this.getValueOrDefault(obj.zipcode);\n      cipher.identity.country = this.getValueOrDefault(obj.country);\n      if (cipher.identity.country != null) {\n        cipher.identity.country = cipher.identity.country.toUpperCase();\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processCard(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.card = new CardView();\n      cipher.type = CipherType.Card;\n      cipher.name = this.getValueOrDefault(obj.bank);\n      cipher.card.number = this.getValueOrDefault(obj.cardNumber);\n      cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n      cipher.card.cardholderName = this.getValueOrDefault(obj.owner);\n      if (!this.isNullOrWhitespace(cipher.card.brand)) {\n        if (this.isNullOrWhitespace(cipher.name)) {\n          cipher.name = cipher.card.brand;\n        } else {\n          cipher.name += \" - \" + cipher.card.brand;\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processNote(results: any[], nameProperty: string, name: string = null) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.secureNote = new SecureNoteView();\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote.type = SecureNoteType.Generic;\n      if (name != null) {\n        cipher.name = name;\n      } else {\n        cipher.name = this.getValueOrDefault(obj[nameProperty]);\n      }\n      for (const key in obj) {\n        // eslint-disable-next-line\n        if (obj.hasOwnProperty(key) && key !== nameProperty) {\n          this.processKvp(cipher, key, obj[key].toString());\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class EncryptrCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Label, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      const text = this.getValueOrDefault(value.Text);\n      if (!this.isNullOrWhitespace(text)) {\n        if (this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = text;\n        } else {\n          cipher.notes += \"\\n\\n\" + text;\n        }\n      }\n\n      const type = value[\"Entry Type\"];\n      if (type === \"Password\") {\n        cipher.login.username = this.getValueOrDefault(value.Username);\n        cipher.login.password = this.getValueOrDefault(value.Password);\n        cipher.login.uris = this.makeUriArray(value[\"Site URL\"]);\n      } else if (type === \"Credit Card\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value[\"Name on card\"]);\n        cipher.card.number = this.getValueOrDefault(value[\"Card Number\"]);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.CVV);\n        const expiry = this.getValueOrDefault(value.Expiry);\n        if (!this.isNullOrWhitespace(expiry)) {\n          const expParts = expiry.split(\"/\");\n          if (expParts.length > 1) {\n            cipher.card.expMonth = parseInt(expParts[0], null).toString();\n            cipher.card.expYear = (2000 + parseInt(expParts[1], null)).toString();\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class EnpassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let firstRow = true;\n    results.forEach((value) => {\n      if (value.length < 2 || (firstRow && (value[0] === \"Title\" || value[0] === \"title\"))) {\n        firstRow = false;\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (\n        value.length === 2 ||\n        (!this.containsField(value, \"username\") &&\n          !this.containsField(value, \"password\") &&\n          !this.containsField(value, \"email\") &&\n          !this.containsField(value, \"url\"))\n      ) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      }\n\n      if (\n        this.containsField(value, \"cardholder\") &&\n        this.containsField(value, \"number\") &&\n        this.containsField(value, \"expiry date\")\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      }\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const fieldValue: string = value[i + 2];\n          if (this.isNullOrWhitespace(fieldValue)) {\n            continue;\n          }\n\n          const fieldName: string = value[i + 1];\n          const fieldNameLower = fieldName.toLowerCase();\n\n          if (cipher.type === CipherType.Login) {\n            if (\n              fieldNameLower === \"url\" &&\n              (cipher.login.uris == null || cipher.login.uris.length === 0)\n            ) {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              continue;\n            } else if (\n              (fieldNameLower === \"username\" || fieldNameLower === \"email\") &&\n              this.isNullOrWhitespace(cipher.login.username)\n            ) {\n              cipher.login.username = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"password\" &&\n              this.isNullOrWhitespace(cipher.login.password)\n            ) {\n              cipher.login.password = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n              cipher.login.totp = fieldValue;\n              continue;\n            }\n          } else if (cipher.type === CipherType.Card) {\n            if (\n              fieldNameLower === \"cardholder\" &&\n              this.isNullOrWhitespace(cipher.card.cardholderName)\n            ) {\n              cipher.card.cardholderName = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"number\" && this.isNullOrWhitespace(cipher.card.number)) {\n              cipher.card.number = fieldValue;\n              cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n              continue;\n            } else if (fieldNameLower === \"cvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n              cipher.card.code = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"expiry date\" &&\n              this.isNullOrWhitespace(cipher.card.expMonth) &&\n              this.isNullOrWhitespace(cipher.card.expYear)\n            ) {\n              if (this.setCardExpiration(cipher, fieldValue)) {\n                continue;\n              }\n            } else if (fieldNameLower === \"type\") {\n              // Skip since brand was determined from number above\n              continue;\n            }\n          }\n\n          this.processKvp(cipher, fieldName, fieldValue);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private containsField(fields: any[], name: string) {\n    if (fields == null || name == null) {\n      return false;\n    }\n    return (\n      fields.filter((f) => !this.isNullOrWhitespace(f) && f.toLowerCase() === name.toLowerCase())\n        .length > 0\n    );\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { EnpassJsonFile, EnpassFolder, EnpassField } from \"./types/enpass-json-type\";\n\ntype EnpassFolderTreeItem = EnpassFolder & { children: EnpassFolderTreeItem[] };\nconst androidUrlRegex = new RegExp(\"androidapp://.*==@\", \"g\");\n\nexport class EnpassJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: EnpassJsonFile = JSON.parse(data);\n    if (results == null || results.items == null || results.items.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    const foldersIndexMap = new Map<string, number>();\n    const folderTree = this.buildFolderTree(results.folders);\n    this.flattenFolderTree(null, folderTree, foldersMap);\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((item) => {\n      if (item.folders != null && item.folders.length > 0 && foldersIndexMap.has(item.folders[0])) {\n        result.folderRelationships.push([\n          result.ciphers.length,\n          foldersIndexMap.get(item.folders[0]),\n        ]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(item.title);\n      cipher.favorite = item.favorite > 0;\n\n      if (item.template_type != null && item.fields != null && item.fields.length > 0) {\n        if (\n          item.template_type.indexOf(\"login.\") === 0 ||\n          item.template_type.indexOf(\"password.\") === 0\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else if (item.template_type.indexOf(\"creditcard.\") === 0) {\n          this.processCard(cipher, item.fields);\n        } else if (\n          item.template_type.indexOf(\"identity.\") < 0 &&\n          item.fields.some((f) => f.type === \"password\" && !this.isNullOrWhitespace(f.value))\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else {\n          this.processNote(cipher, item.fields);\n        }\n      }\n\n      cipher.notes += \"\\n\" + this.getValueOrDefault(item.note, \"\");\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private processLogin(cipher: CipherView, fields: EnpassField[]) {\n    const urls: string[] = [];\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n\n      if (\n        (field.type === \"username\" || field.type === \"email\") &&\n        this.isNullOrWhitespace(cipher.login.username)\n      ) {\n        cipher.login.username = field.value;\n      } else if (field.type === \"password\" && this.isNullOrWhitespace(cipher.login.password)) {\n        cipher.login.password = field.value;\n      } else if (field.type === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n        cipher.login.totp = field.value;\n      } else if (field.type === \"url\") {\n        urls.push(field.value);\n      } else if (field.type === \".Android#\") {\n        let cleanedValue = field.value.startsWith(\"androidapp://\")\n          ? field.value\n          : \"androidapp://\" + field.value;\n        cleanedValue = cleanedValue.replace(\"android://\", \"\");\n        cleanedValue = cleanedValue.replace(androidUrlRegex, \"androidapp://\");\n        urls.push(cleanedValue);\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n    cipher.login.uris = this.makeUriArray(urls);\n  }\n\n  private processCard(cipher: CipherView, fields: EnpassField[]) {\n    cipher.card = new CardView();\n    cipher.type = CipherType.Card;\n    fields.forEach((field) => {\n      if (\n        this.isNullOrWhitespace(field.value) ||\n        field.type === \"section\" ||\n        field.type === \"ccType\"\n      ) {\n        return;\n      }\n\n      if (field.type === \"ccName\" && this.isNullOrWhitespace(cipher.card.cardholderName)) {\n        cipher.card.cardholderName = field.value;\n      } else if (field.type === \"ccNumber\" && this.isNullOrWhitespace(cipher.card.number)) {\n        cipher.card.number = field.value;\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n      } else if (field.type === \"ccCvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n        cipher.card.code = field.value;\n      } else if (field.type === \"ccExpiry\" && this.isNullOrWhitespace(cipher.card.expYear)) {\n        if (!this.setCardExpiration(cipher, field.value)) {\n          this.processKvp(\n            cipher,\n            field.label,\n            field.value,\n            field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n          );\n        }\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n  }\n\n  private processNote(cipher: CipherView, fields: EnpassField[]) {\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n      this.processKvp(\n        cipher,\n        field.label,\n        field.value,\n        field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n      );\n    });\n  }\n\n  private buildFolderTree(folders: EnpassFolder[]): EnpassFolderTreeItem[] {\n    if (folders == null) {\n      return [];\n    }\n    const folderTree: EnpassFolderTreeItem[] = [];\n    const map = new Map<string, EnpassFolderTreeItem>([]);\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      map.set(obj.uuid, obj);\n      obj.children = [];\n    });\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      if (obj.parent_uuid != null && obj.parent_uuid !== \"\" && map.has(obj.parent_uuid)) {\n        map.get(obj.parent_uuid).children.push(obj);\n      } else {\n        folderTree.push(obj);\n      }\n    });\n    return folderTree;\n  }\n\n  private flattenFolderTree(\n    titlePrefix: string,\n    tree: EnpassFolderTreeItem[],\n    map: Map<string, string>\n  ) {\n    if (tree == null) {\n      return;\n    }\n    tree.forEach((f) => {\n      if (f.title != null && f.title.trim() !== \"\") {\n        let title = f.title.trim();\n        if (titlePrefix != null && titlePrefix.trim() !== \"\") {\n          title = titlePrefix + \"/\" + title;\n        }\n        map.set(f.uuid, title);\n        if (f.children != null && f.children.length !== 0) {\n          this.flattenFolderTree(title, f.children, map);\n        }\n      }\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class FirefoxCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results\n      .filter((value) => {\n        return value.url !== \"chrome://FirefoxAccounts\";\n      })\n      .forEach((value) => {\n        const cipher = this.initLoginCipher();\n        const url = this.getValueOrDefault(value.url, this.getValueOrDefault(value.hostname));\n        cipher.name = this.getValueOrDefault(this.nameFromUrl(url), \"--\");\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.uris = this.makeUriArray(url);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export interface FskFile {\n  data: Data;\n}\n\nexport interface Data {\n  [key: string]: FskEntry;\n}\n\nexport enum FskEntryTypesEnum {\n  Login = 1,\n  CreditCard = 2,\n}\n\nexport interface FskEntry {\n  color: string;\n  creditCvv: string;\n  creditExpiry: string;\n  creditNumber: string;\n  favorite: number; // UNIX timestamp\n  notes: string;\n  password: string;\n  passwordList: PasswordList[];\n  passwordModifiedDate: number; // UNIX timestamp\n  rev: string | number;\n  service: string;\n  style: string;\n  type: FskEntryTypesEnum;\n  url: string;\n  username: string;\n  createdDate: number; // UNIX timestamp\n  modifiedDate: number; // UNIX timestamp\n}\n\nexport interface PasswordList {\n  changedate: string;\n  password: string;\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { FskEntry, FskEntryTypesEnum, FskFile } from \"./fsecure-fsk-types\";\n\nexport class FSecureFskImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: FskFile = JSON.parse(data);\n    if (results == null || results.data == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const key in results.data) {\n      // eslint-disable-next-line\n      if (!results.data.hasOwnProperty(key)) {\n        continue;\n      }\n\n      const value = results.data[key];\n      const cipher = this.parseEntry(value);\n      result.ciphers.push(cipher);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseEntry(entry: FskEntry): CipherView {\n    const cipher = this.initLoginCipher();\n    cipher.name = this.getValueOrDefault(entry.service);\n    cipher.notes = this.getValueOrDefault(entry.notes);\n    cipher.favorite = entry.favorite > 0;\n\n    switch (entry.type) {\n      case FskEntryTypesEnum.Login:\n        this.handleLoginEntry(entry, cipher);\n        break;\n      case FskEntryTypesEnum.CreditCard:\n        this.handleCreditCardEntry(entry, cipher);\n        break;\n      default:\n        return;\n        break;\n    }\n\n    this.convertToNoteIfNeeded(cipher);\n    this.cleanupCipher(cipher);\n    return cipher;\n  }\n\n  private handleLoginEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.login.username = this.getValueOrDefault(entry.username);\n    cipher.login.password = this.getValueOrDefault(entry.password);\n    cipher.login.uris = this.makeUriArray(entry.url);\n  }\n\n  private handleCreditCardEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n    cipher.card.cardholderName = this.getValueOrDefault(entry.username);\n    cipher.card.number = this.getValueOrDefault(entry.creditNumber);\n    cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n    cipher.card.code = this.getValueOrDefault(entry.creditCvv);\n    if (!this.isNullOrWhitespace(entry.creditExpiry)) {\n      if (!this.setCardExpiration(cipher, entry.creditExpiry)) {\n        this.processKvp(cipher, \"Expiration\", entry.creditExpiry);\n      }\n    }\n    if (!this.isNullOrWhitespace(entry.password)) {\n      this.processKvp(cipher, \"PIN\", entry.password);\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class GnomeJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || Object.keys(results).length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const keyRing in results) {\n      if (\n        !results.hasOwnProperty(keyRing) || // eslint-disable-line\n        this.isNullOrWhitespace(keyRing) ||\n        results[keyRing].length === 0\n      ) {\n        continue;\n      }\n\n      results[keyRing].forEach((value: any) => {\n        if (\n          this.isNullOrWhitespace(value.display_name) ||\n          value.display_name.indexOf(\"http\") !== 0\n        ) {\n          return;\n        }\n\n        this.processFolder(result, keyRing);\n        const cipher = this.initLoginCipher();\n        cipher.name = value.display_name.replace(\"http://\", \"\").replace(\"https://\", \"\");\n        if (cipher.name.length > 30) {\n          cipher.name = cipher.name.substring(0, 30);\n        }\n        cipher.login.password = this.getValueOrDefault(value.secret);\n        cipher.login.uris = this.makeUriArray(value.display_name);\n\n        if (value.attributes != null) {\n          cipher.login.username =\n            value.attributes != null\n              ? this.getValueOrDefault(value.attributes.username_value)\n              : null;\n          for (const attr in value.attributes) {\n            if (\n              !value.attributes.hasOwnProperty(attr) || // eslint-disable-line\n              attr === \"username_value\" ||\n              attr === \"xdg:schema\"\n            ) {\n              continue;\n            }\n            this.processKvp(cipher, attr, value.attributes[attr]);\n          }\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst NotesHeader = \"Notes\\n\\n\";\nconst ApplicationsHeader = \"Applications\\n\\n\";\nconst WebsitesHeader = \"Websites\\n\\n\";\nconst Delimiter = \"\\n---\\n\";\n\nexport class KasperskyTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n\n    let notesData: string;\n    let applicationsData: string;\n    let websitesData: string;\n    let workingData = this.splitNewLine(data).join(\"\\n\");\n\n    if (workingData.indexOf(NotesHeader) !== -1) {\n      const parts = workingData.split(NotesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        notesData = parts[1];\n      }\n    }\n    if (workingData.indexOf(ApplicationsHeader) !== -1) {\n      const parts = workingData.split(ApplicationsHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        applicationsData = parts[1];\n      }\n    }\n    if (workingData.indexOf(WebsitesHeader) === 0) {\n      const parts = workingData.split(WebsitesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        websitesData = parts[1];\n      }\n    }\n\n    const notes = this.parseDataCategory(notesData);\n    const applications = this.parseDataCategory(applicationsData);\n    const websites = this.parseDataCategory(websitesData);\n\n    notes.forEach((n) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(n.get(\"Name\"));\n      cipher.notes = this.getValueOrDefault(n.get(\"Text\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    websites.concat(applications).forEach((w) => {\n      const cipher = this.initLoginCipher();\n      const nameKey = w.has(\"Website name\") ? \"Website name\" : \"Application\";\n      cipher.name = this.getValueOrDefault(w.get(nameKey), \"\");\n      if (!this.isNullOrWhitespace(w.get(\"Login name\"))) {\n        if (!this.isNullOrWhitespace(cipher.name)) {\n          cipher.name += \": \";\n        }\n        cipher.name += w.get(\"Login name\");\n      }\n      cipher.notes = this.getValueOrDefault(w.get(\"Comment\"));\n      if (w.has(\"Website URL\")) {\n        cipher.login.uris = this.makeUriArray(w.get(\"Website URL\"));\n      }\n      cipher.login.username = this.getValueOrDefault(w.get(\"Login\"));\n      cipher.login.password = this.getValueOrDefault(w.get(\"Password\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseDataCategory(data: string): Map<string, string>[] {\n    if (this.isNullOrWhitespace(data) || data.indexOf(Delimiter) === -1) {\n      return [];\n    }\n    const items: Map<string, string>[] = [];\n    data.split(Delimiter).forEach((p) => {\n      if (p.indexOf(\"\\n\") === -1) {\n        return;\n      }\n      const item = new Map<string, string>();\n      let itemComment: string;\n      let itemCommentKey: string;\n      p.split(\"\\n\").forEach((l) => {\n        if (itemComment != null) {\n          itemComment += \"\\n\" + l;\n          return;\n        }\n        const colonIndex = l.indexOf(\":\");\n        let key: string;\n        let val: string;\n        if (colonIndex === -1) {\n          return;\n        } else {\n          key = l.substring(0, colonIndex);\n          if (l.length > colonIndex + 1) {\n            val = l.substring(colonIndex + 2);\n          }\n        }\n        if (key != null) {\n          item.set(key, val);\n        }\n        if (key === \"Comment\" || key === \"Text\") {\n          itemComment = val;\n          itemCommentKey = key;\n        }\n      });\n      if (itemComment != null && itemCommentKey != null) {\n        item.set(itemCommentKey, itemComment);\n      }\n      if (item.size === 0) {\n        return;\n      }\n      items.push(item);\n    });\n    return items;\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePass2XmlImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    //Note: The doc.querySelector(\"KeePassFile > Root > Group\") no longers works on node and we have to breakdown the query by nodes\n    const KeePassFileNode = doc.querySelector(\"KeePassFile\");\n\n    if (KeePassFileNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const RootNode = KeePassFileNode.querySelector(\"Root\");\n    if (RootNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const rootGroup = RootNode.querySelector(\"Group\");\n    if (rootGroup == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root > Group` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    this.traverse(rootGroup, true, \"\");\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  traverse(node: Element, isRootNode: boolean, groupPrefixName: string) {\n    const folderIndex = this.result.folders.length;\n    let groupName = groupPrefixName;\n\n    if (!isRootNode) {\n      if (groupName !== \"\") {\n        groupName += \"/\";\n      }\n      const nameEl = this.querySelectorDirectChild(node, \"Name\");\n      groupName += nameEl == null ? \"-\" : nameEl.textContent;\n      const folder = new FolderView();\n      folder.name = groupName;\n      this.result.folders.push(folder);\n    }\n\n    this.querySelectorAllDirectChild(node, \"Entry\").forEach((entry) => {\n      const cipherIndex = this.result.ciphers.length;\n\n      const cipher = this.initLoginCipher();\n      this.querySelectorAllDirectChild(entry, \"String\").forEach((entryString) => {\n        const valueEl = this.querySelectorDirectChild(entryString, \"Value\");\n        const value = valueEl != null ? valueEl.textContent : null;\n        if (this.isNullOrWhitespace(value)) {\n          return;\n        }\n        const keyEl = this.querySelectorDirectChild(entryString, \"Key\");\n        const key = keyEl != null ? keyEl.textContent : null;\n\n        if (key === \"URL\") {\n          cipher.login.uris = this.makeUriArray(value);\n        } else if (key === \"UserName\") {\n          cipher.login.username = value;\n        } else if (key === \"Password\") {\n          cipher.login.password = value;\n        } else if (key === \"otp\") {\n          cipher.login.totp = value.replace(\"key=\", \"\");\n        } else if (key === \"Title\") {\n          cipher.name = value;\n        } else if (key === \"Notes\") {\n          cipher.notes += value + \"\\n\";\n        } else {\n          let type = FieldType.Text;\n          const attrs = valueEl.attributes as any;\n          if (\n            attrs.length > 0 &&\n            attrs.ProtectInMemory != null &&\n            attrs.ProtectInMemory.value === \"True\"\n          ) {\n            type = FieldType.Hidden;\n          }\n          this.processKvp(cipher, key, value, type);\n        }\n      });\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n\n      if (!isRootNode) {\n        this.result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    this.querySelectorAllDirectChild(node, \"Group\").forEach((group) => {\n      this.traverse(group, false, groupName);\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePassXCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(value.Title)) {\n        return;\n      }\n\n      value.Group =\n        !this.isNullOrWhitespace(value.Group) && value.Group.startsWith(\"Root/\")\n          ? value.Group.replace(\"Root/\", \"\")\n          : value.Group;\n      const groupName = !this.isNullOrWhitespace(value.Group) ? value.Group : null;\n      this.processFolder(result, groupName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class KeeperCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 6) {\n        return;\n      }\n\n      this.processFolder(result, value[0]);\n      const cipher = this.initLoginCipher();\n\n      const notes = this.getValueOrDefault(value[5]);\n      if (notes) {\n        cipher.notes = `${notes}\\n`;\n      }\n\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[4]);\n\n      if (value.length > 7) {\n        // we have some custom fields.\n        for (let i = 7; i < value.length; i = i + 2) {\n          if (value[i] == \"TFC:Keeper\") {\n            cipher.login.totp = value[i + 1];\n          } else {\n            this.processKvp(cipher, value[i], value[i + 1]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LastPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipherIndex = result.ciphers.length;\n      let folderIndex = result.folders.length;\n      let grouping = value.grouping;\n      if (grouping != null) {\n        // eslint-disable-next-line\n        grouping = grouping.replace(/\\\\/g, \"/\").replace(/[\\x00-\\x1F\\x7F-\\x9F]/g, \"\");\n      }\n      const hasFolder = this.getValueOrDefault(grouping, \"(none)\") !== \"(none)\";\n      let addFolder = hasFolder;\n\n      if (hasFolder) {\n        for (let i = 0; i < result.folders.length; i++) {\n          if (result.folders[i].name === grouping) {\n            addFolder = false;\n            folderIndex = i;\n            break;\n          }\n        }\n      }\n\n      const cipher = this.buildBaseCipher(value);\n      if (cipher.type === CipherType.Login) {\n        cipher.notes = this.getValueOrDefault(value.extra);\n        cipher.login = new LoginView();\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.totp);\n      } else if (cipher.type === CipherType.SecureNote) {\n        this.parseSecureNote(value, cipher);\n      } else if (cipher.type === CipherType.Card) {\n        cipher.card = this.parseCard(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n      } else if (cipher.type === CipherType.Identity) {\n        cipher.identity = this.parseIdentity(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n        if (!this.isNullOrWhitespace(value.ccnum)) {\n          // there is a card on this identity too\n          const cardCipher = this.buildBaseCipher(value);\n          cardCipher.identity = null;\n          cardCipher.type = CipherType.Card;\n          cardCipher.card = this.parseCard(value);\n          result.ciphers.push(cardCipher);\n        }\n      }\n\n      result.ciphers.push(cipher);\n\n      if (addFolder) {\n        const f = new FolderView();\n        f.name = grouping;\n        result.folders.push(f);\n      }\n      if (hasFolder) {\n        result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private buildBaseCipher(value: any) {\n    const cipher = new CipherView();\n    // eslint-disable-next-line\n    if (value.hasOwnProperty(\"profilename\") && value.hasOwnProperty(\"profilelanguage\")) {\n      // form fill\n      cipher.favorite = false;\n      cipher.name = this.getValueOrDefault(value.profilename, \"--\");\n      cipher.type = CipherType.Card;\n\n      if (\n        !this.isNullOrWhitespace(value.title) ||\n        !this.isNullOrWhitespace(value.firstname) ||\n        !this.isNullOrWhitespace(value.lastname) ||\n        !this.isNullOrWhitespace(value.address1) ||\n        !this.isNullOrWhitespace(value.phone) ||\n        !this.isNullOrWhitespace(value.username) ||\n        !this.isNullOrWhitespace(value.email)\n      ) {\n        cipher.type = CipherType.Identity;\n      }\n    } else {\n      // site or secure note\n      cipher.favorite = !this.organization && this.getValueOrDefault(value.fav, \"0\") === \"1\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.type = value.url === \"http://sn\" ? CipherType.SecureNote : CipherType.Login;\n    }\n    return cipher;\n  }\n\n  private parseCard(value: any): CardView {\n    const card = new CardView();\n    card.cardholderName = this.getValueOrDefault(value.ccname);\n    card.number = this.getValueOrDefault(value.ccnum);\n    card.code = this.getValueOrDefault(value.cccsc);\n    card.brand = CardView.getCardBrandByPatterns(card.number);\n\n    if (!this.isNullOrWhitespace(value.ccexp) && value.ccexp.indexOf(\"-\") > -1) {\n      const ccexpParts = (value.ccexp as string).split(\"-\");\n      if (ccexpParts.length > 1) {\n        card.expYear = ccexpParts[0];\n        card.expMonth = ccexpParts[1];\n        if (card.expMonth.length === 2 && card.expMonth[0] === \"0\") {\n          card.expMonth = card.expMonth[1];\n        }\n      }\n    }\n\n    return card;\n  }\n\n  private parseIdentity(value: any): IdentityView {\n    const identity = new IdentityView();\n    identity.title = this.getValueOrDefault(value.title);\n    identity.firstName = this.getValueOrDefault(value.firstname);\n    identity.middleName = this.getValueOrDefault(value.middlename);\n    identity.lastName = this.getValueOrDefault(value.lastname);\n    identity.username = this.getValueOrDefault(value.username);\n    identity.company = this.getValueOrDefault(value.company);\n    identity.ssn = this.getValueOrDefault(value.ssn);\n    identity.address1 = this.getValueOrDefault(value.address1);\n    identity.address2 = this.getValueOrDefault(value.address2);\n    identity.address3 = this.getValueOrDefault(value.address3);\n    identity.city = this.getValueOrDefault(value.city);\n    identity.state = this.getValueOrDefault(value.state);\n    identity.postalCode = this.getValueOrDefault(value.zip);\n    identity.country = this.getValueOrDefault(value.country);\n    identity.email = this.getValueOrDefault(value.email);\n    identity.phone = this.getValueOrDefault(value.phone);\n\n    if (!this.isNullOrWhitespace(identity.title)) {\n      identity.title = identity.title.charAt(0).toUpperCase() + identity.title.slice(1);\n    }\n\n    return identity;\n  }\n\n  private parseSecureNote(value: any, cipher: CipherView) {\n    const extraParts = this.splitNewLine(value.extra);\n    let processedNote = false;\n\n    if (extraParts.length) {\n      const typeParts = extraParts[0].split(\":\");\n      if (\n        typeParts.length > 1 &&\n        typeParts[0] === \"NoteType\" &&\n        (typeParts[1] === \"Credit Card\" || typeParts[1] === \"Address\")\n      ) {\n        if (typeParts[1] === \"Credit Card\") {\n          const mappedData = this.parseSecureNoteMapping<CardView>(cipher, extraParts, {\n            Number: \"number\",\n            \"Name on Card\": \"cardholderName\",\n            \"Security Code\": \"code\",\n            // LP provides date in a format like 'June,2020'\n            // Store in expMonth, then parse and modify\n            \"Expiration Date\": \"expMonth\",\n          });\n\n          if (this.isNullOrWhitespace(mappedData.expMonth) || mappedData.expMonth === \",\") {\n            // No expiration data\n            mappedData.expMonth = undefined;\n          } else {\n            const [monthString, year] = mappedData.expMonth.split(\",\");\n            // Parse month name into number\n            if (!this.isNullOrWhitespace(monthString)) {\n              const month = new Date(Date.parse(monthString.trim() + \" 1, 2012\")).getMonth() + 1;\n              if (isNaN(month)) {\n                mappedData.expMonth = undefined;\n              } else {\n                mappedData.expMonth = month.toString();\n              }\n            } else {\n              mappedData.expMonth = undefined;\n            }\n            if (!this.isNullOrWhitespace(year)) {\n              mappedData.expYear = year;\n            }\n          }\n\n          cipher.type = CipherType.Card;\n          cipher.card = mappedData;\n        } else if (typeParts[1] === \"Address\") {\n          const mappedData = this.parseSecureNoteMapping<IdentityView>(cipher, extraParts, {\n            Title: \"title\",\n            \"First Name\": \"firstName\",\n            \"Last Name\": \"lastName\",\n            \"Middle Name\": \"middleName\",\n            Company: \"company\",\n            \"Address 1\": \"address1\",\n            \"Address 2\": \"address2\",\n            \"Address 3\": \"address3\",\n            \"City / Town\": \"city\",\n            State: \"state\",\n            \"Zip / Postal Code\": \"postalCode\",\n            Country: \"country\",\n            \"Email Address\": \"email\",\n            Username: \"username\",\n          });\n          cipher.type = CipherType.Identity;\n          cipher.identity = mappedData;\n        }\n        processedNote = true;\n      }\n    }\n\n    if (!processedNote) {\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n      cipher.notes = this.getValueOrDefault(value.extra);\n    }\n  }\n\n  private parseSecureNoteMapping<T>(cipher: CipherView, extraParts: string[], map: any): T {\n    const dataObj: any = {};\n\n    let processingNotes = false;\n    extraParts.forEach((extraPart) => {\n      let key: string = null;\n      let val: string = null;\n      if (!processingNotes) {\n        if (this.isNullOrWhitespace(extraPart)) {\n          return;\n        }\n        const colonIndex = extraPart.indexOf(\":\");\n        if (colonIndex === -1) {\n          key = extraPart;\n        } else {\n          key = extraPart.substring(0, colonIndex);\n          if (extraPart.length > colonIndex) {\n            val = extraPart.substring(colonIndex + 1);\n          }\n        }\n        if (this.isNullOrWhitespace(key) || this.isNullOrWhitespace(val) || key === \"NoteType\") {\n          return;\n        }\n      }\n\n      if (processingNotes) {\n        cipher.notes += \"\\n\" + extraPart;\n      } else if (key === \"Notes\") {\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes += \"\\n\" + val;\n        } else {\n          cipher.notes = val;\n        }\n        processingNotes = true;\n        // eslint-disable-next-line\n      } else if (map.hasOwnProperty(key)) {\n        dataObj[map[key]] = val;\n      } else {\n        this.processKvp(cipher, key, val);\n      }\n    });\n\n    return dataObj;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LogMeOnceCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 4) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[1]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MeldiumCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.DisplayName, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.login.username = this.getValueOrDefault(value.UserName);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MSecureCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      const folderName =\n        this.getValueOrDefault(value[0], \"Unassigned\") !== \"Unassigned\" ? value[0] : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[2], \"--\");\n\n      if (value[1] === \"Web Logins\" || value[1] === \"Login\") {\n        cipher.login.uris = this.makeUriArray(value[4]);\n        cipher.login.username = this.getValueOrDefault(value[5]);\n        cipher.login.password = this.getValueOrDefault(value[6]);\n        cipher.notes = !this.isNullOrWhitespace(value[3]) ? value[3].split(\"\\\\n\").join(\"\\n\") : null;\n      } else if (value.length > 3) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        for (let i = 3; i < value.length; i++) {\n          if (!this.isNullOrWhitespace(value[i])) {\n            cipher.notes += value[i] + \"\\n\";\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(value[1]) && cipher.type !== CipherType.Login) {\n        cipher.name = value[1] + \": \" + cipher.name;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst mappedBaseColumns = [\"nickname\", \"additionalInfo\"];\nconst _mappedUserAccountColumns = new Set(\n  mappedBaseColumns.concat([\"url\", \"username\", \"password\", \"twofaSecret\"])\n);\nconst _mappedCreditCardColumns = new Set(\n  mappedBaseColumns.concat([\"cardNumber\", \"cardName\", \"exp_month\", \"exp_year\", \"cvv\"])\n);\n\nconst _mappedIdentityColumns = new Set(\n  mappedBaseColumns.concat([\n    \"title\",\n    \"firstName\",\n    \"middleName\",\n    \"lastName\",\n    \"email\",\n    \"firstAddressLine\",\n    \"secondAddressLine\",\n    \"city\",\n    \"country\",\n    \"zipCode\",\n  ])\n);\n\nconst _mappedIdCardColumns = new Set(mappedBaseColumns.concat([\"idName\", \"idNumber\", \"idCountry\"]));\n\nconst _mappedTwoFaColumns = new Set(mappedBaseColumns.concat([\"authToken\"]));\n\nconst _mappedUserNoteColumns = new Set(mappedBaseColumns.concat([\"content\"]));\n\nexport class MykiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.nickname, \"--\");\n      cipher.notes = this.getValueOrDefault(value.additionalInfo);\n\n      if (value.url !== undefined) {\n        // Accounts\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.twofaSecret);\n\n        this.importUnmappedFields(cipher, value, _mappedUserAccountColumns);\n      } else if (value.authToken !== undefined) {\n        // TwoFA\n        cipher.login.totp = this.getValueOrDefault(value.authToken);\n\n        this.importUnmappedFields(cipher, value, _mappedTwoFaColumns);\n      } else if (value.cardNumber !== undefined) {\n        // Cards\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.expMonth = this.getValueOrDefault(value.exp_month);\n        cipher.card.expYear = this.getValueOrDefault(value.exp_year);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n\n        this.importUnmappedFields(cipher, value, _mappedCreditCardColumns);\n      } else if (value.firstName !== undefined) {\n        // Identities\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        cipher.identity.title = this.getValueOrDefault(value.title);\n        cipher.identity.firstName = this.getValueOrDefault(value.firstName);\n        cipher.identity.middleName = this.getValueOrDefault(value.middleName);\n        cipher.identity.lastName = this.getValueOrDefault(value.lastName);\n        cipher.identity.phone = this.getValueOrDefault(value.number);\n        cipher.identity.email = this.getValueOrDefault(value.email);\n        cipher.identity.address1 = this.getValueOrDefault(value.firstAddressLine);\n        cipher.identity.address2 = this.getValueOrDefault(value.secondAddressLine);\n        cipher.identity.city = this.getValueOrDefault(value.city);\n        cipher.identity.country = this.getValueOrDefault(value.country);\n        cipher.identity.postalCode = this.getValueOrDefault(value.zipCode);\n\n        this.importUnmappedFields(cipher, value, _mappedIdentityColumns);\n      } else if (value.idType !== undefined) {\n        // IdCards\n\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        this.processFullName(cipher, value.idName);\n        cipher.identity.country = this.getValueOrDefault(value.idCountry);\n\n        switch (value.idType) {\n          // case \"Driver's License\":\n          // case \"ID Card\":\n          // case \"Outdoor License\":\n          // case \"Software License\":\n          // case \"Tax Number\":\n          // case \"Bank Account\":\n          // case \"Insurance Card\":\n          // case \"Health Card\":\n          // case \"Membership\":\n          // case \"Database\":\n          // case \"Reward Program\":\n          // case \"Tour Visa\":\n          case \"Passport\":\n            cipher.identity.passportNumber = value.idNumber;\n            break;\n          case \"Social Security\":\n            cipher.identity.ssn = value.idNumber;\n            break;\n          default:\n            cipher.identity.licenseNumber = value.idNumber;\n            break;\n        }\n\n        this.importUnmappedFields(cipher, value, _mappedIdCardColumns);\n      } else if (value.content !== undefined) {\n        // Notes\n        cipher.secureNote = new SecureNoteView();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.notes = this.getValueOrDefault(value.content);\n\n        this.importUnmappedFields(cipher, value, _mappedUserNoteColumns);\n      } else {\n        return;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\ntype nodePassCsvParsed = {\n  name: string;\n  url: string;\n  username: string;\n  password: string;\n  note: string;\n  cardholdername: string;\n  cardnumber: string;\n  cvc: string;\n  expirydate: string;\n  zipcode: string;\n  folder: string;\n  full_name: string;\n  phone_number: string;\n  email: string;\n  address1: string;\n  address2: string;\n  city: string;\n  country: string;\n  state: string;\n};\n\nexport class NordPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: nodePassCsvParsed[] = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((record) => {\n      const recordType = this.evaluateType(record);\n      if (recordType === undefined) {\n        return;\n      }\n\n      if (!this.organization) {\n        this.processFolder(result, record.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.name = this.getValueOrDefault(record.name, \"--\");\n      cipher.notes = this.getValueOrDefault(record.note);\n\n      switch (recordType) {\n        case CipherType.Login:\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.username = this.getValueOrDefault(record.username);\n          cipher.login.password = this.getValueOrDefault(record.password);\n          cipher.login.uris = this.makeUriArray(record.url);\n          break;\n        case CipherType.Card:\n          cipher.type = CipherType.Card;\n          cipher.card.cardholderName = this.getValueOrDefault(record.cardholdername);\n          cipher.card.number = this.getValueOrDefault(record.cardnumber);\n          cipher.card.code = this.getValueOrDefault(record.cvc);\n          cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n          this.setCardExpiration(cipher, record.expirydate);\n          break;\n\n        case CipherType.Identity:\n          cipher.type = CipherType.Identity;\n\n          this.processFullName(cipher, this.getValueOrDefault(record.full_name));\n          cipher.identity.address1 = this.getValueOrDefault(record.address1);\n          cipher.identity.address2 = this.getValueOrDefault(record.address2);\n          cipher.identity.city = this.getValueOrDefault(record.city);\n          cipher.identity.state = this.getValueOrDefault(record.state);\n          cipher.identity.postalCode = this.getValueOrDefault(record.zipcode);\n          cipher.identity.country = this.getValueOrDefault(record.country);\n          if (cipher.identity.country != null) {\n            cipher.identity.country = cipher.identity.country.toUpperCase();\n          }\n          cipher.identity.email = this.getValueOrDefault(record.email);\n          cipher.identity.phone = this.getValueOrDefault(record.phone_number);\n          break;\n        case CipherType.SecureNote:\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default:\n          break;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private evaluateType(record: nodePassCsvParsed): CipherType {\n    if (!this.isNullOrWhitespace(record.username)) {\n      return CipherType.Login;\n    }\n\n    if (!this.isNullOrWhitespace(record.cardnumber)) {\n      return CipherType.Card;\n    }\n\n    if (!this.isNullOrWhitespace(record.full_name)) {\n      return CipherType.Identity;\n    }\n\n    if (!this.isNullOrWhitespace(record.note)) {\n      return CipherType.SecureNote;\n    }\n\n    return undefined;\n  }\n}\n","export interface ExportData {\n  accounts?: AccountsEntity[] | null;\n}\nexport interface AccountsEntity {\n  attrs: AccountAttributes;\n  vaults?: VaultsEntity[] | null;\n}\nexport interface AccountAttributes {\n  accountName: string;\n  name: string;\n  avatar: string;\n  email: string;\n  uuid: string;\n  domain: string;\n}\nexport interface VaultsEntity {\n  attrs: VaultAttributes;\n  items?: Item[] | null;\n}\nexport interface VaultAttributes {\n  uuid: string;\n  desc: string;\n  avatar: string;\n  name: string;\n  type: string;\n}\n\nexport enum CategoryEnum {\n  Login = \"001\",\n  CreditCard = \"002\",\n  SecureNote = \"003\",\n  Identity = \"004\",\n  Password = \"005\",\n  Document = \"006\",\n  SoftwareLicense = \"100\",\n  BankAccount = \"101\",\n  Database = \"102\",\n  DriversLicense = \"103\",\n  OutdoorLicense = \"104\",\n  Membership = \"105\",\n  Passport = \"106\",\n  RewardsProgram = \"107\",\n  SocialSecurityNumber = \"108\",\n  WirelessRouter = \"109\",\n  Server = \"110\",\n  EmailAccount = \"111\",\n  API_Credential = \"112\",\n  MedicalRecord = \"113\",\n}\n\nexport interface Item {\n  uuid: string;\n  favIndex: number;\n  createdAt: number;\n  updatedAt: number;\n  trashed?: boolean;\n  categoryUuid: string;\n  details: Details;\n  overview: Overview;\n}\nexport interface Details {\n  loginFields?: (LoginFieldsEntity | null)[] | null;\n  notesPlain?: string | null;\n  sections?: (SectionsEntity | null)[] | null;\n  passwordHistory?: (PasswordHistoryEntity | null)[] | null;\n  documentAttributes?: DocumentAttributes | null;\n  password?: string | null;\n}\n\nexport enum LoginFieldTypeEnum {\n  TextOrHtml = \"T\",\n  EmailAddress = \"E\",\n  URL = \"U\",\n  Number = \"N\",\n  Password = \"P\",\n  TextArea = \"A\",\n  PhoneNumber = \"T\",\n  CheckBox = \"C\",\n}\nexport interface LoginFieldsEntity {\n  value: string;\n  id: string;\n  name: string;\n  fieldType: LoginFieldTypeEnum | string;\n  designation?: string | null;\n}\nexport interface SectionsEntity {\n  title: string;\n  name?: string | null;\n  fields?: FieldsEntity[] | null;\n}\nexport interface FieldsEntity {\n  title: string;\n  id: string;\n  value: Value;\n  indexAtSource: number;\n  guarded: boolean;\n  multiline: boolean;\n  dontGenerate: boolean;\n  placeholder?: string;\n  inputTraits: InputTraits;\n  clipboardFilter?: string | null;\n}\nexport interface Value {\n  totp?: string | null;\n  date?: number | null;\n  string?: string | null;\n  concealed?: string | null;\n  email?: Email | null;\n  phone?: string | null;\n  menu?: string | null;\n  gender?: string | null;\n  monthYear?: number | null;\n  url?: string | null;\n  address?: Address | null;\n  creditCardType?: string | null;\n  creditCardNumber?: string | null;\n  reference?: string | null;\n}\n\nexport interface Email {\n  email_address: string;\n  provider: string;\n}\n\nexport interface Address {\n  street: string;\n  city: string;\n  country: string;\n  zip: string;\n  state: string;\n}\nexport interface InputTraits {\n  keyboard: string;\n  correction: string;\n  capitalization: string;\n}\nexport interface PasswordHistoryEntity {\n  value: string;\n  time: number;\n}\nexport interface DocumentAttributes {\n  fileName: string;\n  documentId: string;\n  decryptedSize: number;\n}\nexport interface Overview {\n  subtitle: string;\n  title: string;\n  url: string;\n  urls?: UrlsEntity[] | null;\n  ps?: number | null;\n  pbe?: number | null;\n  pgrng?: boolean | null;\n  tags?: string[] | null;\n}\nexport interface UrlsEntity {\n  label: string;\n  url: string;\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class OnePassword1PifImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    data.split(this.newLineRegex).forEach((line) => {\n      if (this.isNullOrWhitespace(line) || line[0] !== \"{\") {\n        return;\n      }\n      const item = JSON.parse(line);\n      if (item.trashed === true) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n\n      if (this.isNullOrWhitespace(item.hmac)) {\n        this.processStandardItem(item, cipher);\n      } else {\n        this.processWinOpVaultItem(item, cipher);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processWinOpVaultItem(item: any, cipher: CipherView) {\n    if (item.overview != null) {\n      cipher.name = this.getValueOrDefault(item.overview.title);\n      if (item.overview.URLs != null) {\n        const urls: string[] = [];\n        item.overview.URLs.forEach((url: any) => {\n          if (!this.isNullOrWhitespace(url.u)) {\n            urls.push(url.u);\n          }\n        });\n        cipher.login.uris = this.makeUriArray(urls);\n      }\n    }\n\n    if (item.details != null) {\n      if (item.details.passwordHistory != null) {\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n      }\n      if (\n        !this.isNullOrWhitespace(item.details.ccnum) ||\n        !this.isNullOrWhitespace(item.details.cvv)\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      } else if (\n        !this.isNullOrWhitespace(item.details.firstname) ||\n        !this.isNullOrWhitespace(item.details.address1)\n      ) {\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n      }\n      if (cipher.type === CipherType.Login && !this.isNullOrWhitespace(item.details.password)) {\n        cipher.login.password = item.details.password;\n      }\n      if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n        cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (item.details.fields != null) {\n        this.parseFields(item.details.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.details.sections != null) {\n        item.details.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private processStandardItem(item: any, cipher: CipherView) {\n    cipher.favorite = item.openContents && item.openContents.faveIndex ? true : false;\n    cipher.name = this.getValueOrDefault(item.title);\n\n    if (item.typeName === \"securenotes.SecureNote\") {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    } else if (item.typeName === \"wallet.financial.CreditCard\") {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    } else if (item.typeName === \"identities.Identity\") {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    } else {\n      cipher.login.uris = this.makeUriArray(item.location);\n    }\n\n    if (item.secureContents != null) {\n      if (item.secureContents.passwordHistory != null) {\n        this.parsePasswordHistory(item.secureContents.passwordHistory, cipher);\n      }\n      if (!this.isNullOrWhitespace(item.secureContents.notesPlain)) {\n        cipher.notes = item.secureContents.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (cipher.type === CipherType.Login) {\n        if (!this.isNullOrWhitespace(item.secureContents.password)) {\n          cipher.login.password = item.secureContents.password;\n        }\n        if (item.secureContents.URLs != null) {\n          const urls: string[] = [];\n          item.secureContents.URLs.forEach((u: any) => {\n            if (!this.isNullOrWhitespace(u.url)) {\n              urls.push(u.url);\n            }\n          });\n          if (urls.length > 0) {\n            cipher.login.uris = this.makeUriArray(urls);\n          }\n        }\n      }\n      if (item.secureContents.fields != null) {\n        this.parseFields(item.secureContents.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.secureContents.sections != null) {\n        item.secureContents.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private parsePasswordHistory(items: any[], cipher: CipherView) {\n    const maxSize = items.length > 5 ? 5 : items.length;\n    cipher.passwordHistory = items\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n\n  private parseFields(\n    fields: any[],\n    cipher: CipherView,\n    designationKey: string,\n    valueKey: string,\n    nameKey: string\n  ) {\n    fields.forEach((field: any) => {\n      if (field[valueKey] == null || field[valueKey].toString().trim() === \"\") {\n        return;\n      }\n\n      // TODO: when date FieldType exists, store this as a date field type instead of formatted Text if k is 'date'\n      const fieldValue =\n        field.k === \"date\"\n          ? new Date(field[valueKey] * 1000).toUTCString()\n          : field[valueKey].toString();\n      const fieldDesignation =\n        field[designationKey] != null ? field[designationKey].toString() : null;\n\n      if (cipher.type === CipherType.Login) {\n        if (this.isNullOrWhitespace(cipher.login.username) && fieldDesignation === \"username\") {\n          cipher.login.username = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.password) &&\n          fieldDesignation === \"password\"\n        ) {\n          cipher.login.password = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.totp) &&\n          fieldDesignation != null &&\n          fieldDesignation.startsWith(\"TOTP_\")\n        ) {\n          cipher.login.totp = fieldValue;\n          return;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.isNullOrWhitespace(cipher.card.number) && fieldDesignation === \"ccnum\") {\n          cipher.card.number = fieldValue;\n          cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n          return;\n        } else if (this.isNullOrWhitespace(cipher.card.code) && fieldDesignation === \"cvv\") {\n          cipher.card.code = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.cardholderName) &&\n          fieldDesignation === \"cardholder\"\n        ) {\n          cipher.card.cardholderName = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.expiration) &&\n          fieldDesignation === \"expiry\" &&\n          fieldValue.length === 6\n        ) {\n          cipher.card.expMonth = (fieldValue as string).substr(4, 2);\n          if (cipher.card.expMonth[0] === \"0\") {\n            cipher.card.expMonth = cipher.card.expMonth.substr(1, 1);\n          }\n          cipher.card.expYear = (fieldValue as string).substr(0, 4);\n          return;\n        } else if (fieldDesignation === \"type\") {\n          // Skip since brand was determined from number above\n          return;\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        const identity = cipher.identity;\n        if (this.isNullOrWhitespace(identity.firstName) && fieldDesignation === \"firstname\") {\n          identity.firstName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.lastName) && fieldDesignation === \"lastname\") {\n          identity.lastName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.middleName) && fieldDesignation === \"initial\") {\n          identity.middleName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.phone) && fieldDesignation === \"defphone\") {\n          identity.phone = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.company) && fieldDesignation === \"company\") {\n          identity.company = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.email) && fieldDesignation === \"email\") {\n          identity.email = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.username) && fieldDesignation === \"username\") {\n          identity.username = fieldValue;\n          return;\n        } else if (fieldDesignation === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip } = field[valueKey];\n          identity.address1 = this.getValueOrDefault(street);\n          identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            identity.country = country.toUpperCase();\n          }\n          identity.postalCode = this.getValueOrDefault(zip);\n          return;\n        }\n      }\n\n      const fieldName = this.isNullOrWhitespace(field[nameKey]) ? \"no_name\" : field[nameKey];\n      if (\n        fieldName === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      const fieldType = field.k === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CategoryEnum,\n  Details,\n  ExportData,\n  FieldsEntity,\n  Item,\n  LoginFieldTypeEnum,\n  Overview,\n  PasswordHistoryEntity,\n  SectionsEntity,\n  UrlsEntity,\n  Value,\n  VaultsEntity,\n} from \"./types/onepassword-1pux-importer-types\";\n\nexport class OnePassword1PuxImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const exportData: ExportData = JSON.parse(data);\n\n    const account = exportData.accounts[0];\n    // TODO Add handling of multiple vaults\n    // const personalVaults = account.vaults[0].filter((v) => v.attrs.type === VaultAttributeTypeEnum.Personal);\n    account.vaults.forEach((vault: VaultsEntity) => {\n      vault.items.forEach((item: Item) => {\n        if (item.trashed === true) {\n          return;\n        }\n\n        const cipher = this.initLoginCipher();\n\n        const category = item.categoryUuid as CategoryEnum;\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.Password:\n          case CategoryEnum.WirelessRouter:\n          case CategoryEnum.Server:\n          case CategoryEnum.API_Credential:\n            cipher.type = CipherType.Login;\n            cipher.login = new LoginView();\n            break;\n          case CategoryEnum.CreditCard:\n          case CategoryEnum.BankAccount:\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            break;\n          case CategoryEnum.SecureNote:\n          case CategoryEnum.SoftwareLicense:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.MedicalRecord:\n            // case CategoryEnum.Document:\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case CategoryEnum.Identity:\n          case CategoryEnum.DriversLicense:\n          case CategoryEnum.OutdoorLicense:\n          case CategoryEnum.Membership:\n          case CategoryEnum.Passport:\n          case CategoryEnum.RewardsProgram:\n          case CategoryEnum.SocialSecurityNumber:\n            cipher.type = CipherType.Identity;\n            cipher.identity = new IdentityView();\n            break;\n          default:\n            break;\n        }\n\n        cipher.favorite = item.favIndex === 1 ? true : false;\n\n        this.processOverview(item.overview, cipher);\n\n        this.processLoginFields(item, cipher);\n\n        this.processDetails(category, item.details, cipher);\n\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n\n        this.processSections(category, item.details.sections, cipher);\n\n        if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n          cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        this.result.ciphers.push(cipher);\n      });\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processOverview(overview: Overview, cipher: CipherView) {\n    if (overview == null) {\n      return;\n    }\n\n    cipher.name = this.getValueOrDefault(overview.title);\n\n    if (overview.urls != null) {\n      const urls: string[] = [];\n      overview.urls.forEach((url: UrlsEntity) => {\n        if (!this.isNullOrWhitespace(url.url)) {\n          urls.push(url.url);\n        }\n      });\n      cipher.login.uris = this.makeUriArray(urls);\n    }\n\n    if (overview.tags != null && overview.tags.length > 0) {\n      const folderName = this.capitalize(overview.tags[0]);\n      this.processFolder(this.result, folderName);\n    }\n  }\n\n  private capitalize(inputString: string): string {\n    return inputString.trim().replace(/\\w\\S*/g, (w) => w.replace(/^\\w/, (c) => c.toUpperCase()));\n  }\n\n  private processLoginFields(item: Item, cipher: CipherView) {\n    if (item.details == null) {\n      return;\n    }\n\n    if (item.details.loginFields == null || item.details.loginFields.length === 0) {\n      return;\n    }\n\n    item.details.loginFields.forEach((loginField) => {\n      if (loginField.designation === \"username\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.username = loginField.value;\n        return;\n      }\n\n      if (loginField.designation === \"password\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.password = loginField.value;\n        return;\n      }\n\n      let fieldValue = loginField.value;\n      let fieldType: FieldType = FieldType.Text;\n      switch (loginField.fieldType) {\n        case LoginFieldTypeEnum.Password:\n          fieldType = FieldType.Hidden;\n          break;\n        case LoginFieldTypeEnum.CheckBox:\n          fieldValue = loginField.value !== \"\" ? \"true\" : \"false\";\n          fieldType = FieldType.Boolean;\n          break;\n        default:\n          break;\n      }\n      this.processKvp(cipher, loginField.name, fieldValue, fieldType);\n    });\n  }\n\n  private processDetails(category: CategoryEnum, details: Details, cipher: CipherView) {\n    if (category !== CategoryEnum.Password) {\n      return;\n    }\n\n    if (details == null) {\n      return;\n    }\n    cipher.login.password = details.password;\n  }\n\n  private processSections(category: CategoryEnum, sections: SectionsEntity[], cipher: CipherView) {\n    if (sections == null || sections.length === 0) {\n      return;\n    }\n\n    sections.forEach((section: SectionsEntity) => {\n      if (section.fields == null) {\n        return;\n      }\n\n      this.parseSectionFields(category, section.fields, cipher);\n    });\n  }\n\n  private parseSectionFields(category: CategoryEnum, fields: FieldsEntity[], cipher: CipherView) {\n    fields.forEach((field: FieldsEntity) => {\n      const valueKey = Object.keys(field.value)[0];\n      const anyField = field as any;\n\n      if (\n        anyField.value == null ||\n        anyField.value[valueKey] == null ||\n        anyField.value[valueKey] === \"\"\n      ) {\n        return;\n      }\n\n      const fieldName = this.getFieldName(field.id, field.title);\n      const fieldValue = this.extractValue(field.value, valueKey);\n\n      if (cipher.type === CipherType.Login) {\n        if (this.fillLogin(field, fieldValue, cipher)) {\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.WirelessRouter:\n            break;\n\n          case CategoryEnum.Server:\n            if (this.isNullOrWhitespace(cipher.login.uri) && field.id === \"url\") {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              return;\n            }\n            break;\n\n          case CategoryEnum.API_Credential:\n            if (this.fillApiCredentials(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.fillCreditCard(field, fieldValue, cipher)) {\n          return;\n        }\n\n        if (category === CategoryEnum.BankAccount) {\n          if (this.fillBankAccount(field, fieldValue, cipher)) {\n            return;\n          }\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        if (this.fillIdentity(field, fieldValue, cipher, valueKey)) {\n          return;\n        }\n        if (valueKey === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip, state } = field.value.address;\n          cipher.identity.address1 = this.getValueOrDefault(street);\n          cipher.identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            cipher.identity.country = country.toUpperCase();\n          }\n          cipher.identity.postalCode = this.getValueOrDefault(zip);\n          cipher.identity.state = this.getValueOrDefault(state);\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Identity:\n            break;\n          case CategoryEnum.DriversLicense:\n            if (this.fillDriversLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.OutdoorLicense:\n            if (this.fillOutdoorLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Membership:\n            if (this.fillMembership(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Passport:\n            if (this.fillPassport(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.RewardsProgram:\n            if (this.fillRewardsProgram(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.SocialSecurityNumber:\n            if (this.fillSSN(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (valueKey === \"email\") {\n        // fieldValue is an object casted into a string, so access the plain value instead\n        const { email_address, provider } = field.value.email;\n        this.processKvp(cipher, fieldName, email_address, FieldType.Text);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return;\n      }\n\n      // Do not include a password field if it's already in the history\n      if (\n        field.title === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      // TODO ?? If one of the fields is marked as guarded, then activate Password-Reprompt for the entire item\n      if (field.guarded && cipher.reprompt === CipherRepromptType.None) {\n        cipher.reprompt = CipherRepromptType.Password;\n      }\n\n      const fieldType = valueKey === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n\n  private getFieldName(id: string, title: string): string {\n    if (this.isNullOrWhitespace(title)) {\n      return id;\n    }\n\n    // Naive approach of checking if the fields id is usable\n    if (id.length > 25 && RegExp(/[0-9]{2}[A-Z]{2}/, \"i\").test(id)) {\n      return title;\n    }\n    return id;\n  }\n\n  private extractValue(value: Value, valueKey: string): string {\n    if (valueKey === \"date\") {\n      return new Date(value.date * 1000).toUTCString();\n    }\n\n    if (valueKey === \"monthYear\") {\n      return value.monthYear.toString();\n    }\n\n    return (value as any)[valueKey];\n  }\n\n  private fillLogin(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.username) && fieldName === \"username\") {\n      cipher.login.username = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"password\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (\n      this.isNullOrWhitespace(cipher.login.totp) &&\n      field.id != null &&\n      field.id.startsWith(\"TOTP_\")\n    ) {\n      cipher.login.totp = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillApiCredentials(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"credential\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.uri) && fieldName === \"hostname\") {\n      cipher.login.uris = this.makeUriArray(fieldValue);\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillCreditCard(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.number) && field.id === \"ccnum\") {\n      cipher.card.number = fieldValue;\n      cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.code) && field.id === \"cvv\") {\n      cipher.card.code = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"cardholder\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.expiration) && field.id === \"expiry\") {\n      const monthYear: string = fieldValue.toString().trim();\n      cipher.card.expMonth = monthYear.substring(4, 6);\n      if (cipher.card.expMonth[0] === \"0\") {\n        cipher.card.expMonth = cipher.card.expMonth.substring(1, 2);\n      }\n      cipher.card.expYear = monthYear.substring(0, 4);\n      return true;\n    }\n\n    if (field.id === \"type\") {\n      // Skip since brand was determined from number above\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillBankAccount(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"owner\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillIdentity(\n    field: FieldsEntity,\n    fieldValue: string,\n    cipher: CipherView,\n    valueKey: string\n  ): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"firstname\") {\n      cipher.identity.firstName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.lastName) && field.id === \"lastname\") {\n      cipher.identity.lastName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.middleName) && field.id === \"initial\") {\n      cipher.identity.middleName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"defphone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.email)) {\n      if (valueKey === \"email\") {\n        const { email_address, provider } = field.value.email;\n        cipher.identity.email = this.getValueOrDefault(email_address);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return true;\n      }\n\n      if (field.id === \"email\") {\n        cipher.identity.email = fieldValue;\n        return true;\n      }\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.username) && field.id === \"username\") {\n      cipher.identity.username = fieldValue;\n      return true;\n    }\n    return false;\n  }\n\n  private fillDriversLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.address1) && field.id === \"address\") {\n      cipher.identity.address1 = fieldValue;\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.licenseNumber) && field.id === \"number\") {\n      cipher.identity.licenseNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillOutdoorLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillMembership(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"org_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"phone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillPassport(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO Iso\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"issuing_country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.passportNumber) && field.id === \"number\") {\n      cipher.identity.passportNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillRewardsProgram(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillSSN(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.ssn) && field.id === \"number\") {\n      cipher.identity.ssn = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private parsePasswordHistory(historyItems: PasswordHistoryEntity[], cipher: CipherView) {\n    if (historyItems == null || historyItems.length === 0) {\n      return;\n    }\n\n    const maxSize = historyItems.length > 5 ? 5 : historyItems.length;\n    cipher.passwordHistory = historyItems\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nexport class CipherImportContext {\n  lowerProperty: string;\n  constructor(public importRecord: any, public property: string, public cipher: CipherView) {\n    this.lowerProperty = property.toLowerCase();\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\n\nexport const IgnoredProperties = [\n  \"ainfo\",\n  \"autosubmit\",\n  \"notesplain\",\n  \"ps\",\n  \"scope\",\n  \"tags\",\n  \"title\",\n  \"uuid\",\n  \"notes\",\n];\n\nexport abstract class OnePasswordCsvImporter extends BaseImporter implements Importer {\n  protected loginPropertyParsers = [\n    this.setLoginUsername,\n    this.setLoginPassword,\n    this.setLoginUris,\n  ];\n  protected creditCardPropertyParsers = [\n    this.setCreditCardNumber,\n    this.setCreditCardVerification,\n    this.setCreditCardCardholderName,\n    this.setCreditCardExpiry,\n  ];\n  protected identityPropertyParsers = [\n    this.setIdentityFirstName,\n    this.setIdentityInitial,\n    this.setIdentityLastName,\n    this.setIdentityUserName,\n    this.setIdentityEmail,\n    this.setIdentityPhone,\n    this.setIdentityCompany,\n  ];\n\n  abstract setCipherType(value: any, cipher: CipherView): void;\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true, {\n      quoteChar: '\"',\n      escapeChar: \"\\\\\",\n    });\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(this.getProp(value, \"title\"))) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.getProp(value, \"title\"), \"--\");\n\n      this.setNotes(value, cipher);\n\n      this.setCipherType(value, cipher);\n\n      let altUsername: string = null;\n      for (const property in value) {\n        // eslint-disable-next-line\n        if (!value.hasOwnProperty(property) || this.isNullOrWhitespace(value[property])) {\n          continue;\n        }\n\n        const context = new CipherImportContext(value, property, cipher);\n        if (cipher.type === CipherType.Login && this.setKnownLoginValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Card && this.setKnownCreditCardValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Identity && this.setKnownIdentityValue(context)) {\n          continue;\n        }\n\n        altUsername = this.setUnknownValue(context, altUsername);\n      }\n\n      if (\n        cipher.type === CipherType.Login &&\n        !this.isNullOrWhitespace(altUsername) &&\n        this.isNullOrWhitespace(cipher.login.username) &&\n        altUsername.indexOf(\"://\") === -1\n      ) {\n        cipher.login.username = altUsername;\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  protected getProp(obj: any, name: string): any {\n    const lowerObj = Object.entries(obj).reduce((agg: any, entry: [string, any]) => {\n      agg[entry[0].toLowerCase()] = entry[1];\n      return agg;\n    }, {});\n    return lowerObj[name.toLowerCase()];\n  }\n\n  protected getPropByRegexp(obj: any, regexp: RegExp): any {\n    const matchingKeys = Object.keys(obj).reduce((agg: string[], key: string) => {\n      if (key.match(regexp)) {\n        agg.push(key);\n      }\n      return agg;\n    }, []);\n    if (matchingKeys.length === 0) {\n      return null;\n    } else {\n      return obj[matchingKeys[0]];\n    }\n  }\n\n  protected getPropIncluding(obj: any, name: string): any {\n    const includesMap = Object.keys(obj).reduce((agg: string[], entry: string) => {\n      if (entry.toLowerCase().includes(name.toLowerCase())) {\n        agg.push(entry);\n      }\n      return agg;\n    }, []);\n    if (includesMap.length === 0) {\n      return null;\n    } else {\n      return obj[includesMap[0]];\n    }\n  }\n\n  protected setNotes(importRecord: any, cipher: CipherView) {\n    cipher.notes =\n      this.getValueOrDefault(this.getProp(importRecord, \"notesPlain\"), \"\") +\n      \"\\n\" +\n      this.getValueOrDefault(this.getProp(importRecord, \"notes\"), \"\") +\n      \"\\n\";\n    cipher.notes.trim();\n  }\n\n  protected setKnownLoginValue(context: CipherImportContext): boolean {\n    return this.loginPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownCreditCardValue(context: CipherImportContext): boolean {\n    return this.creditCardPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownIdentityValue(context: CipherImportContext): boolean {\n    return this.identityPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setUnknownValue(context: CipherImportContext, altUsername: string): string {\n    if (\n      IgnoredProperties.indexOf(context.lowerProperty) === -1 &&\n      !context.lowerProperty.startsWith(\"section:\") &&\n      !context.lowerProperty.startsWith(\"section \")\n    ) {\n      if (altUsername == null && context.lowerProperty === \"email\") {\n        return context.importRecord[context.property];\n      } else if (\n        context.lowerProperty === \"created date\" ||\n        context.lowerProperty === \"modified date\"\n      ) {\n        const readableDate = new Date(\n          parseInt(context.importRecord[context.property], 10) * 1000\n        ).toUTCString();\n        this.processKvp(context.cipher, \"1Password \" + context.property, readableDate);\n        return null;\n      }\n      if (\n        context.lowerProperty.includes(\"password\") ||\n        context.lowerProperty.includes(\"key\") ||\n        context.lowerProperty.includes(\"secret\")\n      ) {\n        this.processKvp(\n          context.cipher,\n          context.property,\n          context.importRecord[context.property],\n          FieldType.Hidden\n        );\n      } else {\n        this.processKvp(context.cipher, context.property, context.importRecord[context.property]);\n      }\n    }\n    return null;\n  }\n\n  protected setIdentityFirstName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.firstName) &&\n      context.lowerProperty.includes(\"first name\")\n    ) {\n      context.cipher.identity.firstName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityInitial(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.middleName) &&\n      context.lowerProperty.includes(\"initial\")\n    ) {\n      context.cipher.identity.middleName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityLastName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.lastName) &&\n      context.lowerProperty.includes(\"last name\")\n    ) {\n      context.cipher.identity.lastName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityUserName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.username) &&\n      context.lowerProperty.includes(\"username\")\n    ) {\n      context.cipher.identity.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityCompany(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.company) &&\n      context.lowerProperty.includes(\"company\")\n    ) {\n      context.cipher.identity.company = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityPhone(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.phone) &&\n      context.lowerProperty.includes(\"default phone\")\n    ) {\n      context.cipher.identity.phone = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityEmail(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.email) &&\n      context.lowerProperty.includes(\"email\")\n    ) {\n      context.cipher.identity.email = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardNumber(context: CipherImportContext): boolean {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.number) &&\n      context.lowerProperty.includes(\"number\")\n    ) {\n      context.cipher.card.number = context.importRecord[context.property];\n      context.cipher.card.brand = CardView.getCardBrandByPatterns(context.cipher.card.number);\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardVerification(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.code) &&\n      context.lowerProperty.includes(\"verification number\")\n    ) {\n      context.cipher.card.code = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardCardholderName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.cardholderName) &&\n      context.lowerProperty.includes(\"cardholder name\")\n    ) {\n      context.cipher.card.cardholderName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\") &&\n      context.importRecord[context.property].length === 7\n    ) {\n      context.cipher.card.expMonth = (context.importRecord[context.property] as string).substr(\n        0,\n        2\n      );\n      if (context.cipher.card.expMonth[0] === \"0\") {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = (context.importRecord[context.property] as string).substr(3, 4);\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginPassword(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.password) &&\n      context.lowerProperty === \"password\"\n    ) {\n      context.cipher.login.password = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUsername(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.username) &&\n      context.lowerProperty === \"username\"\n    ) {\n      context.cipher.login.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUris(context: CipherImportContext) {\n    if (\n      (context.cipher.login.uris == null || context.cipher.login.uris.length === 0) &&\n      context.lowerProperty === \"urls\"\n    ) {\n      const urls = context.importRecord[context.property].split(this.newLineRegex);\n      context.cipher.login.uris = this.makeUriArray(urls);\n      return true;\n    } else if (context.lowerProperty === \"url\") {\n      if (context.cipher.login.uris == null) {\n        context.cipher.login.uris = [];\n      }\n      context.cipher.login.uris.concat(this.makeUriArray(context.importRecord[context.property]));\n      return true;\n    }\n    return false;\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { IgnoredProperties, OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordMacCsvImporter extends OnePasswordCsvImporter implements Importer {\n  setCipherType(value: any, cipher: CipherView) {\n    const onePassType = this.getValueOrDefault(this.getProp(value, \"type\"), \"Login\");\n    switch (onePassType) {\n      case \"Credit Card\":\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Identity\":\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Login\":\n      case \"Secure Note\":\n        IgnoredProperties.push(\"type\");\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\nimport { OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordWinCsvImporter extends OnePasswordCsvImporter implements Importer {\n  constructor() {\n    super();\n    this.identityPropertyParsers.push(this.setIdentityAddress);\n  }\n\n  setCipherType(value: any, cipher: CipherView) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: number/i)) &&\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: expiry date/i))\n    ) {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    }\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: first name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: initial/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: last name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /internet \\d+: email/i))\n    ) {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    }\n  }\n\n  setIdentityAddress(context: CipherImportContext) {\n    if (context.lowerProperty.match(/address \\d+: address/i)) {\n      this.processKvp(context.cipher, \"address\", context.importRecord[context.property]);\n      return true;\n    }\n    return false;\n  }\n\n  setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\")\n    ) {\n      const expSplit = (context.importRecord[context.property] as string).split(\"/\");\n      context.cipher.card.expMonth = expSplit[0];\n      if (context.cipher.card.expMonth[0] === \"0\" && context.cipher.card.expMonth.length === 2) {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = expSplit[2].length > 4 ? expSplit[2].substr(0, 4) : expSplit[2];\n      return true;\n    }\n    return false;\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PadlockCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let headers: string[] = null;\n    results.forEach((value) => {\n      if (headers == null) {\n        headers = value.map((v: string) => v);\n        return;\n      }\n\n      if (value.length < 2 || value.length !== headers.length) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value[1])) {\n        if (this.organization) {\n          const tags = (value[1] as string).split(\",\");\n          tags.forEach((tag) => {\n            tag = tag.trim();\n            let addCollection = true;\n            let collectionIndex = result.collections.length;\n\n            for (let i = 0; i < result.collections.length; i++) {\n              if (result.collections[i].name === tag) {\n                addCollection = false;\n                collectionIndex = i;\n                break;\n              }\n            }\n\n            if (addCollection) {\n              const collection = new CollectionView();\n              collection.name = tag;\n              result.collections.push(collection);\n            }\n\n            result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n          });\n        } else {\n          const tags = (value[1] as string).split(\",\");\n          const tag = tags.length > 0 ? tags[0].trim() : null;\n          this.processFolder(result, tag);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      for (let i = 2; i < value.length; i++) {\n        const header = headers[i].trim().toLowerCase();\n        if (this.isNullOrWhitespace(value[i]) || this.isNullOrWhitespace(header)) {\n          continue;\n        }\n\n        if (this.usernameFieldNames.indexOf(header) > -1) {\n          cipher.login.username = value[i];\n        } else if (this.passwordFieldNames.indexOf(header) > -1) {\n          cipher.login.password = value[i];\n        } else if (this.uriFieldNames.indexOf(header) > -1) {\n          cipher.login.uris = this.makeUriArray(value[i]);\n        } else {\n          this.processKvp(cipher, headers[i], value[i]);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassKeepCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValue(\"category\", value));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValue(\"description\", value);\n      cipher.name = this.getValueOrDefault(this.getValue(\"title\", value), \"--\");\n      cipher.login.username = this.getValue(\"username\", value);\n      cipher.login.password = this.getValue(\"password\", value);\n      cipher.login.uris = this.makeUriArray(this.getValue(\"site\", value));\n      this.processKvp(cipher, \"Password 2\", this.getValue(\"password2\", value));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private getValue(key: string, value: any) {\n    return this.getValueOrDefault(value[key], this.getValueOrDefault(value[\" \" + key]));\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { PasskyJsonExport } from \"./passky-json-types\";\n\nexport class PasskyJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const passkyExport: PasskyJsonExport = JSON.parse(data);\n    if (\n      passkyExport == null ||\n      passkyExport.passwords == null ||\n      passkyExport.passwords.length === 0\n    ) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (passkyExport.encrypted == true) {\n      result.success = false;\n      result.errorMessage = \"Unable to import an encrypted passky backup.\";\n      return Promise.resolve(result);\n    }\n\n    passkyExport.passwords.forEach((record) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = record.website;\n      cipher.login.username = record.username;\n      cipher.login.password = record.password;\n\n      cipher.login.uris = this.makeUriArray(record.website);\n      cipher.notes = record.message;\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassmanJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((credential: any) => {\n      if (credential.tags != null && credential.tags.length > 0) {\n        const folderName = credential.tags[0].text;\n        this.processFolder(result, folderName);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = credential.label;\n\n      cipher.login.username = this.getValueOrDefault(credential.username);\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.url);\n      cipher.notes += this.getValueOrDefault(credential.description, \"\");\n      if (credential.otp != null) {\n        cipher.login.totp = this.getValueOrDefault(credential.otp.secret);\n      }\n\n      if (credential.custom_fields != null) {\n        credential.custom_fields.forEach((customField: any) => {\n          switch (customField.field_type) {\n            case \"text\":\n            case \"password\":\n              this.processKvp(cipher, customField.label, customField.value);\n              break;\n          }\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasspackCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const tagsJson = !this.isNullOrWhitespace(value.Tags) ? JSON.parse(value.Tags) : null;\n      const tags: string[] =\n        tagsJson != null && tagsJson.tags != null && tagsJson.tags.length > 0\n          ? tagsJson.tags\n              .map((tagJson: string) => {\n                try {\n                  const t = JSON.parse(tagJson);\n                  return this.getValueOrDefault(t.tag);\n                } catch {\n                  // Ignore error\n                }\n                return null;\n              })\n              .filter((t: string) => !this.isNullOrWhitespace(t))\n          : null;\n\n      if (this.organization && tags != null && tags.length > 0) {\n        tags.forEach((tag) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === tag) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = tag;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization && tags != null && tags.length > 0) {\n        this.processFolder(result, tags[0]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes, \"\");\n      cipher.notes += \"\\n\\n\" + this.getValueOrDefault(value[\"Shared Notes\"], \"\") + \"\\n\";\n      cipher.name = this.getValueOrDefault(value[\"Entry Name\"], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User ID\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n        value.__parsed_extra.forEach((extra: string) => {\n          if (!this.isNullOrWhitespace(extra)) {\n            cipher.notes += \"\\n\" + extra;\n          }\n        });\n      }\n\n      const fieldsJson = !this.isNullOrWhitespace(value[\"Extra Fields\"])\n        ? JSON.parse(value[\"Extra Fields\"])\n        : null;\n      const fields =\n        fieldsJson != null && fieldsJson.extraFields != null && fieldsJson.extraFields.length > 0\n          ? fieldsJson.extraFields.map((fieldJson: string) => {\n              try {\n                return JSON.parse(fieldJson);\n              } catch {\n                // Ignore error\n              }\n              return null;\n            })\n          : null;\n      if (fields != null) {\n        fields.forEach((f: any) => {\n          if (f != null) {\n            this.processKvp(cipher, f.name, f.data);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordAgentCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let newVersion = true;\n    results.forEach((value) => {\n      if (value.length !== 5 && value.length < 9) {\n        return;\n      }\n      const altFormat = value.length === 10 && value[0] === \"0\";\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[altFormat ? 1 : 0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[altFormat ? 2 : 1]);\n      cipher.login.password = this.getValueOrDefault(value[altFormat ? 3 : 2]);\n      if (value.length === 5) {\n        newVersion = false;\n        cipher.notes = this.getValueOrDefault(value[4]);\n        cipher.login.uris = this.makeUriArray(value[3]);\n      } else {\n        const folder = this.getValueOrDefault(value[altFormat ? 9 : 8], \"(None)\");\n        let folderName = folder !== \"(None)\" ? folder.split(\"\\\\\").join(\"/\") : null;\n        if (folderName != null) {\n          folderName = folder.split(\" > \").join(\"/\");\n          folderName = folder.split(\">\").join(\"/\");\n        }\n        this.processFolder(result, folderName);\n        cipher.notes = this.getValueOrDefault(value[altFormat ? 5 : 3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (newVersion && this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordBossJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.items == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    results.folders.forEach((value: any) => {\n      foldersMap.set(value.id, value.name);\n    });\n    const foldersIndexMap = new Map<string, number>();\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((value: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.login.uris = this.makeUriArray(value.login_url);\n\n      if (value.folder != null && foldersIndexMap.has(value.folder)) {\n        result.folderRelationships.push([result.ciphers.length, foldersIndexMap.get(value.folder)]);\n      }\n\n      if (value.identifiers == null) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value.identifiers.notes)) {\n        cipher.notes = value.identifiers.notes.split(\"\\\\r\\\\n\").join(\"\\n\").split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (value.type === \"CreditCard\") {\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n      }\n\n      for (const property in value.identifiers) {\n        // eslint-disable-next-line\n        if (!value.identifiers.hasOwnProperty(property)) {\n          continue;\n        }\n        const valObj = value.identifiers[property];\n        const val = valObj != null ? valObj.toString() : null;\n        if (\n          this.isNullOrWhitespace(val) ||\n          property === \"notes\" ||\n          property === \"ignoreItemInSecurityScore\"\n        ) {\n          continue;\n        }\n\n        if (property === \"custom_fields\") {\n          valObj.forEach((cf: any) => {\n            this.processKvp(cipher, cf.name, cf.value);\n          });\n          continue;\n        }\n\n        if (cipher.type === CipherType.Card) {\n          if (property === \"cardNumber\") {\n            cipher.card.number = val;\n            cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n            continue;\n          } else if (property === \"nameOnCard\") {\n            cipher.card.cardholderName = val;\n            continue;\n          } else if (property === \"security_code\") {\n            cipher.card.code = val;\n            continue;\n          } else if (property === \"expires\") {\n            try {\n              const expDate = new Date(val);\n              cipher.card.expYear = expDate.getFullYear().toString();\n              cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n            } catch {\n              // Ignore error\n            }\n            continue;\n          } else if (property === \"cardType\") {\n            continue;\n          }\n        } else {\n          if (\n            (property === \"username\" || property === \"email\") &&\n            this.isNullOrWhitespace(cipher.login.username)\n          ) {\n            cipher.login.username = val;\n            continue;\n          } else if (property === \"password\") {\n            cipher.login.password = val;\n            continue;\n          } else if (property === \"totp\") {\n            cipher.login.totp = val;\n            continue;\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(property) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n            continue;\n          }\n        }\n\n        this.processKvp(cipher, property, val);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordDragonXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const records = doc.querySelectorAll(\"PasswordManager > record\");\n    Array.from(records).forEach((record) => {\n      const category = this.querySelectorDirectChild(record, \"Category\");\n      const categoryText =\n        category != null &&\n        !this.isNullOrWhitespace(category.textContent) &&\n        category.textContent !== \"Unfiled\"\n          ? category.textContent\n          : null;\n      this.processFolder(result, categoryText);\n\n      const accountName = this.querySelectorDirectChild(record, \"Account-Name\");\n      const userId = this.querySelectorDirectChild(record, \"User-Id\");\n      const password = this.querySelectorDirectChild(record, \"Password\");\n      const url = this.querySelectorDirectChild(record, \"URL\");\n      const notes = this.querySelectorDirectChild(record, \"Notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name =\n        accountName != null ? this.getValueOrDefault(accountName.textContent, \"--\") : \"--\";\n      cipher.notes = notes != null ? this.getValueOrDefault(notes.textContent) : \"\";\n      cipher.login.username = userId != null ? this.getValueOrDefault(userId.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      const attributes: string[] = [];\n      for (let i = 1; i <= 10; i++) {\n        attributes.push(\"Attribute-\" + i);\n      }\n\n      this.querySelectorAllDirectChild(record, attributes.join(\",\")).forEach((attr) => {\n        if (this.isNullOrWhitespace(attr.textContent) || attr.textContent === \"null\") {\n          return;\n        }\n        this.processKvp(cipher, attr.tagName, attr.textContent);\n      });\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordSafeXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const passwordSafe = doc.querySelector(\"passwordsafe\");\n    if (passwordSafe == null) {\n      result.errorMessage = \"Missing `passwordsafe` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const notesDelimiter = passwordSafe.getAttribute(\"delimiter\");\n    const entries = doc.querySelectorAll(\"passwordsafe > entry\");\n    Array.from(entries).forEach((entry) => {\n      const group = this.querySelectorDirectChild(entry, \"group\");\n      const groupText =\n        group != null && !this.isNullOrWhitespace(group.textContent)\n          ? group.textContent.split(\".\").join(\"/\")\n          : null;\n      this.processFolder(result, groupText);\n\n      const title = this.querySelectorDirectChild(entry, \"title\");\n      const username = this.querySelectorDirectChild(entry, \"username\");\n      const email = this.querySelectorDirectChild(entry, \"email\");\n      const password = this.querySelectorDirectChild(entry, \"password\");\n      const url = this.querySelectorDirectChild(entry, \"url\");\n      const notes = this.querySelectorDirectChild(entry, \"notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name = title != null ? this.getValueOrDefault(title.textContent, \"--\") : \"--\";\n      cipher.notes =\n        notes != null\n          ? this.getValueOrDefault(notes.textContent, \"\").split(notesDelimiter).join(\"\\n\")\n          : null;\n      cipher.login.username =\n        username != null ? this.getValueOrDefault(username.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      if (this.isNullOrWhitespace(cipher.login.username) && email != null) {\n        cipher.login.username = this.getValueOrDefault(email.textContent);\n      } else if (email != null && !this.isNullOrWhitespace(email.textContent)) {\n        cipher.notes = this.isNullOrWhitespace(cipher.notes)\n          ? \"Email: \" + email.textContent\n          : cipher.notes + \"\\n\" + \"Email: \" + email.textContent;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordWalletTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 1) {\n        return;\n      }\n      if (value.length > 5) {\n        this.processFolder(result, value[5]);\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      if (value.length > 4) {\n        cipher.notes = this.getValueOrDefault(value[4], \"\").split(\"¬\").join(\"\\n\");\n      }\n      if (value.length > 2) {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n      }\n      if (value.length > 3) {\n        cipher.login.password = this.getValueOrDefault(value[3]);\n      }\n      if (value.length > 1) {\n        cipher.login.uris = this.makeUriArray(value[1]);\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export type ProtonPassJsonFile = {\n  version: string;\n  userId: string;\n  encrypted: boolean;\n  vaults: Record<string, ProtonPassVault>;\n};\n\nexport type ProtonPassVault = {\n  name: string;\n  description: string;\n  display: {\n    color: number;\n    icon: number;\n  };\n  items: ProtonPassItem[];\n};\n\nexport type ProtonPassItem = {\n  itemId: string;\n  shareId: string;\n  data: ProtonPassItemData;\n  state: ProtonPassItemState;\n  aliasEmail: string | null;\n  contentFormatVersion: number;\n  createTime: number;\n  modifyTime: number;\n};\n\nexport enum ProtonPassItemState {\n  ACTIVE = 1,\n  TRASHED = 2,\n}\n\nexport type ProtonPassItemData = {\n  metadata: ProtonPassItemMetadata;\n  extraFields: ProtonPassItemExtraField[];\n  type: \"login\" | \"alias\" | \"creditCard\" | \"note\";\n  content: ProtonPassLoginItemContent | ProtonPassCreditCardItemContent;\n};\n\nexport type ProtonPassItemMetadata = {\n  name: string;\n  note: string;\n  itemUuid: string;\n};\n\nexport type ProtonPassItemExtraField = {\n  fieldName: string;\n  type: string;\n  data: ProtonPassItemExtraFieldData;\n};\n\nexport type ProtonPassItemExtraFieldData = {\n  content?: string;\n  totpUri?: string;\n};\n\nexport type ProtonPassLoginItemContent = {\n  username?: string;\n  password?: string;\n  urls?: string[];\n  totpUri?: string;\n};\n\nexport type ProtonPassCreditCardItemContent = {\n  cardholderName?: string;\n  cardType?: number;\n  number?: string;\n  verificationNumber?: string;\n  expirationDate?: string;\n  pin?: string;\n};\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  ProtonPassCreditCardItemContent,\n  ProtonPassItemState,\n  ProtonPassJsonFile,\n  ProtonPassLoginItemContent,\n} from \"./types/protonpass-json-type\";\n\nexport class ProtonPassJsonImporter extends BaseImporter implements Importer {\n  constructor(private i18nService: I18nService) {\n    super();\n  }\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: ProtonPassJsonFile = JSON.parse(data);\n    if (results == null || results.vaults == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.encrypted) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"unsupportedEncryptedImport\");\n      return Promise.resolve(result);\n    }\n\n    for (const [, vault] of Object.entries(results.vaults)) {\n      for (const item of vault.items) {\n        if (item.state == ProtonPassItemState.TRASHED) {\n          continue;\n        }\n        this.processFolder(result, vault.name);\n\n        const cipher = this.initLoginCipher();\n        cipher.name = item.data.metadata.name;\n        cipher.notes = item.data.metadata.note;\n\n        switch (item.data.type) {\n          case \"login\": {\n            const loginContent = item.data.content as ProtonPassLoginItemContent;\n            cipher.login.uris = this.makeUriArray(loginContent.urls);\n            cipher.login.username = loginContent.username;\n            cipher.login.password = loginContent.password;\n            if (loginContent.totpUri != \"\") {\n              cipher.login.totp = new URL(loginContent.totpUri).searchParams.get(\"secret\");\n            }\n            for (const extraField of item.data.extraFields) {\n              this.processKvp(\n                cipher,\n                extraField.fieldName,\n                extraField.type == \"totp\" ? extraField.data.totpUri : extraField.data.content,\n                extraField.type == \"text\" ? FieldType.Text : FieldType.Hidden\n              );\n            }\n            break;\n          }\n          case \"note\":\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case \"creditCard\": {\n            const creditCardContent = item.data.content as ProtonPassCreditCardItemContent;\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            cipher.card.cardholderName = creditCardContent.cardholderName;\n            cipher.card.number = creditCardContent.number;\n            cipher.card.brand = CardView.getCardBrandByPatterns(creditCardContent.number);\n            cipher.card.code = creditCardContent.verificationNumber;\n\n            if (!this.isNullOrWhitespace(creditCardContent.expirationDate)) {\n              cipher.card.expMonth = creditCardContent.expirationDate.substring(0, 2);\n              cipher.card.expMonth = cipher.card.expMonth.replace(/^0+/, \"\");\n              cipher.card.expYear = creditCardContent.expirationDate.substring(2, 6);\n            }\n\n            if (!this.isNullOrWhitespace(creditCardContent.pin)) {\n              this.processKvp(cipher, \"PIN\", creditCardContent.pin, FieldType.Hidden);\n            }\n\n            break;\n          }\n        }\n\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      }\n    }\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  AppPasswordEntry,\n  BookmarkEntry,\n  EnvironmentVariablesEntry,\n  FoldersEntity,\n  GPGEntry,\n  NotesEntry,\n  PsonoItemTypes,\n  PsonoJsonExport,\n  TOTPEntry,\n  WebsitePasswordEntry,\n} from \"./psono-json-types\";\n\nexport class PsonoJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const psonoExport: PsonoJsonExport = JSON.parse(data);\n    if (psonoExport == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    this.parseFolders(result, psonoExport.folders);\n    this.handleItemParsing(result, psonoExport.items);\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFolders(result: ImportResult, folders: FoldersEntity[]) {\n    if (folders == null || folders.length === 0) {\n      return;\n    }\n\n    folders.forEach((folder) => {\n      if (folder.items == null || folder.items.length == 0) {\n        return;\n      }\n\n      this.processFolder(result, folder.name);\n\n      this.handleItemParsing(result, folder.items);\n    });\n  }\n\n  private handleItemParsing(result: ImportResult, items?: PsonoItemTypes[]) {\n    if (items == null || items.length === 0) {\n      return;\n    }\n\n    items.forEach((record) => {\n      const cipher = this.parsePsonoItem(record);\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n  }\n\n  private parsePsonoItem(item: PsonoItemTypes): CipherView {\n    const cipher = this.initLoginCipher();\n\n    switch (item.type) {\n      case \"website_password\":\n        this.parseWebsiteLogins(item, cipher);\n        break;\n      case \"application_password\":\n        this.parseApplicationPasswords(item, cipher);\n        break;\n      case \"environment_variables\":\n        this.parseEnvironmentVariables(item, cipher);\n        break;\n      case \"totp\":\n        this.parseTOTP(item, cipher);\n        break;\n      case \"bookmark\":\n        this.parseBookmarks(item, cipher);\n        break;\n      // Skipping this until we can save GPG into notes/custom fields\n      // case \"mail_gpg_own_key\":\n      //   this.parseGPG(item, cipher);\n      //   break;\n      case \"note\":\n        this.parseNotes(item, cipher);\n        break;\n      default:\n        break;\n    }\n\n    return cipher;\n  }\n\n  readonly WEBSITE_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"website_password_title\",\n    \"website_password_notes\",\n    \"website_password_username\",\n    \"website_password_password\",\n    \"website_password_url\",\n    \"autosubmit\",\n    \"website_password_auto_submit\",\n    \"urlfilter\",\n    \"website_password_url_filter\",\n  ]);\n  private parseWebsiteLogins(entry: WebsitePasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"website_password\") {\n      return;\n    }\n\n    cipher.name = entry.website_password_title;\n    cipher.notes = entry.website_password_notes;\n\n    cipher.login.username = entry.website_password_username;\n    cipher.login.password = entry.website_password_password;\n\n    cipher.login.uris = this.makeUriArray(entry.website_password_url);\n\n    this.processKvp(\n      cipher,\n      \"website_password_auto_submit\",\n      entry.website_password_auto_submit?.toString(),\n      FieldType.Boolean\n    );\n\n    this.processKvp(cipher, \"website_password_url_filter\", entry.website_password_url_filter);\n\n    this.importUnmappedFields(cipher, entry, this.WEBSITE_mappedValues);\n  }\n\n  readonly APP_PWD_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"application_password_title\",\n    \"application_password_notes\",\n    \"application_password_username\",\n    \"application_password_password\",\n  ]);\n  private parseApplicationPasswords(entry: AppPasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"application_password\") {\n      return;\n    }\n\n    cipher.name = entry.application_password_title;\n    cipher.notes = entry.application_password_notes;\n\n    cipher.login.username = entry.application_password_username;\n    cipher.login.password = entry.application_password_password;\n\n    this.importUnmappedFields(cipher, entry, this.APP_PWD_mappedValues);\n  }\n\n  readonly BOOKMARK_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"bookmark_title\",\n    \"bookmark_notes\",\n    \"bookmark_url\",\n  ]);\n  private parseBookmarks(entry: BookmarkEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"bookmark\") {\n      return;\n    }\n\n    cipher.name = entry.bookmark_title;\n    cipher.notes = entry.bookmark_notes;\n\n    cipher.login.uris = this.makeUriArray(entry.bookmark_url);\n\n    this.importUnmappedFields(cipher, entry, this.BOOKMARK_mappedValues);\n  }\n\n  readonly NOTES_mappedValues = new Set([\"type\", \"name\", \"note_title\", \"note_notes\"]);\n  private parseNotes(entry: NotesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"note\") {\n      return;\n    }\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.note_title;\n    cipher.notes = entry.note_notes;\n\n    this.importUnmappedFields(cipher, entry, this.NOTES_mappedValues);\n  }\n\n  readonly TOTP_mappedValues = new Set([\"type\", \"name\", \"totp_title\", \"totp_notes\", \"totp_code\"]);\n  private parseTOTP(entry: TOTPEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"totp\") {\n      return;\n    }\n\n    cipher.name = entry.totp_title;\n    cipher.notes = entry.totp_notes;\n\n    cipher.login.totp = entry.totp_code;\n\n    this.importUnmappedFields(cipher, entry, this.TOTP_mappedValues);\n  }\n\n  readonly ENV_VARIABLES_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"environment_variables_title\",\n    \"environment_variables_notes\",\n    \"environment_variables_variables\",\n  ]);\n  private parseEnvironmentVariables(entry: EnvironmentVariablesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"environment_variables\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.environment_variables_title;\n    cipher.notes = entry.environment_variables_notes;\n\n    entry.environment_variables_variables.forEach((KvPair) => {\n      this.processKvp(cipher, KvPair.key, KvPair.value);\n    });\n\n    this.importUnmappedFields(cipher, entry, this.ENV_VARIABLES_mappedValues);\n  }\n\n  readonly GPG_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"mail_gpg_own_key_title\",\n    \"mail_gpg_own_key_public\",\n    \"mail_gpg_own_key_name\",\n    \"mail_gpg_own_key_email\",\n    \"mail_gpg_own_key_private\",\n  ]);\n  private parseGPG(entry: GPGEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"mail_gpg_own_key\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.mail_gpg_own_key_title;\n    cipher.notes = entry.mail_gpg_own_key_public;\n\n    this.processKvp(cipher, \"mail_gpg_own_key_name\", entry.mail_gpg_own_key_name);\n    this.processKvp(cipher, \"mail_gpg_own_key_email\", entry.mail_gpg_own_key_email);\n    this.processKvp(\n      cipher,\n      \"mail_gpg_own_key_private\",\n      entry.mail_gpg_own_key_private,\n      FieldType.Hidden\n    );\n\n    this.importUnmappedFields(cipher, entry, this.GPG_mappedValues);\n  }\n\n  private importUnmappedFields(\n    cipher: CipherView,\n    entry: PsonoItemTypes,\n    mappedValues: Set<string>\n  ) {\n    const unmappedFields = Object.keys(entry).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = entry as any;\n      this.processKvp(cipher, key, item[key].toString());\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RememBearCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.trash === \"true\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.notes);\n      if (value.type === \"LoginItem\") {\n        cipher.login.uris = this.makeUriArray(value.website);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      } else if (value.type === \"CreditCardItem\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.verification);\n\n        try {\n          const expMonth = this.getValueOrDefault(value.expiryMonth);\n          if (expMonth != null) {\n            const expMonthNumber = parseInt(expMonth, null);\n            if (expMonthNumber != null && expMonthNumber >= 1 && expMonthNumber <= 12) {\n              cipher.card.expMonth = expMonthNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n        try {\n          const expYear = this.getValueOrDefault(value.expiryYear);\n          if (expYear != null) {\n            const expYearNumber = parseInt(expYear, null);\n            if (expYearNumber != null) {\n              cipher.card.expYear = expYearNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n\n        const pin = this.getValueOrDefault(value.pin);\n        if (pin != null) {\n          this.processKvp(cipher, \"PIN\", pin);\n        }\n        const zip = this.getValueOrDefault(value.zipCode);\n        if (zip != null) {\n          this.processKvp(cipher, \"Zip Code\", zip);\n        }\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RoboFormCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let i = 1;\n    results.forEach((value) => {\n      const folder =\n        !this.isNullOrWhitespace(value.Folder) && value.Folder.startsWith(\"/\")\n          ? value.Folder.replace(\"/\", \"\")\n          : value.Folder;\n      const folderName = !this.isNullOrWhitespace(folder) ? folder : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Login);\n      cipher.login.password = this.getValueOrDefault(value.Pwd);\n      cipher.login.uris = this.makeUriArray(value.Url);\n\n      if (!this.isNullOrWhitespace(value.Rf_fields)) {\n        let fields: string[] = [value.Rf_fields];\n        if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n          fields = fields.concat(value.__parsed_extra);\n        }\n        fields.forEach((field: string) => {\n          const parts = field.split(\":\");\n          if (parts.length < 3) {\n            return;\n          }\n          const key = parts[0] === \"-no-name-\" ? null : parts[0];\n          const val = parts.length === 4 && parts[2] === \"rck\" ? parts[1] : parts[2];\n          this.processKvp(cipher, key, val);\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n\n      if (\n        i === results.length &&\n        cipher.name === \"--\" &&\n        this.isNullOrWhitespace(cipher.login.password)\n      ) {\n        return;\n      }\n\n      result.ciphers.push(cipher);\n      i++;\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafariCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url ?? value.URL);\n      cipher.login.totp = this.getValueOrDefault(value.OTPAuth);\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafeInCloudXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const db = doc.querySelector(\"database\");\n    if (db == null) {\n      result.errorMessage = \"Missing `database` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, number>();\n\n    Array.from(doc.querySelectorAll(\"database > label\")).forEach((labelEl) => {\n      const name = labelEl.getAttribute(\"name\");\n      const id = labelEl.getAttribute(\"id\");\n      if (!this.isNullOrWhitespace(name) && !this.isNullOrWhitespace(id)) {\n        foldersMap.set(id, result.folders.length);\n        const folder = new FolderView();\n        folder.name = name;\n        result.folders.push(folder);\n      }\n    });\n\n    Array.from(doc.querySelectorAll(\"database > card\")).forEach((cardEl) => {\n      if (cardEl.getAttribute(\"template\") === \"true\" || cardEl.getAttribute(\"deleted\") === \"true\") {\n        return;\n      }\n\n      const labelIdEl = this.querySelectorDirectChild(cardEl, \"label_id\");\n      if (labelIdEl != null) {\n        const labelId = labelIdEl.textContent;\n        if (!this.isNullOrWhitespace(labelId) && foldersMap.has(labelId)) {\n          result.folderRelationships.push([result.ciphers.length, foldersMap.get(labelId)]);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(cardEl.getAttribute(\"title\"), \"--\");\n\n      if (cardEl.getAttribute(\"star\") === \"true\") {\n        cipher.favorite = true;\n      }\n\n      const cardType = cardEl.getAttribute(\"type\");\n      if (cardType === \"note\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      } else {\n        Array.from(this.querySelectorAllDirectChild(cardEl, \"field\")).forEach((fieldEl) => {\n          const text = fieldEl.textContent;\n          if (this.isNullOrWhitespace(text)) {\n            return;\n          }\n          const name = fieldEl.getAttribute(\"name\");\n          const fieldType = this.getValueOrDefault(fieldEl.getAttribute(\"type\"), \"\").toLowerCase();\n          if (fieldType === \"login\") {\n            cipher.login.username = text;\n          } else if (fieldType === \"password\" || fieldType === \"secret\") {\n            // safeInCloud allows for more than one password. we just insert them here and find the one used as password later\n            this.processKvp(cipher, name, text, FieldType.Hidden);\n          } else if (fieldType === \"one_time_password\") {\n            cipher.login.totp = text;\n          } else if (fieldType === \"notes\") {\n            cipher.notes += text + \"\\n\";\n          } else if (fieldType === \"weblogin\" || fieldType === \"website\") {\n            cipher.login.uris = this.makeUriArray(text);\n          } else {\n            this.processKvp(cipher, name, text);\n          }\n        });\n      }\n\n      Array.from(this.querySelectorAllDirectChild(cardEl, \"notes\")).forEach((notesEl) => {\n        cipher.notes += notesEl.textContent + \"\\n\";\n      });\n\n      this.setPassword(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  // Choose a password from all passwords. Take one that has password in its name, or the first one if there is no such entry\n  // if its name is password, we can safely remove it form the fields. otherwise, it would maybe be best to keep it as a hidden field\n  setPassword(cipher: CipherView) {\n    const candidates = cipher.fields.filter((field) => field.type === FieldType.Hidden);\n    if (!candidates.length) {\n      return;\n    }\n\n    let choice: FieldView;\n    for (const field of candidates) {\n      if (this.passwordFieldNames.includes(field.name.toLowerCase())) {\n        choice = field;\n        cipher.fields = cipher.fields.filter((f) => f !== choice);\n        break;\n      }\n    }\n\n    if (!choice) {\n      choice = candidates[0];\n    }\n\n    cipher.login.password = choice.value;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SaferPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.nameFromUrl(value.url), \"--\");\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SecureSafeCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title);\n      cipher.notes = this.getValueOrDefault(value.Comment);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SplashIdCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      this.processFolder(result, this.getValueOrDefault(value[value.length - 1]));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 2], \"\");\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n\n      if (value[0] === \"Web Logins\" || value[0] === \"Servers\" || value[0] === \"Email Accounts\") {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n        cipher.login.password = this.getValueOrDefault(value[3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n        this.parseFieldsToNotes(cipher, 5, value);\n      } else {\n        this.parseFieldsToNotes(cipher, 2, value);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFieldsToNotes(cipher: CipherView, startIndex: number, value: any) {\n    // last 3 rows do not get parsed\n    for (let i = startIndex; i < value.length - 3; i++) {\n      if (this.isNullOrWhitespace(value[i])) {\n        continue;\n      }\n      cipher.notes += value[i] + \"\\n\";\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class StickyPasswordXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const loginNodes = doc.querySelectorAll(\"root > Database > Logins > Login\");\n    Array.from(loginNodes).forEach((loginNode) => {\n      const accountId = loginNode.getAttribute(\"ID\");\n      if (this.isNullOrWhitespace(accountId)) {\n        return;\n      }\n\n      const usernameText = loginNode.getAttribute(\"Name\");\n      const passwordText = loginNode.getAttribute(\"Password\");\n      let titleText: string = null;\n      let linkText: string = null;\n      let notesText: string = null;\n      let groupId: string = null;\n      let groupText: string = null;\n\n      const accountLogin = doc.querySelector(\n        \"root > Database > Accounts > Account > \" +\n          'LoginLinks > Login[SourceLoginID=\"' +\n          accountId +\n          '\"]'\n      );\n      if (accountLogin != null) {\n        const account = accountLogin.parentElement.parentElement;\n        if (account != null) {\n          titleText = account.getAttribute(\"Name\");\n          linkText = account.getAttribute(\"Link\");\n          groupId = account.getAttribute(\"ParentID\");\n          notesText = account.getAttribute(\"Comments\");\n          if (!this.isNullOrWhitespace(notesText)) {\n            notesText = notesText.split(\"/n\").join(\"\\n\");\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(groupId)) {\n        groupText = this.buildGroupText(doc, groupId, \"\");\n        this.processFolder(result, groupText);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(titleText, \"--\");\n      cipher.notes = this.getValueOrDefault(notesText);\n      cipher.login.username = this.getValueOrDefault(usernameText);\n      cipher.login.password = this.getValueOrDefault(passwordText);\n      cipher.login.uris = this.makeUriArray(linkText);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  buildGroupText(doc: Document, groupId: string, groupText: string): string {\n    const group = doc.querySelector('root > Database > Groups > Group[ID=\"' + groupId + '\"]');\n    if (group == null) {\n      return groupText;\n    }\n    if (!this.isNullOrWhitespace(groupText)) {\n      groupText = \"/\" + groupText;\n    }\n    groupText = group.getAttribute(\"Name\") + groupText;\n    return this.buildGroupText(doc, group.getAttribute(\"ParentID\"), groupText);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst PropertiesToIgnore = [\n  \"kind\",\n  \"autologin\",\n  \"favorite\",\n  \"hexcolor\",\n  \"protectedwithpassword\",\n  \"subdomainonly\",\n  \"type\",\n  \"tk_export_version\",\n  \"note\",\n  \"title\",\n  \"document_content\",\n];\n\nexport class TrueKeyCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.favorite, \"\").toLowerCase() === \"true\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.notes = this.getValueOrDefault(value.memo, \"\");\n      cipher.login.username = this.getValueOrDefault(value.login);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n\n      if (value.kind !== \"login\") {\n        cipher.name = this.getValueOrDefault(value.title, \"--\");\n        cipher.notes = this.getValueOrDefault(value.note, \"\");\n      }\n\n      if (value.kind === \"cc\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        if (!this.isNullOrWhitespace(value.expiryDate)) {\n          try {\n            const expDate = new Date(value.expiryDate);\n            cipher.card.expYear = expDate.getFullYear().toString();\n            cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n          } catch {\n            // Ignore error\n          }\n        }\n      } else if (value.kind !== \"login\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = this.getValueOrDefault(value.document_content, \"\");\n        }\n        for (const property in value) {\n          if (\n            value.hasOwnProperty(property) && // eslint-disable-line\n            PropertiesToIgnore.indexOf(property.toLowerCase()) < 0 &&\n            !this.isNullOrWhitespace(value[property])\n          ) {\n            this.processKvp(cipher, property, value[property]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class UpmCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length !== 5) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.notes = this.getValueOrDefault(value[4]);\n      cipher.login.username = this.getValueOrDefault(value[1]);\n      cipher.login.password = this.getValueOrDefault(value[2]);\n      cipher.login.uris = this.makeUriArray(value[3]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class YotiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User name\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ZohoVaultCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (\n        this.isNullOrWhitespace(value[\"Password Name\"]) &&\n        this.isNullOrWhitespace(value[\"Secret Name\"])\n      ) {\n        return;\n      }\n      this.processFolder(result, this.getValueOrDefault(value.ChamberName));\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite, \"0\") === \"1\";\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(\n        value[\"Password Name\"],\n        this.getValueOrDefault(value[\"Secret Name\"], \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(\n        this.getValueOrDefault(value[\"Password URL\"], this.getValueOrDefault(value[\"Secret URL\"]))\n      );\n      this.parseData(cipher, value.SecretData);\n      this.parseData(cipher, value.CustomData);\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseData(cipher: CipherView, data: string) {\n    if (this.isNullOrWhitespace(data)) {\n      return;\n    }\n    const dataLines = this.splitNewLine(data);\n    dataLines.forEach((line) => {\n      const delimPosition = line.indexOf(\":\");\n      if (delimPosition < 0) {\n        return;\n      }\n      const field = line.substring(0, delimPosition);\n      const value = line.length > delimPosition ? line.substring(delimPosition + 1) : null;\n      if (\n        this.isNullOrWhitespace(field) ||\n        this.isNullOrWhitespace(value) ||\n        field === \"SecretType\"\n      ) {\n        return;\n      }\n      const fieldLower = field.toLowerCase();\n      if (cipher.login.username == null && this.usernameFieldNames.indexOf(fieldLower) > -1) {\n        cipher.login.username = value;\n      } else if (\n        cipher.login.password == null &&\n        this.passwordFieldNames.indexOf(fieldLower) > -1\n      ) {\n        cipher.login.password = value;\n      } else {\n        this.processKvp(cipher, field, value);\n      }\n    });\n  }\n}\n","export interface ImportOption {\n  id: string;\n  name: string;\n}\n\nexport const featuredImportOptions = [\n  { id: \"bitwardenjson\", name: \"Bitwarden (json)\" },\n  { id: \"bitwardencsv\", name: \"Bitwarden (csv)\" },\n  { id: \"chromecsv\", name: \"Chrome (csv)\" },\n  { id: \"dashlanecsv\", name: \"Dashlane (csv)\" },\n  { id: \"firefoxcsv\", name: \"Firefox (csv)\" },\n  { id: \"keepass2xml\", name: \"KeePass 2 (xml)\" },\n  { id: \"lastpasscsv\", name: \"LastPass (csv)\" },\n  { id: \"safaricsv\", name: \"Safari and macOS (csv)\" },\n  { id: \"1password1pux\", name: \"1Password (1pux/json)\" },\n] as const;\n\nexport const regularImportOptions = [\n  { id: \"keepassxcsv\", name: \"KeePassX (csv)\" },\n  { id: \"1password1pif\", name: \"1Password (1pif)\" },\n  { id: \"1passwordwincsv\", name: \"1Password 6 and 7 Windows (csv)\" },\n  { id: \"1passwordmaccsv\", name: \"1Password 6 and 7 Mac (csv)\" },\n  { id: \"dashlanejson\", name: \"Dashlane (json)\" },\n  { id: \"roboformcsv\", name: \"RoboForm (csv)\" },\n  { id: \"keepercsv\", name: \"Keeper (csv)\" },\n  // Temporarily remove this option for the Feb release\n  // { id: \"keeperjson\", name: \"Keeper (json)\" },\n  { id: \"enpasscsv\", name: \"Enpass (csv)\" },\n  { id: \"enpassjson\", name: \"Enpass (json)\" },\n  { id: \"protonpass\", name: \"ProtonPass (zip/json)\" },\n  { id: \"safeincloudxml\", name: \"SafeInCloud (xml)\" },\n  { id: \"pwsafexml\", name: \"Password Safe (xml)\" },\n  { id: \"stickypasswordxml\", name: \"Sticky Password (xml)\" },\n  { id: \"msecurecsv\", name: \"mSecure (csv)\" },\n  { id: \"truekeycsv\", name: \"True Key (csv)\" },\n  { id: \"passwordbossjson\", name: \"Password Boss (json)\" },\n  { id: \"zohovaultcsv\", name: \"Zoho Vault (csv)\" },\n  { id: \"splashidcsv\", name: \"SplashID (csv)\" },\n  { id: \"passworddragonxml\", name: \"Password Dragon (xml)\" },\n  { id: \"padlockcsv\", name: \"Padlock (csv)\" },\n  { id: \"passboltcsv\", name: \"Passbolt (csv)\" },\n  { id: \"clipperzhtml\", name: \"Clipperz (html)\" },\n  { id: \"aviracsv\", name: \"Avira (csv)\" },\n  { id: \"saferpasscsv\", name: \"SaferPass (csv)\" },\n  { id: \"upmcsv\", name: \"Universal Password Manager (csv)\" },\n  { id: \"ascendocsv\", name: \"Ascendo DataVault (csv)\" },\n  { id: \"meldiumcsv\", name: \"Meldium (csv)\" },\n  { id: \"passkeepcsv\", name: \"PassKeep (csv)\" },\n  { id: \"operacsv\", name: \"Opera (csv)\" },\n  { id: \"vivaldicsv\", name: \"Vivaldi (csv)\" },\n  { id: \"gnomejson\", name: \"GNOME Passwords and Keys/Seahorse (json)\" },\n  { id: \"blurcsv\", name: \"Blur (csv)\" },\n  { id: \"passwordagentcsv\", name: \"Password Agent (csv)\" },\n  { id: \"passpackcsv\", name: \"Passpack (csv)\" },\n  { id: \"passmanjson\", name: \"Passman (json)\" },\n  { id: \"avastcsv\", name: \"Avast Passwords (csv)\" },\n  { id: \"avastjson\", name: \"Avast Passwords (json)\" },\n  { id: \"fsecurefsk\", name: \"F-Secure KEY (fsk)\" },\n  { id: \"kasperskytxt\", name: \"Kaspersky Password Manager (txt)\" },\n  { id: \"remembearcsv\", name: \"RememBear (csv)\" },\n  { id: \"passwordwallettxt\", name: \"PasswordWallet (txt)\" },\n  { id: \"mykicsv\", name: \"Myki (csv)\" },\n  { id: \"securesafecsv\", name: \"SecureSafe (csv)\" },\n  { id: \"logmeoncecsv\", name: \"LogMeOnce (csv)\" },\n  { id: \"blackberrycsv\", name: \"BlackBerry Password Keeper (csv)\" },\n  { id: \"buttercupcsv\", name: \"Buttercup (csv)\" },\n  { id: \"codebookcsv\", name: \"Codebook (csv)\" },\n  { id: \"encryptrcsv\", name: \"Encryptr (csv)\" },\n  { id: \"yoticsv\", name: \"Yoti (csv)\" },\n  { id: \"nordpasscsv\", name: \"Nordpass (csv)\" },\n  { id: \"psonojson\", name: \"Psono (json)\" },\n  { id: \"passkyjson\", name: \"Passky (json)\" },\n] as const;\n\nexport type ImportType =\n  | (typeof featuredImportOptions)[number][\"id\"]\n  | (typeof regularImportOptions)[number][\"id\"];\n","import { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\nimport { KvpRequest } from \"@bitwarden/common/models/request/kvp.request\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherRequest } from \"@bitwarden/common/vault/models/request/cipher.request\";\nimport { CollectionWithIdRequest } from \"@bitwarden/common/vault/models/request/collection-with-id.request\";\nimport { FolderWithIdRequest } from \"@bitwarden/common/vault/models/request/folder-with-id.request\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport {\n  AscendoCsvImporter,\n  AvastCsvImporter,\n  AvastJsonImporter,\n  AviraCsvImporter,\n  BitwardenCsvImporter,\n  BitwardenPasswordProtectedImporter,\n  BlackBerryCsvImporter,\n  BlurCsvImporter,\n  ButtercupCsvImporter,\n  ChromeCsvImporter,\n  ClipperzHtmlImporter,\n  CodebookCsvImporter,\n  DashlaneCsvImporter,\n  DashlaneJsonImporter,\n  EncryptrCsvImporter,\n  EnpassCsvImporter,\n  EnpassJsonImporter,\n  FirefoxCsvImporter,\n  FSecureFskImporter,\n  GnomeJsonImporter,\n  KasperskyTxtImporter,\n  KeePass2XmlImporter,\n  KeePassXCsvImporter,\n  KeeperCsvImporter,\n  // KeeperJsonImporter,\n  LastPassCsvImporter,\n  LogMeOnceCsvImporter,\n  MSecureCsvImporter,\n  MeldiumCsvImporter,\n  MykiCsvImporter,\n  NordPassCsvImporter,\n  OnePassword1PifImporter,\n  OnePassword1PuxImporter,\n  OnePasswordMacCsvImporter,\n  OnePasswordWinCsvImporter,\n  PadlockCsvImporter,\n  PassKeepCsvImporter,\n  PasskyJsonImporter,\n  PassmanJsonImporter,\n  PasspackCsvImporter,\n  PasswordAgentCsvImporter,\n  PasswordBossJsonImporter,\n  PasswordDragonXmlImporter,\n  PasswordSafeXmlImporter,\n  PasswordWalletTxtImporter,\n  ProtonPassJsonImporter,\n  PsonoJsonImporter,\n  RememBearCsvImporter,\n  RoboFormCsvImporter,\n  SafariCsvImporter,\n  SafeInCloudXmlImporter,\n  SaferPassCsvImporter,\n  SecureSafeCsvImporter,\n  SplashIdCsvImporter,\n  StickyPasswordXmlImporter,\n  TrueKeyCsvImporter,\n  UpmCsvImporter,\n  YotiCsvImporter,\n  ZohoVaultCsvImporter,\n} from \"../importers\";\nimport { Importer } from \"../importers/importer\";\nimport {\n  featuredImportOptions,\n  ImportOption,\n  ImportType,\n  regularImportOptions,\n} from \"../models/import-options\";\nimport { ImportResult } from \"../models/import-result\";\nimport { ImportApiServiceAbstraction } from \"../services/import-api.service.abstraction\";\nimport { ImportServiceAbstraction } from \"../services/import.service.abstraction\";\n\nexport class ImportService implements ImportServiceAbstraction {\n  featuredImportOptions = featuredImportOptions as readonly ImportOption[];\n\n  regularImportOptions = regularImportOptions as readonly ImportOption[];\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private importApiService: ImportApiServiceAbstraction,\n    private i18nService: I18nService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService\n  ) {}\n\n  getImportOptions(): ImportOption[] {\n    return this.featuredImportOptions.concat(this.regularImportOptions);\n  }\n\n  async import(\n    importer: Importer,\n    fileContents: string,\n    organizationId: string = null,\n    selectedImportTarget: string = null,\n    isUserAdmin: boolean\n  ): Promise<ImportResult> {\n    let importResult: ImportResult;\n    try {\n      importResult = await importer.parse(fileContents);\n    } catch (error) {\n      if (error instanceof SyntaxError) {\n        throw new Error(this.i18nService.t(\"importFormatError\"));\n      }\n      throw error;\n    }\n\n    if (!importResult.success) {\n      if (!Utils.isNullOrWhitespace(importResult.errorMessage)) {\n        throw new Error(importResult.errorMessage);\n      }\n      throw new Error(this.i18nService.t(\"importFormatError\"));\n    }\n\n    if (importResult.folders.length === 0 && importResult.ciphers.length === 0) {\n      throw new Error(this.i18nService.t(\"importNothingError\"));\n    }\n\n    if (importResult.ciphers.length > 0) {\n      const halfway = Math.floor(importResult.ciphers.length / 2);\n      const last = importResult.ciphers.length - 1;\n\n      if (\n        this.badData(importResult.ciphers[0]) &&\n        this.badData(importResult.ciphers[halfway]) &&\n        this.badData(importResult.ciphers[last])\n      ) {\n        throw new Error(this.i18nService.t(\"importFormatError\"));\n      }\n    }\n\n    if (organizationId && Utils.isNullOrWhitespace(selectedImportTarget) && !isUserAdmin) {\n      const hasUnassignedCollections = importResult.ciphers.some(\n        (c) => !Array.isArray(c.collectionIds) || c.collectionIds.length == 0\n      );\n      if (hasUnassignedCollections) {\n        throw new Error(this.i18nService.t(\"importUnassignedItemsError\"));\n      }\n    }\n\n    try {\n      await this.setImportTarget(importResult, organizationId, selectedImportTarget);\n      if (organizationId != null) {\n        await this.handleOrganizationalImport(importResult, organizationId);\n      } else {\n        await this.handleIndividualImport(importResult);\n      }\n    } catch (error) {\n      const errorResponse = new ErrorResponse(error, 400);\n      throw this.handleServerError(errorResponse, importResult);\n    }\n    return importResult;\n  }\n\n  getImporter(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>,\n    organizationId: string = null\n  ): Importer {\n    if (promptForPassword_callback == null) {\n      return null;\n    }\n\n    const importer = this.getImporterInstance(format, promptForPassword_callback);\n    if (importer == null) {\n      return null;\n    }\n    importer.organizationId = organizationId;\n    return importer;\n  }\n\n  private getImporterInstance(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>\n  ) {\n    if (format == null) {\n      return null;\n    }\n\n    switch (format) {\n      case \"bitwardencsv\":\n        return new BitwardenCsvImporter();\n      case \"bitwardenjson\":\n      case \"bitwardenpasswordprotected\":\n        return new BitwardenPasswordProtectedImporter(\n          this.cryptoService,\n          this.i18nService,\n          this.cipherService,\n          promptForPassword_callback\n        );\n      case \"lastpasscsv\":\n      case \"passboltcsv\":\n        return new LastPassCsvImporter();\n      case \"keepassxcsv\":\n        return new KeePassXCsvImporter();\n      case \"aviracsv\":\n        return new AviraCsvImporter();\n      case \"blurcsv\":\n        return new BlurCsvImporter();\n      case \"safeincloudxml\":\n        return new SafeInCloudXmlImporter();\n      case \"padlockcsv\":\n        return new PadlockCsvImporter();\n      case \"keepass2xml\":\n        return new KeePass2XmlImporter();\n      case \"chromecsv\":\n      case \"operacsv\":\n      case \"vivaldicsv\":\n        return new ChromeCsvImporter();\n      case \"firefoxcsv\":\n        return new FirefoxCsvImporter();\n      case \"upmcsv\":\n        return new UpmCsvImporter();\n      case \"saferpasscsv\":\n        return new SaferPassCsvImporter();\n      case \"safaricsv\":\n        return new SafariCsvImporter();\n      case \"meldiumcsv\":\n        return new MeldiumCsvImporter();\n      case \"1password1pif\":\n        return new OnePassword1PifImporter();\n      case \"1password1pux\":\n        return new OnePassword1PuxImporter();\n      case \"1passwordwincsv\":\n        return new OnePasswordWinCsvImporter();\n      case \"1passwordmaccsv\":\n        return new OnePasswordMacCsvImporter();\n      case \"keepercsv\":\n        return new KeeperCsvImporter();\n      // case \"keeperjson\":\n      //   return new KeeperJsonImporter();\n      case \"passworddragonxml\":\n        return new PasswordDragonXmlImporter();\n      case \"enpasscsv\":\n        return new EnpassCsvImporter();\n      case \"enpassjson\":\n        return new EnpassJsonImporter();\n      case \"pwsafexml\":\n        return new PasswordSafeXmlImporter();\n      case \"dashlanecsv\":\n        return new DashlaneCsvImporter();\n      case \"dashlanejson\":\n        return new DashlaneJsonImporter();\n      case \"msecurecsv\":\n        return new MSecureCsvImporter();\n      case \"stickypasswordxml\":\n        return new StickyPasswordXmlImporter();\n      case \"truekeycsv\":\n        return new TrueKeyCsvImporter();\n      case \"clipperzhtml\":\n        return new ClipperzHtmlImporter();\n      case \"roboformcsv\":\n        return new RoboFormCsvImporter();\n      case \"ascendocsv\":\n        return new AscendoCsvImporter();\n      case \"passwordbossjson\":\n        return new PasswordBossJsonImporter();\n      case \"zohovaultcsv\":\n        return new ZohoVaultCsvImporter();\n      case \"splashidcsv\":\n        return new SplashIdCsvImporter();\n      case \"passkeepcsv\":\n        return new PassKeepCsvImporter();\n      case \"gnomejson\":\n        return new GnomeJsonImporter();\n      case \"passwordagentcsv\":\n        return new PasswordAgentCsvImporter();\n      case \"passpackcsv\":\n        return new PasspackCsvImporter();\n      case \"passmanjson\":\n        return new PassmanJsonImporter();\n      case \"avastcsv\":\n        return new AvastCsvImporter();\n      case \"avastjson\":\n        return new AvastJsonImporter();\n      case \"fsecurefsk\":\n        return new FSecureFskImporter();\n      case \"kasperskytxt\":\n        return new KasperskyTxtImporter();\n      case \"remembearcsv\":\n        return new RememBearCsvImporter();\n      case \"passwordwallettxt\":\n        return new PasswordWalletTxtImporter();\n      case \"mykicsv\":\n        return new MykiCsvImporter();\n      case \"securesafecsv\":\n        return new SecureSafeCsvImporter();\n      case \"logmeoncecsv\":\n        return new LogMeOnceCsvImporter();\n      case \"blackberrycsv\":\n        return new BlackBerryCsvImporter();\n      case \"buttercupcsv\":\n        return new ButtercupCsvImporter();\n      case \"codebookcsv\":\n        return new CodebookCsvImporter();\n      case \"encryptrcsv\":\n        return new EncryptrCsvImporter();\n      case \"yoticsv\":\n        return new YotiCsvImporter();\n      case \"nordpasscsv\":\n        return new NordPassCsvImporter();\n      case \"psonojson\":\n        return new PsonoJsonImporter();\n      case \"passkyjson\":\n        return new PasskyJsonImporter();\n      case \"protonpass\":\n        return new ProtonPassJsonImporter(this.i18nService);\n      default:\n        return null;\n    }\n  }\n\n  private async handleIndividualImport(importResult: ImportResult) {\n    const request = new ImportCiphersRequest();\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.folders != null) {\n      for (let i = 0; i < importResult.folders.length; i++) {\n        const f = await this.folderService.encrypt(importResult.folders[i]);\n        request.folders.push(new FolderWithIdRequest(f));\n      }\n    }\n    if (importResult.folderRelationships != null) {\n      importResult.folderRelationships.forEach((r) =>\n        request.folderRelationships.push(new KvpRequest(r[0], r[1]))\n      );\n    }\n    return await this.importApiService.postImportCiphers(request);\n  }\n\n  private async handleOrganizationalImport(importResult: ImportResult, organizationId: string) {\n    const request = new ImportOrganizationCiphersRequest();\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      importResult.ciphers[i].organizationId = organizationId;\n      const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.collections != null) {\n      for (let i = 0; i < importResult.collections.length; i++) {\n        importResult.collections[i].organizationId = organizationId;\n        const c = await this.collectionService.encrypt(importResult.collections[i]);\n        request.collections.push(new CollectionWithIdRequest(c));\n      }\n    }\n    if (importResult.collectionRelationships != null) {\n      importResult.collectionRelationships.forEach((r) =>\n        request.collectionRelationships.push(new KvpRequest(r[0], r[1]))\n      );\n    }\n    return await this.importApiService.postImportOrganizationCiphers(organizationId, request);\n  }\n\n  private badData(c: CipherView) {\n    return (\n      (c.name == null || c.name === \"--\") &&\n      c.type === CipherType.Login &&\n      c.login != null &&\n      Utils.isNullOrWhitespace(c.login.password)\n    );\n  }\n\n  private handleServerError(errorResponse: ErrorResponse, importResult: ImportResult): Error {\n    if (errorResponse.validationErrors == null) {\n      return new Error(errorResponse.message);\n    }\n\n    let errorMessage = \"\";\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const i = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Ciphers\":\n          item = importResult.ciphers[i];\n          itemType = CipherType[item.type];\n          break;\n        case \"Folders\":\n          item = importResult.folders[i];\n          itemType = \"Folder\";\n          break;\n        case \"Collections\":\n          item = importResult.collections[i];\n          itemType = \"Collection\";\n          break;\n        default:\n          return;\n      }\n\n      if (index > 0) {\n        errorMessage += \"\\n\\n\";\n      }\n\n      if (itemType !== \"Folder\" && itemType !== \"Collection\") {\n        errorMessage += \"[\" + (i + 1) + \"] \";\n      }\n\n      errorMessage += \"[\" + itemType + '] \"' + item.name + '\": ' + value;\n    });\n\n    return new Error(errorMessage);\n  }\n\n  private async setImportTarget(\n    importResult: ImportResult,\n    organizationId: string,\n    importTarget: string\n  ) {\n    if (Utils.isNullOrWhitespace(importTarget)) {\n      return;\n    }\n\n    if (organizationId) {\n      const collectionViews: CollectionView[] = await this.collectionService.getAllDecrypted();\n      const targetCollection = collectionViews.find((c) => c.id === importTarget);\n\n      const noCollectionRelationShips: [number, number][] = [];\n      importResult.ciphers.forEach((c, index) => {\n        if (!Array.isArray(c.collectionIds) || c.collectionIds.length == 0) {\n          c.collectionIds = [targetCollection.id];\n          noCollectionRelationShips.push([index, 0]);\n        }\n      });\n\n      const collections: CollectionView[] = [...importResult.collections];\n      importResult.collections = [targetCollection];\n      collections.map((x) => {\n        const f = new CollectionView();\n        f.name = `${targetCollection.name}/${x.name}`;\n        importResult.collections.push(f);\n      });\n\n      const relationships: [number, number][] = [...importResult.collectionRelationships];\n      importResult.collectionRelationships = [...noCollectionRelationShips];\n      relationships.map((x) => {\n        importResult.collectionRelationships.push([x[0], x[1] + 1]);\n      });\n\n      return;\n    }\n\n    const folderViews = await this.folderService.getAllDecryptedFromState();\n    const targetFolder = folderViews.find((f) => f.id === importTarget);\n\n    const noFolderRelationShips: [number, number][] = [];\n    importResult.ciphers.forEach((c, index) => {\n      if (Utils.isNullOrEmpty(c.folderId)) {\n        c.folderId = targetFolder.id;\n        noFolderRelationShips.push([index, 0]);\n      }\n    });\n\n    const folders: FolderView[] = [...importResult.folders];\n    importResult.folders = [targetFolder];\n    folders.map((x) => {\n      const newFolderName = `${targetFolder.name}/${x.name}`;\n      const f = new FolderView();\n      f.name = newFolderName;\n      importResult.folders.push(f);\n    });\n\n    const relationships: [number, number][] = [...importResult.folderRelationships];\n    importResult.folderRelationships = [...noFolderRelationShips];\n    relationships.map((x) => {\n      importResult.folderRelationships.push([x[0], x[1] + 1]);\n    });\n  }\n}\n"],"names":["disabledByPolicy","this","_disabledByPolicy","constructor","cryptoService","i18nService","platformUtilsService","exportService","eventCollectionService","policyService","win","logService","userVerificationService","formBuilder","fileDownloadService","dialogService","onSaved","exportForm","group","format","secret","filePassword","required","confirmFilePassword","fileEncryptionType","AccountEncrypted","formatOptions","name","value","destroy$","Subject","ngOnInit","policyAppliesToActiveUser$","DisablePersonalVaultExport","pipe","takeUntil","subscribe","policyAppliesToActiveUser","disable","merge","get","valueChanges","startWith","adjustValidators","ngOnDestroy","next","encryptedFormat","doExport","formPromise","getExportData","data","downloadFile","saved","collectEvent","setValue","clearValidators","e","error","submit","showToast","t","warningDialog","verifyUser","message","openSimpleDialog","title","key","content","acceptButtonText","type","emit","FileEncrypted","getPasswordProtectedExport","getExport","getFileName","prefix","extension","collect","User_ClientExportedVault","reset","controls","enable","csv","fileName","download","blobData","blobOptions","ExportComponent","super","window","encryptedExportType","isFileEncryptedExport","markAllAsTouched","valid","confirmDescription","isAccountEncryptedExport","ref","confirmButtonText","modalTitle","firstValueFrom","closed","ImportErrorDialogComponent","dialogRef","dataSource","split","length","forEach","line","push","ImportSuccessDialogComponent","buildResultList","logins","cards","identities","secureNotes","ciphers","map","c","Login","Card","SecureNote","Identity","list","icon","count","folders","collections","FilePasswordPromptComponent","markAsTouched","close","ImportComponent","importService","router","syncService","folderService","collectionService","organizationService","organizationId","_importBlockedByPolicy","formGroup","vaultSelector","nonNullable","validators","targetSelector","fileContents","file","invalid","performImport","importBlockedByPolicy","onSuccessfulImport","navigate","setImportOptions","organizations$","concat","memberOrganizations$","orgs","sort","getSortFunction","combineLatest","PersonalOwnership","policyApplies","patchValue","collections$","asyncToObservable","getAllDecrypted","then","filter","c2","folders$","folderViews$","f","id","undefined","importer","getImporter","getFilePassword","files","document","getElementById","getFileContents","isAdmin","result","import","isUserAdmin","open","fullSync","getFormatInstructionTitle","results","featuredImportOptions","importOptions","o","regularImportOptions","a","b","collator","compare","localeCompare","setSelectedFile","event","fileInputEl","target","fileSelected","endsWith","extractZipContent","Promise","resolve","reject","reader","FileReader","readAsText","onload","evt","pre","DOMParser","parseFromString","querySelector","textContent","onerror","zipFile","contentFilePath","loadAsync","zip","async","dialog","ariaModal","lastValueFrom","complete","BoxRowDirective","elRef","el","nativeElement","formEls","Array","from","querySelectorAll","formEl","addEventListener","classList","add","remove","onClick","contains","tagName","toLowerCase","inputEl","click","focus","ExportScopeCalloutComponent","stateService","show","hasOrganizations","scopeConfig","description","scopeIdentifier","getEmail","ImportApiServiceAbstraction","ImportApiService","apiService","postImportCiphers","request","send","postImportOrganizationCiphers","ImportServiceAbstraction","ImportCiphersRequest","folderRelationships","ImportOrganizationCiphersRequest","collectionRelationships","KvpRequest","CollectionWithIdRequest","collection","success","newLineRegex","passwordFieldNames","usernameFieldNames","notesFieldNames","uriFieldNames","parseCsvOptions","encoding","skipEmptyLines","organization","parseXml","doc","parseCsv","header","options","parseOptions","Object","assign","splitNewLine","join","trim","errors","row","warning","parseSingleRowCsv","rowData","isNullOrWhitespace","parsedRow","makeUriArray","uri","loginUri","fixUri","match","returnArr","u","indexOf","substring","nameFromUrl","url","hostname","getHostname","startsWith","replace","str","getValueOrDefault","defaultValue","setCardExpiration","cipher","expiration","expiryRegex","RegExp","expiryMatch","card","expMonth","groups","month","year","expYear","moveFoldersToCollections","r","querySelectorDirectChild","parentEl","query","els","querySelectorAllDirectChild","parentNode","initLoginCipher","favorite","notes","fields","login","cleanupCipher","passwordHistory","processKvp","Text","search","field","processFolder","folderName","folderIndex","addFolder","i","convertToNoteIfNeeded","username","password","uris","secureNote","Generic","processFullName","fullName","nameParts","identity","firstName","lastName","middleName","slice","AscendoCsvImporter","parse","val","fieldLower","AvastCsvImporter","web","AvastJsonImporter","JSON","custName","note","pwd","loginName","label","text","cardholderName","holderName","number","cardNumber","code","cvv","brand","getCardBrandByPatterns","expirationDate","AviraCsvImporter","website","secondary_username","BlackBerryCsvImporter","grouping","fav","extra","ChromeCsvImporter","androidPatternRegex","test","BitwardenCsvImporter","col","addCollection","collectionIndex","folder","reprompt","parseInt","None","toString","console","delimPosition","lastIndexOf","substr","totp","login_totp","login_username","login_password","login_uri","BitwardenJsonImporter","cipherService","items","encrypted","parseEncrypted","parseDecrypted","encKeyValidation_DO_NOT_EDIT","orgKey","getOrgKey","encKeyValidation","decryptToUtf8","errorMessage","groupingsMap","parseCollections","parseFolders","toDomain","collectionIds","folderId","has","cId","view","decrypt","getKeyForCipherKeyDecryption","toView","Map","folderView","set","collectionView","BitwardenPasswordProtectedImporter","promptForPassword_callback","parsedData","passwordProtected","cannotParseFile","checkPassword","encData","clearTextData","jdoc","makePinKey","salt","kdfType","kdfIterations","kdfMemory","kdfParallelism","BlurCsvImporter","domain","email","OfficialProps","ButtercupCsvImporter","URL","processingCustomFields","prop","hasOwnProperty","ClipperzHtmlImporter","textarea","entry","currentVersion","property","actionType","labelLower","CodebookCsvImporter","Category","Favorite","Entry","Note","Username","Email","Password","TOTP","Website","Phone","PIN","Account","Date","_mappedCredentialsColumns","Set","_mappedPersonalInfoAsIdentityColumns","_mappedSecureNoteColumns","DashlaneCsvImporter","x","parsePersonalInformationRecordAsIdentity","rowKeys","keys","category","parseCredentialsRecord","parsePaymentRecord","parseIdRecord","parsePersonalInformationRecord","parseSecureNoteRecords","otpSecret","importUnmappedFields","account_name","mappedValues","cc_number","expiration_month","expiration_year","account_holder","account_number","licenseNumber","passportNumber","state","ssn","first_name","middle_name","last_name","item_name","dataRow","phone","phone_number","address1","address","city","postalCode","country","item","HandledResults","DashlaneJsonImporter","ADDRESS","processAddress","AUTHENTIFIANT","processAuth","BANKSTATEMENT","processNote","IDCARD","PAYMENTMEANS_CREDITCARD","processCard","IDENTITY","processIdentity","credential","secondaryLogin","obj","pseudo","addressName","addressFull","zipcode","toUpperCase","bank","owner","nameProperty","EncryptrCsvImporter","Label","Notes","CVV","expiry","Expiry","expParts","EnpassCsvImporter","firstRow","containsField","fieldValue","fieldName","fieldNameLower","androidUrlRegex","EnpassJsonImporter","foldersMap","foldersIndexMap","folderTree","buildFolderTree","flattenFolderTree","template_type","processLogin","some","urls","cleanedValue","sensitive","Hidden","uuid","children","parent_uuid","titlePrefix","tree","FirefoxCsvImporter","FskEntryTypesEnum","FSecureFskImporter","parseEntry","service","handleLoginEntry","CreditCard","handleCreditCardEntry","creditNumber","creditCvv","creditExpiry","GnomeJsonImporter","keyRing","display_name","attributes","username_value","attr","NotesHeader","ApplicationsHeader","WebsitesHeader","Delimiter","KasperskyTxtImporter","notesData","applicationsData","websitesData","workingData","parts","parseDataCategory","applications","websites","n","w","nameKey","p","itemComment","itemCommentKey","l","colonIndex","size","KeePass2XmlImporter","KeePassFileNode","RootNode","rootGroup","traverse","node","isRootNode","groupPrefixName","groupName","nameEl","cipherIndex","entryString","valueEl","keyEl","attrs","ProtectInMemory","KeePassXCsvImporter","Title","Group","KeeperCsvImporter","LastPassCsvImporter","hasFolder","buildBaseCipher","parseSecureNote","parseCard","parseIdentity","ccnum","cardCipher","profilename","firstname","lastname","ccname","cccsc","ccexp","ccexpParts","middlename","company","address2","address3","charAt","extraParts","processedNote","typeParts","mappedData","parseSecureNoteMapping","Number","monthString","getMonth","isNaN","Company","State","Country","dataObj","processingNotes","extraPart","LogMeOnceCsvImporter","MeldiumCsvImporter","DisplayName","UserName","Url","MSecureCsvImporter","mappedBaseColumns","_mappedUserAccountColumns","_mappedCreditCardColumns","_mappedIdentityColumns","_mappedIdCardColumns","_mappedTwoFaColumns","_mappedUserNoteColumns","MykiCsvImporter","nickname","additionalInfo","twofaSecret","authToken","cardName","exp_month","exp_year","firstAddressLine","secondAddressLine","zipCode","idType","idName","idCountry","idNumber","NordPassCsvImporter","record","recordType","evaluateType","cardholdername","cardnumber","cvc","expirydate","full_name","CategoryEnum","LoginFieldTypeEnum","OnePassword1PifImporter","trashed","hmac","processStandardItem","processWinOpVaultItem","overview","URLs","details","parsePasswordHistory","notesPlain","parseFields","sections","section","openContents","faveIndex","typeName","location","secureContents","maxSize","h","time","ph","lastUsedDate","designationKey","valueKey","k","toUTCString","fieldDesignation","street","fieldType","OnePassword1PuxImporter","accounts","vaults","vault","categoryUuid","Database","WirelessRouter","Server","API_Credential","BankAccount","SoftwareLicense","EmailAccount","MedicalRecord","DriversLicense","OutdoorLicense","Membership","Passport","RewardsProgram","SocialSecurityNumber","favIndex","processOverview","processLoginFields","processDetails","processSections","tags","capitalize","inputString","loginFields","loginField","designation","CheckBox","Boolean","parseSectionFields","anyField","getFieldName","extractValue","fillLogin","fillApiCredentials","fillCreditCard","fillBankAccount","fillIdentity","fillDriversLicense","fillOutdoorLicense","fillMembership","fillPassport","fillRewardsProgram","fillSSN","email_address","provider","guarded","date","monthYear","historyItems","CipherImportContext","importRecord","lowerProperty","IgnoredProperties","OnePasswordCsvImporter","loginPropertyParsers","setLoginUsername","setLoginPassword","setLoginUris","creditCardPropertyParsers","setCreditCardNumber","setCreditCardVerification","setCreditCardCardholderName","setCreditCardExpiry","identityPropertyParsers","setIdentityFirstName","setIdentityInitial","setIdentityLastName","setIdentityUserName","setIdentityEmail","setIdentityPhone","setIdentityCompany","quoteChar","escapeChar","getProp","setNotes","setCipherType","altUsername","context","setKnownLoginValue","setKnownCreditCardValue","setKnownIdentityValue","setUnknownValue","entries","reduce","agg","getPropByRegexp","regexp","matchingKeys","getPropIncluding","includesMap","includes","func","bind","readableDate","OnePasswordMacCsvImporter","OnePasswordWinCsvImporter","setIdentityAddress","expSplit","PadlockCsvImporter","headers","v","tag","PassKeepCsvImporter","getValue","PasskyJsonImporter","passkyExport","passwords","PassmanJsonImporter","otp","custom_fields","customField","field_type","PasspackCsvImporter","tagsJson","Tags","tagJson","__parsed_extra","fieldsJson","extraFields","fieldJson","PasswordAgentCsvImporter","newVersion","altFormat","PasswordBossJsonImporter","login_url","identifiers","valObj","expDate","getFullYear","cf","PasswordDragonXmlImporter","records","categoryText","accountName","userId","PasswordSafeXmlImporter","passwordSafe","notesDelimiter","getAttribute","groupText","PasswordWalletTxtImporter","ProtonPassItemState","ProtonPassJsonImporter","TRASHED","metadata","loginContent","totpUri","searchParams","extraField","creditCardContent","verificationNumber","pin","PsonoJsonImporter","WEBSITE_mappedValues","APP_PWD_mappedValues","BOOKMARK_mappedValues","NOTES_mappedValues","TOTP_mappedValues","ENV_VARIABLES_mappedValues","GPG_mappedValues","psonoExport","handleItemParsing","parsePsonoItem","parseWebsiteLogins","parseApplicationPasswords","parseEnvironmentVariables","parseTOTP","parseBookmarks","parseNotes","website_password_title","website_password_notes","website_password_username","website_password_password","website_password_url","website_password_auto_submit","website_password_url_filter","application_password_title","application_password_notes","application_password_username","application_password_password","bookmark_title","bookmark_notes","bookmark_url","note_title","note_notes","totp_title","totp_notes","totp_code","environment_variables_title","environment_variables_notes","environment_variables_variables","KvPair","parseGPG","mail_gpg_own_key_title","mail_gpg_own_key_public","mail_gpg_own_key_name","mail_gpg_own_key_email","mail_gpg_own_key_private","RememBearCsvImporter","trash","cardholder","verification","expiryMonth","expMonthNumber","expiryYear","expYearNumber","RoboFormCsvImporter","Folder","Name","Pwd","Rf_fields","SafariCsvImporter","OTPAuth","SafeInCloudXmlImporter","labelEl","cardEl","labelIdEl","labelId","fieldEl","notesEl","setPassword","candidates","choice","SaferPassCsvImporter","SecureSafeCsvImporter","Comment","SplashIdCsvImporter","parseFieldsToNotes","startIndex","StickyPasswordXmlImporter","loginNodes","loginNode","accountId","usernameText","passwordText","titleText","linkText","notesText","groupId","accountLogin","account","parentElement","buildGroupText","PropertiesToIgnore","TrueKeyCsvImporter","memo","kind","expiryDate","document_content","UpmCsvImporter","YotiCsvImporter","ZohoVaultCsvImporter","ChamberName","parseData","SecretData","CustomData","ImportService","importApiService","getImportOptions","selectedImportTarget","importResult","SyntaxError","Error","halfway","Math","floor","last","badData","isArray","setImportTarget","handleOrganizationalImport","handleIndividualImport","errorResponse","handleServerError","getImporterInstance","encrypt","validationErrors","index","itemType","importTarget","targetCollection","find","noCollectionRelationShips","relationships","targetFolder","getAllDecryptedFromState","noFolderRelationShips","isNullOrEmpty","newFolderName"],"sourceRoot":""}