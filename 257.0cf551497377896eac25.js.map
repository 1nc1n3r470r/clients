{"version":3,"file":"257.0cf551497377896eac25.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/sm-shared.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/layout.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/layout.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/secrets-manager-logo.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-base.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-item.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-item.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-divider.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-divider.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-group.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-group.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/org-switcher.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/org-switcher.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/navigation.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/navigation.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/project.view.ts","webpack://@bitwarden/web-vault/../../libs/components/src/dialog/directives/dialog-close.directive.ts","webpack://@bitwarden/web-vault/../../libs/components/src/dialog/dialog/dialog.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/dialog/dialog/dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/dialogs/bulk-status-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/dialogs/bulk-status-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/project-list.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/models/requests/project.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/models/responses/project-list-item.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/models/responses/project.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project.service.ts","webpack://@bitwarden/web-vault/../../libs/components/src/async-actions/bit-submit.directive.ts","webpack://@bitwarden/web-vault/../../libs/components/src/async-actions/form-button.directive.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/secret-project.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/secret.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/secret-list.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/requests/secret.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret-project.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret-list-item.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret-with-projects-list.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secret.service.ts","webpack://@bitwarden/web-vault/../../libs/components/src/tabs/tab-group/tab-label.directive.ts","webpack://@bitwarden/web-vault/../../libs/components/src/tabs/tab-group/tab.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/tabs/tab-group/tab.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/tabs/tab-group/tab-body.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/tabs/tab-group/tab-group.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/tabs/tab-group/tab-body.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/tabs/tab-group/tab-group.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/service-account.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/requests/service-account.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/responses/service-account.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-account.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/new-menu.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/header.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/new-menu.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/header.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-delete.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-delete.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/no-items.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/secrets-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/no-items.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/secrets-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-secrets.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-secrets.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-delete-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-delete-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects-list/projects-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects-list/projects-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects/projects.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects/projects.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/requests/access-token.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/responses/access-token-creation.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/responses/access-tokens.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/view/access-token.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/expiration-options.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/expiration-options.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-create-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-create-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-tokens.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-tokens.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-account.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-account.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/sm.guard.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/sm-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets-manager.module.ts"],"sourcesContent":["import { NgModule } from \"@angular/core\";\n\nimport { ProductSwitcherModule } from \"@bitwarden/web-vault/app/layouts/product-switcher/product-switcher.module\";\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared\";\n\nimport { BulkStatusDialogComponent } from \"../layout/dialogs/bulk-status-dialog.component\";\nimport { HeaderComponent } from \"../layout/header.component\";\nimport { NewMenuComponent } from \"../layout/new-menu.component\";\nimport { NoItemsComponent } from \"../layout/no-items.component\";\n\nimport { SecretsListComponent } from \"./secrets-list.component\";\n\n@NgModule({\n  imports: [SharedModule, ProductSwitcherModule],\n  exports: [\n    SharedModule,\n    BulkStatusDialogComponent,\n    HeaderComponent,\n    NewMenuComponent,\n    NoItemsComponent,\n    SecretsListComponent,\n  ],\n  declarations: [\n    BulkStatusDialogComponent,\n    HeaderComponent,\n    NewMenuComponent,\n    NoItemsComponent,\n    SecretsListComponent,\n  ],\n  providers: [],\n  bootstrap: [],\n})\nexport class SecretsManagerSharedModule {}\n","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-layout\",\n  templateUrl: \"./layout.component.html\",\n})\nexport class LayoutComponent implements OnInit {\n  ngOnInit() {\n    document.body.classList.remove(\"layout_frontend\");\n  }\n}\n","<div class=\"tw-flex tw-w-full\">\n  <aside class=\"tw-min-h-screen tw-w-60 tw-bg-background-alt3\">\n    <router-outlet name=\"sidebar\"></router-outlet>\n  </aside>\n  <main class=\"tw-min-h-screen tw-flex-1 tw-bg-background-alt tw-p-6\">\n    <router-outlet></router-outlet>\n  </main>\n</div>\n","import { svgIcon } from \"@bitwarden/components\";\n\nexport const SecretsManagerLogo = svgIcon`\n  <svg viewBox=\"0 0 197 51\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M51.865 10.157c-1.299-1.814-3.066-2.684-5.338-2.684-2.38 0-4.22.98-5.41 2.866H40.9c.145-1.742.217-3.011.217-3.81V.944a.648.648 0 0 0-.65-.653h-3.895c-.36 0-.649.29-.649.653v25.502c0 .363.289.653.65.653h2.885a.667.667 0 0 0 .613-.4l.685-1.704h.36c1.3 1.669 3.03 2.467 5.303 2.467 2.272 0 4.075-.835 5.41-2.612 1.334-1.741 1.983-4.208 1.983-7.4 0-3.084-.649-5.514-1.947-7.292Zm-9.846 2.757c.613-.798 1.587-1.197 2.849-1.197 1.082 0 1.983.472 2.633 1.415.613.943.938 2.358.938 4.244 0 1.85-.325 3.337-.938 4.317-.613 1.016-1.515 1.523-2.561 1.523-1.334 0-2.308-.471-2.921-1.342-.614-.87-.902-2.358-.902-4.425v-.58c0-1.815.324-3.157.902-3.955ZM58.5 27.134h3.896c.36 0 .685-.363.649-.689V8.525a.648.648 0 0 0-.65-.653H58.5c-.36 0-.649.29-.649.653V26.48c0 .363.289.653.65.653Zm20.883-4.317c-1.082.29-1.983.436-2.74.436-.65 0-1.227-.182-1.588-.58-.397-.327-.613-.908-.613-1.633v-9.214h4.905a.418.418 0 0 0 .433-.435V8.126c0-.11-.108-.218-.216-.218h-5.158V4.244a.418.418 0 0 0-.433-.435h-2.597c-.18 0-.324.109-.396.29l-1.407 3.773-2.85 1.705a.13.13 0 0 1-.017.054.13.13 0 0 0-.018.055v1.705c0 .254.18.435.432.435h2.056v9.25c0 2.104.505 3.7 1.443 4.752.938 1.089 2.453 1.596 4.544 1.596 1.732 0 3.282-.253 4.509-.761a.446.446 0 0 0 .252-.4v-3.01c0-.29-.252-.508-.54-.436Zm20.414 3.52c.217.47.614.797 1.119.797h.144c.541 0 .974-.326 1.118-.834l4.544-16.868a.825.825 0 0 0-.793-1.052.847.847 0 0 0-.794.616l-2.705 10.121c-.829 3.265-1.262 5.296-1.37 6.022h-.108c-.181-.907-.686-2.648-1.515-5.369l-3.39-10.665a1.051 1.051 0 0 0-1.01-.725c-.505 0-.902.29-1.046.725l-3.643 10.738c-.325.907-.83 2.684-1.479 5.369h-.108c-.217-1.306-.686-3.265-1.37-5.95L84.577 8.996a.845.845 0 0 0-.794-.616h-.108c-.577 0-.974.544-.83 1.052l4.8 16.868c.144.508.577.834 1.082.834.505 0 .938-.29 1.082-.762l3.931-11.717.757-2.466.361-1.306h.108l.282 1.065a87.39 87.39 0 0 0 .728 2.671l3.823 11.717Zm21.893.217c.036.326.325.58.65.58.36 0 .685-.363.721-.58v-11.79c0-2.213-.505-3.918-1.515-4.97-1.046-1.088-2.561-1.632-4.617-1.632-1.803 0-3.57.4-5.374 1.125-.396.145-.577.616-.396 1.015.18.4.649.58 1.046.4 1.587-.762 3.101-1.125 4.616-1.125 1.587 0 2.705.435 3.463 1.342.757.907 1.118 2.213 1.118 4.027v1.233l-3.535.109c-2.921 0-5.085.616-6.636 1.632-1.515 1.052-2.309 2.866-2.164 4.752.072 1.415.577 2.54 1.478 3.374 1.01.943 2.417 1.415 4.256 1.415 1.335 0 2.525-.218 3.499-.726 1.01-.508 1.948-1.378 2.885-2.575h.181l.324 2.394Zm-2.128-2.358c-1.118 1.124-2.669 1.705-4.688 1.705-1.299 0-2.309-.327-3.102-.87-.685-.654-1.046-1.597-1.046-2.758 0-1.45.577-2.575 1.695-3.264 1.154-.69 2.994-1.125 5.627-1.234l3.246-.145v1.814c0 1.995-.578 3.627-1.732 4.752Zm18.359-16.07a14.21 14.21 0 0 0-1.696-.11c-1.226 0-2.272.291-3.101.872-.866.544-1.695 1.523-2.453 2.902h-.108l-.144-2.685c0-.399-.325-.689-.722-.689a.726.726 0 0 0-.721.725v17.05c0 .472.361.834.829.834.469 0 .83-.362.83-.834v-9.504c0-2.032.505-3.773 1.515-5.115 1.01-1.342 2.308-2.031 3.895-2.031.541 0 1.082.072 1.623.145.433.072.866-.182.938-.617a.818.818 0 0 0-.685-.943Zm14.499.616c-.974-.471-2.164-.725-3.499-.725-2.597 0-4.544.87-5.915 2.43-1.37 1.742-2.02 4.208-2.02 7.437 0 3.083.722 5.405 2.056 7.037 1.407 1.633 3.318 2.43 5.915 2.43 2.633 0 4.689-1.051 6.096-3.191h.144l.361 2.357c.036.327.288.545.577.545a.572.572 0 0 0 .577-.58V1.124a.819.819 0 0 0-.83-.835.818.818 0 0 0-.829.835v5.912c0 1.379.036 2.757.108 4.245h-.108c-.758-1.197-1.623-2.068-2.633-2.54Zm-8.115 3.011c1.046-1.45 2.56-2.176 4.616-2.176 2.164 0 3.715.617 4.653 1.922 1.01 1.234 1.479 3.301 1.479 6.204v.29c0 2.83-.469 4.86-1.479 6.094-.974 1.233-2.489 1.85-4.617 1.85-4.111 0-6.167-2.648-6.167-7.944 0-2.757.505-4.825 1.515-6.24Zm19.873 13.168c1.551 1.705 3.642 2.54 6.348 2.54 1.082 0 2.055-.073 2.957-.327a12.269 12.269 0 0 0 2.453-.725.745.745 0 0 0 .469-.69c0-.507-.505-.87-.974-.689-.83.29-1.515.472-2.092.58-.794.146-1.768.218-2.813.218-2.201 0-3.86-.616-5.05-1.995-1.19-1.378-1.767-3.337-1.803-5.913h13.417v-1.378c0-2.648-.613-4.752-1.912-6.276-1.226-1.524-2.993-2.285-5.157-2.285-2.489 0-4.437.907-5.915 2.72-1.479 1.778-2.201 4.172-2.201 7.183 0 3.01.758 5.369 2.273 7.037Zm1.515-13.603c1.082-1.197 2.524-1.777 4.328-1.777 1.659 0 2.957.616 3.895 1.813.938 1.197 1.407 2.939 1.407 5.079h-11.542c.216-2.213.829-3.954 1.912-5.115ZM195.305 26.3c0 .471.36.834.829.834.433 0 .83-.399.866-.907v-11.39c0-4.571-2.128-6.856-6.348-6.856-3.102 0-5.23.98-6.456 2.938h-.108l-.217-1.886c-.072-.363-.36-.653-.757-.653a.741.741 0 0 0-.757.761v17.086c0 .472.36.835.829.835s.83-.363.83-.835v-9.504c0-2.503.577-4.353 1.587-5.477 1.01-1.161 2.633-1.705 4.869-1.705 1.659 0 2.849.471 3.679 1.305.757.835 1.154 2.213 1.154 4.1V26.3ZM57.419 2.938C57.42 1.306 58.79 0 60.485 0c1.66 0 3.066 1.306 3.066 2.975v.254c0 1.596-1.407 2.938-3.066 2.938-1.66 0-3.066-1.342-3.066-2.938v-.29ZM23.444.29c.324 0 .613.109.865.363.253.254.361.58.325.87v14.874a8.961 8.961 0 0 1-.65 3.3 13.06 13.06 0 0 1-1.586 2.903c-.65.87-1.407 1.668-2.272 2.466a24.748 24.748 0 0 1-2.453 1.996 51.494 51.494 0 0 1-2.344 1.487 32.79 32.79 0 0 1-1.355.758 23.51 23.51 0 0 0-.34.185l-.268.137a4.32 4.32 0 0 1-.562.262 1.147 1.147 0 0 1-.505.109c-.18 0-.36-.036-.505-.109a3.58 3.58 0 0 0-.324-.163c-.14-.066-.3-.141-.47-.236-.324-.145-.901-.471-1.695-.943-.793-.472-1.623-.98-2.344-1.487-.757-.508-1.587-1.197-2.453-1.995A16 16 0 0 1 2.236 22.6c-.649-.835-1.154-1.814-1.587-2.902A8.96 8.96 0 0 1 0 16.397V1.524c0-.29.108-.617.36-.871C.614.399.867.29 1.227.29h22.218Zm-11.109 26.3s9.125-4.643 9.125-10.048V3.482h-9.125V26.59Zm75.793 17.845a4.55 4.55 0 0 1-.8.07c-.404 0-.73-.12-.975-.36-.247-.24-.37-.606-.37-1.098v-5.203h2.786V36.27h-2.786v-2.162h-1.3l-.677 2.083-1.424.73v.923h1.327v5.23c0 .796.13 1.42.387 1.871.258.452.606.77 1.046.958.44.182.934.273 1.485.273.393 0 .77-.035 1.134-.106.363-.07.66-.155.888-.255v-1.564c-.217.07-.457.132-.721.184Zm-44.578.405c.31-.44.466-.979.466-1.617 0-.557-.115-1.011-.343-1.363-.229-.351-.557-.647-.985-.887a10.38 10.38 0 0 0-1.503-.703 24.399 24.399 0 0 1-1.388-.59c-.328-.157-.56-.316-.694-.474a.864.864 0 0 1-.203-.58c0-.305.138-.54.413-.703.282-.164.689-.246 1.222-.246.457 0 .905.064 1.345.193.445.123.888.281 1.327.475l.65-1.556a8.024 8.024 0 0 0-1.564-.519 7.414 7.414 0 0 0-1.688-.184c-1.124 0-2.03.226-2.715.677-.68.445-1.02 1.098-1.02 1.96 0 .545.108.993.325 1.344.217.346.536.642.958.888.422.246.94.492 1.556.738.627.252 1.101.47 1.424.65.328.176.55.35.668.52a.913.913 0 0 1 .184.562c0 .357-.15.644-.448.861-.299.211-.788.316-1.468.316a6.262 6.262 0 0 1-1.643-.237 9.817 9.817 0 0 1-1.556-.562v1.784c.434.2.894.346 1.38.44a9.03 9.03 0 0 0 1.758.149c.861 0 1.588-.111 2.18-.334.597-.229 1.051-.563 1.362-1.002Zm8.806-8.218c-.62-.357-1.365-.536-2.232-.536-.89 0-1.67.2-2.338.598-.668.398-1.186.978-1.556 1.74-.369.761-.553 1.687-.553 2.777 0 1.096.202 2.013.606 2.751a4.05 4.05 0 0 0 1.697 1.67c.726.37 1.567.554 2.522.554.703 0 1.307-.053 1.81-.158a6.729 6.729 0 0 0 1.486-.501v-1.68a9.269 9.269 0 0 1-1.538.537 7.233 7.233 0 0 1-1.67.176c-.873 0-1.553-.255-2.04-.765-.48-.51-.732-1.236-.755-2.18h6.495v-1.107c0-.914-.167-1.7-.5-2.355a3.592 3.592 0 0 0-1.434-1.52Zm-3.814 1.652c.404-.422.932-.632 1.582-.632.486 0 .885.105 1.195.316.317.21.551.504.703.879.159.375.24.806.247 1.292h-4.43c.07-.814.305-1.433.703-1.855Zm11.997 7.902c-.92 0-1.717-.179-2.39-.536-.674-.358-1.193-.906-1.556-1.644-.364-.738-.545-1.676-.545-2.812 0-1.184.2-2.15.597-2.9.399-.75.95-1.304 1.653-1.662.709-.357 1.52-.536 2.434-.536.58 0 1.105.059 1.574.176a5.53 5.53 0 0 1 1.204.413l-.615 1.652a8.97 8.97 0 0 0-1.1-.369c-.374-.1-.735-.15-1.08-.15-.569 0-1.043.127-1.424.379-.375.252-.656.627-.844 1.125-.181.498-.272 1.116-.272 1.854 0 .715.094 1.318.281 1.81.188.487.466.856.835 1.108.37.246.823.37 1.362.37.534 0 1.011-.065 1.433-.194a6.35 6.35 0 0 0 1.195-.501v1.793a4.43 4.43 0 0 1-1.186.466c-.422.105-.94.158-1.556.158Zm10.494-10.064a5.945 5.945 0 0 0-.536-.026c-.445 0-.855.088-1.23.264-.37.17-.698.398-.985.685a4.322 4.322 0 0 0-.72.95h-.097l-.281-1.715h-1.618V46h2.075v-5.089c0-.48.073-.902.22-1.266a2.486 2.486 0 0 1 1.493-1.45 3.027 3.027 0 0 1 1.055-.184c.14 0 .299.008.475.026.181.018.334.044.457.08l.193-1.934a4.487 4.487 0 0 0-.5-.07Zm6.179-.026c.867 0 1.611.179 2.232.536a3.592 3.592 0 0 1 1.433 1.52c.334.657.5 1.442.5 2.356v1.108h-6.494c.023.943.275 1.67.756 2.18.486.509 1.166.764 2.039.764.62 0 1.178-.059 1.67-.176a9.265 9.265 0 0 0 1.538-.536v1.679a6.726 6.726 0 0 1-1.486.5c-.504.106-1.107.159-1.81.159-.955 0-1.796-.185-2.523-.554a4.05 4.05 0 0 1-1.696-1.67c-.404-.738-.606-1.655-.606-2.75 0-1.09.184-2.017.553-2.778.37-.762.888-1.342 1.556-1.74.668-.399 1.447-.598 2.338-.598Zm0 1.556c-.65 0-1.178.21-1.582.632-.399.422-.633 1.04-.703 1.855h4.43a3.406 3.406 0 0 0-.247-1.292 1.874 1.874 0 0 0-.703-.879c-.31-.21-.709-.316-1.195-.316Zm20.153 5.58c0 .64-.155 1.178-.466 1.618-.31.44-.764.773-1.362 1.002-.592.223-1.318.334-2.18.334-.68 0-1.265-.05-1.757-.15a6.026 6.026 0 0 1-1.38-.44v-1.783a9.78 9.78 0 0 0 1.555.562c.58.158 1.128.237 1.644.237.68 0 1.169-.105 1.468-.316.299-.217.448-.504.448-.861a.913.913 0 0 0-.185-.563c-.117-.17-.34-.343-.668-.518-.322-.182-.796-.399-1.423-.65a11.873 11.873 0 0 1-1.556-.739c-.422-.246-.741-.542-.958-.888-.217-.351-.325-.8-.325-1.344 0-.862.34-1.515 1.02-1.96.685-.451 1.59-.677 2.715-.677.598 0 1.16.062 1.688.184.533.118 1.054.29 1.564.52l-.65 1.555a9.737 9.737 0 0 0-1.328-.475 4.754 4.754 0 0 0-1.344-.193c-.533 0-.94.082-1.222.246-.275.164-.413.398-.413.703 0 .229.067.422.202.58.135.158.366.316.695.475a24.9 24.9 0 0 0 1.388.589c.58.222 1.081.457 1.503.703.428.24.756.536.984.887.229.352.343.806.343 1.363Zm14.379-6.16c-.533-.534-1.26-.8-2.18-.8-.767 0-1.423.16-1.968.483-.539.322-.938.77-1.196 1.345h-.061c-.188-.604-.522-1.058-1.002-1.363-.475-.31-1.055-.465-1.74-.465-.528 0-.988.082-1.38.246a3.041 3.041 0 0 0-.976.641 3.435 3.435 0 0 0-.633.862h-.052l-.132-1.565h-.72V46h.887v-5.537c0-.78.117-1.421.351-1.925.235-.51.569-.885 1.002-1.125.434-.246.947-.37 1.538-.37.446 0 .832.095 1.161.282.328.182.583.463.764.844.188.375.281.858.281 1.45V46h.879v-5.66c0-1.137.255-1.969.765-2.496.516-.534 1.228-.8 2.136-.8.662 0 1.195.208 1.599.624.405.416.607 1.066.607 1.951V46h.87v-6.416c0-1.149-.267-1.99-.8-2.523Zm7.207-.783c1.049 0 1.834.264 2.356.791.521.528.782 1.368.782 2.523V46h-.686l-.158-1.67h-.053a4.255 4.255 0 0 1-.747.958 3.149 3.149 0 0 1-1.081.65c-.422.159-.937.238-1.547.238-.615 0-1.142-.103-1.582-.308a2.316 2.316 0 0 1-1.01-.896c-.235-.393-.352-.87-.352-1.433 0-.95.393-1.67 1.178-2.162.785-.498 1.913-.78 3.384-.844l1.775-.088v-.694c0-.978-.193-1.676-.58-2.092-.387-.416-.958-.624-1.714-.624-.492 0-.967.065-1.424.194a7.533 7.533 0 0 0-1.38.536l-.281-.739a8.697 8.697 0 0 1 1.468-.536 6.384 6.384 0 0 1 1.652-.21Zm2.25 4.86-1.67.071c-1.213.059-2.135.275-2.768.65s-.95.938-.95 1.688c0 .603.188 1.066.563 1.389.381.322.908.483 1.582.483 1.049 0 1.849-.299 2.399-.897.557-.597.838-1.412.844-2.443v-.94Zm10.635-4.034c-.574-.562-1.398-.843-2.47-.843-.574 0-1.078.088-1.512.263-.433.17-.799.402-1.098.695-.293.287-.525.61-.694.967h-.053l-.132-1.74h-.721V46h.888v-5.265c0-1.236.275-2.159.826-2.768.557-.615 1.359-.923 2.408-.923.826 0 1.456.223 1.89.668.434.445.65 1.142.65 2.092V46h.879v-6.249c0-1.201-.287-2.083-.861-2.645Zm7.295-.826c1.049 0 1.834.264 2.355.791.522.528.783 1.368.783 2.523V46h-.686l-.158-1.67h-.053a4.255 4.255 0 0 1-.747.958 3.149 3.149 0 0 1-1.081.65c-.422.159-.938.238-1.547.238-.615 0-1.143-.103-1.582-.308a2.318 2.318 0 0 1-1.011-.896c-.234-.393-.351-.87-.351-1.433 0-.95.392-1.67 1.177-2.162.786-.498 1.914-.78 3.384-.844l1.776-.088v-.694c0-.978-.194-1.676-.58-2.092-.387-.416-.958-.624-1.714-.624-.492 0-.967.065-1.424.194a7.533 7.533 0 0 0-1.38.536l-.281-.739a8.697 8.697 0 0 1 1.468-.536 6.384 6.384 0 0 1 1.652-.21Zm2.25 4.86-1.67.071c-1.213.059-2.136.275-2.769.65-.632.375-.949.938-.949 1.688 0 .603.188 1.066.563 1.389.381.322.908.483 1.582.483 1.049 0 1.848-.299 2.399-.897.557-.597.838-1.412.844-2.443v-.94Zm3.682 8.49c.668.464 1.603.695 2.804.695 1.512 0 2.678-.275 3.498-.826.826-.55 1.239-1.327 1.239-2.33 0-.82-.275-1.44-.826-1.862-.55-.422-1.344-.633-2.382-.633h-1.678c-.322 0-.595-.032-.818-.097a1.18 1.18 0 0 1-.509-.29.7.7 0 0 1-.176-.492c0-.316.094-.58.281-.791.188-.217.46-.43.817-.642.282.053.569.08.862.08 1.066 0 1.898-.279 2.496-.836.598-.556.896-1.31.896-2.258a3.313 3.313 0 0 0-.773-2.145l1.969-.132v-.633h-3.085a2.296 2.296 0 0 0-.396-.096 3.716 3.716 0 0 0-.483-.062 8.395 8.395 0 0 0-.571-.017c-.692 0-1.292.132-1.802.395a2.783 2.783 0 0 0-1.169 1.099c-.276.474-.413 1.034-.413 1.679 0 .673.158 1.25.474 1.731.317.475.75.812 1.301 1.01-.41.241-.718.505-.923.792a1.52 1.52 0 0 0-.307.914c0 .293.085.55.255.773.175.223.401.399.676.528-.691.093-1.239.372-1.643.835a2.47 2.47 0 0 0-.607 1.67c0 .831.331 1.479.993 1.942Zm4.958-.324c-.557.181-1.254.272-2.092.272-.961 0-1.694-.167-2.198-.5-.498-.329-.747-.812-.747-1.451 0-.498.109-.896.326-1.195.222-.3.533-.516.931-.65a4.076 4.076 0 0 1 1.363-.212h1.599c.51 0 .952.047 1.327.141.375.088.665.249.87.483.205.235.308.566.308.994 0 .521-.141.958-.422 1.31-.281.356-.703.626-1.265.808Zm.008-8.174c-.422.398-1.028.597-1.819.597-.809 0-1.418-.199-1.828-.597-.41-.404-.615-.97-.615-1.696 0-.78.213-1.383.641-1.811.434-.434 1.029-.65 1.784-.65.78 0 1.386.202 1.82.606.433.404.65 1.01.65 1.82 0 .755-.211 1.332-.633 1.73Zm8.28-4.87c.814 0 1.491.191 2.03.572.545.38.949.902 1.213 1.565.269.662.404 1.42.404 2.276v.641h-6.899c0 1.313.301 2.32.905 3.024.609.703 1.479 1.055 2.61 1.055a7.35 7.35 0 0 0 1.538-.141c.44-.1.926-.267 1.459-.501v.817a6.538 6.538 0 0 1-1.406.457c-.469.1-1.008.15-1.617.15-.967 0-1.778-.2-2.435-.598a3.82 3.82 0 0 1-1.476-1.705c-.328-.732-.492-1.588-.492-2.566 0-.955.158-1.814.474-2.576.322-.761.791-1.362 1.406-1.801.622-.446 1.383-.668 2.286-.668Zm-.009.765c-.914 0-1.655.305-2.224.914-.562.604-.893 1.477-.993 2.62h5.95c0-.698-.099-1.313-.299-1.846-.199-.533-.501-.946-.905-1.24-.398-.298-.908-.448-1.529-.448Zm10.802-.703a5.468 5.468 0 0 0-.712-.044c-.487 0-.92.088-1.301.264a2.983 2.983 0 0 0-.976.712 3.305 3.305 0 0 0-.615.993h-.053l-.088-1.802h-.764V46h.896v-5.273c0-.551.065-1.05.194-1.495a3.36 3.36 0 0 1 .562-1.142c.246-.317.545-.56.897-.73.357-.17.761-.255 1.212-.255.229 0 .443.015.642.044.199.024.396.062.589.115l.141-.818a4.754 4.754 0 0 0-.624-.123Z\" fill=\"currentColor\" />\n  </svg>\n`;\n","import { Directive, EventEmitter, Input, Output } from \"@angular/core\";\n\n/**\n * Base class used in `NavGroupComponent` and `NavItemComponent`\n */\n@Directive()\nexport abstract class NavBaseComponent {\n  /**\n   * Text to display in main content\n   */\n  @Input() text: string;\n\n  /**\n   * `aria-label` for main content\n   */\n  @Input() ariaLabel: string;\n\n  /**\n   * Optional icon, e.g. `\"bwi-collection\"`\n   */\n  @Input() icon: string;\n\n  /**\n   * Route to be passed to internal `routerLink`\n   */\n  @Input() route: string | any[];\n\n  /**\n   * If this item is used within a tree, set `variant` to `\"tree\"`\n   */\n  @Input() variant: \"default\" | \"tree\" = \"default\";\n\n  /**\n   * Depth level when nested inside of a `'tree'` variant\n   */\n  @Input() treeDepth = 0;\n\n  /**\n   * If `true`, do not change styles when nav item is active.\n   */\n  @Input() hideActiveStyles = false;\n\n  /**\n   * Fires when main content is clicked\n   */\n  @Output() mainContentClicked: EventEmitter<MouseEvent> = new EventEmitter();\n}\n","<div\n  class=\"tw-relative\"\n  [ngClass]=\"[\n    showActiveStyles ? 'tw-bg-background-alt4' : 'tw-bg-background-alt3',\n    fvwStyles$ | async\n  ]\"\n>\n  <div\n    [ngStyle]=\"{\n      'padding-left': (variant === 'tree' ? 2.5 : 1) + treeDepth * 1.5 + 'rem'\n    }\"\n    class=\"tw-relative tw-flex tw-items-center tw-pr-4\"\n    [ngClass]=\"[variant === 'tree' ? 'tw-py-1' : 'tw-py-2']\"\n  >\n    <div\n      #slotStart\n      class=\"[&>*:focus-visible::before]:!tw-ring-text-alt2 [&>*]:!tw-text-alt2 [&>*:hover]:!tw-border-text-alt2\"\n    >\n      <ng-content select=\"[slot-start]\"></ng-content>\n    </div>\n    <!-- Default content for #slotStart (for consistent sizing) -->\n    <div\n      *ngIf=\"slotStart.childElementCount === 0\"\n      [ngClass]=\"{\n        'tw-w-0': variant !== 'tree'\n      }\"\n    >\n      <button\n        class=\"tw-invisible\"\n        [bitIconButton]=\"'bwi-angle-down'\"\n        size=\"small\"\n        aria-hidden=\"true\"\n      ></button>\n    </div>\n\n    <ng-container *ngIf=\"route; then isAnchor; else isButton\"></ng-container>\n\n    <!-- Main content of `NavItem` -->\n    <ng-template #anchorAndButtonContent>\n      <i class=\"bwi bwi-fw tw-text-alt2 tw-mx-1 {{ icon }}\"></i\n      ><span [ngClass]=\"showActiveStyles ? 'tw-font-bold' : 'tw-font-semibold'\">{{ text }}</span>\n    </ng-template>\n\n    <!-- Show if a value was passed to `this.to` -->\n    <ng-template #isAnchor>\n      <!-- The `fvw` class passes focus to `this.focusVisibleWithin$` -->\n      <!-- The following `class` field should match the `#isButton` class field below -->\n      <a\n        class=\"fvw tw-w-full tw-overflow-hidden tw-text-ellipsis tw-whitespace-nowrap tw-border-none tw-bg-transparent tw-p-0 tw-text-start !tw-text-alt2 hover:tw-text-alt2 hover:tw-no-underline focus:tw-outline-none [&>:not(.bwi)]:hover:tw-underline\"\n        [routerLink]=\"route\"\n        [attr.aria-label]=\"ariaLabel || text\"\n        routerLinkActive\n        [routerLinkActiveOptions]=\"rlaOptions\"\n        [ariaCurrentWhenActive]=\"'page'\"\n        (isActiveChange)=\"setActive($event)\"\n        (click)=\"mainContentClicked.emit()\"\n      >\n        <ng-container *ngTemplateOutlet=\"anchorAndButtonContent\"></ng-container>\n      </a>\n    </ng-template>\n\n    <!-- Show if `this.to` is falsy -->\n    <ng-template #isButton>\n      <!-- Class field should match `#isAnchor` class field above -->\n      <button\n        class=\"fvw tw-w-full tw-overflow-hidden tw-text-ellipsis tw-whitespace-nowrap tw-border-none tw-bg-transparent tw-p-0 tw-text-start !tw-text-alt2 hover:tw-text-alt2 hover:tw-no-underline focus:tw-outline-none [&>:not(.bwi)]:hover:tw-underline\"\n        (click)=\"mainContentClicked.emit()\"\n      >\n        <ng-container *ngTemplateOutlet=\"anchorAndButtonContent\"></ng-container>\n      </button>\n    </ng-template>\n\n    <div\n      class=\"tw-flex tw-gap-1 [&>*:focus-visible::before]:!tw-ring-text-alt2 [&>*]:!tw-text-alt2 [&>*:hover]:!tw-border-text-alt2\"\n    >\n      <ng-content select=\"[slot-end]\"></ng-content>\n    </div>\n  </div>\n</div>\n","import { Component, HostListener } from \"@angular/core\";\nimport { IsActiveMatchOptions } from \"@angular/router\";\nimport { BehaviorSubject, map } from \"rxjs\";\n\nimport { NavBaseComponent } from \"./nav-base.component\";\n\n@Component({\n  selector: \"bit-nav-item\",\n  templateUrl: \"./nav-item.component.html\",\n})\nexport class NavItemComponent extends NavBaseComponent {\n  /**\n   * Is `true` if `to` matches the current route\n   */\n  private _active = false;\n  protected setActive(isActive: boolean) {\n    this._active = isActive;\n  }\n  protected get showActiveStyles() {\n    return this._active && !this.hideActiveStyles;\n  }\n  protected readonly rlaOptions: IsActiveMatchOptions = {\n    paths: \"exact\",\n    queryParams: \"exact\",\n    fragment: \"ignored\",\n    matrixParams: \"ignored\",\n  };\n\n  /**\n   * The design spec calls for the an outline to wrap the entire element when the template's anchor/button has :focus-visible.\n   * Usually, we would use :focus-within for this. However, that matches when a child element has :focus instead of :focus-visible.\n   *\n   * Currently, the browser does not have a pseudo selector that combines these two, e.g. :focus-visible-within (WICG/focus-visible#151)\n   * To make our own :focus-visible-within functionality, we use event delegation on the host and manually check if the focus target (denoted with the .fvw class) matches :focus-visible. We then map that state to some styles, so the entire component can have an outline.\n   */\n  protected focusVisibleWithin$ = new BehaviorSubject(false);\n  protected fvwStyles$ = this.focusVisibleWithin$.pipe(\n    map((value) => (value ? \"tw-z-10 tw-rounded tw-outline-none tw-ring tw-ring-text-alt2\" : \"\"))\n  );\n  @HostListener(\"focusin\", [\"$event.target\"])\n  onFocusIn(target: HTMLElement) {\n    this.focusVisibleWithin$.next(target.matches(\".fvw:focus-visible\"));\n  }\n  @HostListener(\"focusout\")\n  onFocusOut() {\n    this.focusVisibleWithin$.next(false);\n  }\n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"bit-nav-divider\",\n  templateUrl: \"./nav-divider.component.html\",\n})\nexport class NavDividerComponent {}\n","<div class=\"tw-h-px tw-w-full tw-bg-secondary-300\"></div>\n","<!-- This a higher order component that composes `NavItemComponent`  -->\n<bit-nav-item\n  [text]=\"text\"\n  [icon]=\"icon\"\n  [route]=\"route\"\n  [variant]=\"variant\"\n  (mainContentClicked)=\"toggle()\"\n  [treeDepth]=\"treeDepth\"\n  (mainContentClicked)=\"mainContentClicked.emit()\"\n  [ariaLabel]=\"ariaLabel\"\n>\n  <ng-template #button>\n    <button\n      class=\"tw-ml-auto\"\n      [bitIconButton]=\"\n        open ? 'bwi-chevron-up' : variant === 'tree' ? 'bwi-angle-right' : 'bwi-angle-down'\n      \"\n      [buttonType]=\"'main'\"\n      (click)=\"toggle($event)\"\n      size=\"small\"\n      [title]=\"'toggleCollapse' | i18n\"\n      aria-haspopup=\"true\"\n      [attr.aria-expanded]=\"open.toString()\"\n      [attr.aria-controls]=\"contentId\"\n      [attr.aria-label]=\"['toggleCollapse' | i18n, text].join(' ')\"\n    ></button>\n  </ng-template>\n\n  <!-- Show toggle to the left for trees otherwise to the right -->\n  <ng-container slot-start *ngIf=\"variant === 'tree'\">\n    <ng-container *ngTemplateOutlet=\"button\"></ng-container>\n  </ng-container>\n  <ng-container slot-end *ngIf=\"variant !== 'tree'\">\n    <ng-container *ngTemplateOutlet=\"button\"></ng-container>\n  </ng-container>\n</bit-nav-item>\n\n<!-- [attr.aria-controls] of the above button expects a unique ID on the controlled element -->\n<div\n  *ngIf=\"open\"\n  [attr.id]=\"contentId\"\n  [attr.aria-label]=\"[text, 'submenu' | i18n].join(' ')\"\n  role=\"group\"\n>\n  <ng-content></ng-content>\n</div>\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n} from \"@angular/core\";\n\nimport { NavBaseComponent } from \"./nav-base.component\";\nimport { NavItemComponent } from \"./nav-item.component\";\n\n@Component({\n  selector: \"bit-nav-group\",\n  templateUrl: \"./nav-group.component.html\",\n})\nexport class NavGroupComponent extends NavBaseComponent implements AfterContentInit {\n  @ContentChildren(NavGroupComponent, {\n    descendants: true,\n  })\n  nestedGroups!: QueryList<NavGroupComponent>;\n\n  @ContentChildren(NavItemComponent, {\n    descendants: true,\n  })\n  nestedItems!: QueryList<NavItemComponent>;\n\n  /**\n   * UID for `[attr.aria-controls]`\n   */\n  protected contentId = Math.random().toString(36).substring(2);\n\n  /**\n   * Is `true` if the expanded content is visible\n   */\n  @Input()\n  open = false;\n  @Output()\n  openChange = new EventEmitter<boolean>();\n\n  protected toggle(event?: MouseEvent) {\n    event?.stopPropagation();\n    this.open = !this.open;\n    this.openChange.emit(this.open);\n  }\n\n  /**\n   * - For any nested NavGroupComponents or NavItemComponents, increment the `treeDepth` by 1.\n   */\n  private initNestedStyles() {\n    if (this.variant !== \"tree\") {\n      return;\n    }\n    [...this.nestedGroups, ...this.nestedItems].forEach((navGroupOrItem) => {\n      navGroupOrItem.treeDepth += 1;\n    });\n  }\n\n  ngAfterContentInit(): void {\n    this.initNestedStyles();\n  }\n}\n","<bit-nav-group\n  *ngIf=\"activeOrganization$ | async as activeOrganization\"\n  [text]=\"activeOrganization.name\"\n  [ariaLabel]=\"['organization' | i18n, activeOrganization.name].join(' ')\"\n  icon=\"bwi-business\"\n  [route]=\"['../', activeOrganization.id]\"\n  [(open)]=\"open\"\n>\n  <ng-container *ngIf=\"organizations$ | async as organizations\">\n    <bit-nav-item\n      *ngFor=\"let org of organizations\"\n      [text]=\"org.name\"\n      [ariaLabel]=\"['organization' | i18n, org.name].join(' ')\"\n      [route]=\"['../', org.id]\"\n      (mainContentClicked)=\"toggle()\"\n      [hideActiveStyles]=\"true\"\n    >\n      <button\n        slot-end\n        bitIconButton=\"bwi-ellipsis-v\"\n        [bitMenuTriggerFor]=\"orgSwitchMenu\"\n        size=\"small\"\n        [title]=\"'options' | i18n\"\n        [attr.aria-label]=\"['organization' | i18n, org.name, 'options' | i18n].join(' ')\"\n      ></button>\n    </bit-nav-item>\n  </ng-container>\n  <bit-nav-item\n    icon=\"bwi-plus\"\n    [text]=\"'newOrganization' | i18n\"\n    route=\"/create-organization\"\n  ></bit-nav-item>\n  <bit-nav-divider></bit-nav-divider>\n</bit-nav-group>\n\n<bit-menu #orgSwitchMenu>\n  <button type=\"button\" bitMenuItem>\n    <i class=\"bwi bwi-fw bwi-key tw-text-xl\" aria-hidden=\"true\"></i>\n    <span>{{ \"enrollPasswordReset\" | i18n }}</span>\n  </button>\n  <button type=\"button\" bitMenuItem>\n    <i class=\"bwi bwi-fw bwi-link tw-text-xl\" aria-hidden=\"true\"></i>\n    <span>{{ \"linkSso\" | i18n }}</span>\n  </button>\n  <button type=\"button\" bitMenuItem>\n    <i class=\"bwi bwi-fw bwi-sign-out tw-text-xl tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">{{ \"leaveOrganization\" | i18n }}</span>\n  </button>\n</bit-menu>\n","import { Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, map, Observable } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization/organization.service.abstraction\";\nimport type { Organization } from \"@bitwarden/common/models/domain/organization\";\n\n@Component({\n  selector: \"org-switcher\",\n  templateUrl: \"org-switcher.component.html\",\n})\nexport class OrgSwitcherComponent {\n  protected organizations$: Observable<Organization[]> =\n    this.organizationService.organizations$.pipe(\n      map((orgs) => orgs.filter(this.filter).sort((a, b) => a.name.localeCompare(b.name)))\n    );\n  protected activeOrganization$: Observable<Organization> = combineLatest([\n    this.route.paramMap,\n    this.organizations$,\n  ]).pipe(map(([params, orgs]) => orgs.find((org) => org.id === params.get(\"organizationId\"))));\n\n  /**\n   * Filter function for displayed organizations in the `org-switcher`\n   * @example\n   * const smFilter = (org: Organization) => org.canAccessSecretsManager\n   * // <org-switcher [filter]=\"smFilter\">\n   */\n  @Input()\n  filter: (org: Organization) => boolean = () => true;\n\n  /**\n   * Is `true` if the expanded content is visible\n   */\n  @Input()\n  open = false;\n  @Output()\n  openChange = new EventEmitter<boolean>();\n\n  constructor(private route: ActivatedRoute, private organizationService: OrganizationService) {}\n\n  protected toggle(event?: MouseEvent) {\n    event?.stopPropagation();\n    this.open = !this.open;\n    this.openChange.emit(this.open);\n  }\n}\n","import { Component } from \"@angular/core\";\n\nimport { Organization } from \"@bitwarden/common/models/domain/organization\";\n\nimport { SecretsManagerLogo } from \"./secrets-manager-logo\";\n\n@Component({\n  selector: \"sm-navigation\",\n  templateUrl: \"./navigation.component.html\",\n})\nexport class NavigationComponent {\n  protected readonly logo = SecretsManagerLogo;\n\n  protected orgFilter = (org: Organization) => org.canAccessSecretsManager;\n}\n","<a [routerLink]=\"['secrets']\" class=\"tw-mx-4 tw-mt-8 tw-mb-3 tw-block\">\n  <bit-icon [icon]=\"logo\" class=\"tw-w-full tw-text-alt2\"></bit-icon>\n</a>\n\n<org-switcher [filter]=\"orgFilter\"></org-switcher>\n<bit-nav-item icon=\"bwi-collection\" text=\"Projects\" route=\"projects\"></bit-nav-item>\n<bit-nav-item icon=\"bwi-key\" text=\"Secrets\" route=\"secrets\"></bit-nav-item>\n<bit-nav-item icon=\"bwi-wrench\" text=\"Service Accounts\" route=\"service-accounts\"></bit-nav-item>\n<bit-nav-item icon=\"bwi-trash\" text=\"Trash\" route=\"trash\"></bit-nav-item>\n<bit-nav-item icon=\"bwi-cog\" text=\"Settings\" route=\"settings\"></bit-nav-item>\n","import { View } from \"@bitwarden/common/models/view/view\";\n\nexport class ProjectView implements View {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n}\n","import { DialogRef } from \"@angular/cdk/dialog\";\nimport { Directive, HostListener, Input, Optional } from \"@angular/core\";\n\n@Directive({\n  selector: \"[bitDialogClose]\",\n})\nexport class DialogCloseDirective {\n  @Input(\"bit-dialog-close\") dialogResult: any;\n\n  constructor(@Optional() public dialogRef: DialogRef<any>) {}\n\n  @HostListener(\"click\") close(): void {\n    this.dialogRef.close(this.dialogResult);\n  }\n}\n","import { coerceBooleanProperty } from \"@angular/cdk/coercion\";\nimport { Component, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"bit-dialog\",\n  templateUrl: \"./dialog.component.html\",\n})\nexport class DialogComponent {\n  @Input() dialogSize: \"small\" | \"default\" | \"large\" = \"default\";\n\n  private _disablePadding = false;\n  @Input() set disablePadding(value: boolean | \"\") {\n    this._disablePadding = coerceBooleanProperty(value);\n  }\n  get disablePadding() {\n    return this._disablePadding;\n  }\n\n  get width() {\n    switch (this.dialogSize) {\n      case \"small\": {\n        return \"tw-w-96\";\n      }\n      case \"large\": {\n        return \"tw-w-75vw\";\n      }\n      default: {\n        return \"tw-w-50vw\";\n      }\n    }\n  }\n}\n","<div\n  [ngClass]=\"width\"\n  class=\"tw-my-4 tw-flex tw-max-h-screen tw-flex-col tw-overflow-hidden tw-rounded tw-border tw-border-solid tw-border-secondary-300 tw-bg-text-contrast tw-text-main\"\n>\n  <div\n    class=\"tw-flex tw-items-center tw-gap-4 tw-border-0 tw-border-b tw-border-solid tw-border-secondary-300 tw-p-4\"\n  >\n    <h1 bitDialogTitleContainer class=\"tw-mb-0 tw-grow tw-text-lg tw-uppercase\">\n      <ng-content select=\"[bitDialogTitle]\"></ng-content>\n    </h1>\n    <button\n      type=\"button\"\n      bitIconButton=\"bwi-close\"\n      buttonType=\"main\"\n      size=\"default\"\n      bitDialogClose\n      [attr.title]=\"'close' | i18n\"\n      [attr.aria-label]=\"'close' | i18n\"\n    ></button>\n  </div>\n\n  <div class=\"tw-overflow-y-auto tw-pb-8\" [ngClass]=\"{ 'tw-p-4': !disablePadding }\">\n    <ng-content select=\"[bitDialogContent]\"></ng-content>\n  </div>\n\n  <div\n    class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-p-4\"\n  >\n    <ng-content select=\"[bitDialogFooter]\"></ng-content>\n  </div>\n</div>\n","<bit-dialog dialogSize=\"default\">\n  <ng-container bitDialogTitle>\n    <span>{{ data.title | i18n }}</span>\n    <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n      {{ data.details.length }}\n      {{ data.subTitle | i18n }}\n    </span>\n  </ng-container>\n\n  <div bitDialogContent>\n    {{ data.message | i18n }}\n    <bit-table>\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ data.columnTitle | i18n }}</th>\n          <th bitCell>{{ \"error\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-container body>\n        <tr bitRow *ngFor=\"let detail of data.details\">\n          <td bitCell>{{ detail.name }}</td>\n          <td bitCell>{{ detail.errorMessage }}</td>\n        </tr>\n      </ng-container>\n    </bit-table>\n  </div>\n\n  <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n    <button bitButton buttonType=\"primary\" bitDialogClose type=\"button\">\n      {{ \"close\" | i18n }}\n    </button>\n  </div>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nexport interface BulkStatusDetails {\n  title: string;\n  subTitle: string;\n  columnTitle: string;\n  message: string;\n  details: BulkOperationStatus[];\n}\n\nexport class BulkOperationStatus {\n  id: string;\n  name: string;\n  errorMessage?: string;\n}\n\n@Component({\n  selector: \"sm-bulk-status-dialog\",\n  templateUrl: \"./bulk-status-dialog.component.html\",\n})\nexport class BulkStatusDialogComponent implements OnInit {\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) public data: BulkStatusDetails) {}\n\n  ngOnInit(): void {\n    // TODO remove null checks once strictNullChecks in TypeScript is turned on.\n    if (\n      !this.data.title ||\n      !this.data.subTitle ||\n      !this.data.columnTitle ||\n      !this.data.message ||\n      !(this.data.details?.length >= 1)\n    ) {\n      this.dialogRef.close();\n      throw new Error(\n        \"The bulk status dialog was not called with the appropriate operation values.\"\n      );\n    }\n  }\n}\n","import { View } from \"@bitwarden/common/models/view/view\";\n\nexport class ProjectListView implements View {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n}\n","import { EncString } from \"@bitwarden/common/models/domain/enc-string\";\n\nexport class ProjectRequest {\n  name: EncString;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class ProjectListItemResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class ProjectResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\n\nimport { BulkOperationStatus } from \"../layout/dialogs/bulk-status-dialog.component\";\nimport { ProjectListView } from \"../models/view/project-list.view\";\nimport { ProjectView } from \"../models/view/project.view\";\n\nimport { ProjectRequest } from \"./models/requests/project.request\";\nimport { ProjectListItemResponse } from \"./models/responses/project-list-item.response\";\nimport { ProjectResponse } from \"./models/responses/project.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ProjectService {\n  protected _project = new Subject<ProjectView>();\n  project$ = this._project.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getByProjectId(projectId: string): Promise<ProjectView> {\n    const r = await this.apiService.send(\"GET\", \"/projects/\" + projectId, null, true, true);\n    const projectResponse = new ProjectResponse(r);\n    return await this.createProjectView(projectResponse);\n  }\n\n  async getProjects(organizationId: string): Promise<ProjectListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/projects\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, ProjectListItemResponse);\n    return await this.createProjectsListView(organizationId, results.data);\n  }\n\n  async create(organizationId: string, projectView: ProjectView): Promise<ProjectView> {\n    const request = await this.getProjectRequest(organizationId, projectView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/projects\",\n      request,\n      true,\n      true\n    );\n\n    const project = await this.createProjectView(new ProjectResponse(r));\n    this._project.next(project);\n    return project;\n  }\n\n  async update(organizationId: string, projectView: ProjectView) {\n    const request = await this.getProjectRequest(organizationId, projectView);\n    const r = await this.apiService.send(\"PUT\", \"/projects/\" + projectView.id, request, true, true);\n    this._project.next(await this.createProjectView(new ProjectResponse(r)));\n  }\n\n  async delete(projects: ProjectListView[]): Promise<BulkOperationStatus[]> {\n    const projectIds = projects.map((project) => project.id);\n    const r = await this.apiService.send(\"POST\", \"/projects/delete\", projectIds, true, true);\n    this._project.next(null);\n    return r.data.map((element: { id: string; error: string }) => {\n      const bulkOperationStatus = new BulkOperationStatus();\n      bulkOperationStatus.id = element.id;\n      bulkOperationStatus.name = projects.find((project) => project.id == element.id).name;\n      bulkOperationStatus.errorMessage = element.error;\n      return bulkOperationStatus;\n    });\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async getProjectRequest(\n    organizationId: string,\n    projectView: ProjectView\n  ): Promise<ProjectRequest> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = new ProjectRequest();\n    request.name = await this.encryptService.encrypt(projectView.name, orgKey);\n\n    return request;\n  }\n\n  private async createProjectView(projectResponse: ProjectResponse): Promise<ProjectView> {\n    const orgKey = await this.getOrganizationKey(projectResponse.organizationId);\n\n    const projectView = new ProjectView();\n    projectView.id = projectResponse.id;\n    projectView.organizationId = projectResponse.organizationId;\n    projectView.creationDate = projectResponse.creationDate;\n    projectView.revisionDate = projectResponse.revisionDate;\n    projectView.name = await this.encryptService.decryptToUtf8(\n      new EncString(projectResponse.name),\n      orgKey\n    );\n\n    return projectView;\n  }\n\n  private async createProjectsListView(\n    organizationId: string,\n    projects: ProjectListItemResponse[]\n  ): Promise<ProjectListView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      projects.map(async (s: ProjectListItemResponse) => {\n        const projectListView = new ProjectListView();\n        projectListView.id = s.id;\n        projectListView.organizationId = s.organizationId;\n        projectListView.name = await this.encryptService.decryptToUtf8(\n          new EncString(s.name),\n          orgKey\n        );\n        projectListView.creationDate = s.creationDate;\n        projectListView.revisionDate = s.revisionDate;\n        return projectListView;\n      })\n    );\n  }\n}\n","import { Directive, Input, OnDestroy, OnInit, Optional } from \"@angular/core\";\nimport { FormGroupDirective } from \"@angular/forms\";\nimport { BehaviorSubject, catchError, filter, of, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { ValidationService } from \"@bitwarden/common/abstractions/validation.service\";\n\nimport { FunctionReturningAwaitable, functionToObservable } from \"../utils/function-to-observable\";\n\n/**\n * Allow a form to perform async actions on submit, disabling the form while the action is processing.\n */\n@Directive({\n  selector: \"[formGroup][bitSubmit]\",\n})\nexport class BitSubmitDirective implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private _loading$ = new BehaviorSubject<boolean>(false);\n  private _disabled$ = new BehaviorSubject<boolean>(false);\n\n  @Input(\"bitSubmit\") protected handler: FunctionReturningAwaitable;\n\n  readonly loading$ = this._loading$.asObservable();\n  readonly disabled$ = this._disabled$.asObservable();\n\n  constructor(\n    private formGroupDirective: FormGroupDirective,\n    @Optional() validationService?: ValidationService,\n    @Optional() logService?: LogService\n  ) {\n    formGroupDirective.ngSubmit\n      .pipe(\n        filter(() => !this.disabled),\n        switchMap(() => {\n          // Calling functionToObservable exectues the sync part of the handler\n          // allowing the function to check form validity before it gets disabled.\n          const awaitable = functionToObservable(this.handler);\n\n          // Disable form\n          this.loading = true;\n\n          return awaitable.pipe(\n            catchError((err: unknown) => {\n              logService?.error(`Async submit exception: ${err}`);\n              validationService?.showError(err);\n              return of(undefined);\n            })\n          );\n        }),\n        takeUntil(this.destroy$)\n      )\n      .subscribe({\n        next: () => (this.loading = false),\n        complete: () => (this.loading = false),\n      });\n  }\n\n  ngOnInit(): void {\n    this.formGroupDirective.statusChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((c) => this._disabled$.next(c === \"DISABLED\"));\n  }\n\n  get disabled() {\n    return this._disabled$.value;\n  }\n\n  set disabled(value: boolean) {\n    this._disabled$.next(value);\n  }\n\n  get loading() {\n    return this._loading$.value;\n  }\n\n  set loading(value: boolean) {\n    this.disabled = value;\n    this._loading$.next(value);\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","import { Directive, Input, OnDestroy, Optional } from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { ButtonLikeAbstraction } from \"../shared/button-like.abstraction\";\n\nimport { BitSubmitDirective } from \"./bit-submit.directive\";\n\nimport { BitActionDirective } from \".\";\n\n/**\n * This directive has two purposes:\n *\n * When attached to a submit button:\n * - Activates the button loading effect while the form is processing an async submit action.\n * - Disables the button while a `bitAction` directive on another button is being processed.\n *\n * When attached to a button with `bitAction` directive inside of a form:\n * - Disables the button while the `bitSubmit` directive is processing an async submit action.\n * - Disables the button while a `bitAction` directive on another button is being processed.\n * - Disables form submission while the `bitAction` directive is processing an async action.\n */\n@Directive({\n  selector: \"button[bitFormButton]\",\n})\nexport class BitFormButtonDirective implements OnDestroy {\n  private destroy$ = new Subject<void>();\n\n  @Input() type: string;\n\n  constructor(\n    buttonComponent: ButtonLikeAbstraction,\n    @Optional() submitDirective?: BitSubmitDirective,\n    @Optional() actionDirective?: BitActionDirective\n  ) {\n    if (submitDirective && buttonComponent) {\n      submitDirective.loading$.pipe(takeUntil(this.destroy$)).subscribe((loading) => {\n        if (this.type === \"submit\") {\n          buttonComponent.loading = loading;\n        } else {\n          buttonComponent.disabled = loading;\n        }\n      });\n\n      submitDirective.disabled$.pipe(takeUntil(this.destroy$)).subscribe((disabled) => {\n        buttonComponent.disabled = disabled;\n      });\n    }\n\n    if (submitDirective && actionDirective) {\n      actionDirective.loading$.pipe(takeUntil(this.destroy$)).subscribe((disabled) => {\n        submitDirective.disabled = disabled;\n      });\n\n      submitDirective.disabled$.pipe(takeUntil(this.destroy$)).subscribe((disabled) => {\n        actionDirective.disabled = disabled;\n      });\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\n\nimport { ProjectView } from \"../../models/view/project.view\";\nimport { ProjectService } from \"../../projects/project.service\";\n\nexport enum OperationType {\n  Add,\n  Edit,\n}\n\nexport interface ProjectOperation {\n  organizationId: string;\n  operation: OperationType;\n  projectId?: string;\n}\n\n@Component({\n  selector: \"sm-project-dialog\",\n  templateUrl: \"./project-dialog.component.html\",\n})\nexport class ProjectDialogComponent implements OnInit {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", [Validators.required]),\n  });\n  protected loading = false;\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: ProjectOperation,\n    private projectService: ProjectService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private router: Router\n  ) {}\n\n  async ngOnInit() {\n    if (this.data.operation === OperationType.Edit && this.data.projectId) {\n      await this.loadData();\n    } else if (this.data.operation !== OperationType.Add) {\n      this.dialogRef.close();\n      throw new Error(`The project dialog was not called with the appropriate operation values.`);\n    }\n  }\n\n  async loadData() {\n    this.loading = true;\n    const project: ProjectView = await this.projectService.getByProjectId(this.data.projectId);\n    this.loading = false;\n    this.formGroup.setValue({ name: project.name });\n  }\n\n  get title() {\n    return this.data.operation === OperationType.Add ? \"newProject\" : \"editProject\";\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const projectView = this.getProjectView();\n    if (this.data.operation === OperationType.Add) {\n      const newProject = await this.createProject(projectView);\n      this.router.navigate([\"sm\", this.data.organizationId, \"projects\", newProject.id]);\n    } else {\n      projectView.id = this.data.projectId;\n      await this.updateProject(projectView);\n    }\n    this.dialogRef.close();\n  };\n\n  private async createProject(projectView: ProjectView) {\n    const newProject = await this.projectService.create(this.data.organizationId, projectView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"projectCreated\"));\n    return newProject;\n  }\n\n  private async updateProject(projectView: ProjectView) {\n    await this.projectService.update(this.data.organizationId, projectView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"projectSaved\"));\n  }\n\n  private getProjectView() {\n    const projectView = new ProjectView();\n    projectView.organizationId = this.data.organizationId;\n    projectView.name = this.formGroup.value.name;\n    return projectView;\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"small\">\n    <span bitDialogTitle>{{ title | i18n }}</span>\n    <span bitDialogContent>\n      <div *ngIf=\"loading\" class=\"tw-text-center\">\n        <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n      </div>\n      <bit-form-field *ngIf=\"!loading\">\n        <bit-label>{{ \"projectName\" | i18n }}</bit-label>\n        <input formControlName=\"name\" maxlength=\"1000\" bitInput />\n      </bit-form-field>\n    </span>\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"save\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </div>\n  </bit-dialog>\n</form>\n","import { View } from \"@bitwarden/common/models/view/view\";\n\nexport class SecretProjectView implements View {\n  id: string;\n  name: string;\n}\n","import { View } from \"@bitwarden/common/models/view/view\";\n\nimport { SecretProjectView } from \"./secret-project.view\";\n\nexport class SecretView implements View {\n  id: string;\n  organizationId: string;\n  name: string;\n  value: string;\n  note: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectView[];\n}\n","import { View } from \"@bitwarden/common/models/view/view\";\n\nimport { SecretProjectView } from \"./secret-project.view\";\n\nexport class SecretListView implements View {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectView[];\n}\n","export class SecretRequest {\n  key: string;\n  value: string;\n  note: string;\n  projectIds?: string[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class SecretProjectResponse extends BaseResponse {\n  id: string;\n  name: string;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.id = this.getResponseProperty(\"Id\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretProjectResponse } from \"./secret-project.response\";\n\nexport class SecretListItemResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectResponse[];\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Key\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n\n    const project = this.getResponseProperty(\"projects\");\n    this.projects = project == null ? null : project.map((k: any) => new SecretProjectResponse(k));\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretListItemResponse } from \"./secret-list-item.response\";\nimport { SecretProjectResponse } from \"./secret-project.response\";\n\nexport class SecretWithProjectsListResponse extends BaseResponse {\n  secrets: SecretListItemResponse[];\n  projects: SecretProjectResponse[];\n\n  constructor(response: any) {\n    super(response);\n    const secrets = this.getResponseProperty(\"secrets\");\n    const projects = this.getResponseProperty(\"projects\");\n    this.projects =\n      projects == null ? null : projects.map((k: any) => new SecretProjectResponse(k));\n    this.secrets = secrets == null ? [] : secrets.map((dr: any) => new SecretListItemResponse(dr));\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretProjectResponse } from \"./secret-project.response\";\n\nexport class SecretResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  value: string;\n  note: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectResponse[];\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Key\");\n    this.value = this.getResponseProperty(\"Value\");\n    this.note = this.getResponseProperty(\"Note\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n\n    const projects = this.getResponseProperty(\"Projects\");\n    this.projects =\n      projects == null ? null : projects.map((k: any) => new SecretProjectResponse(k));\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport { SecretProjectView } from \"../models/view/secret-project.view\";\nimport { SecretView } from \"../models/view/secret.view\";\n\nimport { SecretRequest } from \"./requests/secret.request\";\nimport { SecretListItemResponse } from \"./responses/secret-list-item.response\";\nimport { SecretProjectResponse } from \"./responses/secret-project.response\";\nimport { SecretWithProjectsListResponse } from \"./responses/secret-with-projects-list.response\";\nimport { SecretResponse } from \"./responses/secret.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SecretService {\n  protected _secret: Subject<SecretView> = new Subject();\n\n  secret$ = this._secret.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getBySecretId(secretId: string): Promise<SecretView> {\n    const r = await this.apiService.send(\"GET\", \"/secrets/\" + secretId, null, true, true);\n    const secretResponse = new SecretResponse(r);\n\n    return await this.createSecretView(secretResponse);\n  }\n\n  async getSecrets(organizationId: string): Promise<SecretListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/secrets\",\n      null,\n      true,\n      true\n    );\n\n    const results = new SecretWithProjectsListResponse(r);\n    return await this.createSecretsListView(organizationId, results);\n  }\n\n  async getSecretsByProject(organizationId: string, projectId: string): Promise<SecretListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/projects/\" + projectId + \"/secrets\",\n      null,\n      true,\n      true\n    );\n\n    const results = new SecretWithProjectsListResponse(r);\n    return await this.createSecretsListView(organizationId, results);\n  }\n\n  async create(organizationId: string, secretView: SecretView) {\n    const request = await this.getSecretRequest(organizationId, secretView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/secrets\",\n      request,\n      true,\n      true\n    );\n    this._secret.next(await this.createSecretView(new SecretResponse(r)));\n  }\n\n  async update(organizationId: string, secretView: SecretView) {\n    const request = await this.getSecretRequest(organizationId, secretView);\n    const r = await this.apiService.send(\"PUT\", \"/secrets/\" + secretView.id, request, true, true);\n    this._secret.next(await this.createSecretView(new SecretResponse(r)));\n  }\n\n  async delete(secretIds: string[]) {\n    const r = await this.apiService.send(\"POST\", \"/secrets/delete\", secretIds, true, true);\n\n    const responseErrors: string[] = [];\n    r.data.forEach((element: { error: string }) => {\n      if (element.error) {\n        responseErrors.push(element.error);\n      }\n    });\n\n    // TODO waiting to hear back on how to display multiple errors.\n    // for now send as a list of strings to be displayed in toast.\n    if (responseErrors?.length >= 1) {\n      throw new Error(responseErrors.join(\",\"));\n    }\n\n    this._secret.next(null);\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async getSecretRequest(\n    organizationId: string,\n    secretView: SecretView\n  ): Promise<SecretRequest> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = new SecretRequest();\n    const [key, value, note] = await Promise.all([\n      this.encryptService.encrypt(secretView.name, orgKey),\n      this.encryptService.encrypt(secretView.value, orgKey),\n      this.encryptService.encrypt(secretView.note, orgKey),\n    ]);\n    request.key = key.encryptedString;\n    request.value = value.encryptedString;\n    request.note = note.encryptedString;\n    request.projectIds = [];\n\n    secretView.projects?.forEach((e) => request.projectIds.push(e.id));\n\n    return request;\n  }\n\n  private async createSecretView(secretResponse: SecretResponse): Promise<SecretView> {\n    const orgKey = await this.getOrganizationKey(secretResponse.organizationId);\n\n    const secretView = new SecretView();\n    secretView.id = secretResponse.id;\n    secretView.organizationId = secretResponse.organizationId;\n    secretView.creationDate = secretResponse.creationDate;\n    secretView.revisionDate = secretResponse.revisionDate;\n\n    const [name, value, note] = await Promise.all([\n      this.encryptService.decryptToUtf8(new EncString(secretResponse.name), orgKey),\n      this.encryptService.decryptToUtf8(new EncString(secretResponse.value), orgKey),\n      this.encryptService.decryptToUtf8(new EncString(secretResponse.note), orgKey),\n    ]);\n    secretView.name = name;\n    secretView.value = value;\n    secretView.note = note;\n\n    if (secretResponse.projects != null) {\n      secretView.projects = await this.decryptProjectsMappedToSecrets(\n        orgKey,\n        secretResponse.projects\n      );\n    }\n\n    return secretView;\n  }\n\n  private async createSecretsListView(\n    organizationId: string,\n    secrets: SecretWithProjectsListResponse\n  ): Promise<SecretListView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n\n    const projectsMappedToSecretsView = await this.decryptProjectsMappedToSecrets(\n      orgKey,\n      secrets.projects\n    );\n\n    return await Promise.all(\n      secrets.secrets.map(async (s: SecretListItemResponse) => {\n        const secretListView = new SecretListView();\n        secretListView.id = s.id;\n        secretListView.organizationId = s.organizationId;\n        secretListView.name = await this.encryptService.decryptToUtf8(\n          new EncString(s.name),\n          orgKey\n        );\n        secretListView.creationDate = s.creationDate;\n        secretListView.revisionDate = s.revisionDate;\n\n        const projectIds = s.projects?.map((p) => p.id);\n        secretListView.projects = projectsMappedToSecretsView.filter((p) =>\n          projectIds.includes(p.id)\n        );\n\n        return secretListView;\n      })\n    );\n  }\n\n  private async decryptProjectsMappedToSecrets(\n    orgKey: SymmetricCryptoKey,\n    projects: SecretProjectResponse[]\n  ): Promise<SecretProjectView[]> {\n    return await Promise.all(\n      projects.map(async (s: SecretProjectResponse) => {\n        const projectsMappedToSecretView = new SecretProjectView();\n        projectsMappedToSecretView.id = s.id;\n        projectsMappedToSecretView.name = await this.encryptService.decryptToUtf8(\n          new EncString(s.name),\n          orgKey\n        );\n        return projectsMappedToSecretView;\n      })\n    );\n  }\n}\n","import { Directive, TemplateRef } from \"@angular/core\";\n\n/**\n * Used to identify template based tab labels (allows complex labels instead of just plaintext)\n *\n * @example\n * ```\n * <bit-tab>\n *   <ng-template bitTabLabel>\n *     <i class=\"bwi bwi-search\"></i> Search\n *   </ng-template>\n *\n *   <p>Tab Content</p>\n * </bit-tab>\n * ```\n */\n@Directive({\n  selector: \"[bitTabLabel]\",\n})\nexport class TabLabelDirective {\n  constructor(public templateRef: TemplateRef<unknown>) {}\n}\n","<ng-template><ng-content></ng-content></ng-template>\n","import { TemplatePortal } from \"@angular/cdk/portal\";\nimport {\n  Component,\n  ContentChild,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n} from \"@angular/core\";\n\nimport { TabLabelDirective } from \"./tab-label.directive\";\n\n@Component({\n  selector: \"bit-tab\",\n  templateUrl: \"./tab.component.html\",\n  host: {\n    role: \"tabpanel\",\n  },\n})\nexport class TabComponent implements OnInit {\n  @Input() disabled = false;\n  @Input(\"label\") textLabel = \"\";\n\n  /**\n   * Optional tabIndex for the tabPanel that contains this tab's content.\n   *\n   * If the tabpanel does not contain any focusable elements or the first element with content is not focusable,\n   * this should be set to 0 to include it in the tab sequence of the page.\n   *\n   * @remarks See note 4 of https://www.w3.org/WAI/ARIA/apg/patterns/tabpanel/\n   */\n  @Input() contentTabIndex: number | undefined;\n\n  @ViewChild(TemplateRef, { static: true }) implicitContent: TemplateRef<unknown>;\n  @ContentChild(TabLabelDirective) templateLabel: TabLabelDirective;\n\n  private _contentPortal: TemplatePortal | null = null;\n\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  isActive: boolean;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {}\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(this.implicitContent, this._viewContainerRef);\n  }\n}\n","import { TemplatePortal } from \"@angular/cdk/portal\";\nimport { Component, HostBinding, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"bit-tab-body\",\n  templateUrl: \"tab-body.component.html\",\n})\nexport class TabBodyComponent {\n  private _firstRender: boolean;\n\n  @Input() content: TemplatePortal;\n  @Input() preserveContent = false;\n\n  @HostBinding(\"attr.hidden\") get hidden() {\n    return !this.active || null;\n  }\n\n  @Input()\n  get active() {\n    return this._active;\n  }\n  set active(value: boolean) {\n    this._active = value;\n    if (this._active) {\n      this._firstRender = true;\n    }\n  }\n  private _active: boolean;\n\n  /**\n   * The tab content to render.\n   * Inactive tabs that have never been rendered/active do not have their\n   * content rendered by default for performance. If `preserveContent` is `true`\n   * then the content persists after the first time content is rendered.\n   */\n  get tabContent() {\n    if (this.active) {\n      return this.content;\n    }\n    if (this.preserveContent && this._firstRender) {\n      return this.content;\n    }\n    return null;\n  }\n}\n","<bit-tab-header>\n  <div\n    bitTabListContainer\n    role=\"tablist\"\n    [attr.aria-label]=\"label\"\n    (keydown)=\"keyManager.onKeydown($event)\"\n  >\n    <button\n      bitTabListItem\n      *ngFor=\"let tab of tabs; let i = index\"\n      type=\"button\"\n      role=\"tab\"\n      [id]=\"getTabLabelId(i)\"\n      [active]=\"tab.isActive\"\n      [disabled]=\"tab.disabled\"\n      [attr.aria-selected]=\"selectedIndex === i\"\n      [attr.tabindex]=\"selectedIndex === i ? 0 : -1\"\n      (click)=\"selectTab(i)\"\n    >\n      <ng-container [ngTemplateOutlet]=\"content\"></ng-container>\n\n      <ng-template #content>\n        <ng-template [ngIf]=\"tab.templateLabel\" [ngIfElse]=\"tabTextLabel\">\n          <ng-container [ngTemplateOutlet]=\"tab.templateLabel.templateRef\"></ng-container>\n        </ng-template>\n\n        <ng-template #tabTextLabel>{{ tab.textLabel }}</ng-template>\n      </ng-template>\n    </button>\n  </div>\n</bit-tab-header>\n<div class=\"tw-px-4 tw-pt-5\">\n  <bit-tab-body\n    role=\"tabpanel\"\n    *ngFor=\"let tab of tabs; let i = index\"\n    [id]=\"getTabContentId(i)\"\n    [attr.tabindex]=\"tab.contentTabIndex\"\n    [attr.labeledby]=\"getTabLabelId(i)\"\n    [active]=\"tab.isActive\"\n    [content]=\"tab.content\"\n    [preserveContent]=\"preserveContent\"\n  >\n  </bit-tab-body>\n</div>\n","<ng-template [cdkPortalOutlet]=\"tabContent\"></ng-template>\n","import { FocusKeyManager } from \"@angular/cdk/a11y\";\nimport { coerceNumberProperty } from \"@angular/cdk/coercion\";\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChildren,\n} from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { TabListItemDirective } from \"../shared/tab-list-item.directive\";\n\nimport { TabComponent } from \"./tab.component\";\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n@Component({\n  selector: \"bit-tab-group\",\n  templateUrl: \"./tab-group.component.html\",\n})\nexport class TabGroupComponent\n  implements AfterContentChecked, AfterContentInit, AfterViewInit, OnDestroy\n{\n  private readonly _groupId: number;\n  private readonly destroy$ = new Subject<void>();\n  private _indexToSelect: number | null = 0;\n\n  /**\n   * Aria label for the tab list menu\n   */\n  @Input() label = \"\";\n\n  /**\n   * Keep the content of off-screen tabs in the DOM.\n   * Useful for keeping <audio> or <video> elements from re-initializing\n   * after navigating between tabs.\n   */\n  @Input() preserveContent = false;\n\n  @ContentChildren(TabComponent) tabs: QueryList<TabComponent>;\n  @ViewChildren(TabListItemDirective) tabLabels: QueryList<TabListItemDirective>;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null {\n    return this._selectedIndex;\n  }\n  set selectedIndex(value: number) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<BitTabChangeEvent> =\n    new EventEmitter<BitTabChangeEvent>();\n\n  /**\n   * Focus key manager for keeping tab controls accessible.\n   * https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles/tablist_role#keyboard_interactions\n   */\n  keyManager: FocusKeyManager<TabListItemDirective>;\n\n  constructor() {\n    this._groupId = nextId++;\n  }\n\n  protected getTabContentId(id: number): string {\n    return `bit-tab-content-${this._groupId}-${id}`;\n  }\n\n  protected getTabLabelId(id: number): string {\n    return `bit-tab-label-${this._groupId}-${id}`;\n  }\n\n  selectTab(index: number) {\n    this.selectedIndex = index;\n  }\n\n  /**\n   * After content is checked, the tab group knows what tabs are defined and which index\n   * should be currently selected.\n   */\n  ngAfterContentChecked(): void {\n    const indexToSelect = (this._indexToSelect = this._clampTabIndex(this._indexToSelect));\n\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit({\n          index: indexToSelect,\n          tab: this.tabs.toArray()[indexToSelect],\n        });\n      }\n\n      // These values need to be updated after change detection as\n      // the checked content may have references to them.\n      Promise.resolve().then(() => {\n        this.tabs.forEach((tab, index) => (tab.isActive = index === indexToSelect));\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n\n      // Manually update the _selectedIndex and keyManager active item\n      this._selectedIndex = indexToSelect;\n      if (this.keyManager) {\n        this.keyManager.setActiveItem(indexToSelect);\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.keyManager = new FocusKeyManager(this.tabLabels)\n      .withHorizontalOrientation(\"ltr\")\n      .withWrap()\n      .withHomeAndEnd();\n  }\n\n  ngAfterContentInit() {\n    // Subscribe to any changes in the number of tabs, in order to be able\n    // to re-render content when new tabs are added or removed.\n    this.tabs.changes.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // If the selected tab didn't explicitly change, keep the previously\n      // selected tab selected/active\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this.tabs.toArray();\n        let selectedTab: TabComponent | undefined;\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Set both _indexToSelect and _selectedIndex to avoid firing a change\n            // event which could cause an infinite loop if adding a tab within the\n            // selectedIndexChange event\n            this._indexToSelect = this._selectedIndex = i;\n            selectedTab = tabs[i];\n            break;\n          }\n        }\n\n        // No active tab found and a tab does exist means the active tab\n        // was removed, so a new active tab must be set manually\n        if (!selectedTab && tabs[indexToSelect]) {\n          tabs[indexToSelect].isActive = true;\n          this.selectedTabChange.emit({\n            index: indexToSelect,\n            tab: tabs[indexToSelect],\n          });\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private _clampTabIndex(index: number): number {\n    return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));\n  }\n}\n\nexport class BitTabChangeEvent {\n  /**\n   * The currently selected tab index\n   */\n  index: number;\n  /**\n   * The currently selected tab\n   */\n  tab: TabComponent;\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport { SecretProjectView } from \"../../models/view/secret-project.view\";\nimport { SecretView } from \"../../models/view/secret.view\";\nimport { ProjectService } from \"../../projects/project.service\";\nimport { SecretService } from \"../secret.service\";\n\nexport enum OperationType {\n  Add,\n  Edit,\n}\n\nexport interface SecretOperation {\n  organizationId: string;\n  operation: OperationType;\n  projectId?: string;\n  secretId?: string;\n}\n\n@Component({\n  selector: \"sm-secret-dialog\",\n  templateUrl: \"./secret-dialog.component.html\",\n})\nexport class SecretDialogComponent implements OnInit {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", [Validators.required]),\n    value: new FormControl(\"\", [Validators.required]),\n    notes: new FormControl(\"\"),\n    project: new FormControl(\"\"),\n  });\n\n  protected loading = false;\n  projects: ProjectListView[];\n  selectedProjects: SecretProjectView[] = [];\n\n  private destroy$ = new Subject<void>();\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: SecretOperation,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private projectService: ProjectService\n  ) {}\n\n  async ngOnInit() {\n    this.projects = await this.projectService.getProjects(this.data.organizationId);\n\n    if (this.data.operation === OperationType.Edit && this.data.secretId) {\n      await this.loadData();\n    } else if (this.data.operation !== OperationType.Add) {\n      this.dialogRef.close();\n      throw new Error(`The secret dialog was not called with the appropriate operation values.`);\n    }\n\n    this.formGroup\n      .get(\"project\")\n      .valueChanges.pipe(takeUntil(this.destroy$))\n      .subscribe(() => this.updateProjectList());\n  }\n\n  async loadData() {\n    this.loading = true;\n    const secret: SecretView = await this.secretService.getBySecretId(this.data.secretId);\n    this.loading = false;\n    this.selectedProjects = secret.projects;\n    this.loading = false;\n    this.formGroup.setValue({\n      name: secret.name,\n      value: secret.value,\n      notes: secret.note,\n      project: \"\",\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  get title() {\n    return this.data.operation === OperationType.Add ? \"newSecret\" : \"editSecret\";\n  }\n\n  async removeProjectAssociation(id: string) {\n    this.selectedProjects = this.selectedProjects.filter((e) => e.id != id);\n    this.formGroup.get(\"project\").setValue(\"\");\n  }\n\n  updateProjectList() {\n    const newList: SecretProjectView[] = [];\n    const projectId = this.formGroup.get(\"project\").value;\n\n    if (projectId) {\n      const selectedProject = this.projects?.filter((p) => p.id == projectId)[0];\n\n      if (selectedProject != undefined) {\n        const projectSecretView = new SecretProjectView();\n\n        projectSecretView.id = selectedProject.id;\n        projectSecretView.name = selectedProject.name;\n\n        newList.push(projectSecretView);\n      }\n    }\n\n    this.selectedProjects = newList;\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const secretView = this.getSecretView();\n    if (this.data.operation === OperationType.Add) {\n      await this.createSecret(secretView);\n    } else {\n      secretView.id = this.data.secretId;\n      await this.updateSecret(secretView);\n    }\n    this.dialogRef.close();\n  };\n\n  private async createSecret(secretView: SecretView) {\n    await this.secretService.create(this.data.organizationId, secretView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"secretCreated\"));\n  }\n\n  private async updateSecret(secretView: SecretView) {\n    await this.secretService.update(this.data.organizationId, secretView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"secretEdited\"));\n  }\n\n  private getSecretView() {\n    const emptyProjects: SecretProjectView[] = [];\n\n    const secretView = new SecretView();\n    secretView.organizationId = this.data.organizationId;\n    secretView.name = this.formGroup.value.name;\n    secretView.value = this.formGroup.value.value;\n    secretView.note = this.formGroup.value.notes;\n    secretView.projects = this.selectedProjects ? this.selectedProjects : emptyProjects;\n    return secretView;\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"default\" disablePadding>\n    <ng-container bitDialogTitle>{{ title | i18n }}</ng-container>\n    <div bitDialogContent>\n      <div *ngIf=\"loading\" class=\"tw-text-center\">\n        <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n      </div>\n      <bit-tab-group *ngIf=\"!loading\">\n        <bit-tab [label]=\"'nameValuePair' | i18n\">\n          <div class=\"tw-flex tw-gap-4 tw-pt-4\">\n            <bit-form-field class=\"tw-w-1/3\">\n              <bit-label for=\"secret-name\">{{ \"name\" | i18n }}</bit-label>\n              <input formControlName=\"name\" bitInput />\n            </bit-form-field>\n            <bit-form-field class=\"tw-w-full\">\n              <bit-label>{{ \"value\" | i18n }}</bit-label>\n              <textarea bitInput rows=\"4\" formControlName=\"value\"></textarea>\n            </bit-form-field>\n          </div>\n          <bit-form-field>\n            <bit-label>{{ \"notes\" | i18n }}</bit-label>\n            <textarea bitInput rows=\"4\" formControlName=\"notes\"></textarea>\n          </bit-form-field>\n        </bit-tab>\n        <bit-tab [label]=\"'serviceAccounts' | i18n\"></bit-tab>\n        <bit-tab [label]=\"'projects' | i18n\">\n          <bit-label class=\"tw-text-md\">{{\n            \"secretProjectAssociationDescription\" | i18n\n          }}</bit-label>\n          <bit-form-field class=\"tw-mt-3\">\n            <bit-label>{{ \"project\" | i18n }}</bit-label>\n            <select bitInput name=\"project\" formControlName=\"project\">\n              <option *ngFor=\"let f of projects\" [value]=\"f.id\" (change)=\"updateProjectList()\">\n                {{ f.name }}\n              </option>\n            </select>\n          </bit-form-field>\n          <small class=\"form-text text-muted\">{{ \"typeOrSelectProject\" | i18n }}</small>\n\n          <bit-table>\n            <ng-container header>\n              <tr>\n                <th bitCell>{{ \"project\" | i18n }}</th>\n                <th bitCell></th>\n              </tr>\n            </ng-container>\n            <ng-container body *ngIf=\"selectedProjects != null\">\n              <tr bitRow *ngFor=\"let e of selectedProjects\">\n                <td bitCell>{{ e.name }}</td>\n                <td bitCell class=\"tw-w-0\">\n                  <button\n                    (click)=\"removeProjectAssociation(e.id)\"\n                    bitIconButton=\"bwi-close\"\n                    buttonType=\"main\"\n                    [title]=\"'options' | i18n\"\n                    [attr.aria-label]=\"'options' | i18n\"\n                  ></button>\n                </td>\n              </tr>\n            </ng-container>\n          </bit-table>\n        </bit-tab>\n      </bit-tab-group>\n    </div>\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"save\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </div>\n  </bit-dialog>\n</form>\n","import { View } from \"@bitwarden/common/models/view/view\";\n\nexport class ServiceAccountView implements View {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n}\n","import { EncString } from \"@bitwarden/common/models/domain/enc-string\";\n\nexport class ServiceAccountRequest {\n  name: EncString;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class ServiceAccountResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\n\nimport { ServiceAccountView } from \"../models/view/service-account.view\";\n\nimport { ServiceAccountRequest } from \"./models/requests/service-account.request\";\nimport { ServiceAccountResponse } from \"./models/responses/service-account.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ServiceAccountService {\n  protected _serviceAccount: Subject<ServiceAccountView> = new Subject();\n\n  serviceAccount$ = this._serviceAccount.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getServiceAccounts(organizationId: string): Promise<ServiceAccountView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/service-accounts\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, ServiceAccountResponse);\n    return await this.createServiceAccountViews(organizationId, results.data);\n  }\n\n  async create(organizationId: string, serviceAccountView: ServiceAccountView) {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = await this.getServiceAccountRequest(orgKey, serviceAccountView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/service-accounts\",\n      request,\n      true,\n      true\n    );\n    this._serviceAccount.next(\n      await this.createServiceAccountView(orgKey, new ServiceAccountResponse(r))\n    );\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async getServiceAccountRequest(\n    organizationKey: SymmetricCryptoKey,\n    serviceAccountView: ServiceAccountView\n  ) {\n    const request = new ServiceAccountRequest();\n    request.name = await this.encryptService.encrypt(serviceAccountView.name, organizationKey);\n    return request;\n  }\n\n  private async createServiceAccountView(\n    organizationKey: SymmetricCryptoKey,\n    serviceAccountResponse: ServiceAccountResponse\n  ): Promise<ServiceAccountView> {\n    const serviceAccountView = new ServiceAccountView();\n    serviceAccountView.id = serviceAccountResponse.id;\n    serviceAccountView.organizationId = serviceAccountResponse.organizationId;\n    serviceAccountView.creationDate = serviceAccountResponse.creationDate;\n    serviceAccountView.revisionDate = serviceAccountResponse.revisionDate;\n    serviceAccountView.name = await this.encryptService.decryptToUtf8(\n      new EncString(serviceAccountResponse.name),\n      organizationKey\n    );\n    return serviceAccountView;\n  }\n\n  private async createServiceAccountViews(\n    organizationId: string,\n    serviceAccountResponses: ServiceAccountResponse[]\n  ): Promise<ServiceAccountView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      serviceAccountResponses.map(async (s: ServiceAccountResponse) => {\n        return await this.createServiceAccountView(orgKey, s);\n      })\n    );\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"default\">\n    <ng-container bitDialogTitle>{{ \"newServiceAccount\" | i18n }}</ng-container>\n    <div bitDialogContent>\n      <bit-form-field>\n        <bit-label>{{ \"serviceAccountName\" | i18n }}</bit-label>\n        <input formControlName=\"name\" bitInput />\n      </bit-form-field>\n      <h3 class=\"tw-uppercase\">{{ \"smAccess\" | i18n }}</h3>\n\n      <bit-form-field>\n        <bit-label>{{ \"newSaSelectAccess\" | i18n }}</bit-label>\n        <select bitInput>\n          <!-- TODO need to look into creating a bit autocomplete component? -->\n          <option selected disabled hidden>-- {{ \"newSaTypeToFilter\" | i18n }} --</option>\n          <option *ngFor=\"let project of projects\">\n            {{ project.name }}\n          </option>\n          <option *ngFor=\"let secret of secrets\">\n            {{ secret.name }}\n          </option>\n        </select>\n      </bit-form-field>\n\n      <bit-table>\n        <ng-container header>\n          <tr>\n            <th bitCell>{{ \"projectCommaSecret\" | i18n }}</th>\n            <th bitCell>{{ \"permissions\" | i18n }}</th>\n          </tr>\n        </ng-container>\n        <ng-container body>\n          <tr>\n            <!-- TODO once access is implement display selected access -->\n            <td bitCell>example</td>\n            <td bitCell>example</td>\n          </tr>\n        </ng-container>\n      </bit-table>\n    </div>\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"save\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </div>\n  </bit-dialog>\n</form>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport { SecretListView } from \"../../models/view/secret-list.view\";\nimport { ServiceAccountView } from \"../../models/view/service-account.view\";\nimport { ProjectService } from \"../../projects/project.service\";\nimport { SecretService } from \"../../secrets/secret.service\";\nimport { ServiceAccountService } from \"../service-account.service\";\n\nexport interface ServiceAccountOperation {\n  organizationId: string;\n}\n\n@Component({\n  selector: \"sm-service-account-dialog\",\n  templateUrl: \"./service-account-dialog.component.html\",\n})\nexport class ServiceAccountDialogComponent implements OnInit {\n  projects: ProjectListView[];\n  secrets: SecretListView[];\n\n  formGroup = new FormGroup({\n    name: new FormControl(\"\", [Validators.required]),\n  });\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: ServiceAccountOperation,\n    private serviceAccountService: ServiceAccountService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private projectService: ProjectService,\n    private secretService: SecretService\n  ) {}\n\n  async ngOnInit() {\n    this.projects = await this.projectService.getProjects(this.data.organizationId);\n    this.secrets = await this.secretService.getSecrets(this.data.organizationId);\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const serviceAccountView = this.getServiceAccountView();\n    await this.serviceAccountService.create(this.data.organizationId, serviceAccountView);\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"serviceAccountCreated\")\n    );\n    this.dialogRef.close();\n  };\n\n  private getServiceAccountView() {\n    const serviceAccountView = new ServiceAccountView();\n    serviceAccountView.organizationId = this.data.organizationId;\n    serviceAccountView.name = this.formGroup.value.name;\n    return serviceAccountView;\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport {\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../projects/dialog/project-dialog.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"../secrets/dialog/secret-dialog.component\";\nimport {\n  ServiceAccountDialogComponent,\n  ServiceAccountOperation,\n} from \"../service-accounts/dialog/service-account-dialog.component\";\n\n@Component({\n  selector: \"sm-new-menu\",\n  templateUrl: \"./new-menu.component.html\",\n})\nexport class NewMenuComponent implements OnInit, OnDestroy {\n  private organizationId: string;\n  private destroy$: Subject<void> = new Subject<void>();\n\n  constructor(private route: ActivatedRoute, private dialogService: DialogService) {}\n\n  ngOnInit() {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params: any) => {\n      this.organizationId = params.organizationId;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  openSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openProjectDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openServiceAccountDialog() {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n      },\n    });\n  }\n}\n","<div class=\"tw-mb-3 tw-flex tw-items-center tw-gap-2\" *ngIf=\"routeData$ | async as routeData\">\n  <h1 class=\"tw-m-0 tw-mr-2 tw-text-3xl tw-font-semibold\">{{ routeData.title | i18n }}</h1>\n  <div class=\"tw-ml-auto tw-w-1/4\">\n    <input bitInput class=\"search tw-w-full\" placeholder=\"{{ routeData.searchTitle | i18n }}\" />\n  </div>\n  <sm-new-menu></sm-new-menu>\n  <product-switcher></product-switcher>\n  <ng-container *ngIf=\"account$ | async as account\">\n    <button [bitMenuTriggerFor]=\"accountMenu\" class=\"tw-border-0 tw-bg-transparent tw-p-0\">\n      <bit-avatar [id]=\"account.userId\" [text]=\"account.name || account.email\"></bit-avatar>\n    </button>\n\n    <bit-menu #accountMenu>\n      <div class=\"tw-flex tw-min-w-52 tw-max-w-72 tw-flex-col\">\n        <div\n          class=\"tw-flex tw-items-center tw-py-1 tw-px-4 tw-leading-tight tw-text-info\"\n          appStopProp\n        >\n          <bit-avatar [text]=\"account.name || account.email\" [id]=\"account.userId\"></bit-avatar>\n          <div class=\"tw-ml-2 tw-block tw-overflow-hidden tw-whitespace-nowrap\">\n            <span>{{ \"loggedInAs\" | i18n }}</span>\n            <small class=\"tw-block tw-overflow-hidden tw-whitespace-nowrap tw-text-muted\">\n              {{ account.name }}\n            </small>\n          </div>\n        </div>\n\n        <bit-menu-divider></bit-menu-divider>\n\n        <a bitMenuItem routerLink=\"/settings/account\">\n          <i class=\"bwi bwi-fw bwi-user\" aria-hidden=\"true\"></i>\n          {{ \"accountSettings\" | i18n }}\n        </a>\n        <a bitMenuItem href=\"https://bitwarden.com/help/\" target=\"_blank\" rel=\"noopener\">\n          <i class=\"bwi bwi-fw bwi-question-circle\" aria-hidden=\"true\"></i>\n          {{ \"getHelp\" | i18n }}\n        </a>\n        <a bitMenuItem href=\"https://bitwarden.com/download/\" target=\"_blank\" rel=\"noopener\">\n          <i class=\"bwi bwi-fw bwi-download\" aria-hidden=\"true\"></i>\n          {{ \"getApps\" | i18n }}\n        </a>\n\n        <bit-menu-divider></bit-menu-divider>\n\n        <button bitMenuItem type=\"button\">\n          <i class=\"bwi bwi-fw bwi-lock\" aria-hidden=\"true\"></i>\n          {{ \"lockNow\" | i18n }}\n        </button>\n        <button bitMenuItem type=\"button\">\n          <i class=\"bwi bwi-fw bwi-sign-out\" aria-hidden=\"true\"></i>\n          {{ \"logOut\" | i18n }}\n        </button>\n      </div>\n    </bit-menu>\n  </ng-container>\n</div>\n","<button bitButton buttonType=\"primary\" [bitMenuTriggerFor]=\"newMenu\">\n  {{ \"new\" | i18n }} <i class=\"bwi bwi-angle-down\" aria-hidden=\"true\"></i>\n</button>\n\n<bit-menu #newMenu>\n  <button type=\"button\" bitMenuItem (click)=\"openProjectDialog()\">\n    <i class=\"bwi bwi-fw bwi-sitemap tw-text-xl\" aria-hidden=\"true\"></i>\n    {{ \"project\" | i18n }}\n  </button>\n  <button type=\"button\" bitMenuItem (click)=\"openSecretDialog()\">\n    <i class=\"bwi bwi-fw bwi-key tw-text-xl\" aria-hidden=\"true\"></i>\n    {{ \"secret\" | i18n }}\n  </button>\n  <button type=\"button\" bitMenuItem (click)=\"openServiceAccountDialog()\">\n    <i class=\"bwi bwi-fw bwi-wrench tw-text-xl\" aria-hidden=\"true\"></i>\n    {{ \"serviceAccount\" | i18n }}\n  </button>\n</bit-menu>\n","import { Component, Input } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, map, Observable } from \"rxjs\";\n\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { AccountProfile } from \"@bitwarden/common/models/domain/account\";\n\n@Component({\n  selector: \"sm-header\",\n  templateUrl: \"./header.component.html\",\n})\nexport class HeaderComponent {\n  @Input() title: string;\n  @Input() searchTitle: string;\n\n  protected routeData$: Observable<{ title: string; searchTitle: string }>;\n  protected account$: Observable<AccountProfile>;\n\n  constructor(private route: ActivatedRoute, private stateService: StateService) {\n    this.routeData$ = this.route.data.pipe(\n      map((params) => {\n        return {\n          title: params.title,\n          searchTitle: params.searchTitle,\n        };\n      })\n    );\n\n    this.account$ = combineLatest([\n      this.stateService.activeAccount$,\n      this.stateService.accounts$,\n    ]).pipe(\n      map(([activeAccount, accounts]) => {\n        return accounts[activeAccount]?.profile;\n      })\n    );\n  }\n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-overview\",\n  templateUrl: \"./overview.component.html\",\n})\nexport class OverviewComponent {}\n","<sm-header></sm-header>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { OverviewComponent } from \"./overview.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: OverviewComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OverviewRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { OverviewRoutingModule } from \"./overview-routing.module\";\nimport { OverviewComponent } from \"./overview.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, OverviewRoutingModule],\n  declarations: [OverviewComponent],\n  providers: [],\n})\nexport class OverviewModule {}\n","<bit-simple-dialog>\n  <span bitDialogTitle>{{ title | i18n }}</span>\n  <span bitDialogContent class=\"tw-text-sm\">\n    <div *ngIf=\"data.secretIds.length === 1\">\n      {{ \"softDeleteSecretWarning\" | i18n }}\n    </div>\n    {{ \"deleteItemConfirmation\" | i18n }}\n  </span>\n  <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n    <button type=\"button\" bitButton buttonType=\"primary\" [bitAction]=\"delete\">\n      {{ title | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </div>\n</bit-simple-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\n\nimport { SecretService } from \"../secret.service\";\n\nexport interface SecretDeleteOperation {\n  secretIds: string[];\n}\n\n@Component({\n  selector: \"sm-secret-delete-dialog\",\n  templateUrl: \"./secret-delete.component.html\",\n})\nexport class SecretDeleteDialogComponent {\n  constructor(\n    public dialogRef: DialogRef,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    @Inject(DIALOG_DATA) public data: SecretDeleteOperation\n  ) {}\n\n  get title() {\n    return this.data.secretIds.length === 1 ? \"deleteSecret\" : \"deleteSecrets\";\n  }\n\n  delete = async () => {\n    await this.secretService.delete(this.data.secretIds);\n    this.dialogRef.close();\n    const message =\n      this.data.secretIds.length === 1 ? \"softDeleteSuccessToast\" : \"softDeletesSuccessToast\";\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  };\n}\n","import { Component } from \"@angular/core\";\n\nimport { Icons } from \"@bitwarden/components\";\n\n@Component({\n  selector: \"sm-no-items\",\n  templateUrl: \"./no-items.component.html\",\n})\nexport class NoItemsComponent {\n  protected icon = Icons.Search;\n}\n","<div *ngIf=\"!secrets\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<sm-no-items *ngIf=\"secrets?.length == 0\">\n  <ng-container title>{{ \"secretsNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container description>{{ \"secretsNoItemsMessage\" | i18n }}</ng-container>\n  <button bitButton buttonType=\"secondary\" (click)=\"newSecretEvent.emit()\">\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newSecret\" | i18n }}\n  </button>\n</sm-no-items>\n\n<bit-table *ngIf=\"secrets?.length >= 1\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"!tw-mb-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell colspan=\"2\">{{ \"name\" | i18n }}</th>\n      <th bitCell>{{ \"project\" | i18n }}</th>\n      <th bitCell>{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-container body>\n    <tr bitRow *ngFor=\"let secret of secrets\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(secret.id) : null\"\n          [checked]=\"selection.isSelected(secret.id)\"\n        />\n      </td>\n      <td bitCell class=\"tw-w-0 tw-pr-0\">\n        <i class=\"bwi bwi-key tw-text-xl tw-text-muted\" aria-hidden=\"true\"></i>\n      </td>\n      <td bitCell class=\"tw-break-all\">{{ secret.name }}</td>\n      <td bitCell>\n        <span\n          *ngFor=\"let project of secret.projects\"\n          bitBadge\n          badgeType=\"secondary\"\n          class=\"tw-ml-1\"\n        >\n          {{ project.name }}\n        </span>\n      </td>\n      <td bitCell>{{ secret.revisionDate | date: \"medium\" }}</td>\n      <td bitCell>\n        <button\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"secretMenu\"\n        ></button>\n      </td>\n\n      <bit-menu #secretMenu>\n        <button type=\"button\" bitMenuItem (click)=\"editSecretEvent.emit(secret.id)\">\n          <i class=\"bwi bwi-fw bwi-pencil tw-text-xl\" aria-hidden=\"true\"></i>\n          {{ \"editSecret\" | i18n }}\n        </button>\n        <button type=\"button\" bitMenuItem (click)=\"copySecretNameEvent.emit(secret.id)\">\n          <i class=\"bwi bwi-fw bwi-clone tw-text-xl\" aria-hidden=\"true\"></i>\n          {{ \"copySecretName\" | i18n }}\n        </button>\n        <button type=\"button\" bitMenuItem (click)=\"copySecretValueEvent.emit(secret.id)\">\n          <i class=\"bwi bwi-fw bwi-clone tw-text-xl\" aria-hidden=\"true\"></i>\n          {{ \"copySecretValue\" | i18n }}\n        </button>\n        <button type=\"button\" bitMenuItem (click)=\"projectsEvent.emit(secret.id)\">\n          <i class=\"bwi bwi-fw bwi-sitemap tw-text-xl\" aria-hidden=\"true\"></i>\n          {{ \"projects\" | i18n }}\n        </button>\n        <button type=\"button\" bitMenuItem (click)=\"deleteSecretsEvent.emit([secret.id])\">\n          <i class=\"bwi bwi-fw bwi-trash tw-text-xl tw-text-danger\" aria-hidden=\"true\"></i>\n          <span class=\"tw-text-danger\">{{ \"deleteSecret\" | i18n }}</span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-container>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem>\n    <i class=\"bwi bwi-fw bwi-sitemap tw-text-xl\" aria-hidden=\"true\"></i>\n    {{ \"projects\" | i18n }}\n  </button>\n  <button type=\"button\" bitMenuItem (click)=\"bulkDeleteSecrets()\">\n    <i class=\"bwi bwi-fw bwi-trash tw-text-xl tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">{{ \"deleteSecrets\" | i18n }}</span>\n  </button>\n</bit-menu>\n","<div\n  class=\"tw-mx-auto tw-flex tw-flex-col tw-items-center tw-justify-center tw-pt-6 tw-text-center\"\n>\n  <div class=\"tw-max-w-sm\">\n    <bit-icon [icon]=\"icon\" aria-hidden=\"true\"></bit-icon>\n    <h3 class=\"tw-font-semibold\">\n      <ng-content select=\"[title]\"></ng-content>\n    </h3>\n    <p>\n      <ng-content select=\"[description]\"></ng-content>\n    </p>\n  </div>\n  <div class=\"tw-space-x-2\">\n    <ng-content select=\"[bitButton]\"></ng-content>\n  </div>\n</div>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, OnDestroy, Output } from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\n\n@Component({\n  selector: \"sm-secrets-list\",\n  templateUrl: \"./secrets-list.component.html\",\n})\nexport class SecretsListComponent implements OnDestroy {\n  @Input()\n  get secrets(): SecretListView[] {\n    return this._secrets;\n  }\n  set secrets(secrets: SecretListView[]) {\n    this.selection.clear();\n    this._secrets = secrets;\n  }\n  private _secrets: SecretListView[];\n\n  @Output() editSecretEvent = new EventEmitter<string>();\n  @Output() copySecretNameEvent = new EventEmitter<string>();\n  @Output() copySecretValueEvent = new EventEmitter<string>();\n  @Output() projectsEvent = new EventEmitter<string>();\n  @Output() onSecretCheckedEvent = new EventEmitter<string[]>();\n  @Output() deleteSecretsEvent = new EventEmitter<string[]>();\n  @Output() newSecretEvent = new EventEmitter();\n\n  private destroy$: Subject<void> = new Subject<void>();\n\n  selection = new SelectionModel<string>(true, []);\n\n  constructor() {\n    this.selection.changed\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((_) => this.onSecretCheckedEvent.emit(this.selection.selected));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.secrets.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.secrets.map((s) => s.id));\n  }\n\n  bulkDeleteSecrets() {\n    if (this.selection.selected.length >= 1) {\n      this.deleteSecretsEvent.emit(this.selection.selected);\n    }\n  }\n}\n","<ng-container *ngIf=\"secrets$ | async as secrets; else spinner\">\n  <div *ngIf=\"secrets.length > 0\" class=\"float-right tw-mt-3 tw-items-center\">\n    <button bitButton buttonType=\"secondary\" (click)=\"openNewSecretDialog()\">\n      <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n      {{ \"newSecret\" | i18n }}\n    </button>\n  </div>\n  <sm-secrets-list\n    (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n    (newSecretEvent)=\"openNewSecretDialog()\"\n    (editSecretEvent)=\"openEditSecret($event)\"\n    [secrets]=\"secrets\"\n  ></sm-secrets-list>\n</ng-container>\n\n<ng-template #spinner>\n  <div class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n  </div>\n</ng-template>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { SecretListView } from \"../../models/view/secret-list.view\";\nimport {\n  SecretDeleteDialogComponent,\n  SecretDeleteOperation,\n} from \"../../secrets/dialog/secret-delete.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"../../secrets/dialog/secret-dialog.component\";\nimport { SecretService } from \"../../secrets/secret.service\";\n\n@Component({\n  selector: \"sm-project-secrets\",\n  templateUrl: \"./project-secrets.component.html\",\n})\nexport class ProjectSecretsComponent {\n  secrets$: Observable<SecretListView[]>;\n\n  private organizationId: string;\n  private projectId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private secretService: SecretService,\n    private dialogService: DialogService\n  ) {}\n\n  ngOnInit() {\n    this.secrets$ = this.secretService.secret$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        this.projectId = params.projectId;\n        return await this.getSecretsByProject();\n      })\n    );\n  }\n\n  private async getSecretsByProject(): Promise<SecretListView[]> {\n    return await this.secretService.getSecretsByProject(this.organizationId, this.projectId);\n  }\n\n  openEditSecret(secretId: string) {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        secretId: secretId,\n      },\n    });\n  }\n\n  openDeleteSecret(secretIds: string[]) {\n    this.dialogService.open<unknown, SecretDeleteOperation>(SecretDeleteDialogComponent, {\n      data: {\n        secretIds: secretIds,\n      },\n    });\n  }\n\n  openNewSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n        projectId: this.projectId,\n      },\n    });\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Observable, switchMap } from \"rxjs\";\n\nimport { ProjectView } from \"../../models/view/project.view\";\nimport { ProjectService } from \"../project.service\";\n\n@Component({\n  selector: \"sm-project\",\n  templateUrl: \"./project.component.html\",\n})\nexport class ProjectComponent implements OnInit {\n  project: Observable<ProjectView>;\n\n  constructor(private route: ActivatedRoute, private projectService: ProjectService) {}\n\n  ngOnInit(): void {\n    this.project = this.route.params.pipe(\n      switchMap((params) => {\n        return this.projectService.getByProjectId(params.projectId);\n      })\n    );\n  }\n}\n","<sm-header title=\"project\" searchTitle=\"searchProjects\"></sm-header>\n\n<bit-tab-nav-bar label=\"Main\">\n  <bit-tab-link [route]=\"['secrets']\">Secrets</bit-tab-link>\n  <bit-tab-link [route]=\"['access']\">Access</bit-tab-link>\n</bit-tab-nav-bar>\n\n<router-outlet></router-outlet>\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"small\">\n    <ng-container bitDialogTitle>\n      <span>{{ title | i18n }}</span>\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        <ng-container *ngIf=\"data.projects.length == 1\">\n          {{ data.projects[0].name }}\n        </ng-container>\n        <ng-container *ngIf=\"data.projects.length > 1\">\n          {{ data.projects.length }}\n          {{ \"projects\" | i18n }}\n        </ng-container>\n      </span>\n    </ng-container>\n\n    <div bitDialogContent>\n      <bit-callout type=\"warning\" [title]=\"'warning' | i18n\">\n        {{ dialogContent }}\n      </bit-callout>\n      <bit-form-field>\n        <bit-label>{{ dialogConfirmationLabel }}</bit-label>\n        <input bitInput formControlName=\"confirmDelete\" />\n      </bit-form-field>\n    </div>\n\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button type=\"submit\" bitButton buttonType=\"danger\" bitFormButton>\n        {{ title | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </div>\n  </bit-dialog>\n</form>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport {\n  FormControl,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  AbstractControl,\n} from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport {\n  BulkOperationStatus,\n  BulkStatusDetails,\n  BulkStatusDialogComponent,\n} from \"../../layout/dialogs/bulk-status-dialog.component\";\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport { ProjectService } from \"../project.service\";\n\nexport interface ProjectDeleteOperation {\n  projects: ProjectListView[];\n}\n\n@Component({\n  selector: \"sm-project-delete-dialog\",\n  templateUrl: \"./project-delete-dialog.component.html\",\n})\nexport class ProjectDeleteDialogComponent implements OnInit {\n  formGroup = new FormGroup({\n    confirmDelete: new FormControl(\"\", [this.matchConfirmationMessageValidator()]),\n  });\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: ProjectDeleteOperation,\n    private projectService: ProjectService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private dialogService: DialogService\n  ) {}\n\n  ngOnInit(): void {\n    if (!(this.data.projects?.length >= 1)) {\n      this.dialogRef.close();\n      throw new Error(\n        \"The project delete dialog was not called with the appropriate operation values.\"\n      );\n    }\n  }\n\n  get title() {\n    return this.data.projects.length === 1 ? \"deleteProject\" : \"deleteProjects\";\n  }\n\n  get dialogContent() {\n    return this.data.projects.length === 1\n      ? this.i18nService.t(\"deleteProjectDialogMessage\", this.data.projects[0].name)\n      : this.i18nService.t(\"deleteProjectsDialogMessage\");\n  }\n\n  get dialogConfirmationLabel() {\n    return this.i18nService.t(\"deleteProjectInputLabel\", this.dialogConfirmationMessage);\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    await this.delete();\n    this.dialogRef.close();\n  };\n\n  async delete() {\n    const bulkResponses = await this.projectService.delete(this.data.projects);\n\n    if (bulkResponses.find((response) => response.errorMessage)) {\n      this.openBulkStatusDialog(bulkResponses.filter((response) => response.errorMessage));\n      return;\n    }\n\n    const message = this.data.projects.length === 1 ? \"deleteProjectToast\" : \"deleteProjectsToast\";\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  }\n\n  openBulkStatusDialog(bulkStatusResults: BulkOperationStatus[]) {\n    this.dialogService.open<unknown, BulkStatusDetails>(BulkStatusDialogComponent, {\n      data: {\n        title: \"deleteProjects\",\n        subTitle: \"projects\",\n        columnTitle: \"projectName\",\n        message: \"bulkDeleteProjectsErrorMessage\",\n        details: bulkStatusResults,\n      },\n    });\n  }\n\n  private get dialogConfirmationMessage() {\n    return this.data.projects?.length === 1\n      ? this.i18nService.t(\"deleteProjectConfirmMessage\", this.data.projects[0].name)\n      : this.i18nService.t(\"deleteProjectsConfirmMessage\", this.data.projects?.length.toString());\n  }\n\n  private matchConfirmationMessageValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (this.dialogConfirmationMessage.toLowerCase() == control.value.toLowerCase()) {\n        return null;\n      } else {\n        return {\n          confirmationDoesntMatchError: {\n            message: this.i18nService.t(\"smConfirmationRequired\"),\n          },\n        };\n      }\n    };\n  }\n}\n","<div *ngIf=\"!projects\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<sm-no-items *ngIf=\"projects?.length == 0\">\n  <ng-container title>{{ \"projectsNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container description>{{ \"projectsNoItemsMessage\" | i18n }}</ng-container>\n  <button bitButton buttonType=\"secondary\" (click)=\"newProjectEvent.emit()\">\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newProject\" | i18n }}\n  </button>\n</sm-no-items>\n\n<bit-table *ngIf=\"projects?.length >= 1\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"!tw-mb-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell colspan=\"2\">{{ \"name\" | i18n }}</th>\n      <th bitCell>{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-container body>\n    <tr bitRow *ngFor=\"let project of projects; index as i\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(project.id) : null\"\n          [checked]=\"selection.isSelected(project.id)\"\n        />\n      </td>\n      <td bitCell class=\"tw-w-0 tw-pr-0\">\n        <i class=\"bwi bwi-collection tw-text-xl tw-text-muted\" aria-hidden=\"true\"></i>\n      </td>\n      <td bitCell class=\"tw-break-all\">\n        <a [routerLink]=\"[project.id]\">{{ project.name }}</a>\n      </td>\n      <td bitCell>{{ project.revisionDate | date: \"medium\" }}</td>\n      <td bitCell>\n        <button\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [bitMenuTriggerFor]=\"projectMenu\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n        ></button>\n      </td>\n      <bit-menu #projectMenu>\n        <button type=\"button\" bitMenuItem (click)=\"editProjectEvent.emit(project.id)\">\n          <i class=\"bwi bwi-fw bwi-pencil tw-text-xl\" aria-hidden=\"true\"></i>\n          {{ \"editProject\" | i18n }}\n        </button>\n        <button type=\"button\" bitMenuItem (click)=\"viewProjectEvent.emit(project.id)\">\n          <i class=\"bwi bwi-fw bwi-eye tw-text-xl\" aria-hidden=\"true\"></i>\n          {{ \"viewProject\" | i18n }}\n        </button>\n        <button type=\"button\" bitMenuItem (click)=\"deleteProject(project.id)\">\n          <i class=\"bwi bwi-fw bwi-trash tw-text-xl tw-text-danger\" aria-hidden=\"true\"></i>\n          <span class=\"tw-text-danger\">{{ \"deleteProject\" | i18n }}</span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-container>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"bulkDeleteProjects()\">\n    <i class=\"bwi bwi-fw bwi-trash tw-text-xl tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">{{ \"deleteProjects\" | i18n }}</span>\n  </button>\n</bit-menu>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, OnDestroy, Output } from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\n\n@Component({\n  selector: \"sm-projects-list\",\n  templateUrl: \"./projects-list.component.html\",\n})\nexport class ProjectsListComponent implements OnDestroy {\n  @Input()\n  get projects(): ProjectListView[] {\n    return this._projects;\n  }\n  set projects(projects: ProjectListView[]) {\n    this.selection.clear();\n    this._projects = projects;\n  }\n  private _projects: ProjectListView[];\n\n  @Output() editProjectEvent = new EventEmitter<string>();\n  @Output() viewProjectEvent = new EventEmitter<string>();\n  @Output() deleteProjectEvent = new EventEmitter<ProjectListView[]>();\n  @Output() onProjectCheckedEvent = new EventEmitter<string[]>();\n  @Output() newProjectEvent = new EventEmitter();\n\n  private destroy$: Subject<void> = new Subject<void>();\n\n  selection = new SelectionModel<string>(true, []);\n\n  constructor() {\n    this.selection.changed\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((_) => this.onProjectCheckedEvent.emit(this.selection.selected));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.projects.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.projects.map((s) => s.id));\n  }\n\n  deleteProject(projectId: string) {\n    this.deleteProjectEvent.emit(this.projects.filter((p) => p.id == projectId));\n  }\n\n  bulkDeleteProjects() {\n    this.deleteProjectEvent.emit(\n      this.projects.filter((project) => this.selection.isSelected(project.id))\n    );\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport {\n  ProjectDeleteDialogComponent,\n  ProjectDeleteOperation,\n} from \"../dialog/project-delete-dialog.component\";\nimport {\n  OperationType,\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../dialog/project-dialog.component\";\nimport { ProjectService } from \"../project.service\";\n\n@Component({\n  selector: \"sm-projects\",\n  templateUrl: \"./projects.component.html\",\n})\nexport class ProjectsComponent implements OnInit {\n  projects$: Observable<ProjectListView[]>;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private projectService: ProjectService,\n    private dialogService: DialogService\n  ) {}\n\n  ngOnInit() {\n    this.projects$ = this.projectService.project$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getProjects();\n      })\n    );\n  }\n\n  private async getProjects(): Promise<ProjectListView[]> {\n    return await this.projectService.getProjects(this.organizationId);\n  }\n\n  openEditProject(projectId: string) {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        projectId: projectId,\n      },\n    });\n  }\n\n  openNewProjectDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openDeleteProjectDialog(event: ProjectListView[]) {\n    this.dialogService.open<unknown, ProjectDeleteOperation>(ProjectDeleteDialogComponent, {\n      data: {\n        projects: event,\n      },\n    });\n  }\n}\n","<sm-header></sm-header>\n<sm-projects-list\n  (newProjectEvent)=\"openNewProjectDialog()\"\n  (editProjectEvent)=\"openEditProject($event)\"\n  (deleteProjectEvent)=\"openDeleteProjectDialog($event)\"\n  [projects]=\"projects$ | async\"\n>\n</sm-projects-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { ProjectSecretsComponent } from \"./project/project-secrets.component\";\nimport { ProjectComponent } from \"./project/project.component\";\nimport { ProjectsComponent } from \"./projects/projects.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ProjectsComponent,\n  },\n  {\n    path: \":projectId\",\n    component: ProjectComponent,\n    children: [\n      {\n        path: \"\",\n        pathMatch: \"full\",\n        redirectTo: \"secrets\",\n      },\n      {\n        path: \"secrets\",\n        component: ProjectSecretsComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ProjectsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { ProjectDeleteDialogComponent } from \"./dialog/project-delete-dialog.component\";\nimport { ProjectDialogComponent } from \"./dialog/project-dialog.component\";\nimport { ProjectSecretsComponent } from \"./project/project-secrets.component\";\nimport { ProjectComponent } from \"./project/project.component\";\nimport { ProjectsListComponent } from \"./projects-list/projects-list.component\";\nimport { ProjectsRoutingModule } from \"./projects-routing.module\";\nimport { ProjectsComponent } from \"./projects/projects.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, ProjectsRoutingModule],\n  declarations: [\n    ProjectsComponent,\n    ProjectsListComponent,\n    ProjectDialogComponent,\n    ProjectDeleteDialogComponent,\n    ProjectComponent,\n    ProjectSecretsComponent,\n  ],\n  providers: [],\n})\nexport class ProjectsModule {}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\n\nimport {\n  SecretDeleteDialogComponent,\n  SecretDeleteOperation,\n} from \"./dialog/secret-delete.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"./dialog/secret-dialog.component\";\nimport { SecretService } from \"./secret.service\";\n\n@Component({\n  selector: \"sm-secrets\",\n  templateUrl: \"./secrets.component.html\",\n})\nexport class SecretsComponent implements OnInit {\n  secrets$: Observable<SecretListView[]>;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private secretService: SecretService,\n    private dialogService: DialogService\n  ) {}\n\n  ngOnInit() {\n    this.secrets$ = this.secretService.secret$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getSecrets();\n      })\n    );\n  }\n\n  private async getSecrets(): Promise<SecretListView[]> {\n    return await this.secretService.getSecrets(this.organizationId);\n  }\n\n  openEditSecret(secretId: string) {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        secretId: secretId,\n      },\n    });\n  }\n\n  openDeleteSecret(secretIds: string[]) {\n    this.dialogService.open<unknown, SecretDeleteOperation>(SecretDeleteDialogComponent, {\n      data: {\n        secretIds: secretIds,\n      },\n    });\n  }\n\n  openNewSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n}\n","<sm-header></sm-header>\n<sm-secrets-list\n  (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n  (newSecretEvent)=\"openNewSecretDialog()\"\n  (editSecretEvent)=\"openEditSecret($event)\"\n  [secrets]=\"secrets$ | async\"\n></sm-secrets-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { SecretsComponent } from \"./secrets.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: SecretsComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SecretsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { SecretDeleteDialogComponent } from \"./dialog/secret-delete.component\";\nimport { SecretDialogComponent } from \"./dialog/secret-dialog.component\";\nimport { SecretsRoutingModule } from \"./secrets-routing.module\";\nimport { SecretsComponent } from \"./secrets.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, SecretsRoutingModule],\n  declarations: [SecretsComponent, SecretDialogComponent, SecretDeleteDialogComponent],\n  providers: [],\n})\nexport class SecretsModule {}\n","import { EncString } from \"@bitwarden/common/models/domain/enc-string\";\n\nexport class AccessTokenRequest {\n  name: EncString;\n  encryptedPayload: EncString;\n  key: EncString;\n  expireAt: Date;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class AccessTokenCreationResponse extends BaseResponse {\n  id: string;\n  name: string;\n  clientSecret: string;\n  expireAt?: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.clientSecret = this.getResponseProperty(\"ClientSecret\");\n    this.expireAt = this.getResponseProperty(\"ExpireAt\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class AccessTokenResponse extends BaseResponse {\n  id: string;\n  name: string;\n  scopes: string[];\n  expireAt?: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.scopes = this.getResponseProperty(\"Scopes\");\n    this.expireAt = this.getResponseProperty(\"ExpireAt\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { View } from \"@bitwarden/common/models/view/view\";\n\nexport class AccessTokenView implements View {\n  id: string;\n  name: string;\n  scopes: string[];\n  expireAt?: Date;\n  creationDate: Date;\n  revisionDate: Date;\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"@bitwarden/common/abstractions/cryptoFunction.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\n\nimport { AccessTokenRequest } from \"../models/requests/access-token.request\";\nimport { AccessTokenCreationResponse } from \"../models/responses/access-token-creation.response\";\nimport { AccessTokenResponse } from \"../models/responses/access-tokens.response\";\nimport { AccessTokenView } from \"../models/view/access-token.view\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AccessService {\n  private readonly _accessTokenVersion = \"0\";\n  protected _accessToken: Subject<AccessTokenView> = new Subject();\n\n  accessToken$ = this._accessToken.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getAccessTokens(\n    organizationId: string,\n    serviceAccountId: string\n  ): Promise<AccessTokenView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-tokens\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, AccessTokenResponse);\n\n    return await this.createAccessTokenViews(organizationId, results.data);\n  }\n\n  async createAccessToken(\n    organizationId: string,\n    serviceAccountId: string,\n    accessTokenView: AccessTokenView\n  ): Promise<string> {\n    const keyMaterial = await this.cryptoFunctionService.randomBytes(16);\n    const key = await this.cryptoFunctionService.hkdf(\n      keyMaterial,\n      \"bitwarden-accesstoken\",\n      \"sm-access-token\",\n      64,\n      \"sha256\"\n    );\n    const encryptionKey = new SymmetricCryptoKey(key);\n\n    const request = await this.createAccessTokenRequest(\n      organizationId,\n      encryptionKey,\n      accessTokenView\n    );\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-tokens\",\n      request,\n      true,\n      true\n    );\n    const result = new AccessTokenCreationResponse(r);\n    this._accessToken.next(null);\n    const b64Key = Utils.fromBufferToB64(keyMaterial);\n    return `${this._accessTokenVersion}.${result.id}.${result.clientSecret}:${b64Key}`;\n  }\n\n  private async createAccessTokenRequest(\n    organizationId: string,\n    encryptionKey: SymmetricCryptoKey,\n    accessTokenView: AccessTokenView\n  ): Promise<AccessTokenRequest> {\n    const organizationKey = await this.getOrganizationKey(organizationId);\n    const accessTokenRequest = new AccessTokenRequest();\n    const [name, encryptedPayload, key] = await Promise.all([\n      await this.encryptService.encrypt(accessTokenView.name, organizationKey),\n      await this.encryptService.encrypt(\n        JSON.stringify({ encryptionKey: organizationKey.keyB64 }),\n        encryptionKey\n      ),\n      await this.encryptService.encrypt(encryptionKey.keyB64, organizationKey),\n    ]);\n\n    accessTokenRequest.name = name;\n    accessTokenRequest.encryptedPayload = encryptedPayload;\n    accessTokenRequest.key = key;\n    accessTokenRequest.expireAt = accessTokenView.expireAt;\n    return accessTokenRequest;\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async createAccessTokenViews(\n    organizationId: string,\n    accessTokenResponses: AccessTokenResponse[]\n  ): Promise<AccessTokenView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      accessTokenResponses.map(async (s) => {\n        const view = new AccessTokenView();\n        view.id = s.id;\n        view.name = await this.encryptService.decryptToUtf8(new EncString(s.name), orgKey);\n        view.scopes = s.scopes;\n        view.expireAt = s.expireAt ? new Date(s.expireAt) : null;\n        view.creationDate = new Date(s.creationDate);\n        view.revisionDate = new Date(s.revisionDate);\n        return view;\n      })\n    );\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\n\nexport interface AccessTokenDetails {\n  subTitle: string;\n  expirationDate?: Date;\n  accessToken: string;\n}\n\n@Component({\n  selector: \"sm-access-token-dialog\",\n  templateUrl: \"./access-token-dialog.component.html\",\n})\nexport class AccessTokenDialogComponent implements OnInit {\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: AccessTokenDetails,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {\n    this.dialogRef.disableClose = true;\n  }\n\n  ngOnInit(): void {\n    // TODO remove null checks once strictNullChecks in TypeScript is turned on.\n    if (!this.data.subTitle || !this.data.accessToken) {\n      this.dialogRef.close();\n      throw new Error(\"The access token dialog was not called with the appropriate values.\");\n    }\n  }\n\n  copyAccessToken(): void {\n    this.platformUtilsService.copyToClipboard(this.data.accessToken);\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"accessTokenCreatedAndCopied\")\n    );\n    this.dialogRef.close();\n  }\n}\n","<bit-dialog dialogSize=\"default\">\n  <ng-container bitDialogTitle>\n    <span>{{ \"createAccessToken\" | i18n }}</span>\n    <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n      {{ data.subTitle }}\n    </span>\n  </ng-container>\n\n  <div bitDialogContent>\n    <bit-callout type=\"info\" [title]=\"'accessTokenCallOutTitle' | i18n\">\n      {{ \"downloadAccessToken\" | i18n }}<br />\n      {{ \"expiresOnAccessToken\" | i18n }}\n      {{ data.expirationDate === null ? (\"never\" | i18n) : (data.expirationDate | date: \"medium\") }}\n    </bit-callout>\n\n    <bit-form-field class=\"tw-mb-0\">\n      <bit-label>{{ \"accessToken\" | i18n }}</bit-label>\n      <textarea bitInput disabled rows=\"4\">{{ data.accessToken }}</textarea>\n    </bit-form-field>\n    {{ \"expiresOnAccessToken\" | i18n }}\n    {{ data.expirationDate === null ? (\"never\" | i18n) : (data.expirationDate | date: \"medium\") }}\n  </div>\n\n  <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n    <button bitButton buttonType=\"primary\" (click)=\"copyAccessToken()\">\n      <i class=\"bwi bwi-clone\" aria-hidden=\"true\"></i>\n      {{ \"copyToken\" | i18n }}\n    </button>\n  </div>\n</bit-dialog>\n","<ng-container [formGroup]=\"form\">\n  <bit-form-field>\n    <bit-label>{{ \"expires\" | i18n }}</bit-label>\n    <select bitInput formControlName=\"expires\">\n      <option ngValue=\"never\">{{ \"never\" | i18n }}</option>\n      <option *ngFor=\"let day of expirationDayOptions\" [ngValue]=\"day\">\n        {{ \"days\" | i18n: day }}\n      </option>\n      <option ngValue=\"custom\">{{ \"custom\" | i18n }}</option>\n    </select>\n  </bit-form-field>\n  <bit-form-field *ngIf=\"form.value.expires === 'custom'\">\n    <bit-label>{{ \"expirationDate\" | i18n }}</bit-label>\n    <input\n      bitInput\n      type=\"datetime-local\"\n      [min]=\"currentDate | date: 'YYYY-MM-ddThh:mm'\"\n      formControlName=\"expireDateTime\"\n    />\n  </bit-form-field>\n</ng-container>\n","import { DatePipe } from \"@angular/common\";\nimport { Component, Input, OnDestroy, OnInit } from \"@angular/core\";\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators,\n} from \"@angular/forms\";\nimport { Subject, takeUntil } from \"rxjs\";\n\n@Component({\n  selector: \"sm-expiration-options\",\n  templateUrl: \"./expiration-options.component.html\",\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: ExpirationOptionsComponent,\n    },\n    {\n      provide: NG_VALIDATORS,\n      multi: true,\n      useExisting: ExpirationOptionsComponent,\n    },\n  ],\n})\nexport class ExpirationOptionsComponent\n  implements ControlValueAccessor, Validator, OnInit, OnDestroy\n{\n  private destroy$ = new Subject<void>();\n\n  @Input() expirationDayOptions: number[];\n\n  @Input() set touched(val: boolean) {\n    if (val) {\n      this.form.markAllAsTouched();\n    }\n  }\n\n  currentDate = new Date();\n\n  protected form = new FormGroup({\n    expires: new FormControl(\"never\", [Validators.required]),\n    expireDateTime: new FormControl(\"\", [Validators.required]),\n  });\n\n  constructor(private datePipe: DatePipe) {}\n\n  async ngOnInit() {\n    this.form.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      this._onChange(this.getExpiresDate());\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private _onChange = (_value: Date | null): void => undefined;\n  registerOnChange(fn: (value: Date | null) => void): void {\n    this._onChange = fn;\n  }\n\n  onTouched = (): void => undefined;\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  validate(control: AbstractControl<any, any>): ValidationErrors {\n    if (\n      (this.form.value.expires == \"custom\" && this.form.value.expireDateTime) ||\n      this.form.value.expires !== \"custom\"\n    ) {\n      return null;\n    }\n    return {\n      required: true,\n    };\n  }\n\n  writeValue(value: Date | null): void {\n    if (value == null) {\n      this.form.setValue({ expires: \"never\", expireDateTime: null });\n    }\n    if (value) {\n      this.form.setValue({\n        expires: \"custom\",\n        expireDateTime: this.datePipe.transform(value, \"YYYY-MM-ddThh:mm\"),\n      });\n    }\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    isDisabled ? this.form.disable() : this.form.enable();\n  }\n\n  private getExpiresDate(): Date | null {\n    if (this.form.value.expires == \"never\") {\n      return null;\n    }\n    if (this.form.value.expires == \"custom\") {\n      return new Date(this.form.value.expireDateTime);\n    }\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() + Number(this.form.value.expires));\n    return currentDate;\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../../../models/view/service-account.view\";\nimport { AccessTokenView } from \"../../models/view/access-token.view\";\nimport { AccessService } from \"../access.service\";\n\nimport { AccessTokenDetails, AccessTokenDialogComponent } from \"./access-token-dialog.component\";\n\nexport interface AccessTokenOperation {\n  organizationId: string;\n  serviceAccountView: ServiceAccountView;\n}\n\n@Component({\n  selector: \"sm-access-token-create-dialog\",\n  templateUrl: \"./access-token-create-dialog.component.html\",\n})\nexport class AccessTokenCreateDialogComponent implements OnInit {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", [Validators.required, Validators.maxLength(80)]),\n    expirationDateControl: new FormControl(null),\n  });\n  protected loading = false;\n\n  expirationDayOptions = [7, 30, 60];\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: AccessTokenOperation,\n    private dialogService: DialogService,\n    private accessService: AccessService\n  ) {}\n\n  async ngOnInit() {\n    if (\n      !this.data.organizationId ||\n      !this.data.serviceAccountView?.id ||\n      !this.data.serviceAccountView?.name\n    ) {\n      this.dialogRef.close();\n      throw new Error(\n        `The access token create dialog was not called with the appropriate operation values.`\n      );\n    }\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n    if (this.formGroup.invalid) {\n      return;\n    }\n    const accessTokenView = new AccessTokenView();\n    accessTokenView.name = this.formGroup.value.name;\n    accessTokenView.expireAt = this.formGroup.value.expirationDateControl;\n    const accessToken = await this.accessService.createAccessToken(\n      this.data.organizationId,\n      this.data.serviceAccountView.id,\n      accessTokenView\n    );\n    this.openAccessTokenDialog(\n      this.data.serviceAccountView.name,\n      accessToken,\n      accessTokenView.expireAt\n    );\n    this.dialogRef.close();\n  };\n\n  private openAccessTokenDialog(\n    serviceAccountName: string,\n    accessToken: string,\n    expirationDate?: Date\n  ) {\n    this.dialogService.open<unknown, AccessTokenDetails>(AccessTokenDialogComponent, {\n      data: {\n        subTitle: serviceAccountName,\n        expirationDate: expirationDate,\n        accessToken: accessToken,\n      },\n    });\n  }\n}\n","<div *ngIf=\"!tokens\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<sm-no-items *ngIf=\"tokens?.length == 0\">\n  <ng-container title>{{ \"accessTokensNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container description>{{ \"accessTokensNoItemsDesc\" | i18n }}</ng-container>\n  <button bitButton buttonType=\"secondary\" (click)=\"newAccessTokenEvent.emit()\">\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"createAccessToken\" | i18n }}\n  </button>\n</sm-no-items>\n\n<bit-table *ngIf=\"tokens?.length >= 1\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"tw-m-0 tw-flex tw-w-fit tw-gap-2\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell>{{ \"name\" | i18n }}</th>\n      <th bitCell>{{ \"permissions\" | i18n }}</th>\n      <th bitCell>{{ \"expires\" | i18n }}</th>\n      <th bitCell>{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-container body>\n    <tr bitRow *ngFor=\"let token of tokens\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(token.id) : null\"\n          [checked]=\"selection.isSelected(token.id)\"\n        />\n      </td>\n      <td bitCell>{{ token.name }}</td>\n      <td bitCell>{{ permission(token) | i18n }}</td>\n      <td bitCell>\n        {{ token.expireAt === null ? (\"never\" | i18n) : (token.expireAt | date: \"medium\") }}\n      </td>\n      <td bitCell>{{ token.revisionDate | date: \"medium\" }}</td>\n      <td bitCell>\n        <button\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"tokenMenu\"\n        ></button>\n      </td>\n\n      <bit-menu #tokenMenu>\n        <button type=\"button\" bitMenuItem>\n          <span class=\"tw-text-danger\">\n            <i class=\"bwi bwi-fw bwi-minus-circle\" aria-hidden=\"true\"></i>\n            {{ \"revokeAccessToken\" | i18n }}\n          </span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-container>\n</bit-table>\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"default\">\n    <ng-container bitDialogTitle>\n      <span>{{ \"createAccessToken\" | i18n }}</span>\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        {{ data.serviceAccountView.name }}\n      </span>\n    </ng-container>\n\n    <div bitDialogContent>\n      <bit-form-field>\n        <bit-label>{{ \"name\" | i18n }}</bit-label>\n        <input bitInput formControlName=\"name\" />\n      </bit-form-field>\n      <div class=\"tw-mb-6\">\n        <bit-form-field class=\"tw-mb-0\">\n          <bit-label>{{ \"permissions\" | i18n }}</bit-label>\n          <select bitInput disabled>\n            <option selected value=\"canRead\">\n              {{ \"canRead\" | i18n }}\n            </option>\n          </select>\n        </bit-form-field>\n        <span class=\"tw-text-sm tw-text-muted\">\n          {{ \"accessTokenPermissionsBetaNotification\" | i18n }}\n        </span>\n      </div>\n      <sm-expiration-options\n        formControlName=\"expirationDateControl\"\n        [expirationDayOptions]=\"expirationDayOptions\"\n        [touched]=\"formGroup.controls.expirationDateControl.touched\"\n      ></sm-expiration-options>\n    </div>\n\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button class=\"tw-normal-case\" type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"createAccessToken\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </div>\n  </bit-dialog>\n</form>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, Output } from \"@angular/core\";\n\nimport { AccessTokenView } from \"../models/view/access-token.view\";\n\n@Component({\n  selector: \"sm-access-list\",\n  templateUrl: \"./access-list.component.html\",\n})\nexport class AccessListComponent {\n  @Input()\n  get tokens(): AccessTokenView[] {\n    return this._tokens;\n  }\n  set tokens(secrets: AccessTokenView[]) {\n    this.selection.clear();\n    this._tokens = secrets;\n  }\n  private _tokens: AccessTokenView[];\n\n  @Output() newAccessTokenEvent = new EventEmitter();\n\n  protected selection = new SelectionModel<string>(true, []);\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.tokens.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.tokens.map((s) => s.id));\n  }\n\n  protected permission(token: AccessTokenView) {\n    return \"canRead\";\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../../models/view/service-account.view\";\nimport { AccessTokenView } from \"../models/view/access-token.view\";\n\nimport { AccessService } from \"./access.service\";\nimport {\n  AccessTokenOperation,\n  AccessTokenCreateDialogComponent,\n} from \"./dialogs/access-token-create-dialog.component\";\n\n@Component({\n  selector: \"sm-access-tokens\",\n  templateUrl: \"./access-tokens.component.html\",\n})\nexport class AccessTokenComponent implements OnInit {\n  accessTokens$: Observable<AccessTokenView[]>;\n\n  private serviceAccountId: string;\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private accessService: AccessService,\n    private dialogService: DialogService\n  ) {}\n\n  ngOnInit() {\n    this.accessTokens$ = this.accessService.accessToken$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        this.serviceAccountId = params.serviceAccountId;\n        return await this.getAccessTokens();\n      })\n    );\n  }\n\n  private async getAccessTokens(): Promise<AccessTokenView[]> {\n    return await this.accessService.getAccessTokens(this.organizationId, this.serviceAccountId);\n  }\n\n  async openNewAccessTokenDialog() {\n    // TODO once service account names are implemented in service account contents page pass in here.\n    const serviceAccountView = new ServiceAccountView();\n    serviceAccountView.id = this.serviceAccountId;\n    serviceAccountView.name = \"placeholder\";\n\n    this.dialogService.open<unknown, AccessTokenOperation>(AccessTokenCreateDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        serviceAccountView: serviceAccountView,\n      },\n    });\n  }\n}\n","<sm-access-list\n  [tokens]=\"accessTokens$ | async\"\n  (newAccessTokenEvent)=\"openNewAccessTokenDialog()\"\n></sm-access-list>\n","import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-service-account\",\n  templateUrl: \"./service-account.component.html\",\n})\nexport class ServiceAccountComponent {}\n","<div *ngIf=\"!serviceAccounts\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<sm-no-items *ngIf=\"serviceAccounts?.length == 0\">\n  <ng-container title>{{ \"serviceAccountsNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container description>{{ \"serviceAccountsNoItemsMessage\" | i18n }}</ng-container>\n  <button bitButton buttonType=\"secondary\" (click)=\"newServiceAccountEvent.emit()\">\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newServiceAccount\" | i18n }}\n  </button>\n</sm-no-items>\n\n<bit-table *ngIf=\"serviceAccounts?.length >= 1\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"!tw-mb-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell colspan=\"2\">{{ \"name\" | i18n }}</th>\n      <th bitCell>{{ \"secrets\" | i18n }}</th>\n      <th bitCell>{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-container body>\n    <tr bitRow *ngFor=\"let serviceAccount of serviceAccounts\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(serviceAccount.id) : null\"\n          [checked]=\"selection.isSelected(serviceAccount.id)\"\n        />\n      </td>\n      <td bitCell class=\"tw-w-0 tw-pr-0\">\n        <i class=\"bwi bwi-wrench tw-text-xl tw-text-muted\" aria-hidden=\"true\"></i>\n      </td>\n      <td bitCell>\n        <a [routerLink]=\"serviceAccount.id\" class=\"tw-break-all\">\n          {{ serviceAccount.name }}\n        </a>\n      </td>\n      <td bitCell>\n        <!-- TODO add number of secrets once mapping is implemented-->\n        <span> 0 </span>\n      </td>\n      <td bitCell>{{ serviceAccount.revisionDate | date: \"medium\" }}</td>\n      <td bitCell>\n        <button\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"serviceAccountMenu\"\n        ></button>\n      </td>\n      <bit-menu #serviceAccountMenu>\n        <a type=\"button\" bitMenuItem [routerLink]=\"serviceAccount.id\">\n          <i class=\"bwi bwi-fw bwi-eye tw-text-xl\" aria-hidden=\"true\"></i>\n          {{ \"viewServiceAccount\" | i18n }}\n        </a>\n        <button type=\"button\" bitMenuItem>\n          <i class=\"bwi bwi-fw bwi-trash tw-text-xl tw-text-danger\" aria-hidden=\"true\"></i>\n          <span class=\"tw-text-danger\">\n            {{ \"deleteServiceAccount\" | i18n }}\n          </span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-container>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"bulkDeleteServiceAccounts()\">\n    <i class=\"bwi bwi-fw bwi-trash tw-text-xl tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">\n      {{ \"deleteServiceAccounts\" | i18n }}\n    </span>\n  </button>\n</bit-menu>\n","<sm-header></sm-header>\n\n<bit-tab-nav-bar label=\"Main\">\n  <bit-tab-link [route]=\"['secrets']\">{{ \"secrets\" | i18n }}</bit-tab-link>\n  <bit-tab-link [route]=\"['people']\">{{ \"people\" | i18n }}</bit-tab-link>\n  <bit-tab-link [route]=\"['access']\">{{ \"accessTokens\" | i18n }}</bit-tab-link>\n</bit-tab-nav-bar>\n\n<router-outlet></router-outlet>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, OnDestroy, Output } from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { ServiceAccountView } from \"../models/view/service-account.view\";\n\n@Component({\n  selector: \"sm-service-accounts-list\",\n  templateUrl: \"./service-accounts-list.component.html\",\n})\nexport class ServiceAccountsListComponent implements OnDestroy {\n  @Input()\n  get serviceAccounts(): ServiceAccountView[] {\n    return this._serviceAccounts;\n  }\n  set serviceAccounts(serviceAccounts: ServiceAccountView[]) {\n    this.selection.clear();\n    this._serviceAccounts = serviceAccounts;\n  }\n  private _serviceAccounts: ServiceAccountView[];\n\n  @Output() newServiceAccountEvent = new EventEmitter();\n  @Output() deleteServiceAccountsEvent = new EventEmitter<string[]>();\n  @Output() onServiceAccountCheckedEvent = new EventEmitter<string[]>();\n\n  private destroy$: Subject<void> = new Subject<void>();\n\n  selection = new SelectionModel<string>(true, []);\n\n  constructor() {\n    this.selection.changed\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((_) => this.onServiceAccountCheckedEvent.emit(this.selection.selected));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.serviceAccounts.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.serviceAccounts.map((s) => s.id));\n  }\n\n  bulkDeleteServiceAccounts() {\n    if (this.selection.selected.length >= 1) {\n      this.deleteServiceAccountsEvent.emit(this.selection.selected);\n    }\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../models/view/service-account.view\";\n\nimport {\n  ServiceAccountDialogComponent,\n  ServiceAccountOperation,\n} from \"./dialog/service-account-dialog.component\";\nimport { ServiceAccountService } from \"./service-account.service\";\n\n@Component({\n  selector: \"sm-service-accounts\",\n  templateUrl: \"./service-accounts.component.html\",\n})\nexport class ServiceAccountsComponent implements OnInit {\n  serviceAccounts$: Observable<ServiceAccountView[]>;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private dialogService: DialogService,\n    private serviceAccountService: ServiceAccountService\n  ) {}\n\n  ngOnInit() {\n    this.serviceAccounts$ = this.serviceAccountService.serviceAccount$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getServiceAccounts();\n      })\n    );\n  }\n\n  openNewServiceAccountDialog() {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n      },\n    });\n  }\n\n  private async getServiceAccounts(): Promise<ServiceAccountView[]> {\n    return await this.serviceAccountService.getServiceAccounts(this.organizationId);\n  }\n}\n","<sm-header></sm-header>\n<sm-service-accounts-list\n  [serviceAccounts]=\"serviceAccounts$ | async\"\n  (newServiceAccountEvent)=\"openNewServiceAccountDialog()\"\n></sm-service-accounts-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { AccessTokenComponent } from \"./access/access-tokens.component\";\nimport { ServiceAccountComponent } from \"./service-account.component\";\nimport { ServiceAccountsComponent } from \"./service-accounts.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ServiceAccountsComponent,\n  },\n  {\n    path: \":serviceAccountId\",\n    component: ServiceAccountComponent,\n    children: [\n      {\n        path: \"\",\n        pathMatch: \"full\",\n        redirectTo: \"access\",\n      },\n      {\n        path: \"access\",\n        component: AccessTokenComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ServiceAccountsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { AccessListComponent } from \"./access/access-list.component\";\nimport { AccessTokenComponent } from \"./access/access-tokens.component\";\nimport { AccessTokenCreateDialogComponent } from \"./access/dialogs/access-token-create-dialog.component\";\nimport { AccessTokenDialogComponent } from \"./access/dialogs/access-token-dialog.component\";\nimport { ExpirationOptionsComponent } from \"./access/dialogs/expiration-options.component\";\nimport { ServiceAccountDialogComponent } from \"./dialog/service-account-dialog.component\";\nimport { ServiceAccountComponent } from \"./service-account.component\";\nimport { ServiceAccountsListComponent } from \"./service-accounts-list.component\";\nimport { ServiceAccountsRoutingModule } from \"./service-accounts-routing.module\";\nimport { ServiceAccountsComponent } from \"./service-accounts.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, ServiceAccountsRoutingModule],\n  declarations: [\n    AccessListComponent,\n    ExpirationOptionsComponent,\n    AccessTokenComponent,\n    AccessTokenCreateDialogComponent,\n    AccessTokenDialogComponent,\n    ServiceAccountComponent,\n    ServiceAccountDialogComponent,\n    ServiceAccountsComponent,\n    ServiceAccountsListComponent,\n  ],\n  providers: [],\n})\nexport class ServiceAccountsModule {}\n","import { Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, CanActivate } from \"@angular/router\";\n\n@Injectable()\nexport class SMGuard implements CanActivate {\n  async canActivate(route: ActivatedRouteSnapshot) {\n    // TODO: Verify org\n    return true;\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { Organization } from \"@bitwarden/common/models/domain/organization\";\nimport { OrganizationPermissionsGuard } from \"@bitwarden/web-vault/app/organizations/guards/org-permissions.guard\";\nimport { buildFlaggedRoute } from \"@bitwarden/web-vault/app/oss-routing.module\";\n\nimport { LayoutComponent } from \"./layout/layout.component\";\nimport { NavigationComponent } from \"./layout/navigation.component\";\nimport { OverviewModule } from \"./overview/overview.module\";\nimport { ProjectsModule } from \"./projects/projects.module\";\nimport { SecretsModule } from \"./secrets/secrets.module\";\nimport { ServiceAccountsModule } from \"./service-accounts/service-accounts.module\";\nimport { SMGuard } from \"./sm.guard\";\n\nconst routes: Routes = [\n  buildFlaggedRoute(\"secretsManager\", {\n    path: \":organizationId\",\n    component: LayoutComponent,\n    canActivate: [OrganizationPermissionsGuard, SMGuard],\n    data: {\n      organizationPermissions: (org: Organization) => org.canAccessSecretsManager,\n    },\n    children: [\n      {\n        path: \"\",\n        component: NavigationComponent,\n        outlet: \"sidebar\",\n      },\n      {\n        path: \"secrets\",\n        loadChildren: () => SecretsModule,\n        data: {\n          title: \"secrets\",\n          searchTitle: \"searchSecrets\",\n        },\n      },\n      {\n        path: \"projects\",\n        loadChildren: () => ProjectsModule,\n        data: {\n          title: \"projects\",\n          searchTitle: \"searchProjects\",\n        },\n      },\n      {\n        path: \"service-accounts\",\n        loadChildren: () => ServiceAccountsModule,\n        data: {\n          title: \"serviceAccounts\",\n          searchTitle: \"searchServiceAccounts\",\n        },\n      },\n      {\n        path: \"\",\n        loadChildren: () => OverviewModule,\n        pathMatch: \"full\",\n      },\n    ],\n  }),\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SecretsManagerRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared\";\n\nimport { LayoutComponent } from \"./layout/layout.component\";\nimport { NavigationComponent } from \"./layout/navigation.component\";\nimport { OrgSwitcherComponent } from \"./layout/org-switcher.component\";\nimport { SecretsManagerSharedModule } from \"./shared/sm-shared.module\";\nimport { SecretsManagerRoutingModule } from \"./sm-routing.module\";\nimport { SMGuard } from \"./sm.guard\";\n\n@NgModule({\n  imports: [SharedModule, SecretsManagerSharedModule, SecretsManagerRoutingModule],\n  declarations: [LayoutComponent, NavigationComponent, OrgSwitcherComponent],\n  providers: [SMGuard],\n})\nexport class SecretsManagerModule {}\n"],"names":["SecretsManagerSharedModule","LayoutComponent","ngOnInit","document","body","classList","remove","SecretsManagerLogo","NavBaseComponent","variant","treeDepth","hideActiveStyles","mainContentClicked","setActive","NavItemComponent","_active","rlaOptions","paths","queryParams","fragment","matrixParams","focusVisibleWithin$","BehaviorSubject","fvwStyles$","this","pipe","map","value","isActive","showActiveStyles","onFocusIn","target","next","matches","onFocusOut","NavDividerComponent","toggle","NavGroupComponent","contentId","Math","random","toString","substring","open","openChange","event","stopPropagation","emit","initNestedStyles","nestedGroups","nestedItems","forEach","navGroupOrItem","ngAfterContentInit","OrgSwitcherComponent","constructor","route","organizationService","organizations$","orgs","filter","sort","a","b","name","localeCompare","activeOrganization$","combineLatest","paramMap","params","find","org","id","get","NavigationComponent","logo","orgFilter","canAccessSecretsManager","ProjectView","DialogCloseDirective","dialogRef","close","dialogResult","DialogComponent","dialogSize","_disablePadding","disablePadding","width","BulkOperationStatus","BulkStatusDialogComponent","data","title","subTitle","columnTitle","message","details","length","Error","ProjectListView","ProjectRequest","ProjectListItemResponse","response","super","getResponseProperty","organizationId","creationDate","revisionDate","ProjectResponse","ProjectService","cryptoService","apiService","encryptService","_project","Subject","project$","asObservable","getByProjectId","projectId","r","send","projectResponse","createProjectView","getProjects","results","L","createProjectsListView","create","projectView","request","getProjectRequest","project","update","delete","projects","projectIds","element","bulkOperationStatus","errorMessage","error","getOrganizationKey","getOrgKey","orgKey","encrypt","decryptToUtf8","Promise","all","s","projectListView","BitSubmitDirective","formGroupDirective","validationService","logService","destroy$","_loading$","_disabled$","loading$","disabled$","ngSubmit","disabled","switchMap","awaitable","handler","loading","catchError","err","showError","of","undefined","takeUntil","subscribe","complete","statusChanges","c","ngOnDestroy","BitFormButtonDirective","buttonComponent","submitDirective","actionDirective","type","OperationType","ProjectDialogComponent","projectService","i18nService","platformUtilsService","router","formGroup","submit","markAllAsTouched","invalid","getProjectView","operation","Add","newProject","createProject","navigate","updateProject","Edit","loadData","setValue","showToast","t","SecretProjectView","SecretView","SecretListView","SecretRequest","SecretProjectResponse","SecretListItemResponse","k","SecretWithProjectsListResponse","secrets","dr","SecretResponse","note","SecretService","_secret","secret$","getBySecretId","secretId","secretResponse","createSecretView","getSecrets","createSecretsListView","getSecretsByProject","secretView","getSecretRequest","secretIds","responseErrors","push","join","key","encryptedString","e","decryptProjectsMappedToSecrets","projectsMappedToSecretsView","secretListView","p","includes","projectsMappedToSecretView","TabLabelDirective","templateRef","TabComponent","_viewContainerRef","textLabel","_contentPortal","content","implicitContent","TabBodyComponent","preserveContent","hidden","active","_firstRender","tabContent","selectTab","nextId","TabGroupComponent","_indexToSelect","label","_selectedIndex","selectedIndexChange","selectedTabChange","_groupId","selectedIndex","getTabContentId","getTabLabelId","index","ngAfterContentChecked","indexToSelect","_clampTabIndex","isFirstRun","tab","tabs","toArray","resolve","then","keyManager","setActiveItem","ngAfterViewInit","tabLabels","withHorizontalOrientation","withWrap","withHomeAndEnd","changes","selectedTab","i","min","max","updateProjectList","removeProjectAssociation","SecretDialogComponent","secretService","notes","selectedProjects","getSecretView","createSecret","updateSecret","valueChanges","secret","newList","selectedProject","projectSecretView","ServiceAccountView","ServiceAccountRequest","ServiceAccountResponse","ServiceAccountService","_serviceAccount","serviceAccount$","getServiceAccounts","createServiceAccountViews","serviceAccountView","getServiceAccountRequest","createServiceAccountView","organizationKey","serviceAccountResponse","serviceAccountResponses","ServiceAccountDialogComponent","serviceAccountService","getServiceAccountView","NewMenuComponent","dialogService","openSecretDialog","openProjectDialog","openServiceAccountDialog","HeaderComponent","stateService","routeData$","searchTitle","account$","activeAccount$","accounts$","activeAccount","accounts","profile","OverviewComponent","routes","path","component","OverviewRoutingModule","OverviewModule","SecretDeleteDialogComponent","NoItemsComponent","icon","newSecretEvent","$event","selection","editSecretEvent","copySecretNameEvent","copySecretValueEvent","projectsEvent","deleteSecretsEvent","toggleAll","SecretsListComponent","onSecretCheckedEvent","changed","_","selected","_secrets","clear","isAllSelected","select","bulkDeleteSecrets","openNewSecretDialog","openDeleteSecret","openEditSecret","ProjectSecretsComponent","secrets$","startWith","combineLatestWith","ProjectComponent","ProjectDeleteDialogComponent","confirmDelete","matchConfirmationMessageValidator","dialogContent","dialogConfirmationLabel","dialogConfirmationMessage","bulkResponses","openBulkStatusDialog","bulkStatusResults","control","toLowerCase","confirmationDoesntMatchError","newProjectEvent","editProjectEvent","viewProjectEvent","deleteProject","ProjectsListComponent","deleteProjectEvent","onProjectCheckedEvent","_projects","bulkDeleteProjects","isSelected","ProjectsComponent","projects$","openEditProject","openNewProjectDialog","openDeleteProjectDialog","children","pathMatch","redirectTo","ProjectsRoutingModule","ProjectsModule","SecretsComponent","SecretsRoutingModule","SecretsModule","AccessTokenRequest","AccessTokenCreationResponse","clientSecret","expireAt","AccessTokenResponse","scopes","AccessTokenView","AccessService","cryptoFunctionService","_accessTokenVersion","_accessToken","accessToken$","getAccessTokens","serviceAccountId","createAccessTokenViews","createAccessToken","accessTokenView","keyMaterial","randomBytes","hkdf","encryptionKey","createAccessTokenRequest","result","b64Key","accessTokenRequest","encryptedPayload","JSON","stringify","keyB64","accessTokenResponses","view","Date","AccessTokenDialogComponent","disableClose","accessToken","copyAccessToken","copyToClipboard","ExpirationOptionsComponent","datePipe","currentDate","form","expires","expireDateTime","_onChange","_value","onTouched","touched","val","getExpiresDate","registerOnChange","fn","registerOnTouched","validate","required","writeValue","transform","setDisabledState","isDisabled","disable","enable","setDate","getDate","Number","provide","multi","useExisting","AccessTokenCreateDialogComponent","accessService","expirationDateControl","expirationDayOptions","openAccessTokenDialog","serviceAccountName","expirationDate","newAccessTokenEvent","AccessListComponent","tokens","_tokens","permission","token","AccessTokenComponent","accessTokens$","openNewAccessTokenDialog","ServiceAccountComponent","newServiceAccountEvent","ServiceAccountsListComponent","deleteServiceAccountsEvent","onServiceAccountCheckedEvent","serviceAccounts","_serviceAccounts","bulkDeleteServiceAccounts","ServiceAccountsComponent","serviceAccounts$","openNewServiceAccountDialog","ServiceAccountsRoutingModule","ServiceAccountsModule","SMGuard","canActivate","organizationPermissions","outlet","loadChildren","SecretsManagerRoutingModule","SecretsManagerModule"],"sourceRoot":""}