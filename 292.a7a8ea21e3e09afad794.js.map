{"version":3,"file":"292.a7a8ea21e3e09afad794.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/../../libs/angular/src/auth/components/user-verification-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/components/user-verification-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/components/user-verification-prompt.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/navigation.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/layout.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/sm-shared.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/layout.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/layout.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/secrets-manager-logo.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-base.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-item.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-item.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-group.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-group.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-divider.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-divider.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/org-switcher.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/org-switcher.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/navigation.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/navigation.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/header.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/header.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/project.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/dialogs/bulk-status-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/dialogs/bulk-status-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/project-list.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/models/requests/project.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/models/responses/project-list-item.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/models/responses/project.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/secret-project.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/secret.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/secret-list.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/requests/secret.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret-project.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret-list-item.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret-with-projects-list.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secret.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-delete.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-delete.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/service-account.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/requests/service-account.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/responses/service-account.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-account.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/new-menu.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/new-menu.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/potential-grantee.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/project-access-policies.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/access-policies-create.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/access-policy-update.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/access-policy.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/potential-grantee.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/project-access-policies.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-policy.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/access-policy.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-selector.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-selector.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-access.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-access.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-people.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-people.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/no-items.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/secrets-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/no-items.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/secrets-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-secrets.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-secrets.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-service-accounts.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-service-accounts.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-delete-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-delete-dialog.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/table/table-data-source.ts","webpack://@bitwarden/web-vault/../../libs/components/src/table/sortable.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects-list/projects-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects-list/projects-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects/projects.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects/projects.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/requests/access-token.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/responses/access-token-creation.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/responses/access-tokens.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/view/access-token.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/expiration-options.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/expiration-options.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-create-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-create-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-tokens.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-tokens.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-account.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-account.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/error/sm-import-error.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/requests/sm-import.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/requests/sm-imported-project.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/requests/sm-imported-secret.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/responses/sm-exported-project.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/responses/sm-exported-secret.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/responses/sm-export.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/sm-export.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/services/sm-porting-api.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/services/sm-porting.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-export.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-export.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/dialog/sm-import-error-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/dialog/sm-import-error-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-import.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-import.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/settings-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/settings.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/sm.guard.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/sm-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets-manager.module.ts"],"sourcesContent":["import { Directive } from \"@angular/core\";\nimport { FormBuilder, FormControl } from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\n\nimport { ModalRef } from \"../../components/modal/modal.ref\";\nimport { ModalConfig } from \"../../services/modal.service\";\n\n/**\n * Used to verify the user's identity (using their master password or email-based OTP for Key Connector users). You can customize all of the text in the modal.\n */\n@Directive()\nexport class UserVerificationPromptComponent {\n  confirmDescription = this.config.data.confirmDescription;\n  confirmButtonText = this.config.data.confirmButtonText;\n  modalTitle = this.config.data.modalTitle;\n  secret = new FormControl();\n\n  constructor(\n    private modalRef: ModalRef,\n    protected config: ModalConfig,\n    protected userVerificationService: UserVerificationService,\n    private formBuilder: FormBuilder,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  async submit() {\n    try {\n      //Incorrect secret will throw an invalid password error.\n      await this.userVerificationService.verifyUser(this.secret.value);\n    } catch (e) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"error\"),\n        this.i18nService.t(\"invalidMasterPassword\")\n      );\n      return;\n    }\n\n    this.modalRef.close(true);\n  }\n}\n","import { Component } from \"@angular/core\";\n\nimport { UserVerificationPromptComponent as BaseUserVerificationPrompt } from \"@bitwarden/angular/auth/components/user-verification-prompt.component\";\n\n@Component({\n  templateUrl: \"user-verification-prompt.component.html\",\n})\nexport class UserVerificationPromptComponent extends BaseUserVerificationPrompt {}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable @angular-eslint/template/button-has-type -->\n<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"confirmUserTitle\">\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form class=\"modal-content\" #form (ngSubmit)=\"submit()\">\n      <h2 class=\"tw-my-6 tw-px-3.5 tw-font-semibold\" id=\"modalTitle | i18n \">\n        {{ modalTitle | i18n | uppercase }}\n      </h2>\n      <div class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-p-3.5\">\n        {{ confirmDescription | i18n }}\n      </div>\n      <div class=\"tw-p-3.5\">\n        <app-user-verification ngDefaultControl [formControl]=\"secret\" name=\"secret\">\n        </app-user-verification>\n      </div>\n      <div\n        class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-p-3.5\"\n      >\n        <button bitButton buttonType=\"primary\" type=\"submit\" appBlurClick>\n          <span>{{ confirmButtonText | i18n }}</span>\n        </button>\n        <button bitButton buttonType=\"secondary\" data-dismiss=\"modal\">\n          {{ \"cancel\" | i18n }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { OverlayModule } from \"@angular/cdk/overlay\";\nimport { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\n\nimport { IconButtonModule } from \"../icon-button/icon-button.module\";\nimport { SharedModule } from \"../shared/shared.module\";\n\nimport { NavDividerComponent } from \"./nav-divider.component\";\nimport { NavGroupComponent } from \"./nav-group.component\";\nimport { NavItemComponent } from \"./nav-item.component\";\n\n@NgModule({\n  imports: [CommonModule, SharedModule, IconButtonModule, OverlayModule, RouterModule],\n  declarations: [NavDividerComponent, NavGroupComponent, NavItemComponent],\n  exports: [NavDividerComponent, NavGroupComponent, NavItemComponent],\n})\nexport class NavigationModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { NavigationModule } from \"@bitwarden/components\";\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared/shared.module\";\n\nimport { LayoutComponent } from \"./layout.component\";\nimport { NavigationComponent } from \"./navigation.component\";\nimport { OrgSwitcherComponent } from \"./org-switcher.component\";\n\n@NgModule({\n  imports: [SharedModule, NavigationModule],\n  declarations: [LayoutComponent, NavigationComponent, OrgSwitcherComponent],\n})\nexport class LayoutModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { MultiSelectModule } from \"@bitwarden/components\";\nimport { ProductSwitcherModule } from \"@bitwarden/web-vault/app/layouts/product-switcher/product-switcher.module\";\nimport { CoreOrganizationModule } from \"@bitwarden/web-vault/app/organizations/core\";\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared\";\n\nimport { BulkStatusDialogComponent } from \"../layout/dialogs/bulk-status-dialog.component\";\nimport { HeaderComponent } from \"../layout/header.component\";\nimport { NewMenuComponent } from \"../layout/new-menu.component\";\nimport { NoItemsComponent } from \"../layout/no-items.component\";\n\nimport { AccessSelectorComponent } from \"./access-policies/access-selector.component\";\nimport { SecretsListComponent } from \"./secrets-list.component\";\n\n@NgModule({\n  imports: [SharedModule, ProductSwitcherModule, MultiSelectModule, CoreOrganizationModule],\n  exports: [\n    SharedModule,\n    BulkStatusDialogComponent,\n    HeaderComponent,\n    NewMenuComponent,\n    NoItemsComponent,\n    SecretsListComponent,\n    AccessSelectorComponent,\n  ],\n  declarations: [\n    BulkStatusDialogComponent,\n    HeaderComponent,\n    NewMenuComponent,\n    NoItemsComponent,\n    SecretsListComponent,\n    AccessSelectorComponent,\n  ],\n  providers: [],\n  bootstrap: [],\n})\nexport class SecretsManagerSharedModule {}\n","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-layout\",\n  templateUrl: \"./layout.component.html\",\n})\nexport class LayoutComponent implements OnInit {\n  ngOnInit() {\n    document.body.classList.remove(\"layout_frontend\");\n  }\n}\n","<div class=\"tw-flex tw-w-full\">\n  <nav class=\"tw-min-h-screen tw-w-60 tw-bg-background-alt3\">\n    <router-outlet name=\"sidebar\"></router-outlet>\n  </nav>\n  <main class=\"tw-min-h-screen tw-flex-1 tw-p-6\">\n    <router-outlet></router-outlet>\n  </main>\n</div>\n","import { svgIcon } from \"@bitwarden/components\";\n\nexport const SecretsManagerLogo = svgIcon`\n  <svg viewBox=\"0 0 197 51\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M51.865 10.157c-1.299-1.814-3.066-2.684-5.338-2.684-2.38 0-4.22.98-5.41 2.866H40.9c.145-1.742.217-3.011.217-3.81V.944a.648.648 0 0 0-.65-.653h-3.895c-.36 0-.649.29-.649.653v25.502c0 .363.289.653.65.653h2.885a.667.667 0 0 0 .613-.4l.685-1.704h.36c1.3 1.669 3.03 2.467 5.303 2.467 2.272 0 4.075-.835 5.41-2.612 1.334-1.741 1.983-4.208 1.983-7.4 0-3.084-.649-5.514-1.947-7.292Zm-9.846 2.757c.613-.798 1.587-1.197 2.849-1.197 1.082 0 1.983.472 2.633 1.415.613.943.938 2.358.938 4.244 0 1.85-.325 3.337-.938 4.317-.613 1.016-1.515 1.523-2.561 1.523-1.334 0-2.308-.471-2.921-1.342-.614-.87-.902-2.358-.902-4.425v-.58c0-1.815.324-3.157.902-3.955ZM58.5 27.134h3.896c.36 0 .685-.363.649-.689V8.525a.648.648 0 0 0-.65-.653H58.5c-.36 0-.649.29-.649.653V26.48c0 .363.289.653.65.653Zm20.883-4.317c-1.082.29-1.983.436-2.74.436-.65 0-1.227-.182-1.588-.58-.397-.327-.613-.908-.613-1.633v-9.214h4.905a.418.418 0 0 0 .433-.435V8.126c0-.11-.108-.218-.216-.218h-5.158V4.244a.418.418 0 0 0-.433-.435h-2.597c-.18 0-.324.109-.396.29l-1.407 3.773-2.85 1.705a.13.13 0 0 1-.017.054.13.13 0 0 0-.018.055v1.705c0 .254.18.435.432.435h2.056v9.25c0 2.104.505 3.7 1.443 4.752.938 1.089 2.453 1.596 4.544 1.596 1.732 0 3.282-.253 4.509-.761a.446.446 0 0 0 .252-.4v-3.01c0-.29-.252-.508-.54-.436Zm20.414 3.52c.217.47.614.797 1.119.797h.144c.541 0 .974-.326 1.118-.834l4.544-16.868a.825.825 0 0 0-.793-1.052.847.847 0 0 0-.794.616l-2.705 10.121c-.829 3.265-1.262 5.296-1.37 6.022h-.108c-.181-.907-.686-2.648-1.515-5.369l-3.39-10.665a1.051 1.051 0 0 0-1.01-.725c-.505 0-.902.29-1.046.725l-3.643 10.738c-.325.907-.83 2.684-1.479 5.369h-.108c-.217-1.306-.686-3.265-1.37-5.95L84.577 8.996a.845.845 0 0 0-.794-.616h-.108c-.577 0-.974.544-.83 1.052l4.8 16.868c.144.508.577.834 1.082.834.505 0 .938-.29 1.082-.762l3.931-11.717.757-2.466.361-1.306h.108l.282 1.065a87.39 87.39 0 0 0 .728 2.671l3.823 11.717Zm21.893.217c.036.326.325.58.65.58.36 0 .685-.363.721-.58v-11.79c0-2.213-.505-3.918-1.515-4.97-1.046-1.088-2.561-1.632-4.617-1.632-1.803 0-3.57.4-5.374 1.125-.396.145-.577.616-.396 1.015.18.4.649.58 1.046.4 1.587-.762 3.101-1.125 4.616-1.125 1.587 0 2.705.435 3.463 1.342.757.907 1.118 2.213 1.118 4.027v1.233l-3.535.109c-2.921 0-5.085.616-6.636 1.632-1.515 1.052-2.309 2.866-2.164 4.752.072 1.415.577 2.54 1.478 3.374 1.01.943 2.417 1.415 4.256 1.415 1.335 0 2.525-.218 3.499-.726 1.01-.508 1.948-1.378 2.885-2.575h.181l.324 2.394Zm-2.128-2.358c-1.118 1.124-2.669 1.705-4.688 1.705-1.299 0-2.309-.327-3.102-.87-.685-.654-1.046-1.597-1.046-2.758 0-1.45.577-2.575 1.695-3.264 1.154-.69 2.994-1.125 5.627-1.234l3.246-.145v1.814c0 1.995-.578 3.627-1.732 4.752Zm18.359-16.07a14.21 14.21 0 0 0-1.696-.11c-1.226 0-2.272.291-3.101.872-.866.544-1.695 1.523-2.453 2.902h-.108l-.144-2.685c0-.399-.325-.689-.722-.689a.726.726 0 0 0-.721.725v17.05c0 .472.361.834.829.834.469 0 .83-.362.83-.834v-9.504c0-2.032.505-3.773 1.515-5.115 1.01-1.342 2.308-2.031 3.895-2.031.541 0 1.082.072 1.623.145.433.072.866-.182.938-.617a.818.818 0 0 0-.685-.943Zm14.499.616c-.974-.471-2.164-.725-3.499-.725-2.597 0-4.544.87-5.915 2.43-1.37 1.742-2.02 4.208-2.02 7.437 0 3.083.722 5.405 2.056 7.037 1.407 1.633 3.318 2.43 5.915 2.43 2.633 0 4.689-1.051 6.096-3.191h.144l.361 2.357c.036.327.288.545.577.545a.572.572 0 0 0 .577-.58V1.124a.819.819 0 0 0-.83-.835.818.818 0 0 0-.829.835v5.912c0 1.379.036 2.757.108 4.245h-.108c-.758-1.197-1.623-2.068-2.633-2.54Zm-8.115 3.011c1.046-1.45 2.56-2.176 4.616-2.176 2.164 0 3.715.617 4.653 1.922 1.01 1.234 1.479 3.301 1.479 6.204v.29c0 2.83-.469 4.86-1.479 6.094-.974 1.233-2.489 1.85-4.617 1.85-4.111 0-6.167-2.648-6.167-7.944 0-2.757.505-4.825 1.515-6.24Zm19.873 13.168c1.551 1.705 3.642 2.54 6.348 2.54 1.082 0 2.055-.073 2.957-.327a12.269 12.269 0 0 0 2.453-.725.745.745 0 0 0 .469-.69c0-.507-.505-.87-.974-.689-.83.29-1.515.472-2.092.58-.794.146-1.768.218-2.813.218-2.201 0-3.86-.616-5.05-1.995-1.19-1.378-1.767-3.337-1.803-5.913h13.417v-1.378c0-2.648-.613-4.752-1.912-6.276-1.226-1.524-2.993-2.285-5.157-2.285-2.489 0-4.437.907-5.915 2.72-1.479 1.778-2.201 4.172-2.201 7.183 0 3.01.758 5.369 2.273 7.037Zm1.515-13.603c1.082-1.197 2.524-1.777 4.328-1.777 1.659 0 2.957.616 3.895 1.813.938 1.197 1.407 2.939 1.407 5.079h-11.542c.216-2.213.829-3.954 1.912-5.115ZM195.305 26.3c0 .471.36.834.829.834.433 0 .83-.399.866-.907v-11.39c0-4.571-2.128-6.856-6.348-6.856-3.102 0-5.23.98-6.456 2.938h-.108l-.217-1.886c-.072-.363-.36-.653-.757-.653a.741.741 0 0 0-.757.761v17.086c0 .472.36.835.829.835s.83-.363.83-.835v-9.504c0-2.503.577-4.353 1.587-5.477 1.01-1.161 2.633-1.705 4.869-1.705 1.659 0 2.849.471 3.679 1.305.757.835 1.154 2.213 1.154 4.1V26.3ZM57.419 2.938C57.42 1.306 58.79 0 60.485 0c1.66 0 3.066 1.306 3.066 2.975v.254c0 1.596-1.407 2.938-3.066 2.938-1.66 0-3.066-1.342-3.066-2.938v-.29ZM23.444.29c.324 0 .613.109.865.363.253.254.361.58.325.87v14.874a8.961 8.961 0 0 1-.65 3.3 13.06 13.06 0 0 1-1.586 2.903c-.65.87-1.407 1.668-2.272 2.466a24.748 24.748 0 0 1-2.453 1.996 51.494 51.494 0 0 1-2.344 1.487 32.79 32.79 0 0 1-1.355.758 23.51 23.51 0 0 0-.34.185l-.268.137a4.32 4.32 0 0 1-.562.262 1.147 1.147 0 0 1-.505.109c-.18 0-.36-.036-.505-.109a3.58 3.58 0 0 0-.324-.163c-.14-.066-.3-.141-.47-.236-.324-.145-.901-.471-1.695-.943-.793-.472-1.623-.98-2.344-1.487-.757-.508-1.587-1.197-2.453-1.995A16 16 0 0 1 2.236 22.6c-.649-.835-1.154-1.814-1.587-2.902A8.96 8.96 0 0 1 0 16.397V1.524c0-.29.108-.617.36-.871C.614.399.867.29 1.227.29h22.218Zm-11.109 26.3s9.125-4.643 9.125-10.048V3.482h-9.125V26.59Zm75.793 17.845a4.55 4.55 0 0 1-.8.07c-.404 0-.73-.12-.975-.36-.247-.24-.37-.606-.37-1.098v-5.203h2.786V36.27h-2.786v-2.162h-1.3l-.677 2.083-1.424.73v.923h1.327v5.23c0 .796.13 1.42.387 1.871.258.452.606.77 1.046.958.44.182.934.273 1.485.273.393 0 .77-.035 1.134-.106.363-.07.66-.155.888-.255v-1.564c-.217.07-.457.132-.721.184Zm-44.578.405c.31-.44.466-.979.466-1.617 0-.557-.115-1.011-.343-1.363-.229-.351-.557-.647-.985-.887a10.38 10.38 0 0 0-1.503-.703 24.399 24.399 0 0 1-1.388-.59c-.328-.157-.56-.316-.694-.474a.864.864 0 0 1-.203-.58c0-.305.138-.54.413-.703.282-.164.689-.246 1.222-.246.457 0 .905.064 1.345.193.445.123.888.281 1.327.475l.65-1.556a8.024 8.024 0 0 0-1.564-.519 7.414 7.414 0 0 0-1.688-.184c-1.124 0-2.03.226-2.715.677-.68.445-1.02 1.098-1.02 1.96 0 .545.108.993.325 1.344.217.346.536.642.958.888.422.246.94.492 1.556.738.627.252 1.101.47 1.424.65.328.176.55.35.668.52a.913.913 0 0 1 .184.562c0 .357-.15.644-.448.861-.299.211-.788.316-1.468.316a6.262 6.262 0 0 1-1.643-.237 9.817 9.817 0 0 1-1.556-.562v1.784c.434.2.894.346 1.38.44a9.03 9.03 0 0 0 1.758.149c.861 0 1.588-.111 2.18-.334.597-.229 1.051-.563 1.362-1.002Zm8.806-8.218c-.62-.357-1.365-.536-2.232-.536-.89 0-1.67.2-2.338.598-.668.398-1.186.978-1.556 1.74-.369.761-.553 1.687-.553 2.777 0 1.096.202 2.013.606 2.751a4.05 4.05 0 0 0 1.697 1.67c.726.37 1.567.554 2.522.554.703 0 1.307-.053 1.81-.158a6.729 6.729 0 0 0 1.486-.501v-1.68a9.269 9.269 0 0 1-1.538.537 7.233 7.233 0 0 1-1.67.176c-.873 0-1.553-.255-2.04-.765-.48-.51-.732-1.236-.755-2.18h6.495v-1.107c0-.914-.167-1.7-.5-2.355a3.592 3.592 0 0 0-1.434-1.52Zm-3.814 1.652c.404-.422.932-.632 1.582-.632.486 0 .885.105 1.195.316.317.21.551.504.703.879.159.375.24.806.247 1.292h-4.43c.07-.814.305-1.433.703-1.855Zm11.997 7.902c-.92 0-1.717-.179-2.39-.536-.674-.358-1.193-.906-1.556-1.644-.364-.738-.545-1.676-.545-2.812 0-1.184.2-2.15.597-2.9.399-.75.95-1.304 1.653-1.662.709-.357 1.52-.536 2.434-.536.58 0 1.105.059 1.574.176a5.53 5.53 0 0 1 1.204.413l-.615 1.652a8.97 8.97 0 0 0-1.1-.369c-.374-.1-.735-.15-1.08-.15-.569 0-1.043.127-1.424.379-.375.252-.656.627-.844 1.125-.181.498-.272 1.116-.272 1.854 0 .715.094 1.318.281 1.81.188.487.466.856.835 1.108.37.246.823.37 1.362.37.534 0 1.011-.065 1.433-.194a6.35 6.35 0 0 0 1.195-.501v1.793a4.43 4.43 0 0 1-1.186.466c-.422.105-.94.158-1.556.158Zm10.494-10.064a5.945 5.945 0 0 0-.536-.026c-.445 0-.855.088-1.23.264-.37.17-.698.398-.985.685a4.322 4.322 0 0 0-.72.95h-.097l-.281-1.715h-1.618V46h2.075v-5.089c0-.48.073-.902.22-1.266a2.486 2.486 0 0 1 1.493-1.45 3.027 3.027 0 0 1 1.055-.184c.14 0 .299.008.475.026.181.018.334.044.457.08l.193-1.934a4.487 4.487 0 0 0-.5-.07Zm6.179-.026c.867 0 1.611.179 2.232.536a3.592 3.592 0 0 1 1.433 1.52c.334.657.5 1.442.5 2.356v1.108h-6.494c.023.943.275 1.67.756 2.18.486.509 1.166.764 2.039.764.62 0 1.178-.059 1.67-.176a9.265 9.265 0 0 0 1.538-.536v1.679a6.726 6.726 0 0 1-1.486.5c-.504.106-1.107.159-1.81.159-.955 0-1.796-.185-2.523-.554a4.05 4.05 0 0 1-1.696-1.67c-.404-.738-.606-1.655-.606-2.75 0-1.09.184-2.017.553-2.778.37-.762.888-1.342 1.556-1.74.668-.399 1.447-.598 2.338-.598Zm0 1.556c-.65 0-1.178.21-1.582.632-.399.422-.633 1.04-.703 1.855h4.43a3.406 3.406 0 0 0-.247-1.292 1.874 1.874 0 0 0-.703-.879c-.31-.21-.709-.316-1.195-.316Zm20.153 5.58c0 .64-.155 1.178-.466 1.618-.31.44-.764.773-1.362 1.002-.592.223-1.318.334-2.18.334-.68 0-1.265-.05-1.757-.15a6.026 6.026 0 0 1-1.38-.44v-1.783a9.78 9.78 0 0 0 1.555.562c.58.158 1.128.237 1.644.237.68 0 1.169-.105 1.468-.316.299-.217.448-.504.448-.861a.913.913 0 0 0-.185-.563c-.117-.17-.34-.343-.668-.518-.322-.182-.796-.399-1.423-.65a11.873 11.873 0 0 1-1.556-.739c-.422-.246-.741-.542-.958-.888-.217-.351-.325-.8-.325-1.344 0-.862.34-1.515 1.02-1.96.685-.451 1.59-.677 2.715-.677.598 0 1.16.062 1.688.184.533.118 1.054.29 1.564.52l-.65 1.555a9.737 9.737 0 0 0-1.328-.475 4.754 4.754 0 0 0-1.344-.193c-.533 0-.94.082-1.222.246-.275.164-.413.398-.413.703 0 .229.067.422.202.58.135.158.366.316.695.475a24.9 24.9 0 0 0 1.388.589c.58.222 1.081.457 1.503.703.428.24.756.536.984.887.229.352.343.806.343 1.363Zm14.379-6.16c-.533-.534-1.26-.8-2.18-.8-.767 0-1.423.16-1.968.483-.539.322-.938.77-1.196 1.345h-.061c-.188-.604-.522-1.058-1.002-1.363-.475-.31-1.055-.465-1.74-.465-.528 0-.988.082-1.38.246a3.041 3.041 0 0 0-.976.641 3.435 3.435 0 0 0-.633.862h-.052l-.132-1.565h-.72V46h.887v-5.537c0-.78.117-1.421.351-1.925.235-.51.569-.885 1.002-1.125.434-.246.947-.37 1.538-.37.446 0 .832.095 1.161.282.328.182.583.463.764.844.188.375.281.858.281 1.45V46h.879v-5.66c0-1.137.255-1.969.765-2.496.516-.534 1.228-.8 2.136-.8.662 0 1.195.208 1.599.624.405.416.607 1.066.607 1.951V46h.87v-6.416c0-1.149-.267-1.99-.8-2.523Zm7.207-.783c1.049 0 1.834.264 2.356.791.521.528.782 1.368.782 2.523V46h-.686l-.158-1.67h-.053a4.255 4.255 0 0 1-.747.958 3.149 3.149 0 0 1-1.081.65c-.422.159-.937.238-1.547.238-.615 0-1.142-.103-1.582-.308a2.316 2.316 0 0 1-1.01-.896c-.235-.393-.352-.87-.352-1.433 0-.95.393-1.67 1.178-2.162.785-.498 1.913-.78 3.384-.844l1.775-.088v-.694c0-.978-.193-1.676-.58-2.092-.387-.416-.958-.624-1.714-.624-.492 0-.967.065-1.424.194a7.533 7.533 0 0 0-1.38.536l-.281-.739a8.697 8.697 0 0 1 1.468-.536 6.384 6.384 0 0 1 1.652-.21Zm2.25 4.86-1.67.071c-1.213.059-2.135.275-2.768.65s-.95.938-.95 1.688c0 .603.188 1.066.563 1.389.381.322.908.483 1.582.483 1.049 0 1.849-.299 2.399-.897.557-.597.838-1.412.844-2.443v-.94Zm10.635-4.034c-.574-.562-1.398-.843-2.47-.843-.574 0-1.078.088-1.512.263-.433.17-.799.402-1.098.695-.293.287-.525.61-.694.967h-.053l-.132-1.74h-.721V46h.888v-5.265c0-1.236.275-2.159.826-2.768.557-.615 1.359-.923 2.408-.923.826 0 1.456.223 1.89.668.434.445.65 1.142.65 2.092V46h.879v-6.249c0-1.201-.287-2.083-.861-2.645Zm7.295-.826c1.049 0 1.834.264 2.355.791.522.528.783 1.368.783 2.523V46h-.686l-.158-1.67h-.053a4.255 4.255 0 0 1-.747.958 3.149 3.149 0 0 1-1.081.65c-.422.159-.938.238-1.547.238-.615 0-1.143-.103-1.582-.308a2.318 2.318 0 0 1-1.011-.896c-.234-.393-.351-.87-.351-1.433 0-.95.392-1.67 1.177-2.162.786-.498 1.914-.78 3.384-.844l1.776-.088v-.694c0-.978-.194-1.676-.58-2.092-.387-.416-.958-.624-1.714-.624-.492 0-.967.065-1.424.194a7.533 7.533 0 0 0-1.38.536l-.281-.739a8.697 8.697 0 0 1 1.468-.536 6.384 6.384 0 0 1 1.652-.21Zm2.25 4.86-1.67.071c-1.213.059-2.136.275-2.769.65-.632.375-.949.938-.949 1.688 0 .603.188 1.066.563 1.389.381.322.908.483 1.582.483 1.049 0 1.848-.299 2.399-.897.557-.597.838-1.412.844-2.443v-.94Zm3.682 8.49c.668.464 1.603.695 2.804.695 1.512 0 2.678-.275 3.498-.826.826-.55 1.239-1.327 1.239-2.33 0-.82-.275-1.44-.826-1.862-.55-.422-1.344-.633-2.382-.633h-1.678c-.322 0-.595-.032-.818-.097a1.18 1.18 0 0 1-.509-.29.7.7 0 0 1-.176-.492c0-.316.094-.58.281-.791.188-.217.46-.43.817-.642.282.053.569.08.862.08 1.066 0 1.898-.279 2.496-.836.598-.556.896-1.31.896-2.258a3.313 3.313 0 0 0-.773-2.145l1.969-.132v-.633h-3.085a2.296 2.296 0 0 0-.396-.096 3.716 3.716 0 0 0-.483-.062 8.395 8.395 0 0 0-.571-.017c-.692 0-1.292.132-1.802.395a2.783 2.783 0 0 0-1.169 1.099c-.276.474-.413 1.034-.413 1.679 0 .673.158 1.25.474 1.731.317.475.75.812 1.301 1.01-.41.241-.718.505-.923.792a1.52 1.52 0 0 0-.307.914c0 .293.085.55.255.773.175.223.401.399.676.528-.691.093-1.239.372-1.643.835a2.47 2.47 0 0 0-.607 1.67c0 .831.331 1.479.993 1.942Zm4.958-.324c-.557.181-1.254.272-2.092.272-.961 0-1.694-.167-2.198-.5-.498-.329-.747-.812-.747-1.451 0-.498.109-.896.326-1.195.222-.3.533-.516.931-.65a4.076 4.076 0 0 1 1.363-.212h1.599c.51 0 .952.047 1.327.141.375.088.665.249.87.483.205.235.308.566.308.994 0 .521-.141.958-.422 1.31-.281.356-.703.626-1.265.808Zm.008-8.174c-.422.398-1.028.597-1.819.597-.809 0-1.418-.199-1.828-.597-.41-.404-.615-.97-.615-1.696 0-.78.213-1.383.641-1.811.434-.434 1.029-.65 1.784-.65.78 0 1.386.202 1.82.606.433.404.65 1.01.65 1.82 0 .755-.211 1.332-.633 1.73Zm8.28-4.87c.814 0 1.491.191 2.03.572.545.38.949.902 1.213 1.565.269.662.404 1.42.404 2.276v.641h-6.899c0 1.313.301 2.32.905 3.024.609.703 1.479 1.055 2.61 1.055a7.35 7.35 0 0 0 1.538-.141c.44-.1.926-.267 1.459-.501v.817a6.538 6.538 0 0 1-1.406.457c-.469.1-1.008.15-1.617.15-.967 0-1.778-.2-2.435-.598a3.82 3.82 0 0 1-1.476-1.705c-.328-.732-.492-1.588-.492-2.566 0-.955.158-1.814.474-2.576.322-.761.791-1.362 1.406-1.801.622-.446 1.383-.668 2.286-.668Zm-.009.765c-.914 0-1.655.305-2.224.914-.562.604-.893 1.477-.993 2.62h5.95c0-.698-.099-1.313-.299-1.846-.199-.533-.501-.946-.905-1.24-.398-.298-.908-.448-1.529-.448Zm10.802-.703a5.468 5.468 0 0 0-.712-.044c-.487 0-.92.088-1.301.264a2.983 2.983 0 0 0-.976.712 3.305 3.305 0 0 0-.615.993h-.053l-.088-1.802h-.764V46h.896v-5.273c0-.551.065-1.05.194-1.495a3.36 3.36 0 0 1 .562-1.142c.246-.317.545-.56.897-.73.357-.17.761-.255 1.212-.255.229 0 .443.015.642.044.199.024.396.062.589.115l.141-.818a4.754 4.754 0 0 0-.624-.123Z\" fill=\"currentColor\" />\n  </svg>\n`;\n","import { Directive, EventEmitter, Input, Output } from \"@angular/core\";\n\n/**\n * Base class used in `NavGroupComponent` and `NavItemComponent`\n */\n@Directive()\nexport abstract class NavBaseComponent {\n  /**\n   * Text to display in main content\n   */\n  @Input() text: string;\n\n  /**\n   * `aria-label` for main content\n   */\n  @Input() ariaLabel: string;\n\n  /**\n   * Optional icon, e.g. `\"bwi-collection\"`\n   */\n  @Input() icon: string;\n\n  /**\n   * Route to be passed to internal `routerLink`\n   */\n  @Input() route: string | any[];\n\n  /**\n   * If this item is used within a tree, set `variant` to `\"tree\"`\n   */\n  @Input() variant: \"default\" | \"tree\" = \"default\";\n\n  /**\n   * Depth level when nested inside of a `'tree'` variant\n   */\n  @Input() treeDepth = 0;\n\n  /**\n   * If `true`, do not change styles when nav item is active.\n   */\n  @Input() hideActiveStyles = false;\n\n  /**\n   * Fires when main content is clicked\n   */\n  @Output() mainContentClicked: EventEmitter<MouseEvent> = new EventEmitter();\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable @angular-eslint/template/button-has-type -->\n<div\n  class=\"tw-relative\"\n  [ngClass]=\"[\n    showActiveStyles ? 'tw-bg-background-alt4' : 'tw-bg-background-alt3',\n    fvwStyles$ | async\n  ]\"\n>\n  <div\n    [ngStyle]=\"{\n      'padding-left': (variant === 'tree' ? 2.5 : 1) + treeDepth * 1.5 + 'rem'\n    }\"\n    class=\"tw-relative tw-flex tw-items-center tw-pr-4\"\n    [ngClass]=\"[variant === 'tree' ? 'tw-py-1' : 'tw-py-2']\"\n  >\n    <div\n      #slotStart\n      class=\"[&>*:focus-visible::before]:!tw-ring-text-alt2 [&>*]:!tw-text-alt2 [&>*:hover]:!tw-border-text-alt2\"\n    >\n      <ng-content select=\"[slot-start]\"></ng-content>\n    </div>\n    <!-- Default content for #slotStart (for consistent sizing) -->\n    <div\n      *ngIf=\"slotStart.childElementCount === 0\"\n      [ngClass]=\"{\n        'tw-w-0': variant !== 'tree'\n      }\"\n    >\n      <button\n        class=\"tw-invisible\"\n        [bitIconButton]=\"'bwi-angle-down'\"\n        size=\"small\"\n        aria-hidden=\"true\"\n      ></button>\n    </div>\n\n    <ng-container *ngIf=\"route; then isAnchor; else isButton\"></ng-container>\n\n    <!-- Main content of `NavItem` -->\n    <ng-template #anchorAndButtonContent>\n      <i class=\"bwi bwi-fw tw-text-alt2 tw-mx-1 {{ icon }}\"></i\n      ><span [ngClass]=\"showActiveStyles ? 'tw-font-bold' : 'tw-font-semibold'\">{{ text }}</span>\n    </ng-template>\n\n    <!-- Show if a value was passed to `this.to` -->\n    <ng-template #isAnchor>\n      <!-- The `fvw` class passes focus to `this.focusVisibleWithin$` -->\n      <!-- The following `class` field should match the `#isButton` class field below -->\n      <a\n        class=\"fvw tw-w-full tw-overflow-hidden tw-text-ellipsis tw-whitespace-nowrap tw-border-none tw-bg-transparent tw-p-0 tw-text-start !tw-text-alt2 hover:tw-text-alt2 hover:tw-no-underline focus:tw-outline-none [&>:not(.bwi)]:hover:tw-underline\"\n        [routerLink]=\"route\"\n        [attr.aria-label]=\"ariaLabel || text\"\n        routerLinkActive\n        [routerLinkActiveOptions]=\"rlaOptions\"\n        [ariaCurrentWhenActive]=\"'page'\"\n        (isActiveChange)=\"setActive($event)\"\n        (click)=\"mainContentClicked.emit()\"\n      >\n        <ng-container *ngTemplateOutlet=\"anchorAndButtonContent\"></ng-container>\n      </a>\n    </ng-template>\n\n    <!-- Show if `this.to` is falsy -->\n    <ng-template #isButton>\n      <!-- Class field should match `#isAnchor` class field above -->\n      <button\n        class=\"fvw tw-w-full tw-overflow-hidden tw-text-ellipsis tw-whitespace-nowrap tw-border-none tw-bg-transparent tw-p-0 tw-text-start !tw-text-alt2 hover:tw-text-alt2 hover:tw-no-underline focus:tw-outline-none [&>:not(.bwi)]:hover:tw-underline\"\n        (click)=\"mainContentClicked.emit()\"\n      >\n        <ng-container *ngTemplateOutlet=\"anchorAndButtonContent\"></ng-container>\n      </button>\n    </ng-template>\n\n    <div\n      class=\"tw-flex tw-gap-1 [&>*:focus-visible::before]:!tw-ring-text-alt2 [&>*]:!tw-text-alt2 [&>*:hover]:!tw-border-text-alt2\"\n    >\n      <ng-content select=\"[slot-end]\"></ng-content>\n    </div>\n  </div>\n</div>\n","import { Component, HostListener } from \"@angular/core\";\nimport { IsActiveMatchOptions } from \"@angular/router\";\nimport { BehaviorSubject, map } from \"rxjs\";\n\nimport { NavBaseComponent } from \"./nav-base.component\";\n\n@Component({\n  selector: \"bit-nav-item\",\n  templateUrl: \"./nav-item.component.html\",\n})\nexport class NavItemComponent extends NavBaseComponent {\n  /**\n   * Is `true` if `to` matches the current route\n   */\n  private _active = false;\n  protected setActive(isActive: boolean) {\n    this._active = isActive;\n  }\n  protected get showActiveStyles() {\n    return this._active && !this.hideActiveStyles;\n  }\n  protected readonly rlaOptions: IsActiveMatchOptions = {\n    paths: \"exact\",\n    queryParams: \"exact\",\n    fragment: \"ignored\",\n    matrixParams: \"ignored\",\n  };\n\n  /**\n   * The design spec calls for the an outline to wrap the entire element when the template's anchor/button has :focus-visible.\n   * Usually, we would use :focus-within for this. However, that matches when a child element has :focus instead of :focus-visible.\n   *\n   * Currently, the browser does not have a pseudo selector that combines these two, e.g. :focus-visible-within (WICG/focus-visible#151)\n   * To make our own :focus-visible-within functionality, we use event delegation on the host and manually check if the focus target (denoted with the .fvw class) matches :focus-visible. We then map that state to some styles, so the entire component can have an outline.\n   */\n  protected focusVisibleWithin$ = new BehaviorSubject(false);\n  protected fvwStyles$ = this.focusVisibleWithin$.pipe(\n    map((value) => (value ? \"tw-z-10 tw-rounded tw-outline-none tw-ring tw-ring-text-alt2\" : \"\"))\n  );\n  @HostListener(\"focusin\", [\"$event.target\"])\n  onFocusIn(target: HTMLElement) {\n    this.focusVisibleWithin$.next(target.matches(\".fvw:focus-visible\"));\n  }\n  @HostListener(\"focusout\")\n  onFocusOut() {\n    this.focusVisibleWithin$.next(false);\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable @angular-eslint/template/button-has-type -->\n<!-- This a higher order component that composes `NavItemComponent`  -->\n<bit-nav-item\n  [text]=\"text\"\n  [icon]=\"icon\"\n  [route]=\"route\"\n  [variant]=\"variant\"\n  (mainContentClicked)=\"toggle()\"\n  [treeDepth]=\"treeDepth\"\n  (mainContentClicked)=\"mainContentClicked.emit()\"\n  [ariaLabel]=\"ariaLabel\"\n>\n  <ng-template #button>\n    <button\n      class=\"tw-ml-auto\"\n      [bitIconButton]=\"\n        open ? 'bwi-angle-up' : variant === 'tree' ? 'bwi-angle-right' : 'bwi-angle-down'\n      \"\n      [buttonType]=\"'main'\"\n      (click)=\"toggle($event)\"\n      size=\"small\"\n      [title]=\"'toggleCollapse' | i18n\"\n      aria-haspopup=\"true\"\n      [attr.aria-expanded]=\"open.toString()\"\n      [attr.aria-controls]=\"contentId\"\n      [attr.aria-label]=\"['toggleCollapse' | i18n, text].join(' ')\"\n    ></button>\n  </ng-template>\n\n  <!-- Show toggle to the left for trees otherwise to the right -->\n  <ng-container slot-start *ngIf=\"variant === 'tree'\">\n    <ng-container *ngTemplateOutlet=\"button\"></ng-container>\n  </ng-container>\n  <ng-container slot-end *ngIf=\"variant !== 'tree'\">\n    <ng-container *ngTemplateOutlet=\"button\"></ng-container>\n  </ng-container>\n</bit-nav-item>\n\n<!-- [attr.aria-controls] of the above button expects a unique ID on the controlled element -->\n<div\n  *ngIf=\"open\"\n  [attr.id]=\"contentId\"\n  [attr.aria-label]=\"[text, 'submenu' | i18n].join(' ')\"\n  role=\"group\"\n>\n  <ng-content></ng-content>\n</div>\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n} from \"@angular/core\";\n\nimport { NavBaseComponent } from \"./nav-base.component\";\nimport { NavItemComponent } from \"./nav-item.component\";\n\n@Component({\n  selector: \"bit-nav-group\",\n  templateUrl: \"./nav-group.component.html\",\n})\nexport class NavGroupComponent extends NavBaseComponent implements AfterContentInit {\n  @ContentChildren(NavGroupComponent, {\n    descendants: true,\n  })\n  nestedGroups!: QueryList<NavGroupComponent>;\n\n  @ContentChildren(NavItemComponent, {\n    descendants: true,\n  })\n  nestedItems!: QueryList<NavItemComponent>;\n\n  /**\n   * UID for `[attr.aria-controls]`\n   */\n  protected contentId = Math.random().toString(36).substring(2);\n\n  /**\n   * Is `true` if the expanded content is visible\n   */\n  @Input()\n  open = false;\n  @Output()\n  openChange = new EventEmitter<boolean>();\n\n  protected toggle(event?: MouseEvent) {\n    event?.stopPropagation();\n    this.open = !this.open;\n    this.openChange.emit(this.open);\n  }\n\n  /**\n   * - For any nested NavGroupComponents or NavItemComponents, increment the `treeDepth` by 1.\n   */\n  private initNestedStyles() {\n    if (this.variant !== \"tree\") {\n      return;\n    }\n    [...this.nestedGroups, ...this.nestedItems].forEach((navGroupOrItem) => {\n      navGroupOrItem.treeDepth += 1;\n    });\n  }\n\n  ngAfterContentInit(): void {\n    this.initNestedStyles();\n  }\n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"bit-nav-divider\",\n  templateUrl: \"./nav-divider.component.html\",\n})\nexport class NavDividerComponent {}\n","<div class=\"tw-h-px tw-w-full tw-bg-secondary-300\"></div>\n","<bit-nav-group\n  *ngIf=\"activeOrganization$ | async as activeOrganization\"\n  [text]=\"activeOrganization.name\"\n  [ariaLabel]=\"['organization' | i18n, activeOrganization.name].join(' ')\"\n  icon=\"bwi-business\"\n  [route]=\"['../', activeOrganization.id]\"\n  [(open)]=\"open\"\n>\n  <ng-container *ngIf=\"organizations$ | async as organizations\">\n    <bit-nav-item\n      *ngFor=\"let org of organizations\"\n      [text]=\"org.name\"\n      [ariaLabel]=\"['organization' | i18n, org.name].join(' ')\"\n      [route]=\"['../', org.id]\"\n      (mainContentClicked)=\"toggle()\"\n      [hideActiveStyles]=\"true\"\n    >\n    </bit-nav-item>\n  </ng-container>\n  <bit-nav-item\n    *ngIf=\"!hideNewButton\"\n    icon=\"bwi-plus\"\n    [text]=\"'newOrganization' | i18n\"\n    route=\"/create-organization\"\n  ></bit-nav-item>\n  <bit-nav-divider></bit-nav-divider>\n</bit-nav-group>\n","import { Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, map, Observable } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization/organization.service.abstraction\";\nimport type { Organization } from \"@bitwarden/common/models/domain/organization\";\n\n@Component({\n  selector: \"org-switcher\",\n  templateUrl: \"org-switcher.component.html\",\n})\nexport class OrgSwitcherComponent {\n  protected organizations$: Observable<Organization[]> =\n    this.organizationService.organizations$.pipe(\n      map((orgs) => orgs.filter(this.filter).sort((a, b) => a.name.localeCompare(b.name)))\n    );\n  protected activeOrganization$: Observable<Organization> = combineLatest([\n    this.route.paramMap,\n    this.organizations$,\n  ]).pipe(map(([params, orgs]) => orgs.find((org) => org.id === params.get(\"organizationId\"))));\n\n  /**\n   * Filter function for displayed organizations in the `org-switcher`\n   * @example\n   * const smFilter = (org: Organization) => org.canAccessSecretsManager\n   * // <org-switcher [filter]=\"smFilter\">\n   */\n  @Input()\n  filter: (org: Organization) => boolean = () => true;\n\n  /**\n   * Is `true` if the expanded content is visible\n   */\n  @Input()\n  open = false;\n  @Output()\n  openChange = new EventEmitter<boolean>();\n\n  /**\n   * Visibility of the New Organization button\n   * (Temporary; will be removed when ability to create organizations is added to SM.)\n   */\n  @Input()\n  hideNewButton = false;\n\n  constructor(private route: ActivatedRoute, private organizationService: OrganizationService) {}\n\n  protected toggle(event?: MouseEvent) {\n    event?.stopPropagation();\n    this.open = !this.open;\n    this.openChange.emit(this.open);\n  }\n}\n","import { Component } from \"@angular/core\";\n\nimport { Organization } from \"@bitwarden/common/models/domain/organization\";\n\nimport { SecretsManagerLogo } from \"./secrets-manager-logo\";\n\n@Component({\n  selector: \"sm-navigation\",\n  templateUrl: \"./navigation.component.html\",\n})\nexport class NavigationComponent {\n  protected readonly logo = SecretsManagerLogo;\n\n  protected orgFilter = (org: Organization) => org.canAccessSecretsManager;\n}\n","<a [routerLink]=\"['secrets']\" class=\"tw-mx-4 tw-mt-8 tw-mb-3 tw-block\">\n  <bit-icon [icon]=\"logo\" class=\"tw-w-full tw-text-alt2\"></bit-icon>\n</a>\n\n<org-switcher [filter]=\"orgFilter\" [hideNewButton]=\"true\"></org-switcher>\n<bit-nav-item icon=\"bwi-collection\" [text]=\"'projects' | i18n\" route=\"projects\"></bit-nav-item>\n<bit-nav-item icon=\"bwi-key\" [text]=\"'secrets' | i18n\" route=\"secrets\"></bit-nav-item>\n<bit-nav-item\n  icon=\"bwi-wrench\"\n  [text]=\"'serviceAccounts' | i18n\"\n  route=\"service-accounts\"\n></bit-nav-item>\n<bit-nav-item icon=\"bwi-trash\" [text]=\"'trash' | i18n\" route=\"trash\"></bit-nav-item>\n<bit-nav-group icon=\"bwi-cog\" [text]=\"'settings' | i18n\">\n  <bit-nav-item [text]=\"'importData' | i18n\" route=\"settings/import\"></bit-nav-item>\n  <bit-nav-item [text]=\"'exportData' | i18n\" route=\"settings/export\"></bit-nav-item>\n</bit-nav-group>\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable @angular-eslint/template/button-has-type -->\n<header\n  *ngIf=\"routeData$ | async as routeData\"\n  class=\"-tw-m-6 tw-mb-3 tw-flex tw-flex-col tw-p-6\"\n  [ngClass]=\"{\n    'tw-border-0 tw-border-b tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-pb-0':\n      tabsContainer.childElementCount !== 0\n  }\"\n>\n  <div class=\"tw-flex\">\n    <div class=\"tw-flex tw-min-w-0 tw-flex-1 tw-flex-col tw-gap-2\">\n      <ng-content select=\"[slot=breadcrumbs]\"></ng-content>\n      <div #titleContainer [ngClass]=\"{ 'tw-hidden': titleContainer.childElementCount === 0 }\">\n        <ng-content select=\"[slot=title]\"></ng-content>\n      </div>\n      <h1\n        *ngIf=\"titleContainer.childElementCount === 0\"\n        class=\"tw-m-0 tw-mr-2 tw-truncate tw-text-3xl tw-font-semibold tw-leading-10\"\n        [title]=\"title || (routeData.titleId | i18n)\"\n      >\n        <i *ngIf=\"icon\" class=\"bwi {{ icon }}\" aria-hidden=\"true\"></i>\n        {{ title || (routeData.titleId | i18n) }}\n      </h1>\n    </div>\n    <div class=\"tw-ml-auto tw-flex tw-flex-col tw-gap-4\">\n      <div class=\"tw-flex tw-min-w-max tw-items-center tw-justify-end tw-gap-2\">\n        <ng-content></ng-content>\n        <product-switcher></product-switcher>\n        <ng-container *ngIf=\"account$ | async as account\">\n          <button [bitMenuTriggerFor]=\"accountMenu\" class=\"tw-border-0 tw-bg-transparent tw-p-0\">\n            <bit-avatar [id]=\"account.userId\" [text]=\"account.name || account.email\"></bit-avatar>\n          </button>\n\n          <bit-menu #accountMenu>\n            <div class=\"tw-flex tw-min-w-52 tw-max-w-72 tw-flex-col\">\n              <div\n                class=\"tw-flex tw-items-center tw-py-1 tw-px-4 tw-leading-tight tw-text-info\"\n                appStopProp\n              >\n                <bit-avatar\n                  [text]=\"account.name || account.email\"\n                  [id]=\"account.userId\"\n                ></bit-avatar>\n                <div class=\"tw-ml-2 tw-block tw-overflow-hidden tw-whitespace-nowrap\">\n                  <span>{{ \"loggedInAs\" | i18n }}</span>\n                  <small class=\"tw-block tw-overflow-hidden tw-whitespace-nowrap tw-text-muted\">\n                    {{ account.name }}\n                  </small>\n                </div>\n              </div>\n\n              <bit-menu-divider></bit-menu-divider>\n\n              <a bitMenuItem routerLink=\"/settings/account\">\n                <i class=\"bwi bwi-fw bwi-user\" aria-hidden=\"true\"></i>\n                {{ \"accountSettings\" | i18n }}\n              </a>\n              <a bitMenuItem href=\"https://bitwarden.com/help/\" target=\"_blank\" rel=\"noopener\">\n                <i class=\"bwi bwi-fw bwi-question-circle\" aria-hidden=\"true\"></i>\n                {{ \"getHelp\" | i18n }}\n              </a>\n              <a bitMenuItem href=\"https://bitwarden.com/download/\" target=\"_blank\" rel=\"noopener\">\n                <i class=\"bwi bwi-fw bwi-download\" aria-hidden=\"true\"></i>\n                {{ \"getApps\" | i18n }}\n              </a>\n\n              <bit-menu-divider></bit-menu-divider>\n\n              <button bitMenuItem type=\"button\">\n                <i class=\"bwi bwi-fw bwi-lock\" aria-hidden=\"true\"></i>\n                {{ \"lockNow\" | i18n }}\n              </button>\n              <button bitMenuItem type=\"button\">\n                <i class=\"bwi bwi-fw bwi-sign-out\" aria-hidden=\"true\"></i>\n                {{ \"logOut\" | i18n }}\n              </button>\n            </div>\n          </bit-menu>\n        </ng-container>\n      </div>\n      <div\n        class=\"tw-ml-auto\"\n        #contentContainer\n        [ngClass]=\"{ 'tw-hidden': contentContainer.childElementCount === 0 }\"\n      >\n        <ng-content select=\"[slot=secondary]\"></ng-content>\n      </div>\n    </div>\n  </div>\n  <div\n    #tabsContainer\n    class=\"-tw-mx-4 -tw-mb-px\"\n    [ngClass]=\"{ 'tw-hidden': tabsContainer.childElementCount === 0 }\"\n  >\n    <ng-content select=\"[slot=tabs]\"></ng-content>\n  </div>\n</header>\n","import { Component, Input } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, map, Observable } from \"rxjs\";\n\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { AccountProfile } from \"@bitwarden/common/models/domain/account\";\n\n@Component({\n  selector: \"sm-header\",\n  templateUrl: \"./header.component.html\",\n})\nexport class HeaderComponent {\n  /**\n   * Custom title that overrides the route data `titleId`\n   */\n  @Input() title: string;\n\n  /**\n   * Icon to show before the title\n   */\n  @Input() icon: string;\n\n  protected routeData$: Observable<{ titleId: string }>;\n  protected account$: Observable<AccountProfile>;\n\n  constructor(private route: ActivatedRoute, private stateService: StateService) {\n    this.routeData$ = this.route.data.pipe(\n      map((params) => {\n        return {\n          titleId: params.titleId,\n        };\n      })\n    );\n\n    this.account$ = combineLatest([\n      this.stateService.activeAccount$,\n      this.stateService.accounts$,\n    ]).pipe(\n      map(([activeAccount, accounts]) => {\n        return accounts[activeAccount]?.profile;\n      })\n    );\n  }\n}\n","export class ProjectView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n}\n","<bit-dialog dialogSize=\"default\">\n  <ng-container bitDialogTitle>\n    <span>{{ data.title | i18n }}</span>\n    <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n      {{ data.details.length }}\n      {{ data.subTitle | i18n }}\n    </span>\n  </ng-container>\n\n  <div bitDialogContent>\n    {{ data.message | i18n }}\n    <bit-table>\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ data.columnTitle | i18n }}</th>\n          <th bitCell>{{ \"error\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body>\n        <tr bitRow *ngFor=\"let detail of data.details\">\n          <td bitCell>{{ detail.name }}</td>\n          <td bitCell>{{ detail.errorMessage }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </div>\n\n  <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n    <button bitButton buttonType=\"primary\" bitDialogClose type=\"button\">\n      {{ \"close\" | i18n }}\n    </button>\n  </div>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nexport interface BulkStatusDetails {\n  title: string;\n  subTitle: string;\n  columnTitle: string;\n  message: string;\n  details: BulkOperationStatus[];\n}\n\nexport class BulkOperationStatus {\n  id: string;\n  name: string;\n  errorMessage?: string;\n}\n\n@Component({\n  selector: \"sm-bulk-status-dialog\",\n  templateUrl: \"./bulk-status-dialog.component.html\",\n})\nexport class BulkStatusDialogComponent implements OnInit {\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) public data: BulkStatusDetails) {}\n\n  ngOnInit(): void {\n    // TODO remove null checks once strictNullChecks in TypeScript is turned on.\n    if (\n      !this.data.title ||\n      !this.data.subTitle ||\n      !this.data.columnTitle ||\n      !this.data.message ||\n      !(this.data.details?.length >= 1)\n    ) {\n      this.dialogRef.close();\n      throw new Error(\n        \"The bulk status dialog was not called with the appropriate operation values.\"\n      );\n    }\n  }\n}\n","export class ProjectListView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n}\n","import { EncString } from \"@bitwarden/common/models/domain/enc-string\";\n\nexport class ProjectRequest {\n  name: EncString;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class ProjectListItemResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class ProjectResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\n\nimport { BulkOperationStatus } from \"../layout/dialogs/bulk-status-dialog.component\";\nimport { ProjectListView } from \"../models/view/project-list.view\";\nimport { ProjectView } from \"../models/view/project.view\";\n\nimport { ProjectRequest } from \"./models/requests/project.request\";\nimport { ProjectListItemResponse } from \"./models/responses/project-list-item.response\";\nimport { ProjectResponse } from \"./models/responses/project.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ProjectService {\n  protected _project = new Subject<ProjectView>();\n  project$ = this._project.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getByProjectId(projectId: string): Promise<ProjectView> {\n    const r = await this.apiService.send(\"GET\", \"/projects/\" + projectId, null, true, true);\n    const projectResponse = new ProjectResponse(r);\n    return await this.createProjectView(projectResponse);\n  }\n\n  async getProjects(organizationId: string): Promise<ProjectListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/projects\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, ProjectListItemResponse);\n    return await this.createProjectsListView(organizationId, results.data);\n  }\n\n  async create(organizationId: string, projectView: ProjectView): Promise<ProjectView> {\n    const request = await this.getProjectRequest(organizationId, projectView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/projects\",\n      request,\n      true,\n      true\n    );\n\n    const project = await this.createProjectView(new ProjectResponse(r));\n    this._project.next(project);\n    return project;\n  }\n\n  async update(organizationId: string, projectView: ProjectView) {\n    const request = await this.getProjectRequest(organizationId, projectView);\n    const r = await this.apiService.send(\"PUT\", \"/projects/\" + projectView.id, request, true, true);\n    this._project.next(await this.createProjectView(new ProjectResponse(r)));\n  }\n\n  async delete(projects: ProjectListView[]): Promise<BulkOperationStatus[]> {\n    const projectIds = projects.map((project) => project.id);\n    const r = await this.apiService.send(\"POST\", \"/projects/delete\", projectIds, true, true);\n    this._project.next(null);\n    return r.data.map((element: { id: string; error: string }) => {\n      const bulkOperationStatus = new BulkOperationStatus();\n      bulkOperationStatus.id = element.id;\n      bulkOperationStatus.name = projects.find((project) => project.id == element.id).name;\n      bulkOperationStatus.errorMessage = element.error;\n      return bulkOperationStatus;\n    });\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async getProjectRequest(\n    organizationId: string,\n    projectView: ProjectView\n  ): Promise<ProjectRequest> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = new ProjectRequest();\n    request.name = await this.encryptService.encrypt(projectView.name, orgKey);\n\n    return request;\n  }\n\n  private async createProjectView(projectResponse: ProjectResponse): Promise<ProjectView> {\n    const orgKey = await this.getOrganizationKey(projectResponse.organizationId);\n\n    const projectView = new ProjectView();\n    projectView.id = projectResponse.id;\n    projectView.organizationId = projectResponse.organizationId;\n    projectView.creationDate = projectResponse.creationDate;\n    projectView.revisionDate = projectResponse.revisionDate;\n    projectView.name = await this.encryptService.decryptToUtf8(\n      new EncString(projectResponse.name),\n      orgKey\n    );\n\n    return projectView;\n  }\n\n  private async createProjectsListView(\n    organizationId: string,\n    projects: ProjectListItemResponse[]\n  ): Promise<ProjectListView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      projects.map(async (s: ProjectListItemResponse) => {\n        const projectListView = new ProjectListView();\n        projectListView.id = s.id;\n        projectListView.organizationId = s.organizationId;\n        projectListView.name = await this.encryptService.decryptToUtf8(\n          new EncString(s.name),\n          orgKey\n        );\n        projectListView.creationDate = s.creationDate;\n        projectListView.revisionDate = s.revisionDate;\n        return projectListView;\n      })\n    );\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\n\nimport { ProjectView } from \"../../models/view/project.view\";\nimport { ProjectService } from \"../../projects/project.service\";\n\nexport enum OperationType {\n  Add,\n  Edit,\n}\n\nexport interface ProjectOperation {\n  organizationId: string;\n  operation: OperationType;\n  projectId?: string;\n}\n\n@Component({\n  selector: \"sm-project-dialog\",\n  templateUrl: \"./project-dialog.component.html\",\n})\nexport class ProjectDialogComponent implements OnInit {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", [Validators.required]),\n  });\n  protected loading = false;\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: ProjectOperation,\n    private projectService: ProjectService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private router: Router\n  ) {}\n\n  async ngOnInit() {\n    if (this.data.operation === OperationType.Edit && this.data.projectId) {\n      await this.loadData();\n    } else if (this.data.operation !== OperationType.Add) {\n      this.dialogRef.close();\n      throw new Error(`The project dialog was not called with the appropriate operation values.`);\n    }\n  }\n\n  async loadData() {\n    this.loading = true;\n    const project: ProjectView = await this.projectService.getByProjectId(this.data.projectId);\n    this.loading = false;\n    this.formGroup.setValue({ name: project.name });\n  }\n\n  get title() {\n    return this.data.operation === OperationType.Add ? \"newProject\" : \"editProject\";\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const projectView = this.getProjectView();\n    if (this.data.operation === OperationType.Add) {\n      const newProject = await this.createProject(projectView);\n      this.router.navigate([\"sm\", this.data.organizationId, \"projects\", newProject.id]);\n    } else {\n      projectView.id = this.data.projectId;\n      await this.updateProject(projectView);\n    }\n    this.dialogRef.close();\n  };\n\n  private async createProject(projectView: ProjectView) {\n    const newProject = await this.projectService.create(this.data.organizationId, projectView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"projectCreated\"));\n    return newProject;\n  }\n\n  private async updateProject(projectView: ProjectView) {\n    await this.projectService.update(this.data.organizationId, projectView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"projectSaved\"));\n  }\n\n  private getProjectView() {\n    const projectView = new ProjectView();\n    projectView.organizationId = this.data.organizationId;\n    projectView.name = this.formGroup.value.name;\n    return projectView;\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"small\">\n    <span bitDialogTitle>{{ title | i18n }}</span>\n    <span bitDialogContent>\n      <div *ngIf=\"loading\" class=\"tw-text-center\">\n        <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n      </div>\n      <bit-form-field *ngIf=\"!loading\">\n        <bit-label>{{ \"projectName\" | i18n }}</bit-label>\n        <input formControlName=\"name\" maxlength=\"1000\" bitInput />\n      </bit-form-field>\n    </span>\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"save\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </div>\n  </bit-dialog>\n</form>\n","export class SecretProjectView {\n  id: string;\n  name: string;\n}\n","import { SecretProjectView } from \"./secret-project.view\";\n\nexport class SecretView {\n  id: string;\n  organizationId: string;\n  name: string;\n  value: string;\n  note: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectView[];\n}\n","import { SecretProjectView } from \"./secret-project.view\";\n\nexport class SecretListView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectView[];\n}\n","export class SecretRequest {\n  key: string;\n  value: string;\n  note: string;\n  projectIds?: string[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class SecretProjectResponse extends BaseResponse {\n  id: string;\n  name: string;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.id = this.getResponseProperty(\"Id\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretProjectResponse } from \"./secret-project.response\";\n\nexport class SecretListItemResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectResponse[];\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Key\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n\n    const project = this.getResponseProperty(\"projects\");\n    this.projects = project == null ? null : project.map((k: any) => new SecretProjectResponse(k));\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretListItemResponse } from \"./secret-list-item.response\";\nimport { SecretProjectResponse } from \"./secret-project.response\";\n\nexport class SecretWithProjectsListResponse extends BaseResponse {\n  secrets: SecretListItemResponse[];\n  projects: SecretProjectResponse[];\n\n  constructor(response: any) {\n    super(response);\n    const secrets = this.getResponseProperty(\"secrets\");\n    const projects = this.getResponseProperty(\"projects\");\n    this.projects =\n      projects == null ? null : projects.map((k: any) => new SecretProjectResponse(k));\n    this.secrets = secrets == null ? [] : secrets.map((dr: any) => new SecretListItemResponse(dr));\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretProjectResponse } from \"./secret-project.response\";\n\nexport class SecretResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  value: string;\n  note: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectResponse[];\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Key\");\n    this.value = this.getResponseProperty(\"Value\");\n    this.note = this.getResponseProperty(\"Note\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n\n    const projects = this.getResponseProperty(\"Projects\");\n    this.projects =\n      projects == null ? null : projects.map((k: any) => new SecretProjectResponse(k));\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport { SecretProjectView } from \"../models/view/secret-project.view\";\nimport { SecretView } from \"../models/view/secret.view\";\n\nimport { SecretRequest } from \"./requests/secret.request\";\nimport { SecretListItemResponse } from \"./responses/secret-list-item.response\";\nimport { SecretProjectResponse } from \"./responses/secret-project.response\";\nimport { SecretWithProjectsListResponse } from \"./responses/secret-with-projects-list.response\";\nimport { SecretResponse } from \"./responses/secret.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SecretService {\n  protected _secret: Subject<SecretView> = new Subject();\n\n  secret$ = this._secret.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getBySecretId(secretId: string): Promise<SecretView> {\n    const r = await this.apiService.send(\"GET\", \"/secrets/\" + secretId, null, true, true);\n    const secretResponse = new SecretResponse(r);\n\n    return await this.createSecretView(secretResponse);\n  }\n\n  async getSecrets(organizationId: string): Promise<SecretListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/secrets\",\n      null,\n      true,\n      true\n    );\n\n    const results = new SecretWithProjectsListResponse(r);\n    return await this.createSecretsListView(organizationId, results);\n  }\n\n  async getSecretsByProject(organizationId: string, projectId: string): Promise<SecretListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/projects/\" + projectId + \"/secrets\",\n      null,\n      true,\n      true\n    );\n\n    const results = new SecretWithProjectsListResponse(r);\n    return await this.createSecretsListView(organizationId, results);\n  }\n\n  async create(organizationId: string, secretView: SecretView) {\n    const request = await this.getSecretRequest(organizationId, secretView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/secrets\",\n      request,\n      true,\n      true\n    );\n    this._secret.next(await this.createSecretView(new SecretResponse(r)));\n  }\n\n  async update(organizationId: string, secretView: SecretView) {\n    const request = await this.getSecretRequest(organizationId, secretView);\n    const r = await this.apiService.send(\"PUT\", \"/secrets/\" + secretView.id, request, true, true);\n    this._secret.next(await this.createSecretView(new SecretResponse(r)));\n  }\n\n  async delete(secretIds: string[]) {\n    const r = await this.apiService.send(\"POST\", \"/secrets/delete\", secretIds, true, true);\n\n    const responseErrors: string[] = [];\n    r.data.forEach((element: { error: string }) => {\n      if (element.error) {\n        responseErrors.push(element.error);\n      }\n    });\n\n    // TODO waiting to hear back on how to display multiple errors.\n    // for now send as a list of strings to be displayed in toast.\n    if (responseErrors?.length >= 1) {\n      throw new Error(responseErrors.join(\",\"));\n    }\n\n    this._secret.next(null);\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async getSecretRequest(\n    organizationId: string,\n    secretView: SecretView\n  ): Promise<SecretRequest> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = new SecretRequest();\n    const [key, value, note] = await Promise.all([\n      this.encryptService.encrypt(secretView.name, orgKey),\n      this.encryptService.encrypt(secretView.value, orgKey),\n      this.encryptService.encrypt(secretView.note, orgKey),\n    ]);\n    request.key = key.encryptedString;\n    request.value = value.encryptedString;\n    request.note = note.encryptedString;\n    request.projectIds = [];\n\n    secretView.projects?.forEach((e) => request.projectIds.push(e.id));\n\n    return request;\n  }\n\n  private async createSecretView(secretResponse: SecretResponse): Promise<SecretView> {\n    const orgKey = await this.getOrganizationKey(secretResponse.organizationId);\n\n    const secretView = new SecretView();\n    secretView.id = secretResponse.id;\n    secretView.organizationId = secretResponse.organizationId;\n    secretView.creationDate = secretResponse.creationDate;\n    secretView.revisionDate = secretResponse.revisionDate;\n\n    const [name, value, note] = await Promise.all([\n      this.encryptService.decryptToUtf8(new EncString(secretResponse.name), orgKey),\n      this.encryptService.decryptToUtf8(new EncString(secretResponse.value), orgKey),\n      this.encryptService.decryptToUtf8(new EncString(secretResponse.note), orgKey),\n    ]);\n    secretView.name = name;\n    secretView.value = value;\n    secretView.note = note;\n\n    if (secretResponse.projects != null) {\n      secretView.projects = await this.decryptProjectsMappedToSecrets(\n        orgKey,\n        secretResponse.projects\n      );\n    }\n\n    return secretView;\n  }\n\n  private async createSecretsListView(\n    organizationId: string,\n    secrets: SecretWithProjectsListResponse\n  ): Promise<SecretListView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n\n    const projectsMappedToSecretsView = await this.decryptProjectsMappedToSecrets(\n      orgKey,\n      secrets.projects\n    );\n\n    return await Promise.all(\n      secrets.secrets.map(async (s: SecretListItemResponse) => {\n        const secretListView = new SecretListView();\n        secretListView.id = s.id;\n        secretListView.organizationId = s.organizationId;\n        secretListView.name = await this.encryptService.decryptToUtf8(\n          new EncString(s.name),\n          orgKey\n        );\n        secretListView.creationDate = s.creationDate;\n        secretListView.revisionDate = s.revisionDate;\n\n        const projectIds = s.projects?.map((p) => p.id);\n        secretListView.projects = projectsMappedToSecretsView.filter((p) =>\n          projectIds.includes(p.id)\n        );\n\n        return secretListView;\n      })\n    );\n  }\n\n  private async decryptProjectsMappedToSecrets(\n    orgKey: SymmetricCryptoKey,\n    projects: SecretProjectResponse[]\n  ): Promise<SecretProjectView[]> {\n    return await Promise.all(\n      projects.map(async (s: SecretProjectResponse) => {\n        const projectsMappedToSecretView = new SecretProjectView();\n        projectsMappedToSecretView.id = s.id;\n        projectsMappedToSecretView.name = await this.encryptService.decryptToUtf8(\n          new EncString(s.name),\n          orgKey\n        );\n        return projectsMappedToSecretView;\n      })\n    );\n  }\n}\n","<bit-simple-dialog>\n  <span bitDialogTitle>{{ title | i18n }}</span>\n  <span bitDialogContent class=\"tw-text-sm\">\n    <div *ngIf=\"data.secretIds.length === 1\">\n      {{ \"softDeleteSecretWarning\" | i18n }}\n    </div>\n    {{ \"deleteItemConfirmation\" | i18n }}\n  </span>\n  <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n    <button type=\"button\" bitButton buttonType=\"primary\" [bitAction]=\"delete\">\n      {{ title | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </div>\n</bit-simple-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\n\nimport { SecretService } from \"../secret.service\";\n\nexport interface SecretDeleteOperation {\n  secretIds: string[];\n}\n\n@Component({\n  selector: \"sm-secret-delete-dialog\",\n  templateUrl: \"./secret-delete.component.html\",\n})\nexport class SecretDeleteDialogComponent {\n  constructor(\n    public dialogRef: DialogRef,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    @Inject(DIALOG_DATA) public data: SecretDeleteOperation\n  ) {}\n\n  get title() {\n    return this.data.secretIds.length === 1 ? \"deleteSecret\" : \"deleteSecrets\";\n  }\n\n  delete = async () => {\n    await this.secretService.delete(this.data.secretIds);\n    this.dialogRef.close(this.data.secretIds);\n    const message =\n      this.data.secretIds.length === 1 ? \"softDeleteSuccessToast\" : \"softDeletesSuccessToast\";\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  };\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { lastValueFrom, Subject, takeUntil } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport { SecretProjectView } from \"../../models/view/secret-project.view\";\nimport { SecretView } from \"../../models/view/secret.view\";\nimport { ProjectService } from \"../../projects/project.service\";\nimport { SecretService } from \"../secret.service\";\n\nimport { SecretDeleteDialogComponent, SecretDeleteOperation } from \"./secret-delete.component\";\n\nexport enum OperationType {\n  Add,\n  Edit,\n}\n\nexport interface SecretOperation {\n  organizationId: string;\n  operation: OperationType;\n  projectId?: string;\n  secretId?: string;\n}\n\n@Component({\n  selector: \"sm-secret-dialog\",\n  templateUrl: \"./secret-dialog.component.html\",\n})\nexport class SecretDialogComponent implements OnInit {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", [Validators.required]),\n    value: new FormControl(\"\", [Validators.required]),\n    notes: new FormControl(\"\"),\n    project: new FormControl(\"\"),\n  });\n\n  protected loading = false;\n  projects: ProjectListView[];\n  selectedProjects: SecretProjectView[] = [];\n\n  private destroy$ = new Subject<void>();\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: SecretOperation,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private projectService: ProjectService,\n    private dialogService: DialogService\n  ) {}\n\n  async ngOnInit() {\n    this.projects = await this.projectService\n      .getProjects(this.data.organizationId)\n      .then((projects) => projects.sort((a, b) => a.name.localeCompare(b.name)));\n\n    if (this.data.operation === OperationType.Edit && this.data.secretId) {\n      await this.loadData();\n    } else if (this.data.operation !== OperationType.Add) {\n      this.dialogRef.close();\n      throw new Error(`The secret dialog was not called with the appropriate operation values.`);\n    }\n\n    this.formGroup\n      .get(\"project\")\n      .valueChanges.pipe(takeUntil(this.destroy$))\n      .subscribe(() => this.updateProjectList());\n\n    if (this.data.projectId) {\n      this.formGroup.get(\"project\").setValue(this.data.projectId);\n    }\n  }\n\n  async loadData() {\n    this.loading = true;\n    const secret: SecretView = await this.secretService.getBySecretId(this.data.secretId);\n    this.loading = false;\n    this.selectedProjects = secret.projects;\n    this.loading = false;\n    this.formGroup.setValue({\n      name: secret.name,\n      value: secret.value,\n      notes: secret.note,\n      project: \"\",\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  get title() {\n    return this.data.operation === OperationType.Add ? \"newSecret\" : \"editSecret\";\n  }\n\n  async removeProjectAssociation(id: string) {\n    this.selectedProjects = this.selectedProjects.filter((e) => e.id != id);\n    this.formGroup.get(\"project\").setValue(\"\");\n  }\n\n  updateProjectList() {\n    const newList: SecretProjectView[] = [];\n    const projectId = this.formGroup.get(\"project\").value;\n\n    if (projectId) {\n      const selectedProject = this.projects?.filter((p) => p.id == projectId)[0];\n\n      if (selectedProject != undefined) {\n        const projectSecretView = new SecretProjectView();\n\n        projectSecretView.id = selectedProject.id;\n        projectSecretView.name = selectedProject.name;\n\n        newList.push(projectSecretView);\n      }\n    }\n\n    this.selectedProjects = newList;\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const secretView = this.getSecretView();\n    if (this.data.operation === OperationType.Add) {\n      await this.createSecret(secretView);\n    } else {\n      secretView.id = this.data.secretId;\n      await this.updateSecret(secretView);\n    }\n    this.dialogRef.close();\n  };\n\n  get deleteButtonIsVisible(): boolean {\n    return this.data.operation === OperationType.Edit;\n  }\n\n  protected openDeleteSecretDialog() {\n    const dialogRef = this.dialogService.open<unknown, SecretDeleteOperation>(\n      SecretDeleteDialogComponent,\n      {\n        data: {\n          secretIds: [this.data.secretId],\n        },\n      }\n    );\n\n    // If the secret is deleted, chain close this dialog after the delete dialog\n    lastValueFrom(dialogRef.closed).then(\n      (closeData) => closeData !== undefined && this.dialogRef.close()\n    );\n  }\n\n  private async createSecret(secretView: SecretView) {\n    await this.secretService.create(this.data.organizationId, secretView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"secretCreated\"));\n  }\n\n  private async updateSecret(secretView: SecretView) {\n    await this.secretService.update(this.data.organizationId, secretView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"secretEdited\"));\n  }\n\n  private getSecretView() {\n    const emptyProjects: SecretProjectView[] = [];\n\n    const secretView = new SecretView();\n    secretView.organizationId = this.data.organizationId;\n    secretView.name = this.formGroup.value.name;\n    secretView.value = this.formGroup.value.value;\n    secretView.note = this.formGroup.value.notes;\n    secretView.projects = this.selectedProjects ? this.selectedProjects : emptyProjects;\n    return secretView;\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable @angular-eslint/template/button-has-type -->\n<!-- eslint-disable tailwindcss/no-custom-classname -->\n<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"default\" disablePadding>\n    <ng-container bitDialogTitle>{{ title | i18n }}</ng-container>\n    <div bitDialogContent>\n      <div *ngIf=\"loading\" class=\"tw-text-center\">\n        <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n      </div>\n      <bit-tab-group *ngIf=\"!loading\">\n        <bit-tab [label]=\"'nameValuePair' | i18n\">\n          <div class=\"tw-flex tw-gap-4 tw-pt-4\">\n            <bit-form-field class=\"tw-w-1/3\">\n              <bit-label for=\"secret-name\">{{ \"name\" | i18n }}</bit-label>\n              <input formControlName=\"name\" bitInput />\n            </bit-form-field>\n            <bit-form-field class=\"tw-w-full\">\n              <bit-label>{{ \"value\" | i18n }}</bit-label>\n              <textarea bitInput rows=\"4\" formControlName=\"value\"></textarea>\n            </bit-form-field>\n          </div>\n          <bit-form-field>\n            <bit-label>{{ \"notes\" | i18n }}</bit-label>\n            <textarea bitInput rows=\"4\" formControlName=\"notes\"></textarea>\n          </bit-form-field>\n        </bit-tab>\n        <bit-tab [label]=\"'serviceAccounts' | i18n\"></bit-tab>\n        <bit-tab [label]=\"'projects' | i18n\">\n          <bit-label class=\"tw-text-md\">{{\n            \"secretProjectAssociationDescription\" | i18n\n          }}</bit-label>\n          <bit-form-field class=\"tw-mt-3 tw-mb-0\">\n            <bit-label>{{ \"project\" | i18n }}</bit-label>\n            <select bitInput name=\"project\" formControlName=\"project\">\n              <option value=\"\">{{ \"selectPlaceholder\" | i18n }}</option>\n              <option *ngFor=\"let f of projects\" [value]=\"f.id\" (change)=\"updateProjectList()\">\n                {{ f.name }}\n              </option>\n            </select>\n          </bit-form-field>\n          <small class=\"form-text text-muted tw-mb-6\">{{ \"selectProjects\" | i18n }}</small>\n\n          <bit-table>\n            <ng-container header>\n              <tr>\n                <th bitCell>{{ \"project\" | i18n }}</th>\n                <th bitCell></th>\n              </tr>\n            </ng-container>\n            <ng-template body *ngIf=\"selectedProjects != null\">\n              <tr bitRow *ngFor=\"let e of selectedProjects\">\n                <td bitCell class=\"tw-overflow-hidden tw-break-words tw-text-sm\">\n                  {{ e.name }}\n                </td>\n                <td bitCell class=\"tw-w-0\">\n                  <button\n                    (click)=\"removeProjectAssociation(e.id)\"\n                    bitIconButton=\"bwi-close\"\n                    buttonType=\"main\"\n                    [title]=\"'options' | i18n\"\n                    [attr.aria-label]=\"'options' | i18n\"\n                  ></button>\n                </td>\n              </tr>\n            </ng-template>\n          </bit-table>\n        </bit-tab>\n      </bit-tab-group>\n    </div>\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"save\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n      <button\n        *ngIf=\"deleteButtonIsVisible\"\n        class=\"tw-ml-auto\"\n        type=\"button\"\n        bitIconButton=\"bwi-trash\"\n        buttonType=\"danger\"\n        bitFormButton\n        (click)=\"openDeleteSecretDialog()\"\n      ></button>\n    </div>\n  </bit-dialog>\n</form>\n","export class ServiceAccountView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n}\n","import { EncString } from \"@bitwarden/common/models/domain/enc-string\";\n\nexport class ServiceAccountRequest {\n  name: EncString;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class ServiceAccountResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\n\nimport { ServiceAccountView } from \"../models/view/service-account.view\";\n\nimport { ServiceAccountRequest } from \"./models/requests/service-account.request\";\nimport { ServiceAccountResponse } from \"./models/responses/service-account.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ServiceAccountService {\n  protected _serviceAccount: Subject<ServiceAccountView> = new Subject();\n\n  serviceAccount$ = this._serviceAccount.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getServiceAccounts(organizationId: string): Promise<ServiceAccountView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/service-accounts\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, ServiceAccountResponse);\n    return await this.createServiceAccountViews(organizationId, results.data);\n  }\n\n  async create(organizationId: string, serviceAccountView: ServiceAccountView) {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = await this.getServiceAccountRequest(orgKey, serviceAccountView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/service-accounts\",\n      request,\n      true,\n      true\n    );\n    this._serviceAccount.next(\n      await this.createServiceAccountView(orgKey, new ServiceAccountResponse(r))\n    );\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async getServiceAccountRequest(\n    organizationKey: SymmetricCryptoKey,\n    serviceAccountView: ServiceAccountView\n  ) {\n    const request = new ServiceAccountRequest();\n    request.name = await this.encryptService.encrypt(serviceAccountView.name, organizationKey);\n    return request;\n  }\n\n  private async createServiceAccountView(\n    organizationKey: SymmetricCryptoKey,\n    serviceAccountResponse: ServiceAccountResponse\n  ): Promise<ServiceAccountView> {\n    const serviceAccountView = new ServiceAccountView();\n    serviceAccountView.id = serviceAccountResponse.id;\n    serviceAccountView.organizationId = serviceAccountResponse.organizationId;\n    serviceAccountView.creationDate = serviceAccountResponse.creationDate;\n    serviceAccountView.revisionDate = serviceAccountResponse.revisionDate;\n    serviceAccountView.name = await this.encryptService.decryptToUtf8(\n      new EncString(serviceAccountResponse.name),\n      organizationKey\n    );\n    return serviceAccountView;\n  }\n\n  private async createServiceAccountViews(\n    organizationId: string,\n    serviceAccountResponses: ServiceAccountResponse[]\n  ): Promise<ServiceAccountView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      serviceAccountResponses.map(async (s: ServiceAccountResponse) => {\n        return await this.createServiceAccountView(orgKey, s);\n      })\n    );\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"default\">\n    <ng-container bitDialogTitle>{{ \"newServiceAccount\" | i18n }}</ng-container>\n    <div bitDialogContent>\n      <bit-form-field>\n        <bit-label>{{ \"serviceAccountName\" | i18n }}</bit-label>\n        <input formControlName=\"name\" bitInput />\n      </bit-form-field>\n      <h3 class=\"tw-uppercase\">{{ \"smAccess\" | i18n }}</h3>\n\n      <bit-form-field>\n        <bit-label>{{ \"newSaSelectAccess\" | i18n }}</bit-label>\n        <select bitInput>\n          <!-- TODO need to look into creating a bit autocomplete component? -->\n          <option selected disabled hidden>-- {{ \"newSaTypeToFilter\" | i18n }} --</option>\n          <option *ngFor=\"let project of projects\">\n            {{ project.name }}\n          </option>\n          <option *ngFor=\"let secret of secrets\">\n            {{ secret.name }}\n          </option>\n        </select>\n      </bit-form-field>\n\n      <bit-table>\n        <ng-container header>\n          <tr>\n            <th bitCell>{{ \"projectCommaSecret\" | i18n }}</th>\n            <th bitCell>{{ \"permissions\" | i18n }}</th>\n          </tr>\n        </ng-container>\n        <ng-template body>\n          <tr>\n            <!-- TODO once access is implement display selected access -->\n            <td bitCell>example</td>\n            <td bitCell>example</td>\n          </tr>\n        </ng-template>\n      </bit-table>\n    </div>\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"save\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </div>\n  </bit-dialog>\n</form>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport { SecretListView } from \"../../models/view/secret-list.view\";\nimport { ServiceAccountView } from \"../../models/view/service-account.view\";\nimport { ProjectService } from \"../../projects/project.service\";\nimport { SecretService } from \"../../secrets/secret.service\";\nimport { ServiceAccountService } from \"../service-account.service\";\n\nexport interface ServiceAccountOperation {\n  organizationId: string;\n}\n\n@Component({\n  selector: \"sm-service-account-dialog\",\n  templateUrl: \"./service-account-dialog.component.html\",\n})\nexport class ServiceAccountDialogComponent implements OnInit {\n  projects: ProjectListView[];\n  secrets: SecretListView[];\n\n  formGroup = new FormGroup({\n    name: new FormControl(\"\", [Validators.required]),\n  });\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: ServiceAccountOperation,\n    private serviceAccountService: ServiceAccountService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private projectService: ProjectService,\n    private secretService: SecretService\n  ) {}\n\n  async ngOnInit() {\n    this.projects = await this.projectService.getProjects(this.data.organizationId);\n    this.secrets = await this.secretService.getSecrets(this.data.organizationId);\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const serviceAccountView = this.getServiceAccountView();\n    await this.serviceAccountService.create(this.data.organizationId, serviceAccountView);\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"serviceAccountCreated\")\n    );\n    this.dialogRef.close();\n  };\n\n  private getServiceAccountView() {\n    const serviceAccountView = new ServiceAccountView();\n    serviceAccountView.organizationId = this.data.organizationId;\n    serviceAccountView.name = this.formGroup.value.name;\n    return serviceAccountView;\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport {\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../projects/dialog/project-dialog.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"../secrets/dialog/secret-dialog.component\";\nimport {\n  ServiceAccountDialogComponent,\n  ServiceAccountOperation,\n} from \"../service-accounts/dialog/service-account-dialog.component\";\n\n@Component({\n  selector: \"sm-new-menu\",\n  templateUrl: \"./new-menu.component.html\",\n})\nexport class NewMenuComponent implements OnInit, OnDestroy {\n  private organizationId: string;\n  private destroy$: Subject<void> = new Subject<void>();\n\n  constructor(private route: ActivatedRoute, private dialogService: DialogService) {}\n\n  ngOnInit() {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params: any) => {\n      this.organizationId = params.organizationId;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  openSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openProjectDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openServiceAccountDialog() {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n      },\n    });\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable @angular-eslint/template/button-has-type -->\n<button bitButton class=\"tw-min-w-max\" buttonType=\"primary\" [bitMenuTriggerFor]=\"newMenu\">\n  {{ \"new\" | i18n }} <i class=\"bwi bwi-angle-down\" aria-hidden=\"true\"></i>\n</button>\n\n<bit-menu #newMenu>\n  <button type=\"button\" bitMenuItem (click)=\"openProjectDialog()\">\n    <i class=\"bwi bwi-fw bwi-sitemap tw-text-xl\" aria-hidden=\"true\"></i>\n    {{ \"project\" | i18n }}\n  </button>\n  <button type=\"button\" bitMenuItem (click)=\"openSecretDialog()\">\n    <i class=\"bwi bwi-fw bwi-key tw-text-xl\" aria-hidden=\"true\"></i>\n    {{ \"secret\" | i18n }}\n  </button>\n  <button type=\"button\" bitMenuItem (click)=\"openServiceAccountDialog()\">\n    <i class=\"bwi bwi-fw bwi-wrench tw-text-xl\" aria-hidden=\"true\"></i>\n    {{ \"serviceAccount\" | i18n }}\n  </button>\n</bit-menu>\n","import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-overview\",\n  templateUrl: \"./overview.component.html\",\n})\nexport class OverviewComponent {}\n","<sm-header>\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { OverviewComponent } from \"./overview.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: OverviewComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OverviewRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { OverviewRoutingModule } from \"./overview-routing.module\";\nimport { OverviewComponent } from \"./overview.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, OverviewRoutingModule],\n  declarations: [OverviewComponent],\n  providers: [],\n})\nexport class OverviewModule {}\n","export class PotentialGranteeView {\n  id: string;\n  name: string;\n  type: string;\n  email: string;\n}\n","import {\n  GroupProjectAccessPolicyView,\n  ServiceAccountProjectAccessPolicyView,\n  UserProjectAccessPolicyView,\n} from \"./access-policy.view\";\n\nexport class ProjectAccessPoliciesView {\n  userAccessPolicies: UserProjectAccessPolicyView[];\n  groupAccessPolicies: GroupProjectAccessPolicyView[];\n  serviceAccountAccessPolicies: ServiceAccountProjectAccessPolicyView[];\n}\n","import { AccessPolicyRequest } from \"./access-policy.request\";\n\nexport class AccessPoliciesCreateRequest {\n  userAccessPolicyRequests?: AccessPolicyRequest[];\n  groupAccessPolicyRequests?: AccessPolicyRequest[];\n  serviceAccountAccessPolicyRequests?: AccessPolicyRequest[];\n}\n","export class AccessPolicyUpdateRequest {\n  read: boolean;\n  write: boolean;\n}\n","export class AccessPolicyRequest {\n  granteeId: string;\n  read: boolean;\n  write: boolean;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class PotentialGranteeResponse extends BaseResponse {\n  id: string;\n  name: string;\n  type: string;\n  email: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport {\n  GroupProjectAccessPolicyResponse,\n  ServiceAccountProjectAccessPolicyResponse,\n  UserProjectAccessPolicyResponse,\n} from \"./access-policy.response\";\n\nexport class ProjectAccessPoliciesResponse extends BaseResponse {\n  userAccessPolicies: UserProjectAccessPolicyResponse[];\n  groupAccessPolicies: GroupProjectAccessPolicyResponse[];\n  serviceAccountAccessPolicies: ServiceAccountProjectAccessPolicyResponse[];\n\n  constructor(response: any) {\n    super(response);\n    this.userAccessPolicies = this.getResponseProperty(\"UserAccessPolicies\");\n    this.groupAccessPolicies = this.getResponseProperty(\"GroupAccessPolicies\");\n    this.serviceAccountAccessPolicies = this.getResponseProperty(\"ServiceAccountAccessPolicies\");\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\n\nimport {\n  BaseAccessPolicyView,\n  GroupProjectAccessPolicyView,\n  ServiceAccountProjectAccessPolicyView,\n  UserProjectAccessPolicyView,\n} from \"../../models/view/access-policy.view\";\nimport { PotentialGranteeView } from \"../../models/view/potential-grantee.view\";\nimport { ProjectAccessPoliciesView } from \"../../models/view/project-access-policies.view\";\n\nimport { AccessPoliciesCreateRequest } from \"./models/requests/access-policies-create.request\";\nimport { AccessPolicyUpdateRequest } from \"./models/requests/access-policy-update.request\";\nimport { AccessPolicyRequest } from \"./models/requests/access-policy.request\";\nimport {\n  GroupProjectAccessPolicyResponse,\n  ServiceAccountProjectAccessPolicyResponse,\n  UserProjectAccessPolicyResponse,\n} from \"./models/responses/access-policy.response\";\nimport { PotentialGranteeResponse } from \"./models/responses/potential-grantee.response\";\nimport { ProjectAccessPoliciesResponse } from \"./models/responses/project-access-policies.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AccessPolicyService {\n  protected _projectAccessPolicies = new Subject<ProjectAccessPoliciesView>();\n  projectAccessPolicies$ = this._projectAccessPolicies.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getProjectAccessPolicies(\n    organizationId: string,\n    projectId: string\n  ): Promise<ProjectAccessPoliciesView> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/projects/\" + projectId + \"/access-policies\",\n      null,\n      true,\n      true\n    );\n\n    const results = new ProjectAccessPoliciesResponse(r);\n    return await this.createProjectAccessPoliciesView(organizationId, results);\n  }\n\n  async getPeoplePotentialGrantees(organizationId: string) {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/access-policies/people/potential-grantees\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, PotentialGranteeResponse);\n    return await this.createPotentialGranteeViews(organizationId, results.data);\n  }\n\n  async getServiceAccountsPotentialGrantees(organizationId: string) {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/access-policies/service-accounts/potential-grantees\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, PotentialGranteeResponse);\n    return await this.createPotentialGranteeViews(organizationId, results.data);\n  }\n\n  async deleteAccessPolicy(accessPolicyId: string): Promise<void> {\n    await this.apiService.send(\"DELETE\", \"/access-policies/\" + accessPolicyId, null, true, false);\n    this._projectAccessPolicies.next(null);\n  }\n\n  async updateAccessPolicy(baseAccessPolicyView: BaseAccessPolicyView): Promise<void> {\n    const payload = new AccessPolicyUpdateRequest();\n    payload.read = baseAccessPolicyView.read;\n    payload.write = baseAccessPolicyView.write;\n    await this.apiService.send(\n      \"PUT\",\n      \"/access-policies/\" + baseAccessPolicyView.id,\n      payload,\n      true,\n      true\n    );\n  }\n\n  async createProjectAccessPolicies(\n    organizationId: string,\n    projectId: string,\n    projectAccessPoliciesView: ProjectAccessPoliciesView\n  ): Promise<ProjectAccessPoliciesView> {\n    const request = this.getAccessPoliciesCreateRequest(projectAccessPoliciesView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/projects/\" + projectId + \"/access-policies\",\n      request,\n      true,\n      true\n    );\n    const results = new ProjectAccessPoliciesResponse(r);\n    const view = await this.createProjectAccessPoliciesView(organizationId, results);\n    this._projectAccessPolicies.next(view);\n    return view;\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private getAccessPoliciesCreateRequest(\n    projectAccessPoliciesView: ProjectAccessPoliciesView\n  ): AccessPoliciesCreateRequest {\n    const createRequest = new AccessPoliciesCreateRequest();\n\n    if (projectAccessPoliciesView.userAccessPolicies?.length > 0) {\n      createRequest.userAccessPolicyRequests = projectAccessPoliciesView.userAccessPolicies.map(\n        (ap) => {\n          return this.getAccessPolicyRequest(ap.organizationUserId, ap);\n        }\n      );\n    }\n\n    if (projectAccessPoliciesView.groupAccessPolicies?.length > 0) {\n      createRequest.groupAccessPolicyRequests = projectAccessPoliciesView.groupAccessPolicies.map(\n        (ap) => {\n          return this.getAccessPolicyRequest(ap.groupId, ap);\n        }\n      );\n    }\n\n    if (projectAccessPoliciesView.serviceAccountAccessPolicies?.length > 0) {\n      createRequest.serviceAccountAccessPolicyRequests =\n        projectAccessPoliciesView.serviceAccountAccessPolicies.map((ap) => {\n          return this.getAccessPolicyRequest(ap.serviceAccountId, ap);\n        });\n    }\n    return createRequest;\n  }\n\n  private getAccessPolicyRequest(\n    granteeId: string,\n    view:\n      | UserProjectAccessPolicyView\n      | GroupProjectAccessPolicyView\n      | ServiceAccountProjectAccessPolicyView\n  ) {\n    const request = new AccessPolicyRequest();\n    request.granteeId = granteeId;\n    request.read = view.read;\n    request.write = view.write;\n    return request;\n  }\n\n  private async createProjectAccessPoliciesView(\n    organizationId: string,\n    projectAccessPoliciesResponse: ProjectAccessPoliciesResponse\n  ): Promise<ProjectAccessPoliciesView> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const view = new ProjectAccessPoliciesView();\n\n    view.userAccessPolicies = projectAccessPoliciesResponse.userAccessPolicies.map((ap) => {\n      return this.createUserProjectAccessPolicyView(ap);\n    });\n    view.groupAccessPolicies = projectAccessPoliciesResponse.groupAccessPolicies.map((ap) => {\n      return this.createGroupProjectAccessPolicyView(ap);\n    });\n    view.serviceAccountAccessPolicies = await Promise.all(\n      projectAccessPoliciesResponse.serviceAccountAccessPolicies.map(async (ap) => {\n        return await this.createServiceAccountProjectAccessPolicyView(orgKey, ap);\n      })\n    );\n    return view;\n  }\n\n  private createUserProjectAccessPolicyView(\n    response: UserProjectAccessPolicyResponse\n  ): UserProjectAccessPolicyView {\n    const view = <UserProjectAccessPolicyView>this.createBaseAccessPolicyView(response);\n    view.grantedProjectId = response.grantedProjectId;\n    view.organizationUserId = response.organizationUserId;\n    view.organizationUserName = response.organizationUserName;\n    return view;\n  }\n\n  private createGroupProjectAccessPolicyView(\n    response: GroupProjectAccessPolicyResponse\n  ): GroupProjectAccessPolicyView {\n    const view = <GroupProjectAccessPolicyView>this.createBaseAccessPolicyView(response);\n    view.grantedProjectId = response.grantedProjectId;\n    view.groupId = response.groupId;\n    view.groupName = response.groupName;\n    return view;\n  }\n\n  private async createServiceAccountProjectAccessPolicyView(\n    organizationKey: SymmetricCryptoKey,\n    response: ServiceAccountProjectAccessPolicyResponse\n  ): Promise<ServiceAccountProjectAccessPolicyView> {\n    const view = <ServiceAccountProjectAccessPolicyView>this.createBaseAccessPolicyView(response);\n    view.grantedProjectId = response.grantedProjectId;\n    view.serviceAccountId = response.serviceAccountId;\n    view.serviceAccountName = await this.encryptService.decryptToUtf8(\n      new EncString(response.serviceAccountName),\n      organizationKey\n    );\n    return view;\n  }\n\n  private createBaseAccessPolicyView(\n    response:\n      | UserProjectAccessPolicyResponse\n      | GroupProjectAccessPolicyResponse\n      | ServiceAccountProjectAccessPolicyResponse\n  ) {\n    return {\n      id: response.id,\n      read: response.read,\n      write: response.write,\n      creationDate: response.creationDate,\n      revisionDate: response.revisionDate,\n    };\n  }\n\n  private async createPotentialGranteeViews(\n    organizationId: string,\n    results: PotentialGranteeResponse[]\n  ): Promise<PotentialGranteeView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      results.map(async (r) => {\n        const view = new PotentialGranteeView();\n        view.id = r.id;\n        view.type = r.type;\n        view.email = r.email;\n\n        if (r.type === \"serviceAccount\") {\n          view.name = await this.encryptService.decryptToUtf8(new EncString(r.name), orgKey);\n        } else {\n          view.name = r.name;\n        }\n        return view;\n      })\n    );\n  }\n}\n","export class BaseAccessPolicyView {\n  id: string;\n  read: boolean;\n  write: boolean;\n  creationDate: string;\n  revisionDate: string;\n}\n\nexport class UserProjectAccessPolicyView extends BaseAccessPolicyView {\n  organizationUserId: string;\n  organizationUserName: string;\n  grantedProjectId: string;\n}\n\nexport class GroupProjectAccessPolicyView extends BaseAccessPolicyView {\n  groupId: string;\n  groupName: string;\n  grantedProjectId: string;\n}\n\nexport class ServiceAccountProjectAccessPolicyView extends BaseAccessPolicyView {\n  serviceAccountId: string;\n  serviceAccountName: string;\n  grantedProjectId: string;\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\" class=\"tw-mt-5\">\n  <bit-form-field>\n    <bit-label>{{ label }}</bit-label>\n    <bit-multi-select\n      class=\"tw-mr-4 tw-w-full\"\n      formControlName=\"multiSelect\"\n      [baseItems]=\"selectItemsView$ | async\"\n      [loading]=\"loading\"\n    ></bit-multi-select>\n    <bit-hint>{{ hint }}</bit-hint>\n    <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n      {{ \"add\" | i18n }}\n    </button>\n  </bit-form-field>\n</form>\n\n<ng-container *ngIf=\"rows$ | async as rows; else spinner\">\n  <bit-table>\n    <ng-container header>\n      <tr>\n        <th bitCell colspan=\"2\">{{ columnTitle }}</th>\n        <th bitCell>{{ \"permissions\" | i18n }}</th>\n      </tr>\n    </ng-container>\n\n    <ng-template body>\n      <ng-container *ngIf=\"rows?.length > 0; else empty\">\n        <tr bitRow *ngFor=\"let row of rows\">\n          <td bitCell class=\"tw-w-0 tw-pr-0\">\n            <i class=\"bwi {{ row.icon }} tw-text-xl tw-text-muted\" aria-hidden=\"true\"></i>\n          </td>\n          <td bitCell>{{ row.name }}</td>\n          <td bitCell *ngIf=\"row.type == 'serviceAccount'\">\n            <bit-form-field class=\"tw-inline-block tw-w-auto\">\n              <select bitInput disabled>\n                <option value=\"canRead\" selected>{{ \"canRead\" | i18n }}</option>\n              </select>\n            </bit-form-field>\n          </td>\n          <td bitCell *ngIf=\"row.type != 'serviceAccount'\">\n            <bit-form-field class=\"tw-inline-block tw-w-auto\">\n              <select bitInput (change)=\"updateAccessPolicy($event.target, row.id)\">\n                <option value=\"canRead\" [selected]=\"row.read && row.write != true\">\n                  {{ \"canRead\" | i18n }}\n                </option>\n                <option value=\"canWrite\" [selected]=\"row.read != true && row.write\">\n                  {{ \"canWrite\" | i18n }}\n                </option>\n                <option value=\"canReadWrite\" [selected]=\"row.read && row.write\">\n                  {{ \"canReadWrite\" | i18n }}\n                </option>\n              </select>\n            </bit-form-field>\n          </td>\n          <td bitCell class=\"tw-w-0\">\n            <button\n              type=\"button\"\n              bitIconButton=\"bwi-close\"\n              buttonType=\"main\"\n              size=\"default\"\n              [attr.title]=\"'close' | i18n\"\n              [attr.aria-label]=\"'close' | i18n\"\n              [bitAction]=\"delete(row.id)\"\n            ></button>\n          </td>\n        </tr>\n      </ng-container>\n    </ng-template>\n  </bit-table>\n</ng-container>\n\n<ng-template #empty>\n  <div class=\"tw-mt-4 tw-text-center\">\n    {{ emptyMessage }}\n  </div>\n</ng-template>\n\n<ng-template #spinner>\n  <div class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n  </div>\n</ng-template>\n","import { Component, Input, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  combineLatestWith,\n  distinctUntilChanged,\n  firstValueFrom,\n  map,\n  Observable,\n  Subject,\n  takeUntil,\n  tap,\n} from \"rxjs\";\n\nimport { ValidationService } from \"@bitwarden/common/abstractions/validation.service\";\nimport { SelectItemView } from \"@bitwarden/components/src/multi-select/models/select-item-view\";\n\nimport {\n  BaseAccessPolicyView,\n  GroupProjectAccessPolicyView,\n  ServiceAccountProjectAccessPolicyView,\n  UserProjectAccessPolicyView,\n} from \"../../models/view/access-policy.view\";\nimport { PotentialGranteeView } from \"../../models/view/potential-grantee.view\";\nimport { ProjectAccessPoliciesView } from \"../../models/view/project-access-policies.view\";\n\nimport { AccessPolicyService } from \"./access-policy.service\";\n\ntype RowItemView = {\n  type: \"user\" | \"group\" | \"serviceAccount\";\n  name: string;\n  id: string;\n  read: boolean;\n  write: boolean;\n  icon: string;\n};\n\n@Component({\n  selector: \"sm-access-selector\",\n  templateUrl: \"./access-selector.component.html\",\n})\nexport class AccessSelectorComponent implements OnInit, OnDestroy {\n  @Input() label: string;\n  @Input() hint: string;\n  @Input() tableType: \"projectPeople\" | \"projectServiceAccounts\";\n  @Input() columnTitle: string;\n  @Input() emptyMessage: string;\n\n  private readonly userIcon = \"bwi-user\";\n  private readonly groupIcon = \"bwi-family\";\n  private readonly serviceAccountIcon = \"bwi-wrench\";\n\n  @Input() projectAccessPolicies$: Observable<ProjectAccessPoliciesView>;\n  @Input() potentialGrantees$: Observable<PotentialGranteeView[]>;\n\n  private projectId: string;\n  private organizationId: string;\n  private destroy$: Subject<void> = new Subject<void>();\n\n  protected loading = true;\n  protected formGroup = new FormGroup({\n    multiSelect: new FormControl([], [Validators.required]),\n  });\n\n  protected selectItemsView$: Observable<SelectItemView[]>;\n  protected rows$: Observable<RowItemView[]>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private accessPolicyService: AccessPolicyService,\n    private validationService: ValidationService\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params: any) => {\n      this.organizationId = params.organizationId;\n      this.projectId = params.projectId;\n    });\n\n    this.selectItemsView$ = this.projectAccessPolicies$.pipe(\n      distinctUntilChanged(\n        (prev, curr) => this.getAccessPoliciesCount(curr) === this.getAccessPoliciesCount(prev)\n      ),\n      combineLatestWith(this.potentialGrantees$),\n      map(([projectAccessPolicies, potentialGrantees]) =>\n        this.createSelectView(projectAccessPolicies, potentialGrantees)\n      ),\n      tap(() => {\n        this.loading = false;\n        this.formGroup.enable();\n        this.formGroup.reset();\n      })\n    );\n\n    this.rows$ = this.projectAccessPolicies$.pipe(\n      map((policies) => {\n        const rowData: RowItemView[] = [];\n\n        if (this.tableType === \"projectPeople\") {\n          policies.userAccessPolicies.forEach((policy) => {\n            rowData.push({\n              type: \"user\",\n              name: policy.organizationUserName,\n              id: policy.id,\n              read: policy.read,\n              write: policy.write,\n              icon: this.userIcon,\n            });\n          });\n\n          policies.groupAccessPolicies.forEach((policy) => {\n            rowData.push({\n              type: \"group\",\n              name: policy.groupName,\n              id: policy.id,\n              read: policy.read,\n              write: policy.write,\n              icon: this.groupIcon,\n            });\n          });\n        }\n\n        if (this.tableType === \"projectServiceAccounts\") {\n          policies.serviceAccountAccessPolicies.forEach((policy) => {\n            rowData.push({\n              type: \"serviceAccount\",\n              name: policy.serviceAccountName,\n              id: policy.id,\n              read: policy.read,\n              write: policy.write,\n              icon: this.serviceAccountIcon,\n            });\n          });\n        }\n        return rowData;\n      })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n    if (this.formGroup.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.formGroup.disable();\n\n    this.accessPolicyService.createProjectAccessPolicies(\n      this.organizationId,\n      this.projectId,\n      this.createProjectAccessPoliciesViewFromSelected()\n    );\n\n    return firstValueFrom(this.selectItemsView$);\n  };\n\n  private createSelectView = (\n    projectAccessPolicies: ProjectAccessPoliciesView,\n    potentialGrantees: PotentialGranteeView[]\n  ): SelectItemView[] => {\n    const selectItemsView = potentialGrantees.map((granteeView) => {\n      let icon: string;\n      let listName: string;\n      if (granteeView.type === \"user\") {\n        icon = this.userIcon;\n        listName = `${granteeView.name} (${granteeView.email})`;\n      } else if (granteeView.type === \"group\") {\n        icon = this.groupIcon;\n        listName = granteeView.name;\n      } else {\n        icon = this.serviceAccountIcon;\n        listName = granteeView.name;\n      }\n      return {\n        icon: icon,\n        id: granteeView.id,\n        labelName: granteeView.name,\n        listName: listName,\n      };\n    });\n    return this.filterExistingAccessPolicies(selectItemsView, projectAccessPolicies);\n  };\n\n  private createProjectAccessPoliciesViewFromSelected(): ProjectAccessPoliciesView {\n    const projectAccessPoliciesView = new ProjectAccessPoliciesView();\n    projectAccessPoliciesView.userAccessPolicies = this.formGroup.value.multiSelect\n      ?.filter((selection) => selection.icon === this.userIcon)\n      ?.map((filtered) => {\n        const view = new UserProjectAccessPolicyView();\n        view.grantedProjectId = this.projectId;\n        view.organizationUserId = filtered.id;\n        view.read = true;\n        view.write = false;\n        return view;\n      });\n\n    projectAccessPoliciesView.groupAccessPolicies = this.formGroup.value.multiSelect\n      ?.filter((selection) => selection.icon === this.groupIcon)\n      ?.map((filtered) => {\n        const view = new GroupProjectAccessPolicyView();\n        view.grantedProjectId = this.projectId;\n        view.groupId = filtered.id;\n        view.read = true;\n        view.write = false;\n        return view;\n      });\n\n    projectAccessPoliciesView.serviceAccountAccessPolicies = this.formGroup.value.multiSelect\n      ?.filter((selection) => selection.icon === this.serviceAccountIcon)\n      ?.map((filtered) => {\n        const view = new ServiceAccountProjectAccessPolicyView();\n        view.grantedProjectId = this.projectId;\n        view.serviceAccountId = filtered.id;\n        view.read = true;\n        view.write = false;\n        return view;\n      });\n    return projectAccessPoliciesView;\n  }\n\n  private getAccessPoliciesCount(projectAccessPoliciesView: ProjectAccessPoliciesView) {\n    return (\n      projectAccessPoliciesView.groupAccessPolicies.length +\n      projectAccessPoliciesView.serviceAccountAccessPolicies.length +\n      projectAccessPoliciesView.userAccessPolicies.length\n    );\n  }\n\n  private filterExistingAccessPolicies(\n    potentialGrantees: SelectItemView[],\n    projectAccessPolicies: ProjectAccessPoliciesView\n  ): SelectItemView[] {\n    return potentialGrantees\n      .filter(\n        (potentialGrantee) =>\n          !projectAccessPolicies.serviceAccountAccessPolicies.some(\n            (ap) => ap.serviceAccountId === potentialGrantee.id\n          )\n      )\n      .filter(\n        (potentialGrantee) =>\n          !projectAccessPolicies.userAccessPolicies.some(\n            (ap) => ap.organizationUserId === potentialGrantee.id\n          )\n      )\n      .filter(\n        (potentialGrantee) =>\n          !projectAccessPolicies.groupAccessPolicies.some(\n            (ap) => ap.groupId === potentialGrantee.id\n          )\n      );\n  }\n\n  async updateAccessPolicy(target: any, accessPolicyId: string): Promise<void> {\n    try {\n      const accessPolicyView = new BaseAccessPolicyView();\n      accessPolicyView.id = accessPolicyId;\n      if (target.value === \"canRead\") {\n        accessPolicyView.read = true;\n        accessPolicyView.write = false;\n      } else if (target.value === \"canWrite\") {\n        accessPolicyView.read = false;\n        accessPolicyView.write = true;\n      } else if (target.value === \"canReadWrite\") {\n        accessPolicyView.read = true;\n        accessPolicyView.write = true;\n      }\n\n      await this.accessPolicyService.updateAccessPolicy(accessPolicyView);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  delete = (accessPolicyId: string) => async () => {\n    this.loading = true;\n    this.formGroup.disable();\n    await this.accessPolicyService.deleteAccessPolicy(accessPolicyId);\n    return firstValueFrom(this.selectItemsView$);\n  };\n}\n","<ng-container *ngIf=\"projectAccessPolicies$; else spinner\">\n  <div class=\"tw-w-2/5\">\n    <p class=\"tw-mt-8\">\n      {{ description }}\n    </p>\n    <sm-access-selector\n      [projectAccessPolicies$]=\"projectAccessPolicies$\"\n      [potentialGrantees$]=\"potentialGrantees$\"\n      [label]=\"label\"\n      [hint]=\"hint\"\n      [tableType]=\"accessType\"\n      [columnTitle]=\"columnTitle\"\n      [emptyMessage]=\"emptyMessage\"\n    >\n    </sm-access-selector>\n  </div>\n</ng-container>\n\n<ng-template #spinner>\n  <div class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n  </div>\n</ng-template>\n","import { Component, Input, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, share, startWith, switchMap } from \"rxjs\";\n\nimport { PotentialGranteeView } from \"../../models/view/potential-grantee.view\";\nimport { ProjectAccessPoliciesView } from \"../../models/view/project-access-policies.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\n\n@Component({\n  selector: \"sm-project-access\",\n  templateUrl: \"./project-access.component.html\",\n})\nexport class ProjectAccessComponent implements OnInit {\n  @Input() accessType: \"projectPeople\" | \"projectServiceAccounts\";\n  @Input() description: string;\n  @Input() label: string;\n  @Input() hint: string;\n  @Input() columnTitle: string;\n  @Input() emptyMessage: string;\n\n  protected projectAccessPolicies$: Observable<ProjectAccessPoliciesView>;\n  protected potentialGrantees$: Observable<PotentialGranteeView[]>;\n\n  constructor(private route: ActivatedRoute, private accessPolicyService: AccessPolicyService) {}\n\n  ngOnInit(): void {\n    this.projectAccessPolicies$ = this.accessPolicyService.projectAccessPolicies$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(([_, params]) => {\n        return this.accessPolicyService.getProjectAccessPolicies(\n          params.organizationId,\n          params.projectId\n        );\n      }),\n      share()\n    );\n\n    this.potentialGrantees$ = this.accessPolicyService.projectAccessPolicies$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        if (this.accessType == \"projectPeople\") {\n          return await this.accessPolicyService.getPeoplePotentialGrantees(params.organizationId);\n        } else {\n          return await this.accessPolicyService.getServiceAccountsPotentialGrantees(\n            params.organizationId\n          );\n        }\n      }),\n      share()\n    );\n  }\n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-project-people\",\n  templateUrl: \"./project-people.component.html\",\n})\nexport class ProjectPeopleComponent {}\n","<sm-project-access\n  accessType=\"projectPeople\"\n  [description]=\"'projectPeopleDescription' | i18n\"\n  [label]=\"'people' | i18n\"\n  [hint]=\"'projectPeopleSelectHint' | i18n\"\n  [columnTitle]=\"'groupSlashUser' | i18n\"\n  [emptyMessage]=\"'projectEmptyPeopleAccessPolicies' | i18n\"\n>\n</sm-project-access>\n","import { Component } from \"@angular/core\";\n\nimport { Icons } from \"@bitwarden/components\";\n\n@Component({\n  selector: \"sm-no-items\",\n  templateUrl: \"./no-items.component.html\",\n})\nexport class NoItemsComponent {\n  protected icon = Icons.Search;\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable @angular-eslint/template/button-has-type -->\n<div *ngIf=\"!secrets\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<sm-no-items *ngIf=\"secrets?.length == 0\">\n  <ng-container slot=\"title\">{{ \"secretsNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container slot=\"description\">{{ \"secretsNoItemsMessage\" | i18n }}</ng-container>\n  <button slot=\"button\" bitButton buttonType=\"secondary\" (click)=\"newSecretEvent.emit()\">\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newSecret\" | i18n }}\n  </button>\n</sm-no-items>\n\n<bit-table *ngIf=\"secrets?.length >= 1\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"!tw-mb-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell colspan=\"2\">{{ \"name\" | i18n }}</th>\n      <th bitCell>{{ \"project\" | i18n }}</th>\n      <th bitCell>{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body>\n    <tr bitRow *ngFor=\"let secret of secrets\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(secret.id) : null\"\n          [checked]=\"selection.isSelected(secret.id)\"\n        />\n      </td>\n      <td bitCell class=\"tw-w-0 tw-pr-0\">\n        <i class=\"bwi bwi-key tw-text-xl tw-text-muted\" aria-hidden=\"true\"></i>\n      </td>\n      <td bitCell class=\"tw-break-all\">{{ secret.name }}</td>\n      <td bitCell>\n        <span\n          *ngFor=\"let project of secret.projects\"\n          bitBadge\n          badgeType=\"secondary\"\n          class=\"tw-ml-1\"\n        >\n          {{ project.name }}\n        </span>\n      </td>\n      <td bitCell>{{ secret.revisionDate | date: \"medium\" }}</td>\n      <td bitCell>\n        <button\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"secretMenu\"\n        ></button>\n      </td>\n\n      <bit-menu #secretMenu>\n        <button type=\"button\" bitMenuItem (click)=\"editSecretEvent.emit(secret.id)\">\n          <i class=\"bwi bwi-fw bwi-pencil tw-text-xl\" aria-hidden=\"true\"></i>\n          {{ \"editSecret\" | i18n }}\n        </button>\n        <button type=\"button\" bitMenuItem (click)=\"copySecretNameEvent.emit(secret.id)\">\n          <i class=\"bwi bwi-fw bwi-clone tw-text-xl\" aria-hidden=\"true\"></i>\n          {{ \"copySecretName\" | i18n }}\n        </button>\n        <button type=\"button\" bitMenuItem (click)=\"copySecretValueEvent.emit(secret.id)\">\n          <i class=\"bwi bwi-fw bwi-clone tw-text-xl\" aria-hidden=\"true\"></i>\n          {{ \"copySecretValue\" | i18n }}\n        </button>\n        <button type=\"button\" bitMenuItem (click)=\"projectsEvent.emit(secret.id)\">\n          <i class=\"bwi bwi-fw bwi-sitemap tw-text-xl\" aria-hidden=\"true\"></i>\n          {{ \"projects\" | i18n }}\n        </button>\n        <button type=\"button\" bitMenuItem (click)=\"deleteSecretsEvent.emit([secret.id])\">\n          <i class=\"bwi bwi-fw bwi-trash tw-text-xl tw-text-danger\" aria-hidden=\"true\"></i>\n          <span class=\"tw-text-danger\">{{ \"deleteSecret\" | i18n }}</span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem>\n    <i class=\"bwi bwi-fw bwi-sitemap tw-text-xl\" aria-hidden=\"true\"></i>\n    {{ \"projects\" | i18n }}\n  </button>\n  <button type=\"button\" bitMenuItem (click)=\"bulkDeleteSecrets()\">\n    <i class=\"bwi bwi-fw bwi-trash tw-text-xl tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">{{ \"deleteSecrets\" | i18n }}</span>\n  </button>\n</bit-menu>\n","<div\n  class=\"tw-mx-auto tw-flex tw-flex-col tw-items-center tw-justify-center tw-pt-6 tw-text-center\"\n>\n  <div class=\"tw-max-w-sm\">\n    <bit-icon [icon]=\"icon\" aria-hidden=\"true\"></bit-icon>\n    <h3 class=\"tw-font-semibold\">\n      <ng-content select=\"[slot=title]\"></ng-content>\n    </h3>\n    <p>\n      <ng-content select=\"[slot=description]\"></ng-content>\n    </p>\n  </div>\n  <div class=\"tw-space-x-2\">\n    <ng-content select=\"[slot=button]\"></ng-content>\n  </div>\n</div>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, OnDestroy, Output } from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\n\n@Component({\n  selector: \"sm-secrets-list\",\n  templateUrl: \"./secrets-list.component.html\",\n})\nexport class SecretsListComponent implements OnDestroy {\n  @Input()\n  get secrets(): SecretListView[] {\n    return this._secrets;\n  }\n  set secrets(secrets: SecretListView[]) {\n    this.selection.clear();\n    this._secrets = secrets;\n  }\n  private _secrets: SecretListView[];\n\n  @Output() editSecretEvent = new EventEmitter<string>();\n  @Output() copySecretNameEvent = new EventEmitter<string>();\n  @Output() copySecretValueEvent = new EventEmitter<string>();\n  @Output() projectsEvent = new EventEmitter<string>();\n  @Output() onSecretCheckedEvent = new EventEmitter<string[]>();\n  @Output() deleteSecretsEvent = new EventEmitter<string[]>();\n  @Output() newSecretEvent = new EventEmitter();\n\n  private destroy$: Subject<void> = new Subject<void>();\n\n  selection = new SelectionModel<string>(true, []);\n\n  constructor() {\n    this.selection.changed\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((_) => this.onSecretCheckedEvent.emit(this.selection.selected));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.secrets.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.secrets.map((s) => s.id));\n  }\n\n  bulkDeleteSecrets() {\n    if (this.selection.selected.length >= 1) {\n      this.deleteSecretsEvent.emit(this.selection.selected);\n    }\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable @angular-eslint/template/button-has-type -->\n<ng-container *ngIf=\"secrets$ | async as secrets; else spinner\">\n  <div *ngIf=\"secrets.length > 0\" class=\"float-right tw-mt-3 tw-items-center\">\n    <button bitButton buttonType=\"secondary\" (click)=\"openNewSecretDialog()\">\n      <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n      {{ \"newSecret\" | i18n }}\n    </button>\n  </div>\n  <sm-secrets-list\n    (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n    (newSecretEvent)=\"openNewSecretDialog()\"\n    (editSecretEvent)=\"openEditSecret($event)\"\n    [secrets]=\"secrets\"\n  ></sm-secrets-list>\n</ng-container>\n\n<ng-template #spinner>\n  <div class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n  </div>\n</ng-template>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { SecretListView } from \"../../models/view/secret-list.view\";\nimport {\n  SecretDeleteDialogComponent,\n  SecretDeleteOperation,\n} from \"../../secrets/dialog/secret-delete.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"../../secrets/dialog/secret-dialog.component\";\nimport { SecretService } from \"../../secrets/secret.service\";\n\n@Component({\n  selector: \"sm-project-secrets\",\n  templateUrl: \"./project-secrets.component.html\",\n})\nexport class ProjectSecretsComponent {\n  secrets$: Observable<SecretListView[]>;\n\n  private organizationId: string;\n  private projectId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private secretService: SecretService,\n    private dialogService: DialogService\n  ) {}\n\n  ngOnInit() {\n    this.secrets$ = this.secretService.secret$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        this.projectId = params.projectId;\n        return await this.getSecretsByProject();\n      })\n    );\n  }\n\n  private async getSecretsByProject(): Promise<SecretListView[]> {\n    return await this.secretService.getSecretsByProject(this.organizationId, this.projectId);\n  }\n\n  openEditSecret(secretId: string) {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        secretId: secretId,\n      },\n    });\n  }\n\n  openDeleteSecret(secretIds: string[]) {\n    this.dialogService.open<unknown, SecretDeleteOperation>(SecretDeleteDialogComponent, {\n      data: {\n        secretIds: secretIds,\n      },\n    });\n  }\n\n  openNewSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n        projectId: this.projectId,\n      },\n    });\n  }\n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-project-service-accounts\",\n  templateUrl: \"./project-service-accounts.component.html\",\n})\nexport class ProjectServiceAccountsComponent {}\n","<sm-project-access\n  accessType=\"projectServiceAccounts\"\n  [description]=\"'projectServiceAccountsDescription' | i18n\"\n  [label]=\"'serviceAccounts' | i18n\"\n  [hint]=\"'projectServiceAccountsSelectHint' | i18n\"\n  [columnTitle]=\"'serviceAccounts' | i18n\"\n  [emptyMessage]=\"'projectEmptyServiceAccountAccessPolicies' | i18n\"\n>\n</sm-project-access>\n","<sm-header *ngIf=\"project$ | async as project\" [title]=\"project.name\" icon=\"bwi-collection\">\n  <bit-breadcrumbs slot=\"breadcrumbs\">\n    <bit-breadcrumb [route]=\"['..']\" icon=\"bwi-angle-left\">{{ \"projects\" | i18n }}</bit-breadcrumb>\n  </bit-breadcrumbs>\n  <bit-tab-nav-bar label=\"Main\" slot=\"tabs\">\n    <bit-tab-link [route]=\"['secrets']\">{{ \"secrets\" | i18n }}</bit-tab-link>\n    <bit-tab-link [route]=\"['people']\">{{ \"people\" | i18n }}</bit-tab-link>\n    <bit-tab-link [route]=\"['service-accounts']\">{{ \"serviceAccounts\" | i18n }}</bit-tab-link>\n  </bit-tab-nav-bar>\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n<router-outlet></router-outlet>\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Observable, switchMap } from \"rxjs\";\n\nimport { ProjectView } from \"../../models/view/project.view\";\nimport { ProjectService } from \"../project.service\";\n\n@Component({\n  selector: \"sm-project\",\n  templateUrl: \"./project.component.html\",\n})\nexport class ProjectComponent implements OnInit {\n  project$: Observable<ProjectView>;\n\n  constructor(private route: ActivatedRoute, private projectService: ProjectService) {}\n\n  ngOnInit(): void {\n    this.project$ = this.route.params.pipe(\n      switchMap((params) => {\n        return this.projectService.getByProjectId(params.projectId);\n      })\n    );\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"small\">\n    <ng-container bitDialogTitle>\n      <span>{{ title | i18n }}</span>\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        <ng-container *ngIf=\"data.projects.length == 1\">\n          {{ data.projects[0].name }}\n        </ng-container>\n        <ng-container *ngIf=\"data.projects.length > 1\">\n          {{ data.projects.length }}\n          {{ \"projects\" | i18n }}\n        </ng-container>\n      </span>\n    </ng-container>\n\n    <div bitDialogContent>\n      <bit-callout type=\"warning\" [title]=\"'warning' | i18n\">\n        {{ dialogContent }}\n      </bit-callout>\n      <bit-form-field>\n        <bit-label>{{ dialogConfirmationLabel }}</bit-label>\n        <input bitInput formControlName=\"confirmDelete\" />\n      </bit-form-field>\n    </div>\n\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button type=\"submit\" bitButton buttonType=\"danger\" bitFormButton>\n        {{ title | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </div>\n  </bit-dialog>\n</form>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport {\n  FormControl,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  AbstractControl,\n} from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport {\n  BulkOperationStatus,\n  BulkStatusDetails,\n  BulkStatusDialogComponent,\n} from \"../../layout/dialogs/bulk-status-dialog.component\";\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport { ProjectService } from \"../project.service\";\n\nexport interface ProjectDeleteOperation {\n  projects: ProjectListView[];\n}\n\n@Component({\n  selector: \"sm-project-delete-dialog\",\n  templateUrl: \"./project-delete-dialog.component.html\",\n})\nexport class ProjectDeleteDialogComponent implements OnInit {\n  formGroup = new FormGroup({\n    confirmDelete: new FormControl(\"\", [this.matchConfirmationMessageValidator()]),\n  });\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: ProjectDeleteOperation,\n    private projectService: ProjectService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private dialogService: DialogService\n  ) {}\n\n  ngOnInit(): void {\n    if (!(this.data.projects?.length >= 1)) {\n      this.dialogRef.close();\n      throw new Error(\n        \"The project delete dialog was not called with the appropriate operation values.\"\n      );\n    }\n  }\n\n  get title() {\n    return this.data.projects.length === 1 ? \"deleteProject\" : \"deleteProjects\";\n  }\n\n  get dialogContent() {\n    return this.data.projects.length === 1\n      ? this.i18nService.t(\"deleteProjectDialogMessage\", this.data.projects[0].name)\n      : this.i18nService.t(\"deleteProjectsDialogMessage\");\n  }\n\n  get dialogConfirmationLabel() {\n    return this.i18nService.t(\"deleteProjectInputLabel\", this.dialogConfirmationMessage);\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    await this.delete();\n    this.dialogRef.close();\n  };\n\n  async delete() {\n    const bulkResponses = await this.projectService.delete(this.data.projects);\n\n    if (bulkResponses.find((response) => response.errorMessage)) {\n      this.openBulkStatusDialog(bulkResponses.filter((response) => response.errorMessage));\n      return;\n    }\n\n    const message = this.data.projects.length === 1 ? \"deleteProjectToast\" : \"deleteProjectsToast\";\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  }\n\n  openBulkStatusDialog(bulkStatusResults: BulkOperationStatus[]) {\n    this.dialogService.open<unknown, BulkStatusDetails>(BulkStatusDialogComponent, {\n      data: {\n        title: \"deleteProjects\",\n        subTitle: \"projects\",\n        columnTitle: \"projectName\",\n        message: \"bulkDeleteProjectsErrorMessage\",\n        details: bulkStatusResults,\n      },\n    });\n  }\n\n  private get dialogConfirmationMessage() {\n    return this.data.projects?.length === 1\n      ? this.i18nService.t(\"deleteProjectConfirmMessage\", this.data.projects[0].name)\n      : this.i18nService.t(\"deleteProjectsConfirmMessage\", this.data.projects?.length.toString());\n  }\n\n  private matchConfirmationMessageValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (this.dialogConfirmationMessage.toLowerCase() == control.value.toLowerCase()) {\n        return null;\n      } else {\n        return {\n          confirmationDoesntMatchError: {\n            message: this.i18nService.t(\"smConfirmationRequired\"),\n          },\n        };\n      }\n    };\n  }\n}\n","import { _isNumberValue } from \"@angular/cdk/coercion\";\nimport { DataSource } from \"@angular/cdk/collections\";\nimport { BehaviorSubject, combineLatest, map, Observable, Subscription } from \"rxjs\";\n\nexport type SortDirection = \"asc\" | \"desc\";\nexport type SortFn = (a: any, b: any) => number;\nexport type Sort = {\n  column?: string;\n  direction: SortDirection;\n  fn?: SortFn;\n};\n\n// Loosely based on CDK TableDataSource\n//  https://github.com/angular/components/blob/main/src/material/table/table-data-source.ts\nexport class TableDataSource<T> extends DataSource<T> {\n  private readonly _data: BehaviorSubject<T[]>;\n  private readonly _sort: BehaviorSubject<Sort>;\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  private _renderChangesSubscription: Subscription | null = null;\n\n  constructor() {\n    super();\n    this._data = new BehaviorSubject([]);\n    this._sort = new BehaviorSubject({ direction: \"asc\" });\n  }\n\n  get data() {\n    return this._data.value;\n  }\n\n  set data(data: T[]) {\n    this._data.next(data ? [...data] : []);\n  }\n\n  set sort(sort: Sort) {\n    this._sort.next(sort);\n  }\n\n  get sort() {\n    return this._sort.value;\n  }\n\n  connect(): Observable<readonly T[]> {\n    if (!this._renderChangesSubscription) {\n      this.updateChangeSubscription();\n    }\n\n    return this._renderData;\n  }\n\n  disconnect(): void {\n    this._renderChangesSubscription?.unsubscribe();\n    this._renderChangesSubscription = null;\n  }\n\n  private updateChangeSubscription() {\n    const orderedData = combineLatest([this._data, this._sort]).pipe(\n      map(([data]) => this.orderData(data))\n    );\n\n    this._renderChangesSubscription?.unsubscribe();\n    this._renderChangesSubscription = orderedData.subscribe((data) => this._renderData.next(data));\n  }\n\n  private orderData(data: T[]): T[] {\n    if (!this.sort) {\n      return data;\n    }\n\n    return this.sortData(data, this.sort);\n  }\n\n  /**\n   * Copied from https://github.com/angular/components/blob/main/src/material/table/table-data-source.ts\n   * License: MIT\n   * Copyright (c) 2022 Google LLC.\n   *\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  protected sortingDataAccessor(data: T, sortHeaderId: string): string | number {\n    const value = (data as unknown as Record<string, any>)[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      return numberValue < Number.MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Copied from https://github.com/angular/components/blob/main/src/material/table/table-data-source.ts\n   * License: MIT\n   * Copyright (c) 2022 Google LLC.\n   *\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  protected sortData(data: T[], sort: Sort): T[] {\n    const column = sort.column;\n    const direction = sort.direction;\n    if (!column) {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      // If a custom sort function is provided, use it instead of the default.\n      if (sort.fn) {\n        return sort.fn(a, b) * (direction === \"asc\" ? 1 : -1);\n      }\n\n      let valueA = this.sortingDataAccessor(a, column);\n      let valueB = this.sortingDataAccessor(b, column);\n\n      // If there are data in the column that can be converted to a number,\n      // it must be ensured that the rest of the data\n      // is of the same type so as not to order incorrectly.\n      const valueAType = typeof valueA;\n      const valueBType = typeof valueB;\n\n      if (valueAType !== valueBType) {\n        if (valueAType === \"number\") {\n          valueA += \"\";\n        }\n        if (valueBType === \"number\") {\n          valueB += \"\";\n        }\n      }\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come last.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction === \"asc\" ? 1 : -1);\n    });\n  }\n}\n","import { coerceBooleanProperty } from \"@angular/cdk/coercion\";\nimport { Component, HostBinding, Input, OnInit } from \"@angular/core\";\n\nimport type { SortFn } from \"./table-data-source\";\nimport { TableComponent } from \"./table.component\";\n\n@Component({\n  selector: \"th[bitSortable]\",\n  template: `\n    <button\n      class=\"tw-group\"\n      [ngClass]=\"classList\"\n      [attr.aria-pressed]=\"isActive\"\n      (click)=\"setActive()\"\n    >\n      <ng-content></ng-content>\n      <i class=\"bwi tw-ml-2\" [ngClass]=\"icon\"></i>\n    </button>\n  `,\n})\nexport class SortableComponent implements OnInit {\n  /**\n   * Mark the column as sortable and specify the key to sort by\n   */\n  @Input() bitSortable: string;\n\n  private _default: boolean;\n  /**\n   * Mark the column as the default sort column\n   */\n  @Input() set default(value: boolean | \"\") {\n    this._default = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Custom sorting function\n   *\n   * @example\n   * fn = (a, b) => a.name.localeCompare(b.name)\n   */\n  @Input() fn: SortFn;\n\n  constructor(private table: TableComponent) {}\n\n  ngOnInit(): void {\n    if (this._default && !this.isActive) {\n      this.setActive();\n    }\n  }\n\n  @HostBinding(\"attr.aria-sort\") get ariaSort() {\n    if (!this.isActive) {\n      return undefined;\n    }\n    return this.sort.direction === \"asc\" ? \"ascending\" : \"descending\";\n  }\n\n  protected setActive() {\n    if (this.table.dataSource) {\n      const direction = this.isActive && this.direction === \"asc\" ? \"desc\" : \"asc\";\n      this.table.dataSource.sort = { column: this.bitSortable, direction: direction, fn: this.fn };\n    }\n  }\n\n  private get sort() {\n    return this.table.dataSource?.sort;\n  }\n\n  get isActive() {\n    return this.sort?.column === this.bitSortable;\n  }\n\n  get direction() {\n    return this.sort?.direction;\n  }\n\n  get icon() {\n    if (!this.isActive) {\n      return \"bwi-up-down-btn\";\n    }\n    return this.direction === \"asc\" ? \"bwi-up-solid\" : \"bwi-down-solid\";\n  }\n\n  get classList() {\n    return [\n      // Offset to border and padding\n      \"-tw-m-1.5\",\n\n      // Below is copied from BitIconButtonComponent\n      \"tw-font-semibold\",\n      \"tw-border\",\n      \"tw-border-solid\",\n      \"tw-rounded\",\n      \"tw-transition\",\n      \"hover:tw-no-underline\",\n      \"focus:tw-outline-none\",\n\n      \"tw-bg-transparent\",\n      \"!tw-text-muted\",\n      \"tw-border-transparent\",\n      \"hover:tw-bg-transparent-hover\",\n      \"hover:tw-border-primary-700\",\n      \"focus-visible:before:tw-ring-primary-700\",\n      \"disabled:tw-opacity-60\",\n      \"disabled:hover:tw-border-transparent\",\n      \"disabled:hover:tw-bg-transparent\",\n\n      // Workaround for box-shadow with transparent offset issue:\n      // https://github.com/tailwindlabs/tailwindcss/issues/3595\n      // Remove `before:` and use regular `tw-ring` when browser no longer has bug, or better:\n      // switch to `outline` with `outline-offset` when Safari supports border radius on outline.\n      // Using `box-shadow` to create outlines is a hack and as such `outline` should be preferred.\n      \"tw-relative\",\n      \"before:tw-content-['']\",\n      \"before:tw-block\",\n      \"before:tw-absolute\",\n      \"before:-tw-inset-[3px]\",\n      \"before:tw-rounded-md\",\n      \"before:tw-transition\",\n      \"before:tw-ring\",\n      \"before:tw-ring-transparent\",\n      \"focus-visible:tw-z-10\",\n    ];\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable @angular-eslint/template/button-has-type -->\n<div *ngIf=\"!projects\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<sm-no-items *ngIf=\"projects?.length == 0\">\n  <ng-container slot=\"title\">{{ \"projectsNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container slot=\"description\">{{ \"projectsNoItemsMessage\" | i18n }}</ng-container>\n  <button slot=\"button\" bitButton buttonType=\"secondary\" (click)=\"newProjectEvent.emit()\">\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newProject\" | i18n }}\n  </button>\n</sm-no-items>\n\n<bit-table *ngIf=\"projects?.length >= 1\" [dataSource]=\"dataSource\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"!tw-mb-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell colspan=\"2\" bitSortable=\"name\" default>{{ \"name\" | i18n }}</th>\n      <th bitCell bitSortable=\"revisionDate\">{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body let-rows$>\n    <tr bitRow *ngFor=\"let project of rows$ | async\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(project.id) : null\"\n          [checked]=\"selection.isSelected(project.id)\"\n        />\n      </td>\n      <td bitCell class=\"tw-w-0 tw-pr-0\">\n        <i class=\"bwi bwi-collection tw-text-xl tw-text-muted\" aria-hidden=\"true\"></i>\n      </td>\n      <td bitCell class=\"tw-break-all\">\n        <a [routerLink]=\"[project.id]\">{{ project.name }}</a>\n      </td>\n      <td bitCell>{{ project.revisionDate | date: \"medium\" }}</td>\n      <td bitCell>\n        <button\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [bitMenuTriggerFor]=\"projectMenu\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n        ></button>\n      </td>\n      <bit-menu #projectMenu>\n        <button type=\"button\" bitMenuItem (click)=\"editProjectEvent.emit(project.id)\">\n          <i class=\"bwi bwi-fw bwi-pencil tw-text-xl\" aria-hidden=\"true\"></i>\n          {{ \"editProject\" | i18n }}\n        </button>\n        <a bitMenuItem [routerLink]=\"project.id\">\n          <i class=\"bwi bwi-fw bwi-eye tw-text-xl\" aria-hidden=\"true\"></i>\n          {{ \"viewProject\" | i18n }}\n        </a>\n        <button type=\"button\" bitMenuItem (click)=\"deleteProject(project.id)\">\n          <i class=\"bwi bwi-fw bwi-trash tw-text-xl tw-text-danger\" aria-hidden=\"true\"></i>\n          <span class=\"tw-text-danger\">{{ \"deleteProject\" | i18n }}</span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"bulkDeleteProjects()\">\n    <i class=\"bwi bwi-fw bwi-trash tw-text-xl tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">{{ \"deleteProjects\" | i18n }}</span>\n  </button>\n</bit-menu>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, OnDestroy, Output } from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { TableDataSource } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\n\n@Component({\n  selector: \"sm-projects-list\",\n  templateUrl: \"./projects-list.component.html\",\n})\nexport class ProjectsListComponent implements OnDestroy {\n  protected dataSource = new TableDataSource<ProjectListView>();\n\n  @Input()\n  get projects(): ProjectListView[] {\n    return this._projects;\n  }\n  set projects(projects: ProjectListView[]) {\n    this.selection.clear();\n    this._projects = projects;\n    this.dataSource.data = projects;\n  }\n  private _projects: ProjectListView[];\n\n  @Output() editProjectEvent = new EventEmitter<string>();\n  @Output() deleteProjectEvent = new EventEmitter<ProjectListView[]>();\n  @Output() onProjectCheckedEvent = new EventEmitter<string[]>();\n  @Output() newProjectEvent = new EventEmitter();\n\n  private destroy$: Subject<void> = new Subject<void>();\n\n  selection = new SelectionModel<string>(true, []);\n\n  constructor() {\n    this.selection.changed\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((_) => this.onProjectCheckedEvent.emit(this.selection.selected));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.projects.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.projects.map((s) => s.id));\n  }\n\n  deleteProject(projectId: string) {\n    this.deleteProjectEvent.emit(this.projects.filter((p) => p.id == projectId));\n  }\n\n  bulkDeleteProjects() {\n    this.deleteProjectEvent.emit(\n      this.projects.filter((project) => this.selection.isSelected(project.id))\n    );\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport {\n  ProjectDeleteDialogComponent,\n  ProjectDeleteOperation,\n} from \"../dialog/project-delete-dialog.component\";\nimport {\n  OperationType,\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../dialog/project-dialog.component\";\nimport { ProjectService } from \"../project.service\";\n\n@Component({\n  selector: \"sm-projects\",\n  templateUrl: \"./projects.component.html\",\n})\nexport class ProjectsComponent implements OnInit {\n  projects$: Observable<ProjectListView[]>;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private projectService: ProjectService,\n    private dialogService: DialogService\n  ) {}\n\n  ngOnInit() {\n    this.projects$ = this.projectService.project$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getProjects();\n      })\n    );\n  }\n\n  private async getProjects(): Promise<ProjectListView[]> {\n    return await this.projectService.getProjects(this.organizationId);\n  }\n\n  openEditProject(projectId: string) {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        projectId: projectId,\n      },\n    });\n  }\n\n  openNewProjectDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openDeleteProjectDialog(event: ProjectListView[]) {\n    this.dialogService.open<unknown, ProjectDeleteOperation>(ProjectDeleteDialogComponent, {\n      data: {\n        projects: event,\n      },\n    });\n  }\n}\n","<sm-header>\n  <input bitInput [placeholder]=\"'searchProjects' | i18n\" />\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n<sm-projects-list\n  (newProjectEvent)=\"openNewProjectDialog()\"\n  (editProjectEvent)=\"openEditProject($event)\"\n  (deleteProjectEvent)=\"openDeleteProjectDialog($event)\"\n  [projects]=\"projects$ | async\"\n>\n</sm-projects-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { ProjectPeopleComponent } from \"./project/project-people.component\";\nimport { ProjectSecretsComponent } from \"./project/project-secrets.component\";\nimport { ProjectServiceAccountsComponent } from \"./project/project-service-accounts.component\";\nimport { ProjectComponent } from \"./project/project.component\";\nimport { ProjectsComponent } from \"./projects/projects.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ProjectsComponent,\n  },\n  {\n    path: \":projectId\",\n    component: ProjectComponent,\n    children: [\n      {\n        path: \"\",\n        pathMatch: \"full\",\n        redirectTo: \"secrets\",\n      },\n      {\n        path: \"secrets\",\n        component: ProjectSecretsComponent,\n      },\n      {\n        path: \"people\",\n        component: ProjectPeopleComponent,\n      },\n      {\n        path: \"service-accounts\",\n        component: ProjectServiceAccountsComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ProjectsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { BreadcrumbsModule } from \"@bitwarden/components\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { ProjectDeleteDialogComponent } from \"./dialog/project-delete-dialog.component\";\nimport { ProjectDialogComponent } from \"./dialog/project-dialog.component\";\nimport { ProjectAccessComponent } from \"./project/project-access.component\";\nimport { ProjectPeopleComponent } from \"./project/project-people.component\";\nimport { ProjectSecretsComponent } from \"./project/project-secrets.component\";\nimport { ProjectServiceAccountsComponent } from \"./project/project-service-accounts.component\";\nimport { ProjectComponent } from \"./project/project.component\";\nimport { ProjectsListComponent } from \"./projects-list/projects-list.component\";\nimport { ProjectsRoutingModule } from \"./projects-routing.module\";\nimport { ProjectsComponent } from \"./projects/projects.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, ProjectsRoutingModule, BreadcrumbsModule],\n  declarations: [\n    ProjectsComponent,\n    ProjectsListComponent,\n    ProjectAccessComponent,\n    ProjectDialogComponent,\n    ProjectDeleteDialogComponent,\n    ProjectPeopleComponent,\n    ProjectServiceAccountsComponent,\n    ProjectComponent,\n    ProjectSecretsComponent,\n  ],\n  providers: [],\n})\nexport class ProjectsModule {}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\n\nimport {\n  SecretDeleteDialogComponent,\n  SecretDeleteOperation,\n} from \"./dialog/secret-delete.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"./dialog/secret-dialog.component\";\nimport { SecretService } from \"./secret.service\";\n\n@Component({\n  selector: \"sm-secrets\",\n  templateUrl: \"./secrets.component.html\",\n})\nexport class SecretsComponent implements OnInit {\n  secrets$: Observable<SecretListView[]>;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private secretService: SecretService,\n    private dialogService: DialogService\n  ) {}\n\n  ngOnInit() {\n    this.secrets$ = this.secretService.secret$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getSecrets();\n      })\n    );\n  }\n\n  private async getSecrets(): Promise<SecretListView[]> {\n    return await this.secretService.getSecrets(this.organizationId);\n  }\n\n  openEditSecret(secretId: string) {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        secretId: secretId,\n      },\n    });\n  }\n\n  openDeleteSecret(secretIds: string[]) {\n    this.dialogService.open<unknown, SecretDeleteOperation>(SecretDeleteDialogComponent, {\n      data: {\n        secretIds: secretIds,\n      },\n    });\n  }\n\n  openNewSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n}\n","<sm-header>\n  <input bitInput [placeholder]=\"'searchSecrets' | i18n\" />\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n<sm-secrets-list\n  (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n  (newSecretEvent)=\"openNewSecretDialog()\"\n  (editSecretEvent)=\"openEditSecret($event)\"\n  [secrets]=\"secrets$ | async\"\n></sm-secrets-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { SecretsComponent } from \"./secrets.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: SecretsComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SecretsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { SecretDeleteDialogComponent } from \"./dialog/secret-delete.component\";\nimport { SecretDialogComponent } from \"./dialog/secret-dialog.component\";\nimport { SecretsRoutingModule } from \"./secrets-routing.module\";\nimport { SecretsComponent } from \"./secrets.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, SecretsRoutingModule],\n  declarations: [SecretsComponent, SecretDialogComponent, SecretDeleteDialogComponent],\n  providers: [],\n})\nexport class SecretsModule {}\n","import { EncString } from \"@bitwarden/common/models/domain/enc-string\";\n\nexport class AccessTokenRequest {\n  name: EncString;\n  encryptedPayload: EncString;\n  key: EncString;\n  expireAt: Date;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class AccessTokenCreationResponse extends BaseResponse {\n  id: string;\n  name: string;\n  clientSecret: string;\n  expireAt?: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.clientSecret = this.getResponseProperty(\"ClientSecret\");\n    this.expireAt = this.getResponseProperty(\"ExpireAt\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class AccessTokenResponse extends BaseResponse {\n  id: string;\n  name: string;\n  scopes: string[];\n  expireAt?: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.scopes = this.getResponseProperty(\"Scopes\");\n    this.expireAt = this.getResponseProperty(\"ExpireAt\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","export class AccessTokenView {\n  id: string;\n  name: string;\n  scopes: string[];\n  expireAt?: Date;\n  creationDate: Date;\n  revisionDate: Date;\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"@bitwarden/common/abstractions/cryptoFunction.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\n\nimport { AccessTokenRequest } from \"../models/requests/access-token.request\";\nimport { AccessTokenCreationResponse } from \"../models/responses/access-token-creation.response\";\nimport { AccessTokenResponse } from \"../models/responses/access-tokens.response\";\nimport { AccessTokenView } from \"../models/view/access-token.view\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AccessService {\n  private readonly _accessTokenVersion = \"0\";\n  protected _accessToken: Subject<AccessTokenView> = new Subject();\n\n  accessToken$ = this._accessToken.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getAccessTokens(\n    organizationId: string,\n    serviceAccountId: string\n  ): Promise<AccessTokenView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-tokens\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, AccessTokenResponse);\n\n    return await this.createAccessTokenViews(organizationId, results.data);\n  }\n\n  async createAccessToken(\n    organizationId: string,\n    serviceAccountId: string,\n    accessTokenView: AccessTokenView\n  ): Promise<string> {\n    const keyMaterial = await this.cryptoFunctionService.randomBytes(16);\n    const key = await this.cryptoFunctionService.hkdf(\n      keyMaterial,\n      \"bitwarden-accesstoken\",\n      \"sm-access-token\",\n      64,\n      \"sha256\"\n    );\n    const encryptionKey = new SymmetricCryptoKey(key);\n\n    const request = await this.createAccessTokenRequest(\n      organizationId,\n      encryptionKey,\n      accessTokenView\n    );\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-tokens\",\n      request,\n      true,\n      true\n    );\n    const result = new AccessTokenCreationResponse(r);\n    this._accessToken.next(null);\n    const b64Key = Utils.fromBufferToB64(keyMaterial);\n    return `${this._accessTokenVersion}.${result.id}.${result.clientSecret}:${b64Key}`;\n  }\n\n  private async createAccessTokenRequest(\n    organizationId: string,\n    encryptionKey: SymmetricCryptoKey,\n    accessTokenView: AccessTokenView\n  ): Promise<AccessTokenRequest> {\n    const organizationKey = await this.getOrganizationKey(organizationId);\n    const accessTokenRequest = new AccessTokenRequest();\n    const [name, encryptedPayload, key] = await Promise.all([\n      await this.encryptService.encrypt(accessTokenView.name, organizationKey),\n      await this.encryptService.encrypt(\n        JSON.stringify({ encryptionKey: organizationKey.keyB64 }),\n        encryptionKey\n      ),\n      await this.encryptService.encrypt(encryptionKey.keyB64, organizationKey),\n    ]);\n\n    accessTokenRequest.name = name;\n    accessTokenRequest.encryptedPayload = encryptedPayload;\n    accessTokenRequest.key = key;\n    accessTokenRequest.expireAt = accessTokenView.expireAt;\n    return accessTokenRequest;\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async createAccessTokenViews(\n    organizationId: string,\n    accessTokenResponses: AccessTokenResponse[]\n  ): Promise<AccessTokenView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      accessTokenResponses.map(async (s) => {\n        const view = new AccessTokenView();\n        view.id = s.id;\n        view.name = await this.encryptService.decryptToUtf8(new EncString(s.name), orgKey);\n        view.scopes = s.scopes;\n        view.expireAt = s.expireAt ? new Date(s.expireAt) : null;\n        view.creationDate = new Date(s.creationDate);\n        view.revisionDate = new Date(s.revisionDate);\n        return view;\n      })\n    );\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\n\nexport interface AccessTokenDetails {\n  subTitle: string;\n  expirationDate?: Date;\n  accessToken: string;\n}\n\n@Component({\n  selector: \"sm-access-token-dialog\",\n  templateUrl: \"./access-token-dialog.component.html\",\n})\nexport class AccessTokenDialogComponent implements OnInit {\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: AccessTokenDetails,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {\n    this.dialogRef.disableClose = true;\n  }\n\n  ngOnInit(): void {\n    // TODO remove null checks once strictNullChecks in TypeScript is turned on.\n    if (!this.data.subTitle || !this.data.accessToken) {\n      this.dialogRef.close();\n      throw new Error(\"The access token dialog was not called with the appropriate values.\");\n    }\n  }\n\n  copyAccessToken(): void {\n    this.platformUtilsService.copyToClipboard(this.data.accessToken);\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"accessTokenCreatedAndCopied\")\n    );\n    this.dialogRef.close();\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable @angular-eslint/template/button-has-type -->\n<bit-dialog dialogSize=\"default\">\n  <ng-container bitDialogTitle>\n    <span>{{ \"createAccessToken\" | i18n }}</span>\n    <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n      {{ data.subTitle }}\n    </span>\n  </ng-container>\n\n  <div bitDialogContent>\n    <bit-callout type=\"info\" [title]=\"'accessTokenCallOutTitle' | i18n\">\n      {{ \"downloadAccessToken\" | i18n }}<br />\n      {{ \"expiresOnAccessToken\" | i18n }}\n      {{ data.expirationDate === null ? (\"never\" | i18n) : (data.expirationDate | date: \"medium\") }}\n    </bit-callout>\n\n    <bit-form-field class=\"tw-mb-0\">\n      <bit-label>{{ \"accessToken\" | i18n }}</bit-label>\n      <textarea bitInput disabled rows=\"4\">{{ data.accessToken }}</textarea>\n    </bit-form-field>\n    {{ \"expiresOnAccessToken\" | i18n }}\n    {{ data.expirationDate === null ? (\"never\" | i18n) : (data.expirationDate | date: \"medium\") }}\n  </div>\n\n  <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n    <button bitButton buttonType=\"primary\" (click)=\"copyAccessToken()\">\n      <i class=\"bwi bwi-clone\" aria-hidden=\"true\"></i>\n      {{ \"copyToken\" | i18n }}\n    </button>\n  </div>\n</bit-dialog>\n","<ng-container [formGroup]=\"form\">\n  <bit-form-field>\n    <bit-label>{{ \"expires\" | i18n }}</bit-label>\n    <select bitInput formControlName=\"expires\">\n      <option ngValue=\"never\">{{ \"never\" | i18n }}</option>\n      <option *ngFor=\"let day of expirationDayOptions\" [ngValue]=\"day\">\n        {{ \"days\" | i18n: day }}\n      </option>\n      <option ngValue=\"custom\">{{ \"custom\" | i18n }}</option>\n    </select>\n  </bit-form-field>\n  <bit-form-field *ngIf=\"form.value.expires === 'custom'\">\n    <bit-label>{{ \"expirationDate\" | i18n }}</bit-label>\n    <input\n      bitInput\n      type=\"datetime-local\"\n      [min]=\"currentDate | date: 'YYYY-MM-ddThh:mm'\"\n      formControlName=\"expireDateTime\"\n    />\n  </bit-form-field>\n</ng-container>\n","import { DatePipe } from \"@angular/common\";\nimport { Component, Input, OnDestroy, OnInit } from \"@angular/core\";\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators,\n} from \"@angular/forms\";\nimport { Subject, takeUntil } from \"rxjs\";\n\n@Component({\n  selector: \"sm-expiration-options\",\n  templateUrl: \"./expiration-options.component.html\",\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: ExpirationOptionsComponent,\n    },\n    {\n      provide: NG_VALIDATORS,\n      multi: true,\n      useExisting: ExpirationOptionsComponent,\n    },\n  ],\n})\nexport class ExpirationOptionsComponent\n  implements ControlValueAccessor, Validator, OnInit, OnDestroy\n{\n  private destroy$ = new Subject<void>();\n\n  @Input() expirationDayOptions: number[];\n\n  @Input() set touched(val: boolean) {\n    if (val) {\n      this.form.markAllAsTouched();\n    }\n  }\n\n  currentDate = new Date();\n\n  protected form = new FormGroup({\n    expires: new FormControl(\"never\", [Validators.required]),\n    expireDateTime: new FormControl(\"\", [Validators.required]),\n  });\n\n  constructor(private datePipe: DatePipe) {}\n\n  async ngOnInit() {\n    this.form.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      this._onChange(this.getExpiresDate());\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private _onChange = (_value: Date | null): void => undefined;\n  registerOnChange(fn: (value: Date | null) => void): void {\n    this._onChange = fn;\n  }\n\n  onTouched = (): void => undefined;\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  validate(control: AbstractControl<any, any>): ValidationErrors {\n    if (\n      (this.form.value.expires == \"custom\" && this.form.value.expireDateTime) ||\n      this.form.value.expires !== \"custom\"\n    ) {\n      return null;\n    }\n    return {\n      required: true,\n    };\n  }\n\n  writeValue(value: Date | null): void {\n    if (value == null) {\n      this.form.setValue({ expires: \"never\", expireDateTime: null });\n    }\n    if (value) {\n      this.form.setValue({\n        expires: \"custom\",\n        expireDateTime: this.datePipe.transform(value, \"YYYY-MM-ddThh:mm\"),\n      });\n    }\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    isDisabled ? this.form.disable() : this.form.enable();\n  }\n\n  private getExpiresDate(): Date | null {\n    if (this.form.value.expires == \"never\") {\n      return null;\n    }\n    if (this.form.value.expires == \"custom\") {\n      return new Date(this.form.value.expireDateTime);\n    }\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() + Number(this.form.value.expires));\n    return currentDate;\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../../../models/view/service-account.view\";\nimport { AccessTokenView } from \"../../models/view/access-token.view\";\nimport { AccessService } from \"../access.service\";\n\nimport { AccessTokenDetails, AccessTokenDialogComponent } from \"./access-token-dialog.component\";\n\nexport interface AccessTokenOperation {\n  organizationId: string;\n  serviceAccountView: ServiceAccountView;\n}\n\n@Component({\n  selector: \"sm-access-token-create-dialog\",\n  templateUrl: \"./access-token-create-dialog.component.html\",\n})\nexport class AccessTokenCreateDialogComponent implements OnInit {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", [Validators.required, Validators.maxLength(80)]),\n    expirationDateControl: new FormControl(null),\n  });\n  protected loading = false;\n\n  expirationDayOptions = [7, 30, 60];\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: AccessTokenOperation,\n    private dialogService: DialogService,\n    private accessService: AccessService\n  ) {}\n\n  async ngOnInit() {\n    if (\n      !this.data.organizationId ||\n      !this.data.serviceAccountView?.id ||\n      !this.data.serviceAccountView?.name\n    ) {\n      this.dialogRef.close();\n      throw new Error(\n        `The access token create dialog was not called with the appropriate operation values.`\n      );\n    }\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n    if (this.formGroup.invalid) {\n      return;\n    }\n    const accessTokenView = new AccessTokenView();\n    accessTokenView.name = this.formGroup.value.name;\n    accessTokenView.expireAt = this.formGroup.value.expirationDateControl;\n    const accessToken = await this.accessService.createAccessToken(\n      this.data.organizationId,\n      this.data.serviceAccountView.id,\n      accessTokenView\n    );\n    this.openAccessTokenDialog(\n      this.data.serviceAccountView.name,\n      accessToken,\n      accessTokenView.expireAt\n    );\n    this.dialogRef.close();\n  };\n\n  private openAccessTokenDialog(\n    serviceAccountName: string,\n    accessToken: string,\n    expirationDate?: Date\n  ) {\n    this.dialogService.open<unknown, AccessTokenDetails>(AccessTokenDialogComponent, {\n      data: {\n        subTitle: serviceAccountName,\n        expirationDate: expirationDate,\n        accessToken: accessToken,\n      },\n    });\n  }\n\n  static openNewAccessTokenDialog(\n    dialogService: DialogService,\n    serviceAccountId: string,\n    organizationId: string\n  ) {\n    // TODO once service account names are implemented in service account contents page pass in here.\n    const serviceAccountView = new ServiceAccountView();\n    serviceAccountView.id = serviceAccountId;\n    serviceAccountView.name = \"placeholder\";\n\n    return dialogService.open<unknown, AccessTokenOperation>(AccessTokenCreateDialogComponent, {\n      data: {\n        organizationId: organizationId,\n        serviceAccountView: serviceAccountView,\n      },\n    });\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable @angular-eslint/template/button-has-type -->\n<div *ngIf=\"!tokens\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<sm-no-items *ngIf=\"tokens?.length == 0\">\n  <ng-container slot=\"title\">{{ \"accessTokensNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container slot=\"description\">{{ \"accessTokensNoItemsDesc\" | i18n }}</ng-container>\n  <button slot=\"button\" bitButton buttonType=\"secondary\" (click)=\"newAccessTokenEvent.emit()\">\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"createAccessToken\" | i18n }}\n  </button>\n</sm-no-items>\n\n<bit-table *ngIf=\"tokens?.length >= 1\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"tw-m-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell>{{ \"name\" | i18n }}</th>\n      <th bitCell>{{ \"permissions\" | i18n }}</th>\n      <th bitCell>{{ \"expires\" | i18n }}</th>\n      <th bitCell>{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body>\n    <tr bitRow *ngFor=\"let token of tokens\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(token.id) : null\"\n          [checked]=\"selection.isSelected(token.id)\"\n        />\n      </td>\n      <td bitCell>{{ token.name }}</td>\n      <td bitCell>{{ permission(token) | i18n }}</td>\n      <td bitCell>\n        {{ token.expireAt === null ? (\"never\" | i18n) : (token.expireAt | date: \"medium\") }}\n      </td>\n      <td bitCell>{{ token.revisionDate | date: \"medium\" }}</td>\n      <td bitCell>\n        <button\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"tokenMenu\"\n        ></button>\n      </td>\n\n      <bit-menu #tokenMenu>\n        <button type=\"button\" bitMenuItem>\n          <span class=\"tw-text-danger\">\n            <i class=\"bwi bwi-fw bwi-minus-circle\" aria-hidden=\"true\"></i>\n            {{ \"revokeAccessToken\" | i18n }}\n          </span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"default\">\n    <ng-container bitDialogTitle>\n      <span>{{ \"createAccessToken\" | i18n }}</span>\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        {{ data.serviceAccountView.name }}\n      </span>\n    </ng-container>\n\n    <div bitDialogContent>\n      <bit-form-field>\n        <bit-label>{{ \"name\" | i18n }}</bit-label>\n        <input bitInput formControlName=\"name\" />\n      </bit-form-field>\n      <div class=\"tw-mb-6\">\n        <bit-form-field class=\"tw-mb-0\">\n          <bit-label>{{ \"permissions\" | i18n }}</bit-label>\n          <select bitInput disabled>\n            <option selected value=\"canRead\">\n              {{ \"canRead\" | i18n }}\n            </option>\n          </select>\n        </bit-form-field>\n        <span class=\"tw-text-sm tw-text-muted\">\n          {{ \"accessTokenPermissionsBetaNotification\" | i18n }}\n        </span>\n      </div>\n      <sm-expiration-options\n        formControlName=\"expirationDateControl\"\n        [expirationDayOptions]=\"expirationDayOptions\"\n        [touched]=\"formGroup.controls.expirationDateControl.touched\"\n      ></sm-expiration-options>\n    </div>\n\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button class=\"tw-normal-case\" type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"createAccessToken\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </div>\n  </bit-dialog>\n</form>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, Output } from \"@angular/core\";\n\nimport { AccessTokenView } from \"../models/view/access-token.view\";\n\n@Component({\n  selector: \"sm-access-list\",\n  templateUrl: \"./access-list.component.html\",\n})\nexport class AccessListComponent {\n  @Input()\n  get tokens(): AccessTokenView[] {\n    return this._tokens;\n  }\n  set tokens(secrets: AccessTokenView[]) {\n    this.selection.clear();\n    this._tokens = secrets;\n  }\n  private _tokens: AccessTokenView[];\n\n  @Output() newAccessTokenEvent = new EventEmitter();\n\n  protected selection = new SelectionModel<string>(true, []);\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.tokens.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.tokens.map((s) => s.id));\n  }\n\n  protected permission(token: AccessTokenView) {\n    return \"canRead\";\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { AccessTokenView } from \"../models/view/access-token.view\";\n\nimport { AccessService } from \"./access.service\";\nimport { AccessTokenCreateDialogComponent } from \"./dialogs/access-token-create-dialog.component\";\n\n@Component({\n  selector: \"sm-access-tokens\",\n  templateUrl: \"./access-tokens.component.html\",\n})\nexport class AccessTokenComponent implements OnInit {\n  accessTokens$: Observable<AccessTokenView[]>;\n\n  private serviceAccountId: string;\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private accessService: AccessService,\n    private dialogService: DialogService\n  ) {}\n\n  ngOnInit() {\n    this.accessTokens$ = this.accessService.accessToken$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        this.serviceAccountId = params.serviceAccountId;\n        return await this.getAccessTokens();\n      })\n    );\n  }\n\n  private async getAccessTokens(): Promise<AccessTokenView[]> {\n    return await this.accessService.getAccessTokens(this.organizationId, this.serviceAccountId);\n  }\n\n  protected openNewAccessTokenDialog() {\n    AccessTokenCreateDialogComponent.openNewAccessTokenDialog(\n      this.dialogService,\n      this.serviceAccountId,\n      this.organizationId\n    );\n  }\n}\n","<sm-access-list\n  [tokens]=\"accessTokens$ | async\"\n  (newAccessTokenEvent)=\"openNewAccessTokenDialog()\"\n></sm-access-list>\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable @angular-eslint/template/button-has-type -->\n<sm-header\n  *ngIf=\"serviceAccount$ | async as serviceAccount\"\n  [title]=\"serviceAccount.name\"\n  icon=\"bwi-wrench\"\n>\n  <bit-breadcrumbs slot=\"breadcrumbs\">\n    <bit-breadcrumb [route]=\"['..']\" icon=\"bwi-angle-left\">{{\n      \"serviceAccounts\" | i18n\n    }}</bit-breadcrumb>\n  </bit-breadcrumbs>\n  <sm-new-menu></sm-new-menu>\n  <bit-tab-nav-bar label=\"Main\" slot=\"tabs\">\n    <bit-tab-link [route]=\"['secrets']\">{{ \"secrets\" | i18n }}</bit-tab-link>\n    <bit-tab-link [route]=\"['people']\">{{ \"people\" | i18n }}</bit-tab-link>\n    <bit-tab-link [route]=\"['access']\">{{ \"accessTokens\" | i18n }}</bit-tab-link>\n  </bit-tab-nav-bar>\n  <button slot=\"secondary\" bitButton buttonType=\"secondary\" (click)=\"openNewAccessTokenDialog()\">\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"createAccessToken\" | i18n }}\n  </button>\n</sm-header>\n<router-outlet></router-outlet>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { switchMap } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { AccessTokenCreateDialogComponent } from \"./access/dialogs/access-token-create-dialog.component\";\nimport { ServiceAccountService } from \"./service-account.service\";\n\n@Component({\n  selector: \"sm-service-account\",\n  templateUrl: \"./service-account.component.html\",\n})\nexport class ServiceAccountComponent {\n  private organizationId: string;\n  private serviceAccountId: string;\n\n  /**\n   * TODO: remove when a server method is available that fetches a service account by ID\n   */\n  protected serviceAccount$ = this.route.params.pipe(\n    switchMap((params) => {\n      this.serviceAccountId = params.serviceAccountId;\n      this.organizationId = params.organizationId;\n\n      return this.serviceAccountService\n        .getServiceAccounts(params.organizationId)\n        .then((saList) => saList.find((sa) => sa.id === params.serviceAccountId));\n    })\n  );\n\n  constructor(\n    private route: ActivatedRoute,\n    private serviceAccountService: ServiceAccountService,\n    private dialogService: DialogService\n  ) {}\n\n  protected openNewAccessTokenDialog() {\n    AccessTokenCreateDialogComponent.openNewAccessTokenDialog(\n      this.dialogService,\n      this.serviceAccountId,\n      this.organizationId\n    );\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable @angular-eslint/template/button-has-type -->\n<div *ngIf=\"!serviceAccounts\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<sm-no-items *ngIf=\"serviceAccounts?.length == 0\">\n  <ng-container slot=\"title\">{{ \"serviceAccountsNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container slot=\"description\">{{ \"serviceAccountsNoItemsMessage\" | i18n }}</ng-container>\n  <button slot=\"button\" bitButton buttonType=\"secondary\" (click)=\"newServiceAccountEvent.emit()\">\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newServiceAccount\" | i18n }}\n  </button>\n</sm-no-items>\n\n<bit-table *ngIf=\"serviceAccounts?.length >= 1\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"!tw-mb-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell colspan=\"2\">{{ \"name\" | i18n }}</th>\n      <th bitCell>{{ \"secrets\" | i18n }}</th>\n      <th bitCell>{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body>\n    <tr bitRow *ngFor=\"let serviceAccount of serviceAccounts\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(serviceAccount.id) : null\"\n          [checked]=\"selection.isSelected(serviceAccount.id)\"\n        />\n      </td>\n      <td bitCell class=\"tw-w-0 tw-pr-0\">\n        <i class=\"bwi bwi-wrench tw-text-xl tw-text-muted\" aria-hidden=\"true\"></i>\n      </td>\n      <td bitCell>\n        <a [routerLink]=\"serviceAccount.id\" class=\"tw-break-all\">\n          {{ serviceAccount.name }}\n        </a>\n      </td>\n      <td bitCell>\n        <!-- TODO add number of secrets once mapping is implemented-->\n        <span> 0 </span>\n      </td>\n      <td bitCell>{{ serviceAccount.revisionDate | date: \"medium\" }}</td>\n      <td bitCell>\n        <button\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"serviceAccountMenu\"\n        ></button>\n      </td>\n      <bit-menu #serviceAccountMenu>\n        <a type=\"button\" bitMenuItem [routerLink]=\"serviceAccount.id\">\n          <i class=\"bwi bwi-fw bwi-eye tw-text-xl\" aria-hidden=\"true\"></i>\n          {{ \"viewServiceAccount\" | i18n }}\n        </a>\n        <button type=\"button\" bitMenuItem>\n          <i class=\"bwi bwi-fw bwi-trash tw-text-xl tw-text-danger\" aria-hidden=\"true\"></i>\n          <span class=\"tw-text-danger\">\n            {{ \"deleteServiceAccount\" | i18n }}\n          </span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"bulkDeleteServiceAccounts()\">\n    <i class=\"bwi bwi-fw bwi-trash tw-text-xl tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">\n      {{ \"deleteServiceAccounts\" | i18n }}\n    </span>\n  </button>\n</bit-menu>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, OnDestroy, Output } from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { ServiceAccountView } from \"../models/view/service-account.view\";\n\n@Component({\n  selector: \"sm-service-accounts-list\",\n  templateUrl: \"./service-accounts-list.component.html\",\n})\nexport class ServiceAccountsListComponent implements OnDestroy {\n  @Input()\n  get serviceAccounts(): ServiceAccountView[] {\n    return this._serviceAccounts;\n  }\n  set serviceAccounts(serviceAccounts: ServiceAccountView[]) {\n    this.selection.clear();\n    this._serviceAccounts = serviceAccounts;\n  }\n  private _serviceAccounts: ServiceAccountView[];\n\n  @Output() newServiceAccountEvent = new EventEmitter();\n  @Output() deleteServiceAccountsEvent = new EventEmitter<string[]>();\n  @Output() onServiceAccountCheckedEvent = new EventEmitter<string[]>();\n\n  private destroy$: Subject<void> = new Subject<void>();\n\n  selection = new SelectionModel<string>(true, []);\n\n  constructor() {\n    this.selection.changed\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((_) => this.onServiceAccountCheckedEvent.emit(this.selection.selected));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.serviceAccounts.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.serviceAccounts.map((s) => s.id));\n  }\n\n  bulkDeleteServiceAccounts() {\n    if (this.selection.selected.length >= 1) {\n      this.deleteServiceAccountsEvent.emit(this.selection.selected);\n    }\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../models/view/service-account.view\";\n\nimport {\n  ServiceAccountDialogComponent,\n  ServiceAccountOperation,\n} from \"./dialog/service-account-dialog.component\";\nimport { ServiceAccountService } from \"./service-account.service\";\n\n@Component({\n  selector: \"sm-service-accounts\",\n  templateUrl: \"./service-accounts.component.html\",\n})\nexport class ServiceAccountsComponent implements OnInit {\n  serviceAccounts$: Observable<ServiceAccountView[]>;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private dialogService: DialogService,\n    private serviceAccountService: ServiceAccountService\n  ) {}\n\n  ngOnInit() {\n    this.serviceAccounts$ = this.serviceAccountService.serviceAccount$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getServiceAccounts();\n      })\n    );\n  }\n\n  openNewServiceAccountDialog() {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n      },\n    });\n  }\n\n  private async getServiceAccounts(): Promise<ServiceAccountView[]> {\n    return await this.serviceAccountService.getServiceAccounts(this.organizationId);\n  }\n}\n","<sm-header>\n  <input bitInput [placeholder]=\"'searchServiceAccounts' | i18n\" />\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n<sm-service-accounts-list\n  [serviceAccounts]=\"serviceAccounts$ | async\"\n  (newServiceAccountEvent)=\"openNewServiceAccountDialog()\"\n></sm-service-accounts-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { AccessTokenComponent } from \"./access/access-tokens.component\";\nimport { ServiceAccountComponent } from \"./service-account.component\";\nimport { ServiceAccountsComponent } from \"./service-accounts.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ServiceAccountsComponent,\n  },\n  {\n    path: \":serviceAccountId\",\n    component: ServiceAccountComponent,\n    children: [\n      {\n        path: \"\",\n        pathMatch: \"full\",\n        redirectTo: \"access\",\n      },\n      {\n        path: \"access\",\n        component: AccessTokenComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ServiceAccountsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { BreadcrumbsModule } from \"@bitwarden/components\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { AccessListComponent } from \"./access/access-list.component\";\nimport { AccessTokenComponent } from \"./access/access-tokens.component\";\nimport { AccessTokenCreateDialogComponent } from \"./access/dialogs/access-token-create-dialog.component\";\nimport { AccessTokenDialogComponent } from \"./access/dialogs/access-token-dialog.component\";\nimport { ExpirationOptionsComponent } from \"./access/dialogs/expiration-options.component\";\nimport { ServiceAccountDialogComponent } from \"./dialog/service-account-dialog.component\";\nimport { ServiceAccountComponent } from \"./service-account.component\";\nimport { ServiceAccountsListComponent } from \"./service-accounts-list.component\";\nimport { ServiceAccountsRoutingModule } from \"./service-accounts-routing.module\";\nimport { ServiceAccountsComponent } from \"./service-accounts.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, ServiceAccountsRoutingModule, BreadcrumbsModule],\n  declarations: [\n    AccessListComponent,\n    ExpirationOptionsComponent,\n    AccessTokenComponent,\n    AccessTokenCreateDialogComponent,\n    AccessTokenDialogComponent,\n    ServiceAccountComponent,\n    ServiceAccountDialogComponent,\n    ServiceAccountsComponent,\n    ServiceAccountsListComponent,\n  ],\n  providers: [],\n})\nexport class ServiceAccountsModule {}\n","import { SecretsManagerImportErrorLine } from \"./sm-import-error-line\";\n\nexport class SecretsManagerImportError extends Error {\n  constructor(message?: string) {\n    super(message);\n  }\n\n  lines: SecretsManagerImportErrorLine[];\n}\n","import { SecretsManagerImportedProjectRequest } from \"./sm-imported-project.request\";\nimport { SecretsManagerImportedSecretRequest } from \"./sm-imported-secret.request\";\n\nexport class SecretsManagerImportRequest {\n  projects: SecretsManagerImportedProjectRequest[];\n  secrets: SecretsManagerImportedSecretRequest[];\n}\n","import { EncString } from \"@bitwarden/common/models/domain/enc-string\";\n\nexport class SecretsManagerImportedProjectRequest {\n  id: string;\n  name: EncString;\n}\n","import { EncString } from \"@bitwarden/common/models/domain/enc-string\";\n\nexport class SecretsManagerImportedSecretRequest {\n  id: string;\n  key: EncString;\n  value: EncString;\n  note: EncString;\n  projectIds: string[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class SecretsManagerExportedProjectResponse extends BaseResponse {\n  id: string;\n  name: string;\n\n  constructor(response: any) {\n    super(response);\n\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class SecretsManagerExportedSecretResponse extends BaseResponse {\n  id: string;\n  key: string;\n  value: string;\n  note: string;\n  projectIds: string[];\n\n  constructor(response: any) {\n    super(response);\n\n    this.id = this.getResponseProperty(\"Id\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.value = this.getResponseProperty(\"Value\");\n    this.note = this.getResponseProperty(\"Note\");\n\n    const projectIds = this.getResponseProperty(\"ProjectIds\");\n    this.projectIds = projectIds?.map((id: any) => id.toString());\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretsManagerExportedProjectResponse } from \"./sm-exported-project.response\";\nimport { SecretsManagerExportedSecretResponse } from \"./sm-exported-secret.response\";\n\nexport class SecretsManagerExportResponse extends BaseResponse {\n  projects: SecretsManagerExportedProjectResponse[];\n  secrets: SecretsManagerExportedSecretResponse[];\n\n  constructor(response: any) {\n    super(response);\n\n    const projects = this.getResponseProperty(\"Projects\");\n    const secrets = this.getResponseProperty(\"Secrets\");\n\n    this.projects = projects?.map((k: any) => new SecretsManagerExportedProjectResponse(k));\n    this.secrets = secrets?.map((k: any) => new SecretsManagerExportedSecretResponse(k));\n  }\n}\n","export class SecretsManagerExport {\n  projects: SecretsManagerExportProject[];\n  secrets: SecretsManagerExportSecret[];\n}\n\nexport class SecretsManagerExportProject {\n  id: string;\n  name: string;\n}\n\nexport class SecretsManagerExportSecret {\n  id: string;\n  key: string;\n  value: string;\n  note: string;\n  projectIds: string[];\n}\n","import { Injectable } from \"@angular/core\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\n\nimport { SecretsManagerImportError } from \"../models/error/sm-import-error\";\nimport { SecretsManagerImportRequest } from \"../models/requests/sm-import.request\";\nimport { SecretsManagerImportedProjectRequest } from \"../models/requests/sm-imported-project.request\";\nimport { SecretsManagerImportedSecretRequest } from \"../models/requests/sm-imported-secret.request\";\nimport { SecretsManagerExportResponse } from \"../models/responses/sm-export.response\";\nimport {\n  SecretsManagerExport,\n  SecretsManagerExportProject,\n  SecretsManagerExportSecret,\n} from \"../models/sm-export\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SecretsManagerPortingApiService {\n  constructor(\n    private apiService: ApiService,\n    private encryptService: EncryptService,\n    private cryptoService: CryptoService,\n    private i18nService: I18nService\n  ) {}\n\n  async export(organizationId: string, exportFormat = \"json\"): Promise<string> {\n    let response = {};\n\n    try {\n      response = await this.apiService.send(\n        \"GET\",\n        \"/sm/\" + organizationId + \"/export?format=\" + exportFormat,\n        null,\n        true,\n        true\n      );\n    } catch (error) {\n      return null;\n    }\n\n    return JSON.stringify(\n      await this.decryptExport(organizationId, new SecretsManagerExportResponse(response)),\n      null,\n      \"  \"\n    );\n  }\n\n  async import(organizationId: string, fileContents: string): Promise<SecretsManagerImportError> {\n    let requestObject = {};\n\n    try {\n      requestObject = JSON.parse(fileContents);\n      const requestBody = await this.encryptImport(organizationId, requestObject);\n\n      await this.apiService.send(\n        \"POST\",\n        \"/sm/\" + organizationId + \"/import\",\n        requestBody,\n        true,\n        true\n      );\n    } catch (error) {\n      const errorResponse = new ErrorResponse(error, 400);\n      return this.handleServerError(errorResponse, requestObject);\n    }\n  }\n\n  private async encryptImport(\n    organizationId: string,\n    importData: any\n  ): Promise<SecretsManagerImportRequest> {\n    const encryptedImport = new SecretsManagerImportRequest();\n\n    try {\n      const orgKey = await this.cryptoService.getOrgKey(organizationId);\n      encryptedImport.projects = [];\n      encryptedImport.secrets = [];\n\n      encryptedImport.projects = await Promise.all(\n        importData.projects.map(async (p: any) => {\n          const project = new SecretsManagerImportedProjectRequest();\n          project.id = p.id;\n          project.name = await this.encryptService.encrypt(p.name, orgKey);\n          return project;\n        })\n      );\n\n      encryptedImport.secrets = await Promise.all(\n        importData.secrets.map(async (s: any) => {\n          const secret = new SecretsManagerImportedSecretRequest();\n\n          [secret.key, secret.value, secret.note] = await Promise.all([\n            this.encryptService.encrypt(s.key, orgKey),\n            this.encryptService.encrypt(s.value, orgKey),\n            this.encryptService.encrypt(s.note, orgKey),\n          ]);\n\n          secret.id = s.id;\n          secret.projectIds = s.projectIds;\n\n          return secret;\n        })\n      );\n    } catch (error) {\n      return null;\n    }\n\n    return encryptedImport;\n  }\n\n  private async decryptExport(\n    organizationId: string,\n    exportData: SecretsManagerExportResponse\n  ): Promise<SecretsManagerExport> {\n    const orgKey = await this.cryptoService.getOrgKey(organizationId);\n    const decryptedExport = new SecretsManagerExport();\n    decryptedExport.projects = [];\n    decryptedExport.secrets = [];\n\n    decryptedExport.projects = await Promise.all(\n      exportData.projects.map(async (p) => {\n        const project = new SecretsManagerExportProject();\n        project.id = p.id;\n        project.name = await this.encryptService.decryptToUtf8(new EncString(p.name), orgKey);\n        return project;\n      })\n    );\n\n    decryptedExport.secrets = await Promise.all(\n      exportData.secrets.map(async (s) => {\n        const secret = new SecretsManagerExportSecret();\n\n        [secret.key, secret.value, secret.note] = await Promise.all([\n          this.encryptService.decryptToUtf8(new EncString(s.key), orgKey),\n          this.encryptService.decryptToUtf8(new EncString(s.value), orgKey),\n          this.encryptService.decryptToUtf8(new EncString(s.note), orgKey),\n        ]);\n\n        secret.id = s.id;\n        secret.projectIds = s.projectIds;\n\n        return secret;\n      })\n    );\n\n    return decryptedExport;\n  }\n\n  private handleServerError(\n    errorResponse: ErrorResponse,\n    importResult: any\n  ): SecretsManagerImportError {\n    if (errorResponse.validationErrors == null) {\n      return new SecretsManagerImportError(errorResponse.message);\n    }\n\n    const result = new SecretsManagerImportError();\n    result.lines = [];\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const id = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Projects\":\n          item = importResult.projects[id];\n          itemType = \"Project\";\n          break;\n        case \"Secrets\":\n          item = importResult.secrets[id];\n          itemType = \"Secret\";\n          break;\n        default:\n          return;\n      }\n\n      result.lines.push({\n        id: id + 1,\n        type: itemType == \"Project\" ? \"Project\" : \"Secret\",\n        key: item.key,\n        errorMessage: value.length > 0 ? value[0] : \"\",\n      });\n    });\n\n    return result;\n  }\n}\n","import { formatDate } from \"@angular/common\";\nimport { Injectable } from \"@angular/core\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SecretsManagerPortingService {\n  constructor(private i18nService: I18nService) {}\n\n  async getFileName(prefix: string = null, extension = \"json\"): Promise<string> {\n    const locale = await firstValueFrom(this.i18nService.locale$);\n    const dateString = formatDate(new Date(), \"yyyyMMddHHmmss\", locale);\n    return \"bitwarden\" + (prefix ? \"_\" + prefix : \"\") + \"_export_\" + dateString + \".\" + extension;\n  }\n}\n","<sm-header></sm-header>\n\n<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <div class=\"tw-my-4 tw-max-w-xl\">\n    <app-callout type=\"info\" title=\"{{ 'exportingOrganizationSecretDataTitle' | i18n }}\">\n      {{ \"exportingOrganizationSecretDataDescription\" | i18n: orgName }}\n    </app-callout>\n  </div>\n\n  <bit-form-field class=\"tw-max-w-sm\">\n    <bit-label>{{ \"fileFormat\" | i18n }}</bit-label>\n    <select bitInput formControlName=\"format\">\n      <option *ngFor=\"let format of exportFormats\" [ngValue]=\"format\">{{ format }}</option>\n    </select>\n  </bit-form-field>\n\n  <button bitButton bitFormButton type=\"submit\" buttonType=\"primary\">\n    {{ \"exportData\" | i18n }}\n  </button>\n</form>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization/organization.service.abstraction\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationPromptComponent } from \"@bitwarden/web-vault/app/components/user-verification-prompt.component\";\n\nimport { SecretsManagerPortingApiService } from \"../services/sm-porting-api.service\";\nimport { SecretsManagerPortingService } from \"../services/sm-porting.service\";\n\n@Component({\n  selector: \"sm-export\",\n  templateUrl: \"./sm-export.component.html\",\n})\nexport class SecretsManagerExportComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n\n  protected orgName: string;\n  protected orgId: string;\n  protected exportFormats: string[] = [\"json\"];\n\n  protected formGroup = new FormGroup({\n    format: new FormControl(\"json\", [Validators.required]),\n  });\n\n  constructor(\n    private route: ActivatedRoute,\n    private i18nService: I18nService,\n    private organizationService: OrganizationService,\n    private platformUtilsService: PlatformUtilsService,\n    private smPortingService: SecretsManagerPortingService,\n    private fileDownloadService: FileDownloadService,\n    private logService: LogService,\n    private modalService: ModalService,\n    private secretsManagerApiService: SecretsManagerPortingApiService\n  ) {}\n\n  async ngOnInit() {\n    this.route.params\n      .pipe(\n        switchMap(async (params) => await this.organizationService.get(params.organizationId)),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((organization) => {\n        this.orgName = organization.name;\n        this.orgId = organization.id;\n      });\n\n    this.formGroup.get(\"format\").disable();\n  }\n\n  async ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    await this.doExport();\n  };\n\n  private async doExport() {\n    try {\n      const exportData = await this.secretsManagerApiService.export(\n        this.orgId,\n        this.formGroup.get(\"format\").value\n      );\n\n      await this.downloadFile(exportData, this.formGroup.get(\"format\").value);\n      this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"dataExportSuccess\"));\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  private async downloadFile(data: string, format: string) {\n    const fileName = await this.smPortingService.getFileName(null, format);\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: data,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n\n  private verifyUser() {\n    const ref = this.modalService.open(UserVerificationPromptComponent, {\n      allowMultipleModals: true,\n      data: {\n        confirmDescription: \"exportWarningDesc\",\n        confirmButtonText: \"exportVault\",\n        modalTitle: \"confirmVaultExport\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return ref.onClosedPromise();\n  }\n}\n","<bit-dialog>\n  <span bitDialogTitle>\n    {{ \"importError\" | i18n }}\n  </span>\n  <span bitDialogContent>\n    <div>{{ \"resolveTheErrorsBelowAndTryAgain\" | i18n }}</div>\n    <bit-table>\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"name\" | i18n }}</th>\n          <th bitCell>{{ \"description\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body>\n        <tr bitRow *ngFor=\"let line of errorLines\">\n          <td bitCell class=\"tw-break-all\">[{{ line.id }}] [{{ line.type }}] {{ line.key }}</td>\n          <td bitCell>{{ line.errorMessage }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </span>\n  <div bitDialogFooter>\n    <button bitButton bitDialogClose buttonType=\"primary\" type=\"button\">\n      {{ \"ok\" | i18n }}\n    </button>\n  </div>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\n\nimport { SecretsManagerImportError } from \"../models/error/sm-import-error\";\nimport { SecretsManagerImportErrorLine } from \"../models/error/sm-import-error-line\";\n\nexport interface SecretsManagerImportErrorDialogOperation {\n  error: SecretsManagerImportError;\n}\n\n@Component({\n  selector: \"sm-import-error-dialog\",\n  templateUrl: \"./sm-import-error-dialog.component.html\",\n})\nexport class SecretsManagerImportErrorDialogComponent {\n  errorLines: SecretsManagerImportErrorLine[];\n\n  constructor(\n    public dialogRef: DialogRef,\n    private i18nService: I18nService,\n    @Inject(DIALOG_DATA) public data: SecretsManagerImportErrorDialogOperation\n  ) {\n    this.errorLines = data.error.lines;\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization/organization.service.abstraction\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport {\n  SecretsManagerImportErrorDialogComponent,\n  SecretsManagerImportErrorDialogOperation,\n} from \"../dialog/sm-import-error-dialog.component\";\nimport { SecretsManagerImportError } from \"../models/error/sm-import-error\";\nimport { SecretsManagerPortingApiService } from \"../services/sm-porting-api.service\";\n\n@Component({\n  selector: \"sm-import\",\n  templateUrl: \"./sm-import.component.html\",\n})\nexport class SecretsManagerImportComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  protected orgId: string = null;\n  protected selectedFile: File;\n  protected formGroup = new FormGroup({\n    pastedContents: new FormControl(\"\"),\n  });\n\n  constructor(\n    private route: ActivatedRoute,\n    private i18nService: I18nService,\n    private organizationService: OrganizationService,\n    private platformUtilsService: PlatformUtilsService,\n    protected fileDownloadService: FileDownloadService,\n    private logService: LogService,\n    private secretsManagerPortingApiService: SecretsManagerPortingApiService,\n    private dialogService: DialogService\n  ) {}\n\n  async ngOnInit() {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.orgId = params.organizationId;\n    });\n  }\n\n  async ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    const fileElement = document.getElementById(\"file\") as HTMLInputElement;\n    const importContents = await this.getImportContents(\n      fileElement,\n      this.formGroup.get(\"pastedContents\").value.trim()\n    );\n\n    if (importContents == null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      return;\n    }\n\n    try {\n      const error = await this.secretsManagerPortingApiService.import(this.orgId, importContents);\n\n      if (error?.lines?.length > 0) {\n        this.openImportErrorDialog(error);\n        return;\n      } else if (error != null) {\n        this.platformUtilsService.showToast(\n          \"error\",\n          this.i18nService.t(\"errorOccurred\"),\n          this.i18nService.t(\"errorReadingImportFile\")\n        );\n        return;\n      }\n\n      this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"importSuccess\"));\n      this.clearForm();\n    } catch (error) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"errorReadingImportFile\")\n      );\n      this.logService.error(error);\n    }\n  };\n\n  protected async getImportContents(\n    fileElement: HTMLInputElement,\n    pastedContents: string\n  ): Promise<string> {\n    const files = fileElement.files;\n\n    if (\n      (files == null || files.length === 0) &&\n      (pastedContents == null || pastedContents === \"\")\n    ) {\n      return null;\n    }\n\n    let fileContents = pastedContents;\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      return null;\n    }\n\n    return fileContents;\n  }\n\n  protected setSelectedFile(event: Event) {\n    const fileInputEl = <HTMLInputElement>event.target;\n    const file = fileInputEl.files.length > 0 ? fileInputEl.files[0] : null;\n    this.selectedFile = file;\n  }\n\n  private clearForm() {\n    (document.getElementById(\"file\") as HTMLInputElement).value = \"\";\n    this.selectedFile = null;\n    this.formGroup.reset({\n      pastedContents: \"\",\n    });\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private openImportErrorDialog(error: SecretsManagerImportError) {\n    this.dialogService.open<unknown, SecretsManagerImportErrorDialogOperation>(\n      SecretsManagerImportErrorDialogComponent,\n      {\n        data: {\n          error: error,\n        },\n      }\n    );\n  }\n}\n","<sm-header></sm-header>\n\n<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\" class=\"tw-max-w-xl\">\n  <bit-form-field>\n    <bit-label>{{ \"fileUpload\" | i18n }}</bit-label>\n    <div class=\"file-selector\">\n      <button bitButton type=\"button\" buttonType=\"secondary\" (click)=\"fileSelector.click()\">\n        {{ \"chooseFile\" | i18n }}\n      </button>\n      {{ selectedFile?.name ?? (\"noFileChosen\" | i18n) }}\n    </div>\n    <input\n      #fileSelector\n      hidden\n      bitInput\n      type=\"file\"\n      id=\"file\"\n      class=\"form-control-file\"\n      name=\"file\"\n      (change)=\"setSelectedFile($event)\"\n      accept=\"application/JSON\"\n    />\n    <bit-hint>{{ \"acceptedFormats\" | i18n }} JSON</bit-hint>\n  </bit-form-field>\n  <div class=\"my-4\">\n    {{ \"or\" | i18n }}\n  </div>\n  <bit-form-field>\n    <bit-label for=\"pastedContents\">{{ \"copyPasteImportContents\" | i18n }}</bit-label>\n    <textarea\n      bitInput\n      id=\"pastedContents\"\n      class=\"form-control\"\n      name=\"FileContents\"\n      formControlName=\"pastedContents\"\n    ></textarea>\n    <bit-hint>{{ \"acceptedFormats\" | i18n }} JSON</bit-hint>\n  </bit-form-field>\n  <button bitButton bitformButton type=\"submit\" buttonType=\"primary\">\n    {{ \"importData\" | i18n }}\n  </button>\n</form>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { SecretsManagerExportComponent } from \"./porting/sm-export.component\";\nimport { SecretsManagerImportComponent } from \"./porting/sm-import.component\";\n\nconst routes: Routes = [\n  {\n    path: \"import\",\n    component: SecretsManagerImportComponent,\n    data: {\n      titleId: \"importData\",\n    },\n  },\n  {\n    path: \"export\",\n    component: SecretsManagerExportComponent,\n    data: {\n      titleId: \"exportData\",\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { SecretsManagerImportErrorDialogComponent } from \"./dialog/sm-import-error-dialog.component\";\nimport { SecretsManagerExportComponent } from \"./porting/sm-export.component\";\nimport { SecretsManagerImportComponent } from \"./porting/sm-import.component\";\nimport { SecretsManagerPortingApiService } from \"./services/sm-porting-api.service\";\nimport { SecretsManagerPortingService } from \"./services/sm-porting.service\";\nimport { SettingsRoutingModule } from \"./settings-routing.module\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, SettingsRoutingModule],\n  declarations: [\n    SecretsManagerImportComponent,\n    SecretsManagerExportComponent,\n    SecretsManagerImportErrorDialogComponent,\n  ],\n  providers: [SecretsManagerPortingService, SecretsManagerPortingApiService],\n})\nexport class SettingsModule {}\n","import { Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, CanActivate } from \"@angular/router\";\n\n@Injectable()\nexport class SMGuard implements CanActivate {\n  async canActivate(route: ActivatedRouteSnapshot) {\n    // TODO: Verify org\n    return true;\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { Organization } from \"@bitwarden/common/models/domain/organization\";\nimport { OrganizationPermissionsGuard } from \"@bitwarden/web-vault/app/organizations/guards/org-permissions.guard\";\nimport { buildFlaggedRoute } from \"@bitwarden/web-vault/app/oss-routing.module\";\n\nimport { LayoutComponent } from \"./layout/layout.component\";\nimport { NavigationComponent } from \"./layout/navigation.component\";\nimport { OverviewModule } from \"./overview/overview.module\";\nimport { ProjectsModule } from \"./projects/projects.module\";\nimport { SecretsModule } from \"./secrets/secrets.module\";\nimport { ServiceAccountsModule } from \"./service-accounts/service-accounts.module\";\nimport { SettingsModule } from \"./settings/settings.module\";\nimport { SMGuard } from \"./sm.guard\";\n\nconst routes: Routes = [\n  buildFlaggedRoute(\"secretsManager\", {\n    path: \":organizationId\",\n    component: LayoutComponent,\n    canActivate: [OrganizationPermissionsGuard, SMGuard],\n    data: {\n      organizationPermissions: (org: Organization) => org.canAccessSecretsManager,\n    },\n    children: [\n      {\n        path: \"\",\n        component: NavigationComponent,\n        outlet: \"sidebar\",\n      },\n      {\n        path: \"secrets\",\n        loadChildren: () => SecretsModule,\n        data: {\n          titleId: \"secrets\",\n        },\n      },\n      {\n        path: \"projects\",\n        loadChildren: () => ProjectsModule,\n        data: {\n          titleId: \"projects\",\n        },\n      },\n      {\n        path: \"service-accounts\",\n        loadChildren: () => ServiceAccountsModule,\n        data: {\n          titleId: \"serviceAccounts\",\n        },\n      },\n      {\n        path: \"settings\",\n        loadChildren: () => SettingsModule,\n      },\n      {\n        path: \"\",\n        loadChildren: () => OverviewModule,\n        pathMatch: \"full\",\n      },\n    ],\n  }),\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SecretsManagerRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared\";\n\nimport { LayoutModule } from \"./layout/layout.module\";\nimport { SecretsManagerSharedModule } from \"./shared/sm-shared.module\";\nimport { SecretsManagerRoutingModule } from \"./sm-routing.module\";\nimport { SMGuard } from \"./sm.guard\";\n\n@NgModule({\n  imports: [SharedModule, SecretsManagerSharedModule, SecretsManagerRoutingModule, LayoutModule],\n  providers: [SMGuard],\n})\nexport class SecretsManagerModule {}\n"],"names":["constructor","modalRef","config","userVerificationService","formBuilder","platformUtilsService","i18nService","confirmDescription","this","data","confirmButtonText","modalTitle","secret","submit","verifyUser","value","e","showToast","t","close","UserVerificationPromptComponent","NavigationModule","LayoutModule","SecretsManagerSharedModule","LayoutComponent","ngOnInit","document","body","classList","remove","SecretsManagerLogo","NavBaseComponent","variant","treeDepth","hideActiveStyles","mainContentClicked","setActive","NavItemComponent","_active","rlaOptions","paths","queryParams","fragment","matrixParams","focusVisibleWithin$","BehaviorSubject","fvwStyles$","pipe","map","isActive","showActiveStyles","onFocusIn","target","next","matches","onFocusOut","toggle","NavGroupComponent","contentId","Math","random","toString","substring","open","openChange","event","stopPropagation","emit","initNestedStyles","nestedGroups","nestedItems","forEach","navGroupOrItem","ngAfterContentInit","NavDividerComponent","OrgSwitcherComponent","route","organizationService","organizations$","orgs","filter","sort","a","b","name","localeCompare","activeOrganization$","combineLatest","paramMap","params","find","org","id","get","hideNewButton","NavigationComponent","logo","orgFilter","canAccessSecretsManager","HeaderComponent","stateService","routeData$","titleId","account$","activeAccount$","accounts$","activeAccount","accounts","profile","ProjectView","BulkOperationStatus","BulkStatusDialogComponent","dialogRef","title","subTitle","columnTitle","message","details","length","Error","ProjectListView","ProjectRequest","ProjectListItemResponse","response","super","getResponseProperty","organizationId","creationDate","revisionDate","ProjectResponse","ProjectService","cryptoService","apiService","encryptService","_project","Subject","project$","asObservable","getByProjectId","projectId","r","send","projectResponse","createProjectView","getProjects","results","L","createProjectsListView","create","projectView","request","getProjectRequest","project","update","delete","projects","projectIds","element","bulkOperationStatus","errorMessage","error","getOrganizationKey","getOrgKey","orgKey","encrypt","decryptToUtf8","Promise","all","s","projectListView","OperationType","ProjectDialogComponent","projectService","router","formGroup","loading","markAllAsTouched","invalid","getProjectView","operation","Add","newProject","createProject","navigate","updateProject","Edit","loadData","setValue","SecretProjectView","SecretView","SecretListView","SecretRequest","SecretProjectResponse","SecretListItemResponse","k","SecretWithProjectsListResponse","secrets","dr","SecretResponse","note","SecretService","_secret","secret$","getBySecretId","secretId","secretResponse","createSecretView","getSecrets","createSecretsListView","getSecretsByProject","secretView","getSecretRequest","secretIds","responseErrors","push","join","key","encryptedString","decryptProjectsMappedToSecrets","projectsMappedToSecretsView","secretListView","p","includes","projectsMappedToSecretView","SecretDeleteDialogComponent","secretService","updateProjectList","removeProjectAssociation","openDeleteSecretDialog","SecretDialogComponent","dialogService","notes","selectedProjects","destroy$","getSecretView","createSecret","updateSecret","then","valueChanges","takeUntil","subscribe","ngOnDestroy","complete","newList","selectedProject","undefined","projectSecretView","deleteButtonIsVisible","lastValueFrom","closed","closeData","ServiceAccountView","ServiceAccountRequest","ServiceAccountResponse","ServiceAccountService","_serviceAccount","serviceAccount$","getServiceAccounts","createServiceAccountViews","serviceAccountView","getServiceAccountRequest","createServiceAccountView","organizationKey","serviceAccountResponse","serviceAccountResponses","ServiceAccountDialogComponent","serviceAccountService","getServiceAccountView","NewMenuComponent","openSecretDialog","openProjectDialog","openServiceAccountDialog","OverviewComponent","routes","path","component","OverviewRoutingModule","OverviewModule","PotentialGranteeView","ProjectAccessPoliciesView","AccessPoliciesCreateRequest","AccessPolicyUpdateRequest","AccessPolicyRequest","PotentialGranteeResponse","type","email","ProjectAccessPoliciesResponse","userAccessPolicies","groupAccessPolicies","serviceAccountAccessPolicies","AccessPolicyService","_projectAccessPolicies","projectAccessPolicies$","getProjectAccessPolicies","createProjectAccessPoliciesView","getPeoplePotentialGrantees","createPotentialGranteeViews","getServiceAccountsPotentialGrantees","deleteAccessPolicy","accessPolicyId","updateAccessPolicy","baseAccessPolicyView","payload","read","write","createProjectAccessPolicies","projectAccessPoliciesView","getAccessPoliciesCreateRequest","view","createRequest","userAccessPolicyRequests","ap","getAccessPolicyRequest","organizationUserId","groupAccessPolicyRequests","groupId","serviceAccountAccessPolicyRequests","serviceAccountId","granteeId","projectAccessPoliciesResponse","createUserProjectAccessPolicyView","createGroupProjectAccessPolicyView","createServiceAccountProjectAccessPolicyView","createBaseAccessPolicyView","grantedProjectId","organizationUserName","groupName","serviceAccountName","BaseAccessPolicyView","UserProjectAccessPolicyView","GroupProjectAccessPolicyView","ServiceAccountProjectAccessPolicyView","AccessSelectorComponent","accessPolicyService","validationService","userIcon","groupIcon","serviceAccountIcon","multiSelect","disable","createProjectAccessPoliciesViewFromSelected","firstValueFrom","selectItemsView$","createSelectView","projectAccessPolicies","potentialGrantees","selectItemsView","granteeView","icon","listName","labelName","filterExistingAccessPolicies","distinctUntilChanged","prev","curr","getAccessPoliciesCount","combineLatestWith","potentialGrantees$","tap","enable","reset","rows$","policies","rowData","tableType","policy","selection","filtered","potentialGrantee","some","accessPolicyView","showError","ProjectAccessComponent","startWith","switchMap","_","share","accessType","ProjectPeopleComponent","NoItemsComponent","newSecretEvent","$event","editSecretEvent","copySecretNameEvent","copySecretValueEvent","projectsEvent","deleteSecretsEvent","toggleAll","SecretsListComponent","onSecretCheckedEvent","changed","selected","_secrets","clear","isAllSelected","select","bulkDeleteSecrets","openNewSecretDialog","openDeleteSecret","openEditSecret","ProjectSecretsComponent","secrets$","ProjectServiceAccountsComponent","ProjectComponent","ProjectDeleteDialogComponent","confirmDelete","matchConfirmationMessageValidator","dialogContent","dialogConfirmationLabel","dialogConfirmationMessage","bulkResponses","openBulkStatusDialog","bulkStatusResults","control","toLowerCase","confirmationDoesntMatchError","TableDataSource","_renderData","_renderChangesSubscription","_data","_sort","direction","connect","updateChangeSubscription","disconnect","unsubscribe","orderedData","orderData","sortData","sortingDataAccessor","sortHeaderId","numberValue","Number","MAX_SAFE_INTEGER","column","fn","valueA","valueB","valueAType","valueBType","comparatorResult","SortableComponent","table","default","_default","ariaSort","dataSource","bitSortable","newProjectEvent","editProjectEvent","deleteProject","ProjectsListComponent","deleteProjectEvent","onProjectCheckedEvent","_projects","bulkDeleteProjects","isSelected","ProjectsComponent","projects$","openEditProject","openNewProjectDialog","openDeleteProjectDialog","children","pathMatch","redirectTo","ProjectsRoutingModule","ProjectsModule","SecretsComponent","SecretsRoutingModule","SecretsModule","AccessTokenRequest","AccessTokenCreationResponse","clientSecret","expireAt","AccessTokenResponse","scopes","AccessTokenView","AccessService","cryptoFunctionService","_accessTokenVersion","_accessToken","accessToken$","getAccessTokens","createAccessTokenViews","createAccessToken","accessTokenView","keyMaterial","randomBytes","hkdf","encryptionKey","createAccessTokenRequest","result","b64Key","accessTokenRequest","encryptedPayload","JSON","stringify","keyB64","accessTokenResponses","Date","AccessTokenDialogComponent","disableClose","accessToken","copyAccessToken","copyToClipboard","ExpirationOptionsComponent","datePipe","currentDate","form","expires","expireDateTime","_onChange","_value","onTouched","touched","val","getExpiresDate","registerOnChange","registerOnTouched","validate","required","writeValue","transform","setDisabledState","isDisabled","setDate","getDate","provide","multi","useExisting","AccessTokenCreateDialogComponent","accessService","expirationDateControl","expirationDayOptions","openAccessTokenDialog","expirationDate","static","newAccessTokenEvent","AccessListComponent","tokens","_tokens","permission","token","AccessTokenComponent","accessTokens$","openNewAccessTokenDialog","ServiceAccountComponent","saList","sa","newServiceAccountEvent","ServiceAccountsListComponent","deleteServiceAccountsEvent","onServiceAccountCheckedEvent","serviceAccounts","_serviceAccounts","bulkDeleteServiceAccounts","ServiceAccountsComponent","serviceAccounts$","openNewServiceAccountDialog","ServiceAccountsRoutingModule","ServiceAccountsModule","SecretsManagerImportError","SecretsManagerImportRequest","SecretsManagerImportedProjectRequest","SecretsManagerImportedSecretRequest","SecretsManagerExportedProjectResponse","SecretsManagerExportedSecretResponse","SecretsManagerExportResponse","SecretsManagerExport","SecretsManagerExportProject","SecretsManagerExportSecret","SecretsManagerPortingApiService","export","exportFormat","decryptExport","import","fileContents","requestObject","parse","requestBody","encryptImport","errorResponse","handleServerError","importData","encryptedImport","exportData","decryptedExport","importResult","validationErrors","lines","Object","entries","index","item","itemType","match","SecretsManagerPortingService","getFileName","prefix","extension","locale","locale$","dateString","SecretsManagerExportComponent","smPortingService","fileDownloadService","logService","modalService","secretsManagerApiService","exportFormats","format","doExport","organization","orgName","orgId","downloadFile","fileName","download","blobData","blobOptions","ref","allowMultipleModals","onClosedPromise","SecretsManagerImportErrorDialogComponent","errorLines","SecretsManagerImportComponent","secretsManagerPortingApiService","pastedContents","fileElement","getElementById","importContents","getImportContents","trim","openImportErrorDialog","clearForm","files","content","getFileContents","setSelectedFile","fileInputEl","file","selectedFile","resolve","reject","reader","FileReader","readAsText","onload","evt","onerror","SettingsRoutingModule","SettingsModule","SMGuard","canActivate","organizationPermissions","outlet","loadChildren","SecretsManagerRoutingModule","SecretsManagerModule"],"sourceRoot":""}