{"version":3,"file":"301.2c117fcc715ab60b11be.js","mappings":"ogBAcO,MAAM,EAMXA,YACUC,EACEC,EACAC,EACFC,EACAC,EACAC,GALA,KAAAL,SAAAA,EACE,KAAAC,OAAAA,EACA,KAAAC,wBAAAA,EACF,KAAAC,YAAAA,EACA,KAAAC,qBAAAA,EACA,KAAAC,YAAAA,EAXV,KAAAC,mBAAqBC,KAAKN,OAAOO,KAAKF,mBACtC,KAAAG,kBAAoBF,KAAKN,OAAOO,KAAKC,kBACrC,KAAAC,WAAaH,KAAKN,OAAOO,KAAKE,WAC9B,KAAAC,OAAS,IAAI,IASV,CAEGC,S,yCACJ,UAEQL,KAAKL,wBAAwBW,WAAWN,KAAKI,OAAOG,M,CAC1D,MAAOC,GAMP,YALAR,KAAKH,qBAAqBY,UACxB,QACAT,KAAKF,YAAYY,EAAE,SACnBV,KAAKF,YAAYY,EAAE,yB,CAKvBV,KAAKP,SAASkB,OAAM,EACtB,G,mCA7BW,GAA+B,qE,mBAA/B,I,gDCPN,MAAMC,UAAwC,G,8DAAxCA,KAA+B,GAA/BA,EAA+B,E,sBAA/BA,EAA+B,2wBCN5C,cACA,+BACE,iCACE,sCAAkC,oCAAY,EAAAP,QAAQ,IACpD,oCACE,U,uCACF,QACA,uCACE,U,iBACF,QACA,uCACE,2DACA,+BACF,6BACA,uCAGE,4CACE,0CAAM,U,iBAA8B,QACtC,+BACA,6CACE,U,iBACF,QACF,6BACF,2BACF,yBACF,uBACA,gB,MAtBQ,8EAGA,yEAGwC,uCAOhC,iDAGN,kE,uHCtBEQ,E,8EAAZ,SAAYA,GACV,2CACA,oCACD,CAHD,CAAYA,IAAAA,EAAmB,K,wZCkBxB,MAAM,EAsBXrB,YACYsB,EACAhB,EACAD,EACAkB,EACAC,EACFC,EACEC,EACFC,EACAxB,EACAC,EACEwB,GAVA,KAAAN,cAAAA,EACA,KAAAhB,YAAAA,EACA,KAAAD,qBAAAA,EACA,KAAAkB,cAAAA,EACA,KAAAC,uBAAAA,EACF,KAAAC,cAAAA,EACE,KAAAC,IAAAA,EACF,KAAAC,WAAAA,EACA,KAAAxB,wBAAAA,EACA,KAAAC,YAAAA,EACE,KAAAwB,oBAAAA,EAhCF,KAAAC,QAAU,IAAI,MAGxB,KAAAC,kBAAmB,EAEnB,KAAAC,WAAavB,KAAKJ,YAAY4B,MAAM,CAClCC,OAAQ,CAAC,QACTrB,OAAQ,CAAC,IACTsB,aAAc,CAAC,GAAI,eACnBC,oBAAqB,CAAC,GAAI,eAC1BC,mBAAoB,CAACf,EAAoBgB,oBAG3C,KAAAC,cAAgB,CACd,CAAEC,KAAM,QAASxB,MAAO,QACxB,CAAEwB,KAAM,OAAQxB,MAAO,OACvB,CAAEwB,KAAM,oBAAqBxB,MAAO,mBAG9B,KAAAyB,SAAW,IAAIC,EAAA,CAcpB,CAEGC,W,yCACJlC,KAAKiB,cACFkB,2BAA2B,gCAC3BC,MAAK,EAAAC,EAAA,GAAUrC,KAAKgC,WACpBM,WAAWC,IACVvC,KAAKsB,iBAAmBiB,CAAyB,UAG/CvC,KAAKwC,uBAEX,EAAAC,EAAA,GACEzC,KAAKuB,WAAWmB,IAAI,UAAUC,aAC9B3C,KAAKuB,WAAWmB,IAAI,sBAAsBC,cAEzCP,MAAK,EAAAC,EAAA,GAAUrC,KAAKgC,WACpBI,MAAK,EAAAQ,EAAA,GAAU,IACfN,WAAU,IAAMtC,KAAK6C,oBAC1B,G,CAEAC,cACE9C,KAAKgC,SAASe,MAChB,CAEMP,sB,yCACAxC,KAAKsB,kBACPtB,KAAKuB,WAAWyB,SAEpB,G,CAEIC,sBACF,MAAuB,mBAAhBjD,KAAKyB,MACd,CAEgByB,W,yCACd,IACElD,KAAKmD,YAAcnD,KAAKoD,gBACxB,MAAMnD,QAAaD,KAAKmD,YACxBnD,KAAKqD,aAAapD,GAClBD,KAAKsD,cACCtD,KAAKuD,eACXvD,KAAKuB,WAAWmB,IAAI,UAAUc,SAAS,IACvCxD,KAAKuB,WAAWkC,iB,CAChB,MAAOjD,GACPR,KAAKmB,WAAWuC,MAAMlD,E,CAE1B,G,CAEMH,S,yCACJ,GAAIL,KAAKsB,iBAMP,YALAtB,KAAKH,qBAAqBY,UACxB,QACA,KACAT,KAAKF,YAAYY,EAAE,sCAMvB,WAD8BV,KAAK2D,iBAEjC,OAEF,MAAMvD,EAASJ,KAAKuB,WAAWmB,IAAI,UAAUnC,MAE7C,UACQP,KAAKL,wBAAwBW,WAAWF,E,CAC9C,MAAOI,GAEP,YADAR,KAAKH,qBAAqBY,UAAU,QAAST,KAAKF,YAAYY,EAAE,iBAAkBF,EAAEoD,Q,CAItF5D,KAAKkD,UACP,G,CAEMS,gB,yCACJ,OAAI3D,KAAKiD,sBACMjD,KAAKH,qBAAqBgE,WACrC,MACE7D,KAAKF,YAAYY,EAAE,2BACnB,MACAV,KAAKF,YAAYY,EAAE,+BACrBV,KAAKF,YAAYY,EAAE,sBACnBV,KAAKF,YAAYY,EAAE,eACnBV,KAAKF,YAAYY,EAAE,UACnB,WACA,SAGWV,KAAKH,qBAAqBgE,WACrC7D,KAAKF,YAAYY,EAAE,qBACnBV,KAAKF,YAAYY,EAAE,sBACnBV,KAAKF,YAAYY,EAAE,eACnBV,KAAKF,YAAYY,EAAE,UACnB,UAGN,G,CAEU4C,QACRtD,KAAKqB,QAAQyC,MACf,CAEUV,gBACR,MACkB,mBAAhBpD,KAAKyB,QACLzB,KAAK4B,qBAAuBf,EAAoBkD,cAEzC/D,KAAKe,cAAciD,2BAA2BhE,KAAK0B,cAEnD1B,KAAKe,cAAckD,UAAUjE,KAAKyB,OAAQ,KAErD,CAEUyC,YAAYC,GACpB,IAAIC,EAAYpE,KAAKyB,OASrB,MARoB,mBAAhBzB,KAAKyB,SAEL0C,EADY,MAAVA,EACO,YAEA,aAAeA,EAE1BC,EAAY,QAEPpE,KAAKe,cAAcmD,YAAYC,EAAQC,EAChD,CAEgBb,e,+CACRvD,KAAKgB,uBAAuBqD,QAAQ,6BAC5C,G,CAEI5C,aACF,OAAOzB,KAAKuB,WAAWmB,IAAI,UAAUnC,KACvC,CAEImB,mBACF,OAAO1B,KAAKuB,WAAWmB,IAAI,gBAAgBnC,KAC7C,CAEIoB,0BACF,OAAO3B,KAAKuB,WAAWmB,IAAI,uBAAuBnC,KACpD,CAEIqB,yBACF,OAAO5B,KAAKuB,WAAWmB,IAAI,sBAAsBnC,KACnD,CAEAsC,mBACE7C,KAAKuB,WAAWmB,IAAI,uBAAuB4B,QAC3CtE,KAAKuB,WAAWmB,IAAI,gBAAgB4B,QAEhCtE,KAAKiD,iBAAmBjD,KAAK4B,oBAAsBf,EAAoBkD,eACzE/D,KAAKuB,WAAWgD,SAAS7C,aAAa8C,SACtCxE,KAAKuB,WAAWgD,SAAS5C,oBAAoB6C,WAE7CxE,KAAKuB,WAAWgD,SAAS7C,aAAasB,UACtChD,KAAKuB,WAAWgD,SAAS5C,oBAAoBqB,UAEjD,CAEQK,aAAaoB,GACnB,MAAMC,EAAW1E,KAAKkE,cACtBlE,KAAKoB,oBAAoBuD,SAAS,CAChCD,SAAUA,EACVE,SAAUH,EACVI,YAAa,CAAEC,KAAM,eAEzB,E,iCAzMW,GAAe,+H,mBAAf,EAAe,8B,meCL1B,0B,gBACE,S,gBACF,S,MAF0B,gDACxB,+E,yBAEF,uC,sBACE,wC,2BASM,qBAA0D,SAAY,S,yBAA9B,uBAAkB,sB,0CA6D5D,SACE,kDACE,+CAAW,S,gBAA2B,QACtC,8CAOA,gDAKE,mGACD,QACD,gDAAU,U,iBAAwC,QACpD,iCACA,oDACE,iDAAW,U,iBAAkC,QAC7C,gDAOA,iDAKE,mGACD,QACH,iCACF,8B,0BAlCe,0CAaT,6CAEQ,wDAGC,kDAaT,4C,2BAvFR,SACE,wCACE,4CACE,S,gBACF,QAEA,4CACE,0CACE,kDASF,mCACA,2CACE,kDACE,U,iBACF,QACF,mCACF,iCAEA,8CACE,U,iBACF,QAEA,8CACE,2CACE,kDASF,mCACA,2CACE,kDAA2E,U,iBAEzE,QACJ,mCACF,iCAEA,8CACE,U,iBACF,QACF,+BACA,sCAEA,6DAqCF,8B,sBAxFM,gFAUI,+DAA8C,yEAO9C,yFAMJ,kGAUI,4DAA2C,sEAM8B,iDAO7E,kGAKW,gF,gFArFvB,oBAEE,6DAAY,QAAAzE,SAAQ,IAKpB,iCACE,gCAAI,S,gBAA0B,QAChC,wBAEA,kDAGA,8DAKA,qCACE,qCACE,gDACE,+CAA2C,U,iBAAyB,QACpE,4CACE,qDACF,+BACF,6BACF,2BACF,yBACA,mCACE,sCACE,yDA6FA,6CAME,wC,iBACA,wCAAM,U,iBAA4B,QACpC,6BACF,2BACF,yBACF,sB,oCApIE,oCAA4B,0BAKtB,0CAGgE,0CAKnE,2CAM8C,0CAEnB,0CAOX,oDAgGb,yDAA6C,0CAGT,+CAC9B,4C,EC/GP,MAAM0E,UAAwB,EAKnCvF,YACEsB,EACAhB,EACAD,EACAkB,EACAC,EACAC,EACAE,EACAxB,EACAC,EACAwB,EACQ4D,GAERC,MACEnE,EACAhB,EACAD,EACAkB,EACAC,EACAC,EACAiE,OACA/D,EACAxB,EACAC,EACAwB,GAbM,KAAA4D,aAAAA,EAdV,KAAAG,oBAAsBtE,CA6BtB,CAEMR,S,yCACJ,GAAIL,KAAKoF,uBAAyBpF,KAAK0B,cAAgB1B,KAAK2B,oBAM1D,YALA3B,KAAKH,qBAAqBY,UACxB,QACAT,KAAKF,YAAYY,EAAE,iBACnBV,KAAKF,YAAYY,EAAE,iDAMvB,GADAV,KAAKuB,WAAW8D,oBACXrF,KAAKuB,WAAW+D,MACnB,OAGF,GAAItF,KAAKsB,iBAMP,YALAtB,KAAKH,qBAAqBY,UACxB,QACA,KACAT,KAAKF,YAAYY,EAAE,6CAKIV,KAAKM,eAKhCN,KAAKkD,UACP,G,CAEUI,QACR2B,MAAM3B,QACNtD,KAAKH,qBAAqBY,UAAU,UAAW,KAAMT,KAAKF,YAAYY,EAAE,iBAC1E,CAEQJ,aACN,IAAIP,EAAqB,oBACrBC,KAAKoF,sBACPrF,EAAqB,iCACZC,KAAKuF,2BACdxF,EAAqB,2BAGvB,MAAMyF,EAAMxF,KAAKgF,aAAaS,KAAK,IAAiC,CAClEC,qBAAqB,EACrBzF,KAAM,CACJF,mBAAoBA,EACpBG,kBAAmB,cACnBC,WAAY,wBAIhB,GAAW,MAAPqF,EAIJ,OAAOA,EAAIG,iBACb,CAEIP,4BACF,MACkB,mBAAhBpF,KAAKyB,QACLzB,KAAK4B,qBAAuBf,EAAoBkD,aAEpD,CAEIwB,+BACF,MACkB,mBAAhBvF,KAAKyB,QACLzB,KAAK4B,qBAAuBf,EAAoBgB,gBAEpD,E,iCA1GWkD,GAAe,4H,mBAAfA,EAAe,0sDDrB5B,cACA,wCAwIA,e,MAnIG,oC,gZECI,MAAMa,EAGXpG,YAAoBC,GAAA,KAAAA,SAAAA,EAFpB,KAAAiC,aAAe,IAAI,KAAY,GAAI,cAEM,CAEzCrB,SACEL,KAAK0B,aAAamE,gBACb7F,KAAK0B,aAAa4D,OAIvBtF,KAAKP,SAASkB,MAAMX,KAAK0B,aAAanB,MACxC,CAEAuF,SACE9F,KAAKP,SAASkB,MAAM,KACtB,E,iCAhBWiF,GAA2B,a,mBAA3BA,EAA2B,u9BCPxC,cACA,+B,gBAME,iCACE,sCAAY,oCAAY,EAAAvF,QAAQ,IAC9B,sCACE,wCACE,U,uCACF,QACA,yCAGE,U,iBACA,6BACE,iDAAW,U,iBAAkC,QAC7C,+CAQA,gDACF,iCACF,+BACA,0CAGE,+CACE,4CAAM,U,iBAAyB,QACjC,iCACA,+CAAuD,iCAAS,EAAAyF,QAAQ,IACtE,4CAAM,U,iBAAqB,QAC7B,iCACF,+BACF,6BACF,2BACF,yBACF,uBACA,gB,MAvCE,kEAMQ,2FAKA,oFAEa,mDAKT,6CAWI,2CAGA,sC,ogBCnClB,0BACE,S,gBACF,S,MADE,gF,0BAeQ,qBAAiE,SAAY,S,yBAA7B,sBAAiB,sB,2BAG/D,qBAAyD,SAAY,S,yBAA7B,sBAAiB,sB,2BAF3D,SACE,+CACA,oDACF,iC,qBADwB,yC,wBAO9B,SACE,yEACA,gBACE,kEAA4C,QAEhD,0B,uBACA,SACE,yEACA,gBACE,sEAAgD,QAEpD,0B,uBACA,SACE,6IAEF,Q,uBACA,SACE,4HAEF,Q,uBACA,SACE,yKAEF,Q,uBACA,SACE,2IAEF,Q,uBACA,SACE,gMAEF,Q,uBACA,SACE,kJAEF,Q,uBACA,SACE,mJAEF,Q,uBACA,SACE,4MAEF,Q,uBACA,SACE,yKAEF,Q,uBACA,SACE,iQAGF,Q,uBAWE,gBACE,8FACF,Q,0BALF,SAGE,6CAGA,yEACA,gBACE,oEAA8C,QAElD,2B,sBAPS,6C,wBAQT,SACE,yEACA,gBACE,qEAA+C,QAChD,mBACH,Q,uBACA,SACE,yEACA,gBACE,oEAA8C,QAC/C,mBACH,Q,uBACA,SAQE,yEACA,gBACE,uEAAiD,QAClD,mBACH,Q,wBACA,SACE,oPAGF,Q,wBACA,SACE,4TAIF,Q,wBACA,SACE,+LAEF,Q,wBACA,SACE,uJAEF,Q,wBACA,SACE,yQAGF,Q,wBACA,SACE,oLAEF,Q,wBACA,SACE,4IAEF,Q,wBACA,SACE,yMAEF,Q,wBACA,SACE,mNAEF,Q,wBACA,SACE,yQAGF,Q,wBACA,SACE,oYAIF,Q,wBACA,SACE,uSAGF,Q,wBACA,SACE,0OAGF,Q,wBACA,SACE,+KAEF,Q,wBACA,SACE,kVAIA,gBAAM,2BAAe,QAAO,mBAC9B,Q,wBACA,SACE,yMAEF,Q,wBACA,SACE,qLAEF,Q,wBACA,SACE,yGACA,gBACG,uCAA2B,QAE9B,qDAAiC,gBAAM,wBAAY,QAAO,2CAC1D,gBAAM,0CAA8B,QAAQ,8BAC5C,iBAAM,yEAA4D,QAAO,gDAC/D,iBAAM,8BAAiB,QAAQ,2CAC3C,Q,wBACA,SACE,kRAGF,Q,wBACA,SACE,kKAEF,Q,wBACA,SACE,4SAGF,Q,wBACA,SACE,qNAEF,Q,wBACA,SACE,uNAEF,Q,wBACA,SACE,0MAEF,Q,wBACA,SACE,2OAGF,Q,wBACA,SACE,wNAGF,Q,wBACA,SACE,4NAGF,Q,wBACA,SACE,4PAGF,Q,wBACA,SACE,oGACF,Q,wBACA,SACE,6JAEF,Q,wBACA,SACE,yOAGF,Q,wBACA,SACE,0KAEF,Q,wBACA,SACE,2KAEF,Q,wBACA,SACE,uRAGF,Q,wBACA,SACE,wIAEF,Q,wBACA,SACE,uMAEF,Q,wBACA,SACE,yKAEF,Q,2BA7QF,0BACE,mDAMA,mDAMA,mDAIA,mDAIA,oDAIA,qDAIA,qDAIA,qDAIA,qDAIA,qDAIA,qDAIA,qDAKA,mBAOA,qDAWA,qDAMA,qDAMA,qDAaA,sDAKA,sDAMA,sDAIA,sDAIA,sDAKA,sDAIA,sDAIA,sDAIA,sDAIA,sDAKA,sDAMA,sDAKA,sDAKA,sDAIA,sDAOA,sDAIA,sDAIA,uDAUA,sDAKA,sDAIA,sDAKA,sDAIA,sDAIA,sDAIA,sDAKA,sDAKA,sDAKA,sDAKA,sDAGA,sDAIA,sDAKA,sDAIA,sDAIA,wDAKA,wDAIA,wDAIA,wDAIF,2B,qBA9QyB,6CACR,6EAMA,gDAMA,gDAIA,6CAIA,4CAIA,mDAIA,+CAIA,gDAIA,2CAIA,iDAIA,+CAIA,8CAaZ,8FAUY,+CAMA,8CAOZ,0IAYY,sDAKA,8CAMA,+CAIA,8CAIA,gDAKA,iDAIA,+CAIA,sDAIA,+CAIA,iDAKA,gDAMA,gDAKA,+CAKA,qDAIA,iDAOA,gDAIA,gDAIA,8CAUA,qDAKA,gDAIA,gDAKA,6CAIA,8CAIA,+CAIA,iDAKA,iDAKA,sDAKA,4CAKA,kDAGA,iDAIA,kDAKA,iDAIA,gDAIA,gDAKA,4CAIA,8CAIA,8C,yCC/QZ,MAAMC,GAaXvG,YACYM,EACAkG,EACAC,EACApG,EACAoB,EACFE,EACE6D,EACAkB,GAPA,KAAApG,YAAAA,EACA,KAAAkG,cAAAA,EACA,KAAAC,OAAAA,EACA,KAAApG,qBAAAA,EACA,KAAAoB,cAAAA,EACF,KAAAE,WAAAA,EACE,KAAA6D,aAAAA,EACA,KAAAkB,YAAAA,EAlBZ,KAAAzE,OAAqB,KAIrB,KAAA0E,SAAU,EACV,KAAAC,uBAAwB,EAEd,KAAAC,eAAyB,KACzB,KAAAC,gBAAyB,CAAC,QAWjC,CAEGpE,W,yCACJlC,KAAKuG,mBAELvG,KAAKoG,4BAA8B,EAAAI,EAAA,GACjCxG,KAAKiB,cAAckB,2BAA2B,uBAElD,G,CAEM9B,S,yCACJ,GAAIL,KAAKoG,sBAMP,YALApG,KAAKH,qBAAqBY,UACxB,QACA,KACAT,KAAKF,YAAYY,EAAE,2CAKvBV,KAAKmG,SAAU,EAEf,MAAMM,EAAWzG,KAAKgG,cAAcU,YAAY1G,KAAKyB,OAAQzB,KAAKqG,gBAClE,GAAiB,OAAbI,EAOF,OANAzG,KAAKH,qBAAqBY,UACxB,QACAT,KAAKF,YAAYY,EAAE,iBACnBV,KAAKF,YAAYY,EAAE,sBAErBV,KAAKmG,SAAU,GAIjB,MACMQ,EADSC,SAASC,eAAe,QAClBF,MACrB,KACY,MAATA,GAAkC,IAAjBA,EAAMG,QACF,MAArB9G,KAAK+G,cAA8C,KAAtB/G,KAAK+G,cAQnC,OANA/G,KAAKH,qBAAqBY,UACxB,QACAT,KAAKF,YAAYY,EAAE,iBACnBV,KAAKF,YAAYY,EAAE,oBAErBV,KAAKmG,SAAU,GAIjB,IAAIY,EAAe/G,KAAK+G,aACxB,GAAa,MAATJ,GAAiBA,EAAMG,OAAS,EAClC,IACE,MAAME,QAAgBhH,KAAKiH,gBAAgBN,EAAM,IAClC,MAAXK,IACFD,EAAeC,E,CAEjB,MAAOxG,GACPR,KAAKmB,WAAWuC,MAAMlD,E,CAI1B,GAAoB,MAAhBuG,GAAyC,KAAjBA,EAO1B,OANA/G,KAAKH,qBAAqBY,UACxB,QACAT,KAAKF,YAAYY,EAAE,iBACnBV,KAAKF,YAAYY,EAAE,oBAErBV,KAAKmG,SAAU,GAIjB,IACEnG,KAAKmD,YAAcnD,KAAKgG,cAAckB,OAAOT,EAAUM,EAAc/G,KAAKqG,gBAC1E,IAAI3C,QAAc1D,KAAKmD,YAEvB,GAAIO,aAAK,EAALA,EAAOyD,iBAAkB,CAC3B,MAAMzF,QAAqB1B,KAAKoH,kBAChC,GAAoB,MAAhB1F,EAEF,YADA1B,KAAKmG,SAAU,GAIjBzC,QAAc1D,KAAKqH,0BAA0B3F,EAAcqF,E,CAG7D,GAAa,MAATrD,EAGF,OAFA1D,KAAK0D,MAAMA,QACX1D,KAAKmG,SAAU,GAKjBnG,KAAKH,qBAAqBY,UAAU,UAAW,KAAMT,KAAKF,YAAYY,EAAE,kBACxEV,KAAKkG,YAAYoB,UAAS,GAC1BtH,KAAKiG,OAAOsB,SAASvH,KAAKsG,gB,CAC1B,MAAO9F,GACPR,KAAKmB,WAAWuC,MAAMlD,E,CAGxBR,KAAKmG,SAAU,CACjB,G,CAEAqB,4BACE,GAAmB,MAAfxH,KAAKyB,OACP,OAAO,KAGT,MAAMgG,EAAUzH,KAAK0H,sBAClBC,OAAO3H,KAAK4H,eACZC,QAAQC,GAAMA,EAAEC,KAAO/H,KAAKyB,SAC/B,OAAIgG,EAAQX,OAAS,EACZ9G,KAAKF,YAAYY,EAAE,kBAAmB+G,EAAQ,GAAG1F,MAEnD,IACT,CAEUwE,mBACRvG,KAAK0H,sBAAwB,CAC3B,CACEK,GAAI,KACJhG,KAAM,MAAQ/B,KAAKF,YAAYY,EAAE,UAAY,UAE5CV,KAAKgG,cAAc0B,uBAExB1H,KAAK4H,cAAgB,IAAI5H,KAAKgG,cAAcgC,sBAAsBC,MAAK,CAACC,EAAGC,IAC3D,MAAVD,EAAEnG,MAA0B,MAAVoG,EAAEpG,MACd,EAEI,MAAVmG,EAAEnG,MAA0B,MAAVoG,EAAEpG,KACf,EAEK,MAAVmG,EAAEnG,MAA0B,MAAVoG,EAAEpG,KACf,EAGF/B,KAAKF,YAAYsI,SACpBpI,KAAKF,YAAYsI,SAASC,QAAQH,EAAEnG,KAAMoG,EAAEpG,MAC5CmG,EAAEnG,KAAKuG,cAAcH,EAAEpG,OAE/B,CAEAwG,gBAAgBC,GACd,MAAMC,EAAgCD,EAAME,OAC5C1I,KAAK2I,aAAeF,EAAY9B,MAAMG,OAAS,EAAI2B,EAAY9B,MAAM,GAAK,IAC5E,CAEcjD,MAAMA,G,+CACZ,SAAU,CACdkF,YAAY,EACZC,gBAAgB,EAChBC,KAAM,QACNC,SAAU,6DACVC,MAAO,WACPC,WAAYvF,EAAME,QAClBsF,gBAAiB,CACfC,SAAU,QAEZC,UAAWpJ,KAAKF,YAAYY,EAAE,eAC9B2I,KAAMrJ,KAAKF,YAAYY,EAAE,mBACzB4I,mBAAmB,EACnBpJ,kBAAmBF,KAAKF,YAAYY,EAAE,MACtC6I,OAASC,IACPA,EAAQC,cAAc,mBAAmBC,SAAS,EAAG,EAAE,GAG7D,G,CAEQzC,gBAAgB0C,GACtB,MAAoB,kBAAhB3J,KAAKyB,OACAzB,KAAK4J,mBAAmBD,GAG1B,IAAIE,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,WAAWP,EAAM,SACxBK,EAAOG,OAAUC,IACf,GAAoB,gBAAhBpK,KAAKyB,QAA0C,cAAdkI,EAAK7E,KAAsB,CAC9D,MAEMuF,GAFS,IAAIC,WACAC,gBAAiBH,EAAI1B,OAAe8B,OAAQ,aAC/Cf,cAAc,OAC9B,OAAW,MAAPY,OACFP,EAAQO,EAAII,kBAGdV,G,CAIFD,EAASM,EAAI1B,OAAe8B,OAAO,EAErCR,EAAOU,QAAU,KACfX,GAAQ,CACT,GAEL,CAEQH,mBAAmBD,GACzB,OAAO,IAAI,GACRgB,UAAUhB,GACViB,MAAMC,GACEA,EAAIlB,KAAK,eAAemB,MAAM,YAEtCF,MACC,SAAiB5D,GACf,OAAOA,CACT,IACA,SAAexG,GACb,MAAO,EACT,GAEN,CAEM4G,kB,yCACJ,MAAM5B,EAAMxF,KAAKgF,aAAaS,KAAKG,EAA6B,CAC9DF,qBAAqB,IAGvB,OAAW,MAAPF,EACK,WAGIA,EAAIG,iBACnB,G,CAEM0B,0BACJ3F,EACAqF,G,yCAEA,MAAMgE,EAA4B/K,KAAKgG,cAAcU,YACnD,6BACA1G,KAAKqG,eACL3E,GAGF,OAAO1B,KAAKgG,cAAckB,OAAO6D,EAA2BhE,EAAc/G,KAAKqG,eACjF,G,oCAhQWN,IAAe,2F,oBAAfA,GAAe,4kD,gBDvB5B,iBACE,8BAAI,S,gBAAyB,QAC/B,sBACA,6CAGA,kCAAY,oCAAY,EAAA1F,QAAQ,IAC9B,mCACE,qCACE,uCACE,2CAAkB,U,iBAA8B,QAChD,4CAGE,wDAKA,oDACA,2DAIF,+BACF,6BACF,2BACF,yBACA,sDA+QA,mCACE,qCACE,uCACE,4CAAkB,U,iBAAkC,QACpD,sCACA,0CACE,+CAGE,4DAAS,gBAAoB,IAG7B,U,iBACF,QACA,U,iBACF,QACA,+CAME,mCAAU,EAAAkI,gBAAA,EAAuB,IANnC,QAUF,6BACF,2BACF,yBACA,mCACE,wCAA0B,U,iBAAsC,QAChE,2CAIE,8DAED,QACH,yBACA,uCAME,oC,iBACA,oCAAM,U,iBAAyB,QACjC,yBACF,uBACA,c,OA3VM,yCAEoB,+CAOA,sDAIhB,mCAAoB,oCAKE,kDACP,+DAQ6C,gCAkR5C,yDAOd,mDAEA,0EAEF,2GAUA,mDAMoB,uDAKxB,yCAA0B,oCAO5B,8DAA6C,gDAGT,+CAC9B,0C,6gBEzVV,SACE,yC,gBACE,S,gBACF,QACF,uB,qBAH2B,+CAAAyC,QACvB,kG,ECOG,MAAMC,EAUXzL,YACY0L,EACAC,GADA,KAAAD,oBAAAA,EACA,KAAAC,aAAAA,EAXH,KAAA9E,eAAyB,KAElC,KAAA+E,MAAO,CAUJ,CAEGlJ,W,yCACClC,KAAKkL,oBAAoBG,qBAG9BrL,KAAKsL,YACoB,MAAvBtL,KAAKqG,eACD,CACE2E,MAAO,kCACPO,YAAa,wCACbC,gBAAiBxL,KAAKkL,oBAAoBxI,IAAI1C,KAAKqG,gBAAgBtE,MAErE,CACEiJ,MAAO,8BACPO,YAAa,oCACbC,sBAAuBxL,KAAKmL,aAAaM,YAEjDzL,KAAKoL,MAAO,EACd,G,mCAhCWH,GAA2B,yB,mBAA3BA,EAA2B,4KDTxC,gCAKA,e,KALe,oB,iGEKR,MAAMS,EAIXlM,YAAYmM,GAHZ,KAAAC,GAAkB,KAIhB5L,KAAK4L,GAAKD,EAAME,aAClB,CAEA3J,WACElC,KAAK8L,QAAUC,MAAMC,KACnBhM,KAAK4L,GAAGK,iBAAiB,iDAE3BjM,KAAK8L,QAAQI,SAASC,IACpBA,EAAOC,iBACL,SACA,KACEpM,KAAK4L,GAAGS,UAAUC,IAAI,SAAS,IAEjC,GAGFH,EAAOC,iBACL,QACA,KACEpM,KAAK4L,GAAGS,UAAUE,OAAO,SAAS,IAEpC,EACD,GAEL,CAEmCC,QAAQhE,GACzC,MAAME,EAASF,EAAME,OACrB,IACEA,IAAW1I,KAAK4L,IACflD,EAAO2D,UAAUI,SAAS,aAC1B/D,EAAO2D,UAAUI,SAAS,kBAKzBzM,KAAK8L,QAAQhF,OAAS,EAAG,CAC3B,MAAMqF,EAASnM,KAAK8L,QAAQ,GAC5B,GAAqC,UAAjCK,EAAOO,QAAQC,cAA2B,CAC5C,MAAMC,EAAUT,EAChB,GAAoB,MAAhBS,EAAQ9H,MAA+C,aAA/B8H,EAAQ9H,KAAK6H,cAEvC,YADAC,EAAQC,O,CAIZV,EAAOW,O,CAEX,E,iCApDWpB,GAAe,e,mBAAfA,EAAe,gE,kCAAf,YAAe,G,sCCFrB,MAAeqB,G,mCCCf,MAAeC,G,4UCCf,MAAMC,EACXzN,YAAoB0N,GAAA,KAAAA,WAAAA,CAAyB,CAEvCC,kBAAkBC,G,yCACtB,aAAapN,KAAKkN,WAAWG,KAAK,OAAQ,kBAAmBD,GAAS,GAAM,EAC9E,G,CAEME,8BACJjH,EACA+G,G,yCAEA,aAAapN,KAAKkN,WAAWG,KAC3B,OACA,+CAAiDhH,EACjD+G,GACA,GACA,EAEJ,G,qDClBK,MAAM1F,EAAwB,CACnC,CAAEK,GAAI,gBAAiBhG,KAAM,oBAC7B,CAAEgG,GAAI,eAAgBhG,KAAM,mBAC5B,CAAEgG,GAAI,YAAahG,KAAM,gBACzB,CAAEgG,GAAI,cAAehG,KAAM,kBAC3B,CAAEgG,GAAI,aAAchG,KAAM,iBAC1B,CAAEgG,GAAI,cAAehG,KAAM,mBAC3B,CAAEgG,GAAI,cAAehG,KAAM,kBAC3B,CAAEgG,GAAI,YAAahG,KAAM,0BACzB,CAAEgG,GAAI,gBAAiBhG,KAAM,qBAGlBiG,EAAuB,CAClC,CAAED,GAAI,cAAehG,KAAM,kBAC3B,CAAEgG,GAAI,gBAAiBhG,KAAM,oBAC7B,CAAEgG,GAAI,kBAAmBhG,KAAM,mCAC/B,CAAEgG,GAAI,kBAAmBhG,KAAM,+BAC/B,CAAEgG,GAAI,eAAgBhG,KAAM,mBAC5B,CAAEgG,GAAI,cAAehG,KAAM,kBAC3B,CAAEgG,GAAI,YAAahG,KAAM,gBAGzB,CAAEgG,GAAI,YAAahG,KAAM,gBACzB,CAAEgG,GAAI,aAAchG,KAAM,iBAC1B,CAAEgG,GAAI,iBAAkBhG,KAAM,qBAC9B,CAAEgG,GAAI,YAAahG,KAAM,uBACzB,CAAEgG,GAAI,oBAAqBhG,KAAM,yBACjC,CAAEgG,GAAI,aAAchG,KAAM,iBAC1B,CAAEgG,GAAI,aAAchG,KAAM,kBAC1B,CAAEgG,GAAI,mBAAoBhG,KAAM,wBAChC,CAAEgG,GAAI,eAAgBhG,KAAM,oBAC5B,CAAEgG,GAAI,cAAehG,KAAM,kBAC3B,CAAEgG,GAAI,oBAAqBhG,KAAM,yBACjC,CAAEgG,GAAI,aAAchG,KAAM,iBAC1B,CAAEgG,GAAI,cAAehG,KAAM,kBAC3B,CAAEgG,GAAI,eAAgBhG,KAAM,mBAC5B,CAAEgG,GAAI,WAAYhG,KAAM,eACxB,CAAEgG,GAAI,eAAgBhG,KAAM,mBAC5B,CAAEgG,GAAI,SAAUhG,KAAM,oCACtB,CAAEgG,GAAI,aAAchG,KAAM,2BAC1B,CAAEgG,GAAI,aAAchG,KAAM,iBAC1B,CAAEgG,GAAI,cAAehG,KAAM,kBAC3B,CAAEgG,GAAI,WAAYhG,KAAM,eACxB,CAAEgG,GAAI,aAAchG,KAAM,iBAC1B,CAAEgG,GAAI,YAAahG,KAAM,4CACzB,CAAEgG,GAAI,UAAWhG,KAAM,cACvB,CAAEgG,GAAI,mBAAoBhG,KAAM,wBAChC,CAAEgG,GAAI,cAAehG,KAAM,kBAC3B,CAAEgG,GAAI,cAAehG,KAAM,kBAC3B,CAAEgG,GAAI,WAAYhG,KAAM,yBACxB,CAAEgG,GAAI,YAAahG,KAAM,0BACzB,CAAEgG,GAAI,aAAchG,KAAM,sBAC1B,CAAEgG,GAAI,eAAgBhG,KAAM,oCAC5B,CAAEgG,GAAI,eAAgBhG,KAAM,mBAC5B,CAAEgG,GAAI,oBAAqBhG,KAAM,wBACjC,CAAEgG,GAAI,UAAWhG,KAAM,cACvB,CAAEgG,GAAI,gBAAiBhG,KAAM,oBAC7B,CAAEgG,GAAI,eAAgBhG,KAAM,mBAC5B,CAAEgG,GAAI,gBAAiBhG,KAAM,oCAC7B,CAAEgG,GAAI,eAAgBhG,KAAM,mBAC5B,CAAEgG,GAAI,cAAehG,KAAM,kBAC3B,CAAEgG,GAAI,cAAehG,KAAM,kBAC3B,CAAEgG,GAAI,UAAWhG,KAAM,cACvB,CAAEgG,GAAI,cAAehG,KAAM,kBAC3B,CAAEgG,GAAI,YAAahG,KAAM,gBACzB,CAAEgG,GAAI,aAAchG,KAAM,kBClErB,MAAMwL,EAAb,cACE,KAAAC,SAAU,EACV,KAAAC,iBAAkB,EAElB,KAAAC,QAAwB,GACxB,KAAAC,QAAwB,GACxB,KAAAC,oBAA0C,GAC1C,KAAAC,YAAgC,GAChC,KAAAC,wBAA8C,EAChD,E,mJCIO,MAAeC,EAAtB,cACE,KAAA1H,eAAyB,KAEf,KAAAlF,WAAyB,IAAI,KAAkB,GAE/C,KAAA6M,aAAe,iBAEf,KAAAC,mBAAqB,CAC7B,WACA,YACA,aACA,cACA,OACA,OACA,YACA,WACA,SACA,cACA,YACA,MACA,UACA,WACA,YACA,aACA,UACA,aACA,MACA,MACA,KACA,QACA,SACA,IACA,SACA,UACA,cACA,QAGA,YAGQ,KAAAC,mBAAqB,CAC7B,OACA,OACA,YACA,WACA,aACA,QACA,SACA,KACA,SACA,UACA,QACA,iBACA,SACA,OACA,UACA,WACA,MACA,cACA,aACA,YACA,QACA,YACA,SACA,WAGA,MACA,gBAGQ,KAAAC,gBAAkB,CAC1B,OACA,QACA,UACA,WACA,OACA,cACA,YACA,WACA,YACA,WACA,OAGA,aAGQ,KAAAC,cAA0B,CAClC,MACA,aACA,YACA,OACA,OACA,WACA,YACA,SACA,UACA,YACA,OACA,MACA,UACA,WACA,OACA,WACA,MAGA,MACA,WAGQ,KAAAC,gBAAkB,CAC1BC,SAAU,QACVC,gBAAgB,EA+UpB,CA5UgBC,mBACZ,OAA8B,MAAvBxO,KAAKqG,cACd,CAEUoI,SAASxO,GACjB,MACMyO,GADS,IAAIpE,WACAC,gBAAgBtK,EAAM,mBACzC,OAAc,MAAPyO,GAAmD,MAApCA,EAAIjF,cAAc,eAAyBiF,EAAM,IACzE,CAEUC,SAAS1O,EAAc2O,EAAiBC,EAAe,CAAC,GAChE,MAAMC,EAAyCC,OAAOC,OACpD,CAAEJ,OAAQA,GACV5O,KAAKqO,gBACLQ,GAEF5O,EAAOD,KAAKiP,aAAahP,GAAMiP,KAAK,MAAMC,OAC1C,MAAM3E,EAAS,QAAWvK,EAAM6O,GAQhC,OAPqB,MAAjBtE,EAAO4E,QAAkB5E,EAAO4E,OAAOtI,OAAS,GAClD0D,EAAO4E,OAAOlD,SAAS1L,IACR,MAATA,EAAE6O,KACJrP,KAAKmB,WAAWmO,QAAQ,qBAAuB9O,EAAE6O,IAAM,KAAO7O,EAAEoD,Q,IAI/D4G,EAAOvK,MAAQuK,EAAOvK,KAAK6G,OAAS,EAAI0D,EAAOvK,KAAO,IAC/D,CAEUsP,kBAAkBC,GAC1B,GAAIxP,KAAKyP,mBAAmBD,GAC1B,OAAO,KAET,MAAME,EAAY1P,KAAK2O,SAASa,GAAS,GACzC,OAAiB,MAAbE,GAAqBA,EAAU5I,OAAS,GAAK4I,EAAU,GAAG5I,OAAS,EAC9D4I,EAAU,GAEZ,IACT,CAEUC,aAAaC,GACrB,GAAW,MAAPA,EACF,OAAO,KAGT,GAAmB,iBAARA,EAAkB,CAC3B,MAAMC,EAAW,IAAI,IAErB,OADAA,EAASD,IAAM5P,KAAK8P,OAAOF,GACvB5P,KAAKyP,mBAAmBI,EAASD,KAC5B,MAETC,EAASE,MAAQ,KACV,CAACF,G,CAGV,GAAID,EAAI9I,OAAS,EAAG,CAClB,MAAMkJ,EAA4B,GAUlC,OATAJ,EAAI1D,SAAS+D,IACX,MAAMJ,EAAW,IAAI,IACrBA,EAASD,IAAM5P,KAAK8P,OAAOG,GACvBjQ,KAAKyP,mBAAmBI,EAASD,OAGrCC,EAASE,MAAQ,KACjBC,EAAUE,KAAKL,GAAS,IAEE,IAArBG,EAAUlJ,OAAe,KAAOkJ,C,CAGzC,OAAO,IACT,CAEUF,OAAOF,GACf,OAAW,MAAPA,EACK,OAGmB,KAD5BA,EAAMA,EAAIT,QACFgB,QAAQ,QAAiBP,EAAIO,QAAQ,MAAQ,IACnDP,EAAM,UAAYA,GAEhBA,EAAI9I,OAAS,IACR8I,EAAIQ,UAAU,EAAG,KAEnBR,EACT,CAEUS,YAAYC,GACpB,MAAMC,EAAW,gBAAkBD,GACnC,OAAItQ,KAAKyP,mBAAmBc,GACnB,KAEFA,EAASC,WAAW,QAAUD,EAASE,QAAQ,OAAQ,IAAMF,CACtE,CAEUd,mBAAmBiB,GAC3B,OAAO,uBAAyBA,EAClC,CAEUC,kBAAkBD,EAAaE,EAAuB,MAC9D,OAAI5Q,KAAKyP,mBAAmBiB,GACnBE,EAEFF,CACT,CAEUzB,aAAayB,GACrB,OAAOA,EAAIG,MAAM7Q,KAAKgO,aACxB,CAGU8C,aAAaC,GACrB,GAAI/Q,KAAKyP,mBAAmBsB,GAC1B,OAAO,KAIT,IAAIC,EAAK,IAAIC,OAAO,MACpB,OAAyB,MAArBF,EAAQhB,MAAMiB,GACT,OAMP,sGAAsGE,KACpGH,GAGK,cAITC,EAAK,IAAIC,OAAO,UACS,MAArBF,EAAQhB,MAAMiB,GACT,QAITA,EAAK,IAAIC,OACP,iFAEuB,MAArBF,EAAQhB,MAAMiB,GACT,YAITA,EAAK,IAAIC,OAAO,OACS,MAArBF,EAAQhB,MAAMiB,GACT,eAITA,EAAK,IAAIC,OAAO,YACS,MAArBF,EAAQhB,MAAMiB,GACT,eAITA,EAAK,IAAIC,OAAO,yBACS,MAArBF,EAAQhB,MAAMiB,GACT,OAITA,EAAK,IAAIC,OAAO,qCACS,MAArBF,EAAQhB,MAAMiB,GACT,OAGF,UACT,CAEUG,kBAAkBC,EAAoBC,GAC9C,IAAKrR,KAAKyP,mBAAmB4B,GAAa,CAExC,MAAMC,GADND,EAAaA,EAAWZ,QAAQ,MAAO,KACdI,MAAM,KAC/B,GAAqB,IAAjBS,EAAMxK,OAAc,CACtB,IAAIyK,EAAgB,KAChBC,EAAe,KAUnB,GATwB,IAApBF,EAAM,GAAGxK,QAAoC,IAApBwK,EAAM,GAAGxK,SACpCyK,EAAQD,EAAM,GACO,IAAjBC,EAAMzK,QAA6B,MAAbyK,EAAM,KAC9BA,EAAQA,EAAME,OAAO,EAAG,KAGJ,IAApBH,EAAM,GAAGxK,QAAoC,IAApBwK,EAAM,GAAGxK,SACpC0K,EAAwB,IAAjBD,EAAMzK,OAAe,KAAOwK,EAAM,GAAKA,EAAM,IAEzC,MAATC,GAAyB,MAARC,EAGnB,OAFAJ,EAAOM,KAAKC,SAAWJ,EACvBH,EAAOM,KAAKE,QAAUJ,GACf,C,EAIb,OAAO,CACT,CAEUK,yBAAyBrH,GACjCA,EAAOoD,oBAAoB1B,SAAS4F,GAAMtH,EAAOsD,wBAAwBoC,KAAK4B,KAC9EtH,EAAOqD,YAAcrD,EAAOmD,QAAQoE,KAAKC,IACvC,MAAMC,EAAa,IAAI,IAEvB,OADAA,EAAWlQ,KAAOiQ,EAAEjQ,KACbkQ,CAAU,IAEnBzH,EAAOoD,oBAAsB,GAC7BpD,EAAOmD,QAAU,EACnB,CAEUuE,yBAAyBC,EAAmBC,GACpD,MAAMC,EAAMrS,KAAKsS,4BAA4BH,EAAUC,GACvD,OAAsB,IAAfC,EAAIvL,OAAe,KAAOuL,EAAI,EACvC,CAEUC,4BAA4BH,EAAmBC,GACvD,OAAOrG,MAAMC,KAAKmG,EAASlG,iBAAiBmG,IAAQvK,QAAQ+D,GAAOA,EAAG2G,aAAeJ,GACvF,CAEUK,kBACR,MAAMpB,EAAS,IAAI,IAMnB,OALAA,EAAOqB,UAAW,EAClBrB,EAAOsB,MAAQ,GACftB,EAAOuB,OAAS,GAChBvB,EAAOwB,MAAQ,IAAI,IACnBxB,EAAOtM,KAAO,UACPsM,CACT,CAEUyB,cAAczB,GACR,MAAVA,IAGAA,EAAOtM,OAAS,YAClBsM,EAAOwB,MAAQ,MAEb5S,KAAKyP,mBAAmB2B,EAAOrP,QACjCqP,EAAOrP,KAAO,MAEZ/B,KAAKyP,mBAAmB2B,EAAOsB,OACjCtB,EAAOsB,MAAQ,KAEftB,EAAOsB,MAAQtB,EAAOsB,MAAMvD,OAET,MAAjBiC,EAAOuB,QAA2C,IAAzBvB,EAAOuB,OAAO7L,SACzCsK,EAAOuB,OAAS,MAEpB,CAEUG,WACR1B,EACA2B,EACAxS,EACAuE,EAAkB,UAElB,IAAI9E,KAAKyP,mBAAmBlP,GAM5B,GAHIP,KAAKyP,mBAAmBsD,KAC1BA,EAAM,IAEJxS,EAAMuG,OAAS,KAAOvG,EAAM4O,OAAO6D,OAAOhT,KAAKgO,eAAiB,EAC9C,MAAhBoD,EAAOsB,QACTtB,EAAOsB,MAAQ,IAEjBtB,EAAOsB,OAASK,EAAM,KAAO/S,KAAKiP,aAAa1O,GAAO2O,KAAK,MAAQ,SAC9D,CACgB,MAAjBkC,EAAOuB,SACTvB,EAAOuB,OAAS,IAElB,MAAMM,EAAQ,IAAI,IAClBA,EAAMnO,KAAOA,EACbmO,EAAMlR,KAAOgR,EACbE,EAAM1S,MAAQA,EACd6Q,EAAOuB,OAAOzC,KAAK+C,E,CAEvB,CAEUC,cAAc1I,EAAsB2I,GAC5C,IAAIC,EAAc5I,EAAOmD,QAAQ7G,OACjC,MAAMuM,GAAarT,KAAKyP,mBAAmB0D,GAE3CA,EAAaA,EAAW1C,QAAQ,KAAM,KACtC,IAAI6C,EAAYD,EAEhB,GAAIA,EACF,IAAK,IAAIE,EAAI,EAAGA,EAAI/I,EAAOmD,QAAQ7G,OAAQyM,IACzC,GAAI/I,EAAOmD,QAAQ4F,GAAGxR,OAASoR,EAAY,CACzCG,GAAY,EACZF,EAAcG,EACd,K,CAKN,GAAID,EAAW,CACb,MAAMtB,EAAI,IAAI,IACdA,EAAEjQ,KAAOoR,EACT3I,EAAOmD,QAAQuC,KAAK8B,E,CAElBqB,GACF7I,EAAOoD,oBAAoBsC,KAAK,CAAC1F,EAAOkD,QAAQ5G,OAAQsM,GAE5D,CAEUI,sBAAsBpC,GAE5BA,EAAOtM,OAAS,WAChB9E,KAAKyP,mBAAmB2B,EAAOwB,MAAMa,WACrCzT,KAAKyP,mBAAmB2B,EAAOwB,MAAMc,YACf,MAArBtC,EAAOwB,MAAMe,MAA6C,IAA7BvC,EAAOwB,MAAMe,KAAK7M,UAEhDsK,EAAOtM,KAAO,eACdsM,EAAOwC,WAAa,IAAI,IACxBxC,EAAOwC,WAAW9O,KAAO,YAE7B,CAEU+O,gBAAgBzC,EAAoB0C,GAC5C,GAAI9T,KAAKyP,mBAAmBqE,GAC1B,OAGF,MAAMC,EAAYD,EAASjD,MAAM,KAC7BkD,EAAUjN,OAAS,IACrBsK,EAAO4C,SAASC,UAAYjU,KAAK2Q,kBAAkBoD,EAAU,KAEtC,IAArBA,EAAUjN,OACZsK,EAAO4C,SAASE,SAAWlU,KAAK2Q,kBAAkBoD,EAAU,IACnDA,EAAUjN,QAAU,IAC7BsK,EAAO4C,SAASG,WAAanU,KAAK2Q,kBAAkBoD,EAAU,IAC9D3C,EAAO4C,SAASE,SAAWH,EAAUK,MAAM,EAAGL,EAAUjN,QAAQoI,KAAK,KAEzE,EC7cK,MAAMmF,UAA2BtG,EACtCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,GAAIA,EAAMuG,OAAS,EACjB,OAGF,MAAMsK,EAASpR,KAAKwS,kBAIpB,GAHApB,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMA,EAAMuG,OAAS,IAC3DsK,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAM,GAAI,MAE3CA,EAAMuG,OAAS,GAAKvG,EAAMuG,OAAS,GAAM,EAC3C,IAAK,IAAIyM,EAAI,EAAGA,EAAIhT,EAAMuG,OAAS,EAAGyM,GAAK,EAAG,CAC5C,MAAMgB,EAAchU,EAAMgT,EAAI,GACxBN,EAAgB1S,EAAMgT,EAAI,GAChC,GAAIvT,KAAKyP,mBAAmB8E,IAAQvU,KAAKyP,mBAAmBwD,GAC1D,SAGF,MAAMuB,EAAavB,EAAMtG,cACI,MAAzByE,EAAOwB,MAAMc,UAAoB1T,KAAKiO,mBAAmBkC,QAAQqE,IAAe,EAClFpD,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkB4D,GAEtB,MAAzBnD,EAAOwB,MAAMa,UACbzT,KAAKkO,mBAAmBiC,QAAQqE,IAAe,EAE/CpD,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkB4D,IAEzB,MAArBnD,EAAOwB,MAAMe,MAA6C,IAA7BvC,EAAOwB,MAAMe,KAAK7M,SAChD9G,KAAKoO,cAAc+B,QAAQqE,IAAe,EAE1CpD,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAa4E,GAEtCvU,KAAK8S,WAAW1B,EAAQ6B,EAAOsB,E,CAKrCvU,KAAKwT,sBAAsBpC,GAC3BpR,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,ECpDK,MAAMiK,UAAyB1G,EACpCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,MAAM6Q,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAMwB,MAC3CqP,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAMmU,KAC5CtD,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMmT,UACrDtC,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAMqS,OACrD5S,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,ECnBK,MAAMmK,UAA0B5G,EACrCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUmN,KAAKN,MAAMrU,GAC3B,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGH,MAAlB/C,EAAQoN,QACVpN,EAAQoN,OAAO3I,SAAS3L,IACtB,MAAM6Q,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAMuU,UAC3C1D,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMwU,MAC5C3D,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAM+P,KAC5Cc,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMyU,KACrD5D,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAM0U,WACrDjV,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAIV,MAAjB3J,EAAQiL,OACVjL,EAAQiL,MAAMxG,SAAS3L,IACrB,MAAM6Q,EAASpR,KAAKwS,kBACpBpB,EAAOtM,KAAO,eACdsM,EAAOwC,WAAW9O,KAAO,YACzBsM,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAM2U,OAC3C9D,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAM8I,MAC5CrJ,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAIV,MAAjB3J,EAAQ0N,OACV1N,EAAQ0N,MAAMjJ,SAAS3L,IACrB,MAAM6Q,EAASpR,KAAKwS,kBACpBpB,EAAOtM,KAAO,SACdsM,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAMuU,UAC3C1D,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMwU,MAC5C3D,EAAOM,KAAK0D,eAAiBpV,KAAK2Q,kBAAkBpQ,EAAM8U,YAC1DjE,EAAOM,KAAK4D,OAAStV,KAAK2Q,kBAAkBpQ,EAAMgV,YAClDnE,EAAOM,KAAK8D,KAAOxV,KAAK2Q,kBAAkBpQ,EAAMkV,KAChDrE,EAAOM,KAAKgE,MAAQ1V,KAAK8Q,aAAaM,EAAOM,KAAK4D,QACtB,MAAxB/U,EAAMoV,iBAC0B,MAA9BpV,EAAMoV,eAAepE,QACvBH,EAAOM,KAAKC,SAAWpR,EAAMoV,eAAepE,MAAQ,IAErB,MAA7BhR,EAAMoV,eAAenE,OACvBJ,EAAOM,KAAKE,QAAUrR,EAAMoV,eAAenE,KAAO,KAGtDxR,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAI/B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,EC7DK,MAAMoL,UAAyB7H,EACpCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,MAAM6Q,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO/B,KAAK2Q,kBACjBpQ,EAAMwB,KACN/B,KAAK2Q,kBAAkB3Q,KAAKqQ,YAAY9P,EAAMsV,SAAU,OAE1DzE,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAMsV,SAC5CzE,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMmT,UAGnD1T,KAAKyP,mBAAmBlP,EAAMkT,YAC7BzT,KAAKyP,mBAAmBlP,EAAMuV,oBAE/B1E,EAAOwB,MAAMa,SAAWlT,EAAMuV,oBAE9B1E,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAMkT,UACrDrC,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMuV,qBAG9C9V,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,E,eCzBK,MAAMuL,UAA6BhI,EACxCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,GAAIP,KAAKwO,eAAiBxO,KAAKyP,mBAAmBlP,EAAMsN,aAAc,CAC/CtN,EAAMsN,YAAuBgD,MAAM,KAC5C3E,SAAS8J,IACnB,IAAIC,GAAgB,EAChBC,EAAkB1L,EAAOqD,YAAY/G,OAEzC,IAAK,IAAIyM,EAAI,EAAGA,EAAI/I,EAAOqD,YAAY/G,OAAQyM,IAC7C,GAAI/I,EAAOqD,YAAY0F,GAAGxR,OAASiU,EAAK,CACtCC,GAAgB,EAChBC,EAAkB3C,EAClB,K,CAIJ,GAAI0C,EAAe,CACjB,MAAMhE,EAAa,IAAI,IACvBA,EAAWlQ,KAAOiU,EAClBxL,EAAOqD,YAAYqC,KAAK+B,E,CAG1BzH,EAAOsD,wBAAwBoC,KAAK,CAAC1F,EAAOkD,QAAQ5G,OAAQoP,GAAiB,G,MAErElW,KAAKwO,cACfxO,KAAKkT,cAAc1I,EAAQjK,EAAM4V,QAGnC,MAAM/E,EAAS,IAAI,IACnBA,EAAOqB,UACJzS,KAAKwO,cAAgE,MAAhDxO,KAAK2Q,kBAAkBpQ,EAAMkS,SAAU,KAC/DrB,EAAOtM,KAAO,UACdsM,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMmS,OAC5CtB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAMwB,KAAM,MACjD,IACEqP,EAAOgF,SAAWC,SAChBrW,KAAK2Q,kBAAkBpQ,EAAM6V,SAAU,qBACvC,G,CAEF,MAAO5V,GAEP8V,QAAQ5S,MAAM,iCAAkClD,GAChD4Q,EAAOgF,SAAW,Q,CAGpB,IAAKpW,KAAKyP,mBAAmBlP,EAAMoS,QAAS,CAC1C,MAAMA,EAAS3S,KAAKiP,aAAa1O,EAAMoS,QACvC,IAAK,IAAIY,EAAI,EAAGA,EAAIZ,EAAO7L,OAAQyM,IAAK,CACtC,GAAIvT,KAAKyP,mBAAmBkD,EAAOY,IACjC,SAGF,MAAMgD,EAAgB5D,EAAOY,GAAGiD,YAAY,MAC5C,IAAuB,IAAnBD,EACF,SAGmB,MAAjBnF,EAAOuB,SACTvB,EAAOuB,OAAS,IAGlB,MAAMM,EAAQ,IAAI,IAClBA,EAAMlR,KAAO4Q,EAAOY,GAAG9B,OAAO,EAAG8E,GACjCtD,EAAM1S,MAAQ,KACd0S,EAAMnO,KAAO,SACT6N,EAAOY,GAAGzM,OAASyP,EAAgB,IACrCtD,EAAM1S,MAAQoS,EAAOY,GAAG9B,OAAO8E,EAAgB,IAEjDnF,EAAOuB,OAAOzC,KAAK+C,E,EAKvB,OADgC,MAAd1S,EAAMuE,KAAevE,EAAMuE,KAAK6H,cAAgB,MAEhE,IAAK,OACHyE,EAAOtM,KAAO,eACdsM,EAAOwC,WAAa,IAAI,IACxBxC,EAAOwC,WAAW9O,KAAO,YACzB,MACF,QAAS,CACPsM,EAAOtM,KAAO,UACdsM,EAAOwB,MAAQ,IAAI,IACnBxB,EAAOwB,MAAM6D,KAAOzW,KAAK2Q,kBAAkBpQ,EAAMmW,YAAcnW,EAAMkW,MACrErF,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAMoW,gBAAkBpW,EAAMkT,UAC7ErC,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMqW,gBAAkBrW,EAAMmT,UAC7E,MAAMC,EAAO3T,KAAKuP,kBAAkBhP,EAAMsW,WAAatW,EAAMqP,KAC7DwB,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAagE,GACtC,K,EAIJnJ,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,E,sVC3GK,MAAMsM,UAA8B/I,EAIzCvO,YAAsBsB,EAAwChB,GAC5DmF,QADoB,KAAAnE,cAAAA,EAAwC,KAAAhB,YAAAA,CAE9D,CAEMwU,MAAMrU,G,+CAGV,OAFAD,KAAKwK,OAAS,IAAI+C,EAClBvN,KAAKyH,QAAUmN,KAAKN,MAAMrU,GACN,MAAhBD,KAAKyH,SAAyC,MAAtBzH,KAAKyH,QAAQsP,OACvB,QAAZ,EAAA/W,KAAKyH,eAAO,eAAEuP,oBAChBhX,KAAKwK,OAAOgD,SAAU,EACtBxN,KAAKwK,OAAOiD,iBAAkB,EAC9BzN,KAAKwK,OAAOyM,aAAejX,KAAKF,YAAYY,EAAE,0BACvCV,KAAKwK,SAGdxK,KAAKwK,OAAOgD,SAAU,EACfxN,KAAKwK,SAGVxK,KAAKyH,QAAQyP,gBACTlX,KAAKmX,iBAEXnX,KAAKoX,iBAGApX,KAAKwK,O,IAGA2M,iB,yCACZ,GAAiD,MAA7CnX,KAAKyH,QAAQ4P,6BAAsC,CACrD,MAAMC,QAAetX,KAAKc,cAAcyW,UAAUvX,KAAKqG,gBACjDmR,EAAmB,IAAI,IAAUxX,KAAKyH,QAAQ4P,8BAKpD,GAAgC,cAJMrX,KAAKc,cAAc2W,cACvDD,EACAF,IAKA,OAFAtX,KAAKwK,OAAOgD,SAAU,OACtBxN,KAAKwK,OAAOyM,aAAejX,KAAKF,YAAYY,EAAE,qB,CAKlD,MAAMgX,EAAe,IAAIC,IAEzB,GAAI3X,KAAKwO,cAA4C,MAA5BxO,KAAKyH,QAAQoG,YACpC,IAAK,MAAM+J,KAAK5X,KAAKyH,QAAQoG,YAAyC,CACpE,MAAMoE,EAAa,aAAgC2F,GACnD,GAAkB,MAAd3F,EAAoB,CACtBA,EAAWlK,GAAK,KAChBkK,EAAW5L,eAAiBrG,KAAKqG,eACjC,MAAMwR,QAAa5F,EAAW6F,UAC9BJ,EAAaK,IAAIH,EAAE7P,GAAI/H,KAAKwK,OAAOqD,YAAY/G,QAC/C9G,KAAKwK,OAAOqD,YAAYqC,KAAK2H,E,OAG5B,IAAK7X,KAAKwO,cAAwC,MAAxBxO,KAAKyH,QAAQkG,QAC5C,IAAK,MAAMqE,KAAKhS,KAAKyH,QAAQkG,QAAiC,CAC5D,MAAMwI,EAAS,aAA4BnE,GAC3C,GAAc,MAAVmE,EAAgB,CAClBA,EAAOpO,GAAK,KACZ,MAAM8P,QAAa1B,EAAO2B,UAC1BJ,EAAaK,IAAI/F,EAAEjK,GAAI/H,KAAKwK,OAAOmD,QAAQ7G,QAC3C9G,KAAKwK,OAAOmD,QAAQuC,KAAK2H,E,EAK/B,IAAK,MAAMD,KAAK5X,KAAKyH,QAAQsP,MAA+B,CAC1D,MAAM3F,EAAS,aAA4BwG,GAE3CxG,EAAOrJ,GAAK,KACZqJ,EAAO4G,SAAW,KAClB5G,EAAO/K,eAAiBrG,KAAKqG,eAC7B+K,EAAO6G,cAAgB,KAGO,MAA1B7G,EAAO8G,iBAA2B9G,EAAO8G,gBAAgBpR,OAAS,IACpEsK,EAAO8G,gBAAkB9G,EAAO8G,gBAAgB9D,MAAM,EAAG,KAGtDpU,KAAKwO,cAA8B,MAAdoJ,EAAEI,UAAoBN,EAAaS,IAAIP,EAAEI,UACjEhY,KAAKwK,OAAOoD,oBAAoBsC,KAAK,CACnClQ,KAAKwK,OAAOkD,QAAQ5G,OACpB4Q,EAAahV,IAAIkV,EAAEI,YAEZhY,KAAKwO,cAAmC,MAAnBoJ,EAAEK,eAChCL,EAAEK,cAAc/L,SAASkM,IACnBV,EAAaS,IAAIC,IACnBpY,KAAKwK,OAAOsD,wBAAwBoC,KAAK,CACvClQ,KAAKwK,OAAOkD,QAAQ5G,OACpB4Q,EAAahV,IAAI0V,I,IAMzB,MAAMP,QAAazG,EAAO0G,UAC1B9X,KAAK6S,cAAcgF,GACnB7X,KAAKwK,OAAOkD,QAAQwC,KAAK2H,E,CAG3B7X,KAAKwK,OAAOgD,SAAU,CACxB,G,CAEQ4J,iBACN,MAAMM,EAAe,IAAIC,IACrB3X,KAAKwO,cAA4C,MAA5BxO,KAAKyH,QAAQoG,YACpC7N,KAAKyH,QAAQoG,YAAY3B,SAAS0L,IAChC,MAAM3F,EAAa,WAA8B2F,GAC/B,MAAd3F,IACFA,EAAWlK,GAAK,KAChBkK,EAAW5L,eAAiB,KAC5BqR,EAAaK,IAAIH,EAAE7P,GAAI/H,KAAKwK,OAAOqD,YAAY/G,QAC/C9G,KAAKwK,OAAOqD,YAAYqC,KAAK+B,G,IAGvBjS,KAAKwO,cAAwC,MAAxBxO,KAAKyH,QAAQkG,SAC5C3N,KAAKyH,QAAQkG,QAAQzB,SAAS8F,IAC5B,MAAMmE,EAAS,WAA0BnE,GAC3B,MAAVmE,IACFA,EAAOpO,GAAK,KACZ2P,EAAaK,IAAI/F,EAAEjK,GAAI/H,KAAKwK,OAAOmD,QAAQ7G,QAC3C9G,KAAKwK,OAAOmD,QAAQuC,KAAKiG,G,IAK/BnW,KAAKyH,QAAQsP,MAAM7K,SAAS0L,IAC1B,MAAMxG,EAAS,WAA0BwG,GAEzCxG,EAAOrJ,GAAK,KACZqJ,EAAO4G,SAAW,KAClB5G,EAAO/K,eAAiB,KACxB+K,EAAO6G,cAAgB,KAGO,MAA1B7G,EAAO8G,iBAA2B9G,EAAO8G,gBAAgBpR,OAAS,IACpEsK,EAAO8G,gBAAkB9G,EAAO8G,gBAAgB9D,MAAM,EAAG,KAGtDpU,KAAKwO,cAA8B,MAAdoJ,EAAEI,UAAoBN,EAAaS,IAAIP,EAAEI,UACjEhY,KAAKwK,OAAOoD,oBAAoBsC,KAAK,CACnClQ,KAAKwK,OAAOkD,QAAQ5G,OACpB4Q,EAAahV,IAAIkV,EAAEI,YAEZhY,KAAKwO,cAAmC,MAAnBoJ,EAAEK,eAChCL,EAAEK,cAAc/L,SAASkM,IACnBV,EAAaS,IAAIC,IACnBpY,KAAKwK,OAAOsD,wBAAwBoC,KAAK,CACvClQ,KAAKwK,OAAOkD,QAAQ5G,OACpB4Q,EAAahV,IAAI0V,I,IAMzBpY,KAAK6S,cAAczB,GACnBpR,KAAKwK,OAAOkD,QAAQwC,KAAKkB,EAAO,IAGlCpR,KAAKwK,OAAOgD,SAAU,CACxB,E,gUC5JK,MAAM6K,UAA2CvB,EAGtDtX,YAAYsB,EAA8BhB,EAAkC4T,GAC1EzO,MAAMnE,EAAehB,GADqD,KAAA4T,SAAAA,CAE5E,CAEMY,MAAMrU,G,mGACV,MAAMuK,EAAS,IAAI+C,EACb+K,EAAa1D,KAAKN,MAAMrU,GAC9B,GAAID,KAAKuY,gBAAgBD,GAEvB,OADA9N,EAAOgD,SAAU,EACVhD,EAGT,WAAYxK,KAAKwY,cAAcF,IAG7B,OAFA9N,EAAOgD,SAAU,EACjBhD,EAAOyM,aAAejX,KAAKF,YAAYY,EAAE,uBAClC8J,EAGT,MAAMiO,EAAU,IAAI,IAAUH,EAAWrY,MACnCyY,QAAsB1Y,KAAKc,cAAc2W,cAAcgB,EAASzY,KAAK+S,KAC3E,aAAa,EAAMuB,MAAK,UAACoE,EAC3B,G,CAEcF,cAAcG,G,yCAC1B3Y,KAAK+S,UAAY/S,KAAKc,cAAc8X,WAClC5Y,KAAK0T,SACLiF,EAAKE,KACL,mBACA,IAAI,IAAUF,EAAKG,gBAGrB,MAAMtB,EAAmB,IAAI,IAAUmB,EAAKtB,8BAM5C,OAAgC,cAJMrX,KAAKc,cAAc2W,cACvDD,EACAxX,KAAK+S,KAMT,G,CAEQwF,gBAAgBI,GACtB,QACGA,GACAA,EAAKzB,WACLyB,EAAK3B,mBACL2B,EAAKE,MACLF,EAAKG,eACwB,iBAAvBH,EAAKG,eACI,MAAhBH,EAAKI,SACoB,MAAzB,KAAQJ,EAAKI,UACZJ,EAAKtB,8BACLsB,EAAK1Y,KAEV,EC3EK,MAAM+Y,UAA8BjL,EACzCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,GAAuB,SAAnBA,EAAM0Y,SACR,OAEF,MAAM7H,EAASpR,KAAKwS,kBACpBpB,EAAOqB,SAAyB,MAAdlS,EAAM2Y,IACxB9H,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAMwB,MAC3CqP,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAM4Y,OACrB,SAAnB5Y,EAAM0Y,WACR7H,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAM+P,KAC5Cc,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMmT,UACrDtC,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAMkT,WAEvDzT,KAAKwT,sBAAsBpC,GAC3BpR,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,EC7BK,MAAM4O,UAAwBrL,EACnCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACK,SAAhBA,EAAM2U,QACR3U,EAAM2U,MAAQ,MAEhB,MAAM9D,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO/B,KAAK2Q,kBACjBpQ,EAAM2U,MACNlV,KAAK2Q,kBAAkB3Q,KAAKqQ,YAAY9P,EAAM8Y,QAAS,OAEzDjI,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAM8Y,QAC5CjI,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMmT,UAEjD1T,KAAKyP,mBAAmBlP,EAAM+Y,SAAWtZ,KAAKyP,mBAAmBlP,EAAMkT,UACzErC,EAAOwB,MAAMa,SAAWlT,EAAMkT,UAE9BrC,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAM+Y,OACrDlI,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMkT,WAG9CzT,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,EClCF,MAAM+O,EAAgB,CAAC,YAAa,cAAe,QAAS,WAAY,WAAY,MAAO,MAEpF,MAAMC,UAA6BzL,EACxCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACfP,KAAKkT,cAAc1I,EAAQxK,KAAK2Q,kBAAkBpQ,EAAM,iBAExD,MAAM6Q,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAMyK,MAAO,MAClDoG,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAMkT,UACrDrC,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMmT,UACrDtC,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAMkZ,KAE5C,IAAIC,GAAyB,EAC7B,IAAK,MAAMC,KAAQpZ,EAEbA,EAAMqZ,eAAeD,KAClBD,IAA2D,IAAjCH,EAAcpJ,QAAQwJ,KACnDD,GAAyB,GAEvBA,GACF1Z,KAAK8S,WAAW1B,EAAQuI,EAAMpZ,EAAMoZ,KAK1C3Z,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAGzBpR,KAAKwO,cACPxO,KAAK6R,yBAAyBrH,GAGhCA,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,EC3CK,MAAMqP,UAA0B9L,EAAvC,c,oBACU,KAAA+L,oBAAsB,IAAI7I,OAAO,qCA2B3C,CAzBEqD,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,MAAM6Q,EAASpR,KAAKwS,kBACpB,IAAIzQ,EAAOxB,EAAMwB,MACZA,GAAQ/B,KAAK8Z,oBAAoB5I,KAAK3Q,EAAM+P,OAC/CvO,EAAOxB,EAAM+P,IAAIP,MAAM/P,KAAK8Z,qBAAqB,IAEnD1I,EAAOrP,KAAO/B,KAAK2Q,kBAAkB5O,EAAM,MAC3CqP,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAMkT,UACrDrC,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMmT,UACrDtC,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAM+P,KAC5CtQ,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,EC3BK,MAAMuP,UAA6BhM,EACxCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACbmB,EAAM1O,KAAKyO,SAASxO,GAC1B,GAAW,MAAPyO,EAEF,OADAlE,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GAGzB,MAAMwP,EAAWtL,EAAIjF,cAAc,YACnC,GAAgB,MAAZuQ,GAAoBha,KAAKyP,mBAAmBuK,EAASvP,aAGvD,OAFAD,EAAOyM,aAAe,oBACtBzM,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GAmEzB,OAhEgBoK,KAAKN,MAAM0F,EAASvP,aAC5ByB,SAAS+N,IACf,MAAM7I,EAASpR,KAAKwS,kBAQpB,GAPKxS,KAAKyP,mBAAmBwK,EAAM/E,SACjC9D,EAAOrP,KAAOkY,EAAM/E,MAAMrE,MAAM,MAAM,IAEtB,MAAdoJ,EAAMha,MAAiBD,KAAKyP,mBAAmBwK,EAAMha,KAAKyS,SAC5DtB,EAAOsB,MAAQuH,EAAMha,KAAKyS,MAAM7B,MAAM,OAAO3B,KAAK,OAGxB,MAAxB+K,EAAMC,gBAAyD,MAA/BD,EAAMC,eAAevH,OACvD,IAAK,MAAMwH,KAAYF,EAAMC,eAAevH,OAAQ,CAElD,IAAKsH,EAAMC,eAAevH,OAAOiH,eAAeO,GAC9C,SAGF,MAAMlH,EAAQgH,EAAMC,eAAevH,OAAOwH,GAE1C,OADuC,MAApBlH,EAAMmH,WAAqBnH,EAAMmH,WAAWzN,cAAgB,MAE7E,IAAK,WACHyE,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBsC,EAAM1S,OACrD,MACF,IAAK,QACL,IAAK,WACL,IAAK,OACL,IAAK,OACH6Q,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBsC,EAAM1S,OACrD,MACF,IAAK,MACH6Q,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAasD,EAAM1S,OAC5C,MACF,QAAS,CACP,MAAM8Z,EAA4B,MAAfpH,EAAMiC,MAAgBjC,EAAMiC,MAAMvI,cAAgB,KAE1C,MAAzByE,EAAOwB,MAAMc,UACb1T,KAAKiO,mBAAmBkC,QAAQkK,IAAe,EAE/CjJ,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBsC,EAAM1S,OAE5B,MAAzB6Q,EAAOwB,MAAMa,UACbzT,KAAKkO,mBAAmBiC,QAAQkK,IAAe,EAE/CjJ,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBsC,EAAM1S,QAE/B,MAArB6Q,EAAOwB,MAAMe,MAA6C,IAA7BvC,EAAOwB,MAAMe,KAAK7M,SAChD9G,KAAKoO,cAAc+B,QAAQkK,IAAe,EAE1CjJ,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAasD,EAAM1S,OAE5CP,KAAK8S,WAAW1B,EAAQ6B,EAAMiC,MAAOjC,EAAM1S,OAE7C,K,GAMRP,KAAKwT,sBAAsBpC,GAC3BpR,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,EACzB,ECjFK,MAAM8P,UAA4BvM,EACvCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACfP,KAAKkT,cAAc1I,EAAQxK,KAAK2Q,kBAAkBpQ,EAAMga,WAExD,MAAMnJ,EAASpR,KAAKwS,kBACpBpB,EAAOqB,SAAsD,SAA3CzS,KAAK2Q,kBAAkBpQ,EAAMia,UAC/CpJ,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAMka,MAAO,MAClDrJ,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMma,MAC5CtJ,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAMoa,SAAUpa,EAAMqa,OACrExJ,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMsa,UACrDzJ,EAAOwB,MAAM6D,KAAOzW,KAAK2Q,kBAAkBpQ,EAAMua,MACjD1J,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAMwa,SAEvC/a,KAAKyP,mBAAmBlP,EAAMoa,WACjC3a,KAAK8S,WAAW1B,EAAQ,QAAS7Q,EAAMqa,OAEzC5a,KAAK8S,WAAW1B,EAAQ,QAAS7Q,EAAMya,OACvChb,KAAK8S,WAAW1B,EAAQ,MAAO7Q,EAAM0a,KACrCjb,KAAK8S,WAAW1B,EAAQ,UAAW7Q,EAAM2a,SACzClb,KAAK8S,WAAW1B,EAAQ,OAAQ7Q,EAAM4a,MAEtCnb,KAAKwT,sBAAsBpC,GAC3BpR,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAGzBpR,KAAKwO,cACPxO,KAAK6R,yBAAyBrH,GAGhCA,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,E,0BC3BF,MAAM4Q,EAA2B,IAAIC,IAAI,CACvC,QACA,OACA,WACA,WACA,MACA,YACA,aAGIC,EAAsC,IAAID,IAAI,CAClD,OACA,QACA,aACA,cACA,YACA,QACA,QACA,eACA,UACA,UACA,QACA,OACA,MAEA,cAGIE,EAA2B,IAAIF,IAAI,CAAC,QAAS,SAE5C,MAAMG,UAA4BzN,EACvCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,GAAe,MAAXwH,EAEF,OADA+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GAGzB,GAAuB,MAAnB/C,EAAQ,GAAG3C,MAAoC,MAApB2C,EAAQ,GAAGuD,MAAe,CAIvD,GAAgE,IAHxCvD,EAGJI,QAAQ4T,GAAiB,SAAXA,EAAE3W,OAAiBgC,OAAc,CACjE,MAAMsK,EAASpR,KAAKwS,kBASpB,OARApB,EAAOtM,KAAO,aACdsM,EAAO4C,SAAW,IAAI,IACtBvM,EAAQyE,SAASmD,IACfrP,KAAK0b,yCAAyCtK,EAAQ/B,EAAI,IAE5DrP,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,GACpB5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,E,EAuC3B,OAnCA/C,EAAQyE,SAASmD,IACf,MAAM+B,EAASpR,KAAKwS,kBAEdmJ,EAAU5M,OAAO6M,KAAKvM,GACT,aAAfsM,EAAQ,KACV3b,KAAKkT,cAAc1I,EAAQ6E,EAAIwM,UAC/B7b,KAAK8b,uBAAuB1K,EAAQ/B,IAGnB,SAAfsM,EAAQ,IAAgC,iBAAfA,EAAQ,IACnC3b,KAAK+b,mBAAmB3K,EAAQ/B,GAGf,SAAfsM,EAAQ,IAAgC,WAAfA,EAAQ,IACnC3b,KAAKgc,cAAc5K,EAAQ/B,GAGT,SAAfsM,EAAQ,IAAkB,MAAuB,UAAfA,EAAQ,IAC7C3b,KAAKic,+BAA+B7K,EAAQ/B,GAG3B,UAAfsM,EAAQ,IAAiC,SAAfA,EAAQ,IACpC3b,KAAKkc,uBAAuB9K,EAAQ/B,GAGtCrP,KAAKwT,sBAAsBpC,GAC3BpR,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAGzBpR,KAAKwO,cACPxO,KAAK6R,yBAAyBrH,GAGhCA,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,EACzB,CAEAsR,uBAAuB1K,EAAoB/B,GACzC+B,EAAOtM,KAAO,UACdsM,EAAOwB,MAAQ,IAAI,IAEnBxB,EAAOrP,KAAOsN,EAAIrE,MAClBoG,EAAOsB,MAAQrD,EAAI0F,KACnB3D,EAAOwB,MAAMa,SAAWpE,EAAIoE,SAC5BrC,EAAOwB,MAAMc,SAAWrE,EAAIqE,SAC5BtC,EAAOwB,MAAM6D,KAAOpH,EAAI8M,UACxB/K,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAaN,EAAIiB,KAE1CtQ,KAAKoc,qBAAqBhL,EAAQ/B,EAAK+L,EACzC,CAEAW,mBAAmB3K,EAAoB/B,GACrC+B,EAAOtM,KAAO,SACdsM,EAAOM,KAAO,IAAI,IAElBN,EAAOrP,KAAOsN,EAAIgN,aAClB,IAAIC,EAAyB,GAC7B,OAAQjN,EAAIvK,MACV,IAAK,cACHsM,EAAOM,KAAK0D,eAAiB/F,EAAIgN,aACjCjL,EAAOM,KAAK4D,OAASjG,EAAIkN,UACzBnL,EAAOM,KAAKgE,MAAQ1V,KAAK8Q,aAAaM,EAAOM,KAAK4D,QAClDlE,EAAOM,KAAK8D,KAAOnG,EAAImG,KACvBxV,KAAKmR,kBAAkBC,EAAQ,GAAG/B,EAAImN,oBAAoBnN,EAAIoN,mBAG9DH,EAAe,CACb,eACA,iBACA,YACA,OACA,mBACA,mBAEF,MACF,IAAK,OACHlL,EAAOM,KAAK0D,eAAiB/F,EAAIqN,eACjCtL,EAAOM,KAAK4D,OAASjG,EAAIsN,eAGzBL,EAAe,CAAC,eAAgB,iBAAkB,kBAMtDtc,KAAKoc,qBAAqBhL,EAAQ/B,EAAK,IAAIgM,IAAIiB,GACjD,CAEAN,cAAc5K,EAAoB/B,GAChC+B,EAAOtM,KAAO,aACdsM,EAAO4C,SAAW,IAAI,IAEtB,MAAMsI,EAAyB,CAAC,OAAQ,UACxC,OAAQjN,EAAIvK,MACV,IAAK,OACHsM,EAAOrP,KAAO,GAAGsN,EAAItN,QAAQsN,EAAIvK,OACjC9E,KAAK6T,gBAAgBzC,EAAQ/B,EAAItN,MACjCqP,EAAO4C,SAAS4I,cAAgBvN,EAAIiG,OACpC,MACF,IAAK,WACHlE,EAAOrP,KAAO,GAAGsN,EAAItN,QAAQsN,EAAIvK,OACjC9E,KAAK6T,gBAAgBzC,EAAQ/B,EAAItN,MACjCqP,EAAO4C,SAAS6I,eAAiBxN,EAAIiG,OACrC,MACF,IAAK,UACHlE,EAAOrP,KAAO,GAAGsN,EAAItN,QAAQsN,EAAIvK,OACjC9E,KAAK6T,gBAAgBzC,EAAQ/B,EAAItN,MACjCqP,EAAO4C,SAAS4I,cAAgBvN,EAAIiG,OACpClE,EAAO4C,SAAS8I,MAAQzN,EAAIyN,MAE5BR,EAAapM,KAAK,SAClB,MACF,IAAK,kBACHkB,EAAOrP,KAAO,GAAGsN,EAAItN,QAAQsN,EAAIvK,OACjC9E,KAAK6T,gBAAgBzC,EAAQ/B,EAAItN,MACjCqP,EAAO4C,SAAS+I,IAAM1N,EAAIiG,OAC1B,MACF,IAAK,aACHlE,EAAOrP,KAAOsN,EAAIvK,KAClBsM,EAAO4C,SAAS4I,cAAgBvN,EAAIiG,OAQxCtV,KAAKoc,qBAAqBhL,EAAQ/B,EAAK,IAAIgM,IAAIiB,GACjD,CAEAL,+BAA+B7K,EAAoB/B,GACjD+B,EAAOtM,KAAO,eACdsM,EAAOwC,WAAW9O,KAAO,YACR,SAAbuK,EAAIvK,KACNsM,EAAOrP,KAAO,GAAGsN,EAAIrE,SAASqE,EAAI2N,cAAc3N,EAAI4N,eAAe5N,EAAI6N,YACpEzM,QAAQ,KAAM,KACdtB,OAEHiC,EAAOrP,KAAOsN,EAAI8N,UAGpB,MAAMC,EAAU/N,EAChBN,OAAO6M,KAAKvM,GAAKnD,SAAS6G,IACxB/S,KAAK8S,WAAW1B,EAAQ2B,EAAKqK,EAAQrK,GAAK,GAE9C,CAEA2I,yCAAyCtK,EAAoB/B,GAC3D,OAAQA,EAAIvK,MACV,IAAK,OACH9E,KAAK6T,gBAAgBzC,EAAQ,GAAG/B,EAAI2N,cAAc3N,EAAI4N,eAAe5N,EAAI6N,aACzE9L,EAAO4C,SAAShJ,MAAQqE,EAAIrE,MAC5BoG,EAAOrP,KAAOqP,EAAO4C,SAASF,SAE9B1C,EAAO4C,SAASP,SAAWpE,EAAIuD,MAC/B,MACF,IAAK,QACHxB,EAAO4C,SAASsF,MAAQjK,EAAIiK,MAC5B,MACF,IAAK,SACHlI,EAAO4C,SAASqJ,MAAQhO,EAAIiO,aAC5B,MACF,IAAK,UACHlM,EAAO4C,SAASuJ,SAAWlO,EAAImO,QAC/BpM,EAAO4C,SAASyJ,KAAOpO,EAAIoO,KAC3BrM,EAAO4C,SAAS0J,WAAarO,EAAIxE,IACjCuG,EAAO4C,SAAS8I,MAAQzN,EAAIyN,MAC5B1L,EAAO4C,SAAS2J,QAAUtO,EAAIsO,QAMlC3d,KAAKoc,qBAAqBhL,EAAQ/B,EAAKiM,EACzC,CAEAY,uBAAuB9K,EAAoB/B,GACzC+B,EAAOtM,KAAO,eACdsM,EAAOwC,WAAW9O,KAAO,YACzBsM,EAAOrP,KAAOsN,EAAIrE,MAClBoG,EAAOsB,MAAQrD,EAAI0F,KAEnB/U,KAAKoc,qBAAqBhL,EAAQ/B,EAAKkM,EACzC,CAEAa,qBAAqBhL,EAAoB/B,EAAUiN,GAC1BvN,OAAO6M,KAAKvM,GAAKxH,QAAQ4T,IAAOa,EAAanE,IAAIsD,KACzDvP,SAAS6G,IACtB,MAAM6K,EAAOvO,EACbrP,KAAK8S,WAAW1B,EAAQ2B,EAAK6K,EAAK7K,GAAK,GAE3C,EClQF,MAAM8K,EAAiB,IAAIxC,IAAI,CAC7B,UACA,gBACA,gBACA,SACA,WACA,0BACA,qBACA,UAGK,MAAMyC,UAA6B/P,EAGxCuG,MAAMrU,GACJD,KAAKwK,OAAS,IAAI+C,EAClB,MAAM9F,EAAUmN,KAAKN,MAAMrU,GAC3B,GAAe,MAAXwH,GAAsC,IAAnBA,EAAQX,OAE7B,OADA9G,KAAKwK,OAAOgD,SAAU,EACf3D,QAAQC,QAAQ9J,KAAKwK,QAGP,MAAnB/C,EAAQsW,SACV/d,KAAKge,eAAevW,EAAQsW,SAED,MAAzBtW,EAAQwW,eACVje,KAAKke,YAAYzW,EAAQwW,eAEE,MAAzBxW,EAAQ0W,eACVne,KAAKoe,YAAY3W,EAAQ0W,cAAe,mBAEpB,MAAlB1W,EAAQ4W,QACVre,KAAKoe,YAAY3W,EAAQ4W,OAAQ,YAEI,MAAnC5W,EAAQ6W,yBACVte,KAAKue,YAAY9W,EAAQ6W,yBAEH,MAApB7W,EAAQ+W,UACVxe,KAAKye,gBAAgBhX,EAAQ+W,UAG/B,IAAK,MAAMzL,KAAOtL,EAEZA,EAAQmS,eAAe7G,KAAS8K,EAAe1F,IAAIpF,IACrD/S,KAAKoe,YAAY3W,EAAQsL,GAAM,KAAM,gBAKzC,OADA/S,KAAKwK,OAAOgD,SAAU,EACf3D,QAAQC,QAAQ9J,KAAKwK,OAC9B,CAEQ0T,YAAYzW,GAClBA,EAAQyE,SAASwS,IACf,MAAMtN,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO/B,KAAK2Q,kBAAkB+N,EAAW1T,OAEhDoG,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAC3B+N,EAAW9L,MACX5S,KAAK2Q,kBAAkB+N,EAAWC,iBAEhC3e,KAAKyP,mBAAmB2B,EAAOwB,MAAMa,UACvCrC,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkB+N,EAAWpF,OAChDtZ,KAAKyP,mBAAmBiP,EAAWpF,SAC7ClI,EAAOsB,MAAQ,UAAYgM,EAAWpF,MAAQ,MAGhDlI,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkB+N,EAAWhL,UAC1DtC,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAa+O,EAAWrF,QACjDjI,EAAOsB,OAAS1S,KAAK2Q,kBAAkB+N,EAAW3J,KAAM,IAExD/U,KAAKwT,sBAAsBpC,GAC3BpR,KAAK6S,cAAczB,GACnBpR,KAAKwK,OAAOkD,QAAQwC,KAAKkB,EAAO,GAEpC,CAEQqN,gBAAgBhX,GACtBA,EAAQyE,SAAS0S,IACf,MAAMxN,EAAS,IAAI,IACnBA,EAAO4C,SAAW,IAAI,IACtB5C,EAAOtM,KAAO,aACdsM,EAAOrP,KAAO/B,KAAK2Q,kBAAkBiO,EAAI9K,SAAU,IACnD,MAAMC,EAAY3C,EAAOrP,KAAK8O,MAAM,KAChCkD,EAAUjN,OAAS,IACrBsK,EAAO4C,SAASC,UAAYjU,KAAK2Q,kBAAkBoD,EAAU,KAEtC,IAArBA,EAAUjN,OACZsK,EAAO4C,SAASE,SAAWlU,KAAK2Q,kBAAkBoD,EAAU,IAC9B,IAArBA,EAAUjN,SACnBsK,EAAO4C,SAASG,WAAanU,KAAK2Q,kBAAkBoD,EAAU,IAC9D3C,EAAO4C,SAASE,SAAWlU,KAAK2Q,kBAAkBoD,EAAU,KAE9D3C,EAAO4C,SAASP,SAAWzT,KAAK2Q,kBAAkBiO,EAAIC,QACtD7e,KAAK6S,cAAczB,GACnBpR,KAAKwK,OAAOkD,QAAQwC,KAAKkB,EAAO,GAEpC,CAEQ4M,eAAevW,GACrBA,EAAQyE,SAAS0S,IACf,MAAMxN,EAAS,IAAI,IACnBA,EAAO4C,SAAW,IAAI,IACtB5C,EAAOtM,KAAO,aACdsM,EAAOrP,KAAO/B,KAAK2Q,kBAAkBiO,EAAIE,aACzC1N,EAAO4C,SAASuJ,SAAWvd,KAAK2Q,kBAAkBiO,EAAIG,aACtD3N,EAAO4C,SAASyJ,KAAOzd,KAAK2Q,kBAAkBiO,EAAInB,MAClDrM,EAAO4C,SAAS8I,MAAQ9c,KAAK2Q,kBAAkBiO,EAAI9B,OACnD1L,EAAO4C,SAAS0J,WAAa1d,KAAK2Q,kBAAkBiO,EAAII,SACxD5N,EAAO4C,SAAS2J,QAAU3d,KAAK2Q,kBAAkBiO,EAAIjB,SACtB,MAA3BvM,EAAO4C,SAAS2J,UAClBvM,EAAO4C,SAAS2J,QAAUvM,EAAO4C,SAAS2J,QAAQsB,eAEpDjf,KAAK6S,cAAczB,GACnBpR,KAAKwK,OAAOkD,QAAQwC,KAAKkB,EAAO,GAEpC,CAEQmN,YAAY9W,GAClBA,EAAQyE,SAAS0S,IACf,MAAMxN,EAAS,IAAI,IACnBA,EAAOM,KAAO,IAAI,IAClBN,EAAOtM,KAAO,SACdsM,EAAOrP,KAAO/B,KAAK2Q,kBAAkBiO,EAAIM,MACzC9N,EAAOM,KAAK4D,OAAStV,KAAK2Q,kBAAkBiO,EAAIrJ,YAChDnE,EAAOM,KAAKgE,MAAQ1V,KAAK8Q,aAAaM,EAAOM,KAAK4D,QAClDlE,EAAOM,KAAK0D,eAAiBpV,KAAK2Q,kBAAkBiO,EAAIO,OACnDnf,KAAKyP,mBAAmB2B,EAAOM,KAAKgE,SACnC1V,KAAKyP,mBAAmB2B,EAAOrP,MACjCqP,EAAOrP,KAAOqP,EAAOM,KAAKgE,MAE1BtE,EAAOrP,MAAQ,MAAQqP,EAAOM,KAAKgE,OAGvC1V,KAAK6S,cAAczB,GACnBpR,KAAKwK,OAAOkD,QAAQwC,KAAKkB,EAAO,GAEpC,CAEQgN,YAAY3W,EAAgB2X,EAAsBrd,EAAe,MACvE0F,EAAQyE,SAAS0S,IACf,MAAMxN,EAAS,IAAI,IACnBA,EAAOwC,WAAa,IAAI,IACxBxC,EAAOtM,KAAO,eACdsM,EAAOwC,WAAW9O,KAAO,YAEvBsM,EAAOrP,KADG,MAARA,EACYA,EAEA/B,KAAK2Q,kBAAkBiO,EAAIQ,IAE3C,IAAK,MAAMrM,KAAO6L,EAEZA,EAAIhF,eAAe7G,IAAQA,IAAQqM,GACrCpf,KAAK8S,WAAW1B,EAAQ2B,EAAK6L,EAAI7L,GAAKsM,YAG1Crf,KAAK6S,cAAczB,GACnBpR,KAAKwK,OAAOkD,QAAQwC,KAAKkB,EAAO,GAEpC,EClKK,MAAMkO,UAA4BvR,EACvCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,MAAM6Q,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAMgf,MAAO,MAClDnO,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMif,OAC5C,MAAMnW,EAAOrJ,KAAK2Q,kBAAkBpQ,EAAMkf,MACrCzf,KAAKyP,mBAAmBpG,KACvBrJ,KAAKyP,mBAAmB2B,EAAOsB,OACjCtB,EAAOsB,MAAQrJ,EAEf+H,EAAOsB,OAAS,OAASrJ,GAI7B,MAAMvE,EAAOvE,EAAM,cACnB,GAAa,aAATuE,EACFsM,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAMoa,UACrDvJ,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMsa,UACrDzJ,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAM,kBACvC,GAAa,gBAATuE,EAAwB,CACjCsM,EAAOtM,KAAO,SACdsM,EAAOM,KAAO,IAAI,IAClBN,EAAOM,KAAK0D,eAAiBpV,KAAK2Q,kBAAkBpQ,EAAM,iBAC1D6Q,EAAOM,KAAK4D,OAAStV,KAAK2Q,kBAAkBpQ,EAAM,gBAClD6Q,EAAOM,KAAKgE,MAAQ1V,KAAK8Q,aAAaM,EAAOM,KAAK4D,QAClDlE,EAAOM,KAAK8D,KAAOxV,KAAK2Q,kBAAkBpQ,EAAMmf,KAChD,MAAMC,EAAS3f,KAAK2Q,kBAAkBpQ,EAAMqf,QAC5C,IAAK5f,KAAKyP,mBAAmBkQ,GAAS,CACpC,MAAME,EAAWF,EAAO9O,MAAM,KAC1BgP,EAAS/Y,OAAS,IACpBsK,EAAOM,KAAKC,SAAW0E,SAASwJ,EAAS,GAAI,MAAMR,WACnDjO,EAAOM,KAAKE,SAAW,IAAOyE,SAASwJ,EAAS,GAAI,OAAOR,W,EAKjErf,KAAKwT,sBAAsBpC,GAC3BpR,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,EClDK,MAAMsV,UAA0B/R,EACrCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,GAAe,MAAXwH,EAEF,OADA+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GAGzB,IAAIuV,GAAW,EAsGf,OArGAtY,EAAQyE,SAAS3L,IACf,GAAIA,EAAMuG,OAAS,GAAMiZ,IAA0B,UAAbxf,EAAM,IAA+B,UAAbA,EAAM,IAElE,YADAwf,GAAW,GAIb,MAAM3O,EAASpR,KAAKwS,kBAyBpB,GAxBApB,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMA,EAAMuG,OAAS,IAC3DsK,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAM,GAAI,MAG5B,IAAjBA,EAAMuG,SACJ9G,KAAKggB,cAAczf,EAAO,aACzBP,KAAKggB,cAAczf,EAAO,aAC1BP,KAAKggB,cAAczf,EAAO,UAC1BP,KAAKggB,cAAczf,EAAO,UAE7B6Q,EAAOtM,KAAO,eACdsM,EAAOwC,WAAa,IAAI,IACxBxC,EAAOwC,WAAW9O,KAAO,aAIzB9E,KAAKggB,cAAczf,EAAO,eAC1BP,KAAKggB,cAAczf,EAAO,WAC1BP,KAAKggB,cAAczf,EAAO,iBAE1B6Q,EAAOtM,KAAO,SACdsM,EAAOM,KAAO,IAAI,KAGhBnR,EAAMuG,OAAS,GAAKvG,EAAMuG,OAAS,GAAM,EAC3C,IAAK,IAAIyM,EAAI,EAAGA,EAAIhT,EAAMuG,OAAS,EAAGyM,GAAK,EAAG,CAC5C,MAAM0M,EAAqB1f,EAAMgT,EAAI,GACrC,GAAIvT,KAAKyP,mBAAmBwQ,GAC1B,SAGF,MAAMC,EAAoB3f,EAAMgT,EAAI,GAC9B4M,EAAiBD,EAAUvT,cAEjC,GAAIyE,EAAOtM,OAAS,UAAkB,CACpC,GACqB,QAAnBqb,IACsB,MAArB/O,EAAOwB,MAAMe,MAA6C,IAA7BvC,EAAOwB,MAAMe,KAAK7M,QAChD,CACAsK,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAasQ,GACtC,Q,CACK,IACe,aAAnBE,GAAoD,UAAnBA,IAClCngB,KAAKyP,mBAAmB2B,EAAOwB,MAAMa,UACrC,CACArC,EAAOwB,MAAMa,SAAWwM,EACxB,Q,CACK,GACc,aAAnBE,GACAngB,KAAKyP,mBAAmB2B,EAAOwB,MAAMc,UACrC,CACAtC,EAAOwB,MAAMc,SAAWuM,EACxB,Q,CACK,GAAuB,SAAnBE,GAA6BngB,KAAKyP,mBAAmB2B,EAAOwB,MAAM6D,MAAO,CAClFrF,EAAOwB,MAAM6D,KAAOwJ,EACpB,Q,OAEG,GAAI7O,EAAOtM,OAAS,SAAiB,CAC1C,GACqB,eAAnBqb,GACAngB,KAAKyP,mBAAmB2B,EAAOM,KAAK0D,gBACpC,CACAhE,EAAOM,KAAK0D,eAAiB6K,EAC7B,Q,CACK,GAAuB,WAAnBE,GAA+BngB,KAAKyP,mBAAmB2B,EAAOM,KAAK4D,QAAS,CACrFlE,EAAOM,KAAK4D,OAAS2K,EACrB7O,EAAOM,KAAKgE,MAAQ1V,KAAK8Q,aAAamP,GACtC,Q,CACK,GAAuB,QAAnBE,GAA4BngB,KAAKyP,mBAAmB2B,EAAOM,KAAK8D,MAAO,CAChFpE,EAAOM,KAAK8D,KAAOyK,EACnB,Q,CACK,GACc,gBAAnBE,GACAngB,KAAKyP,mBAAmB2B,EAAOM,KAAKC,WACpC3R,KAAKyP,mBAAmB2B,EAAOM,KAAKE,UAEpC,GAAI5R,KAAKmR,kBAAkBC,EAAQ6O,GACjC,cAEG,GAAuB,SAAnBE,EAET,Q,CAIJngB,KAAK8S,WAAW1B,EAAQ8O,EAAWD,E,CAIvCjgB,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,EACzB,CAEQwV,cAAcrN,EAAe5Q,GACnC,OAAc,MAAV4Q,GAA0B,MAAR5Q,GAIpB4Q,EAAO9K,QAAQmK,IAAOhS,KAAKyP,mBAAmBuC,IAAMA,EAAErF,gBAAkB5K,EAAK4K,gBAC1E7F,OAAS,CAEhB,ECtHF,MAAMsZ,GAAkB,IAAInP,OAAO,qBAAsB,KAElD,MAAMoP,WAA2BtS,EACtCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAA0BmN,KAAKN,MAAMrU,GAC3C,GAAe,MAAXwH,GAAoC,MAAjBA,EAAQsP,OAA0C,IAAzBtP,EAAQsP,MAAMjQ,OAE5D,OADA0D,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GAGzB,MAAM8V,EAAa,IAAI3I,IACjB4I,EAAkB,IAAI5I,IACtB6I,EAAaxgB,KAAKygB,gBAAgBhZ,EAAQkG,SA8ChD,OA7CA3N,KAAK0gB,kBAAkB,KAAMF,EAAYF,GACzCA,EAAWpU,SAAQ,CAACqI,EAAKxB,KACvBwN,EAAgBxI,IAAIhF,EAAKvI,EAAOmD,QAAQ7G,QACxC,MAAMkL,EAAI,IAAI,IACdA,EAAEjQ,KAAOwS,EACT/J,EAAOmD,QAAQuC,KAAK8B,EAAE,IAGxBvK,EAAQsP,MAAM7K,SAAS0R,IACD,MAAhBA,EAAKjQ,SAAmBiQ,EAAKjQ,QAAQ7G,OAAS,GAAKyZ,EAAgBpI,IAAIyF,EAAKjQ,QAAQ,KACtFnD,EAAOoD,oBAAoBsC,KAAK,CAC9B1F,EAAOkD,QAAQ5G,OACfyZ,EAAgB7d,IAAIkb,EAAKjQ,QAAQ,MAIrC,MAAMyD,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBiN,EAAK5S,OAC1CoG,EAAOqB,SAAWmL,EAAKnL,SAAW,EAER,MAAtBmL,EAAK+C,eAAwC,MAAf/C,EAAKjL,QAAkBiL,EAAKjL,OAAO7L,OAAS,IAEjC,IAAzC8W,EAAK+C,cAAcxQ,QAAQ,WACiB,IAA5CyN,EAAK+C,cAAcxQ,QAAQ,aAE3BnQ,KAAK4gB,aAAaxP,EAAQwM,EAAKjL,QACwB,IAA9CiL,EAAK+C,cAAcxQ,QAAQ,eACpCnQ,KAAKue,YAAYnN,EAAQwM,EAAKjL,QAE9BiL,EAAK+C,cAAcxQ,QAAQ,aAAe,GAC1CyN,EAAKjL,OAAOkO,MAAM7O,GAAiB,aAAXA,EAAElN,OAAwB9E,KAAKyP,mBAAmBuC,EAAEzR,SAE5EP,KAAK4gB,aAAaxP,EAAQwM,EAAKjL,QAE/B3S,KAAKoe,YAAYhN,EAAQwM,EAAKjL,SAIlCvB,EAAOsB,OAAS,KAAO1S,KAAK2Q,kBAAkBiN,EAAK7I,KAAM,IACzD/U,KAAKwT,sBAAsBpC,GAC3BpR,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,EACzB,CAEQoW,aAAaxP,EAAoBuB,GACvC,MAAMmO,EAAiB,GACvBnO,EAAOzG,SAAS+G,IACd,IAAIjT,KAAKyP,mBAAmBwD,EAAM1S,QAAyB,YAAf0S,EAAMnO,KAIlD,GACkB,aAAfmO,EAAMnO,MAAsC,UAAfmO,EAAMnO,OACpC9E,KAAKyP,mBAAmB2B,EAAOwB,MAAMa,UAGhC,GAAmB,aAAfR,EAAMnO,MAAuB9E,KAAKyP,mBAAmB2B,EAAOwB,MAAMc,UAC3EtC,EAAOwB,MAAMc,SAAWT,EAAM1S,WACzB,GAAmB,SAAf0S,EAAMnO,MAAmB9E,KAAKyP,mBAAmB2B,EAAOwB,MAAM6D,MACvErF,EAAOwB,MAAM6D,KAAOxD,EAAM1S,WACrB,GAAmB,QAAf0S,EAAMnO,KACfgc,EAAK5Q,KAAK+C,EAAM1S,YACX,GAAmB,cAAf0S,EAAMnO,KAAsB,CACrC,IAAIic,EAAe9N,EAAM1S,MAAMiQ,WAAW,iBACtCyC,EAAM1S,MACN,gBAAkB0S,EAAM1S,MAC5BwgB,EAAeA,EAAatQ,QAAQ,aAAc,IAClDsQ,EAAeA,EAAatQ,QAAQ2P,GAAiB,iBACrDU,EAAK5Q,KAAK6Q,E,MAEV/gB,KAAK8S,WACH1B,EACA6B,EAAMiC,MACNjC,EAAM1S,MACc,IAApB0S,EAAM+N,UAAkB,WAAmB,eAnB7C5P,EAAOwB,MAAMa,SAAWR,EAAM1S,K,IAuBlC6Q,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAamR,EACxC,CAEQvC,YAAYnN,EAAoBuB,GACtCvB,EAAOM,KAAO,IAAI,IAClBN,EAAOtM,KAAO,SACd6N,EAAOzG,SAAS+G,IAEZjT,KAAKyP,mBAAmBwD,EAAM1S,QACf,YAAf0S,EAAMnO,MACS,WAAfmO,EAAMnO,OAKW,WAAfmO,EAAMnO,MAAqB9E,KAAKyP,mBAAmB2B,EAAOM,KAAK0D,gBACjEhE,EAAOM,KAAK0D,eAAiBnC,EAAM1S,MACX,aAAf0S,EAAMnO,MAAuB9E,KAAKyP,mBAAmB2B,EAAOM,KAAK4D,SAC1ElE,EAAOM,KAAK4D,OAASrC,EAAM1S,MAC3B6Q,EAAOM,KAAKgE,MAAQ1V,KAAK8Q,aAAaM,EAAOM,KAAK4D,SAC1B,UAAfrC,EAAMnO,MAAoB9E,KAAKyP,mBAAmB2B,EAAOM,KAAK8D,MACvEpE,EAAOM,KAAK8D,KAAOvC,EAAM1S,MACD,aAAf0S,EAAMnO,MAAuB9E,KAAKyP,mBAAmB2B,EAAOM,KAAKE,UACrE5R,KAAKmR,kBAAkBC,EAAQ6B,EAAM1S,QAS1CP,KAAK8S,WACH1B,EACA6B,EAAMiC,MACNjC,EAAM1S,MACc,IAApB0S,EAAM+N,UAAkB,WAAmB,U,GAInD,CAEQ5C,YAAYhN,EAAoBuB,GACtCA,EAAOzG,SAAS+G,IACVjT,KAAKyP,mBAAmBwD,EAAM1S,QAAyB,YAAf0S,EAAMnO,MAGlD9E,KAAK8S,WACH1B,EACA6B,EAAMiC,MACNjC,EAAM1S,MACc,IAApB0S,EAAM+N,UAAkB,WAAmB,SAC5C,GAEL,CAEQP,gBAAgB9S,GACtB,GAAe,MAAXA,EACF,MAAO,GAET,MAAM6S,EAAqC,GACrCzO,EAAM,IAAI4F,IAAkC,IAYlD,OAXAhK,EAAQzB,SAAS0S,IACf7M,EAAIgG,IAAI6G,EAAIqC,KAAMrC,GAClBA,EAAIsC,SAAW,EAAE,IAEnBvT,EAAQzB,SAAS0S,IACQ,MAAnBA,EAAIuC,aAA2C,KAApBvC,EAAIuC,aAAsBpP,EAAIoG,IAAIyG,EAAIuC,aACnEpP,EAAIrP,IAAIkc,EAAIuC,aAAaD,SAAShR,KAAK0O,GAEvC4B,EAAWtQ,KAAK0O,E,IAGb4B,CACT,CAEQE,kBACNU,EACAC,EACAtP,GAEY,MAARsP,GAGJA,EAAKnV,SAAS8F,IACZ,GAAe,MAAXA,EAAEhH,OAAoC,KAAnBgH,EAAEhH,MAAMmE,OAAe,CAC5C,IAAInE,EAAQgH,EAAEhH,MAAMmE,OACD,MAAfiS,GAA8C,KAAvBA,EAAYjS,SACrCnE,EAAQoW,EAAc,IAAMpW,GAE9B+G,EAAIgG,IAAI/F,EAAEiP,KAAMjW,GACE,MAAdgH,EAAEkP,UAA0C,IAAtBlP,EAAEkP,SAASpa,QACnC9G,KAAK0gB,kBAAkB1V,EAAOgH,EAAEkP,SAAUnP,E,IAIlD,ECvMK,MAAMuP,WAA2BvT,EACtCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EACGI,QAAQtH,GACc,6BAAdA,EAAM+P,MAEdpE,SAAS3L,IACR,MAAM6Q,EAASpR,KAAKwS,kBACdlC,EAAMtQ,KAAK2Q,kBAAkBpQ,EAAM+P,IAAKtQ,KAAK2Q,kBAAkBpQ,EAAMgQ,WAC3Ea,EAAOrP,KAAO/B,KAAK2Q,kBAAkB3Q,KAAKqQ,YAAYC,GAAM,MAC5Dc,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAMkT,UACrDrC,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMmT,UACrDtC,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAaW,GACtCtQ,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG/B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,ECvBF,IAAY+W,IAAZ,SAAYA,GACV,qBACA,8BACD,CAHD,CAAYA,KAAAA,GAAiB,KCCtB,MAAMC,WAA2BzT,EACtCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAmBmN,KAAKN,MAAMrU,GACpC,GAAe,MAAXwH,GAAmC,MAAhBA,EAAQxH,KAE7B,OADAuK,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GAGzB,IAAK,MAAMuI,KAAOtL,EAAQxH,KAAM,CAE9B,IAAKwH,EAAQxH,KAAK2Z,eAAe7G,GAC/B,SAGF,MAAMxS,EAAQkH,EAAQxH,KAAK8S,GACrB3B,EAASpR,KAAKyhB,WAAWlhB,GAC/BiK,EAAOkD,QAAQwC,KAAKkB,E,CAItB,OADA5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,EACzB,CAEQiX,WAAWxH,GACjB,MAAM7I,EAASpR,KAAKwS,kBAKpB,OAJApB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBsJ,EAAMyH,SAC3CtQ,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBsJ,EAAMvH,OAC5CtB,EAAOqB,SAAWwH,EAAMxH,SAAW,EAE3BwH,EAAMnV,MACZ,KAAKyc,GAAkBI,MACrB3hB,KAAK4hB,iBAAiB3H,EAAO7I,GAC7B,MACF,KAAKmQ,GAAkBM,WACrB7hB,KAAK8hB,sBAAsB7H,EAAO7I,GAClC,MACF,QACE,OAMJ,OAFApR,KAAKwT,sBAAsBpC,GAC3BpR,KAAK6S,cAAczB,GACZA,CACT,CAEQwQ,iBAAiB3H,EAAiB7I,GACxCA,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBsJ,EAAMxG,UACrDrC,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBsJ,EAAMvG,UACrDtC,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAasK,EAAM3J,IAC9C,CAEQwR,sBAAsB7H,EAAiB7I,GAC7CA,EAAOtM,KAAO,SACdsM,EAAOM,KAAO,IAAI,IAClBN,EAAOM,KAAK0D,eAAiBpV,KAAK2Q,kBAAkBsJ,EAAMxG,UAC1DrC,EAAOM,KAAK4D,OAAStV,KAAK2Q,kBAAkBsJ,EAAM8H,cAClD3Q,EAAOM,KAAKgE,MAAQ1V,KAAK8Q,aAAaM,EAAOM,KAAK4D,QAClDlE,EAAOM,KAAK8D,KAAOxV,KAAK2Q,kBAAkBsJ,EAAM+H,WAC3ChiB,KAAKyP,mBAAmBwK,EAAMgI,eAC5BjiB,KAAKmR,kBAAkBC,EAAQ6I,EAAMgI,eACxCjiB,KAAK8S,WAAW1B,EAAQ,aAAc6I,EAAMgI,cAG3CjiB,KAAKyP,mBAAmBwK,EAAMvG,WACjC1T,KAAK8S,WAAW1B,EAAQ,MAAO6I,EAAMvG,SAEzC,ECxEK,MAAMwO,WAA0BnU,EACrCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUmN,KAAKN,MAAMrU,GAC3B,GAAe,MAAXwH,GAAmD,IAAhCsH,OAAO6M,KAAKnU,GAASX,OAE1C,OADA0D,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GAGzB,IAAK,MAAM2X,KAAW1a,EAEjBA,EAAQmS,eAAeuI,KACxBniB,KAAKyP,mBAAmB0S,IACI,IAA5B1a,EAAQ0a,GAASrb,QAKnBW,EAAQ0a,GAASjW,SAAS3L,IACxB,GACEP,KAAKyP,mBAAmBlP,EAAM6hB,eACS,IAAvC7hB,EAAM6hB,aAAajS,QAAQ,QAE3B,OAGFnQ,KAAKkT,cAAc1I,EAAQ2X,GAC3B,MAAM/Q,EAASpR,KAAKwS,kBAQpB,GAPApB,EAAOrP,KAAOxB,EAAM6hB,aAAa3R,QAAQ,UAAW,IAAIA,QAAQ,WAAY,IACxEW,EAAOrP,KAAK+E,OAAS,KACvBsK,EAAOrP,KAAOqP,EAAOrP,KAAKqO,UAAU,EAAG,KAEzCgB,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMH,QACrDgR,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAM6hB,cAEpB,MAApB7hB,EAAM8hB,WAAoB,CAC5BjR,EAAOwB,MAAMa,SACS,MAApBlT,EAAM8hB,WACFriB,KAAK2Q,kBAAkBpQ,EAAM8hB,WAAWC,gBACxC,KACN,IAAK,MAAMC,KAAQhiB,EAAM8hB,WAEpB9hB,EAAM8hB,WAAWzI,eAAe2I,IACxB,mBAATA,GACS,eAATA,GAIFviB,KAAK8S,WAAW1B,EAAQmR,EAAMhiB,EAAM8hB,WAAWE,G,CAInDviB,KAAKwT,sBAAsBpC,GAC3BpR,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAS/B,OALIpR,KAAKwO,cACPxO,KAAK6R,yBAAyBrH,GAGhCA,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,EACzB,ECrEK,MAAMgY,WAAoBC,MAC/BjjB,YAAYoE,EAAyBuD,GAA4B,GAC/DlC,MAAMrB,GAD6B,KAAAuD,iBAAAA,CAErC,ECEF,MAAMub,GAAc,YACdC,GAAqB,mBACrBC,GAAiB,eACjBC,GAAY,UAEX,MAAMC,WAA6B/U,EACxCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EAEnB,IAAIwV,EACAC,EACAC,EACAC,EAAcljB,KAAKiP,aAAahP,GAAMiP,KAAK,MAE/C,IAA0C,IAAtCgU,EAAY/S,QAAQuS,IAAqB,CAC3C,MAAMpR,EAAQ4R,EAAYrS,MAAM6R,IAC5BpR,EAAMxK,OAAS,IACjBoc,EAAc5R,EAAM,GACpByR,EAAYzR,EAAM,G,CAGtB,IAAiD,IAA7C4R,EAAY/S,QAAQwS,IAA4B,CAClD,MAAMrR,EAAQ4R,EAAYrS,MAAM8R,IAC5BrR,EAAMxK,OAAS,IACjBoc,EAAc5R,EAAM,GACpB0R,EAAmB1R,EAAM,G,CAG7B,GAA4C,IAAxC4R,EAAY/S,QAAQyS,IAAuB,CAC7C,MAAMtR,EAAQ4R,EAAYrS,MAAM+R,IAC5BtR,EAAMxK,OAAS,IACjBoc,EAAc5R,EAAM,GACpB2R,EAAe3R,EAAM,G,CAIzB,MAAMoB,EAAQ1S,KAAKmjB,kBAAkBJ,GAC/BK,EAAepjB,KAAKmjB,kBAAkBH,GACtCK,EAAWrjB,KAAKmjB,kBAAkBF,GA+BxC,OA7BAvQ,EAAMxG,SAASoX,IACb,MAAMlS,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO/B,KAAK2Q,kBAAkB2S,EAAE5gB,IAAI,SAC3C0O,EAAOsB,MAAQ1S,KAAK2Q,kBAAkB2S,EAAE5gB,IAAI,SAC5C1C,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7BiS,EAAS1b,OAAOyb,GAAclX,SAASqX,IACrC,MAAMnS,EAASpR,KAAKwS,kBACdgR,EAAUD,EAAEpL,IAAI,gBAAkB,eAAiB,cACzD/G,EAAOrP,KAAO/B,KAAK2Q,kBAAkB4S,EAAE7gB,IAAI8gB,GAAU,IAChDxjB,KAAKyP,mBAAmB8T,EAAE7gB,IAAI,iBAC5B1C,KAAKyP,mBAAmB2B,EAAOrP,QAClCqP,EAAOrP,MAAQ,MAEjBqP,EAAOrP,MAAQwhB,EAAE7gB,IAAI,eAEvB0O,EAAOsB,MAAQ1S,KAAK2Q,kBAAkB4S,EAAE7gB,IAAI,YACxC6gB,EAAEpL,IAAI,iBACR/G,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAa4T,EAAE7gB,IAAI,iBAE9C0O,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkB4S,EAAE7gB,IAAI,UACrD0O,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkB4S,EAAE7gB,IAAI,aACrD1C,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,EACzB,CAEQ2Y,kBAAkBljB,GACxB,GAAID,KAAKyP,mBAAmBxP,KAAsC,IAA7BA,EAAKkQ,QAAQ0S,IAChD,MAAO,GAET,MAAM9L,EAA+B,GAwCrC,OAvCA9W,EAAK4Q,MAAMgS,IAAW3W,SAASuX,IAC7B,IAAyB,IAArBA,EAAEtT,QAAQ,MACZ,OAEF,MAAMyN,EAAO,IAAIjG,IACjB,IAAI+L,EACAC,EACJF,EAAE5S,MAAM,MAAM3E,SAAS0X,IACrB,GAAmB,MAAfF,EAEF,YADAA,GAAe,KAAOE,GAGxB,MAAMC,EAAaD,EAAEzT,QAAQ,KAC7B,IAAI4C,EACAwB,GACgB,IAAhBsP,IAGF9Q,EAAM6Q,EAAExT,UAAU,EAAGyT,GACjBD,EAAE9c,OAAS+c,EAAa,IAC1BtP,EAAMqP,EAAExT,UAAUyT,EAAa,IAGxB,MAAP9Q,GACF6K,EAAK7F,IAAIhF,EAAKwB,GAEJ,YAARxB,GAA6B,SAARA,IACvB2Q,EAAcnP,EACdoP,EAAiB5Q,G,IAGF,MAAf2Q,GAAyC,MAAlBC,GACzB/F,EAAK7F,IAAI4L,EAAgBD,GAET,IAAd9F,EAAKkG,MAGT/M,EAAM7G,KAAK0N,EAAK,IAEX7G,CACT,ECnHK,MAAMgN,WAA4BhW,EAAzC,c,oBACE,KAAAvD,OAAS,IAAI+C,CA4Gf,CA1GE+G,MAAMrU,GACJ,MAAMyO,EAAM1O,KAAKyO,SAASxO,GAC1B,GAAW,MAAPyO,EAEF,OADA1O,KAAKwK,OAAOgD,SAAU,EACf3D,QAAQC,QAAQ9J,KAAKwK,QAI9B,MAAMwZ,EAAkBtV,EAAIjF,cAAc,eAE1C,GAAuB,MAAnBua,EAGF,OAFAhkB,KAAKwK,OAAOyM,aAAe,8BAC3BjX,KAAKwK,OAAOgD,SAAU,EACf3D,QAAQC,QAAQ9J,KAAKwK,QAG9B,MAAMyZ,EAAWD,EAAgBva,cAAc,QAC/C,GAAgB,MAAZwa,EAGF,OAFAjkB,KAAKwK,OAAOyM,aAAe,qCAC3BjX,KAAKwK,OAAOgD,SAAU,EACf3D,QAAQC,QAAQ9J,KAAKwK,QAG9B,MAAM0Z,EAAYD,EAASxa,cAAc,SACzC,OAAiB,MAAbya,GACFlkB,KAAKwK,OAAOyM,aAAe,6CAC3BjX,KAAKwK,OAAOgD,SAAU,EACf3D,QAAQC,QAAQ9J,KAAKwK,UAG9BxK,KAAKmkB,SAASD,GAAW,EAAM,IAE3BlkB,KAAKwO,cACPxO,KAAK6R,yBAAyB7R,KAAKwK,QAGrCxK,KAAKwK,OAAOgD,SAAU,EACf3D,QAAQC,QAAQ9J,KAAKwK,QAC9B,CAEA2Z,SAASC,EAAeC,EAAqBC,GAC3C,MAAMlR,EAAcpT,KAAKwK,OAAOmD,QAAQ7G,OACxC,IAAIyd,EAAYD,EAEhB,IAAKD,EAAY,CACG,KAAdE,IACFA,GAAa,KAEf,MAAMC,EAASxkB,KAAKkS,yBAAyBkS,EAAM,QACnDG,GAAuB,MAAVC,EAAiB,IAAMA,EAAO/Z,YAC3C,MAAM0L,EAAS,IAAI,IACnBA,EAAOpU,KAAOwiB,EACdvkB,KAAKwK,OAAOmD,QAAQuC,KAAKiG,E,CAG3BnW,KAAKsS,4BAA4B8R,EAAM,SAASlY,SAAS+N,IACvD,MAAMwK,EAAczkB,KAAKwK,OAAOkD,QAAQ5G,OAElCsK,EAASpR,KAAKwS,kBACpBxS,KAAKsS,4BAA4B2H,EAAO,UAAU/N,SAASwY,IACzD,MAAMC,EAAU3kB,KAAKkS,yBAAyBwS,EAAa,SACrDnkB,EAAmB,MAAXokB,EAAkBA,EAAQla,YAAc,KACtD,GAAIzK,KAAKyP,mBAAmBlP,GAC1B,OAEF,MAAMqkB,EAAQ5kB,KAAKkS,yBAAyBwS,EAAa,OACnD3R,EAAe,MAAT6R,EAAgBA,EAAMna,YAAc,KAEhD,GAAY,QAARsI,EACF3B,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,QACjC,GAAY,aAARwS,EACT3B,EAAOwB,MAAMa,SAAWlT,OACnB,GAAY,aAARwS,EACT3B,EAAOwB,MAAMc,SAAWnT,OACnB,GAAY,QAARwS,EACT3B,EAAOwB,MAAM6D,KAAOlW,EAAMkQ,QAAQ,OAAQ,SACrC,GAAY,UAARsC,EACT3B,EAAOrP,KAAOxB,OACT,GAAY,UAARwS,EACT3B,EAAOsB,OAASnS,EAAQ,SACnB,CACL,IAAIuE,EAAO,SACX,MAAM+f,EAAQF,EAAQtC,WAEpBwC,EAAM/d,OAAS,GACU,MAAzB+d,EAAMC,iBAC0B,SAAhCD,EAAMC,gBAAgBvkB,QAEtBuE,EAAO,YAET9E,KAAK8S,WAAW1B,EAAQ2B,EAAKxS,EAAOuE,E,KAIxC9E,KAAK6S,cAAczB,GACnBpR,KAAKwK,OAAOkD,QAAQwC,KAAKkB,GAEpBiT,GACHrkB,KAAKwK,OAAOoD,oBAAoBsC,KAAK,CAACuU,EAAarR,G,IAIvDpT,KAAKsS,4BAA4B8R,EAAM,SAASlY,SAAS1K,IACvDxB,KAAKmkB,SAAS3iB,GAAO,EAAO+iB,EAAU,GAE1C,EC9GK,MAAMQ,WAA4BhX,EACvCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,GAAIP,KAAKyP,mBAAmBlP,EAAMykB,OAChC,OAGFzkB,EAAM0kB,OACHjlB,KAAKyP,mBAAmBlP,EAAM0kB,QAAU1kB,EAAM0kB,MAAMzU,WAAW,SAC5DjQ,EAAM0kB,MAAMxU,QAAQ,QAAS,IAC7BlQ,EAAM0kB,MACZ,MAAMV,EAAavkB,KAAKyP,mBAAmBlP,EAAM0kB,OAAuB,KAAd1kB,EAAM0kB,MAChEjlB,KAAKkT,cAAc1I,EAAQ+Z,GAE3B,MAAMnT,EAASpR,KAAKwS,kBACpBpB,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMif,OAC5CpO,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAMykB,MAAO,MAClD5T,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAMoa,UACrDvJ,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMsa,UACrDzJ,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAMkZ,KAC5CzZ,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAGzBpR,KAAKwO,cACPxO,KAAK6R,yBAAyBrH,GAGhCA,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,ECtCK,MAAM0a,WAA0BnX,EACrCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,GAAIA,EAAMuG,OAAS,EACjB,OAGF9G,KAAKkT,cAAc1I,EAAQjK,EAAM,IACjC,MAAM6Q,EAASpR,KAAKwS,kBAEdE,EAAQ1S,KAAK2Q,kBAAkBpQ,EAAM,IAU3C,GATImS,IACFtB,EAAOsB,MAAQ,GAAGA,OAGpBtB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAM,GAAI,MAC/C6Q,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAM,IACrD6Q,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAM,IACrD6Q,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAM,IAExCA,EAAMuG,OAAS,EAEjB,IAAK,IAAIyM,EAAI,EAAGA,EAAIhT,EAAMuG,OAAQyM,GAAQ,EACxB,cAAZhT,EAAMgT,GACRnC,EAAOwB,MAAM6D,KAAOlW,EAAMgT,EAAI,GAE9BvT,KAAK8S,WAAW1B,EAAQ7Q,EAAMgT,GAAIhT,EAAMgT,EAAI,IAKlDvT,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAGzBpR,KAAKwO,cACPxO,KAAK6R,yBAAyBrH,GAGhCA,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,ECvCK,MAAM2a,WAA4BpX,EACvCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,MAAMkkB,EAAcja,EAAOkD,QAAQ5G,OACnC,IAAIsM,EAAc5I,EAAOmD,QAAQ7G,OAC7BmS,EAAW1Y,EAAM0Y,SACL,MAAZA,IAEFA,EAAWA,EAASxI,QAAQ,MAAO,KAAKA,QAAQ,wBAAyB,KAE3E,MAAM4C,EAA2D,WAA/CrT,KAAK2Q,kBAAkBsI,EAAU,UACnD,IAAI3F,EAAYD,EAEhB,GAAIA,EACF,IAAK,IAAIE,EAAI,EAAGA,EAAI/I,EAAOmD,QAAQ7G,OAAQyM,IACzC,GAAI/I,EAAOmD,QAAQ4F,GAAGxR,OAASkX,EAAU,CACvC3F,GAAY,EACZF,EAAcG,EACd,K,CAKN,MAAMnC,EAASpR,KAAKolB,gBAAgB7kB,GACpC,GAAI6Q,EAAOtM,OAAS,UAClBsM,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAM4Y,OAC5C/H,EAAOwB,MAAQ,IAAI,IACnBxB,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAM+P,KAC5Cc,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAMkT,UACrDrC,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMmT,UACrDtC,EAAOwB,MAAM6D,KAAOzW,KAAK2Q,kBAAkBpQ,EAAMkW,WAC5C,GAAIrF,EAAOtM,OAAS,eACzB9E,KAAKqlB,gBAAgB9kB,EAAO6Q,QACvB,GAAIA,EAAOtM,OAAS,SACzBsM,EAAOM,KAAO1R,KAAKslB,UAAU/kB,GAC7B6Q,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMmS,YACvC,GAAItB,EAAOtM,OAAS,eACzBsM,EAAO4C,SAAWhU,KAAKulB,cAAchlB,GACrC6Q,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMmS,QACvC1S,KAAKyP,mBAAmBlP,EAAMilB,QAAQ,CAEzC,MAAMC,EAAazlB,KAAKolB,gBAAgB7kB,GACxCklB,EAAWzR,SAAW,KACtByR,EAAW3gB,KAAO,SAClB2gB,EAAW/T,KAAO1R,KAAKslB,UAAU/kB,GACjCiK,EAAOkD,QAAQwC,KAAKuV,E,CAMxB,GAFAjb,EAAOkD,QAAQwC,KAAKkB,GAEhBkC,EAAW,CACb,MAAMtB,EAAI,IAAI,IACdA,EAAEjQ,KAAOkX,EACTzO,EAAOmD,QAAQuC,KAAK8B,E,CAElBqB,GACF7I,EAAOoD,oBAAoBsC,KAAK,CAACuU,EAAarR,G,IAI9CpT,KAAKwO,cACPxO,KAAK6R,yBAAyBrH,GAGhCA,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,CAEQ4a,gBAAgB7kB,GACtB,MAAM6Q,EAAS,IAAI,IAyBnB,OAvBI7Q,EAAMqZ,eAAe,gBAAkBrZ,EAAMqZ,eAAe,oBAE9DxI,EAAOqB,UAAW,EAClBrB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAMmlB,YAAa,MACxDtU,EAAOtM,KAAO,SAGX9E,KAAKyP,mBAAmBlP,EAAMyK,QAC9BhL,KAAKyP,mBAAmBlP,EAAMolB,YAC9B3lB,KAAKyP,mBAAmBlP,EAAMqlB,WAC9B5lB,KAAKyP,mBAAmBlP,EAAMgd,WAC9Bvd,KAAKyP,mBAAmBlP,EAAM8c,QAC9Brd,KAAKyP,mBAAmBlP,EAAMkT,WAC9BzT,KAAKyP,mBAAmBlP,EAAM+Y,SAE/BlI,EAAOtM,KAAO,gBAIhBsM,EAAOqB,UAAYzS,KAAKwO,cAA2D,MAA3CxO,KAAK2Q,kBAAkBpQ,EAAM2Y,IAAK,KAC1E9H,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAMwB,KAAM,MACjDqP,EAAOtM,KAAqB,cAAdvE,EAAM+P,IAAsB,eAAwB,WAE7Dc,CACT,CAEQkU,UAAU/kB,GAChB,MAAMmR,EAAO,IAAI,IAMjB,GALAA,EAAK0D,eAAiBpV,KAAK2Q,kBAAkBpQ,EAAMslB,QACnDnU,EAAK4D,OAAStV,KAAK2Q,kBAAkBpQ,EAAMilB,OAC3C9T,EAAK8D,KAAOxV,KAAK2Q,kBAAkBpQ,EAAMulB,OACzCpU,EAAKgE,MAAQ1V,KAAK8Q,aAAavQ,EAAMilB,QAEhCxlB,KAAKyP,mBAAmBlP,EAAMwlB,QAAUxlB,EAAMwlB,MAAM5V,QAAQ,MAAQ,EAAG,CAC1E,MAAM6V,EAAczlB,EAAMwlB,MAAiBlV,MAAM,KAC7CmV,EAAWlf,OAAS,IACtB4K,EAAKE,QAAUoU,EAAW,GAC1BtU,EAAKC,SAAWqU,EAAW,GACE,IAAzBtU,EAAKC,SAAS7K,QAAqC,MAArB4K,EAAKC,SAAS,KAC9CD,EAAKC,SAAWD,EAAKC,SAAS,I,CAKpC,OAAOD,CACT,CAEQ6T,cAAchlB,GACpB,MAAMyT,EAAW,IAAI,IAsBrB,OArBAA,EAAShJ,MAAQhL,KAAK2Q,kBAAkBpQ,EAAMyK,OAC9CgJ,EAASC,UAAYjU,KAAK2Q,kBAAkBpQ,EAAMolB,WAClD3R,EAASG,WAAanU,KAAK2Q,kBAAkBpQ,EAAM0lB,YACnDjS,EAASE,SAAWlU,KAAK2Q,kBAAkBpQ,EAAMqlB,UACjD5R,EAASP,SAAWzT,KAAK2Q,kBAAkBpQ,EAAMkT,UACjDO,EAASkS,QAAUlmB,KAAK2Q,kBAAkBpQ,EAAM2lB,SAChDlS,EAAS+I,IAAM/c,KAAK2Q,kBAAkBpQ,EAAMwc,KAC5C/I,EAASuJ,SAAWvd,KAAK2Q,kBAAkBpQ,EAAMgd,UACjDvJ,EAASmS,SAAWnmB,KAAK2Q,kBAAkBpQ,EAAM4lB,UACjDnS,EAASoS,SAAWpmB,KAAK2Q,kBAAkBpQ,EAAM6lB,UACjDpS,EAASyJ,KAAOzd,KAAK2Q,kBAAkBpQ,EAAMkd,MAC7CzJ,EAAS8I,MAAQ9c,KAAK2Q,kBAAkBpQ,EAAMuc,OAC9C9I,EAAS0J,WAAa1d,KAAK2Q,kBAAkBpQ,EAAMsK,KACnDmJ,EAAS2J,QAAU3d,KAAK2Q,kBAAkBpQ,EAAMod,SAChD3J,EAASsF,MAAQtZ,KAAK2Q,kBAAkBpQ,EAAM+Y,OAC9CtF,EAASqJ,MAAQrd,KAAK2Q,kBAAkBpQ,EAAM8c,OAEzCrd,KAAKyP,mBAAmBuE,EAAShJ,SACpCgJ,EAAShJ,MAAQgJ,EAAShJ,MAAMqb,OAAO,GAAGpH,cAAgBjL,EAAShJ,MAAMoJ,MAAM,IAG1EJ,CACT,CAEQqR,gBAAgB9kB,EAAY6Q,GAClC,MAAMkV,EAAatmB,KAAKiP,aAAa1O,EAAM4Y,OAC3C,IAAIoN,GAAgB,EAEpB,GAAID,EAAWxf,OAAQ,CACrB,MAAM0f,EAAYF,EAAW,GAAGzV,MAAM,KACtC,GACE2V,EAAU1f,OAAS,GACF,aAAjB0f,EAAU,KACQ,gBAAjBA,EAAU,IAAyC,YAAjBA,EAAU,IAC7C,CACA,GAAqB,gBAAjBA,EAAU,GAAsB,CAClC,MAAMC,EAAazmB,KAAK0mB,uBAAiCtV,EAAQkV,EAAY,CAC3EK,OAAQ,SACR,eAAgB,iBAChB,gBAAiB,OAGjB,kBAAmB,aAGrB,GAAI3mB,KAAKyP,mBAAmBgX,EAAW9U,WAAqC,MAAxB8U,EAAW9U,SAE7D8U,EAAW9U,cAAWiV,MACjB,CACL,MAAOC,EAAarV,GAAQiV,EAAW9U,SAASd,MAAM,KAEtD,GAAK7Q,KAAKyP,mBAAmBoX,GAQ3BJ,EAAW9U,cAAWiV,MARmB,CACzC,MAAMrV,EAAQ,IAAI4J,KAAKA,KAAK7G,MAAMuS,EAAY1X,OAAS,aAAa2X,WAAa,EAC7EC,MAAMxV,GACRkV,EAAW9U,cAAWiV,EAEtBH,EAAW9U,SAAWJ,EAAM8N,U,CAK3Brf,KAAKyP,mBAAmB+B,KAC3BiV,EAAW7U,QAAUJ,E,CAIzBJ,EAAOtM,KAAO,SACdsM,EAAOM,KAAO+U,C,MACT,GAAqB,YAAjBD,EAAU,GAAkB,CACrC,MAAMC,EAAazmB,KAAK0mB,uBAAqCtV,EAAQkV,EAAY,CAC/EtB,MAAO,QACP,aAAc,YACd,YAAa,WACb,cAAe,aACfgC,QAAS,UACT,YAAa,WACb,YAAa,WACb,YAAa,WACb,cAAe,OACfC,MAAO,QACP,oBAAqB,aACrBC,QAAS,UACT,gBAAiB,QACjBvM,SAAU,aAEZvJ,EAAOtM,KAAO,aACdsM,EAAO4C,SAAWyS,C,CAEpBF,GAAgB,C,EAIfA,IACHnV,EAAOwC,WAAa,IAAI,IACxBxC,EAAOwC,WAAW9O,KAAO,YACzBsM,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAM4Y,OAEhD,CAEQuN,uBAA0BtV,EAAoBkV,EAAsBvU,GAC1E,MAAMoV,EAAe,CAAC,EAEtB,IAAIC,GAAkB,EAuCtB,OAtCAd,EAAWpa,SAASmb,IAClB,IAAItU,EAAc,KACdwB,EAAc,KAClB,IAAK6S,EAAiB,CACpB,GAAIpnB,KAAKyP,mBAAmB4X,GAC1B,OAEF,MAAMxD,EAAawD,EAAUlX,QAAQ,KASrC,IARoB,IAAhB0T,EACF9Q,EAAMsU,GAENtU,EAAMsU,EAAUjX,UAAU,EAAGyT,GACzBwD,EAAUvgB,OAAS+c,IACrBtP,EAAM8S,EAAUjX,UAAUyT,EAAa,KAGvC7jB,KAAKyP,mBAAmBsD,IAAQ/S,KAAKyP,mBAAmB8E,IAAgB,aAARxB,EAClE,M,CAIAqU,EACFhW,EAAOsB,OAAS,KAAO2U,EACN,UAARtU,GACJ/S,KAAKyP,mBAAmB2B,EAAOsB,OAGlCtB,EAAOsB,MAAQ6B,EAFfnD,EAAOsB,OAAS,KAAO6B,EAIzB6S,GAAkB,GAETrV,EAAI6H,eAAe7G,GAC5BoU,EAAQpV,EAAIgB,IAAQwB,EAEpBvU,KAAK8S,WAAW1B,EAAQ2B,EAAKwB,E,IAI1B4S,CACT,ECtRK,MAAMG,WAA6BvZ,EACxCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,GAAIA,EAAMuG,OAAS,EACjB,OAEF,MAAMsK,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAM,GAAI,MAC/C6Q,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAM,IACrD6Q,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAM,IACrD6Q,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAM,IAC5CP,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,ECxBK,MAAM+c,WAA2BxZ,EACtCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,MAAM6Q,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAMinB,YAAa,MACxDpW,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMif,OAC5CpO,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAMknB,UACrDrW,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMsa,UACrDzJ,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAMmnB,KAC5C1nB,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,ECnBK,MAAMmd,WAA2B5Z,EACtCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,GAAIA,EAAMuG,OAAS,EACjB,OAGF,MAAMqM,EAC+C,eAAnDnT,KAAK2Q,kBAAkBpQ,EAAM,GAAI,cAAiCA,EAAM,GAAK,KAC/EP,KAAKkT,cAAc1I,EAAQ2I,GAE3B,MAAM/B,EAASpR,KAAKwS,kBAGpB,GAFApB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAM,GAAI,MAE9B,eAAbA,EAAM,IAAoC,UAAbA,EAAM,GACrC6Q,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAM,IAC5C6Q,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAM,IACrD6Q,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAM,IACrD6Q,EAAOsB,MAAS1S,KAAKyP,mBAAmBlP,EAAM,IAAyC,KAAnCA,EAAM,GAAGsQ,MAAM,OAAO3B,KAAK,WAC1E,GAAI3O,EAAMuG,OAAS,EAAG,CAC3BsK,EAAOtM,KAAO,eACdsM,EAAOwC,WAAa,IAAI,IACxBxC,EAAOwC,WAAW9O,KAAO,YACzB,IAAK,IAAIyO,EAAI,EAAGA,EAAIhT,EAAMuG,OAAQyM,IAC3BvT,KAAKyP,mBAAmBlP,EAAMgT,MACjCnC,EAAOsB,OAASnS,EAAMgT,GAAK,K,CAK5BvT,KAAKyP,mBAAmBlP,EAAM,KAAO6Q,EAAOtM,OAAS,YACxDsM,EAAOrP,KAAOxB,EAAM,GAAK,KAAO6Q,EAAOrP,MAGzC/B,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAGzBpR,KAAKwO,cACPxO,KAAK6R,yBAAyBrH,GAGhCA,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,EChDF,MAAMod,GAAoB,CAAC,WAAY,kBACjCC,GAA4B,IAAIxM,IACpCuM,GAAkBjgB,OAAO,CAAC,MAAO,WAAY,WAAY,iBAErDmgB,GAA2B,IAAIzM,IACnCuM,GAAkBjgB,OAAO,CAAC,aAAc,WAAY,YAAa,WAAY,SAGzEogB,GAAyB,IAAI1M,IACjCuM,GAAkBjgB,OAAO,CACvB,QACA,YACA,aACA,WACA,QACA,mBACA,oBACA,OACA,UACA,aAIEqgB,GAAuB,IAAI3M,IAAIuM,GAAkBjgB,OAAO,CAAC,SAAU,WAAY,eAE/EsgB,GAAsB,IAAI5M,IAAIuM,GAAkBjgB,OAAO,CAAC,eAExDugB,GAAyB,IAAI7M,IAAIuM,GAAkBjgB,OAAO,CAAC,aAE1D,MAAMwgB,WAAwBpa,EACnCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,MAAM6Q,EAASpR,KAAKwS,kBAIpB,GAHApB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAM6nB,SAAU,MACrDhX,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAM8nB,qBAE1BzB,IAAdrmB,EAAM+P,IAERc,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAM+P,KAC5Cc,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAMkT,UACrDrC,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMmT,UACrDtC,EAAOwB,MAAM6D,KAAOzW,KAAK2Q,kBAAkBpQ,EAAM+nB,aAEjDtoB,KAAKoc,qBAAqBhL,EAAQ7Q,EAAOsnB,SACpC,QAAwBjB,IAApBrmB,EAAMgoB,UAEfnX,EAAOwB,MAAM6D,KAAOzW,KAAK2Q,kBAAkBpQ,EAAMgoB,WAEjDvoB,KAAKoc,qBAAqBhL,EAAQ7Q,EAAO0nB,SACpC,QAAyBrB,IAArBrmB,EAAMgV,WAEfnE,EAAOM,KAAO,IAAI,IAClBN,EAAOtM,KAAO,SACdsM,EAAOM,KAAK0D,eAAiBpV,KAAK2Q,kBAAkBpQ,EAAMioB,UAC1DpX,EAAOM,KAAK4D,OAAStV,KAAK2Q,kBAAkBpQ,EAAMgV,YAClDnE,EAAOM,KAAKgE,MAAQ1V,KAAK8Q,aAAaM,EAAOM,KAAK4D,QAClDlE,EAAOM,KAAKC,SAAW3R,KAAK2Q,kBAAkBpQ,EAAMkoB,WACpDrX,EAAOM,KAAKE,QAAU5R,KAAK2Q,kBAAkBpQ,EAAMmoB,UACnDtX,EAAOM,KAAK8D,KAAOxV,KAAK2Q,kBAAkBpQ,EAAMkV,KAEhDzV,KAAKoc,qBAAqBhL,EAAQ7Q,EAAOunB,SACpC,QAAwBlB,IAApBrmB,EAAM0T,UAEf7C,EAAO4C,SAAW,IAAI,IACtB5C,EAAOtM,KAAO,aACdsM,EAAO4C,SAAShJ,MAAQhL,KAAK2Q,kBAAkBpQ,EAAMyK,OACrDoG,EAAO4C,SAASC,UAAYjU,KAAK2Q,kBAAkBpQ,EAAM0T,WACzD7C,EAAO4C,SAASG,WAAanU,KAAK2Q,kBAAkBpQ,EAAM4T,YAC1D/C,EAAO4C,SAASE,SAAWlU,KAAK2Q,kBAAkBpQ,EAAM2T,UACxD9C,EAAO4C,SAASqJ,MAAQrd,KAAK2Q,kBAAkBpQ,EAAM+U,QACrDlE,EAAO4C,SAASsF,MAAQtZ,KAAK2Q,kBAAkBpQ,EAAM+Y,OACrDlI,EAAO4C,SAASuJ,SAAWvd,KAAK2Q,kBAAkBpQ,EAAMooB,kBACxDvX,EAAO4C,SAASmS,SAAWnmB,KAAK2Q,kBAAkBpQ,EAAMqoB,mBACxDxX,EAAO4C,SAASyJ,KAAOzd,KAAK2Q,kBAAkBpQ,EAAMkd,MACpDrM,EAAO4C,SAAS2J,QAAU3d,KAAK2Q,kBAAkBpQ,EAAMod,SACvDvM,EAAO4C,SAAS0J,WAAa1d,KAAK2Q,kBAAkBpQ,EAAMsoB,SAE1D7oB,KAAKoc,qBAAqBhL,EAAQ7Q,EAAOwnB,SACpC,QAAqBnB,IAAjBrmB,EAAMuoB,OAAsB,CAQrC,OALA1X,EAAO4C,SAAW,IAAI,IACtB5C,EAAOtM,KAAO,aACd9E,KAAK6T,gBAAgBzC,EAAQ7Q,EAAMwoB,QACnC3X,EAAO4C,SAAS2J,QAAU3d,KAAK2Q,kBAAkBpQ,EAAMyoB,WAE/CzoB,EAAMuoB,QAaZ,IAAK,WACH1X,EAAO4C,SAAS6I,eAAiBtc,EAAM0oB,SACvC,MACF,IAAK,kBACH7X,EAAO4C,SAAS+I,IAAMxc,EAAM0oB,SAC5B,MACF,QACE7X,EAAO4C,SAAS4I,cAAgBrc,EAAM0oB,SAI1CjpB,KAAKoc,qBAAqBhL,EAAQ7Q,EAAOynB,G,KACpC,SAAsBpB,IAAlBrmB,EAAMyG,QASf,OAPAoK,EAAOwC,WAAa,IAAI,IACxBxC,EAAOtM,KAAO,eACdsM,EAAOwC,WAAW9O,KAAO,YACzBsM,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMyG,SAE5ChH,KAAKoc,qBAAqBhL,EAAQ7Q,EAAO2nB,G,CAK3CloB,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,CAEA4R,qBAAqBhL,EAAoB/B,EAAUiN,GAC1BvN,OAAO6M,KAAKvM,GAAKxH,QAAQ4T,IAAOa,EAAanE,IAAIsD,KACzDvP,SAAS6G,IACtB,MAAM6K,EAAOvO,EACbrP,KAAK8S,WAAW1B,EAAQ2B,EAAK6K,EAAK7K,GAAK,GAE3C,EC5HK,MAAMmW,WAA4Bnb,EACvCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAA+BzH,KAAK2O,SAAS1O,GAAM,GACzD,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAASid,IACf,MAAMC,EAAappB,KAAKqpB,aAAaF,GACrC,QAAmBvC,IAAfwC,EACF,OAGGppB,KAAKwO,cACRxO,KAAKkT,cAAc1I,EAAQ2e,EAAOhT,QAGpC,MAAM/E,EAAS,IAAI,IAInB,OAHAA,EAAOrP,KAAO/B,KAAK2Q,kBAAkBwY,EAAOpnB,KAAM,MAClDqP,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBwY,EAAOpU,MAErCqU,GACN,KAAK,UACHhY,EAAOtM,KAAO,UACdsM,EAAOwB,MAAQ,IAAI,IACnBxB,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBwY,EAAO1V,UACtDrC,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBwY,EAAOzV,UACtDtC,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAawZ,EAAO7Y,KAC7C,MACF,KAAK,SACHc,EAAOtM,KAAO,SACdsM,EAAOM,KAAK0D,eAAiBpV,KAAK2Q,kBAAkBwY,EAAOG,gBAC3DlY,EAAOM,KAAK4D,OAAStV,KAAK2Q,kBAAkBwY,EAAOI,YACnDnY,EAAOM,KAAK8D,KAAOxV,KAAK2Q,kBAAkBwY,EAAOK,KACjDpY,EAAOM,KAAKgE,MAAQ1V,KAAK8Q,aAAaM,EAAOM,KAAK4D,QAClDtV,KAAKmR,kBAAkBC,EAAQ+X,EAAOM,YACtC,MAEF,KAAK,aACHrY,EAAOtM,KAAO,aAEd9E,KAAK6T,gBAAgBzC,EAAQpR,KAAK2Q,kBAAkBwY,EAAOO,YAC3DtY,EAAO4C,SAASuJ,SAAWvd,KAAK2Q,kBAAkBwY,EAAO5L,UACzDnM,EAAO4C,SAASmS,SAAWnmB,KAAK2Q,kBAAkBwY,EAAOhD,UACzD/U,EAAO4C,SAASyJ,KAAOzd,KAAK2Q,kBAAkBwY,EAAO1L,MACrDrM,EAAO4C,SAAS8I,MAAQ9c,KAAK2Q,kBAAkBwY,EAAOrM,OACtD1L,EAAO4C,SAAS0J,WAAa1d,KAAK2Q,kBAAkBwY,EAAOnK,SAC3D5N,EAAO4C,SAAS2J,QAAU3d,KAAK2Q,kBAAkBwY,EAAOxL,SACzB,MAA3BvM,EAAO4C,SAAS2J,UAClBvM,EAAO4C,SAAS2J,QAAUvM,EAAO4C,SAAS2J,QAAQsB,eAEpD7N,EAAO4C,SAASsF,MAAQtZ,KAAK2Q,kBAAkBwY,EAAO7P,OACtDlI,EAAO4C,SAASqJ,MAAQrd,KAAK2Q,kBAAkBwY,EAAO7L,cACtD,MACF,KAAK,eACHlM,EAAOtM,KAAO,eACdsM,EAAOwC,WAAW9O,KAAO,YAM7B9E,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAGzBpR,KAAKwO,cACPxO,KAAK6R,yBAAyBrH,GAGhCA,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,CAEQ6e,aAAaF,GACnB,OAAKnpB,KAAKyP,mBAAmB0Z,EAAO1V,UAI/BzT,KAAKyP,mBAAmB0Z,EAAOI,YAI/BvpB,KAAKyP,mBAAmB0Z,EAAOO,WAI/B1pB,KAAKyP,mBAAmB0Z,EAAOpU,WAApC,EACS,eAJA,aAJA,SAJA,SAgBX,E,IClGU4U,GA0CAC,G,YCzDL,MAAMC,WAAgC9b,EAA7C,c,oBACE,KAAAvD,OAAS,IAAI+C,CAsQf,CApQE+G,MAAMrU,GAuBJ,OAtBAA,EAAK4Q,MAAM7Q,KAAKgO,cAAc9B,SAAS4d,IACrC,GAAI9pB,KAAKyP,mBAAmBqa,IAAqB,MAAZA,EAAK,GACxC,OAEF,MAAMlM,EAAOhJ,KAAKN,MAAMwV,GACxB,IAAqB,IAAjBlM,EAAKmM,QACP,OAEF,MAAM3Y,EAASpR,KAAKwS,kBAEhBxS,KAAKyP,mBAAmBmO,EAAKoM,MAC/BhqB,KAAKiqB,oBAAoBrM,EAAMxM,GAE/BpR,KAAKkqB,sBAAsBtM,EAAMxM,GAGnCpR,KAAKwT,sBAAsBpC,GAC3BpR,KAAK6S,cAAczB,GACnBpR,KAAKwK,OAAOkD,QAAQwC,KAAKkB,EAAO,IAGlCpR,KAAKwK,OAAOgD,SAAU,EACf3D,QAAQC,QAAQ9J,KAAKwK,OAC9B,CAEQ0f,sBAAsBtM,EAAWxM,GACvC,GAAqB,MAAjBwM,EAAKuM,WACP/Y,EAAOrP,KAAO/B,KAAK2Q,kBAAkBiN,EAAKuM,SAASnf,OACzB,MAAtB4S,EAAKuM,SAASC,MAAc,CAC9B,MAAMtJ,EAAiB,GACvBlD,EAAKuM,SAASC,KAAKle,SAASoE,IACrBtQ,KAAKyP,mBAAmBa,EAAIL,IAC/B6Q,EAAK5Q,KAAKI,EAAIL,E,IAGlBmB,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAamR,E,CAItB,MAAhBlD,EAAKyM,UAC6B,MAAhCzM,EAAKyM,QAAQnS,iBACflY,KAAKsqB,qBAAqB1M,EAAKyM,QAAQnS,gBAAiB9G,GAGvDpR,KAAKyP,mBAAmBmO,EAAKyM,QAAQ7E,QACrCxlB,KAAKyP,mBAAmBmO,EAAKyM,QAAQ5U,KAKrCzV,KAAKyP,mBAAmBmO,EAAKyM,QAAQ1E,YACrC3lB,KAAKyP,mBAAmBmO,EAAKyM,QAAQ9M,YAEtCnM,EAAOtM,KAAO,aACdsM,EAAO4C,SAAW,IAAI,MAPtB5C,EAAOtM,KAAO,SACdsM,EAAOM,KAAO,IAAI,KAQhBN,EAAOtM,OAAS,WAAqB9E,KAAKyP,mBAAmBmO,EAAKyM,QAAQ3W,YAC5EtC,EAAOwB,MAAMc,SAAWkK,EAAKyM,QAAQ3W,UAElC1T,KAAKyP,mBAAmBmO,EAAKyM,QAAQE,cACxCnZ,EAAOsB,MAAQkL,EAAKyM,QAAQE,WAAW1Z,MAAM7Q,KAAKgO,cAAckB,KAAK,MAAQ,MAEpD,MAAvB0O,EAAKyM,QAAQ1X,QACf3S,KAAKwqB,YAAY5M,EAAKyM,QAAQ1X,OAAQvB,EAAQ,cAAe,QAAS,QAE3C,MAAzBwM,EAAKyM,QAAQI,UACf7M,EAAKyM,QAAQI,SAASve,SAASwe,IACP,MAAlBA,EAAQ/X,QACV3S,KAAKwqB,YAAYE,EAAQ/X,OAAQvB,EAAQ,IAAK,IAAK,I,IAK7D,CAEQ6Y,oBAAoBrM,EAAWxM,GAkBrC,GAjBAA,EAAOqB,YAAWmL,EAAK+M,eAAgB/M,EAAK+M,aAAaC,WACzDxZ,EAAOrP,KAAO/B,KAAK2Q,kBAAkBiN,EAAK5S,OAEpB,2BAAlB4S,EAAKiN,UACPzZ,EAAOtM,KAAO,eACdsM,EAAOwC,WAAa,IAAI,IACxBxC,EAAOwC,WAAW9O,KAAO,aACE,gCAAlB8Y,EAAKiN,UACdzZ,EAAOtM,KAAO,SACdsM,EAAOM,KAAO,IAAI,KACS,wBAAlBkM,EAAKiN,UACdzZ,EAAOtM,KAAO,aACdsM,EAAO4C,SAAW,IAAI,KAEtB5C,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAaiO,EAAKkN,UAGlB,MAAvBlN,EAAKmN,eAAwB,CAO/B,GAN2C,MAAvCnN,EAAKmN,eAAe7S,iBACtBlY,KAAKsqB,qBAAqB1M,EAAKmN,eAAe7S,gBAAiB9G,GAE5DpR,KAAKyP,mBAAmBmO,EAAKmN,eAAeR,cAC/CnZ,EAAOsB,MAAQkL,EAAKmN,eAAeR,WAAW1Z,MAAM7Q,KAAKgO,cAAckB,KAAK,MAAQ,MAElFkC,EAAOtM,OAAS,YACb9E,KAAKyP,mBAAmBmO,EAAKmN,eAAerX,YAC/CtC,EAAOwB,MAAMc,SAAWkK,EAAKmN,eAAerX,UAEd,MAA5BkK,EAAKmN,eAAeX,MAAc,CACpC,MAAMtJ,EAAiB,GACvBlD,EAAKmN,eAAeX,KAAKle,SAAS+D,IAC3BjQ,KAAKyP,mBAAmBQ,EAAEK,MAC7BwQ,EAAK5Q,KAAKD,EAAEK,I,IAGZwQ,EAAKha,OAAS,IAChBsK,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAamR,G,CAIV,MAA9BlD,EAAKmN,eAAepY,QACtB3S,KAAKwqB,YAAY5M,EAAKmN,eAAepY,OAAQvB,EAAQ,cAAe,QAAS,QAE3C,MAAhCwM,EAAKmN,eAAeN,UACtB7M,EAAKmN,eAAeN,SAASve,SAASwe,IACd,MAAlBA,EAAQ/X,QACV3S,KAAKwqB,YAAYE,EAAQ/X,OAAQvB,EAAQ,IAAK,IAAK,I,IAK7D,CAEQkZ,qBAAqBvT,EAAc3F,GACzC,MAAM4Z,EAAUjU,EAAMjQ,OAAS,EAAI,EAAIiQ,EAAMjQ,OAC7CsK,EAAO8G,gBAAkBnB,EACtBlP,QAAQojB,IAAYjrB,KAAKyP,mBAAmBwb,EAAE1qB,QAAoB,MAAV0qB,EAAEC,OAC1DjjB,MAAK,CAACC,EAAGC,IAAMA,EAAE+iB,KAAOhjB,EAAEgjB,OAC1B9W,MAAM,EAAG4W,GACTjZ,KAAKkZ,IACJ,MAAME,EAAK,IAAI,KAGf,OAFAA,EAAGzX,SAAWuX,EAAE1qB,MAChB4qB,EAAGC,aAAe,IAAIjQ,MAAM,GAAK8P,EAAEC,MAAMpkB,QAAU,GAAKmkB,EAAEC,KAAgB,IAATD,EAAEC,MAC5DC,CAAE,GAEf,CAEQX,YACN7X,EACAvB,EACAia,EACAC,EACA9H,GAEA7Q,EAAOzG,SAAS+G,IACd,GAAuB,MAAnBA,EAAMqY,IAA2D,KAAtCrY,EAAMqY,GAAUjM,WAAWlQ,OACxD,OAIF,MAAM8Q,EACQ,SAAZhN,EAAMsY,EACF,IAAIpQ,KAAuB,IAAlBlI,EAAMqY,IAAkBE,cACjCvY,EAAMqY,GAAUjM,WAChBoM,EACqB,MAAzBxY,EAAMoY,GAA0BpY,EAAMoY,GAAgBhM,WAAa,KAErE,GAAIjO,EAAOtM,OAAS,UAAkB,CACpC,GAAI9E,KAAKyP,mBAAmB2B,EAAOwB,MAAMa,WAAkC,aAArBgY,EAEpD,YADAra,EAAOwB,MAAMa,SAAWwM,GAEnB,GACLjgB,KAAKyP,mBAAmB2B,EAAOwB,MAAMc,WAChB,aAArB+X,EAGA,YADAra,EAAOwB,MAAMc,SAAWuM,GAEnB,GACLjgB,KAAKyP,mBAAmB2B,EAAOwB,MAAM6D,OACjB,MAApBgV,GACAA,EAAiBjb,WAAW,SAG5B,YADAY,EAAOwB,MAAM6D,KAAOwJ,E,MAGjB,GAAI7O,EAAOtM,OAAS,SAAiB,CAC1C,GAAI9E,KAAKyP,mBAAmB2B,EAAOM,KAAK4D,SAAgC,UAArBmW,EAGjD,OAFAra,EAAOM,KAAK4D,OAAS2K,OACrB7O,EAAOM,KAAKgE,MAAQ1V,KAAK8Q,aAAamP,IAEjC,GAAIjgB,KAAKyP,mBAAmB2B,EAAOM,KAAK8D,OAA8B,QAArBiW,EAEtD,YADAra,EAAOM,KAAK8D,KAAOyK,GAEd,GACLjgB,KAAKyP,mBAAmB2B,EAAOM,KAAK0D,iBACf,eAArBqW,EAGA,YADAra,EAAOM,KAAK0D,eAAiB6K,GAExB,GACLjgB,KAAKyP,mBAAmB2B,EAAOM,KAAKL,aACf,WAArBoa,GACsB,IAAtBxL,EAAWnZ,OAOX,OALAsK,EAAOM,KAAKC,SAAYsO,EAAsBxO,OAAO,EAAG,GACxB,MAA5BL,EAAOM,KAAKC,SAAS,KACvBP,EAAOM,KAAKC,SAAWP,EAAOM,KAAKC,SAASF,OAAO,EAAG,SAExDL,EAAOM,KAAKE,QAAWqO,EAAsBxO,OAAO,EAAG,IAElD,GAAyB,SAArBga,EAET,M,MAEG,GAAIra,EAAOtM,OAAS,aAAqB,CAC9C,MAAMkP,EAAW5C,EAAO4C,SACxB,GAAIhU,KAAKyP,mBAAmBuE,EAASC,YAAmC,cAArBwX,EAEjD,YADAzX,EAASC,UAAYgM,GAEhB,GAAIjgB,KAAKyP,mBAAmBuE,EAASE,WAAkC,aAArBuX,EAEvD,YADAzX,EAASE,SAAW+L,GAEf,GAAIjgB,KAAKyP,mBAAmBuE,EAASG,aAAoC,YAArBsX,EAEzD,YADAzX,EAASG,WAAa8L,GAEjB,GAAIjgB,KAAKyP,mBAAmBuE,EAASqJ,QAA+B,aAArBoO,EAEpD,YADAzX,EAASqJ,MAAQ4C,GAEZ,GAAIjgB,KAAKyP,mBAAmBuE,EAASkS,UAAiC,YAArBuF,EAEtD,YADAzX,EAASkS,QAAUjG,GAEd,GAAIjgB,KAAKyP,mBAAmBuE,EAASsF,QAA+B,UAArBmS,EAEpD,YADAzX,EAASsF,MAAQ2G,GAEZ,GAAIjgB,KAAKyP,mBAAmBuE,EAASP,WAAkC,aAArBgY,EAEvD,YADAzX,EAASP,SAAWwM,GAEf,GAAyB,YAArBwL,EAAgC,CAEzC,MAAM,OAAEC,EAAM,KAAEjO,EAAI,QAAEE,EAAO,IAAE9S,GAAQoI,EAAMqY,GAO7C,OANAtX,EAASuJ,SAAWvd,KAAK2Q,kBAAkB+a,GAC3C1X,EAASyJ,KAAOzd,KAAK2Q,kBAAkB8M,GAClCzd,KAAKyP,mBAAmBkO,KAC3B3J,EAAS2J,QAAUA,EAAQsB,oBAE7BjL,EAAS0J,WAAa1d,KAAK2Q,kBAAkB9F,G,EAKjD,MAAMqV,EAAYlgB,KAAKyP,mBAAmBwD,EAAMuQ,IAAY,UAAYvQ,EAAMuQ,GAC9E,GACgB,aAAdtD,GAC0B,MAA1B9O,EAAO8G,iBACP9G,EAAO8G,gBAAgB2I,MAAMoK,GAAMA,EAAEvX,WAAauM,IAElD,OAGF,MAAM0L,EAAwB,cAAZ1Y,EAAMsY,EAAoB,WAAmB,SAC/DvrB,KAAK8S,WAAW1B,EAAQ8O,EAAWD,EAAY0L,EAAU,GAE7D,GDvPF,SAAYhC,GACV,cACA,mBACA,mBACA,iBACA,iBACA,iBACA,wBACA,oBACA,iBACA,uBACA,uBACA,mBACA,iBACA,uBACA,6BACA,uBACA,eACA,qBACA,uBACA,qBACD,CArBD,CAAYA,KAAAA,GAAY,KA0CxB,SAAYC,GACV,iBACA,mBACA,UACA,aACA,eACA,eACA,kBACA,cACD,CATD,CAAYA,KAAAA,GAAkB,KExCvB,MAAMgC,WAAgC7d,EAA7C,c,oBACE,KAAAvD,OAAS,IAAI+C,CA8lBf,CA5lBE+G,MAAMrU,GAgFJ,OA/E+B2U,KAAKN,MAAMrU,GAEf4rB,SAAS,GAG5BC,OAAO5f,SAAS6f,IACtBA,EAAMhV,MAAM7K,SAAS0R,IACnB,IAAqB,IAAjBA,EAAKmM,QACP,OAGF,MAAM3Y,EAASpR,KAAKwS,kBAEdqJ,EAAW+B,EAAKoO,aACtB,OAAQnQ,GACN,KAAK8N,GAAahI,MAClB,KAAKgI,GAAasC,SAClB,KAAKtC,GAAa9O,SAClB,KAAK8O,GAAauC,eAClB,KAAKvC,GAAawC,OAClB,KAAKxC,GAAayC,eAChBhb,EAAOtM,KAAO,UACdsM,EAAOwB,MAAQ,IAAI,IACnB,MACF,KAAK+W,GAAa9H,WAClB,KAAK8H,GAAa0C,YAChBjb,EAAOtM,KAAO,SACdsM,EAAOM,KAAO,IAAI,IAClB,MACF,KAAKiY,GAAa2C,WAClB,KAAK3C,GAAa4C,gBAClB,KAAK5C,GAAa6C,aAClB,KAAK7C,GAAa8C,cAEhBrb,EAAOtM,KAAO,eACdsM,EAAOwC,WAAa,IAAI,IACxBxC,EAAOwC,WAAW9O,KAAO,YACzB,MACF,KAAK6kB,GAAa+C,SAClB,KAAK/C,GAAagD,eAClB,KAAKhD,GAAaiD,eAClB,KAAKjD,GAAakD,WAClB,KAAKlD,GAAamD,SAClB,KAAKnD,GAAaoD,eAClB,KAAKpD,GAAaqD,qBAChB5b,EAAOtM,KAAO,aACdsM,EAAO4C,SAAW,IAAI,IAM1B5C,EAAOqB,SAA6B,IAAlBmL,EAAKqP,SAEvBjtB,KAAKktB,gBAAgBtP,EAAKuM,SAAU/Y,GAEpCpR,KAAKmtB,mBAAmBvP,EAAMxM,GAE9BpR,KAAKotB,eAAevR,EAAU+B,EAAKyM,QAASjZ,GAE5CpR,KAAKsqB,qBAAqB1M,EAAKyM,QAAQnS,gBAAiB9G,GAExDpR,KAAKqtB,gBAAgBxR,EAAU+B,EAAKyM,QAAQI,SAAUrZ,GAEjDpR,KAAKyP,mBAAmBmO,EAAKyM,QAAQE,cACxCnZ,EAAOsB,MAAQkL,EAAKyM,QAAQE,WAAW1Z,MAAM7Q,KAAKgO,cAAckB,KAAK,MAAQ,MAG/ElP,KAAKwT,sBAAsBpC,GAC3BpR,KAAK6S,cAAczB,GACnBpR,KAAKwK,OAAOkD,QAAQwC,KAAKkB,EAAO,GAChC,IAGApR,KAAKwO,cACPxO,KAAK6R,yBAAyB7R,KAAKwK,QAGrCxK,KAAKwK,OAAOgD,SAAU,EACf3D,QAAQC,QAAQ9J,KAAKwK,OAC9B,CAEQ0iB,gBAAgB/C,EAAoB/Y,GAC1C,GAAgB,MAAZ+Y,EAAJ,CAMA,GAFA/Y,EAAOrP,KAAO/B,KAAK2Q,kBAAkBwZ,EAASnf,OAEzB,MAAjBmf,EAASrJ,KAAc,CACzB,MAAMA,EAAiB,GACvBqJ,EAASrJ,KAAK5U,SAASoE,IAChBtQ,KAAKyP,mBAAmBa,EAAIA,MAC/BwQ,EAAK5Q,KAAKI,EAAIA,I,IAGlBc,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAamR,E,CAGxC,GAAqB,MAAjBqJ,EAASmD,MAAgBnD,EAASmD,KAAKxmB,OAAS,EAAG,CACrD,MAAMqM,EAAanT,KAAKutB,WAAWpD,EAASmD,KAAK,IACjDttB,KAAKkT,cAAclT,KAAKwK,OAAQ2I,E,EAEpC,CAEQoa,WAAWC,GACjB,OAAOA,EAAYre,OAAOsB,QAAQ,UAAW8S,GAAMA,EAAE9S,QAAQ,OAAQmH,GAAMA,EAAEqH,iBAC/E,CAEQkO,mBAAmBvP,EAAYxM,GACjB,MAAhBwM,EAAKyM,SAIuB,MAA5BzM,EAAKyM,QAAQoD,aAA2D,IAApC7P,EAAKyM,QAAQoD,YAAY3mB,QAIjE8W,EAAKyM,QAAQoD,YAAYvhB,SAASwhB,IAChC,GAA+B,aAA3BA,EAAWC,aAAmD,KAArBD,EAAWntB,MAGtD,OAFA6Q,EAAOtM,KAAO,eACdsM,EAAOwB,MAAMa,SAAWia,EAAWntB,OAIrC,GAA+B,aAA3BmtB,EAAWC,aAAmD,KAArBD,EAAWntB,MAGtD,OAFA6Q,EAAOtM,KAAO,eACdsM,EAAOwB,MAAMc,SAAWga,EAAWntB,OAIrC,IAAI0f,EAAayN,EAAWntB,MACxBorB,EAAuB,SAC3B,OAAQ+B,EAAW/B,WACjB,KAAK/B,GAAmB/O,SACtB8Q,EAAY,WACZ,MACF,KAAK/B,GAAmBgE,SACtB3N,EAAkC,KAArByN,EAAWntB,MAAe,OAAS,QAChDorB,EAAY,YAKhB3rB,KAAK8S,WAAW1B,EAAQsc,EAAW3rB,KAAMke,EAAY0L,EAAU,GAEnE,CAEQyB,eAAevR,EAAwBwO,EAAkBjZ,GAC3DyK,IAAa8N,GAAa9O,UAIf,MAAXwP,IAGJjZ,EAAOwB,MAAMc,SAAW2W,EAAQ3W,SAClC,CAEQ2Z,gBAAgBxR,EAAwB4O,EAA4BrZ,GAC1D,MAAZqZ,GAAwC,IAApBA,EAAS3jB,QAIjC2jB,EAASve,SAASwe,IACM,MAAlBA,EAAQ/X,QAIZ3S,KAAK6tB,mBAAmBhS,EAAU6O,EAAQ/X,OAAQvB,EAAO,GAE7D,CAEQyc,mBAAmBhS,EAAwBlJ,EAAwBvB,GACzEuB,EAAOzG,SAAS+G,IACd,MAAMqY,EAAWvc,OAAO6M,KAAK3I,EAAM1S,OAAO,GACpCutB,EAAW7a,EAEjB,GACoB,MAAlB6a,EAASvtB,OACmB,MAA5ButB,EAASvtB,MAAM+qB,IACc,KAA7BwC,EAASvtB,MAAM+qB,GAEf,OAGF,MAAMpL,EAAYlgB,KAAK+tB,aAAa9a,EAAMlL,GAAIkL,EAAMjI,OAC9CiV,EAAajgB,KAAKguB,aAAa/a,EAAM1S,MAAO+qB,GAElD,GAAIla,EAAOtM,OAAS,UAAkB,CACpC,GAAI9E,KAAKiuB,UAAUhb,EAAOgN,EAAY7O,GACpC,OAGF,OAAQyK,GACN,KAAK8N,GAAahI,MAClB,KAAKgI,GAAasC,SAClB,KAAKtC,GAAa6C,aAClB,KAAK7C,GAAauC,eAChB,MAEF,KAAKvC,GAAawC,OAChB,GAAInsB,KAAKyP,mBAAmB2B,EAAOwB,MAAMhD,MAAqB,QAAbqD,EAAMlL,GAErD,YADAqJ,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAasQ,IAGxC,MAEF,KAAK0J,GAAayC,eAChB,GAAIpsB,KAAKkuB,mBAAmBjb,EAAOgN,EAAY7O,GAC7C,O,MAMD,GAAIA,EAAOtM,OAAS,SAAiB,CAC1C,GAAI9E,KAAKmuB,eAAelb,EAAOgN,EAAY7O,GACzC,OAGF,GAAIyK,IAAa8N,GAAa0C,aACxBrsB,KAAKouB,gBAAgBnb,EAAOgN,EAAY7O,GAC1C,M,MAGC,GAAIA,EAAOtM,OAAS,aAAqB,CAC9C,GAAI9E,KAAKquB,aAAapb,EAAOgN,EAAY7O,EAAQka,GAC/C,OAEF,GAAiB,YAAbA,EAAwB,CAE1B,MAAM,OAAEI,EAAM,KAAEjO,EAAI,QAAEE,EAAO,IAAE9S,EAAG,MAAEiS,GAAU7J,EAAM1S,MAAMid,QAQ1D,OAPApM,EAAO4C,SAASuJ,SAAWvd,KAAK2Q,kBAAkB+a,GAClDta,EAAO4C,SAASyJ,KAAOzd,KAAK2Q,kBAAkB8M,GACzCzd,KAAKyP,mBAAmBkO,KAC3BvM,EAAO4C,SAAS2J,QAAUA,EAAQsB,eAEpC7N,EAAO4C,SAAS0J,WAAa1d,KAAK2Q,kBAAkB9F,QACpDuG,EAAO4C,SAAS8I,MAAQ9c,KAAK2Q,kBAAkBmM,G,CAIjD,OAAQjB,GACN,KAAK8N,GAAa+C,SAChB,MACF,KAAK/C,GAAagD,eAChB,GAAI3sB,KAAKsuB,mBAAmBrb,EAAOgN,EAAY7O,GAC7C,OAEF,MACF,KAAKuY,GAAaiD,eAChB,GAAI5sB,KAAKuuB,mBAAmBtb,EAAOgN,EAAY7O,GAC7C,OAEF,MACF,KAAKuY,GAAakD,WAChB,GAAI7sB,KAAKwuB,eAAevb,EAAOgN,EAAY7O,GACzC,OAEF,MACF,KAAKuY,GAAamD,SAChB,GAAI9sB,KAAKyuB,aAAaxb,EAAOgN,EAAY7O,GACvC,OAEF,MACF,KAAKuY,GAAaoD,eAChB,GAAI/sB,KAAK0uB,mBAAmBzb,EAAOgN,EAAY7O,GAC7C,OAEF,MACF,KAAKuY,GAAaqD,qBAChB,GAAIhtB,KAAK2uB,QAAQ1b,EAAOgN,EAAY7O,GAClC,O,CAQR,GAAiB,UAAbka,EAAsB,CAExB,MAAM,cAAEsD,EAAa,SAAEC,GAAa5b,EAAM1S,MAAM+Y,MAGhD,OAFAtZ,KAAK8S,WAAW1B,EAAQ8O,EAAW0O,EAAe,eAClD5uB,KAAK8S,WAAW1B,EAAQ,WAAYyd,EAAU,S,CAKhD,GACkB,aAAhB5b,EAAMjI,OACoB,MAA1BoG,EAAO8G,iBACP9G,EAAO8G,gBAAgB2I,MAAMoK,GAAMA,EAAEvX,WAAauM,IAElD,OAIEhN,EAAM6b,SAAW1d,EAAOgF,WAAa,WACvChF,EAAOgF,SAAW,cAGpB,MAAMuV,EAAyB,cAAbL,EAA2B,WAAmB,SAChEtrB,KAAK8S,WAAW1B,EAAQ8O,EAAWD,EAAY0L,EAAU,GAE7D,CAEQoC,aAAahmB,EAAYiD,GAC/B,OAAIhL,KAAKyP,mBAAmBzE,GACnBjD,EAILA,EAAGjB,OAAS,IAAMmK,OAAO,mBAAoB,KAAKC,KAAKnJ,GAClDiD,EAEFjD,CACT,CAEQimB,aAAaztB,EAAc+qB,GACjC,MAAiB,SAAbA,EACK,IAAInQ,KAAkB,IAAb5a,EAAMwuB,MAAavD,cAGpB,cAAbF,EACK/qB,EAAMyuB,UAAU3P,WAGjB9e,EAAc+qB,EACxB,CAEQ2C,UAAUhb,EAAqBgN,EAAoB7O,GACzD,MAAM8O,EAAYlgB,KAAK+tB,aAAa9a,EAAMlL,GAAIkL,EAAMjI,OAEpD,OAAIhL,KAAKyP,mBAAmB2B,EAAOwB,MAAMa,WAA2B,aAAdyM,GACpD9O,EAAOwB,MAAMa,SAAWwM,GACjB,GAGLjgB,KAAKyP,mBAAmB2B,EAAOwB,MAAMc,WAA2B,aAAdwM,GACpD9O,EAAOwB,MAAMc,SAAWuM,GACjB,MAIPjgB,KAAKyP,mBAAmB2B,EAAOwB,MAAM6D,OACzB,MAAZxD,EAAMlL,KACNkL,EAAMlL,GAAGyI,WAAW,YAEpBY,EAAOwB,MAAM6D,KAAOwJ,GACb,EAIX,CAEQiO,mBAAmBjb,EAAqBgN,EAAoB7O,GAClE,MAAM8O,EAAYlgB,KAAK+tB,aAAa9a,EAAMlL,GAAIkL,EAAMjI,OAEpD,OAAIhL,KAAKyP,mBAAmB2B,EAAOwB,MAAMc,WAA2B,eAAdwM,GACpD9O,EAAOwB,MAAMc,SAAWuM,GACjB,MAGLjgB,KAAKyP,mBAAmB2B,EAAOwB,MAAMhD,MAAsB,aAAdsQ,KAC/C9O,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAasQ,IAC/B,EAIX,CAEQkO,eAAelb,EAAqBgN,EAAoB7O,GAC9D,GAAIpR,KAAKyP,mBAAmB2B,EAAOM,KAAK4D,SAAwB,UAAbrC,EAAMlL,GAGvD,OAFAqJ,EAAOM,KAAK4D,OAAS2K,EACrB7O,EAAOM,KAAKgE,MAAQ1V,KAAK8Q,aAAamP,IAC/B,EAGT,GAAIjgB,KAAKyP,mBAAmB2B,EAAOM,KAAK8D,OAAsB,QAAbvC,EAAMlL,GAErD,OADAqJ,EAAOM,KAAK8D,KAAOyK,GACZ,EAGT,GAAIjgB,KAAKyP,mBAAmB2B,EAAOM,KAAK0D,iBAAgC,eAAbnC,EAAMlL,GAE/D,OADAqJ,EAAOM,KAAK0D,eAAiB6K,GACtB,EAGT,GAAIjgB,KAAKyP,mBAAmB2B,EAAOM,KAAKL,aAA4B,WAAb4B,EAAMlL,GAAiB,CAC5E,MAAMinB,EAAoB/O,EAAWZ,WAAWlQ,OAMhD,OALAiC,EAAOM,KAAKC,SAAWqd,EAAU5e,UAAU,EAAG,GACd,MAA5BgB,EAAOM,KAAKC,SAAS,KACvBP,EAAOM,KAAKC,SAAWP,EAAOM,KAAKC,SAASvB,UAAU,EAAG,IAE3DgB,EAAOM,KAAKE,QAAUod,EAAU5e,UAAU,EAAG,IACtC,C,CAGT,MAAiB,SAAb6C,EAAMlL,EAMZ,CAEQqmB,gBAAgBnb,EAAqBgN,EAAoB7O,GAC/D,SAAIpR,KAAKyP,mBAAmB2B,EAAOM,KAAK0D,iBAAgC,UAAbnC,EAAMlL,MAC/DqJ,EAAOM,KAAK0D,eAAiB6K,GACtB,EAIX,CAEQoO,aACNpb,EACAgN,EACA7O,EACAka,GAEA,GAAItrB,KAAKyP,mBAAmB2B,EAAO4C,SAASC,YAA2B,cAAbhB,EAAMlL,GAE9D,OADAqJ,EAAO4C,SAASC,UAAYgM,GACrB,EAGT,GAAIjgB,KAAKyP,mBAAmB2B,EAAO4C,SAASE,WAA0B,aAAbjB,EAAMlL,GAE7D,OADAqJ,EAAO4C,SAASE,SAAW+L,GACpB,EAGT,GAAIjgB,KAAKyP,mBAAmB2B,EAAO4C,SAASG,aAA4B,YAAblB,EAAMlL,GAE/D,OADAqJ,EAAO4C,SAASG,WAAa8L,GACtB,EAGT,GAAIjgB,KAAKyP,mBAAmB2B,EAAO4C,SAASqJ,QAAuB,aAAbpK,EAAMlL,GAE1D,OADAqJ,EAAO4C,SAASqJ,MAAQ4C,GACjB,EAGT,GAAIjgB,KAAKyP,mBAAmB2B,EAAO4C,SAASkS,UAAyB,YAAbjT,EAAMlL,GAE5D,OADAqJ,EAAO4C,SAASkS,QAAUjG,GACnB,EAGT,GAAIjgB,KAAKyP,mBAAmB2B,EAAO4C,SAASsF,OAAQ,CAClD,GAAiB,UAAbgS,EAAsB,CACxB,MAAM,cAAEsD,EAAa,SAAEC,GAAa5b,EAAM1S,MAAM+Y,MAGhD,OAFAlI,EAAO4C,SAASsF,MAAQtZ,KAAK2Q,kBAAkBie,GAC/C5uB,KAAK8S,WAAW1B,EAAQ,WAAYyd,EAAU,WACvC,C,CAGT,GAAiB,UAAb5b,EAAMlL,GAER,OADAqJ,EAAO4C,SAASsF,MAAQ2G,GACjB,C,CAIX,SAAIjgB,KAAKyP,mBAAmB2B,EAAO4C,SAASP,WAA0B,aAAbR,EAAMlL,MAC7DqJ,EAAO4C,SAASP,SAAWwM,GACpB,EAGX,CAEQqO,mBAAmBrb,EAAqBgN,EAAoB7O,GAClE,OAAIpR,KAAKyP,mBAAmB2B,EAAO4C,SAASC,YAA2B,aAAbhB,EAAMlL,IAC9D/H,KAAK6T,gBAAgBzC,EAAQ6O,IACtB,GAGLjgB,KAAKyP,mBAAmB2B,EAAO4C,SAASuJ,WAA0B,YAAbtK,EAAMlL,IAC7DqJ,EAAO4C,SAASuJ,SAAW0C,GACpB,GAILjgB,KAAKyP,mBAAmB2B,EAAO4C,SAAS2J,UAAyB,YAAb1K,EAAMlL,IAC5DqJ,EAAO4C,SAAS2J,QAAUsC,GACnB,GAGLjgB,KAAKyP,mBAAmB2B,EAAO4C,SAAS8I,QAAuB,UAAb7J,EAAMlL,IAC1DqJ,EAAO4C,SAAS8I,MAAQmD,GACjB,MAGLjgB,KAAKyP,mBAAmB2B,EAAO4C,SAAS4I,gBAA+B,WAAb3J,EAAMlL,MAClEqJ,EAAO4C,SAAS4I,cAAgBqD,GACzB,EAIX,CAEQsO,mBAAmBtb,EAAqBgN,EAAoB7O,GAClE,OAAIpR,KAAKyP,mBAAmB2B,EAAO4C,SAASC,YAA2B,SAAbhB,EAAMlL,IAC9D/H,KAAK6T,gBAAgBzC,EAAQ6O,IACtB,GAILjgB,KAAKyP,mBAAmB2B,EAAO4C,SAAS2J,UAAyB,YAAb1K,EAAMlL,IAC5DqJ,EAAO4C,SAAS2J,QAAUsC,GACnB,MAGLjgB,KAAKyP,mBAAmB2B,EAAO4C,SAAS8I,QAAuB,UAAb7J,EAAMlL,MAC1DqJ,EAAO4C,SAAS8I,MAAQmD,GACjB,EAIX,CAEQuO,eAAevb,EAAqBgN,EAAoB7O,GAC9D,OAAIpR,KAAKyP,mBAAmB2B,EAAO4C,SAASC,YAA2B,gBAAbhB,EAAMlL,IAC9D/H,KAAK6T,gBAAgBzC,EAAQ6O,IACtB,GAGLjgB,KAAKyP,mBAAmB2B,EAAO4C,SAASkS,UAAyB,aAAbjT,EAAMlL,IAC5DqJ,EAAO4C,SAASkS,QAAUjG,GACnB,MAGLjgB,KAAKyP,mBAAmB2B,EAAO4C,SAASqJ,QAAuB,UAAbpK,EAAMlL,MAC1DqJ,EAAO4C,SAASqJ,MAAQ4C,GACjB,EAIX,CAEQwO,aAAaxb,EAAqBgN,EAAoB7O,GAC5D,OAAIpR,KAAKyP,mBAAmB2B,EAAO4C,SAASC,YAA2B,aAAbhB,EAAMlL,IAC9D/H,KAAK6T,gBAAgBzC,EAAQ6O,IACtB,GAILjgB,KAAKyP,mBAAmB2B,EAAO4C,SAAS2J,UAAyB,oBAAb1K,EAAMlL,IAC5DqJ,EAAO4C,SAAS2J,QAAUsC,GACnB,MAGLjgB,KAAKyP,mBAAmB2B,EAAO4C,SAAS6I,iBAAgC,WAAb5J,EAAMlL,MACnEqJ,EAAO4C,SAAS6I,eAAiBoD,GAC1B,EAIX,CAEQyO,mBAAmBzb,EAAqBgN,EAAoB7O,GAClE,OAAIpR,KAAKyP,mBAAmB2B,EAAO4C,SAASC,YAA2B,gBAAbhB,EAAMlL,IAC9D/H,KAAK6T,gBAAgBzC,EAAQ6O,IACtB,MAGLjgB,KAAKyP,mBAAmB2B,EAAO4C,SAASkS,UAAyB,iBAAbjT,EAAMlL,MAC5DqJ,EAAO4C,SAASkS,QAAUjG,GACnB,EAIX,CAEQ0O,QAAQ1b,EAAqBgN,EAAoB7O,GACvD,OAAIpR,KAAKyP,mBAAmB2B,EAAO4C,SAASC,YAA2B,SAAbhB,EAAMlL,IAC9D/H,KAAK6T,gBAAgBzC,EAAQ6O,IACtB,MAGLjgB,KAAKyP,mBAAmB2B,EAAO4C,SAAS+I,MAAqB,WAAb9J,EAAMlL,MACxDqJ,EAAO4C,SAAS+I,IAAMkD,GACf,EAIX,CAEQqK,qBAAqB2E,EAAuC7d,GAClE,GAAoB,MAAhB6d,GAAgD,IAAxBA,EAAanoB,OACvC,OAGF,MAAMkkB,EAAUiE,EAAanoB,OAAS,EAAI,EAAImoB,EAAanoB,OAC3DsK,EAAO8G,gBAAkB+W,EACtBpnB,QAAQojB,IAAYjrB,KAAKyP,mBAAmBwb,EAAE1qB,QAAoB,MAAV0qB,EAAEC,OAC1DjjB,MAAK,CAACC,EAAGC,IAAMA,EAAE+iB,KAAOhjB,EAAEgjB,OAC1B9W,MAAM,EAAG4W,GACTjZ,KAAKkZ,IACJ,MAAME,EAAK,IAAI,KAGf,OAFAA,EAAGzX,SAAWuX,EAAE1qB,MAChB4qB,EAAGC,aAAe,IAAIjQ,MAAM,GAAK8P,EAAEC,MAAMpkB,QAAU,GAAKmkB,EAAEC,KAAgB,IAATD,EAAEC,MAC5DC,CAAE,GAEf,ECznBK,MAAM+D,GAEX1vB,YAAmB2vB,EAA0BhV,EAAyB/I,GAAnD,KAAA+d,aAAAA,EAA0B,KAAAhV,SAAAA,EAAyB,KAAA/I,OAAAA,EACpEpR,KAAKovB,cAAgBjV,EAASxN,aAChC,ECGK,MAAM0iB,GAAoB,CAC/B,QACA,aACA,aACA,KACA,QACA,OACA,QACA,OACA,SAGK,MAAeC,WAA+BvhB,EAArD,c,oBACY,KAAAwhB,qBAAuB,CAC/BvvB,KAAKwvB,iBACLxvB,KAAKyvB,iBACLzvB,KAAK0vB,cAEG,KAAAC,0BAA4B,CACpC3vB,KAAK4vB,oBACL5vB,KAAK6vB,0BACL7vB,KAAK8vB,4BACL9vB,KAAK+vB,qBAEG,KAAAC,wBAA0B,CAClChwB,KAAKiwB,qBACLjwB,KAAKkwB,mBACLlwB,KAAKmwB,oBACLnwB,KAAKowB,oBACLpwB,KAAKqwB,iBACLrwB,KAAKswB,iBACLtwB,KAAKuwB,mBAsVT,CAjVEjc,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,EAAM,CACxCuwB,UAAW,IACXC,WAAY,OAEd,OAAe,MAAXhpB,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,GAAIP,KAAKyP,mBAAmBzP,KAAK0wB,QAAQnwB,EAAO,UAC9C,OAGF,MAAM6Q,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO/B,KAAK2Q,kBAAkB3Q,KAAK0wB,QAAQnwB,EAAO,SAAU,MAEnEP,KAAK2wB,SAASpwB,EAAO6Q,GAErBpR,KAAK4wB,cAAcrwB,EAAO6Q,GAE1B,IAAIyf,EAAsB,KAC1B,IAAK,MAAM1W,KAAY5Z,EAAO,CAE5B,IAAKA,EAAMqZ,eAAeO,IAAana,KAAKyP,mBAAmBlP,EAAM4Z,IACnE,SAGF,MAAM2W,EAAU,IAAI5B,GAAoB3uB,EAAO4Z,EAAU/I,GACrDA,EAAOtM,OAAS,WAAoB9E,KAAK+wB,mBAAmBD,KAErD1f,EAAOtM,OAAS,UAAmB9E,KAAKgxB,wBAAwBF,IAEhE1f,EAAOtM,OAAS,cAAuB9E,KAAKixB,sBAAsBH,KAI7ED,EAAc7wB,KAAKkxB,gBAAgBJ,EAASD,I,CAI5Czf,EAAOtM,OAAS,YACf9E,KAAKyP,mBAAmBohB,IACzB7wB,KAAKyP,mBAAmB2B,EAAOwB,MAAMa,YACL,IAAhCod,EAAY1gB,QAAQ,SAEpBiB,EAAOwB,MAAMa,SAAWod,GAG1B7wB,KAAKwT,sBAAsBpC,GAC3BpR,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,CAEUkmB,QAAQ9R,EAAU7c,GAK1B,OAJiBgN,OAAOoiB,QAAQvS,GAAKwS,QAAO,CAACC,EAAUpX,KACrDoX,EAAIpX,EAAM,GAAGtN,eAAiBsN,EAAM,GAC7BoX,IACN,CAAC,GACYtvB,EAAK4K,cACvB,CAEU2kB,gBAAgB1S,EAAU2S,GAClC,MAAMC,EAAeziB,OAAO6M,KAAKgD,GAAKwS,QAAO,CAACC,EAAete,KACvDA,EAAIhD,MAAMwhB,IACZF,EAAInhB,KAAK6C,GAEJse,IACN,IACH,OAA4B,IAAxBG,EAAa1qB,OACR,KAEA8X,EAAI4S,EAAa,GAE5B,CAEUC,iBAAiB7S,EAAU7c,GACnC,MAAM2vB,EAAc3iB,OAAO6M,KAAKgD,GAAKwS,QAAO,CAACC,EAAepX,KACtDA,EAAMtN,cAAcglB,SAAS5vB,EAAK4K,gBACpC0kB,EAAInhB,KAAK+J,GAEJoX,IACN,IACH,OAA2B,IAAvBK,EAAY5qB,OACP,KAEA8X,EAAI8S,EAAY,GAE3B,CAEUf,SAASxB,EAAmB/d,GACpCA,EAAOsB,MACL1S,KAAK2Q,kBAAkB3Q,KAAK0wB,QAAQvB,EAAc,cAAe,IACjE,KACAnvB,KAAK2Q,kBAAkB3Q,KAAK0wB,QAAQvB,EAAc,SAAU,IAC5D,KACF/d,EAAOsB,MAAMvD,MACf,CAEU4hB,mBAAmBD,GAC3B,OAAO9wB,KAAKuvB,qBAAqB6B,QAAO,CAACC,EAAcO,KAChDP,IACHA,EAAMO,EAAKC,KAAK7xB,KAAV4xB,CAAgBd,IAEjBO,KACN,EACL,CAEUL,wBAAwBF,GAChC,OAAO9wB,KAAK2vB,0BAA0ByB,QAAO,CAACC,EAAcO,KACrDP,IACHA,EAAMO,EAAKC,KAAK7xB,KAAV4xB,CAAgBd,IAEjBO,KACN,EACL,CAEUJ,sBAAsBH,GAC9B,OAAO9wB,KAAKgwB,wBAAwBoB,QAAO,CAACC,EAAcO,KACnDP,IACHA,EAAMO,EAAKC,KAAK7xB,KAAV4xB,CAAgBd,IAEjBO,KACN,EACL,CAEUH,gBAAgBJ,EAA8BD,GACtD,IACwD,IAAtDxB,GAAkBlf,QAAQ2gB,EAAQ1B,iBACjC0B,EAAQ1B,cAAc5e,WAAW,cACjCsgB,EAAQ1B,cAAc5e,WAAW,YAClC,CACA,GAAmB,MAAfqgB,GAAiD,UAA1BC,EAAQ1B,cACjC,OAAO0B,EAAQ3B,aAAa2B,EAAQ3W,UAC/B,GACqB,iBAA1B2W,EAAQ1B,eACkB,kBAA1B0B,EAAQ1B,cACR,CACA,MAAM0C,EAAe,IAAI3W,KACgC,IAAvD9E,SAASya,EAAQ3B,aAAa2B,EAAQ3W,UAAW,KACjDqR,cAEF,OADAxrB,KAAK8S,WAAWge,EAAQ1f,OAAQ,aAAe0f,EAAQ3W,SAAU2X,GAC1D,I,CAGPhB,EAAQ1B,cAAcuC,SAAS,aAC/Bb,EAAQ1B,cAAcuC,SAAS,QAC/Bb,EAAQ1B,cAAcuC,SAAS,UAE/B3xB,KAAK8S,WACHge,EAAQ1f,OACR0f,EAAQ3W,SACR2W,EAAQ3B,aAAa2B,EAAQ3W,UAC7B,YAGFna,KAAK8S,WAAWge,EAAQ1f,OAAQ0f,EAAQ3W,SAAU2W,EAAQ3B,aAAa2B,EAAQ3W,U,CAGnF,OAAO,IACT,CAEU8V,qBAAqBa,GAC7B,SACE9wB,KAAKyP,mBAAmBqhB,EAAQ1f,OAAO4C,SAASC,aAChD6c,EAAQ1B,cAAcuC,SAAS,iBAE/Bb,EAAQ1f,OAAO4C,SAASC,UAAY6c,EAAQ3B,aAAa2B,EAAQ3W,WAC1D,EAGX,CAEU+V,mBAAmBY,GAC3B,SACE9wB,KAAKyP,mBAAmBqhB,EAAQ1f,OAAO4C,SAASG,cAChD2c,EAAQ1B,cAAcuC,SAAS,cAE/Bb,EAAQ1f,OAAO4C,SAASG,WAAa2c,EAAQ3B,aAAa2B,EAAQ3W,WAC3D,EAGX,CAEUgW,oBAAoBW,GAC5B,SACE9wB,KAAKyP,mBAAmBqhB,EAAQ1f,OAAO4C,SAASE,YAChD4c,EAAQ1B,cAAcuC,SAAS,gBAE/Bb,EAAQ1f,OAAO4C,SAASE,SAAW4c,EAAQ3B,aAAa2B,EAAQ3W,WACzD,EAGX,CAEUiW,oBAAoBU,GAC5B,SACE9wB,KAAKyP,mBAAmBqhB,EAAQ1f,OAAO4C,SAASP,YAChDqd,EAAQ1B,cAAcuC,SAAS,eAE/Bb,EAAQ1f,OAAO4C,SAASP,SAAWqd,EAAQ3B,aAAa2B,EAAQ3W,WACzD,EAGX,CAEUoW,mBAAmBO,GAC3B,SACE9wB,KAAKyP,mBAAmBqhB,EAAQ1f,OAAO4C,SAASkS,WAChD4K,EAAQ1B,cAAcuC,SAAS,cAE/Bb,EAAQ1f,OAAO4C,SAASkS,QAAU4K,EAAQ3B,aAAa2B,EAAQ3W,WACxD,EAGX,CAEUmW,iBAAiBQ,GACzB,SACE9wB,KAAKyP,mBAAmBqhB,EAAQ1f,OAAO4C,SAASqJ,SAChDyT,EAAQ1B,cAAcuC,SAAS,oBAE/Bb,EAAQ1f,OAAO4C,SAASqJ,MAAQyT,EAAQ3B,aAAa2B,EAAQ3W,WACtD,EAGX,CAEUkW,iBAAiBS,GACzB,SACE9wB,KAAKyP,mBAAmBqhB,EAAQ1f,OAAO4C,SAASsF,SAChDwX,EAAQ1B,cAAcuC,SAAS,YAE/Bb,EAAQ1f,OAAO4C,SAASsF,MAAQwX,EAAQ3B,aAAa2B,EAAQ3W,WACtD,EAGX,CAEUyV,oBAAoBkB,GAC5B,SACE9wB,KAAKyP,mBAAmBqhB,EAAQ1f,OAAOM,KAAK4D,UAC5Cwb,EAAQ1B,cAAcuC,SAAS,aAE/Bb,EAAQ1f,OAAOM,KAAK4D,OAASwb,EAAQ3B,aAAa2B,EAAQ3W,UAC1D2W,EAAQ1f,OAAOM,KAAKgE,MAAQ1V,KAAK8Q,aAAaggB,EAAQ1f,OAAOM,KAAK4D,SAC3D,EAGX,CAEUua,0BAA0BiB,GAClC,SACE9wB,KAAKyP,mBAAmBqhB,EAAQ1f,OAAOM,KAAK8D,QAC5Csb,EAAQ1B,cAAcuC,SAAS,0BAE/Bb,EAAQ1f,OAAOM,KAAK8D,KAAOsb,EAAQ3B,aAAa2B,EAAQ3W,WACjD,EAGX,CAEU2V,4BAA4BgB,GACpC,SACE9wB,KAAKyP,mBAAmBqhB,EAAQ1f,OAAOM,KAAK0D,kBAC5C0b,EAAQ1B,cAAcuC,SAAS,sBAE/Bb,EAAQ1f,OAAOM,KAAK0D,eAAiB0b,EAAQ3B,aAAa2B,EAAQ3W,WAC3D,EAGX,CAEU4V,oBAAoBe,GAC5B,SACE9wB,KAAKyP,mBAAmBqhB,EAAQ1f,OAAOM,KAAKL,cAC5Cyf,EAAQ1B,cAAcuC,SAAS,gBACmB,IAAlDb,EAAQ3B,aAAa2B,EAAQ3W,UAAUrT,UAEvCgqB,EAAQ1f,OAAOM,KAAKC,SAAYmf,EAAQ3B,aAAa2B,EAAQ3W,UAAqB1I,OAChF,EACA,GAEsC,MAApCqf,EAAQ1f,OAAOM,KAAKC,SAAS,KAC/Bmf,EAAQ1f,OAAOM,KAAKC,SAAWmf,EAAQ1f,OAAOM,KAAKC,SAASF,OAAO,EAAG,IAExEqf,EAAQ1f,OAAOM,KAAKE,QAAWkf,EAAQ3B,aAAa2B,EAAQ3W,UAAqB1I,OAAO,EAAG,IACpF,EAGX,CAEUge,iBAAiBqB,GACzB,SACE9wB,KAAKyP,mBAAmBqhB,EAAQ1f,OAAOwB,MAAMc,WACnB,aAA1Bod,EAAQ1B,iBAER0B,EAAQ1f,OAAOwB,MAAMc,SAAWod,EAAQ3B,aAAa2B,EAAQ3W,WACtD,EAGX,CAEUqV,iBAAiBsB,GACzB,SACE9wB,KAAKyP,mBAAmBqhB,EAAQ1f,OAAOwB,MAAMa,WACnB,aAA1Bqd,EAAQ1B,iBAER0B,EAAQ1f,OAAOwB,MAAMa,SAAWqd,EAAQ3B,aAAa2B,EAAQ3W,WACtD,EAGX,CAEUuV,aAAaoB,GACrB,IACgC,MAA7BA,EAAQ1f,OAAOwB,MAAMe,MAAqD,IAArCmd,EAAQ1f,OAAOwB,MAAMe,KAAK7M,SACtC,SAA1BgqB,EAAQ1B,cACR,CACA,MAAMtO,EAAOgQ,EAAQ3B,aAAa2B,EAAQ3W,UAAUtJ,MAAM7Q,KAAKgO,cAE/D,OADA8iB,EAAQ1f,OAAOwB,MAAMe,KAAO3T,KAAK2P,aAAamR,IACvC,C,CACF,MAA8B,QAA1BgQ,EAAQ1B,gBACgB,MAA7B0B,EAAQ1f,OAAOwB,MAAMe,OACvBmd,EAAQ1f,OAAOwB,MAAMe,KAAO,IAE9Bmd,EAAQ1f,OAAOwB,MAAMe,KAAKhM,OAAO3H,KAAK2P,aAAamhB,EAAQ3B,aAAa2B,EAAQ3W,aACzE,EAGX,ECrXK,MAAM4X,WAAkCzC,GAC7CsB,cAAcrwB,EAAY6Q,GAExB,OADoBpR,KAAK2Q,kBAAkB3Q,KAAK0wB,QAAQnwB,EAAO,QAAS,UAEtE,IAAK,cACH6Q,EAAOtM,KAAO,SACdsM,EAAOM,KAAO,IAAI,IAClB2d,GAAkBnf,KAAK,QACvB,MACF,IAAK,WACHkB,EAAOtM,KAAO,aACdsM,EAAO4C,SAAW,IAAI,IACtBqb,GAAkBnf,KAAK,QACvB,MACF,IAAK,QACL,IAAK,cACHmf,GAAkBnf,KAAK,QAK7B,ECnBK,MAAM8hB,WAAkC1C,GAC7C9vB,cACEyF,QACAjF,KAAKgwB,wBAAwB9f,KAAKlQ,KAAKiyB,mBACzC,CAEArB,cAAcrwB,EAAY6Q,GACxBA,EAAOtM,KAAO,UACdsM,EAAOwB,MAAQ,IAAI,IAGhB5S,KAAKyP,mBAAmBzP,KAAKsxB,gBAAgB/wB,EAAO,kBACpDP,KAAKyP,mBAAmBzP,KAAKsxB,gBAAgB/wB,EAAO,wBAErD6Q,EAAOtM,KAAO,SACdsM,EAAOM,KAAO,IAAI,KAIjB1R,KAAKyP,mBAAmBzP,KAAKsxB,gBAAgB/wB,EAAO,2BACpDP,KAAKyP,mBAAmBzP,KAAKsxB,gBAAgB/wB,EAAO,wBACpDP,KAAKyP,mBAAmBzP,KAAKsxB,gBAAgB/wB,EAAO,0BACpDP,KAAKyP,mBAAmBzP,KAAKsxB,gBAAgB/wB,EAAO,2BAErD6Q,EAAOtM,KAAO,aACdsM,EAAO4C,SAAW,IAAI,IAE1B,CAEAie,mBAAmBnB,GACjB,QAAIA,EAAQ1B,cAAcrf,MAAM,2BAC9B/P,KAAK8S,WAAWge,EAAQ1f,OAAQ,UAAW0f,EAAQ3B,aAAa2B,EAAQ3W,YACjE,EAGX,CAEA4V,oBAAoBe,GAClB,GACE9wB,KAAKyP,mBAAmBqhB,EAAQ1f,OAAOM,KAAKL,aAC5Cyf,EAAQ1B,cAAcuC,SAAS,eAC/B,CACA,MAAMO,EAAYpB,EAAQ3B,aAAa2B,EAAQ3W,UAAqBtJ,MAAM,KAM1E,OALAigB,EAAQ1f,OAAOM,KAAKC,SAAWugB,EAAS,GACA,MAApCpB,EAAQ1f,OAAOM,KAAKC,SAAS,IAAsD,IAAxCmf,EAAQ1f,OAAOM,KAAKC,SAAS7K,SAC1EgqB,EAAQ1f,OAAOM,KAAKC,SAAWmf,EAAQ1f,OAAOM,KAAKC,SAASF,OAAO,EAAG,IAExEqf,EAAQ1f,OAAOM,KAAKE,QAAUsgB,EAAS,GAAGprB,OAAS,EAAIorB,EAAS,GAAGzgB,OAAO,EAAG,GAAKygB,EAAS,IACpF,C,CAET,OAAO,CACT,ECvDK,MAAMC,WAA2BpkB,EACtCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,GAAe,MAAXwH,EAEF,OADA+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GAGzB,IAAI4nB,EAAoB,KAmExB,OAlEA3qB,EAAQyE,SAAS3L,IACf,GAAe,MAAX6xB,EAEF,YADAA,EAAU7xB,EAAMwR,KAAKsgB,GAAcA,KAIrC,GAAI9xB,EAAMuG,OAAS,GAAKvG,EAAMuG,SAAWsrB,EAAQtrB,OAC/C,OAGF,IAAK9G,KAAKyP,mBAAmBlP,EAAM,IACjC,GAAIP,KAAKwO,aAAc,CACPjO,EAAM,GAAcsQ,MAAM,KACnC3E,SAASomB,IACZA,EAAMA,EAAInjB,OACV,IAAI8G,GAAgB,EAChBC,EAAkB1L,EAAOqD,YAAY/G,OAEzC,IAAK,IAAIyM,EAAI,EAAGA,EAAI/I,EAAOqD,YAAY/G,OAAQyM,IAC7C,GAAI/I,EAAOqD,YAAY0F,GAAGxR,OAASuwB,EAAK,CACtCrc,GAAgB,EAChBC,EAAkB3C,EAClB,K,CAIJ,GAAI0C,EAAe,CACjB,MAAMhE,EAAa,IAAI,IACvBA,EAAWlQ,KAAOuwB,EAClB9nB,EAAOqD,YAAYqC,KAAK+B,E,CAG1BzH,EAAOsD,wBAAwBoC,KAAK,CAAC1F,EAAOkD,QAAQ5G,OAAQoP,GAAiB,G,KAE1E,CACL,MAAMoX,EAAQ/sB,EAAM,GAAcsQ,MAAM,KAClCyhB,EAAMhF,EAAKxmB,OAAS,EAAIwmB,EAAK,GAAGne,OAAS,KAC/CnP,KAAKkT,cAAc1I,EAAQ8nB,E,CAI/B,MAAMlhB,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAM,GAAI,MAE/C,IAAK,IAAIgT,EAAI,EAAGA,EAAIhT,EAAMuG,OAAQyM,IAAK,CACrC,MAAM3E,EAASwjB,EAAQ7e,GAAGpE,OAAOxC,cAC7B3M,KAAKyP,mBAAmBlP,EAAMgT,KAAOvT,KAAKyP,mBAAmBb,KAI7D5O,KAAKkO,mBAAmBiC,QAAQvB,IAAW,EAC7CwC,EAAOwB,MAAMa,SAAWlT,EAAMgT,GACrBvT,KAAKiO,mBAAmBkC,QAAQvB,IAAW,EACpDwC,EAAOwB,MAAMc,SAAWnT,EAAMgT,GACrBvT,KAAKoO,cAAc+B,QAAQvB,IAAW,EAC/CwC,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAMgT,IAE5CvT,KAAK8S,WAAW1B,EAAQghB,EAAQ7e,GAAIhT,EAAMgT,I,CAI9CvT,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,EACzB,EC9EK,MAAM+nB,WAA4BxkB,EACvCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACfP,KAAKkT,cAAc1I,EAAQxK,KAAKwyB,SAAS,WAAYjyB,IACrD,MAAM6Q,EAASpR,KAAKwS,kBACpBpB,EAAOsB,MAAQ1S,KAAKwyB,SAAS,cAAejyB,GAC5C6Q,EAAOrP,KAAO/B,KAAK2Q,kBAAkB3Q,KAAKwyB,SAAS,QAASjyB,GAAQ,MACpE6Q,EAAOwB,MAAMa,SAAWzT,KAAKwyB,SAAS,WAAYjyB,GAClD6Q,EAAOwB,MAAMc,SAAW1T,KAAKwyB,SAAS,WAAYjyB,GAClD6Q,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAa3P,KAAKwyB,SAAS,OAAQjyB,IAC5DP,KAAK8S,WAAW1B,EAAQ,aAAcpR,KAAKwyB,SAAS,YAAajyB,IACjEP,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAGzBpR,KAAKwO,cACPxO,KAAK6R,yBAAyBrH,GAGhCA,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,CAEQgoB,SAASzf,EAAaxS,GAC5B,OAAOP,KAAK2Q,kBAAkBpQ,EAAMwS,GAAM/S,KAAK2Q,kBAAkBpQ,EAAM,IAAMwS,IAC/E,EC/BK,MAAM0f,WAA2B1kB,EACtCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACbmlB,EAAiC9d,KAAKN,MAAMrU,GAClD,OACkB,MAAhByyB,GAC0B,MAA1BA,EAAaC,WACqB,IAAlCD,EAAaC,UAAU7rB,QAEvB0D,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,IAGK,GAA1BkoB,EAAaxb,WACf1M,EAAOgD,SAAU,EACjBhD,EAAOyM,aAAe,+CACfpN,QAAQC,QAAQU,KAGzBkoB,EAAaC,UAAUzmB,SAASid,IAC9B,MAAM/X,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAOonB,EAAOtT,QACrBzE,EAAOwB,MAAMa,SAAW0V,EAAO1V,SAC/BrC,EAAOwB,MAAMc,SAAWyV,EAAOzV,SAE/BtC,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAawZ,EAAOtT,SAC7CzE,EAAOsB,MAAQyW,EAAOvlB,QAEtB5D,KAAKwT,sBAAsBpC,GAC3BpR,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,ECpCK,MAAMooB,WAA4B7kB,EACvCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUmN,KAAKN,MAAMrU,GAC3B,OAAe,MAAXwH,GAAsC,IAAnBA,EAAQX,QAC7B0D,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAASwS,IACf,GAAuB,MAAnBA,EAAW4O,MAAgB5O,EAAW4O,KAAKxmB,OAAS,EAAG,CACzD,MAAMqM,EAAauL,EAAW4O,KAAK,GAAGjkB,KACtCrJ,KAAKkT,cAAc1I,EAAQ2I,E,CAG7B,MAAM/B,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO2c,EAAWxJ,MAEzB9D,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkB+N,EAAWjL,UACtDzT,KAAKyP,mBAAmB2B,EAAOwB,MAAMa,UACvCrC,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkB+N,EAAWpF,OAChDtZ,KAAKyP,mBAAmBiP,EAAWpF,SAC7ClI,EAAOsB,MAAQ,UAAYgM,EAAWpF,MAAQ,MAGhDlI,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkB+N,EAAWhL,UAC1DtC,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAa+O,EAAWpO,KACjDc,EAAOsB,OAAS1S,KAAK2Q,kBAAkB+N,EAAWnT,YAAa,IACzC,MAAlBmT,EAAWmU,MACbzhB,EAAOwB,MAAM6D,KAAOzW,KAAK2Q,kBAAkB+N,EAAWmU,IAAIzyB,SAG5B,MAA5Bse,EAAWoU,eACbpU,EAAWoU,cAAc5mB,SAAS6mB,IAChC,OAAQA,EAAYC,YAClB,IAAK,OACL,IAAK,WACHhzB,KAAK8S,WAAW1B,EAAQ2hB,EAAY7d,MAAO6d,EAAYxyB,O,IAM/DP,KAAKwT,sBAAsBpC,GAC3BpR,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAGzBpR,KAAKwO,cACPxO,KAAK6R,yBAAyBrH,GAGhCA,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,ECrDK,MAAMyoB,WAA4BllB,EACvCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,MAAM2yB,EAAYlzB,KAAKyP,mBAAmBlP,EAAM4yB,MAAiC,KAAzBve,KAAKN,MAAM/T,EAAM4yB,MACnE7F,EACQ,MAAZ4F,GAAqC,MAAjBA,EAAS5F,MAAgB4F,EAAS5F,KAAKxmB,OAAS,EAChEosB,EAAS5F,KACNvb,KAAKqhB,IACJ,IACE,MAAM1yB,EAAIkU,KAAKN,MAAM8e,GACrB,OAAOpzB,KAAK2Q,kBAAkBjQ,EAAE4xB,I,CAChC,S,CAGF,OAAO,IAAI,IAEZzqB,QAAQnH,IAAeV,KAAKyP,mBAAmB/O,KAClD,KAEFV,KAAKwO,cAAwB,MAAR8e,GAAgBA,EAAKxmB,OAAS,EACrDwmB,EAAKphB,SAASomB,IACZ,IAAIrc,GAAgB,EAChBC,EAAkB1L,EAAOqD,YAAY/G,OAEzC,IAAK,IAAIyM,EAAI,EAAGA,EAAI/I,EAAOqD,YAAY/G,OAAQyM,IAC7C,GAAI/I,EAAOqD,YAAY0F,GAAGxR,OAASuwB,EAAK,CACtCrc,GAAgB,EAChBC,EAAkB3C,EAClB,K,CAIJ,GAAI0C,EAAe,CACjB,MAAMhE,EAAa,IAAI,IACvBA,EAAWlQ,KAAOuwB,EAClB9nB,EAAOqD,YAAYqC,KAAK+B,E,CAG1BzH,EAAOsD,wBAAwBoC,KAAK,CAAC1F,EAAOkD,QAAQ5G,OAAQoP,GAAiB,KAErElW,KAAKwO,cAAwB,MAAR8e,GAAgBA,EAAKxmB,OAAS,GAC7D9G,KAAKkT,cAAc1I,EAAQ8iB,EAAK,IAGlC,MAAMlc,EAASpR,KAAKwS,kBACpBpB,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMif,MAAO,IACnDpO,EAAOsB,OAAS,OAAS1S,KAAK2Q,kBAAkBpQ,EAAM,gBAAiB,IAAM,KAC7E6Q,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAM,cAAe,MAC1D6Q,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAM,YACrD6Q,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMsa,UACrDzJ,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAMkZ,KAEhB,MAAxBlZ,EAAM8yB,gBAA0B9yB,EAAM8yB,eAAevsB,OAAS,GAChEvG,EAAM8yB,eAAennB,SAASiN,IACvBnZ,KAAKyP,mBAAmB0J,KAC3B/H,EAAOsB,OAAS,KAAOyG,E,IAK7B,MAAMma,EAActzB,KAAKyP,mBAAmBlP,EAAM,iBAE9C,KADAqU,KAAKN,MAAM/T,EAAM,iBAEfoS,EACU,MAAd2gB,GAAgD,MAA1BA,EAAWC,aAAuBD,EAAWC,YAAYzsB,OAAS,EACpFwsB,EAAWC,YAAYxhB,KAAKyhB,IAC1B,IACE,OAAO5e,KAAKN,MAAMkf,E,CAClB,S,CAGF,OAAO,IAAI,IAEb,KACQ,MAAV7gB,GACFA,EAAOzG,SAAS8F,IACL,MAALA,GACFhS,KAAK8S,WAAW1B,EAAQY,EAAEjQ,KAAMiQ,EAAE/R,K,IAKxCD,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,EChGK,MAAMipB,WAAiC1lB,EAC5CuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,GAAe,MAAXwH,EAEF,OADA+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GAGzB,IAAIkpB,GAAa,EAmCjB,OAlCAjsB,EAAQyE,SAAS3L,IACf,GAAqB,IAAjBA,EAAMuG,QAAgBvG,EAAMuG,OAAS,EACvC,OAEF,MAAM6sB,EAA6B,KAAjBpzB,EAAMuG,QAA8B,MAAbvG,EAAM,GACzC6Q,EAASpR,KAAKwS,kBAIpB,GAHApB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAMozB,EAAY,EAAI,GAAI,MAC/DviB,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAMozB,EAAY,EAAI,IACrEviB,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMozB,EAAY,EAAI,IAChD,IAAjBpzB,EAAMuG,OACR4sB,GAAa,EACbtiB,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAM,IAC5C6Q,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAM,QACvC,CACL,MAAM4V,EAASnW,KAAK2Q,kBAAkBpQ,EAAMozB,EAAY,EAAI,GAAI,UAChE,IAAIxgB,EAAwB,WAAXgD,EAAsBA,EAAOtF,MAAM,MAAM3B,KAAK,KAAO,KACpD,MAAdiE,IACFA,EAAagD,EAAOtF,MAAM,OAAO3B,KAAK,KACtCiE,EAAagD,EAAOtF,MAAM,KAAK3B,KAAK,MAEtClP,KAAKkT,cAAc1I,EAAQ2I,GAC3B/B,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMozB,EAAY,EAAI,IAC5DviB,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAM,G,CAE9CP,KAAKwT,sBAAsBpC,GAC3BpR,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAGzBsiB,GAAc1zB,KAAKwO,cACrBxO,KAAK6R,yBAAyBrH,GAGhCA,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,EACzB,EC1CK,MAAMopB,WAAiC7lB,EAC5CuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUmN,KAAKN,MAAMrU,GAC3B,GAAe,MAAXwH,GAAoC,MAAjBA,EAAQsP,MAE7B,OADAvM,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GAGzB,MAAM8V,EAAa,IAAI3I,IACvBlQ,EAAQkG,QAAQzB,SAAS3L,IACvB+f,EAAWvI,IAAIxX,EAAMwH,GAAIxH,EAAMwB,KAAK,IAEtC,MAAMwe,EAAkB,IAAI5I,IA0G5B,OAzGA2I,EAAWpU,SAAQ,CAACqI,EAAKxB,KACvBwN,EAAgBxI,IAAIhF,EAAKvI,EAAOmD,QAAQ7G,QACxC,MAAMkL,EAAI,IAAI,IACdA,EAAEjQ,KAAOwS,EACT/J,EAAOmD,QAAQuC,KAAK8B,EAAE,IAGxBvK,EAAQsP,MAAM7K,SAAS3L,IACrB,MAAM6Q,EAASpR,KAAKwS,kBAQpB,GAPApB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAMwB,KAAM,MACjDqP,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAMszB,WAExB,MAAhBtzB,EAAM4V,QAAkBoK,EAAgBpI,IAAI5X,EAAM4V,SACpD3L,EAAOoD,oBAAoBsC,KAAK,CAAC1F,EAAOkD,QAAQ5G,OAAQyZ,EAAgB7d,IAAInC,EAAM4V,UAG3D,MAArB5V,EAAMuzB,YAAV,CAIK9zB,KAAKyP,mBAAmBlP,EAAMuzB,YAAYphB,SAC7CtB,EAAOsB,MAAQnS,EAAMuzB,YAAYphB,MAAM7B,MAAM,UAAU3B,KAAK,MAAM2B,MAAM,OAAO3B,KAAK,OAGnE,eAAf3O,EAAMuE,OACRsM,EAAOM,KAAO,IAAI,IAClBN,EAAOtM,KAAO,UAGhB,IAAK,MAAMqV,KAAY5Z,EAAMuzB,YAAa,CAExC,IAAKvzB,EAAMuzB,YAAYla,eAAeO,GACpC,SAEF,MAAM4Z,EAASxzB,EAAMuzB,YAAY3Z,GAC3B5F,EAAgB,MAAVwf,EAAiBA,EAAO1U,WAAa,KACjD,IACErf,KAAKyP,mBAAmB8E,IACX,UAAb4F,GACa,8BAAbA,EAKF,GAAiB,kBAAbA,EAAJ,CAOA,GAAI/I,EAAOtM,OAAS,SAAiB,CACnC,GAAiB,eAAbqV,EAA2B,CAC7B/I,EAAOM,KAAK4D,OAASf,EACrBnD,EAAOM,KAAKgE,MAAQ1V,KAAK8Q,aAAayD,GACtC,Q,CACK,GAAiB,eAAb4F,EAA2B,CACpC/I,EAAOM,KAAK0D,eAAiBb,EAC7B,Q,CACK,GAAiB,kBAAb4F,EAA8B,CACvC/I,EAAOM,KAAK8D,KAAOjB,EACnB,Q,CACK,GAAiB,YAAb4F,EAAwB,CACjC,IACE,MAAM6Z,EAAU,IAAI7Y,KAAK5G,GACzBnD,EAAOM,KAAKE,QAAUoiB,EAAQC,cAAc5U,WAC5CjO,EAAOM,KAAKC,UAAYqiB,EAAQlN,WAAa,GAAGzH,U,CAChD,S,CAGF,Q,CACK,GAAiB,aAAblF,EACT,Q,KAEG,CACL,IACgB,aAAbA,GAAwC,UAAbA,IAC5Bna,KAAKyP,mBAAmB2B,EAAOwB,MAAMa,UACrC,CACArC,EAAOwB,MAAMa,SAAWc,EACxB,Q,CACK,GAAiB,aAAb4F,EAAyB,CAClC/I,EAAOwB,MAAMc,SAAWa,EACxB,Q,CACK,GAAiB,SAAb4F,EAAqB,CAC9B/I,EAAOwB,MAAM6D,KAAOlC,EACpB,Q,CACK,IACiB,MAArBnD,EAAOwB,MAAMe,MAA6C,IAA7BvC,EAAOwB,MAAMe,KAAK7M,SAChD9G,KAAKoO,cAAc+B,QAAQgK,IAAa,EACxC,CACA/I,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAa4E,GACtC,Q,EAIJvU,KAAK8S,WAAW1B,EAAQ+I,EAAU5F,E,MAnDhCwf,EAAO7nB,SAASgoB,IACdl0B,KAAK8S,WAAW1B,EAAQ8iB,EAAGnyB,KAAMmyB,EAAG3zB,MAAM,G,CAqDhDP,KAAKwT,sBAAsBpC,GAC3BpR,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,E,CAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,EACzB,EC3HK,MAAM2pB,WAAkCpmB,EAC7CuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACbmB,EAAM1O,KAAKyO,SAASxO,GAC1B,GAAW,MAAPyO,EAEF,OADAlE,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GAGzB,MAAM4pB,EAAU1lB,EAAIzC,iBAAiB,4BA8CrC,OA7CAF,MAAMC,KAAKooB,GAASloB,SAASid,IAC3B,MAAMtN,EAAW7b,KAAKkS,yBAAyBiX,EAAQ,YACjDkL,EACQ,MAAZxY,GACC7b,KAAKyP,mBAAmBoM,EAASpR,cACT,YAAzBoR,EAASpR,YAEL,KADAoR,EAASpR,YAEfzK,KAAKkT,cAAc1I,EAAQ6pB,GAE3B,MAAMC,EAAct0B,KAAKkS,yBAAyBiX,EAAQ,gBACpDoL,EAASv0B,KAAKkS,yBAAyBiX,EAAQ,WAC/CzV,EAAW1T,KAAKkS,yBAAyBiX,EAAQ,YACjD7Y,EAAMtQ,KAAKkS,yBAAyBiX,EAAQ,OAC5CzW,EAAQ1S,KAAKkS,yBAAyBiX,EAAQ,SAC9C/X,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KACU,MAAfuyB,EAAsBt0B,KAAK2Q,kBAAkB2jB,EAAY7pB,YAAa,MAAQ,KAChF2G,EAAOsB,MAAiB,MAATA,EAAgB1S,KAAK2Q,kBAAkB+B,EAAMjI,aAAe,GAC3E2G,EAAOwB,MAAMa,SAAqB,MAAV8gB,EAAiBv0B,KAAK2Q,kBAAkB4jB,EAAO9pB,aAAe,KACtF2G,EAAOwB,MAAMc,SACC,MAAZA,EAAmB1T,KAAK2Q,kBAAkB+C,EAASjJ,aAAe,KACpE2G,EAAOwB,MAAMe,KAAc,MAAPrD,EAActQ,KAAK2P,aAAaW,EAAI7F,aAAe,KAEvE,MAAM4X,EAAuB,GAC7B,IAAK,IAAI9O,EAAI,EAAGA,GAAK,GAAIA,IACvB8O,EAAWnS,KAAK,aAAeqD,GAGjCvT,KAAKsS,4BAA4B6W,EAAQ9G,EAAWnT,KAAK,MAAMhD,SAASqW,IAClEviB,KAAKyP,mBAAmB8S,EAAK9X,cAAqC,SAArB8X,EAAK9X,aAGtDzK,KAAK8S,WAAW1B,EAAQmR,EAAK7V,QAAS6V,EAAK9X,YAAY,IAGzDzK,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAGzBpR,KAAKwO,cACPxO,KAAK6R,yBAAyBrH,GAGhCA,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,EACzB,ECxDK,MAAMgqB,WAAgCzmB,EAC3CuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACbmB,EAAM1O,KAAKyO,SAASxO,GAC1B,GAAW,MAAPyO,EAEF,OADAlE,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GAGzB,MAAMiqB,EAAe/lB,EAAIjF,cAAc,gBACvC,GAAoB,MAAhBgrB,EAGF,OAFAjqB,EAAOyM,aAAe,+BACtBzM,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GAGzB,MAAMkqB,EAAiBD,EAAaE,aAAa,aAC3CxD,EAAUziB,EAAIzC,iBAAiB,wBA4CrC,OA3CAF,MAAMC,KAAKmlB,GAASjlB,SAAS+N,IAC3B,MAAMzY,EAAQxB,KAAKkS,yBAAyB+H,EAAO,SAC7C2a,EACK,MAATpzB,GAAkBxB,KAAKyP,mBAAmBjO,EAAMiJ,aAE5C,KADAjJ,EAAMiJ,YAAYoG,MAAM,KAAK3B,KAAK,KAExClP,KAAKkT,cAAc1I,EAAQoqB,GAE3B,MAAM5pB,EAAQhL,KAAKkS,yBAAyB+H,EAAO,SAC7CxG,EAAWzT,KAAKkS,yBAAyB+H,EAAO,YAChDX,EAAQtZ,KAAKkS,yBAAyB+H,EAAO,SAC7CvG,EAAW1T,KAAKkS,yBAAyB+H,EAAO,YAChD3J,EAAMtQ,KAAKkS,yBAAyB+H,EAAO,OAC3CvH,EAAQ1S,KAAKkS,yBAAyB+H,EAAO,SAC7C7I,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAgB,MAATiJ,EAAgBhL,KAAK2Q,kBAAkB3F,EAAMP,YAAa,MAAQ,KAChF2G,EAAOsB,MACI,MAATA,EACI1S,KAAK2Q,kBAAkB+B,EAAMjI,YAAa,IAAIoG,MAAM6jB,GAAgBxlB,KAAK,MACzE,KACNkC,EAAOwB,MAAMa,SACC,MAAZA,EAAmBzT,KAAK2Q,kBAAkB8C,EAAShJ,aAAe,KACpE2G,EAAOwB,MAAMc,SACC,MAAZA,EAAmB1T,KAAK2Q,kBAAkB+C,EAASjJ,aAAe,KACpE2G,EAAOwB,MAAMe,KAAc,MAAPrD,EAActQ,KAAK2P,aAAaW,EAAI7F,aAAe,KAEnEzK,KAAKyP,mBAAmB2B,EAAOwB,MAAMa,WAAsB,MAAT6F,EACpDlI,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkB2I,EAAM7O,aACnC,MAAT6O,GAAkBtZ,KAAKyP,mBAAmB6J,EAAM7O,eACzD2G,EAAOsB,MAAQ1S,KAAKyP,mBAAmB2B,EAAOsB,OAC1C,UAAY4G,EAAM7O,YAClB2G,EAAOsB,MAAPtB,YAAkCkI,EAAM7O,aAG9CzK,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAGzBpR,KAAKwO,cACPxO,KAAK6R,yBAAyBrH,GAGhCA,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,EACzB,EC9DK,MAAMqqB,WAAkC9mB,EAC7CuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,GAAIA,EAAMuG,OAAS,EACjB,OAEEvG,EAAMuG,OAAS,GACjB9G,KAAKkT,cAAc1I,EAAQjK,EAAM,IAEnC,MAAM6Q,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAM,GAAI,MAC3CA,EAAMuG,OAAS,IACjBsK,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAM,GAAI,IAAIsQ,MAAM,KAAK3B,KAAK,OAElE3O,EAAMuG,OAAS,IACjBsK,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAM,KAEnDA,EAAMuG,OAAS,IACjBsK,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAM,KAEnDA,EAAMuG,OAAS,IACjBsK,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAM,KAE9CP,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAGzBpR,KAAKwO,cACPxO,KAAK6R,yBAAyBrH,GAGhCA,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,ECvBK,MAAMsqB,WAA0B/mB,EAAvC,c,oBAkFW,KAAAgnB,qBAAuB,IAAI1Z,IAAI,CACtC,OACA,OACA,yBACA,yBACA,4BACA,4BACA,uBACA,aACA,+BACA,YACA,gCA2BO,KAAA2Z,qBAAuB,IAAI3Z,IAAI,CACtC,OACA,OACA,6BACA,6BACA,gCACA,kCAgBO,KAAA4Z,sBAAwB,IAAI5Z,IAAI,CACvC,OACA,OACA,iBACA,iBACA,iBAeO,KAAA6Z,mBAAqB,IAAI7Z,IAAI,CAAC,OAAQ,OAAQ,aAAc,eAc5D,KAAA8Z,kBAAoB,IAAI9Z,IAAI,CAAC,OAAQ,OAAQ,aAAc,aAAc,cAczE,KAAA+Z,2BAA6B,IAAI/Z,IAAI,CAC5C,OACA,OACA,8BACA,8BACA,oCAoBO,KAAAga,iBAAmB,IAAIha,IAAI,CAClC,OACA,OACA,yBACA,0BACA,wBACA,yBACA,4BAoCJ,CAjQE/G,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb+nB,EAA+B1gB,KAAKN,MAAMrU,GAChD,OAAmB,MAAfq1B,GACF9qB,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzBxK,KAAKu1B,aAAa/qB,EAAQ8qB,EAAY3nB,SACtC3N,KAAKw1B,kBAAkBhrB,EAAQ8qB,EAAYve,OAEvC/W,KAAKwO,cACPxO,KAAK6R,yBAAyBrH,GAGhCA,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,CAEQ+qB,aAAa/qB,EAAsBmD,GAC1B,MAAXA,GAAsC,IAAnBA,EAAQ7G,QAI/B6G,EAAQzB,SAASiK,IACK,MAAhBA,EAAOY,OAAwC,GAAvBZ,EAAOY,MAAMjQ,SAIzC9G,KAAKkT,cAAc1I,EAAQ2L,EAAOpU,MAElC/B,KAAKw1B,kBAAkBhrB,EAAQ2L,EAAOY,OAAM,GAEhD,CAEQye,kBAAkBhrB,EAAsBuM,GACjC,MAATA,GAAkC,IAAjBA,EAAMjQ,QAI3BiQ,EAAM7K,SAASid,IACb,MAAM/X,EAASpR,KAAKy1B,eAAetM,GAEnCnpB,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,GAE/B,CAEQqkB,eAAe7X,GACrB,MAAMxM,EAASpR,KAAKwS,kBAEpB,OAAQoL,EAAK9Y,MACX,IAAK,mBACH9E,KAAK01B,mBAAmB9X,EAAMxM,GAC9B,MACF,IAAK,uBACHpR,KAAK21B,0BAA0B/X,EAAMxM,GACrC,MACF,IAAK,wBACHpR,KAAK41B,0BAA0BhY,EAAMxM,GACrC,MACF,IAAK,OACHpR,KAAK61B,UAAUjY,EAAMxM,GACrB,MACF,IAAK,WACHpR,KAAK81B,eAAelY,EAAMxM,GAC1B,MAKF,IAAK,OACHpR,KAAK+1B,WAAWnY,EAAMxM,GAM1B,OAAOA,CACT,CAeQskB,mBAAmBzb,EAA6B7I,GACzC,MAAT6I,GAA+B,oBAAdA,EAAMnV,OAI3BsM,EAAOrP,KAAOkY,EAAM+b,uBACpB5kB,EAAOsB,MAAQuH,EAAMgc,uBAErB7kB,EAAOwB,MAAMa,SAAWwG,EAAMic,0BAC9B9kB,EAAOwB,MAAMc,SAAWuG,EAAMkc,0BAE9B/kB,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAasK,EAAMmc,sBAE5Cp2B,KAAK8S,WACH1B,EACA,+BACA6I,EAAMoc,6BAA6BhX,WACnC,aAGFrf,KAAK8S,WAAW1B,EAAQ,8BAA+B6I,EAAMqc,6BAE7Dt2B,KAAKoc,qBAAqBhL,EAAQ6I,EAAOja,KAAK+0B,sBAChD,CAUQY,0BAA0B1b,EAAyB7I,GAC5C,MAAT6I,GAA+B,wBAAdA,EAAMnV,OAI3BsM,EAAOrP,KAAOkY,EAAMsc,2BACpBnlB,EAAOsB,MAAQuH,EAAMuc,2BAErBplB,EAAOwB,MAAMa,SAAWwG,EAAMwc,8BAC9BrlB,EAAOwB,MAAMc,SAAWuG,EAAMyc,8BAE9B12B,KAAKoc,qBAAqBhL,EAAQ6I,EAAOja,KAAKg1B,sBAChD,CASQc,eAAe7b,EAAsB7I,GAC9B,MAAT6I,GAA+B,YAAdA,EAAMnV,OAI3BsM,EAAOrP,KAAOkY,EAAM0c,eACpBvlB,EAAOsB,MAAQuH,EAAM2c,eAErBxlB,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAasK,EAAM4c,cAE5C72B,KAAKoc,qBAAqBhL,EAAQ6I,EAAOja,KAAKi1B,uBAChD,CAGQc,WAAW9b,EAAmB7I,GACvB,MAAT6I,GAA+B,QAAdA,EAAMnV,OAG3BsM,EAAOtM,KAAO,eACdsM,EAAOwC,WAAa,IAAI,IACxBxC,EAAOwC,WAAW9O,KAAO,YACzBsM,EAAOrP,KAAOkY,EAAM6c,WACpB1lB,EAAOsB,MAAQuH,EAAM8c,WAErB/2B,KAAKoc,qBAAqBhL,EAAQ6I,EAAOja,KAAKk1B,oBAChD,CAGQW,UAAU5b,EAAkB7I,GACrB,MAAT6I,GAA+B,QAAdA,EAAMnV,OAI3BsM,EAAOrP,KAAOkY,EAAM+c,WACpB5lB,EAAOsB,MAAQuH,EAAMgd,WAErB7lB,EAAOwB,MAAM6D,KAAOwD,EAAMid,UAE1Bl3B,KAAKoc,qBAAqBhL,EAAQ6I,EAAOja,KAAKm1B,mBAChD,CASQS,0BAA0B3b,EAAkC7I,GACrD,MAAT6I,GAA+B,yBAAdA,EAAMnV,OAI3BsM,EAAOtM,KAAO,eACdsM,EAAOwC,WAAa,IAAI,IACxBxC,EAAOwC,WAAW9O,KAAO,YACzBsM,EAAOrP,KAAOkY,EAAMkd,4BACpB/lB,EAAOsB,MAAQuH,EAAMmd,4BAErBnd,EAAMod,gCAAgCnrB,SAASorB,IAC7Ct3B,KAAK8S,WAAW1B,EAAQkmB,EAAOvkB,IAAKukB,EAAO/2B,MAAM,IAGnDP,KAAKoc,qBAAqBhL,EAAQ6I,EAAOja,KAAKo1B,4BAChD,CAWQmC,SAAStd,EAAiB7I,GACnB,MAAT6I,GAA+B,oBAAdA,EAAMnV,OAI3BsM,EAAOtM,KAAO,eACdsM,EAAOwC,WAAa,IAAI,IACxBxC,EAAOwC,WAAW9O,KAAO,YACzBsM,EAAOrP,KAAOkY,EAAMud,uBACpBpmB,EAAOsB,MAAQuH,EAAMwd,wBAErBz3B,KAAK8S,WAAW1B,EAAQ,wBAAyB6I,EAAMyd,uBACvD13B,KAAK8S,WAAW1B,EAAQ,yBAA0B6I,EAAM0d,wBACxD33B,KAAK8S,WACH1B,EACA,2BACA6I,EAAM2d,yBACN,YAGF53B,KAAKoc,qBAAqBhL,EAAQ6I,EAAOja,KAAKq1B,kBAChD,CAEQjZ,qBACNhL,EACA6I,EACAqC,GAEuBvN,OAAO6M,KAAK3B,GAAOpS,QAAQ4T,IAAOa,EAAanE,IAAIsD,KAC3DvP,SAAS6G,IACtB,MAAM6K,EAAO3D,EACbja,KAAK8S,WAAW1B,EAAQ2B,EAAK6K,EAAK7K,GAAKsM,WAAW,GAEtD,EChRK,MAAMwY,WAA6B9pB,EACxCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,GAAoB,SAAhBA,EAAMu3B,MACR,OAEF,MAAM1mB,EAASpR,KAAKwS,kBAGpB,GAFApB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAMwB,MAC3CqP,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMmS,OACzB,cAAfnS,EAAMuE,KACRsM,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAMsV,SAC5CzE,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMmT,UACrDtC,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAMkT,eAChD,GAAmB,mBAAflT,EAAMuE,KAA2B,CAC1CsM,EAAOtM,KAAO,SACdsM,EAAOM,KAAO,IAAI,IAClBN,EAAOM,KAAK0D,eAAiBpV,KAAK2Q,kBAAkBpQ,EAAMw3B,YAC1D3mB,EAAOM,KAAK4D,OAAStV,KAAK2Q,kBAAkBpQ,EAAM+U,QAClDlE,EAAOM,KAAKgE,MAAQ1V,KAAK8Q,aAAaM,EAAOM,KAAK4D,QAClDlE,EAAOM,KAAK8D,KAAOxV,KAAK2Q,kBAAkBpQ,EAAMy3B,cAEhD,IACE,MAAMrmB,EAAW3R,KAAK2Q,kBAAkBpQ,EAAM03B,aAC9C,GAAgB,MAAZtmB,EAAkB,CACpB,MAAMumB,EAAiB7hB,SAAS1E,EAAU,MACpB,MAAlBumB,GAA0BA,GAAkB,GAAKA,GAAkB,KACrE9mB,EAAOM,KAAKC,SAAWumB,EAAe7Y,W,EAG1C,S,CAGF,IACE,MAAMzN,EAAU5R,KAAK2Q,kBAAkBpQ,EAAM43B,YAC7C,GAAe,MAAXvmB,EAAiB,CACnB,MAAMwmB,EAAgB/hB,SAASzE,EAAS,MACnB,MAAjBwmB,IACFhnB,EAAOM,KAAKE,QAAUwmB,EAAc/Y,W,EAGxC,S,CAIF,MAAMgZ,EAAMr4B,KAAK2Q,kBAAkBpQ,EAAM83B,KAC9B,MAAPA,GACFr4B,KAAK8S,WAAW1B,EAAQ,MAAOinB,GAEjC,MAAMxtB,EAAM7K,KAAK2Q,kBAAkBpQ,EAAMsoB,SAC9B,MAAPhe,GACF7K,KAAK8S,WAAW1B,EAAQ,WAAYvG,E,CAGxC7K,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,ECpEK,MAAM8tB,WAA4BvqB,EACvCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,GAAe,MAAXwH,EAEF,OADA+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GAGzB,IAAI+I,EAAI,EAoDR,OAnDA9L,EAAQyE,SAAS3L,IACf,MAAM4V,GACHnW,KAAKyP,mBAAmBlP,EAAMg4B,SAAWh4B,EAAMg4B,OAAO/nB,WAAW,KAC9DjQ,EAAMg4B,OAAO9nB,QAAQ,IAAK,IAC1BlQ,EAAMg4B,OACNplB,EAAcnT,KAAKyP,mBAAmB0G,GAAmB,KAATA,EACtDnW,KAAKkT,cAAc1I,EAAQ2I,GAE3B,MAAM/B,EAASpR,KAAKwS,kBAOpB,GANApB,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMma,MAC5CtJ,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAMi4B,KAAM,MACjDpnB,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAMohB,OACrDvQ,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMk4B,KACrDrnB,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAMmnB,MAEvC1nB,KAAKyP,mBAAmBlP,EAAMm4B,WAAY,CAC7C,IAAI/lB,EAAmB,CAACpS,EAAMm4B,WACF,MAAxBn4B,EAAM8yB,gBAA0B9yB,EAAM8yB,eAAevsB,OAAS,IAChE6L,EAASA,EAAOhL,OAAOpH,EAAM8yB,iBAE/B1gB,EAAOzG,SAAS+G,IACd,MAAM3B,EAAQ2B,EAAMpC,MAAM,KAC1B,GAAIS,EAAMxK,OAAS,EACjB,OAEF,MAAMiM,EAAmB,cAAbzB,EAAM,GAAqB,KAAOA,EAAM,GAC9CiD,EAAuB,IAAjBjD,EAAMxK,QAA6B,QAAbwK,EAAM,GAAeA,EAAM,GAAKA,EAAM,GACxEtR,KAAK8S,WAAW1B,EAAQ2B,EAAKwB,EAAI,G,CAIrCvU,KAAKwT,sBAAsBpC,GAC3BpR,KAAK6S,cAAczB,GAGjBmC,IAAM9L,EAAQX,QACE,OAAhBsK,EAAOrP,MACP/B,KAAKyP,mBAAmB2B,EAAOwB,MAAMc,YAKvClJ,EAAOkD,QAAQwC,KAAKkB,GACpBmC,IAAG,IAGDvT,KAAKwO,cACPxO,KAAK6R,yBAAyBrH,GAGhCA,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,EACzB,EC9DK,MAAMmuB,WAA0B5qB,EACrCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,I,MACf,MAAM6Q,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAMykB,MAAO,MAClD5T,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAMoa,UACrDvJ,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMsa,UACrDzJ,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAsB,QAAT,EAAApP,EAAMmnB,WAAG,QAAInnB,EAAMkZ,KACzDrI,EAAOwB,MAAM6D,KAAOzW,KAAK2Q,kBAAkBpQ,EAAMq4B,SACjDxnB,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMif,OAC5Cxf,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,EChBK,MAAMquB,WAA+B9qB,EAC1CuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACbmB,EAAM1O,KAAKyO,SAASxO,GAC1B,GAAW,MAAPyO,EAEF,OADAlE,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GAIzB,GAAU,MADCkE,EAAIjF,cAAc,YAI3B,OAFAe,EAAOyM,aAAe,2BACtBzM,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GAGzB,MAAM8V,EAAa,IAAI3I,IA6EvB,OA3EA5L,MAAMC,KAAK0C,EAAIzC,iBAAiB,qBAAqBC,SAAS4sB,IAC5D,MAAM/2B,EAAO+2B,EAAQnE,aAAa,QAC5B5sB,EAAK+wB,EAAQnE,aAAa,MAChC,IAAK30B,KAAKyP,mBAAmB1N,KAAU/B,KAAKyP,mBAAmB1H,GAAK,CAClEuY,EAAWvI,IAAIhQ,EAAIyC,EAAOmD,QAAQ7G,QAClC,MAAMqP,EAAS,IAAI,IACnBA,EAAOpU,KAAOA,EACdyI,EAAOmD,QAAQuC,KAAKiG,E,KAIxBpK,MAAMC,KAAK0C,EAAIzC,iBAAiB,oBAAoBC,SAAS6sB,IAC3D,GAAwC,SAApCA,EAAOpE,aAAa,aAA6D,SAAnCoE,EAAOpE,aAAa,WACpE,OAGF,MAAMqE,EAAYh5B,KAAKkS,yBAAyB6mB,EAAQ,YACxD,GAAiB,MAAbC,EAAmB,CACrB,MAAMC,EAAUD,EAAUvuB,aACrBzK,KAAKyP,mBAAmBwpB,IAAY3Y,EAAWnI,IAAI8gB,IACtDzuB,EAAOoD,oBAAoBsC,KAAK,CAAC1F,EAAOkD,QAAQ5G,OAAQwZ,EAAW5d,IAAIu2B,I,CAI3E,MAAM7nB,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBooB,EAAOpE,aAAa,SAAU,MAE/B,SAAhCoE,EAAOpE,aAAa,UACtBvjB,EAAOqB,UAAW,GAIH,SADAsmB,EAAOpE,aAAa,SAEnCvjB,EAAOtM,KAAO,eACdsM,EAAOwC,WAAa,IAAI,IACxBxC,EAAOwC,WAAW9O,KAAO,aAEzBiH,MAAMC,KAAKhM,KAAKsS,4BAA4BymB,EAAQ,UAAU7sB,SAASgtB,IACrE,MAAM7vB,EAAO6vB,EAAQzuB,YACrB,GAAIzK,KAAKyP,mBAAmBpG,GAC1B,OAEF,MAAMtH,EAAOm3B,EAAQvE,aAAa,QAC5BhJ,EAAY3rB,KAAK2Q,kBAAkBuoB,EAAQvE,aAAa,QAAS,IAAIhoB,cACzD,UAAdgf,EACFva,EAAOwB,MAAMa,SAAWpK,EACD,aAAdsiB,GAA0C,WAAdA,EAErC3rB,KAAK8S,WAAW1B,EAAQrP,EAAMsH,EAAM,YACb,sBAAdsiB,EACTva,EAAOwB,MAAM6D,KAAOpN,EACG,UAAdsiB,EACTva,EAAOsB,OAASrJ,EAAO,KACA,aAAdsiB,GAA0C,YAAdA,EACrCva,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAatG,GAEtCrJ,KAAK8S,WAAW1B,EAAQrP,EAAMsH,E,IAKpC0C,MAAMC,KAAKhM,KAAKsS,4BAA4BymB,EAAQ,UAAU7sB,SAASitB,IACrE/nB,EAAOsB,OAASymB,EAAQ1uB,YAAc,IAAI,IAG5CzK,KAAKo5B,YAAYhoB,GACjBpR,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAGzBpR,KAAKwO,cACPxO,KAAK6R,yBAAyBrH,GAGhCA,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,EACzB,CAIA4uB,YAAYhoB,GACV,MAAMioB,EAAajoB,EAAOuB,OAAO9K,QAAQoL,GAAUA,EAAMnO,OAAS,aAClE,IAAKu0B,EAAWvyB,OACd,OAGF,IAAIwyB,EACJ,IAAK,MAAMrmB,KAASomB,EAClB,GAAIr5B,KAAKiO,mBAAmB0jB,SAAS1e,EAAMlR,KAAK4K,eAAgB,CAC9D2sB,EAASrmB,EACT7B,EAAOuB,OAASvB,EAAOuB,OAAO9K,QAAQmK,GAAMA,IAAMsnB,IAClD,K,CAICA,IACHA,EAASD,EAAW,IAGtBjoB,EAAOwB,MAAMc,SAAW4lB,EAAO/4B,KACjC,EC7HK,MAAMg5B,WAA6BxrB,EACxCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,MAAM6Q,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO/B,KAAK2Q,kBAAkB3Q,KAAKqQ,YAAY9P,EAAM+P,KAAM,MAClEc,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMmS,OAC5CtB,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAMkT,UACrDrC,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMmT,UACrDtC,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAM+P,KAC5CtQ,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,ECtBK,MAAMgvB,WAA8BzrB,EACzCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,MAAM6Q,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAMykB,OAC3C5T,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMk5B,SAC5CroB,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAMmnB,KAC5CtW,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMsa,UACrDzJ,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAMoa,UACrD3a,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,ECrBK,MAAMkvB,WAA4B3rB,EACvCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,GAAIA,EAAMuG,OAAS,EACjB,OAGF9G,KAAKkT,cAAc1I,EAAQxK,KAAK2Q,kBAAkBpQ,EAAMA,EAAMuG,OAAS,KACvE,MAAMsK,EAASpR,KAAKwS,kBACpBpB,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMA,EAAMuG,OAAS,GAAI,IAC/DsK,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAM,GAAI,MAE9B,eAAbA,EAAM,IAAoC,YAAbA,EAAM,IAAiC,mBAAbA,EAAM,IAC/D6Q,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAM,IACrD6Q,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAM,IACrD6Q,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAM,IAC5CP,KAAK25B,mBAAmBvoB,EAAQ,EAAG7Q,IAEnCP,KAAK25B,mBAAmBvoB,EAAQ,EAAG7Q,GAGrCP,KAAKwT,sBAAsBpC,GAC3BpR,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAGzBpR,KAAKwO,cACPxO,KAAK6R,yBAAyBrH,GAGhCA,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,CAEQmvB,mBAAmBvoB,EAAoBwoB,EAAoBr5B,GAEjE,IAAK,IAAIgT,EAAIqmB,EAAYrmB,EAAIhT,EAAMuG,OAAS,EAAGyM,IACzCvT,KAAKyP,mBAAmBlP,EAAMgT,MAGlCnC,EAAOsB,OAASnS,EAAMgT,GAAK,KAE/B,EClDK,MAAMsmB,WAAkC9rB,EAC7CuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACbmB,EAAM1O,KAAKyO,SAASxO,GAC1B,GAAW,MAAPyO,EAEF,OADAlE,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GAGzB,MAAMsvB,EAAaprB,EAAIzC,iBAAiB,oCAsDxC,OArDAF,MAAMC,KAAK8tB,GAAY5tB,SAAS6tB,IAC9B,MAAMC,EAAYD,EAAUpF,aAAa,MACzC,GAAI30B,KAAKyP,mBAAmBuqB,GAC1B,OAGF,MAAMC,EAAeF,EAAUpF,aAAa,QACtCuF,EAAeH,EAAUpF,aAAa,YAC5C,IAAIvrB,EAAoB,KACpB+wB,EAAmB,KACnBC,EAAoB,KACpBC,EAAkB,KAClBzF,EAAoB,KAExB,MAAM0F,EAAe5rB,EAAIjF,cACvB,4EAEEuwB,EACA,MAEJ,GAAoB,MAAhBM,EAAsB,CACxB,MAAMC,EAAUD,EAAaE,cAAcA,cAC5B,MAAXD,IACFnxB,EAAYmxB,EAAQ5F,aAAa,QACjCwF,EAAWI,EAAQ5F,aAAa,QAChC0F,EAAUE,EAAQ5F,aAAa,YAC/ByF,EAAYG,EAAQ5F,aAAa,YAC5B30B,KAAKyP,mBAAmB2qB,KAC3BA,EAAYA,EAAUvpB,MAAM,MAAM3B,KAAK,O,CAKxClP,KAAKyP,mBAAmB4qB,KAC3BzF,EAAY50B,KAAKy6B,eAAe/rB,EAAK2rB,EAAS,IAC9Cr6B,KAAKkT,cAAc1I,EAAQoqB,IAG7B,MAAMxjB,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBvH,EAAW,MAChDgI,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBypB,GACtChpB,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBspB,GAC/C7oB,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBupB,GAC/C9oB,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAawqB,GACtCn6B,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAGzBpR,KAAKwO,cACPxO,KAAK6R,yBAAyBrH,GAGhCA,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,EACzB,CAEAiwB,eAAe/rB,EAAe2rB,EAAiBzF,GAC7C,MAAMpzB,EAAQkN,EAAIjF,cAAc,wCAA0C4wB,EAAU,MACpF,OAAa,MAAT74B,EACKozB,GAEJ50B,KAAKyP,mBAAmBmlB,KAC3BA,EAAY,IAAMA,GAEpBA,EAAYpzB,EAAMmzB,aAAa,QAAUC,EAClC50B,KAAKy6B,eAAe/rB,EAAKlN,EAAMmzB,aAAa,YAAaC,GAClE,ECxEF,MAAM8F,GAAqB,CACzB,OACA,YACA,WACA,WACA,wBACA,gBACA,OACA,oBACA,OACA,QACA,oBAGK,MAAMC,WAA2B5sB,EACtCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,MAAM6Q,EAASpR,KAAKwS,kBAapB,GAZApB,EAAOqB,SAAwE,SAA7DzS,KAAK2Q,kBAAkBpQ,EAAMkS,SAAU,IAAI9F,cAC7DyE,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAMwB,KAAM,MACjDqP,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMq6B,KAAM,IAClDxpB,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAMqS,OACrDxB,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMmT,UACrDtC,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAM+P,KAEzB,UAAf/P,EAAMs6B,OACRzpB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAMyK,MAAO,MAClDoG,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMwU,KAAM,KAGjC,OAAfxU,EAAMs6B,MAMR,GALAzpB,EAAOtM,KAAO,SACdsM,EAAOM,KAAO,IAAI,IAClBN,EAAOM,KAAK0D,eAAiBpV,KAAK2Q,kBAAkBpQ,EAAMw3B,YAC1D3mB,EAAOM,KAAK4D,OAAStV,KAAK2Q,kBAAkBpQ,EAAM+U,QAClDlE,EAAOM,KAAKgE,MAAQ1V,KAAK8Q,aAAaM,EAAOM,KAAK4D,SAC7CtV,KAAKyP,mBAAmBlP,EAAMu6B,YACjC,IACE,MAAM9G,EAAU,IAAI7Y,KAAK5a,EAAMu6B,YAC/B1pB,EAAOM,KAAKE,QAAUoiB,EAAQC,cAAc5U,WAC5CjO,EAAOM,KAAKC,UAAYqiB,EAAQlN,WAAa,GAAGzH,U,CAChD,S,OAIC,GAAmB,UAAf9e,EAAMs6B,KAAkB,CACjCzpB,EAAOtM,KAAO,eACdsM,EAAOwC,WAAa,IAAI,IACxBxC,EAAOwC,WAAW9O,KAAO,YACpB9E,KAAKyP,mBAAmB2B,EAAOsB,SAClCtB,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMw6B,iBAAkB,KAEhE,IAAK,MAAM5gB,KAAY5Z,EAEnBA,EAAMqZ,eAAeO,IACrBugB,GAAmBvqB,QAAQgK,EAASxN,eAAiB,IACpD3M,KAAKyP,mBAAmBlP,EAAM4Z,KAE/Bna,KAAK8S,WAAW1B,EAAQ+I,EAAU5Z,EAAM4Z,G,CAK9Cna,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,EChFK,MAAMwwB,WAAuBjtB,EAClCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,GAAqB,IAAjBA,EAAMuG,OACR,OAEF,MAAMsK,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAM,GAAI,MAC/C6Q,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAM,IAC5C6Q,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAM,IACrD6Q,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAM,IACrD6Q,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAM,IAC5CP,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,ECzBK,MAAMywB,WAAwBltB,EACnCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,MAAM6Q,EAASpR,KAAKwS,kBACpBpB,EAAOrP,KAAO/B,KAAK2Q,kBAAkBpQ,EAAMi4B,KAAM,MACjDpnB,EAAOwB,MAAMa,SAAWzT,KAAK2Q,kBAAkBpQ,EAAM,cACrD6Q,EAAOwB,MAAMc,SAAW1T,KAAK2Q,kBAAkBpQ,EAAMsa,UACrDzJ,EAAOwB,MAAMe,KAAO3T,KAAK2P,aAAapP,EAAMkZ,KAC5CzZ,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAG7B5G,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,ECpBK,MAAM0wB,WAA6BntB,EACxCuG,MAAMrU,GACJ,MAAMuK,EAAS,IAAI+C,EACb9F,EAAUzH,KAAK2O,SAAS1O,GAAM,GACpC,OAAe,MAAXwH,GACF+C,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,KAGzB/C,EAAQyE,SAAS3L,IACf,GACEP,KAAKyP,mBAAmBlP,EAAM,mBAC9BP,KAAKyP,mBAAmBlP,EAAM,gBAE9B,OAEFP,KAAKkT,cAAc1I,EAAQxK,KAAK2Q,kBAAkBpQ,EAAM46B,cACxD,MAAM/pB,EAASpR,KAAKwS,kBACpBpB,EAAOqB,SAA2D,MAAhDzS,KAAK2Q,kBAAkBpQ,EAAMia,SAAU,KACzDpJ,EAAOsB,MAAQ1S,KAAK2Q,kBAAkBpQ,EAAMif,OAC5CpO,EAAOrP,KAAO/B,KAAK2Q,kBACjBpQ,EAAM,iBACNP,KAAK2Q,kBAAkBpQ,EAAM,eAAgB,OAE/C6Q,EAAOwB,MAAMe,KAAO3T,KAAK2P,aACvB3P,KAAK2Q,kBAAkBpQ,EAAM,gBAAiBP,KAAK2Q,kBAAkBpQ,EAAM,iBAE7EP,KAAKo7B,UAAUhqB,EAAQ7Q,EAAM86B,YAC7Br7B,KAAKo7B,UAAUhqB,EAAQ7Q,EAAM+6B,YAC7Bt7B,KAAKwT,sBAAsBpC,GAC3BpR,KAAK6S,cAAczB,GACnB5G,EAAOkD,QAAQwC,KAAKkB,EAAO,IAGzBpR,KAAKwO,cACPxO,KAAK6R,yBAAyBrH,GAGhCA,EAAOgD,SAAU,EACV3D,QAAQC,QAAQU,GACzB,CAEQ4wB,UAAUhqB,EAAoBnR,GACpC,GAAID,KAAKyP,mBAAmBxP,GAC1B,OAEgBD,KAAKiP,aAAahP,GAC1BiM,SAAS4d,IACjB,MAAMvT,EAAgBuT,EAAK3Z,QAAQ,KACnC,GAAIoG,EAAgB,EAClB,OAEF,MAAMtD,EAAQ6W,EAAK1Z,UAAU,EAAGmG,GAC1BhW,EAAQupB,EAAKhjB,OAASyP,EAAgBuT,EAAK1Z,UAAUmG,EAAgB,GAAK,KAChF,GACEvW,KAAKyP,mBAAmBwD,IACxBjT,KAAKyP,mBAAmBlP,IACd,eAAV0S,EAEA,OAEF,MAAMuB,EAAavB,EAAMtG,cACI,MAAzByE,EAAOwB,MAAMa,UAAoBzT,KAAKkO,mBAAmBiC,QAAQqE,IAAe,EAClFpD,EAAOwB,MAAMa,SAAWlT,EAEC,MAAzB6Q,EAAOwB,MAAMc,UACb1T,KAAKiO,mBAAmBkC,QAAQqE,IAAe,EAE/CpD,EAAOwB,MAAMc,SAAWnT,EAExBP,KAAK8S,WAAW1B,EAAQ6B,EAAO1S,E,GAGrC,EC1EK,MAAMg7B,GAAb,cACE,KAAA7tB,QAA2B,GAC3B,KAAAC,QAA2B,GAC3B,KAAAC,oBAAoD,EACtD,ECJO,MAAM4tB,GAAb,cACE,KAAA9tB,QAA2B,GAC3B,KAAAG,YAAmC,GACnC,KAAAC,wBAAwD,EAC1D,ECTO,MAAM2tB,GAIXj8B,YAAYuT,EAASxS,GACnBP,KAAK+S,IAAMA,EACX/S,KAAKO,MAAQA,CACf,E,+UC8EK,MAAMyM,GAKXxN,YACUk8B,EACAC,EACAC,EACA97B,EACA+7B,EACA/6B,GALA,KAAA46B,cAAAA,EACA,KAAAC,cAAAA,EACA,KAAAC,iBAAAA,EACA,KAAA97B,YAAAA,EACA,KAAA+7B,kBAAAA,EACA,KAAA/6B,cAAAA,EAVV,KAAA4G,sBAAwBA,EAExB,KAAAM,qBAAuBA,CASpB,CAEH8zB,mBACE,OAAO97B,KAAK0H,sBAAsBC,OAAO3H,KAAKgI,qBAChD,CAEMd,OACJT,EACAM,EACAV,EAAyB,M,0CAEzB,MAAM01B,QAAqBt1B,EAAS6N,MAAMvN,GAC1C,GAAIg1B,EAAavuB,QAAS,CACxB,GAAoC,IAAhCuuB,EAAapuB,QAAQ7G,QAAgD,IAAhCi1B,EAAaruB,QAAQ5G,OAC5D,OAAO,IAAI0b,GAAYxiB,KAAKF,YAAYY,EAAE,uBACrC,GAAIq7B,EAAaruB,QAAQ5G,OAAS,EAAG,CAC1C,MAAMk1B,EAAUC,KAAKC,MAAMH,EAAaruB,QAAQ5G,OAAS,GACnDq1B,EAAOJ,EAAaruB,QAAQ5G,OAAS,EAE3C,GACE9G,KAAKo8B,QAAQL,EAAaruB,QAAQ,KAClC1N,KAAKo8B,QAAQL,EAAaruB,QAAQsuB,KAClCh8B,KAAKo8B,QAAQL,EAAaruB,QAAQyuB,IAElC,OAAO,IAAI3Z,GAAYxiB,KAAKF,YAAYY,EAAE,qB,CAG9C,UACQV,KAAKq8B,WAAWN,EAAc11B,E,CACpC,MAAO3C,GACP,MAAM44B,EAAgB,IAAI,KAAc54B,EAAO,KAC/C,OAAO1D,KAAKu8B,kBAAkBD,EAAeP,E,CAE/C,OAAO,I,CAEP,OAAK,uBAAyBA,EAAa9kB,cAGlC,IAAIuL,GACTxiB,KAAKF,YAAYY,EAAE,qBACnBq7B,EAAatuB,iBAJR,IAAI+U,GAAYuZ,EAAa9kB,aAAc8kB,EAAatuB,gBAQrE,G,CAEA/G,YACEjF,EACA4E,EAAyB,KACzBqN,EAAmB,MAEnB,MAAMjN,EAAWzG,KAAKw8B,oBAAoB/6B,EAAQiS,GAClD,OAAgB,MAAZjN,EACK,MAETA,EAASJ,eAAiBA,EACnBI,EACT,CAEQ+1B,oBAAoB/6B,EAAmDiS,GAC7E,GAAc,MAAVjS,EACF,OAAO,KAGT,OAAQA,GACN,IAAK,eACH,OAAO,IAAIsU,EACb,IAAK,gBACH,OAAO,IAAIe,EAAsB9W,KAAKc,cAAed,KAAKF,aAC5D,IAAK,6BACH,OAAO,IAAIuY,EACTrY,KAAKc,cACLd,KAAKF,YACL4T,GAEJ,IAAK,cACL,IAAK,cACH,OAAO,IAAIyR,GACb,IAAK,cACH,OAAO,IAAIJ,GACb,IAAK,WACH,OAAO,IAAInP,EACb,IAAK,UACH,OAAO,IAAIwD,EACb,IAAK,iBACH,OAAO,IAAIyf,GACb,IAAK,aACH,OAAO,IAAI1G,GACb,IAAK,cACH,OAAO,IAAIpO,GACb,IAAK,YACL,IAAK,WACL,IAAK,aACH,OAAO,IAAIlK,EACb,IAAK,aACH,OAAO,IAAIyH,GACb,IAAK,SACH,OAAO,IAAI0Z,GACb,IAAK,eACH,OAAO,IAAIzB,GACb,IAAK,YACH,OAAO,IAAIZ,GACb,IAAK,aACH,OAAO,IAAIpR,GACb,IAAK,gBACH,OAAO,IAAIsC,GACb,IAAK,gBACH,OAAO,IAAI+B,GACb,IAAK,kBACH,OAAO,IAAIoG,GACb,IAAK,kBACH,OAAO,IAAID,GACb,IAAK,YACH,OAAO,IAAI7M,GAGb,IAAK,oBACH,OAAO,IAAIiP,GACb,IAAK,YACH,OAAO,IAAIrU,EACb,IAAK,aACH,OAAO,IAAIO,GACb,IAAK,YACH,OAAO,IAAImU,GACb,IAAK,cACH,OAAO,IAAIhZ,EACb,IAAK,eACH,OAAO,IAAIsC,EACb,IAAK,aACH,OAAO,IAAI6J,GACb,IAAK,oBACH,OAAO,IAAIkS,GACb,IAAK,aACH,OAAO,IAAIc,GACb,IAAK,eACH,OAAO,IAAI5gB,EACb,IAAK,cACH,OAAO,IAAIue,GACb,IAAK,aACH,OAAO,IAAIjkB,EACb,IAAK,mBACH,OAAO,IAAIuf,GACb,IAAK,eACH,OAAO,IAAIsH,GACb,IAAK,cACH,OAAO,IAAIxB,GACb,IAAK,cACH,OAAO,IAAInH,GACb,IAAK,YACH,OAAO,IAAIrQ,GACb,IAAK,mBACH,OAAO,IAAIuR,GACb,IAAK,cACH,OAAO,IAAIR,GACb,IAAK,cACH,OAAO,IAAIL,GACb,IAAK,WACH,OAAO,IAAIne,EACb,IAAK,YACH,OAAO,IAAIE,EACb,IAAK,aACH,OAAO,IAAI6M,GACb,IAAK,eACH,OAAO,IAAIsB,GACb,IAAK,eACH,OAAO,IAAI+U,GACb,IAAK,oBACH,OAAO,IAAIhD,GACb,IAAK,UACH,OAAO,IAAI1M,GACb,IAAK,gBACH,OAAO,IAAIqR,GACb,IAAK,eACH,OAAO,IAAIlS,GACb,IAAK,gBACH,OAAO,IAAItO,EACb,IAAK,eACH,OAAO,IAAIQ,EACb,IAAK,cACH,OAAO,IAAIc,EACb,IAAK,cACH,OAAO,IAAIgF,EACb,IAAK,UACH,OAAO,IAAI2b,GACb,IAAK,cACH,OAAO,IAAI/R,GACb,IAAK,YACH,OAAO,IAAI4L,GACb,IAAK,aACH,OAAO,IAAIrC,GACb,QACE,OAAO,KAEb,CAEc4J,WAAWN,EAA4B11B,EAAyB,M,0CAC5E,GAAsB,MAAlBA,EAAwB,CAC1B,MAAM+G,EAAU,IAAImuB,GACpB,IAAK,IAAIhoB,EAAI,EAAGA,EAAIwoB,EAAaruB,QAAQ5G,OAAQyM,IAAK,CACpD,MAAMqE,QAAU5X,KAAK07B,cAAce,QAAQV,EAAaruB,QAAQ6F,IAChEnG,EAAQM,QAAQwC,KAAK,IAAI,KAAc0H,G,CAEzC,GAA4B,MAAxBmkB,EAAapuB,QACf,IAAK,IAAI4F,EAAI,EAAGA,EAAIwoB,EAAapuB,QAAQ7G,OAAQyM,IAAK,CACpD,MAAMvB,QAAUhS,KAAK27B,cAAcc,QAAQV,EAAapuB,QAAQ4F,IAChEnG,EAAQO,QAAQuC,KAAK,IAAI,KAAc8B,G,CAQ3C,OALwC,MAApC+pB,EAAanuB,qBACfmuB,EAAanuB,oBAAoB1B,SAAS4F,GACxC1E,EAAQQ,oBAAoBsC,KAAK,IAAIurB,GAAW3pB,EAAE,GAAIA,EAAE,aAG/C9R,KAAK47B,iBAAiBzuB,kBAAkBC,E,CAChD,CACL,MAAMA,EAAU,IAAIouB,GACpB,IAAK,IAAIjoB,EAAI,EAAGA,EAAIwoB,EAAaruB,QAAQ5G,OAAQyM,IAAK,CACpDwoB,EAAaruB,QAAQ6F,GAAGlN,eAAiBA,EACzC,MAAMuR,QAAU5X,KAAK07B,cAAce,QAAQV,EAAaruB,QAAQ6F,IAChEnG,EAAQM,QAAQwC,KAAK,IAAI,KAAc0H,G,CAEzC,GAAgC,MAA5BmkB,EAAaluB,YACf,IAAK,IAAI0F,EAAI,EAAGA,EAAIwoB,EAAaluB,YAAY/G,OAAQyM,IAAK,CACxDwoB,EAAaluB,YAAY0F,GAAGlN,eAAiBA,EAC7C,MAAMuR,QAAU5X,KAAK67B,kBAAkBY,QAAQV,EAAaluB,YAAY0F,IACxEnG,EAAQS,YAAYqC,KAAK,IAAI,IAAkB0H,G,CAQnD,OAL4C,MAAxCmkB,EAAajuB,yBACfiuB,EAAajuB,wBAAwB5B,SAAS4F,GAC5C1E,EAAQU,wBAAwBoC,KAAK,IAAIurB,GAAW3pB,EAAE,GAAIA,EAAE,aAGnD9R,KAAK47B,iBAAiBtuB,8BAA8BjH,EAAgB+G,E,CAErF,G,CAEQgvB,QAAQxkB,GACd,OACa,MAAVA,EAAE7V,MAA2B,OAAX6V,EAAE7V,OACrB6V,EAAE9S,OAAS,WACA,MAAX8S,EAAEhF,OACF,uBAAyBgF,EAAEhF,MAAMc,SAErC,CAEQ6oB,kBAAkBD,EAA8BP,GACtD,GAAsC,MAAlCO,EAAcI,iBAChB,OAAO,IAAIla,GAAY8Z,EAAc14B,SAGvC,IAAIqT,EAAe,GAmCnB,OAjCAlI,OAAOoiB,QAAQmL,EAAcI,kBAAkBxwB,SAAQ,EAAE6G,EAAKxS,GAAQo8B,KACpE,IAAI/e,EACAgf,EACJ,MAAMrpB,EAAIoT,OAAO5T,EAAIhD,MAAM,UAAU,IAErC,OAAQgD,EAAIhD,MAAM,QAAQ,IACxB,IAAK,UACH6N,EAAOme,EAAaruB,QAAQ6F,GAC5BqpB,EAAW,IAAWhf,EAAK9Y,MAC3B,MACF,IAAK,UACH8Y,EAAOme,EAAapuB,QAAQ4F,GAC5BqpB,EAAW,SACX,MACF,IAAK,cACHhf,EAAOme,EAAaluB,YAAY0F,GAChCqpB,EAAW,aACX,MACF,QACE,OAGAD,EAAQ,IACV1lB,GAAgB,QAGD,WAAb2lB,GAAsC,eAAbA,IAC3B3lB,GAAgB,KAAO1D,EAAI,GAAK,MAGlC0D,GAAgB,IAAM2lB,EAAW,MAAQhf,EAAK7b,KAAO,MAAQxB,CAAK,IAG7D,IAAIiiB,GAAYvL,EACzB,E","sources":["webpack://@bitwarden/web-vault/../../libs/angular/src/auth/components/user-verification-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/components/user-verification-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/components/user-verification-prompt.component.html","webpack://@bitwarden/web-vault/../../libs/common/src/enums/encryptedExportType.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/components/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/file-password-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/file-password-prompt.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/components/export-scope-callout.component.html","webpack://@bitwarden/web-vault/../../libs/angular/src/components/export-scope-callout.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/directives/box-row.directive.ts","webpack://@bitwarden/web-vault/../../libs/common/src/abstractions/import/import-api.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/common/src/abstractions/import/import.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/common/src/services/import/import-api.service.ts","webpack://@bitwarden/web-vault/../../libs/common/src/enums/importOptions.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/domain/import-result.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/base-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/ascendo-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/avast-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/avast-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/avira-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/bitwarden-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/bitwarden-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/bitwarden-password-protected-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/blackberry-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/blur-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/buttercup-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/chrome-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/clipperz-html-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/codebook-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/dashlane/dashlane-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/dashlane/dashlane-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/encryptr-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/enpass/enpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/enpass/enpass-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/firefox-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/fsecure/fsecure-fsk-types.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/fsecure/fsecure-fsk-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/gnome-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/import-error.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/kaspersky-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/keepass2-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/keepassx-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/keeper/keeper-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/lastpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/logmeonce-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/meldium-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/msecure-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/myki-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/nordpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepassword/types/onepassword-1pux-importer-types.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepassword/onepassword-1pif-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepassword/onepassword-1pux-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepassword/cipher-import-context.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepassword/onepassword-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepassword/onepassword-mac-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepassword/onepassword-win-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/padlock-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passkeep-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passky/passky-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passman-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passpack-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passwordagent-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passwordboss-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passworddragon-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passwordsafe-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passwordwallet-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/psono/psono-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/remembear-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/roboform-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/safari-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/safeincloud-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/saferpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/securesafe-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/splashid-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/stickypassword-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/truekey-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/upm-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/yoti-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/zohovault-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-organization-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/kvp.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/services/import/import.service.ts"],"sourcesContent":["import { Directive } from \"@angular/core\";\nimport { FormBuilder, FormControl } from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\n\nimport { ModalRef } from \"../../components/modal/modal.ref\";\nimport { ModalConfig } from \"../../services/modal.service\";\n\n/**\n * Used to verify the user's identity (using their master password or email-based OTP for Key Connector users). You can customize all of the text in the modal.\n */\n@Directive()\nexport class UserVerificationPromptComponent {\n  confirmDescription = this.config.data.confirmDescription;\n  confirmButtonText = this.config.data.confirmButtonText;\n  modalTitle = this.config.data.modalTitle;\n  secret = new FormControl();\n\n  constructor(\n    private modalRef: ModalRef,\n    protected config: ModalConfig,\n    protected userVerificationService: UserVerificationService,\n    private formBuilder: FormBuilder,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  async submit() {\n    try {\n      //Incorrect secret will throw an invalid password error.\n      await this.userVerificationService.verifyUser(this.secret.value);\n    } catch (e) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"error\"),\n        this.i18nService.t(\"invalidMasterPassword\")\n      );\n      return;\n    }\n\n    this.modalRef.close(true);\n  }\n}\n","import { Component } from \"@angular/core\";\n\nimport { UserVerificationPromptComponent as BaseUserVerificationPrompt } from \"@bitwarden/angular/auth/components/user-verification-prompt.component\";\n\n@Component({\n  templateUrl: \"user-verification-prompt.component.html\",\n})\nexport class UserVerificationPromptComponent extends BaseUserVerificationPrompt {}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable @angular-eslint/template/button-has-type -->\n<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"confirmUserTitle\">\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form class=\"modal-content\" #form (ngSubmit)=\"submit()\">\n      <h2 class=\"tw-my-6 tw-px-3.5 tw-font-semibold\" id=\"modalTitle | i18n \">\n        {{ modalTitle | i18n | uppercase }}\n      </h2>\n      <div class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-p-3.5\">\n        {{ confirmDescription | i18n }}\n      </div>\n      <div class=\"tw-p-3.5\">\n        <app-user-verification ngDefaultControl [formControl]=\"secret\" name=\"secret\">\n        </app-user-verification>\n      </div>\n      <div\n        class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-p-3.5\"\n      >\n        <button bitButton buttonType=\"primary\" type=\"submit\" appBlurClick>\n          <span>{{ confirmButtonText | i18n }}</span>\n        </button>\n        <button bitButton buttonType=\"secondary\" data-dismiss=\"modal\">\n          {{ \"cancel\" | i18n }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","export enum EncryptedExportType {\n  AccountEncrypted = 0,\n  FileEncrypted = 1,\n}\n","import { Directive, EventEmitter, OnDestroy, OnInit, Output } from \"@angular/core\";\nimport { UntypedFormBuilder, Validators } from \"@angular/forms\";\nimport { merge, takeUntil, Subject, startWith } from \"rxjs\";\n\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { ExportService } from \"@bitwarden/common/abstractions/export.service\";\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums/policy-type\";\nimport { EncryptedExportType } from \"@bitwarden/common/enums/encryptedExportType\";\nimport { EventType } from \"@bitwarden/common/enums/eventType\";\n\n@Directive()\nexport class ExportComponent implements OnInit, OnDestroy {\n  @Output() onSaved = new EventEmitter();\n\n  formPromise: Promise<string>;\n  disabledByPolicy = false;\n\n  exportForm = this.formBuilder.group({\n    format: [\"json\"],\n    secret: [\"\"],\n    filePassword: [\"\", Validators.required],\n    confirmFilePassword: [\"\", Validators.required],\n    fileEncryptionType: [EncryptedExportType.AccountEncrypted],\n  });\n\n  formatOptions = [\n    { name: \".json\", value: \"json\" },\n    { name: \".csv\", value: \"csv\" },\n    { name: \".json (Encrypted)\", value: \"encrypted_json\" },\n  ];\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected exportService: ExportService,\n    protected eventCollectionService: EventCollectionService,\n    private policyService: PolicyService,\n    protected win: Window,\n    private logService: LogService,\n    private userVerificationService: UserVerificationService,\n    private formBuilder: UntypedFormBuilder,\n    protected fileDownloadService: FileDownloadService\n  ) {}\n\n  async ngOnInit() {\n    this.policyService\n      .policyAppliesToActiveUser$(PolicyType.DisablePersonalVaultExport)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((policyAppliesToActiveUser) => {\n        this.disabledByPolicy = policyAppliesToActiveUser;\n      });\n\n    await this.checkExportDisabled();\n\n    merge(\n      this.exportForm.get(\"format\").valueChanges,\n      this.exportForm.get(\"fileEncryptionType\").valueChanges\n    )\n      .pipe(takeUntil(this.destroy$))\n      .pipe(startWith(0))\n      .subscribe(() => this.adjustValidators());\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n  }\n\n  async checkExportDisabled() {\n    if (this.disabledByPolicy) {\n      this.exportForm.disable();\n    }\n  }\n\n  get encryptedFormat() {\n    return this.format === \"encrypted_json\";\n  }\n\n  protected async doExport() {\n    try {\n      this.formPromise = this.getExportData();\n      const data = await this.formPromise;\n      this.downloadFile(data);\n      this.saved();\n      await this.collectEvent();\n      this.exportForm.get(\"secret\").setValue(\"\");\n      this.exportForm.clearValidators();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async submit() {\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const acceptedWarning = await this.warningDialog();\n    if (!acceptedWarning) {\n      return;\n    }\n    const secret = this.exportForm.get(\"secret\").value;\n\n    try {\n      await this.userVerificationService.verifyUser(secret);\n    } catch (e) {\n      this.platformUtilsService.showToast(\"error\", this.i18nService.t(\"errorOccurred\"), e.message);\n      return;\n    }\n\n    this.doExport();\n  }\n\n  async warningDialog() {\n    if (this.encryptedFormat) {\n      return await this.platformUtilsService.showDialog(\n        \"<p>\" +\n          this.i18nService.t(\"encExportKeyWarningDesc\") +\n          \"<p>\" +\n          this.i18nService.t(\"encExportAccountWarningDesc\"),\n        this.i18nService.t(\"confirmVaultExport\"),\n        this.i18nService.t(\"exportVault\"),\n        this.i18nService.t(\"cancel\"),\n        \"warning\",\n        true\n      );\n    } else {\n      return await this.platformUtilsService.showDialog(\n        this.i18nService.t(\"exportWarningDesc\"),\n        this.i18nService.t(\"confirmVaultExport\"),\n        this.i18nService.t(\"exportVault\"),\n        this.i18nService.t(\"cancel\"),\n        \"warning\"\n      );\n    }\n  }\n\n  protected saved() {\n    this.onSaved.emit();\n  }\n\n  protected getExportData() {\n    if (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    ) {\n      return this.exportService.getPasswordProtectedExport(this.filePassword);\n    } else {\n      return this.exportService.getExport(this.format, null);\n    }\n  }\n\n  protected getFileName(prefix?: string) {\n    let extension = this.format;\n    if (this.format === \"encrypted_json\") {\n      if (prefix == null) {\n        prefix = \"encrypted\";\n      } else {\n        prefix = \"encrypted_\" + prefix;\n      }\n      extension = \"json\";\n    }\n    return this.exportService.getFileName(prefix, extension);\n  }\n\n  protected async collectEvent(): Promise<void> {\n    await this.eventCollectionService.collect(EventType.User_ClientExportedVault);\n  }\n\n  get format() {\n    return this.exportForm.get(\"format\").value;\n  }\n\n  get filePassword() {\n    return this.exportForm.get(\"filePassword\").value;\n  }\n\n  get confirmFilePassword() {\n    return this.exportForm.get(\"confirmFilePassword\").value;\n  }\n\n  get fileEncryptionType() {\n    return this.exportForm.get(\"fileEncryptionType\").value;\n  }\n\n  adjustValidators() {\n    this.exportForm.get(\"confirmFilePassword\").reset();\n    this.exportForm.get(\"filePassword\").reset();\n\n    if (this.encryptedFormat && this.fileEncryptionType == EncryptedExportType.FileEncrypted) {\n      this.exportForm.controls.filePassword.enable();\n      this.exportForm.controls.confirmFilePassword.enable();\n    } else {\n      this.exportForm.controls.filePassword.disable();\n      this.exportForm.controls.confirmFilePassword.disable();\n    }\n  }\n\n  private downloadFile(csv: string): void {\n    const fileName = this.getFileName();\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: csv,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable tailwindcss/no-custom-classname -->\n<form\n  #form\n  (ngSubmit)=\"submit()\"\n  [appApiAction]=\"formPromise\"\n  [formGroup]=\"exportForm\"\n  *ngIf=\"exportForm\"\n>\n  <div class=\"page-header\">\n    <h1>{{ \"exportVault\" | i18n }}</h1>\n  </div>\n\n  <app-callout type=\"error\" title=\"{{ 'vaultExportDisabled' | i18n }}\" *ngIf=\"disabledByPolicy\">\n    {{ \"personalVaultExportPolicyInEffect\" | i18n }}\n  </app-callout>\n  <app-export-scope-callout\n    [organizationId]=\"organizationId\"\n    *ngIf=\"!disabledByPolicy\"\n  ></app-export-scope-callout>\n\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <bit-form-field>\n        <bit-label class=\"tw-text-lg\" for=\"format\">{{ \"fileFormat\" | i18n }}</bit-label>\n        <select bitInput name=\"format\" formControlName=\"format\">\n          <option *ngFor=\"let f of formatOptions\" [value]=\"f.value\">{{ f.name }}</option>\n        </select>\n      </bit-form-field>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"form-group col-6\">\n      <ng-container *ngIf=\"format === 'encrypted_json'\">\n        <div role=\"radiogroup\" aria-labelledby=\"exportTypeHeading\">\n          <label id=\"exportTypeHeading\" class=\"tw-semi-bold tw-text-lg\">\n            {{ \"exportTypeHeading\" | i18n }}\n          </label>\n\n          <div appBoxRow name=\"FileTypeOptions\" class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"AccountEncrypted\"\n                [value]=\"encryptedExportType.AccountEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.AccountEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"AccountEncrypted\">\n                {{ \"accountRestricted\" | i18n }}\n              </label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 pb-2 tw-text-sm\">\n            {{ \"accountRestrictedOptionDescription\" | i18n }}\n          </div>\n\n          <div class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"FileEncrypted\"\n                [value]=\"encryptedExportType.FileEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.FileEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"FileEncrypted\">{{\n                \"passwordProtected\" | i18n\n              }}</label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 tw-text-sm\">\n            {{ \"passwordProtectedOptionDescription\" | i18n }}\n          </div>\n        </div>\n        <br />\n\n        <ng-container *ngIf=\"fileEncryptionType == encryptedExportType.FileEncrypted\">\n          <bit-form-field>\n            <bit-label>{{ \"filePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"filePassword\"\n              formControlName=\"filePassword\"\n              name=\"password\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n            <bit-hint>{{ \"exportPasswordDescription\" | i18n }}</bit-hint>\n          </bit-form-field>\n          <bit-form-field>\n            <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"confirmFilePassword\"\n              formControlName=\"confirmFilePassword\"\n              name=\"confirmFilePassword\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n          </bit-form-field>\n        </ng-container>\n      </ng-container>\n\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary btn-submit\"\n        [disabled]=\"form.loading || disabledByPolicy\"\n        [ngClass]=\"{ manual: disabledByPolicy }\"\n      >\n        <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n        <span>{{ \"confirmFormat\" | i18n }}</span>\n      </button>\n    </div>\n  </div>\n</form>\n","import { Component } from \"@angular/core\";\nimport { UntypedFormBuilder } from \"@angular/forms\";\n\nimport { ExportComponent as BaseExportComponent } from \"@bitwarden/angular/components/export.component\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { ExportService } from \"@bitwarden/common/abstractions/export.service\";\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { EncryptedExportType } from \"@bitwarden/common/enums/encryptedExportType\";\n\nimport { UserVerificationPromptComponent } from \"../../components/user-verification-prompt.component\";\n\n@Component({\n  selector: \"app-export\",\n  templateUrl: \"export.component.html\",\n})\nexport class ExportComponent extends BaseExportComponent {\n  organizationId: string;\n  encryptedExportType = EncryptedExportType;\n  protected showFilePassword: boolean;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    platformUtilsService: PlatformUtilsService,\n    exportService: ExportService,\n    eventCollectionService: EventCollectionService,\n    policyService: PolicyService,\n    logService: LogService,\n    userVerificationService: UserVerificationService,\n    formBuilder: UntypedFormBuilder,\n    fileDownloadService: FileDownloadService,\n    private modalService: ModalService\n  ) {\n    super(\n      cryptoService,\n      i18nService,\n      platformUtilsService,\n      exportService,\n      eventCollectionService,\n      policyService,\n      window,\n      logService,\n      userVerificationService,\n      formBuilder,\n      fileDownloadService\n    );\n  }\n\n  async submit() {\n    if (this.isFileEncryptedExport && this.filePassword != this.confirmFilePassword) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"filePasswordAndConfirmFilePasswordDoNotMatch\")\n      );\n      return;\n    }\n\n    this.exportForm.markAllAsTouched();\n    if (!this.exportForm.valid) {\n      return;\n    }\n\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    this.doExport();\n  }\n\n  protected saved() {\n    super.saved();\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"exportSuccess\"));\n  }\n\n  private verifyUser() {\n    let confirmDescription = \"exportWarningDesc\";\n    if (this.isFileEncryptedExport) {\n      confirmDescription = \"fileEncryptedExportWarningDesc\";\n    } else if (this.isAccountEncryptedExport) {\n      confirmDescription = \"encExportKeyWarningDesc\";\n    }\n\n    const ref = this.modalService.open(UserVerificationPromptComponent, {\n      allowMultipleModals: true,\n      data: {\n        confirmDescription: confirmDescription,\n        confirmButtonText: \"exportVault\",\n        modalTitle: \"confirmVaultExport\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return ref.onClosedPromise();\n  }\n\n  get isFileEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    );\n  }\n\n  get isAccountEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.AccountEncrypted\n    );\n  }\n}\n","import { Component } from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\n\nimport { ModalRef } from \"@bitwarden/angular/components/modal/modal.ref\";\n\n@Component({\n  templateUrl: \"file-password-prompt.component.html\",\n})\nexport class FilePasswordPromptComponent {\n  filePassword = new FormControl(\"\", Validators.required);\n\n  constructor(private modalRef: ModalRef) {}\n\n  submit() {\n    this.filePassword.markAsTouched();\n    if (!this.filePassword.valid) {\n      return;\n    }\n\n    this.modalRef.close(this.filePassword.value);\n  }\n\n  cancel() {\n    this.modalRef.close(null);\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable tailwindcss/no-custom-classname -->\n<div\n  class=\"modal fade\"\n  role=\"dialog\"\n  aria-modal=\"true\"\n  [attr.aria-labelledby]=\"'confirmVaultImport' | i18n\"\n>\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form #form (ngSubmit)=\"submit()\">\n      <div class=\"form-group modal-content\">\n        <h2 class=\"tw-my-6 tw-ml-3.5 tw-font-semibold\" id=\"confirmVaultImport\">\n          {{ \"confirmVaultImport\" | i18n | uppercase }}\n        </h2>\n        <div\n          class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-px-3.5 tw-pt-3.5\"\n        >\n          {{ \"confirmVaultImportDesc\" | i18n }}\n          <bit-form-field class=\"tw-pt-3.5\">\n            <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              name=\"filePassword\"\n              [formControl]=\"filePassword\"\n              appAutofocus\n              appInputVerbatim\n            />\n            <button type=\"button\" bitSuffix bitIconButton bitPasswordInputToggle></button>\n          </bit-form-field>\n        </div>\n        <div\n          class=\"tw-flex tw-w-full tw-flex-wrap tw-items-center tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-px-3.5 tw-pb-3.5 tw-pt-4\"\n        >\n          <button bitButton buttonType=\"primary\" class=\"tw-mr-2\" type=\"submit\" appBlurClick>\n            <span>{{ \"importData\" | i18n }}</span>\n          </button>\n          <button bitButton buttonType=\"secondary\" type=\"button\" (click)=\"cancel()\">\n            <span>{{ \"cancel\" | i18n }}</span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n","<div class=\"page-header\">\n  <h1>{{ \"importData\" | i18n }}</h1>\n</div>\n<app-callout type=\"info\" *ngIf=\"importBlockedByPolicy\">\n  {{ \"personalOwnershipPolicyInEffectImports\" | i18n }}\n</app-callout>\n<form #form (ngSubmit)=\"submit()\" ngNativeValidate>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"form-group\">\n        <label for=\"type\">1. {{ \"selectFormat\" | i18n }}</label>\n        <select\n          id=\"type\"\n          name=\"Format\"\n          [(ngModel)]=\"format\"\n          class=\"form-control\"\n          [disabled]=\"importBlockedByPolicy\"\n          required\n        >\n          <option *ngFor=\"let o of featuredImportOptions\" [ngValue]=\"o.id\">{{ o.name }}</option>\n          <ng-container *ngIf=\"importOptions && importOptions.length\">\n            <option value=\"-\" disabled></option>\n            <option *ngFor=\"let o of importOptions\" [ngValue]=\"o.id\">{{ o.name }}</option>\n          </ng-container>\n        </select>\n      </div>\n    </div>\n  </div>\n  <app-callout type=\"info\" title=\"{{ getFormatInstructionTitle() }}\" *ngIf=\"format\">\n    <ng-container *ngIf=\"format === 'bitwardencsv' || format === 'bitwardenjson'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/export-your-data/\">\n        https://bitwarden.com/help/export-your-data/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'lastpasscsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-lastpass/\">\n        https://bitwarden.com/help/import-from-lastpass/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepassxcsv'\">\n      Using the KeePassX desktop application, navigate to \"Database\" &rarr; \"Export to CSV file\" and\n      save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'aviracsv'\">\n      In the Avira web vault, go to \"Settings\" &rarr; \"My Data\" &rarr; \"Export data\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blurcsv'\">\n      In the Blur web vault, click your username at the top and go to \"Settings\" &rarr; \"Export\n      Data\", then click \"Export CSV\" for your \"Accounts\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safeincloudxml'\">\n      Using the SaveInCloud desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As XML\"\n      and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'padlockcsv'\">\n      Using the Padlock desktop application, click the hamburger icon in the top left corner and\n      navigate to \"Settings\" &rarr; \"Export\" button and save the file \"As CSV\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepass2xml'\">\n      Using the KeePass 2 desktop application, navigate to \"File\" &rarr; \"Export\" and select the\n      \"KeePass XML (2.x)\" option.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'upmcsv'\">\n      Using the Universal Password Manager desktop application, navigate to \"Database\" &rarr;\n      \"Export\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'saferpasscsv'\">\n      Using the SaferPass browser extension, click the hamburger icon in the top left corner and\n      navigate to \"Settings\". Click the \"Export accounts\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'meldiumcsv'\">\n      Using the Meldium web vault, navigate to \"Settings\". Locate the \"Export data\" function and\n      click \"Show me my data\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepercsv'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .csv File\" option. Click\n      \"Export\" to save the CSV file.\n    </ng-container>\n    <!--\n    <ng-container *ngIf=\"format === 'keeperjson'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .json File\" option. Click\n      \"Export\" to save the JSON file.\n    </ng-container>\n    -->\n    <ng-container\n      *ngIf=\"format === 'chromecsv' || format === 'operacsv' || format === 'vivaldicsv'\"\n    >\n      <span *ngIf=\"format !== 'chromecsv'\">\n        The process is exactly the same as importing from Google Chrome.\n      </span>\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-chrome/\">\n        https://bitwarden.com/help/import-from-chrome/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'firefoxcsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-firefox/\">\n        https://bitwarden.com/help/import-from-firefox/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safaricsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-safari/\">\n        https://bitwarden.com/help/import-from-safari/</a\n      >.\n    </ng-container>\n    <ng-container\n      *ngIf=\"\n        format === '1password1pux' ||\n        format === '1password1pif' ||\n        format === '1passwordwincsv' ||\n        format === '1passwordmaccsv'\n      \"\n    >\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-1password/\">\n        https://bitwarden.com/help/import-from-1password/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passworddragonxml'\">\n      Using the Password Dragon desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"To\n      XML\". In the dialog that pops up select \"All Rows\" and check all fields. Click the \"Export\"\n      button and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpasscsv'\">\n      Using the Enpass desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As CSV\".\n      Select \"OK\" to the warning alert and save the CSV file. Note that the importer only supports\n      files exported while Enpass is set to the English language, so adjust your settings\n      accordingly.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpassjson'\">\n      Using the Enpass 6 desktop application, click the menu button and navigate to \"File\" &rarr;\n      \"Export\". Select the \".json\" file format option and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'pwsafexml'\">\n      Using the Password Safe desktop application, navigate to \"File\" &rarr; \"Export To\" &rarr; \"XML\n      format...\" and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanecsv'\">\n      Log in to Dashlane, click on \"My Account\" &rarr; \"Settings\" &rarr; \"Export file\" and select\n      \"Export as a CSV file\". This will download a zip archive containing various CSV files. Unzip\n      the archive and import each CSV file individually.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanejson'\">\n      Dashlane no longer supports the JSON format. Only use this if you have an existing JSON for\n      import. Use the CSV importer when creating new exports.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'msecurecsv'\">\n      Using the mSecure desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"CSV File...\"\n      and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'stickypasswordxml'\">\n      Using the Sticky Password desktop application, navigate to \"Menu\" (top right) &rarr; \"Export\"\n      &rarr; \"Export all\". Select the unencrypted format XML option and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'truekeycsv'\">\n      Using the True Key desktop application, click the gear icon (top right) and then navigate to\n      \"App Settings\". Click the \"Export\" button, enter your password and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'clipperzhtml'\">\n      Log into the Clipperz web application (clipperz.is/app). Click the hamburger menu icon in the\n      top right to expand the navigation bar. Navigate to \"Data\" &rarr; \"Export\". Click the\n      \"download HTML+JSON\" button to save the HTML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'roboformcsv'\">\n      Using the RoboForm Editor desktop application, navigate to \"RoboForm\" (top left) &rarr;\n      \"Options\" &rarr; \"Account &amp; Data\" and click the \"Export\" button. Select all of your data,\n      change the \"Format\" to \"CSV file\" and then click the \"Export\" button to save the CSV file.\n      Note: RoboForm only allows you to export Logins. Other items will not be exported.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passboltcsv'\">\n      Log into the Passbolt web vault and navigate to the \"Passwords\" listing. Select all of the\n      passwords you would like to export and click the \"Export\" button at the top of the listing.\n      Choose the \"csv (lastpass)\" export format and click the \"Export\" button.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'ascendocsv'\">\n      Using the Ascendo DataVault desktop application, navigate to \"Tools\" &rarr; \"Export\". In the\n      dialog that pops up, select the \"All Items (DVX, CSV)\" option. Click the \"Ok\" button to save\n      the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordbossjson'\">\n      Using the Password Boss desktop application, navigate to \"File\" &rarr; \"Export data\" &rarr;\n      \"Password Boss JSON - not encrypted\" and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'zohovaultcsv'\">\n      Log into the Zoho web vault (vault.zoho.com). Navigate to \"Tools\" &rarr; \"Export Secrets\".\n      Select \"All Secrets\" and click the \"Zoho Vault Format CSV\" button. Highlight and copy the data\n      from the textarea. Open a text editor like Notepad and paste the data. Save the data from the\n      text editor as\n      <code>zoho_export.csv</code>.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'splashidcsv'\">\n      Using the SplashID Safe desktop application, click on the SplashID blue lock logo in the top\n      right corner. Navigate to \"Export\" &rarr; \"Export as CSV\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkeepcsv'\">\n      Using the PassKeep mobile app, navigate to \"Backup/Restore\". Locate the \"CSV Backup/Restore\"\n      section and click \"Backup to CSV\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'gnomejson'\">\n      Make sure you have python-keyring and python-gnomekeyring installed. Save the\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bit.ly/2GpOMTg\"\n        >GNOME Keyring Import/Export</a\n      >\n      python script to your desktop as <code>pw_helper.py</code>. Open terminal and run\n      <code>chmod +rx Desktop/pw_helper.py</code> and then\n      <code>python Desktop/pw_helper.py export Desktop/my_passwords.json</code>. Then upload the\n      resulting <code>my_passwords.json</code> file here to Bitwarden.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordagentcsv'\">\n      Using the Password Agent desktop application navigate to \"File\" &rarr; \"Export\", select the\n      \"Fields to export\" button and check all of the fields, change the \"Output format\" to \"CSV\",\n      and then click the \"Start\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passpackcsv'\">\n      Log into the Passpack website vault and navigate to \"Settings\" &rarr; \"Export\", then click the\n      \"Download\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passmanjson'\">\n      Open your Passman vault and click on \"Settings\" in the bottom left corner. In the \"Settings\"\n      window switch to the \"Export credentials\" tab and choose \"JSON\" as the export type. Enter your\n      vault's passphrase and click the \"Export\" button to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastcsv'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to CSV file\" option to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastjson'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to JSON file\" option to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'fsecurefsk'\">\n      Open the F-Secure KEY desktop application and navigate to \"Settings\" &rarr; \"Export\n      Passwords\". Select the \"Export\" button, enter your master password, and save the FSK file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'kasperskytxt'\">\n      Open the Kaspersky Password Manager desktop application and navigate to \"Settings\" &rarr;\n      \"Import/Export\". Locate the \"Export to text file\" section and select the \"Export\" button to\n      save the TXT file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'remembearcsv'\">\n      Open the RememBear desktop application and navigate to \"Settings\" &rarr; \"Account\" &rarr;\n      \"Export\". Enter your master password and select the \"Export Anyway\" button to save the CSV\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordwallettxt'\">\n      Open the PasswordWallet desktop application and navigate to \"File\" &rarr; \"Export\" &rarr;\n      \"Visible entries to text file\". Enter your password and select the \"Ok\" button to save the TXT\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'mykicsv'\">\n      Open the Myki desktop browser extension and navigate to \"Advanced\" &rarr; \"Export Accounts\"\n      and then scan the QR code with your mobile device. Various CSV files will then be saved to\n      your computer's downloads folder.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'securesafecsv'\">\n      Export your SecureSafe password safe to a CSV file with a comma delimiter.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'logmeoncecsv'\">\n      Open the LogMeOnce browser extension, then navigate to \"Open Menu\" &rarr; \"Export To\" and\n      select \"CSV File\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blackberrycsv'\">\n      Open the BlackBerry Password Keeper application, then navigate to \"Settings\" &rarr;\n      \"Import/Export\". Select \"Export Passwords\" and follow the instructions on screen to save the\n      unencrypted CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'buttercupcsv'\">\n      Open the Buttercup desktop application and unlock your vault. Right click on your vault's icon\n      and select \"Export\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'codebookcsv'\">\n      Open the Codebook desktop application and log in. Navigate to \"File\" &rarr; \"Export all\", then\n      click \"Yes\" on the dialog and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'encryptrcsv'\">\n      Open the newest version of the Encryptr desktop application and allow all of your data to\n      sync. Once syncing of your data is complete, the download icon in the top right corner will\n      turn pink. Click the download icon and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'yoticsv'\">\n      From the Yoti browser extension, click on \"Settings\", then \"Export Saved Logins\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'psonojson'\">\n      Log in to the Psono web vault, click on the \"Signed in as\"-dropdown, select \"Others\". Go to\n      the \"Export\"-tab and select the json type export and then click on Export.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkyjson'\">\n      Log in to \"https://vault.passky.org\" &rarr; \"Import & Export\" &rarr; \"Export\" in the Passky\n      section. (\"Backup\" is unsupported as it is encrypted).\n    </ng-container>\n  </app-callout>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"form-group\">\n        <label for=\"file\">2. {{ \"selectImportFile\" | i18n }}</label>\n        <br />\n        <div class=\"file-selector\">\n          <button\n            type=\"button\"\n            class=\"btn btn-outline-primary\"\n            (click)=\"fileSelector.click()\"\n            [disabled]=\"importBlockedByPolicy\"\n          >\n            {{ \"chooseFile\" | i18n }}\n          </button>\n          {{ this.fileSelected ? this.fileSelected.name : (\"noFileChosen\" | i18n) }}\n        </div>\n        <input\n          #fileSelector\n          type=\"file\"\n          id=\"file\"\n          class=\"form-control-file\"\n          name=\"file\"\n          (change)=\"setSelectedFile($event)\"\n          hidden\n          [disabled]=\"importBlockedByPolicy\"\n        />\n      </div>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"fileContents\">{{ \"orCopyPasteFileContents\" | i18n }}</label>\n    <textarea\n      id=\"fileContents\"\n      class=\"form-control\"\n      name=\"FileContents\"\n      [(ngModel)]=\"fileContents\"\n      [disabled]=\"importBlockedByPolicy\"\n    ></textarea>\n  </div>\n  <button\n    type=\"submit\"\n    class=\"btn btn-primary btn-submit\"\n    [disabled]=\"loading || importBlockedByPolicy\"\n    [ngClass]=\"{ manual: importBlockedByPolicy }\"\n  >\n    <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n    <span>{{ \"importData\" | i18n }}</span>\n  </button>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport * as JSZip from \"jszip\";\nimport { firstValueFrom } from \"rxjs\";\nimport Swal, { SweetAlertIcon } from \"sweetalert2\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { ImportService } from \"@bitwarden/common/abstractions/import/import.service.abstraction\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums/policy-type\";\nimport { ImportOption, ImportType } from \"@bitwarden/common/enums/importOptions\";\nimport { ImportError } from \"@bitwarden/common/importers/import-error\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\n\nimport { FilePasswordPromptComponent } from \"./file-password-prompt.component\";\n\n@Component({\n  selector: \"app-import\",\n  templateUrl: \"import.component.html\",\n})\nexport class ImportComponent implements OnInit {\n  featuredImportOptions: ImportOption[];\n  importOptions: ImportOption[];\n  format: ImportType = null;\n  fileContents: string;\n  fileSelected: File;\n  formPromise: Promise<ImportError>;\n  loading = false;\n  importBlockedByPolicy = false;\n\n  protected organizationId: string = null;\n  protected successNavigate: any[] = [\"vault\"];\n\n  constructor(\n    protected i18nService: I18nService,\n    protected importService: ImportService,\n    protected router: Router,\n    protected platformUtilsService: PlatformUtilsService,\n    protected policyService: PolicyService,\n    private logService: LogService,\n    protected modalService: ModalService,\n    protected syncService: SyncService\n  ) {}\n\n  async ngOnInit() {\n    this.setImportOptions();\n\n    this.importBlockedByPolicy = await firstValueFrom(\n      this.policyService.policyAppliesToActiveUser$(PolicyType.PersonalOwnership)\n    );\n  }\n\n  async submit() {\n    if (this.importBlockedByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalOwnershipPolicyInEffectImports\")\n      );\n      return;\n    }\n\n    this.loading = true;\n\n    const importer = this.importService.getImporter(this.format, this.organizationId);\n    if (importer === null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFormat\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    const fileEl = document.getElementById(\"file\") as HTMLInputElement;\n    const files = fileEl.files;\n    if (\n      (files == null || files.length === 0) &&\n      (this.fileContents == null || this.fileContents === \"\")\n    ) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    let fileContents = this.fileContents;\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    try {\n      this.formPromise = this.importService.import(importer, fileContents, this.organizationId);\n      let error = await this.formPromise;\n\n      if (error?.passwordRequired) {\n        const filePassword = await this.getFilePassword();\n        if (filePassword == null) {\n          this.loading = false;\n          return;\n        }\n\n        error = await this.doPasswordProtectedImport(filePassword, fileContents);\n      }\n\n      if (error != null) {\n        this.error(error);\n        this.loading = false;\n        return;\n      }\n\n      //No errors, display success message\n      this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"importSuccess\"));\n      this.syncService.fullSync(true);\n      this.router.navigate(this.successNavigate);\n    } catch (e) {\n      this.logService.error(e);\n    }\n\n    this.loading = false;\n  }\n\n  getFormatInstructionTitle() {\n    if (this.format == null) {\n      return null;\n    }\n\n    const results = this.featuredImportOptions\n      .concat(this.importOptions)\n      .filter((o) => o.id === this.format);\n    if (results.length > 0) {\n      return this.i18nService.t(\"instructionsFor\", results[0].name);\n    }\n    return null;\n  }\n\n  protected setImportOptions() {\n    this.featuredImportOptions = [\n      {\n        id: null,\n        name: \"-- \" + this.i18nService.t(\"select\") + \" --\",\n      },\n      ...this.importService.featuredImportOptions,\n    ];\n    this.importOptions = [...this.importService.regularImportOptions].sort((a, b) => {\n      if (a.name == null && b.name != null) {\n        return -1;\n      }\n      if (a.name != null && b.name == null) {\n        return 1;\n      }\n      if (a.name == null && b.name == null) {\n        return 0;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(a.name, b.name)\n        : a.name.localeCompare(b.name);\n    });\n  }\n\n  setSelectedFile(event: Event) {\n    const fileInputEl = <HTMLInputElement>event.target;\n    this.fileSelected = fileInputEl.files.length > 0 ? fileInputEl.files[0] : null;\n  }\n\n  private async error(error: Error) {\n    await Swal.fire({\n      heightAuto: false,\n      buttonsStyling: false,\n      icon: \"error\" as SweetAlertIcon,\n      iconHtml: `<i class=\"swal-custom-icon bwi bwi-error text-danger\"></i>`,\n      input: \"textarea\",\n      inputValue: error.message,\n      inputAttributes: {\n        readonly: \"true\",\n      },\n      titleText: this.i18nService.t(\"importError\"),\n      text: this.i18nService.t(\"importErrorDesc\"),\n      showConfirmButton: true,\n      confirmButtonText: this.i18nService.t(\"ok\"),\n      onOpen: (popupEl) => {\n        popupEl.querySelector(\".swal2-textarea\").scrollTo(0, 0);\n      },\n    });\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    if (this.format === \"1password1pux\") {\n      return this.extract1PuxContent(file);\n    }\n\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        if (this.format === \"lastpasscsv\" && file.type === \"text/html\") {\n          const parser = new DOMParser();\n          const doc = parser.parseFromString((evt.target as any).result, \"text/html\");\n          const pre = doc.querySelector(\"pre\");\n          if (pre != null) {\n            resolve(pre.textContent);\n            return;\n          }\n          reject();\n          return;\n        }\n\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private extract1PuxContent(file: File): Promise<string> {\n    return new JSZip()\n      .loadAsync(file)\n      .then((zip) => {\n        return zip.file(\"export.data\").async(\"string\");\n      })\n      .then(\n        function success(content) {\n          return content;\n        },\n        function error(e) {\n          return \"\";\n        }\n      );\n  }\n\n  async getFilePassword(): Promise<string> {\n    const ref = this.modalService.open(FilePasswordPromptComponent, {\n      allowMultipleModals: true,\n    });\n\n    if (ref == null) {\n      return null;\n    }\n\n    return await ref.onClosedPromise();\n  }\n\n  async doPasswordProtectedImport(\n    filePassword: string,\n    fileContents: string\n  ): Promise<ImportError> {\n    const passwordProtectedImporter = this.importService.getImporter(\n      \"bitwardenpasswordprotected\",\n      this.organizationId,\n      filePassword\n    );\n\n    return this.importService.import(passwordProtectedImporter, fileContents, this.organizationId);\n  }\n}\n","<ng-container *ngIf=\"show\">\n  <app-callout type=\"info\" title=\"{{ scopeConfig.title | i18n }}\">\n    {{ scopeConfig.description | i18n : scopeConfig.scopeIdentifier }}\n  </app-callout>\n</ng-container>\n","import { Component, Input, OnInit } from \"@angular/core\";\n\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\n\n@Component({\n  selector: \"app-export-scope-callout\",\n  templateUrl: \"export-scope-callout.component.html\",\n})\nexport class ExportScopeCalloutComponent implements OnInit {\n  @Input() organizationId: string = null;\n\n  show = false;\n  scopeConfig: {\n    title: string;\n    description: string;\n    scopeIdentifier: string;\n  };\n\n  constructor(\n    protected organizationService: OrganizationService,\n    protected stateService: StateService\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    if (!this.organizationService.hasOrganizations()) {\n      return;\n    }\n    this.scopeConfig =\n      this.organizationId != null\n        ? {\n            title: \"exportingOrganizationVaultTitle\",\n            description: \"exportingOrganizationVaultDescription\",\n            scopeIdentifier: this.organizationService.get(this.organizationId).name,\n          }\n        : {\n            title: \"exportingPersonalVaultTitle\",\n            description: \"exportingPersonalVaultDescription\",\n            scopeIdentifier: await this.stateService.getEmail(),\n          };\n    this.show = true;\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from \"@angular/core\";\n\n@Directive({\n  selector: \"[appBoxRow]\",\n})\nexport class BoxRowDirective implements OnInit {\n  el: HTMLElement = null;\n  formEls: Element[];\n\n  constructor(elRef: ElementRef) {\n    this.el = elRef.nativeElement;\n  }\n\n  ngOnInit(): void {\n    this.formEls = Array.from(\n      this.el.querySelectorAll('input:not([type=\"hidden\"]), select, textarea')\n    );\n    this.formEls.forEach((formEl) => {\n      formEl.addEventListener(\n        \"focus\",\n        () => {\n          this.el.classList.add(\"active\");\n        },\n        false\n      );\n\n      formEl.addEventListener(\n        \"blur\",\n        () => {\n          this.el.classList.remove(\"active\");\n        },\n        false\n      );\n    });\n  }\n\n  @HostListener(\"click\", [\"$event\"]) onClick(event: Event) {\n    const target = event.target as HTMLElement;\n    if (\n      target !== this.el &&\n      !target.classList.contains(\"progress\") &&\n      !target.classList.contains(\"progress-bar\")\n    ) {\n      return;\n    }\n\n    if (this.formEls.length > 0) {\n      const formEl = this.formEls[0] as HTMLElement;\n      if (formEl.tagName.toLowerCase() === \"input\") {\n        const inputEl = formEl as HTMLInputElement;\n        if (inputEl.type != null && inputEl.type.toLowerCase() === \"checkbox\") {\n          inputEl.click();\n          return;\n        }\n      }\n      formEl.focus();\n    }\n  }\n}\n","import { ImportCiphersRequest } from \"../../models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"../../models/request/import-organization-ciphers.request\";\n\nexport abstract class ImportApiServiceAbstraction {\n  postImportCiphers: (request: ImportCiphersRequest) => Promise<any>;\n  postImportOrganizationCiphers: (\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ) => Promise<any>;\n}\n","import { ImportOption, ImportType } from \"../../enums/importOptions\";\nimport { ImportError } from \"../../importers/import-error\";\nimport { Importer } from \"../../importers/importer\";\n\nexport abstract class ImportService {\n  featuredImportOptions: readonly ImportOption[];\n  regularImportOptions: readonly ImportOption[];\n  getImportOptions: () => ImportOption[];\n  import: (\n    importer: Importer,\n    fileContents: string,\n    organizationId?: string\n  ) => Promise<ImportError>;\n  getImporter: (\n    format: ImportType | \"bitwardenpasswordprotected\",\n    organizationId: string,\n    password?: string\n  ) => Importer;\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { ImportApiServiceAbstraction } from \"../../abstractions/import/import-api.service.abstraction\";\nimport { ImportCiphersRequest } from \"../../models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"../../models/request/import-organization-ciphers.request\";\n\nexport class ImportApiService implements ImportApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  async postImportCiphers(request: ImportCiphersRequest): Promise<any> {\n    return await this.apiService.send(\"POST\", \"/ciphers/import\", request, true, false);\n  }\n\n  async postImportOrganizationCiphers(\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ): Promise<any> {\n    return await this.apiService.send(\n      \"POST\",\n      \"/ciphers/import-organization?organizationId=\" + organizationId,\n      request,\n      true,\n      false\n    );\n  }\n}\n","export interface ImportOption {\n  id: string;\n  name: string;\n}\n\nexport const featuredImportOptions = [\n  { id: \"bitwardenjson\", name: \"Bitwarden (json)\" },\n  { id: \"bitwardencsv\", name: \"Bitwarden (csv)\" },\n  { id: \"chromecsv\", name: \"Chrome (csv)\" },\n  { id: \"dashlanecsv\", name: \"Dashlane (csv)\" },\n  { id: \"firefoxcsv\", name: \"Firefox (csv)\" },\n  { id: \"keepass2xml\", name: \"KeePass 2 (xml)\" },\n  { id: \"lastpasscsv\", name: \"LastPass (csv)\" },\n  { id: \"safaricsv\", name: \"Safari and macOS (csv)\" },\n  { id: \"1password1pux\", name: \"1Password (1pux)\" },\n] as const;\n\nexport const regularImportOptions = [\n  { id: \"keepassxcsv\", name: \"KeePassX (csv)\" },\n  { id: \"1password1pif\", name: \"1Password (1pif)\" },\n  { id: \"1passwordwincsv\", name: \"1Password 6 and 7 Windows (csv)\" },\n  { id: \"1passwordmaccsv\", name: \"1Password 6 and 7 Mac (csv)\" },\n  { id: \"dashlanejson\", name: \"Dashlane (json)\" },\n  { id: \"roboformcsv\", name: \"RoboForm (csv)\" },\n  { id: \"keepercsv\", name: \"Keeper (csv)\" },\n  // Temporarily remove this option for the Feb release\n  // { id: \"keeperjson\", name: \"Keeper (json)\" },\n  { id: \"enpasscsv\", name: \"Enpass (csv)\" },\n  { id: \"enpassjson\", name: \"Enpass (json)\" },\n  { id: \"safeincloudxml\", name: \"SafeInCloud (xml)\" },\n  { id: \"pwsafexml\", name: \"Password Safe (xml)\" },\n  { id: \"stickypasswordxml\", name: \"Sticky Password (xml)\" },\n  { id: \"msecurecsv\", name: \"mSecure (csv)\" },\n  { id: \"truekeycsv\", name: \"True Key (csv)\" },\n  { id: \"passwordbossjson\", name: \"Password Boss (json)\" },\n  { id: \"zohovaultcsv\", name: \"Zoho Vault (csv)\" },\n  { id: \"splashidcsv\", name: \"SplashID (csv)\" },\n  { id: \"passworddragonxml\", name: \"Password Dragon (xml)\" },\n  { id: \"padlockcsv\", name: \"Padlock (csv)\" },\n  { id: \"passboltcsv\", name: \"Passbolt (csv)\" },\n  { id: \"clipperzhtml\", name: \"Clipperz (html)\" },\n  { id: \"aviracsv\", name: \"Avira (csv)\" },\n  { id: \"saferpasscsv\", name: \"SaferPass (csv)\" },\n  { id: \"upmcsv\", name: \"Universal Password Manager (csv)\" },\n  { id: \"ascendocsv\", name: \"Ascendo DataVault (csv)\" },\n  { id: \"meldiumcsv\", name: \"Meldium (csv)\" },\n  { id: \"passkeepcsv\", name: \"PassKeep (csv)\" },\n  { id: \"operacsv\", name: \"Opera (csv)\" },\n  { id: \"vivaldicsv\", name: \"Vivaldi (csv)\" },\n  { id: \"gnomejson\", name: \"GNOME Passwords and Keys/Seahorse (json)\" },\n  { id: \"blurcsv\", name: \"Blur (csv)\" },\n  { id: \"passwordagentcsv\", name: \"Password Agent (csv)\" },\n  { id: \"passpackcsv\", name: \"Passpack (csv)\" },\n  { id: \"passmanjson\", name: \"Passman (json)\" },\n  { id: \"avastcsv\", name: \"Avast Passwords (csv)\" },\n  { id: \"avastjson\", name: \"Avast Passwords (json)\" },\n  { id: \"fsecurefsk\", name: \"F-Secure KEY (fsk)\" },\n  { id: \"kasperskytxt\", name: \"Kaspersky Password Manager (txt)\" },\n  { id: \"remembearcsv\", name: \"RememBear (csv)\" },\n  { id: \"passwordwallettxt\", name: \"PasswordWallet (txt)\" },\n  { id: \"mykicsv\", name: \"Myki (csv)\" },\n  { id: \"securesafecsv\", name: \"SecureSafe (csv)\" },\n  { id: \"logmeoncecsv\", name: \"LogMeOnce (csv)\" },\n  { id: \"blackberrycsv\", name: \"BlackBerry Password Keeper (csv)\" },\n  { id: \"buttercupcsv\", name: \"Buttercup (csv)\" },\n  { id: \"codebookcsv\", name: \"Codebook (csv)\" },\n  { id: \"encryptrcsv\", name: \"Encryptr (csv)\" },\n  { id: \"yoticsv\", name: \"Yoti (csv)\" },\n  { id: \"nordpasscsv\", name: \"Nordpass (csv)\" },\n  { id: \"psonojson\", name: \"Psono (json)\" },\n  { id: \"passkyjson\", name: \"Passky (json)\" },\n] as const;\n\nexport type ImportType =\n  | (typeof featuredImportOptions)[number][\"id\"]\n  | (typeof regularImportOptions)[number][\"id\"];\n","import { CollectionView } from \"../../admin-console/models/view/collection.view\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\nimport { FolderView } from \"../../vault/models/view/folder.view\";\n\nexport class ImportResult {\n  success = false;\n  missingPassword = false;\n  errorMessage: string;\n  ciphers: CipherView[] = [];\n  folders: FolderView[] = [];\n  folderRelationships: [number, number][] = [];\n  collections: CollectionView[] = [];\n  collectionRelationships: [number, number][] = [];\n}\n","import * as papa from \"papaparse\";\n\nimport { LogService } from \"../abstractions/log.service\";\nimport { CollectionView } from \"../admin-console/models/view/collection.view\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { Utils } from \"../misc/utils\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { ConsoleLogService } from \"../services/consoleLog.service\";\nimport { CipherType } from \"../vault/enums/cipher-type\";\nimport { CipherView } from \"../vault/models/view/cipher.view\";\nimport { FieldView } from \"../vault/models/view/field.view\";\nimport { FolderView } from \"../vault/models/view/folder.view\";\nimport { LoginUriView } from \"../vault/models/view/login-uri.view\";\nimport { LoginView } from \"../vault/models/view/login.view\";\nimport { SecureNoteView } from \"../vault/models/view/secure-note.view\";\n\nexport abstract class BaseImporter {\n  organizationId: string = null;\n\n  protected logService: LogService = new ConsoleLogService(false);\n\n  protected newLineRegex = /(?:\\r\\n|\\r|\\n)/;\n\n  protected passwordFieldNames = [\n    \"password\",\n    \"pass word\",\n    \"passphrase\",\n    \"pass phrase\",\n    \"pass\",\n    \"code\",\n    \"code word\",\n    \"codeword\",\n    \"secret\",\n    \"secret word\",\n    \"personpwd\",\n    \"key\",\n    \"keyword\",\n    \"key word\",\n    \"keyphrase\",\n    \"key phrase\",\n    \"form_pw\",\n    \"wppassword\",\n    \"pin\",\n    \"pwd\",\n    \"pw\",\n    \"pword\",\n    \"passwd\",\n    \"p\",\n    \"serial\",\n    \"serial#\",\n    \"license key\",\n    \"reg #\",\n\n    // Non-English names\n    \"passwort\",\n  ];\n\n  protected usernameFieldNames = [\n    \"user\",\n    \"name\",\n    \"user name\",\n    \"username\",\n    \"login name\",\n    \"email\",\n    \"e-mail\",\n    \"id\",\n    \"userid\",\n    \"user id\",\n    \"login\",\n    \"form_loginname\",\n    \"wpname\",\n    \"mail\",\n    \"loginid\",\n    \"login id\",\n    \"log\",\n    \"personlogin\",\n    \"first name\",\n    \"last name\",\n    \"card#\",\n    \"account #\",\n    \"member\",\n    \"member #\",\n\n    // Non-English names\n    \"nom\",\n    \"benutzername\",\n  ];\n\n  protected notesFieldNames = [\n    \"note\",\n    \"notes\",\n    \"comment\",\n    \"comments\",\n    \"memo\",\n    \"description\",\n    \"free form\",\n    \"freeform\",\n    \"free text\",\n    \"freetext\",\n    \"free\",\n\n    // Non-English names\n    \"kommentar\",\n  ];\n\n  protected uriFieldNames: string[] = [\n    \"url\",\n    \"hyper link\",\n    \"hyperlink\",\n    \"link\",\n    \"host\",\n    \"hostname\",\n    \"host name\",\n    \"server\",\n    \"address\",\n    \"hyper ref\",\n    \"href\",\n    \"web\",\n    \"website\",\n    \"web site\",\n    \"site\",\n    \"web-site\",\n    \"uri\",\n\n    // Non-English names\n    \"ort\",\n    \"adresse\",\n  ];\n\n  protected parseCsvOptions = {\n    encoding: \"UTF-8\",\n    skipEmptyLines: false,\n  };\n\n  protected get organization() {\n    return this.organizationId != null;\n  }\n\n  protected parseXml(data: string): Document {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(data, \"application/xml\");\n    return doc != null && doc.querySelector(\"parsererror\") == null ? doc : null;\n  }\n\n  protected parseCsv(data: string, header: boolean, options: any = {}): any[] {\n    const parseOptions: papa.ParseConfig<string> = Object.assign(\n      { header: header },\n      this.parseCsvOptions,\n      options\n    );\n    data = this.splitNewLine(data).join(\"\\n\").trim();\n    const result = papa.parse(data, parseOptions);\n    if (result.errors != null && result.errors.length > 0) {\n      result.errors.forEach((e) => {\n        if (e.row != null) {\n          this.logService.warning(\"Error parsing row \" + e.row + \": \" + e.message);\n        }\n      });\n    }\n    return result.data && result.data.length > 0 ? result.data : null;\n  }\n\n  protected parseSingleRowCsv(rowData: string) {\n    if (this.isNullOrWhitespace(rowData)) {\n      return null;\n    }\n    const parsedRow = this.parseCsv(rowData, false);\n    if (parsedRow != null && parsedRow.length > 0 && parsedRow[0].length > 0) {\n      return parsedRow[0];\n    }\n    return null;\n  }\n\n  protected makeUriArray(uri: string | string[]): LoginUriView[] {\n    if (uri == null) {\n      return null;\n    }\n\n    if (typeof uri === \"string\") {\n      const loginUri = new LoginUriView();\n      loginUri.uri = this.fixUri(uri);\n      if (this.isNullOrWhitespace(loginUri.uri)) {\n        return null;\n      }\n      loginUri.match = null;\n      return [loginUri];\n    }\n\n    if (uri.length > 0) {\n      const returnArr: LoginUriView[] = [];\n      uri.forEach((u) => {\n        const loginUri = new LoginUriView();\n        loginUri.uri = this.fixUri(u);\n        if (this.isNullOrWhitespace(loginUri.uri)) {\n          return;\n        }\n        loginUri.match = null;\n        returnArr.push(loginUri);\n      });\n      return returnArr.length === 0 ? null : returnArr;\n    }\n\n    return null;\n  }\n\n  protected fixUri(uri: string) {\n    if (uri == null) {\n      return null;\n    }\n    uri = uri.trim();\n    if (uri.indexOf(\"://\") === -1 && uri.indexOf(\".\") >= 0) {\n      uri = \"http://\" + uri;\n    }\n    if (uri.length > 1000) {\n      return uri.substring(0, 1000);\n    }\n    return uri;\n  }\n\n  protected nameFromUrl(url: string) {\n    const hostname = Utils.getHostname(url);\n    if (this.isNullOrWhitespace(hostname)) {\n      return null;\n    }\n    return hostname.startsWith(\"www.\") ? hostname.replace(\"www.\", \"\") : hostname;\n  }\n\n  protected isNullOrWhitespace(str: string): boolean {\n    return Utils.isNullOrWhitespace(str);\n  }\n\n  protected getValueOrDefault(str: string, defaultValue: string = null): string {\n    if (this.isNullOrWhitespace(str)) {\n      return defaultValue;\n    }\n    return str;\n  }\n\n  protected splitNewLine(str: string): string[] {\n    return str.split(this.newLineRegex);\n  }\n\n  // ref https://stackoverflow.com/a/5911300\n  protected getCardBrand(cardNum: string) {\n    if (this.isNullOrWhitespace(cardNum)) {\n      return null;\n    }\n\n    // Visa\n    let re = new RegExp(\"^4\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    // Mastercard\n    // Updated for Mastercard 2017 BINs expansion\n    if (\n      /^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$/.test(\n        cardNum\n      )\n    ) {\n      return \"Mastercard\";\n    }\n\n    // AMEX\n    re = new RegExp(\"^3[47]\");\n    if (cardNum.match(re) != null) {\n      return \"Amex\";\n    }\n\n    // Discover\n    re = new RegExp(\n      \"^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)\"\n    );\n    if (cardNum.match(re) != null) {\n      return \"Discover\";\n    }\n\n    // Diners\n    re = new RegExp(\"^36\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // Diners - Carte Blanche\n    re = new RegExp(\"^30[0-5]\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // JCB\n    re = new RegExp(\"^35(2[89]|[3-8][0-9])\");\n    if (cardNum.match(re) != null) {\n      return \"JCB\";\n    }\n\n    // Visa Electron\n    re = new RegExp(\"^(4026|417500|4508|4844|491(3|7))\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    return null;\n  }\n\n  protected setCardExpiration(cipher: CipherView, expiration: string): boolean {\n    if (!this.isNullOrWhitespace(expiration)) {\n      expiration = expiration.replace(/\\s/g, \"\");\n      const parts = expiration.split(\"/\");\n      if (parts.length === 2) {\n        let month: string = null;\n        let year: string = null;\n        if (parts[0].length === 1 || parts[0].length === 2) {\n          month = parts[0];\n          if (month.length === 2 && month[0] === \"0\") {\n            month = month.substr(1, 1);\n          }\n        }\n        if (parts[1].length === 2 || parts[1].length === 4) {\n          year = month.length === 2 ? \"20\" + parts[1] : parts[1];\n        }\n        if (month != null && year != null) {\n          cipher.card.expMonth = month;\n          cipher.card.expYear = year;\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  protected moveFoldersToCollections(result: ImportResult) {\n    result.folderRelationships.forEach((r) => result.collectionRelationships.push(r));\n    result.collections = result.folders.map((f) => {\n      const collection = new CollectionView();\n      collection.name = f.name;\n      return collection;\n    });\n    result.folderRelationships = [];\n    result.folders = [];\n  }\n\n  protected querySelectorDirectChild(parentEl: Element, query: string) {\n    const els = this.querySelectorAllDirectChild(parentEl, query);\n    return els.length === 0 ? null : els[0];\n  }\n\n  protected querySelectorAllDirectChild(parentEl: Element, query: string) {\n    return Array.from(parentEl.querySelectorAll(query)).filter((el) => el.parentNode === parentEl);\n  }\n\n  protected initLoginCipher() {\n    const cipher = new CipherView();\n    cipher.favorite = false;\n    cipher.notes = \"\";\n    cipher.fields = [];\n    cipher.login = new LoginView();\n    cipher.type = CipherType.Login;\n    return cipher;\n  }\n\n  protected cleanupCipher(cipher: CipherView) {\n    if (cipher == null) {\n      return;\n    }\n    if (cipher.type !== CipherType.Login) {\n      cipher.login = null;\n    }\n    if (this.isNullOrWhitespace(cipher.name)) {\n      cipher.name = \"--\";\n    }\n    if (this.isNullOrWhitespace(cipher.notes)) {\n      cipher.notes = null;\n    } else {\n      cipher.notes = cipher.notes.trim();\n    }\n    if (cipher.fields != null && cipher.fields.length === 0) {\n      cipher.fields = null;\n    }\n  }\n\n  protected processKvp(\n    cipher: CipherView,\n    key: string,\n    value: string,\n    type: FieldType = FieldType.Text\n  ) {\n    if (this.isNullOrWhitespace(value)) {\n      return;\n    }\n    if (this.isNullOrWhitespace(key)) {\n      key = \"\";\n    }\n    if (value.length > 200 || value.trim().search(this.newLineRegex) > -1) {\n      if (cipher.notes == null) {\n        cipher.notes = \"\";\n      }\n      cipher.notes += key + \": \" + this.splitNewLine(value).join(\"\\n\") + \"\\n\";\n    } else {\n      if (cipher.fields == null) {\n        cipher.fields = [];\n      }\n      const field = new FieldView();\n      field.type = type;\n      field.name = key;\n      field.value = value;\n      cipher.fields.push(field);\n    }\n  }\n\n  protected processFolder(result: ImportResult, folderName: string) {\n    let folderIndex = result.folders.length;\n    const hasFolder = !this.isNullOrWhitespace(folderName);\n    // Replace backslashes with forward slashes, ensuring we create sub-folders\n    folderName = folderName.replace(\"\\\\\", \"/\");\n    let addFolder = hasFolder;\n\n    if (hasFolder) {\n      for (let i = 0; i < result.folders.length; i++) {\n        if (result.folders[i].name === folderName) {\n          addFolder = false;\n          folderIndex = i;\n          break;\n        }\n      }\n    }\n\n    if (addFolder) {\n      const f = new FolderView();\n      f.name = folderName;\n      result.folders.push(f);\n    }\n    if (hasFolder) {\n      result.folderRelationships.push([result.ciphers.length, folderIndex]);\n    }\n  }\n\n  protected convertToNoteIfNeeded(cipher: CipherView) {\n    if (\n      cipher.type === CipherType.Login &&\n      this.isNullOrWhitespace(cipher.login.username) &&\n      this.isNullOrWhitespace(cipher.login.password) &&\n      (cipher.login.uris == null || cipher.login.uris.length === 0)\n    ) {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    }\n  }\n\n  protected processFullName(cipher: CipherView, fullName: string) {\n    if (this.isNullOrWhitespace(fullName)) {\n      return;\n    }\n\n    const nameParts = fullName.split(\" \");\n    if (nameParts.length > 0) {\n      cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n    }\n    if (nameParts.length === 2) {\n      cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n    } else if (nameParts.length >= 3) {\n      cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n      cipher.identity.lastName = nameParts.slice(2, nameParts.length).join(\" \");\n    }\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AscendoCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 2) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const val: string = value[i + 2];\n          const field: string = value[i + 1];\n          if (this.isNullOrWhitespace(val) || this.isNullOrWhitespace(field)) {\n            continue;\n          }\n\n          const fieldLower = field.toLowerCase();\n          if (cipher.login.password == null && this.passwordFieldNames.indexOf(fieldLower) > -1) {\n            cipher.login.password = this.getValueOrDefault(val);\n          } else if (\n            cipher.login.username == null &&\n            this.usernameFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.username = this.getValueOrDefault(val);\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n          } else {\n            this.processKvp(cipher, field, val);\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AvastCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.login.uris = this.makeUriArray(value.web);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.username = this.getValueOrDefault(value.login);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CipherType } from \"../vault/enums/cipher-type\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AvastJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.logins != null) {\n      results.logins.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.pwd);\n        cipher.login.username = this.getValueOrDefault(value.loginName);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.notes != null) {\n      results.notes.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.name = this.getValueOrDefault(value.label);\n        cipher.notes = this.getValueOrDefault(value.text);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.cards != null) {\n      results.cards.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Card;\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.card.cardholderName = this.getValueOrDefault(value.holderName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        if (value.expirationDate != null) {\n          if (value.expirationDate.month != null) {\n            cipher.card.expMonth = value.expirationDate.month + \"\";\n          }\n          if (value.expirationDate.year != null) {\n            cipher.card.expYear = value.expirationDate.year + \"\";\n          }\n        }\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AviraCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.name,\n        this.getValueOrDefault(this.nameFromUrl(value.website), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.website);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (\n        this.isNullOrWhitespace(value.username) &&\n        !this.isNullOrWhitespace(value.secondary_username)\n      ) {\n        cipher.login.username = value.secondary_username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.notes = this.getValueOrDefault(value.secondary_username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CollectionView } from \"../admin-console/models/view/collection.view\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CipherRepromptType } from \"../vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"../vault/enums/cipher-type\";\nimport { CipherView } from \"../vault/models/view/cipher.view\";\nimport { FieldView } from \"../vault/models/view/field.view\";\nimport { LoginView } from \"../vault/models/view/login.view\";\nimport { SecureNoteView } from \"../vault/models/view/secure-note.view\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BitwardenCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.organization && !this.isNullOrWhitespace(value.collections)) {\n        const collections = (value.collections as string).split(\",\");\n        collections.forEach((col) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === col) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = col;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization) {\n        this.processFolder(result, value.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.favorite =\n        !this.organization && this.getValueOrDefault(value.favorite, \"0\") !== \"0\" ? true : false;\n      cipher.type = CipherType.Login;\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      try {\n        cipher.reprompt = parseInt(\n          this.getValueOrDefault(value.reprompt, CipherRepromptType.None.toString()),\n          10\n        );\n      } catch (e) {\n        // eslint-disable-next-line\n        console.error(\"Unable to parse reprompt value\", e);\n        cipher.reprompt = CipherRepromptType.None;\n      }\n\n      if (!this.isNullOrWhitespace(value.fields)) {\n        const fields = this.splitNewLine(value.fields);\n        for (let i = 0; i < fields.length; i++) {\n          if (this.isNullOrWhitespace(fields[i])) {\n            continue;\n          }\n\n          const delimPosition = fields[i].lastIndexOf(\": \");\n          if (delimPosition === -1) {\n            continue;\n          }\n\n          if (cipher.fields == null) {\n            cipher.fields = [];\n          }\n\n          const field = new FieldView();\n          field.name = fields[i].substr(0, delimPosition);\n          field.value = null;\n          field.type = FieldType.Text;\n          if (fields[i].length > delimPosition + 2) {\n            field.value = fields[i].substr(delimPosition + 2);\n          }\n          cipher.fields.push(field);\n        }\n      }\n\n      const valueType = value.type != null ? value.type.toLowerCase() : null;\n      switch (valueType) {\n        case \"note\":\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote = new SecureNoteView();\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default: {\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.totp = this.getValueOrDefault(value.login_totp || value.totp);\n          cipher.login.username = this.getValueOrDefault(value.login_username || value.username);\n          cipher.login.password = this.getValueOrDefault(value.login_password || value.password);\n          const uris = this.parseSingleRowCsv(value.login_uri || value.uri);\n          cipher.login.uris = this.makeUriArray(uris);\n          break;\n        }\n      }\n\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CryptoService } from \"../abstractions/crypto.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { EncString } from \"../models/domain/enc-string\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CipherWithIdExport } from \"../models/export/cipher-with-ids.export\";\nimport { CollectionWithIdExport } from \"../models/export/collection-with-id.export\";\nimport { FolderWithIdExport } from \"../models/export/folder-with-id.export\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BitwardenJsonImporter extends BaseImporter implements Importer {\n  private results: any;\n  private result: ImportResult;\n\n  constructor(protected cryptoService: CryptoService, protected i18nService: I18nService) {\n    super();\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    this.results = JSON.parse(data);\n    if (this.results == null || this.results.items == null) {\n      if (this.results?.passwordProtected) {\n        this.result.success = false;\n        this.result.missingPassword = true;\n        this.result.errorMessage = this.i18nService.t(\"importPasswordRequired\");\n        return this.result;\n      }\n\n      this.result.success = false;\n      return this.result;\n    }\n\n    if (this.results.encrypted) {\n      await this.parseEncrypted();\n    } else {\n      this.parseDecrypted();\n    }\n\n    return this.result;\n  }\n\n  private async parseEncrypted() {\n    if (this.results.encKeyValidation_DO_NOT_EDIT != null) {\n      const orgKey = await this.cryptoService.getOrgKey(this.organizationId);\n      const encKeyValidation = new EncString(this.results.encKeyValidation_DO_NOT_EDIT);\n      const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n        encKeyValidation,\n        orgKey\n      );\n      if (encKeyValidationDecrypt === null) {\n        this.result.success = false;\n        this.result.errorMessage = this.i18nService.t(\"importEncKeyError\");\n        return;\n      }\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    if (this.organization && this.results.collections != null) {\n      for (const c of this.results.collections as CollectionWithIdExport[]) {\n        const collection = CollectionWithIdExport.toDomain(c);\n        if (collection != null) {\n          collection.id = null;\n          collection.organizationId = this.organizationId;\n          const view = await collection.decrypt();\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(view);\n        }\n      }\n    } else if (!this.organization && this.results.folders != null) {\n      for (const f of this.results.folders as FolderWithIdExport[]) {\n        const folder = FolderWithIdExport.toDomain(f);\n        if (folder != null) {\n          folder.id = null;\n          const view = await folder.decrypt();\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(view);\n        }\n      }\n    }\n\n    for (const c of this.results.items as CipherWithIdExport[]) {\n      const cipher = CipherWithIdExport.toDomain(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.folderId = null;\n      cipher.organizationId = this.organizationId;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      const view = await cipher.decrypt();\n      this.cleanupCipher(view);\n      this.result.ciphers.push(view);\n    }\n\n    this.result.success = true;\n  }\n\n  private parseDecrypted() {\n    const groupingsMap = new Map<string, number>();\n    if (this.organization && this.results.collections != null) {\n      this.results.collections.forEach((c: CollectionWithIdExport) => {\n        const collection = CollectionWithIdExport.toView(c);\n        if (collection != null) {\n          collection.id = null;\n          collection.organizationId = null;\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(collection);\n        }\n      });\n    } else if (!this.organization && this.results.folders != null) {\n      this.results.folders.forEach((f: FolderWithIdExport) => {\n        const folder = FolderWithIdExport.toView(f);\n        if (folder != null) {\n          folder.id = null;\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(folder);\n        }\n      });\n    }\n\n    this.results.items.forEach((c: CipherWithIdExport) => {\n      const cipher = CipherWithIdExport.toView(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.folderId = null;\n      cipher.organizationId = null;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n  }\n}\n","import { CryptoService } from \"../abstractions/crypto.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { KdfConfig } from \"../auth/models/domain/kdf-config\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { EncString } from \"../models/domain/enc-string\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetric-crypto-key\";\n\nimport { BitwardenJsonImporter } from \"./bitwarden-json-importer\";\nimport { Importer } from \"./importer\";\n\ninterface BitwardenPasswordProtectedFileFormat {\n  encrypted: boolean;\n  passwordProtected: boolean;\n  salt: string;\n  kdfIterations: number;\n  kdfType: number;\n  encKeyValidation_DO_NOT_EDIT: string;\n  data: string;\n}\n\nexport class BitwardenPasswordProtectedImporter extends BitwardenJsonImporter implements Importer {\n  private key: SymmetricCryptoKey;\n\n  constructor(cryptoService: CryptoService, i18nService: I18nService, private password: string) {\n    super(cryptoService, i18nService);\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const parsedData = JSON.parse(data);\n    if (this.cannotParseFile(parsedData)) {\n      result.success = false;\n      return result;\n    }\n\n    if (!(await this.checkPassword(parsedData))) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"invalidFilePassword\");\n      return result;\n    }\n\n    const encData = new EncString(parsedData.data);\n    const clearTextData = await this.cryptoService.decryptToUtf8(encData, this.key);\n    return await super.parse(clearTextData);\n  }\n\n  private async checkPassword(jdoc: BitwardenPasswordProtectedFileFormat): Promise<boolean> {\n    this.key = await this.cryptoService.makePinKey(\n      this.password,\n      jdoc.salt,\n      KdfType.PBKDF2_SHA256,\n      new KdfConfig(jdoc.kdfIterations)\n    );\n\n    const encKeyValidation = new EncString(jdoc.encKeyValidation_DO_NOT_EDIT);\n\n    const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n      encKeyValidation,\n      this.key\n    );\n    if (encKeyValidationDecrypt === null) {\n      return false;\n    }\n    return true;\n  }\n\n  private cannotParseFile(jdoc: BitwardenPasswordProtectedFileFormat): boolean {\n    return (\n      !jdoc ||\n      !jdoc.encrypted ||\n      !jdoc.passwordProtected ||\n      !jdoc.salt ||\n      !jdoc.kdfIterations ||\n      typeof jdoc.kdfIterations !== \"number\" ||\n      jdoc.kdfType == null ||\n      KdfType[jdoc.kdfType] == null ||\n      !jdoc.encKeyValidation_DO_NOT_EDIT ||\n      !jdoc.data\n    );\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlackBerryCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.grouping === \"list\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.favorite = value.fav === \"1\";\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.extra);\n      if (value.grouping !== \"note\") {\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlurCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.label === \"null\") {\n        value.label = null;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.label,\n        this.getValueOrDefault(this.nameFromUrl(value.domain), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.domain);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (this.isNullOrWhitespace(value.email) && !this.isNullOrWhitespace(value.username)) {\n        cipher.login.username = value.username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.email);\n        cipher.notes = this.getValueOrDefault(value.username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst OfficialProps = [\"!group_id\", \"!group_name\", \"title\", \"username\", \"password\", \"URL\", \"id\"];\n\nexport class ButtercupCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value[\"!group_name\"]));\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      let processingCustomFields = false;\n      for (const prop in value) {\n        // eslint-disable-next-line\n        if (value.hasOwnProperty(prop)) {\n          if (!processingCustomFields && OfficialProps.indexOf(prop) === -1) {\n            processingCustomFields = true;\n          }\n          if (processingCustomFields) {\n            this.processKvp(cipher, prop, value[prop]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ChromeCsvImporter extends BaseImporter implements Importer {\n  private androidPatternRegex = new RegExp(\"^android:\\\\/\\\\/.*(?<=@)(.*)(?=\\\\/)\");\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      let name = value.name;\n      if (!name && this.androidPatternRegex.test(value.url)) {\n        name = value.url.match(this.androidPatternRegex)[1];\n      }\n      cipher.name = this.getValueOrDefault(name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ClipperzHtmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const textarea = doc.querySelector(\"textarea\");\n    if (textarea == null || this.isNullOrWhitespace(textarea.textContent)) {\n      result.errorMessage = \"Missing textarea.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const entries = JSON.parse(textarea.textContent);\n    entries.forEach((entry: any) => {\n      const cipher = this.initLoginCipher();\n      if (!this.isNullOrWhitespace(entry.label)) {\n        cipher.name = entry.label.split(\" \")[0];\n      }\n      if (entry.data != null && !this.isNullOrWhitespace(entry.data.notes)) {\n        cipher.notes = entry.data.notes.split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (entry.currentVersion != null && entry.currentVersion.fields != null) {\n        for (const property in entry.currentVersion.fields) {\n          // eslint-disable-next-line\n          if (!entry.currentVersion.fields.hasOwnProperty(property)) {\n            continue;\n          }\n\n          const field = entry.currentVersion.fields[property];\n          const actionType = field.actionType != null ? field.actionType.toLowerCase() : null;\n          switch (actionType) {\n            case \"password\":\n              cipher.login.password = this.getValueOrDefault(field.value);\n              break;\n            case \"email\":\n            case \"username\":\n            case \"user\":\n            case \"name\":\n              cipher.login.username = this.getValueOrDefault(field.value);\n              break;\n            case \"url\":\n              cipher.login.uris = this.makeUriArray(field.value);\n              break;\n            default: {\n              const labelLower = field.label != null ? field.label.toLowerCase() : null;\n              if (\n                cipher.login.password == null &&\n                this.passwordFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.password = this.getValueOrDefault(field.value);\n              } else if (\n                cipher.login.username == null &&\n                this.usernameFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.username = this.getValueOrDefault(field.value);\n              } else if (\n                (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n                this.uriFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.uris = this.makeUriArray(field.value);\n              } else {\n                this.processKvp(cipher, field.label, field.value);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class CodebookCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value.Category));\n\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite) === \"True\";\n      cipher.name = this.getValueOrDefault(value.Entry, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.login.username = this.getValueOrDefault(value.Username, value.Email);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.totp = this.getValueOrDefault(value.TOTP);\n      cipher.login.uris = this.makeUriArray(value.Website);\n\n      if (!this.isNullOrWhitespace(value.Username)) {\n        this.processKvp(cipher, \"Email\", value.Email);\n      }\n      this.processKvp(cipher, \"Phone\", value.Phone);\n      this.processKvp(cipher, \"PIN\", value.PIN);\n      this.processKvp(cipher, \"Account\", value.Account);\n      this.processKvp(cipher, \"Date\", value.Date);\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { ImportResult } from \"../../models/domain/import-result\";\nimport { CipherType } from \"../../vault/enums/cipher-type\";\nimport { CardView } from \"../../vault/models/view/card.view\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\nimport { IdentityView } from \"../../vault/models/view/identity.view\";\nimport { LoginView } from \"../../vault/models/view/login.view\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CredentialsRecord,\n  IdRecord,\n  PaymentsRecord,\n  PersonalInformationRecord,\n  SecureNoteRecord,\n} from \"./types/dashlane-csv-types\";\n\nconst _mappedCredentialsColums = new Set([\n  \"title\",\n  \"note\",\n  \"username\",\n  \"password\",\n  \"url\",\n  \"otpSecret\",\n  \"category\",\n]);\n\nconst _mappedPersonalInfoAsIdentiyColumns = new Set([\n  \"type\",\n  \"title\",\n  \"first_name\",\n  \"middle_name\",\n  \"last_name\",\n  \"login\",\n  \"email\",\n  \"phone_number\",\n  \"address\",\n  \"country\",\n  \"state\",\n  \"city\",\n  \"zip\",\n  // Skip item_name as we already have set a combined name\n  \"item_name\",\n]);\n\nconst _mappedSecureNoteColumns = new Set([\"title\", \"note\"]);\n\nexport class DashlaneCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results[0].type != null && results[0].title != null) {\n      const personalRecords = results as PersonalInformationRecord[];\n\n      // If personalRecords has only one \"name\" then create an Identity-Cipher\n      if (personalRecords.filter((x) => x.type === \"name\").length === 1) {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        results.forEach((row) => {\n          this.parsePersonalInformationRecordAsIdentity(cipher, row);\n        });\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n        result.success = true;\n        return Promise.resolve(result);\n      }\n    }\n\n    results.forEach((row) => {\n      const cipher = this.initLoginCipher();\n\n      const rowKeys = Object.keys(row);\n      if (rowKeys[0] === \"username\") {\n        this.processFolder(result, row.category);\n        this.parseCredentialsRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"account_name\") {\n        this.parsePaymentRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"number\") {\n        this.parseIdRecord(cipher, row);\n      }\n\n      if ((rowKeys[0] === \"type\") != null && rowKeys[1] === \"title\") {\n        this.parsePersonalInformationRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"title\" && rowKeys[1] === \"note\") {\n        this.parseSecureNoteRecords(cipher, row);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  parseCredentialsRecord(cipher: CipherView, row: CredentialsRecord) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    cipher.name = row.title;\n    cipher.notes = row.note;\n    cipher.login.username = row.username;\n    cipher.login.password = row.password;\n    cipher.login.totp = row.otpSecret;\n    cipher.login.uris = this.makeUriArray(row.url);\n\n    this.importUnmappedFields(cipher, row, _mappedCredentialsColums);\n  }\n\n  parsePaymentRecord(cipher: CipherView, row: PaymentsRecord) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n\n    cipher.name = row.account_name;\n    let mappedValues: string[] = [];\n    switch (row.type) {\n      case \"credit_card\":\n        cipher.card.cardholderName = row.account_name;\n        cipher.card.number = row.cc_number;\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = row.code;\n        this.setCardExpiration(cipher, `${row.expiration_month}/${row.expiration_year}`);\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\n          \"account_name\",\n          \"account_holder\",\n          \"cc_number\",\n          \"code\",\n          \"expiration_month\",\n          \"expiration_year\",\n        ];\n        break;\n      case \"bank\":\n        cipher.card.cardholderName = row.account_holder;\n        cipher.card.number = row.account_number;\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\"account_name\", \"account_holder\", \"account_number\"];\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parseIdRecord(cipher: CipherView, row: IdRecord) {\n    cipher.type = CipherType.Identity;\n    cipher.identity = new IdentityView();\n\n    const mappedValues: string[] = [\"name\", \"number\"];\n    switch (row.type) {\n      case \"card\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        break;\n      case \"passport\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.passportNumber = row.number;\n        break;\n      case \"license\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        cipher.identity.state = row.state;\n\n        mappedValues.push(\"state\");\n        break;\n      case \"social_security\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.ssn = row.number;\n        break;\n      case \"tax_number\":\n        cipher.name = row.type;\n        cipher.identity.licenseNumber = row.number;\n        break;\n\n      default:\n        break;\n    }\n\n    // If you add more mapped fields please extend this\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parsePersonalInformationRecord(cipher: CipherView, row: PersonalInformationRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    if (row.type === \"name\") {\n      cipher.name = `${row.title} ${row.first_name} ${row.middle_name} ${row.last_name}`\n        .replace(\"  \", \" \")\n        .trim();\n    } else {\n      cipher.name = row.item_name;\n    }\n\n    const dataRow = row as any;\n    Object.keys(row).forEach((key) => {\n      this.processKvp(cipher, key, dataRow[key]);\n    });\n  }\n\n  parsePersonalInformationRecordAsIdentity(cipher: CipherView, row: PersonalInformationRecord) {\n    switch (row.type) {\n      case \"name\":\n        this.processFullName(cipher, `${row.first_name} ${row.middle_name} ${row.last_name}`);\n        cipher.identity.title = row.title;\n        cipher.name = cipher.identity.fullName;\n\n        cipher.identity.username = row.login;\n        break;\n      case \"email\":\n        cipher.identity.email = row.email;\n        break;\n      case \"number\":\n        cipher.identity.phone = row.phone_number;\n        break;\n      case \"address\":\n        cipher.identity.address1 = row.address;\n        cipher.identity.city = row.city;\n        cipher.identity.postalCode = row.zip;\n        cipher.identity.state = row.state;\n        cipher.identity.country = row.country;\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, _mappedPersonalInfoAsIdentiyColumns);\n  }\n\n  parseSecureNoteRecords(cipher: CipherView, row: SecureNoteRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = row.title;\n    cipher.notes = row.note;\n\n    this.importUnmappedFields(cipher, row, _mappedSecureNoteColumns);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { ImportResult } from \"../../models/domain/import-result\";\nimport { CipherType } from \"../../vault/enums/cipher-type\";\nimport { CardView } from \"../../vault/models/view/card.view\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\nimport { IdentityView } from \"../../vault/models/view/identity.view\";\nimport { SecureNoteView } from \"../../vault/models/view/secure-note.view\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nconst HandledResults = new Set([\n  \"ADDRESS\",\n  \"AUTHENTIFIANT\",\n  \"BANKSTATEMENT\",\n  \"IDCARD\",\n  \"IDENTITY\",\n  \"PAYMENTMEANS_CREDITCARD\",\n  \"PAYMENTMEAN_PAYPAL\",\n  \"EMAIL\",\n]);\n\nexport class DashlaneJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    if (results.ADDRESS != null) {\n      this.processAddress(results.ADDRESS);\n    }\n    if (results.AUTHENTIFIANT != null) {\n      this.processAuth(results.AUTHENTIFIANT);\n    }\n    if (results.BANKSTATEMENT != null) {\n      this.processNote(results.BANKSTATEMENT, \"BankAccountName\");\n    }\n    if (results.IDCARD != null) {\n      this.processNote(results.IDCARD, \"Fullname\");\n    }\n    if (results.PAYMENTMEANS_CREDITCARD != null) {\n      this.processCard(results.PAYMENTMEANS_CREDITCARD);\n    }\n    if (results.IDENTITY != null) {\n      this.processIdentity(results.IDENTITY);\n    }\n\n    for (const key in results) {\n      // eslint-disable-next-line\n      if (results.hasOwnProperty(key) && !HandledResults.has(key)) {\n        this.processNote(results[key], null, \"Generic Note\");\n      }\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processAuth(results: any[]) {\n    results.forEach((credential: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(credential.title);\n\n      cipher.login.username = this.getValueOrDefault(\n        credential.login,\n        this.getValueOrDefault(credential.secondaryLogin)\n      );\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.domain);\n      cipher.notes += this.getValueOrDefault(credential.note, \"\");\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processIdentity(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.fullName, \"\");\n      const nameParts = cipher.name.split(\" \");\n      if (nameParts.length > 0) {\n        cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n      }\n      if (nameParts.length === 2) {\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n      } else if (nameParts.length === 3) {\n        cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[2]);\n      }\n      cipher.identity.username = this.getValueOrDefault(obj.pseudo);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processAddress(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.addressName);\n      cipher.identity.address1 = this.getValueOrDefault(obj.addressFull);\n      cipher.identity.city = this.getValueOrDefault(obj.city);\n      cipher.identity.state = this.getValueOrDefault(obj.state);\n      cipher.identity.postalCode = this.getValueOrDefault(obj.zipcode);\n      cipher.identity.country = this.getValueOrDefault(obj.country);\n      if (cipher.identity.country != null) {\n        cipher.identity.country = cipher.identity.country.toUpperCase();\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processCard(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.card = new CardView();\n      cipher.type = CipherType.Card;\n      cipher.name = this.getValueOrDefault(obj.bank);\n      cipher.card.number = this.getValueOrDefault(obj.cardNumber);\n      cipher.card.brand = this.getCardBrand(cipher.card.number);\n      cipher.card.cardholderName = this.getValueOrDefault(obj.owner);\n      if (!this.isNullOrWhitespace(cipher.card.brand)) {\n        if (this.isNullOrWhitespace(cipher.name)) {\n          cipher.name = cipher.card.brand;\n        } else {\n          cipher.name += \" - \" + cipher.card.brand;\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processNote(results: any[], nameProperty: string, name: string = null) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.secureNote = new SecureNoteView();\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote.type = SecureNoteType.Generic;\n      if (name != null) {\n        cipher.name = name;\n      } else {\n        cipher.name = this.getValueOrDefault(obj[nameProperty]);\n      }\n      for (const key in obj) {\n        // eslint-disable-next-line\n        if (obj.hasOwnProperty(key) && key !== nameProperty) {\n          this.processKvp(cipher, key, obj[key].toString());\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\nimport { CipherType } from \"../vault/enums/cipher-type\";\nimport { CardView } from \"../vault/models/view/card.view\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class EncryptrCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Label, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      const text = this.getValueOrDefault(value.Text);\n      if (!this.isNullOrWhitespace(text)) {\n        if (this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = text;\n        } else {\n          cipher.notes += \"\\n\\n\" + text;\n        }\n      }\n\n      const type = value[\"Entry Type\"];\n      if (type === \"Password\") {\n        cipher.login.username = this.getValueOrDefault(value.Username);\n        cipher.login.password = this.getValueOrDefault(value.Password);\n        cipher.login.uris = this.makeUriArray(value[\"Site URL\"]);\n      } else if (type === \"Credit Card\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value[\"Name on card\"]);\n        cipher.card.number = this.getValueOrDefault(value[\"Card Number\"]);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.CVV);\n        const expiry = this.getValueOrDefault(value.Expiry);\n        if (!this.isNullOrWhitespace(expiry)) {\n          const expParts = expiry.split(\"/\");\n          if (expParts.length > 1) {\n            cipher.card.expMonth = parseInt(expParts[0], null).toString();\n            cipher.card.expYear = (2000 + parseInt(expParts[1], null)).toString();\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { ImportResult } from \"../../models/domain/import-result\";\nimport { CipherType } from \"../../vault/enums/cipher-type\";\nimport { CardView } from \"../../vault/models/view/card.view\";\nimport { SecureNoteView } from \"../../vault/models/view/secure-note.view\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class EnpassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let firstRow = true;\n    results.forEach((value) => {\n      if (value.length < 2 || (firstRow && (value[0] === \"Title\" || value[0] === \"title\"))) {\n        firstRow = false;\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (\n        value.length === 2 ||\n        (!this.containsField(value, \"username\") &&\n          !this.containsField(value, \"password\") &&\n          !this.containsField(value, \"email\") &&\n          !this.containsField(value, \"url\"))\n      ) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      }\n\n      if (\n        this.containsField(value, \"cardholder\") &&\n        this.containsField(value, \"number\") &&\n        this.containsField(value, \"expiry date\")\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      }\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const fieldValue: string = value[i + 2];\n          if (this.isNullOrWhitespace(fieldValue)) {\n            continue;\n          }\n\n          const fieldName: string = value[i + 1];\n          const fieldNameLower = fieldName.toLowerCase();\n\n          if (cipher.type === CipherType.Login) {\n            if (\n              fieldNameLower === \"url\" &&\n              (cipher.login.uris == null || cipher.login.uris.length === 0)\n            ) {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              continue;\n            } else if (\n              (fieldNameLower === \"username\" || fieldNameLower === \"email\") &&\n              this.isNullOrWhitespace(cipher.login.username)\n            ) {\n              cipher.login.username = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"password\" &&\n              this.isNullOrWhitespace(cipher.login.password)\n            ) {\n              cipher.login.password = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n              cipher.login.totp = fieldValue;\n              continue;\n            }\n          } else if (cipher.type === CipherType.Card) {\n            if (\n              fieldNameLower === \"cardholder\" &&\n              this.isNullOrWhitespace(cipher.card.cardholderName)\n            ) {\n              cipher.card.cardholderName = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"number\" && this.isNullOrWhitespace(cipher.card.number)) {\n              cipher.card.number = fieldValue;\n              cipher.card.brand = this.getCardBrand(fieldValue);\n              continue;\n            } else if (fieldNameLower === \"cvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n              cipher.card.code = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"expiry date\" &&\n              this.isNullOrWhitespace(cipher.card.expMonth) &&\n              this.isNullOrWhitespace(cipher.card.expYear)\n            ) {\n              if (this.setCardExpiration(cipher, fieldValue)) {\n                continue;\n              }\n            } else if (fieldNameLower === \"type\") {\n              // Skip since brand was determined from number above\n              continue;\n            }\n          }\n\n          this.processKvp(cipher, fieldName, fieldValue);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private containsField(fields: any[], name: string) {\n    if (fields == null || name == null) {\n      return false;\n    }\n    return (\n      fields.filter((f) => !this.isNullOrWhitespace(f) && f.toLowerCase() === name.toLowerCase())\n        .length > 0\n    );\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { ImportResult } from \"../../models/domain/import-result\";\nimport { CipherType } from \"../../vault/enums/cipher-type\";\nimport { CardView } from \"../../vault/models/view/card.view\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\nimport { FolderView } from \"../../vault/models/view/folder.view\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { EnpassJsonFile, EnpassFolder, EnpassField } from \"./types/enpass-json-type\";\n\ntype EnpassFolderTreeItem = EnpassFolder & { children: EnpassFolderTreeItem[] };\nconst androidUrlRegex = new RegExp(\"androidapp://.*==@\", \"g\");\n\nexport class EnpassJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: EnpassJsonFile = JSON.parse(data);\n    if (results == null || results.items == null || results.items.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    const foldersIndexMap = new Map<string, number>();\n    const folderTree = this.buildFolderTree(results.folders);\n    this.flattenFolderTree(null, folderTree, foldersMap);\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((item) => {\n      if (item.folders != null && item.folders.length > 0 && foldersIndexMap.has(item.folders[0])) {\n        result.folderRelationships.push([\n          result.ciphers.length,\n          foldersIndexMap.get(item.folders[0]),\n        ]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(item.title);\n      cipher.favorite = item.favorite > 0;\n\n      if (item.template_type != null && item.fields != null && item.fields.length > 0) {\n        if (\n          item.template_type.indexOf(\"login.\") === 0 ||\n          item.template_type.indexOf(\"password.\") === 0\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else if (item.template_type.indexOf(\"creditcard.\") === 0) {\n          this.processCard(cipher, item.fields);\n        } else if (\n          item.template_type.indexOf(\"identity.\") < 0 &&\n          item.fields.some((f) => f.type === \"password\" && !this.isNullOrWhitespace(f.value))\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else {\n          this.processNote(cipher, item.fields);\n        }\n      }\n\n      cipher.notes += \"\\n\" + this.getValueOrDefault(item.note, \"\");\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private processLogin(cipher: CipherView, fields: EnpassField[]) {\n    const urls: string[] = [];\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n\n      if (\n        (field.type === \"username\" || field.type === \"email\") &&\n        this.isNullOrWhitespace(cipher.login.username)\n      ) {\n        cipher.login.username = field.value;\n      } else if (field.type === \"password\" && this.isNullOrWhitespace(cipher.login.password)) {\n        cipher.login.password = field.value;\n      } else if (field.type === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n        cipher.login.totp = field.value;\n      } else if (field.type === \"url\") {\n        urls.push(field.value);\n      } else if (field.type === \".Android#\") {\n        let cleanedValue = field.value.startsWith(\"androidapp://\")\n          ? field.value\n          : \"androidapp://\" + field.value;\n        cleanedValue = cleanedValue.replace(\"android://\", \"\");\n        cleanedValue = cleanedValue.replace(androidUrlRegex, \"androidapp://\");\n        urls.push(cleanedValue);\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n    cipher.login.uris = this.makeUriArray(urls);\n  }\n\n  private processCard(cipher: CipherView, fields: EnpassField[]) {\n    cipher.card = new CardView();\n    cipher.type = CipherType.Card;\n    fields.forEach((field) => {\n      if (\n        this.isNullOrWhitespace(field.value) ||\n        field.type === \"section\" ||\n        field.type === \"ccType\"\n      ) {\n        return;\n      }\n\n      if (field.type === \"ccName\" && this.isNullOrWhitespace(cipher.card.cardholderName)) {\n        cipher.card.cardholderName = field.value;\n      } else if (field.type === \"ccNumber\" && this.isNullOrWhitespace(cipher.card.number)) {\n        cipher.card.number = field.value;\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n      } else if (field.type === \"ccCvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n        cipher.card.code = field.value;\n      } else if (field.type === \"ccExpiry\" && this.isNullOrWhitespace(cipher.card.expYear)) {\n        if (!this.setCardExpiration(cipher, field.value)) {\n          this.processKvp(\n            cipher,\n            field.label,\n            field.value,\n            field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n          );\n        }\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n  }\n\n  private processNote(cipher: CipherView, fields: EnpassField[]) {\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n      this.processKvp(\n        cipher,\n        field.label,\n        field.value,\n        field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n      );\n    });\n  }\n\n  private buildFolderTree(folders: EnpassFolder[]): EnpassFolderTreeItem[] {\n    if (folders == null) {\n      return [];\n    }\n    const folderTree: EnpassFolderTreeItem[] = [];\n    const map = new Map<string, EnpassFolderTreeItem>([]);\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      map.set(obj.uuid, obj);\n      obj.children = [];\n    });\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      if (obj.parent_uuid != null && obj.parent_uuid !== \"\" && map.has(obj.parent_uuid)) {\n        map.get(obj.parent_uuid).children.push(obj);\n      } else {\n        folderTree.push(obj);\n      }\n    });\n    return folderTree;\n  }\n\n  private flattenFolderTree(\n    titlePrefix: string,\n    tree: EnpassFolderTreeItem[],\n    map: Map<string, string>\n  ) {\n    if (tree == null) {\n      return;\n    }\n    tree.forEach((f) => {\n      if (f.title != null && f.title.trim() !== \"\") {\n        let title = f.title.trim();\n        if (titlePrefix != null && titlePrefix.trim() !== \"\") {\n          title = titlePrefix + \"/\" + title;\n        }\n        map.set(f.uuid, title);\n        if (f.children != null && f.children.length !== 0) {\n          this.flattenFolderTree(title, f.children, map);\n        }\n      }\n    });\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class FirefoxCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results\n      .filter((value) => {\n        return value.url !== \"chrome://FirefoxAccounts\";\n      })\n      .forEach((value) => {\n        const cipher = this.initLoginCipher();\n        const url = this.getValueOrDefault(value.url, this.getValueOrDefault(value.hostname));\n        cipher.name = this.getValueOrDefault(this.nameFromUrl(url), \"--\");\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.uris = this.makeUriArray(url);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export interface FskFile {\n  data: Data;\n}\n\nexport interface Data {\n  [key: string]: FskEntry;\n}\n\nexport enum FskEntryTypesEnum {\n  Login = 1,\n  CreditCard = 2,\n}\n\nexport interface FskEntry {\n  color: string;\n  creditCvv: string;\n  creditExpiry: string;\n  creditNumber: string;\n  favorite: number; // UNIX timestamp\n  notes: string;\n  password: string;\n  passwordList: PasswordList[];\n  passwordModifiedDate: number; // UNIX timestamp\n  rev: string | number;\n  service: string;\n  style: string;\n  type: FskEntryTypesEnum;\n  url: string;\n  username: string;\n  createdDate: number; // UNIX timestamp\n  modifiedDate: number; // UNIX timestamp\n}\n\nexport interface PasswordList {\n  changedate: string;\n  password: string;\n}\n","import { ImportResult } from \"../../models/domain/import-result\";\nimport { CipherType } from \"../../vault/enums/cipher-type\";\nimport { CardView } from \"../../vault/models/view/card.view\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { FskEntry, FskEntryTypesEnum, FskFile } from \"./fsecure-fsk-types\";\n\nexport class FSecureFskImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: FskFile = JSON.parse(data);\n    if (results == null || results.data == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const key in results.data) {\n      // eslint-disable-next-line\n      if (!results.data.hasOwnProperty(key)) {\n        continue;\n      }\n\n      const value = results.data[key];\n      const cipher = this.parseEntry(value);\n      result.ciphers.push(cipher);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseEntry(entry: FskEntry): CipherView {\n    const cipher = this.initLoginCipher();\n    cipher.name = this.getValueOrDefault(entry.service);\n    cipher.notes = this.getValueOrDefault(entry.notes);\n    cipher.favorite = entry.favorite > 0;\n\n    switch (entry.type) {\n      case FskEntryTypesEnum.Login:\n        this.handleLoginEntry(entry, cipher);\n        break;\n      case FskEntryTypesEnum.CreditCard:\n        this.handleCreditCardEntry(entry, cipher);\n        break;\n      default:\n        return;\n        break;\n    }\n\n    this.convertToNoteIfNeeded(cipher);\n    this.cleanupCipher(cipher);\n    return cipher;\n  }\n\n  private handleLoginEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.login.username = this.getValueOrDefault(entry.username);\n    cipher.login.password = this.getValueOrDefault(entry.password);\n    cipher.login.uris = this.makeUriArray(entry.url);\n  }\n\n  private handleCreditCardEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n    cipher.card.cardholderName = this.getValueOrDefault(entry.username);\n    cipher.card.number = this.getValueOrDefault(entry.creditNumber);\n    cipher.card.brand = this.getCardBrand(cipher.card.number);\n    cipher.card.code = this.getValueOrDefault(entry.creditCvv);\n    if (!this.isNullOrWhitespace(entry.creditExpiry)) {\n      if (!this.setCardExpiration(cipher, entry.creditExpiry)) {\n        this.processKvp(cipher, \"Expiration\", entry.creditExpiry);\n      }\n    }\n    if (!this.isNullOrWhitespace(entry.password)) {\n      this.processKvp(cipher, \"PIN\", entry.password);\n    }\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class GnomeJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || Object.keys(results).length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const keyRing in results) {\n      if (\n        !results.hasOwnProperty(keyRing) || // eslint-disable-line\n        this.isNullOrWhitespace(keyRing) ||\n        results[keyRing].length === 0\n      ) {\n        continue;\n      }\n\n      results[keyRing].forEach((value: any) => {\n        if (\n          this.isNullOrWhitespace(value.display_name) ||\n          value.display_name.indexOf(\"http\") !== 0\n        ) {\n          return;\n        }\n\n        this.processFolder(result, keyRing);\n        const cipher = this.initLoginCipher();\n        cipher.name = value.display_name.replace(\"http://\", \"\").replace(\"https://\", \"\");\n        if (cipher.name.length > 30) {\n          cipher.name = cipher.name.substring(0, 30);\n        }\n        cipher.login.password = this.getValueOrDefault(value.secret);\n        cipher.login.uris = this.makeUriArray(value.display_name);\n\n        if (value.attributes != null) {\n          cipher.login.username =\n            value.attributes != null\n              ? this.getValueOrDefault(value.attributes.username_value)\n              : null;\n          for (const attr in value.attributes) {\n            if (\n              !value.attributes.hasOwnProperty(attr) || // eslint-disable-line\n              attr === \"username_value\" ||\n              attr === \"xdg:schema\"\n            ) {\n              continue;\n            }\n            this.processKvp(cipher, attr, value.attributes[attr]);\n          }\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export class ImportError extends Error {\n  constructor(message?: string, public passwordRequired: boolean = false) {\n    super(message);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst NotesHeader = \"Notes\\n\\n\";\nconst ApplicationsHeader = \"Applications\\n\\n\";\nconst WebsitesHeader = \"Websites\\n\\n\";\nconst Delimiter = \"\\n---\\n\";\n\nexport class KasperskyTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n\n    let notesData: string;\n    let applicationsData: string;\n    let websitesData: string;\n    let workingData = this.splitNewLine(data).join(\"\\n\");\n\n    if (workingData.indexOf(NotesHeader) !== -1) {\n      const parts = workingData.split(NotesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        notesData = parts[1];\n      }\n    }\n    if (workingData.indexOf(ApplicationsHeader) !== -1) {\n      const parts = workingData.split(ApplicationsHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        applicationsData = parts[1];\n      }\n    }\n    if (workingData.indexOf(WebsitesHeader) === 0) {\n      const parts = workingData.split(WebsitesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        websitesData = parts[1];\n      }\n    }\n\n    const notes = this.parseDataCategory(notesData);\n    const applications = this.parseDataCategory(applicationsData);\n    const websites = this.parseDataCategory(websitesData);\n\n    notes.forEach((n) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(n.get(\"Name\"));\n      cipher.notes = this.getValueOrDefault(n.get(\"Text\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    websites.concat(applications).forEach((w) => {\n      const cipher = this.initLoginCipher();\n      const nameKey = w.has(\"Website name\") ? \"Website name\" : \"Application\";\n      cipher.name = this.getValueOrDefault(w.get(nameKey), \"\");\n      if (!this.isNullOrWhitespace(w.get(\"Login name\"))) {\n        if (!this.isNullOrWhitespace(cipher.name)) {\n          cipher.name += \": \";\n        }\n        cipher.name += w.get(\"Login name\");\n      }\n      cipher.notes = this.getValueOrDefault(w.get(\"Comment\"));\n      if (w.has(\"Website URL\")) {\n        cipher.login.uris = this.makeUriArray(w.get(\"Website URL\"));\n      }\n      cipher.login.username = this.getValueOrDefault(w.get(\"Login\"));\n      cipher.login.password = this.getValueOrDefault(w.get(\"Password\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseDataCategory(data: string): Map<string, string>[] {\n    if (this.isNullOrWhitespace(data) || data.indexOf(Delimiter) === -1) {\n      return [];\n    }\n    const items: Map<string, string>[] = [];\n    data.split(Delimiter).forEach((p) => {\n      if (p.indexOf(\"\\n\") === -1) {\n        return;\n      }\n      const item = new Map<string, string>();\n      let itemComment: string;\n      let itemCommentKey: string;\n      p.split(\"\\n\").forEach((l) => {\n        if (itemComment != null) {\n          itemComment += \"\\n\" + l;\n          return;\n        }\n        const colonIndex = l.indexOf(\":\");\n        let key: string;\n        let val: string;\n        if (colonIndex === -1) {\n          return;\n        } else {\n          key = l.substring(0, colonIndex);\n          if (l.length > colonIndex + 1) {\n            val = l.substring(colonIndex + 2);\n          }\n        }\n        if (key != null) {\n          item.set(key, val);\n        }\n        if (key === \"Comment\" || key === \"Text\") {\n          itemComment = val;\n          itemCommentKey = key;\n        }\n      });\n      if (itemComment != null && itemCommentKey != null) {\n        item.set(itemCommentKey, itemComment);\n      }\n      if (item.size === 0) {\n        return;\n      }\n      items.push(item);\n    });\n    return items;\n  }\n}\n","import { FieldType } from \"../enums/fieldType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { FolderView } from \"../vault/models/view/folder.view\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePass2XmlImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    //Note: The doc.querySelector(\"KeePassFile > Root > Group\") no longers works on node and we have to breakdown the query by nodes\n    const KeePassFileNode = doc.querySelector(\"KeePassFile\");\n\n    if (KeePassFileNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const RootNode = KeePassFileNode.querySelector(\"Root\");\n    if (RootNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const rootGroup = RootNode.querySelector(\"Group\");\n    if (rootGroup == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root > Group` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    this.traverse(rootGroup, true, \"\");\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  traverse(node: Element, isRootNode: boolean, groupPrefixName: string) {\n    const folderIndex = this.result.folders.length;\n    let groupName = groupPrefixName;\n\n    if (!isRootNode) {\n      if (groupName !== \"\") {\n        groupName += \"/\";\n      }\n      const nameEl = this.querySelectorDirectChild(node, \"Name\");\n      groupName += nameEl == null ? \"-\" : nameEl.textContent;\n      const folder = new FolderView();\n      folder.name = groupName;\n      this.result.folders.push(folder);\n    }\n\n    this.querySelectorAllDirectChild(node, \"Entry\").forEach((entry) => {\n      const cipherIndex = this.result.ciphers.length;\n\n      const cipher = this.initLoginCipher();\n      this.querySelectorAllDirectChild(entry, \"String\").forEach((entryString) => {\n        const valueEl = this.querySelectorDirectChild(entryString, \"Value\");\n        const value = valueEl != null ? valueEl.textContent : null;\n        if (this.isNullOrWhitespace(value)) {\n          return;\n        }\n        const keyEl = this.querySelectorDirectChild(entryString, \"Key\");\n        const key = keyEl != null ? keyEl.textContent : null;\n\n        if (key === \"URL\") {\n          cipher.login.uris = this.makeUriArray(value);\n        } else if (key === \"UserName\") {\n          cipher.login.username = value;\n        } else if (key === \"Password\") {\n          cipher.login.password = value;\n        } else if (key === \"otp\") {\n          cipher.login.totp = value.replace(\"key=\", \"\");\n        } else if (key === \"Title\") {\n          cipher.name = value;\n        } else if (key === \"Notes\") {\n          cipher.notes += value + \"\\n\";\n        } else {\n          let type = FieldType.Text;\n          const attrs = valueEl.attributes as any;\n          if (\n            attrs.length > 0 &&\n            attrs.ProtectInMemory != null &&\n            attrs.ProtectInMemory.value === \"True\"\n          ) {\n            type = FieldType.Hidden;\n          }\n          this.processKvp(cipher, key, value, type);\n        }\n      });\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n\n      if (!isRootNode) {\n        this.result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    this.querySelectorAllDirectChild(node, \"Group\").forEach((group) => {\n      this.traverse(group, false, groupName);\n    });\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePassXCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(value.Title)) {\n        return;\n      }\n\n      value.Group =\n        !this.isNullOrWhitespace(value.Group) && value.Group.startsWith(\"Root/\")\n          ? value.Group.replace(\"Root/\", \"\")\n          : value.Group;\n      const groupName = !this.isNullOrWhitespace(value.Group) ? value.Group : null;\n      this.processFolder(result, groupName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/domain/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class KeeperCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 6) {\n        return;\n      }\n\n      this.processFolder(result, value[0]);\n      const cipher = this.initLoginCipher();\n\n      const notes = this.getValueOrDefault(value[5]);\n      if (notes) {\n        cipher.notes = `${notes}\\n`;\n      }\n\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[4]);\n\n      if (value.length > 7) {\n        // we have some custom fields.\n        for (let i = 7; i < value.length; i = i + 2) {\n          if (value[i] == \"TFC:Keeper\") {\n            cipher.login.totp = value[i + 1];\n          } else {\n            this.processKvp(cipher, value[i], value[i + 1]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CipherType } from \"../vault/enums/cipher-type\";\nimport { CardView } from \"../vault/models/view/card.view\";\nimport { CipherView } from \"../vault/models/view/cipher.view\";\nimport { FolderView } from \"../vault/models/view/folder.view\";\nimport { IdentityView } from \"../vault/models/view/identity.view\";\nimport { LoginView } from \"../vault/models/view/login.view\";\nimport { SecureNoteView } from \"../vault/models/view/secure-note.view\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LastPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipherIndex = result.ciphers.length;\n      let folderIndex = result.folders.length;\n      let grouping = value.grouping;\n      if (grouping != null) {\n        // eslint-disable-next-line\n        grouping = grouping.replace(/\\\\/g, \"/\").replace(/[\\x00-\\x1F\\x7F-\\x9F]/g, \"\");\n      }\n      const hasFolder = this.getValueOrDefault(grouping, \"(none)\") !== \"(none)\";\n      let addFolder = hasFolder;\n\n      if (hasFolder) {\n        for (let i = 0; i < result.folders.length; i++) {\n          if (result.folders[i].name === grouping) {\n            addFolder = false;\n            folderIndex = i;\n            break;\n          }\n        }\n      }\n\n      const cipher = this.buildBaseCipher(value);\n      if (cipher.type === CipherType.Login) {\n        cipher.notes = this.getValueOrDefault(value.extra);\n        cipher.login = new LoginView();\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.totp);\n      } else if (cipher.type === CipherType.SecureNote) {\n        this.parseSecureNote(value, cipher);\n      } else if (cipher.type === CipherType.Card) {\n        cipher.card = this.parseCard(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n      } else if (cipher.type === CipherType.Identity) {\n        cipher.identity = this.parseIdentity(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n        if (!this.isNullOrWhitespace(value.ccnum)) {\n          // there is a card on this identity too\n          const cardCipher = this.buildBaseCipher(value);\n          cardCipher.identity = null;\n          cardCipher.type = CipherType.Card;\n          cardCipher.card = this.parseCard(value);\n          result.ciphers.push(cardCipher);\n        }\n      }\n\n      result.ciphers.push(cipher);\n\n      if (addFolder) {\n        const f = new FolderView();\n        f.name = grouping;\n        result.folders.push(f);\n      }\n      if (hasFolder) {\n        result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private buildBaseCipher(value: any) {\n    const cipher = new CipherView();\n    // eslint-disable-next-line\n    if (value.hasOwnProperty(\"profilename\") && value.hasOwnProperty(\"profilelanguage\")) {\n      // form fill\n      cipher.favorite = false;\n      cipher.name = this.getValueOrDefault(value.profilename, \"--\");\n      cipher.type = CipherType.Card;\n\n      if (\n        !this.isNullOrWhitespace(value.title) ||\n        !this.isNullOrWhitespace(value.firstname) ||\n        !this.isNullOrWhitespace(value.lastname) ||\n        !this.isNullOrWhitespace(value.address1) ||\n        !this.isNullOrWhitespace(value.phone) ||\n        !this.isNullOrWhitespace(value.username) ||\n        !this.isNullOrWhitespace(value.email)\n      ) {\n        cipher.type = CipherType.Identity;\n      }\n    } else {\n      // site or secure note\n      cipher.favorite = !this.organization && this.getValueOrDefault(value.fav, \"0\") === \"1\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.type = value.url === \"http://sn\" ? CipherType.SecureNote : CipherType.Login;\n    }\n    return cipher;\n  }\n\n  private parseCard(value: any): CardView {\n    const card = new CardView();\n    card.cardholderName = this.getValueOrDefault(value.ccname);\n    card.number = this.getValueOrDefault(value.ccnum);\n    card.code = this.getValueOrDefault(value.cccsc);\n    card.brand = this.getCardBrand(value.ccnum);\n\n    if (!this.isNullOrWhitespace(value.ccexp) && value.ccexp.indexOf(\"-\") > -1) {\n      const ccexpParts = (value.ccexp as string).split(\"-\");\n      if (ccexpParts.length > 1) {\n        card.expYear = ccexpParts[0];\n        card.expMonth = ccexpParts[1];\n        if (card.expMonth.length === 2 && card.expMonth[0] === \"0\") {\n          card.expMonth = card.expMonth[1];\n        }\n      }\n    }\n\n    return card;\n  }\n\n  private parseIdentity(value: any): IdentityView {\n    const identity = new IdentityView();\n    identity.title = this.getValueOrDefault(value.title);\n    identity.firstName = this.getValueOrDefault(value.firstname);\n    identity.middleName = this.getValueOrDefault(value.middlename);\n    identity.lastName = this.getValueOrDefault(value.lastname);\n    identity.username = this.getValueOrDefault(value.username);\n    identity.company = this.getValueOrDefault(value.company);\n    identity.ssn = this.getValueOrDefault(value.ssn);\n    identity.address1 = this.getValueOrDefault(value.address1);\n    identity.address2 = this.getValueOrDefault(value.address2);\n    identity.address3 = this.getValueOrDefault(value.address3);\n    identity.city = this.getValueOrDefault(value.city);\n    identity.state = this.getValueOrDefault(value.state);\n    identity.postalCode = this.getValueOrDefault(value.zip);\n    identity.country = this.getValueOrDefault(value.country);\n    identity.email = this.getValueOrDefault(value.email);\n    identity.phone = this.getValueOrDefault(value.phone);\n\n    if (!this.isNullOrWhitespace(identity.title)) {\n      identity.title = identity.title.charAt(0).toUpperCase() + identity.title.slice(1);\n    }\n\n    return identity;\n  }\n\n  private parseSecureNote(value: any, cipher: CipherView) {\n    const extraParts = this.splitNewLine(value.extra);\n    let processedNote = false;\n\n    if (extraParts.length) {\n      const typeParts = extraParts[0].split(\":\");\n      if (\n        typeParts.length > 1 &&\n        typeParts[0] === \"NoteType\" &&\n        (typeParts[1] === \"Credit Card\" || typeParts[1] === \"Address\")\n      ) {\n        if (typeParts[1] === \"Credit Card\") {\n          const mappedData = this.parseSecureNoteMapping<CardView>(cipher, extraParts, {\n            Number: \"number\",\n            \"Name on Card\": \"cardholderName\",\n            \"Security Code\": \"code\",\n            // LP provides date in a format like 'June,2020'\n            // Store in expMonth, then parse and modify\n            \"Expiration Date\": \"expMonth\",\n          });\n\n          if (this.isNullOrWhitespace(mappedData.expMonth) || mappedData.expMonth === \",\") {\n            // No expiration data\n            mappedData.expMonth = undefined;\n          } else {\n            const [monthString, year] = mappedData.expMonth.split(\",\");\n            // Parse month name into number\n            if (!this.isNullOrWhitespace(monthString)) {\n              const month = new Date(Date.parse(monthString.trim() + \" 1, 2012\")).getMonth() + 1;\n              if (isNaN(month)) {\n                mappedData.expMonth = undefined;\n              } else {\n                mappedData.expMonth = month.toString();\n              }\n            } else {\n              mappedData.expMonth = undefined;\n            }\n            if (!this.isNullOrWhitespace(year)) {\n              mappedData.expYear = year;\n            }\n          }\n\n          cipher.type = CipherType.Card;\n          cipher.card = mappedData;\n        } else if (typeParts[1] === \"Address\") {\n          const mappedData = this.parseSecureNoteMapping<IdentityView>(cipher, extraParts, {\n            Title: \"title\",\n            \"First Name\": \"firstName\",\n            \"Last Name\": \"lastName\",\n            \"Middle Name\": \"middleName\",\n            Company: \"company\",\n            \"Address 1\": \"address1\",\n            \"Address 2\": \"address2\",\n            \"Address 3\": \"address3\",\n            \"City / Town\": \"city\",\n            State: \"state\",\n            \"Zip / Postal Code\": \"postalCode\",\n            Country: \"country\",\n            \"Email Address\": \"email\",\n            Username: \"username\",\n          });\n          cipher.type = CipherType.Identity;\n          cipher.identity = mappedData;\n        }\n        processedNote = true;\n      }\n    }\n\n    if (!processedNote) {\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n      cipher.notes = this.getValueOrDefault(value.extra);\n    }\n  }\n\n  private parseSecureNoteMapping<T>(cipher: CipherView, extraParts: string[], map: any): T {\n    const dataObj: any = {};\n\n    let processingNotes = false;\n    extraParts.forEach((extraPart) => {\n      let key: string = null;\n      let val: string = null;\n      if (!processingNotes) {\n        if (this.isNullOrWhitespace(extraPart)) {\n          return;\n        }\n        const colonIndex = extraPart.indexOf(\":\");\n        if (colonIndex === -1) {\n          key = extraPart;\n        } else {\n          key = extraPart.substring(0, colonIndex);\n          if (extraPart.length > colonIndex) {\n            val = extraPart.substring(colonIndex + 1);\n          }\n        }\n        if (this.isNullOrWhitespace(key) || this.isNullOrWhitespace(val) || key === \"NoteType\") {\n          return;\n        }\n      }\n\n      if (processingNotes) {\n        cipher.notes += \"\\n\" + extraPart;\n      } else if (key === \"Notes\") {\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes += \"\\n\" + val;\n        } else {\n          cipher.notes = val;\n        }\n        processingNotes = true;\n        // eslint-disable-next-line\n      } else if (map.hasOwnProperty(key)) {\n        dataObj[map[key]] = val;\n      } else {\n        this.processKvp(cipher, key, val);\n      }\n    });\n\n    return dataObj;\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LogMeOnceCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 4) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[1]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MeldiumCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.DisplayName, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.login.username = this.getValueOrDefault(value.UserName);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CipherType } from \"../vault/enums/cipher-type\";\nimport { SecureNoteView } from \"../vault/models/view/secure-note.view\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MSecureCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      const folderName =\n        this.getValueOrDefault(value[0], \"Unassigned\") !== \"Unassigned\" ? value[0] : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[2], \"--\");\n\n      if (value[1] === \"Web Logins\" || value[1] === \"Login\") {\n        cipher.login.uris = this.makeUriArray(value[4]);\n        cipher.login.username = this.getValueOrDefault(value[5]);\n        cipher.login.password = this.getValueOrDefault(value[6]);\n        cipher.notes = !this.isNullOrWhitespace(value[3]) ? value[3].split(\"\\\\n\").join(\"\\n\") : null;\n      } else if (value.length > 3) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        for (let i = 3; i < value.length; i++) {\n          if (!this.isNullOrWhitespace(value[i])) {\n            cipher.notes += value[i] + \"\\n\";\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(value[1]) && cipher.type !== CipherType.Login) {\n        cipher.name = value[1] + \": \" + cipher.name;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CipherType } from \"../vault/enums/cipher-type\";\nimport { CardView } from \"../vault/models/view/card.view\";\nimport { CipherView } from \"../vault/models/view/cipher.view\";\nimport { IdentityView } from \"../vault/models/view/identity.view\";\nimport { SecureNoteView } from \"../vault/models/view/secure-note.view\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst mappedBaseColumns = [\"nickname\", \"additionalInfo\"];\nconst _mappedUserAccountColumns = new Set(\n  mappedBaseColumns.concat([\"url\", \"username\", \"password\", \"twofaSecret\"])\n);\nconst _mappedCreditCardColumns = new Set(\n  mappedBaseColumns.concat([\"cardNumber\", \"cardName\", \"exp_month\", \"exp_year\", \"cvv\"])\n);\n\nconst _mappedIdentityColumns = new Set(\n  mappedBaseColumns.concat([\n    \"title\",\n    \"firstName\",\n    \"middleName\",\n    \"lastName\",\n    \"email\",\n    \"firstAddressLine\",\n    \"secondAddressLine\",\n    \"city\",\n    \"country\",\n    \"zipCode\",\n  ])\n);\n\nconst _mappedIdCardColumns = new Set(mappedBaseColumns.concat([\"idName\", \"idNumber\", \"idCountry\"]));\n\nconst _mappedTwoFaColumns = new Set(mappedBaseColumns.concat([\"authToken\"]));\n\nconst _mappedUserNoteColumns = new Set(mappedBaseColumns.concat([\"content\"]));\n\nexport class MykiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.nickname, \"--\");\n      cipher.notes = this.getValueOrDefault(value.additionalInfo);\n\n      if (value.url !== undefined) {\n        // Accounts\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.twofaSecret);\n\n        this.importUnmappedFields(cipher, value, _mappedUserAccountColumns);\n      } else if (value.authToken !== undefined) {\n        // TwoFA\n        cipher.login.totp = this.getValueOrDefault(value.authToken);\n\n        this.importUnmappedFields(cipher, value, _mappedTwoFaColumns);\n      } else if (value.cardNumber !== undefined) {\n        // Cards\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.expMonth = this.getValueOrDefault(value.exp_month);\n        cipher.card.expYear = this.getValueOrDefault(value.exp_year);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n\n        this.importUnmappedFields(cipher, value, _mappedCreditCardColumns);\n      } else if (value.firstName !== undefined) {\n        // Identities\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        cipher.identity.title = this.getValueOrDefault(value.title);\n        cipher.identity.firstName = this.getValueOrDefault(value.firstName);\n        cipher.identity.middleName = this.getValueOrDefault(value.middleName);\n        cipher.identity.lastName = this.getValueOrDefault(value.lastName);\n        cipher.identity.phone = this.getValueOrDefault(value.number);\n        cipher.identity.email = this.getValueOrDefault(value.email);\n        cipher.identity.address1 = this.getValueOrDefault(value.firstAddressLine);\n        cipher.identity.address2 = this.getValueOrDefault(value.secondAddressLine);\n        cipher.identity.city = this.getValueOrDefault(value.city);\n        cipher.identity.country = this.getValueOrDefault(value.country);\n        cipher.identity.postalCode = this.getValueOrDefault(value.zipCode);\n\n        this.importUnmappedFields(cipher, value, _mappedIdentityColumns);\n      } else if (value.idType !== undefined) {\n        // IdCards\n\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        this.processFullName(cipher, value.idName);\n        cipher.identity.country = this.getValueOrDefault(value.idCountry);\n\n        switch (value.idType) {\n          // case \"Driver's License\":\n          // case \"ID Card\":\n          // case \"Outdoor License\":\n          // case \"Software License\":\n          // case \"Tax Number\":\n          // case \"Bank Account\":\n          // case \"Insurance Card\":\n          // case \"Health Card\":\n          // case \"Membership\":\n          // case \"Database\":\n          // case \"Reward Program\":\n          // case \"Tour Visa\":\n          case \"Passport\":\n            cipher.identity.passportNumber = value.idNumber;\n            break;\n          case \"Social Security\":\n            cipher.identity.ssn = value.idNumber;\n            break;\n          default:\n            cipher.identity.licenseNumber = value.idNumber;\n            break;\n        }\n\n        this.importUnmappedFields(cipher, value, _mappedIdCardColumns);\n      } else if (value.content !== undefined) {\n        // Notes\n        cipher.secureNote = new SecureNoteView();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.notes = this.getValueOrDefault(value.content);\n\n        this.importUnmappedFields(cipher, value, _mappedUserNoteColumns);\n      } else {\n        return;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CipherType } from \"../vault/enums/cipher-type\";\nimport { CipherView } from \"../vault/models/view/cipher.view\";\nimport { LoginView } from \"../vault/models/view/login.view\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\ntype nodePassCsvParsed = {\n  name: string;\n  url: string;\n  username: string;\n  password: string;\n  note: string;\n  cardholdername: string;\n  cardnumber: string;\n  cvc: string;\n  expirydate: string;\n  zipcode: string;\n  folder: string;\n  full_name: string;\n  phone_number: string;\n  email: string;\n  address1: string;\n  address2: string;\n  city: string;\n  country: string;\n  state: string;\n};\n\nexport class NordPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: nodePassCsvParsed[] = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((record) => {\n      const recordType = this.evaluateType(record);\n      if (recordType === undefined) {\n        return;\n      }\n\n      if (!this.organization) {\n        this.processFolder(result, record.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.name = this.getValueOrDefault(record.name, \"--\");\n      cipher.notes = this.getValueOrDefault(record.note);\n\n      switch (recordType) {\n        case CipherType.Login:\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.username = this.getValueOrDefault(record.username);\n          cipher.login.password = this.getValueOrDefault(record.password);\n          cipher.login.uris = this.makeUriArray(record.url);\n          break;\n        case CipherType.Card:\n          cipher.type = CipherType.Card;\n          cipher.card.cardholderName = this.getValueOrDefault(record.cardholdername);\n          cipher.card.number = this.getValueOrDefault(record.cardnumber);\n          cipher.card.code = this.getValueOrDefault(record.cvc);\n          cipher.card.brand = this.getCardBrand(cipher.card.number);\n          this.setCardExpiration(cipher, record.expirydate);\n          break;\n\n        case CipherType.Identity:\n          cipher.type = CipherType.Identity;\n\n          this.processFullName(cipher, this.getValueOrDefault(record.full_name));\n          cipher.identity.address1 = this.getValueOrDefault(record.address1);\n          cipher.identity.address2 = this.getValueOrDefault(record.address2);\n          cipher.identity.city = this.getValueOrDefault(record.city);\n          cipher.identity.state = this.getValueOrDefault(record.state);\n          cipher.identity.postalCode = this.getValueOrDefault(record.zipcode);\n          cipher.identity.country = this.getValueOrDefault(record.country);\n          if (cipher.identity.country != null) {\n            cipher.identity.country = cipher.identity.country.toUpperCase();\n          }\n          cipher.identity.email = this.getValueOrDefault(record.email);\n          cipher.identity.phone = this.getValueOrDefault(record.phone_number);\n          break;\n        case CipherType.SecureNote:\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default:\n          break;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private evaluateType(record: nodePassCsvParsed): CipherType {\n    if (!this.isNullOrWhitespace(record.username)) {\n      return CipherType.Login;\n    }\n\n    if (!this.isNullOrWhitespace(record.cardnumber)) {\n      return CipherType.Card;\n    }\n\n    if (!this.isNullOrWhitespace(record.full_name)) {\n      return CipherType.Identity;\n    }\n\n    if (!this.isNullOrWhitespace(record.note)) {\n      return CipherType.SecureNote;\n    }\n\n    return undefined;\n  }\n}\n","export interface ExportData {\n  accounts?: AccountsEntity[] | null;\n}\nexport interface AccountsEntity {\n  attrs: AccountAttributes;\n  vaults?: VaultsEntity[] | null;\n}\nexport interface AccountAttributes {\n  accountName: string;\n  name: string;\n  avatar: string;\n  email: string;\n  uuid: string;\n  domain: string;\n}\nexport interface VaultsEntity {\n  attrs: VaultAttributes;\n  items?: Item[] | null;\n}\nexport interface VaultAttributes {\n  uuid: string;\n  desc: string;\n  avatar: string;\n  name: string;\n  type: string;\n}\n\nexport enum CategoryEnum {\n  Login = \"001\",\n  CreditCard = \"002\",\n  SecureNote = \"003\",\n  Identity = \"004\",\n  Password = \"005\",\n  Document = \"006\",\n  SoftwareLicense = \"100\",\n  BankAccount = \"101\",\n  Database = \"102\",\n  DriversLicense = \"103\",\n  OutdoorLicense = \"104\",\n  Membership = \"105\",\n  Passport = \"106\",\n  RewardsProgram = \"107\",\n  SocialSecurityNumber = \"108\",\n  WirelessRouter = \"109\",\n  Server = \"110\",\n  EmailAccount = \"111\",\n  API_Credential = \"112\",\n  MedicalRecord = \"113\",\n}\n\nexport interface Item {\n  uuid: string;\n  favIndex: number;\n  createdAt: number;\n  updatedAt: number;\n  trashed?: boolean;\n  categoryUuid: string;\n  details: Details;\n  overview: Overview;\n}\nexport interface Details {\n  loginFields?: (LoginFieldsEntity | null)[] | null;\n  notesPlain?: string | null;\n  sections?: (SectionsEntity | null)[] | null;\n  passwordHistory?: (PasswordHistoryEntity | null)[] | null;\n  documentAttributes?: DocumentAttributes | null;\n  password?: string | null;\n}\n\nexport enum LoginFieldTypeEnum {\n  TextOrHtml = \"T\",\n  EmailAddress = \"E\",\n  URL = \"U\",\n  Number = \"N\",\n  Password = \"P\",\n  TextArea = \"A\",\n  PhoneNumber = \"T\",\n  CheckBox = \"C\",\n}\nexport interface LoginFieldsEntity {\n  value: string;\n  id: string;\n  name: string;\n  fieldType: LoginFieldTypeEnum | string;\n  designation?: string | null;\n}\nexport interface SectionsEntity {\n  title: string;\n  name?: string | null;\n  fields?: FieldsEntity[] | null;\n}\nexport interface FieldsEntity {\n  title: string;\n  id: string;\n  value: Value;\n  indexAtSource: number;\n  guarded: boolean;\n  multiline: boolean;\n  dontGenerate: boolean;\n  placeholder?: string;\n  inputTraits: InputTraits;\n  clipboardFilter?: string | null;\n}\nexport interface Value {\n  totp?: string | null;\n  date?: number | null;\n  string?: string | null;\n  concealed?: string | null;\n  email?: Email | null;\n  phone?: string | null;\n  menu?: string | null;\n  gender?: string | null;\n  monthYear?: number | null;\n  url?: string | null;\n  address?: Address | null;\n  creditCardType?: string | null;\n  creditCardNumber?: string | null;\n  reference?: string | null;\n}\n\nexport interface Email {\n  email_address: string;\n  provider: string;\n}\n\nexport interface Address {\n  street: string;\n  city: string;\n  country: string;\n  zip: string;\n  state: string;\n}\nexport interface InputTraits {\n  keyboard: string;\n  correction: string;\n  capitalization: string;\n}\nexport interface PasswordHistoryEntity {\n  value: string;\n  time: number;\n}\nexport interface DocumentAttributes {\n  fileName: string;\n  documentId: string;\n  decryptedSize: number;\n}\nexport interface Overview {\n  subtitle: string;\n  title: string;\n  url: string;\n  urls?: UrlsEntity[] | null;\n  ps?: number | null;\n  pbe?: number | null;\n  pgrng?: boolean | null;\n  tags?: string[] | null;\n}\nexport interface UrlsEntity {\n  label: string;\n  url: string;\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { ImportResult } from \"../../models/domain/import-result\";\nimport { CipherType } from \"../../vault/enums/cipher-type\";\nimport { CardView } from \"../../vault/models/view/card.view\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\nimport { IdentityView } from \"../../vault/models/view/identity.view\";\nimport { PasswordHistoryView } from \"../../vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"../../vault/models/view/secure-note.view\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class OnePassword1PifImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    data.split(this.newLineRegex).forEach((line) => {\n      if (this.isNullOrWhitespace(line) || line[0] !== \"{\") {\n        return;\n      }\n      const item = JSON.parse(line);\n      if (item.trashed === true) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n\n      if (this.isNullOrWhitespace(item.hmac)) {\n        this.processStandardItem(item, cipher);\n      } else {\n        this.processWinOpVaultItem(item, cipher);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processWinOpVaultItem(item: any, cipher: CipherView) {\n    if (item.overview != null) {\n      cipher.name = this.getValueOrDefault(item.overview.title);\n      if (item.overview.URLs != null) {\n        const urls: string[] = [];\n        item.overview.URLs.forEach((url: any) => {\n          if (!this.isNullOrWhitespace(url.u)) {\n            urls.push(url.u);\n          }\n        });\n        cipher.login.uris = this.makeUriArray(urls);\n      }\n    }\n\n    if (item.details != null) {\n      if (item.details.passwordHistory != null) {\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n      }\n      if (\n        !this.isNullOrWhitespace(item.details.ccnum) ||\n        !this.isNullOrWhitespace(item.details.cvv)\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      } else if (\n        !this.isNullOrWhitespace(item.details.firstname) ||\n        !this.isNullOrWhitespace(item.details.address1)\n      ) {\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n      }\n      if (cipher.type === CipherType.Login && !this.isNullOrWhitespace(item.details.password)) {\n        cipher.login.password = item.details.password;\n      }\n      if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n        cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (item.details.fields != null) {\n        this.parseFields(item.details.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.details.sections != null) {\n        item.details.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private processStandardItem(item: any, cipher: CipherView) {\n    cipher.favorite = item.openContents && item.openContents.faveIndex ? true : false;\n    cipher.name = this.getValueOrDefault(item.title);\n\n    if (item.typeName === \"securenotes.SecureNote\") {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    } else if (item.typeName === \"wallet.financial.CreditCard\") {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    } else if (item.typeName === \"identities.Identity\") {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    } else {\n      cipher.login.uris = this.makeUriArray(item.location);\n    }\n\n    if (item.secureContents != null) {\n      if (item.secureContents.passwordHistory != null) {\n        this.parsePasswordHistory(item.secureContents.passwordHistory, cipher);\n      }\n      if (!this.isNullOrWhitespace(item.secureContents.notesPlain)) {\n        cipher.notes = item.secureContents.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (cipher.type === CipherType.Login) {\n        if (!this.isNullOrWhitespace(item.secureContents.password)) {\n          cipher.login.password = item.secureContents.password;\n        }\n        if (item.secureContents.URLs != null) {\n          const urls: string[] = [];\n          item.secureContents.URLs.forEach((u: any) => {\n            if (!this.isNullOrWhitespace(u.url)) {\n              urls.push(u.url);\n            }\n          });\n          if (urls.length > 0) {\n            cipher.login.uris = this.makeUriArray(urls);\n          }\n        }\n      }\n      if (item.secureContents.fields != null) {\n        this.parseFields(item.secureContents.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.secureContents.sections != null) {\n        item.secureContents.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private parsePasswordHistory(items: any[], cipher: CipherView) {\n    const maxSize = items.length > 5 ? 5 : items.length;\n    cipher.passwordHistory = items\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n\n  private parseFields(\n    fields: any[],\n    cipher: CipherView,\n    designationKey: string,\n    valueKey: string,\n    nameKey: string\n  ) {\n    fields.forEach((field: any) => {\n      if (field[valueKey] == null || field[valueKey].toString().trim() === \"\") {\n        return;\n      }\n\n      // TODO: when date FieldType exists, store this as a date field type instead of formatted Text if k is 'date'\n      const fieldValue =\n        field.k === \"date\"\n          ? new Date(field[valueKey] * 1000).toUTCString()\n          : field[valueKey].toString();\n      const fieldDesignation =\n        field[designationKey] != null ? field[designationKey].toString() : null;\n\n      if (cipher.type === CipherType.Login) {\n        if (this.isNullOrWhitespace(cipher.login.username) && fieldDesignation === \"username\") {\n          cipher.login.username = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.password) &&\n          fieldDesignation === \"password\"\n        ) {\n          cipher.login.password = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.totp) &&\n          fieldDesignation != null &&\n          fieldDesignation.startsWith(\"TOTP_\")\n        ) {\n          cipher.login.totp = fieldValue;\n          return;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.isNullOrWhitespace(cipher.card.number) && fieldDesignation === \"ccnum\") {\n          cipher.card.number = fieldValue;\n          cipher.card.brand = this.getCardBrand(fieldValue);\n          return;\n        } else if (this.isNullOrWhitespace(cipher.card.code) && fieldDesignation === \"cvv\") {\n          cipher.card.code = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.cardholderName) &&\n          fieldDesignation === \"cardholder\"\n        ) {\n          cipher.card.cardholderName = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.expiration) &&\n          fieldDesignation === \"expiry\" &&\n          fieldValue.length === 6\n        ) {\n          cipher.card.expMonth = (fieldValue as string).substr(4, 2);\n          if (cipher.card.expMonth[0] === \"0\") {\n            cipher.card.expMonth = cipher.card.expMonth.substr(1, 1);\n          }\n          cipher.card.expYear = (fieldValue as string).substr(0, 4);\n          return;\n        } else if (fieldDesignation === \"type\") {\n          // Skip since brand was determined from number above\n          return;\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        const identity = cipher.identity;\n        if (this.isNullOrWhitespace(identity.firstName) && fieldDesignation === \"firstname\") {\n          identity.firstName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.lastName) && fieldDesignation === \"lastname\") {\n          identity.lastName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.middleName) && fieldDesignation === \"initial\") {\n          identity.middleName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.phone) && fieldDesignation === \"defphone\") {\n          identity.phone = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.company) && fieldDesignation === \"company\") {\n          identity.company = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.email) && fieldDesignation === \"email\") {\n          identity.email = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.username) && fieldDesignation === \"username\") {\n          identity.username = fieldValue;\n          return;\n        } else if (fieldDesignation === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip } = field[valueKey];\n          identity.address1 = this.getValueOrDefault(street);\n          identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            identity.country = country.toUpperCase();\n          }\n          identity.postalCode = this.getValueOrDefault(zip);\n          return;\n        }\n      }\n\n      const fieldName = this.isNullOrWhitespace(field[nameKey]) ? \"no_name\" : field[nameKey];\n      if (\n        fieldName === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      const fieldType = field.k === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { ImportResult } from \"../../models/domain/import-result\";\nimport { CipherRepromptType } from \"../../vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"../../vault/enums/cipher-type\";\nimport { CardView } from \"../../vault/models/view/card.view\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\nimport { IdentityView } from \"../../vault/models/view/identity.view\";\nimport { LoginView } from \"../../vault/models/view/login.view\";\nimport { PasswordHistoryView } from \"../../vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"../../vault/models/view/secure-note.view\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CategoryEnum,\n  Details,\n  ExportData,\n  FieldsEntity,\n  Item,\n  LoginFieldTypeEnum,\n  Overview,\n  PasswordHistoryEntity,\n  SectionsEntity,\n  UrlsEntity,\n  Value,\n  VaultsEntity,\n} from \"./types/onepassword-1pux-importer-types\";\n\nexport class OnePassword1PuxImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const exportData: ExportData = JSON.parse(data);\n\n    const account = exportData.accounts[0];\n    // TODO Add handling of multiple vaults\n    // const personalVaults = account.vaults[0].filter((v) => v.attrs.type === VaultAttributeTypeEnum.Personal);\n    account.vaults.forEach((vault: VaultsEntity) => {\n      vault.items.forEach((item: Item) => {\n        if (item.trashed === true) {\n          return;\n        }\n\n        const cipher = this.initLoginCipher();\n\n        const category = item.categoryUuid as CategoryEnum;\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.Password:\n          case CategoryEnum.WirelessRouter:\n          case CategoryEnum.Server:\n          case CategoryEnum.API_Credential:\n            cipher.type = CipherType.Login;\n            cipher.login = new LoginView();\n            break;\n          case CategoryEnum.CreditCard:\n          case CategoryEnum.BankAccount:\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            break;\n          case CategoryEnum.SecureNote:\n          case CategoryEnum.SoftwareLicense:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.MedicalRecord:\n            // case CategoryEnum.Document:\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case CategoryEnum.Identity:\n          case CategoryEnum.DriversLicense:\n          case CategoryEnum.OutdoorLicense:\n          case CategoryEnum.Membership:\n          case CategoryEnum.Passport:\n          case CategoryEnum.RewardsProgram:\n          case CategoryEnum.SocialSecurityNumber:\n            cipher.type = CipherType.Identity;\n            cipher.identity = new IdentityView();\n            break;\n          default:\n            break;\n        }\n\n        cipher.favorite = item.favIndex === 1 ? true : false;\n\n        this.processOverview(item.overview, cipher);\n\n        this.processLoginFields(item, cipher);\n\n        this.processDetails(category, item.details, cipher);\n\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n\n        this.processSections(category, item.details.sections, cipher);\n\n        if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n          cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        this.result.ciphers.push(cipher);\n      });\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processOverview(overview: Overview, cipher: CipherView) {\n    if (overview == null) {\n      return;\n    }\n\n    cipher.name = this.getValueOrDefault(overview.title);\n\n    if (overview.urls != null) {\n      const urls: string[] = [];\n      overview.urls.forEach((url: UrlsEntity) => {\n        if (!this.isNullOrWhitespace(url.url)) {\n          urls.push(url.url);\n        }\n      });\n      cipher.login.uris = this.makeUriArray(urls);\n    }\n\n    if (overview.tags != null && overview.tags.length > 0) {\n      const folderName = this.capitalize(overview.tags[0]);\n      this.processFolder(this.result, folderName);\n    }\n  }\n\n  private capitalize(inputString: string): string {\n    return inputString.trim().replace(/\\w\\S*/g, (w) => w.replace(/^\\w/, (c) => c.toUpperCase()));\n  }\n\n  private processLoginFields(item: Item, cipher: CipherView) {\n    if (item.details == null) {\n      return;\n    }\n\n    if (item.details.loginFields == null || item.details.loginFields.length === 0) {\n      return;\n    }\n\n    item.details.loginFields.forEach((loginField) => {\n      if (loginField.designation === \"username\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.username = loginField.value;\n        return;\n      }\n\n      if (loginField.designation === \"password\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.password = loginField.value;\n        return;\n      }\n\n      let fieldValue = loginField.value;\n      let fieldType: FieldType = FieldType.Text;\n      switch (loginField.fieldType) {\n        case LoginFieldTypeEnum.Password:\n          fieldType = FieldType.Hidden;\n          break;\n        case LoginFieldTypeEnum.CheckBox:\n          fieldValue = loginField.value !== \"\" ? \"true\" : \"false\";\n          fieldType = FieldType.Boolean;\n          break;\n        default:\n          break;\n      }\n      this.processKvp(cipher, loginField.name, fieldValue, fieldType);\n    });\n  }\n\n  private processDetails(category: CategoryEnum, details: Details, cipher: CipherView) {\n    if (category !== CategoryEnum.Password) {\n      return;\n    }\n\n    if (details == null) {\n      return;\n    }\n    cipher.login.password = details.password;\n  }\n\n  private processSections(category: CategoryEnum, sections: SectionsEntity[], cipher: CipherView) {\n    if (sections == null || sections.length === 0) {\n      return;\n    }\n\n    sections.forEach((section: SectionsEntity) => {\n      if (section.fields == null) {\n        return;\n      }\n\n      this.parseSectionFields(category, section.fields, cipher);\n    });\n  }\n\n  private parseSectionFields(category: CategoryEnum, fields: FieldsEntity[], cipher: CipherView) {\n    fields.forEach((field: FieldsEntity) => {\n      const valueKey = Object.keys(field.value)[0];\n      const anyField = field as any;\n\n      if (\n        anyField.value == null ||\n        anyField.value[valueKey] == null ||\n        anyField.value[valueKey] === \"\"\n      ) {\n        return;\n      }\n\n      const fieldName = this.getFieldName(field.id, field.title);\n      const fieldValue = this.extractValue(field.value, valueKey);\n\n      if (cipher.type === CipherType.Login) {\n        if (this.fillLogin(field, fieldValue, cipher)) {\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.WirelessRouter:\n            break;\n\n          case CategoryEnum.Server:\n            if (this.isNullOrWhitespace(cipher.login.uri) && field.id === \"url\") {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              return;\n            }\n            break;\n\n          case CategoryEnum.API_Credential:\n            if (this.fillApiCredentials(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.fillCreditCard(field, fieldValue, cipher)) {\n          return;\n        }\n\n        if (category === CategoryEnum.BankAccount) {\n          if (this.fillBankAccount(field, fieldValue, cipher)) {\n            return;\n          }\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        if (this.fillIdentity(field, fieldValue, cipher, valueKey)) {\n          return;\n        }\n        if (valueKey === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip, state } = field.value.address;\n          cipher.identity.address1 = this.getValueOrDefault(street);\n          cipher.identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            cipher.identity.country = country.toUpperCase();\n          }\n          cipher.identity.postalCode = this.getValueOrDefault(zip);\n          cipher.identity.state = this.getValueOrDefault(state);\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Identity:\n            break;\n          case CategoryEnum.DriversLicense:\n            if (this.fillDriversLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.OutdoorLicense:\n            if (this.fillOutdoorLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Membership:\n            if (this.fillMembership(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Passport:\n            if (this.fillPassport(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.RewardsProgram:\n            if (this.fillRewardsProgram(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.SocialSecurityNumber:\n            if (this.fillSSN(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (valueKey === \"email\") {\n        // fieldValue is an object casted into a string, so access the plain value instead\n        const { email_address, provider } = field.value.email;\n        this.processKvp(cipher, fieldName, email_address, FieldType.Text);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return;\n      }\n\n      // Do not include a password field if it's already in the history\n      if (\n        field.title === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      // TODO ?? If one of the fields is marked as guarded, then activate Password-Reprompt for the entire item\n      if (field.guarded && cipher.reprompt === CipherRepromptType.None) {\n        cipher.reprompt = CipherRepromptType.Password;\n      }\n\n      const fieldType = valueKey === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n\n  private getFieldName(id: string, title: string): string {\n    if (this.isNullOrWhitespace(title)) {\n      return id;\n    }\n\n    // Naive approach of checking if the fields id is usable\n    if (id.length > 25 && RegExp(/[0-9]{2}[A-Z]{2}/, \"i\").test(id)) {\n      return title;\n    }\n    return id;\n  }\n\n  private extractValue(value: Value, valueKey: string): string {\n    if (valueKey === \"date\") {\n      return new Date(value.date * 1000).toUTCString();\n    }\n\n    if (valueKey === \"monthYear\") {\n      return value.monthYear.toString();\n    }\n\n    return (value as any)[valueKey];\n  }\n\n  private fillLogin(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.username) && fieldName === \"username\") {\n      cipher.login.username = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"password\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (\n      this.isNullOrWhitespace(cipher.login.totp) &&\n      field.id != null &&\n      field.id.startsWith(\"TOTP_\")\n    ) {\n      cipher.login.totp = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillApiCredentials(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"credential\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.uri) && fieldName === \"hostname\") {\n      cipher.login.uris = this.makeUriArray(fieldValue);\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillCreditCard(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.number) && field.id === \"ccnum\") {\n      cipher.card.number = fieldValue;\n      cipher.card.brand = this.getCardBrand(fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.code) && field.id === \"cvv\") {\n      cipher.card.code = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"cardholder\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.expiration) && field.id === \"expiry\") {\n      const monthYear: string = fieldValue.toString().trim();\n      cipher.card.expMonth = monthYear.substring(4, 6);\n      if (cipher.card.expMonth[0] === \"0\") {\n        cipher.card.expMonth = cipher.card.expMonth.substring(1, 2);\n      }\n      cipher.card.expYear = monthYear.substring(0, 4);\n      return true;\n    }\n\n    if (field.id === \"type\") {\n      // Skip since brand was determined from number above\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillBankAccount(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"owner\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillIdentity(\n    field: FieldsEntity,\n    fieldValue: string,\n    cipher: CipherView,\n    valueKey: string\n  ): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"firstname\") {\n      cipher.identity.firstName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.lastName) && field.id === \"lastname\") {\n      cipher.identity.lastName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.middleName) && field.id === \"initial\") {\n      cipher.identity.middleName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"defphone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.email)) {\n      if (valueKey === \"email\") {\n        const { email_address, provider } = field.value.email;\n        cipher.identity.email = this.getValueOrDefault(email_address);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return true;\n      }\n\n      if (field.id === \"email\") {\n        cipher.identity.email = fieldValue;\n        return true;\n      }\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.username) && field.id === \"username\") {\n      cipher.identity.username = fieldValue;\n      return true;\n    }\n    return false;\n  }\n\n  private fillDriversLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.address1) && field.id === \"address\") {\n      cipher.identity.address1 = fieldValue;\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.licenseNumber) && field.id === \"number\") {\n      cipher.identity.licenseNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillOutdoorLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillMembership(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"org_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"phone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillPassport(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO Iso\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"issuing_country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.passportNumber) && field.id === \"number\") {\n      cipher.identity.passportNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillRewardsProgram(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillSSN(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.ssn) && field.id === \"number\") {\n      cipher.identity.ssn = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private parsePasswordHistory(historyItems: PasswordHistoryEntity[], cipher: CipherView) {\n    if (historyItems == null || historyItems.length === 0) {\n      return;\n    }\n\n    const maxSize = historyItems.length > 5 ? 5 : historyItems.length;\n    cipher.passwordHistory = historyItems\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n}\n","import { CipherView } from \"../../vault/models/view/cipher.view\";\n\nexport class CipherImportContext {\n  lowerProperty: string;\n  constructor(public importRecord: any, public property: string, public cipher: CipherView) {\n    this.lowerProperty = property.toLowerCase();\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { ImportResult } from \"../../models/domain/import-result\";\nimport { CipherType } from \"../../vault/enums/cipher-type\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\n\nexport const IgnoredProperties = [\n  \"ainfo\",\n  \"autosubmit\",\n  \"notesplain\",\n  \"ps\",\n  \"scope\",\n  \"tags\",\n  \"title\",\n  \"uuid\",\n  \"notes\",\n];\n\nexport abstract class OnePasswordCsvImporter extends BaseImporter implements Importer {\n  protected loginPropertyParsers = [\n    this.setLoginUsername,\n    this.setLoginPassword,\n    this.setLoginUris,\n  ];\n  protected creditCardPropertyParsers = [\n    this.setCreditCardNumber,\n    this.setCreditCardVerification,\n    this.setCreditCardCardholderName,\n    this.setCreditCardExpiry,\n  ];\n  protected identityPropertyParsers = [\n    this.setIdentityFirstName,\n    this.setIdentityInitial,\n    this.setIdentityLastName,\n    this.setIdentityUserName,\n    this.setIdentityEmail,\n    this.setIdentityPhone,\n    this.setIdentityCompany,\n  ];\n\n  abstract setCipherType(value: any, cipher: CipherView): void;\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true, {\n      quoteChar: '\"',\n      escapeChar: \"\\\\\",\n    });\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(this.getProp(value, \"title\"))) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.getProp(value, \"title\"), \"--\");\n\n      this.setNotes(value, cipher);\n\n      this.setCipherType(value, cipher);\n\n      let altUsername: string = null;\n      for (const property in value) {\n        // eslint-disable-next-line\n        if (!value.hasOwnProperty(property) || this.isNullOrWhitespace(value[property])) {\n          continue;\n        }\n\n        const context = new CipherImportContext(value, property, cipher);\n        if (cipher.type === CipherType.Login && this.setKnownLoginValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Card && this.setKnownCreditCardValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Identity && this.setKnownIdentityValue(context)) {\n          continue;\n        }\n\n        altUsername = this.setUnknownValue(context, altUsername);\n      }\n\n      if (\n        cipher.type === CipherType.Login &&\n        !this.isNullOrWhitespace(altUsername) &&\n        this.isNullOrWhitespace(cipher.login.username) &&\n        altUsername.indexOf(\"://\") === -1\n      ) {\n        cipher.login.username = altUsername;\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  protected getProp(obj: any, name: string): any {\n    const lowerObj = Object.entries(obj).reduce((agg: any, entry: [string, any]) => {\n      agg[entry[0].toLowerCase()] = entry[1];\n      return agg;\n    }, {});\n    return lowerObj[name.toLowerCase()];\n  }\n\n  protected getPropByRegexp(obj: any, regexp: RegExp): any {\n    const matchingKeys = Object.keys(obj).reduce((agg: string[], key: string) => {\n      if (key.match(regexp)) {\n        agg.push(key);\n      }\n      return agg;\n    }, []);\n    if (matchingKeys.length === 0) {\n      return null;\n    } else {\n      return obj[matchingKeys[0]];\n    }\n  }\n\n  protected getPropIncluding(obj: any, name: string): any {\n    const includesMap = Object.keys(obj).reduce((agg: string[], entry: string) => {\n      if (entry.toLowerCase().includes(name.toLowerCase())) {\n        agg.push(entry);\n      }\n      return agg;\n    }, []);\n    if (includesMap.length === 0) {\n      return null;\n    } else {\n      return obj[includesMap[0]];\n    }\n  }\n\n  protected setNotes(importRecord: any, cipher: CipherView) {\n    cipher.notes =\n      this.getValueOrDefault(this.getProp(importRecord, \"notesPlain\"), \"\") +\n      \"\\n\" +\n      this.getValueOrDefault(this.getProp(importRecord, \"notes\"), \"\") +\n      \"\\n\";\n    cipher.notes.trim();\n  }\n\n  protected setKnownLoginValue(context: CipherImportContext): boolean {\n    return this.loginPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownCreditCardValue(context: CipherImportContext): boolean {\n    return this.creditCardPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownIdentityValue(context: CipherImportContext): boolean {\n    return this.identityPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setUnknownValue(context: CipherImportContext, altUsername: string): string {\n    if (\n      IgnoredProperties.indexOf(context.lowerProperty) === -1 &&\n      !context.lowerProperty.startsWith(\"section:\") &&\n      !context.lowerProperty.startsWith(\"section \")\n    ) {\n      if (altUsername == null && context.lowerProperty === \"email\") {\n        return context.importRecord[context.property];\n      } else if (\n        context.lowerProperty === \"created date\" ||\n        context.lowerProperty === \"modified date\"\n      ) {\n        const readableDate = new Date(\n          parseInt(context.importRecord[context.property], 10) * 1000\n        ).toUTCString();\n        this.processKvp(context.cipher, \"1Password \" + context.property, readableDate);\n        return null;\n      }\n      if (\n        context.lowerProperty.includes(\"password\") ||\n        context.lowerProperty.includes(\"key\") ||\n        context.lowerProperty.includes(\"secret\")\n      ) {\n        this.processKvp(\n          context.cipher,\n          context.property,\n          context.importRecord[context.property],\n          FieldType.Hidden\n        );\n      } else {\n        this.processKvp(context.cipher, context.property, context.importRecord[context.property]);\n      }\n    }\n    return null;\n  }\n\n  protected setIdentityFirstName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.firstName) &&\n      context.lowerProperty.includes(\"first name\")\n    ) {\n      context.cipher.identity.firstName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityInitial(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.middleName) &&\n      context.lowerProperty.includes(\"initial\")\n    ) {\n      context.cipher.identity.middleName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityLastName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.lastName) &&\n      context.lowerProperty.includes(\"last name\")\n    ) {\n      context.cipher.identity.lastName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityUserName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.username) &&\n      context.lowerProperty.includes(\"username\")\n    ) {\n      context.cipher.identity.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityCompany(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.company) &&\n      context.lowerProperty.includes(\"company\")\n    ) {\n      context.cipher.identity.company = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityPhone(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.phone) &&\n      context.lowerProperty.includes(\"default phone\")\n    ) {\n      context.cipher.identity.phone = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityEmail(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.email) &&\n      context.lowerProperty.includes(\"email\")\n    ) {\n      context.cipher.identity.email = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardNumber(context: CipherImportContext): boolean {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.number) &&\n      context.lowerProperty.includes(\"number\")\n    ) {\n      context.cipher.card.number = context.importRecord[context.property];\n      context.cipher.card.brand = this.getCardBrand(context.cipher.card.number);\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardVerification(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.code) &&\n      context.lowerProperty.includes(\"verification number\")\n    ) {\n      context.cipher.card.code = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardCardholderName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.cardholderName) &&\n      context.lowerProperty.includes(\"cardholder name\")\n    ) {\n      context.cipher.card.cardholderName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\") &&\n      context.importRecord[context.property].length === 7\n    ) {\n      context.cipher.card.expMonth = (context.importRecord[context.property] as string).substr(\n        0,\n        2\n      );\n      if (context.cipher.card.expMonth[0] === \"0\") {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = (context.importRecord[context.property] as string).substr(3, 4);\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginPassword(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.password) &&\n      context.lowerProperty === \"password\"\n    ) {\n      context.cipher.login.password = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUsername(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.username) &&\n      context.lowerProperty === \"username\"\n    ) {\n      context.cipher.login.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUris(context: CipherImportContext) {\n    if (\n      (context.cipher.login.uris == null || context.cipher.login.uris.length === 0) &&\n      context.lowerProperty === \"urls\"\n    ) {\n      const urls = context.importRecord[context.property].split(this.newLineRegex);\n      context.cipher.login.uris = this.makeUriArray(urls);\n      return true;\n    } else if (context.lowerProperty === \"url\") {\n      if (context.cipher.login.uris == null) {\n        context.cipher.login.uris = [];\n      }\n      context.cipher.login.uris.concat(this.makeUriArray(context.importRecord[context.property]));\n      return true;\n    }\n    return false;\n  }\n}\n","import { CipherType } from \"../../vault/enums/cipher-type\";\nimport { CardView } from \"../../vault/models/view/card.view\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\nimport { IdentityView } from \"../../vault/models/view/identity.view\";\nimport { Importer } from \"../importer\";\n\nimport { IgnoredProperties, OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordMacCsvImporter extends OnePasswordCsvImporter implements Importer {\n  setCipherType(value: any, cipher: CipherView) {\n    const onePassType = this.getValueOrDefault(this.getProp(value, \"type\"), \"Login\");\n    switch (onePassType) {\n      case \"Credit Card\":\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Identity\":\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Login\":\n      case \"Secure Note\":\n        IgnoredProperties.push(\"type\");\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { CipherType } from \"../../vault/enums/cipher-type\";\nimport { CardView } from \"../../vault/models/view/card.view\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\nimport { IdentityView } from \"../../vault/models/view/identity.view\";\nimport { LoginView } from \"../../vault/models/view/login.view\";\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\nimport { OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordWinCsvImporter extends OnePasswordCsvImporter implements Importer {\n  constructor() {\n    super();\n    this.identityPropertyParsers.push(this.setIdentityAddress);\n  }\n\n  setCipherType(value: any, cipher: CipherView) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: number/i)) &&\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: expiry date/i))\n    ) {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    }\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: first name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: initial/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: last name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /internet \\d+: email/i))\n    ) {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    }\n  }\n\n  setIdentityAddress(context: CipherImportContext) {\n    if (context.lowerProperty.match(/address \\d+: address/i)) {\n      this.processKvp(context.cipher, \"address\", context.importRecord[context.property]);\n      return true;\n    }\n    return false;\n  }\n\n  setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\")\n    ) {\n      const expSplit = (context.importRecord[context.property] as string).split(\"/\");\n      context.cipher.card.expMonth = expSplit[0];\n      if (context.cipher.card.expMonth[0] === \"0\" && context.cipher.card.expMonth.length === 2) {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = expSplit[2].length > 4 ? expSplit[2].substr(0, 4) : expSplit[2];\n      return true;\n    }\n    return false;\n  }\n}\n","import { CollectionView } from \"../admin-console/models/view/collection.view\";\nimport { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PadlockCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let headers: string[] = null;\n    results.forEach((value) => {\n      if (headers == null) {\n        headers = value.map((v: string) => v);\n        return;\n      }\n\n      if (value.length < 2 || value.length !== headers.length) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value[1])) {\n        if (this.organization) {\n          const tags = (value[1] as string).split(\",\");\n          tags.forEach((tag) => {\n            tag = tag.trim();\n            let addCollection = true;\n            let collectionIndex = result.collections.length;\n\n            for (let i = 0; i < result.collections.length; i++) {\n              if (result.collections[i].name === tag) {\n                addCollection = false;\n                collectionIndex = i;\n                break;\n              }\n            }\n\n            if (addCollection) {\n              const collection = new CollectionView();\n              collection.name = tag;\n              result.collections.push(collection);\n            }\n\n            result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n          });\n        } else {\n          const tags = (value[1] as string).split(\",\");\n          const tag = tags.length > 0 ? tags[0].trim() : null;\n          this.processFolder(result, tag);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      for (let i = 2; i < value.length; i++) {\n        const header = headers[i].trim().toLowerCase();\n        if (this.isNullOrWhitespace(value[i]) || this.isNullOrWhitespace(header)) {\n          continue;\n        }\n\n        if (this.usernameFieldNames.indexOf(header) > -1) {\n          cipher.login.username = value[i];\n        } else if (this.passwordFieldNames.indexOf(header) > -1) {\n          cipher.login.password = value[i];\n        } else if (this.uriFieldNames.indexOf(header) > -1) {\n          cipher.login.uris = this.makeUriArray(value[i]);\n        } else {\n          this.processKvp(cipher, headers[i], value[i]);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassKeepCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValue(\"category\", value));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValue(\"description\", value);\n      cipher.name = this.getValueOrDefault(this.getValue(\"title\", value), \"--\");\n      cipher.login.username = this.getValue(\"username\", value);\n      cipher.login.password = this.getValue(\"password\", value);\n      cipher.login.uris = this.makeUriArray(this.getValue(\"site\", value));\n      this.processKvp(cipher, \"Password 2\", this.getValue(\"password2\", value));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private getValue(key: string, value: any) {\n    return this.getValueOrDefault(value[key], this.getValueOrDefault(value[\" \" + key]));\n  }\n}\n","import { ImportResult } from \"../../models/domain/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { PasskyJsonExport } from \"./passky-json-types\";\n\nexport class PasskyJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const passkyExport: PasskyJsonExport = JSON.parse(data);\n    if (\n      passkyExport == null ||\n      passkyExport.passwords == null ||\n      passkyExport.passwords.length === 0\n    ) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (passkyExport.encrypted == true) {\n      result.success = false;\n      result.errorMessage = \"Unable to import an encrypted passky backup.\";\n      return Promise.resolve(result);\n    }\n\n    passkyExport.passwords.forEach((record) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = record.website;\n      cipher.login.username = record.username;\n      cipher.login.password = record.password;\n\n      cipher.login.uris = this.makeUriArray(record.website);\n      cipher.notes = record.message;\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassmanJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((credential: any) => {\n      if (credential.tags != null && credential.tags.length > 0) {\n        const folderName = credential.tags[0].text;\n        this.processFolder(result, folderName);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = credential.label;\n\n      cipher.login.username = this.getValueOrDefault(credential.username);\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.url);\n      cipher.notes += this.getValueOrDefault(credential.description, \"\");\n      if (credential.otp != null) {\n        cipher.login.totp = this.getValueOrDefault(credential.otp.secret);\n      }\n\n      if (credential.custom_fields != null) {\n        credential.custom_fields.forEach((customField: any) => {\n          switch (customField.field_type) {\n            case \"text\":\n            case \"password\":\n              this.processKvp(cipher, customField.label, customField.value);\n              break;\n          }\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CollectionView } from \"../admin-console/models/view/collection.view\";\nimport { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasspackCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const tagsJson = !this.isNullOrWhitespace(value.Tags) ? JSON.parse(value.Tags) : null;\n      const tags: string[] =\n        tagsJson != null && tagsJson.tags != null && tagsJson.tags.length > 0\n          ? tagsJson.tags\n              .map((tagJson: string) => {\n                try {\n                  const t = JSON.parse(tagJson);\n                  return this.getValueOrDefault(t.tag);\n                } catch {\n                  // Ignore error\n                }\n                return null;\n              })\n              .filter((t: string) => !this.isNullOrWhitespace(t))\n          : null;\n\n      if (this.organization && tags != null && tags.length > 0) {\n        tags.forEach((tag) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === tag) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = tag;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization && tags != null && tags.length > 0) {\n        this.processFolder(result, tags[0]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes, \"\");\n      cipher.notes += \"\\n\\n\" + this.getValueOrDefault(value[\"Shared Notes\"], \"\") + \"\\n\";\n      cipher.name = this.getValueOrDefault(value[\"Entry Name\"], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User ID\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n        value.__parsed_extra.forEach((extra: string) => {\n          if (!this.isNullOrWhitespace(extra)) {\n            cipher.notes += \"\\n\" + extra;\n          }\n        });\n      }\n\n      const fieldsJson = !this.isNullOrWhitespace(value[\"Extra Fields\"])\n        ? JSON.parse(value[\"Extra Fields\"])\n        : null;\n      const fields =\n        fieldsJson != null && fieldsJson.extraFields != null && fieldsJson.extraFields.length > 0\n          ? fieldsJson.extraFields.map((fieldJson: string) => {\n              try {\n                return JSON.parse(fieldJson);\n              } catch {\n                // Ignore error\n              }\n              return null;\n            })\n          : null;\n      if (fields != null) {\n        fields.forEach((f: any) => {\n          if (f != null) {\n            this.processKvp(cipher, f.name, f.data);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordAgentCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let newVersion = true;\n    results.forEach((value) => {\n      if (value.length !== 5 && value.length < 9) {\n        return;\n      }\n      const altFormat = value.length === 10 && value[0] === \"0\";\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[altFormat ? 1 : 0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[altFormat ? 2 : 1]);\n      cipher.login.password = this.getValueOrDefault(value[altFormat ? 3 : 2]);\n      if (value.length === 5) {\n        newVersion = false;\n        cipher.notes = this.getValueOrDefault(value[4]);\n        cipher.login.uris = this.makeUriArray(value[3]);\n      } else {\n        const folder = this.getValueOrDefault(value[altFormat ? 9 : 8], \"(None)\");\n        let folderName = folder !== \"(None)\" ? folder.split(\"\\\\\").join(\"/\") : null;\n        if (folderName != null) {\n          folderName = folder.split(\" > \").join(\"/\");\n          folderName = folder.split(\">\").join(\"/\");\n        }\n        this.processFolder(result, folderName);\n        cipher.notes = this.getValueOrDefault(value[altFormat ? 5 : 3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (newVersion && this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\nimport { CipherType } from \"../vault/enums/cipher-type\";\nimport { CardView } from \"../vault/models/view/card.view\";\nimport { FolderView } from \"../vault/models/view/folder.view\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordBossJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.items == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    results.folders.forEach((value: any) => {\n      foldersMap.set(value.id, value.name);\n    });\n    const foldersIndexMap = new Map<string, number>();\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((value: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.login.uris = this.makeUriArray(value.login_url);\n\n      if (value.folder != null && foldersIndexMap.has(value.folder)) {\n        result.folderRelationships.push([result.ciphers.length, foldersIndexMap.get(value.folder)]);\n      }\n\n      if (value.identifiers == null) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value.identifiers.notes)) {\n        cipher.notes = value.identifiers.notes.split(\"\\\\r\\\\n\").join(\"\\n\").split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (value.type === \"CreditCard\") {\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n      }\n\n      for (const property in value.identifiers) {\n        // eslint-disable-next-line\n        if (!value.identifiers.hasOwnProperty(property)) {\n          continue;\n        }\n        const valObj = value.identifiers[property];\n        const val = valObj != null ? valObj.toString() : null;\n        if (\n          this.isNullOrWhitespace(val) ||\n          property === \"notes\" ||\n          property === \"ignoreItemInSecurityScore\"\n        ) {\n          continue;\n        }\n\n        if (property === \"custom_fields\") {\n          valObj.forEach((cf: any) => {\n            this.processKvp(cipher, cf.name, cf.value);\n          });\n          continue;\n        }\n\n        if (cipher.type === CipherType.Card) {\n          if (property === \"cardNumber\") {\n            cipher.card.number = val;\n            cipher.card.brand = this.getCardBrand(val);\n            continue;\n          } else if (property === \"nameOnCard\") {\n            cipher.card.cardholderName = val;\n            continue;\n          } else if (property === \"security_code\") {\n            cipher.card.code = val;\n            continue;\n          } else if (property === \"expires\") {\n            try {\n              const expDate = new Date(val);\n              cipher.card.expYear = expDate.getFullYear().toString();\n              cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n            } catch {\n              // Ignore error\n            }\n            continue;\n          } else if (property === \"cardType\") {\n            continue;\n          }\n        } else {\n          if (\n            (property === \"username\" || property === \"email\") &&\n            this.isNullOrWhitespace(cipher.login.username)\n          ) {\n            cipher.login.username = val;\n            continue;\n          } else if (property === \"password\") {\n            cipher.login.password = val;\n            continue;\n          } else if (property === \"totp\") {\n            cipher.login.totp = val;\n            continue;\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(property) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n            continue;\n          }\n        }\n\n        this.processKvp(cipher, property, val);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordDragonXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const records = doc.querySelectorAll(\"PasswordManager > record\");\n    Array.from(records).forEach((record) => {\n      const category = this.querySelectorDirectChild(record, \"Category\");\n      const categoryText =\n        category != null &&\n        !this.isNullOrWhitespace(category.textContent) &&\n        category.textContent !== \"Unfiled\"\n          ? category.textContent\n          : null;\n      this.processFolder(result, categoryText);\n\n      const accountName = this.querySelectorDirectChild(record, \"Account-Name\");\n      const userId = this.querySelectorDirectChild(record, \"User-Id\");\n      const password = this.querySelectorDirectChild(record, \"Password\");\n      const url = this.querySelectorDirectChild(record, \"URL\");\n      const notes = this.querySelectorDirectChild(record, \"Notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name =\n        accountName != null ? this.getValueOrDefault(accountName.textContent, \"--\") : \"--\";\n      cipher.notes = notes != null ? this.getValueOrDefault(notes.textContent) : \"\";\n      cipher.login.username = userId != null ? this.getValueOrDefault(userId.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      const attributes: string[] = [];\n      for (let i = 1; i <= 10; i++) {\n        attributes.push(\"Attribute-\" + i);\n      }\n\n      this.querySelectorAllDirectChild(record, attributes.join(\",\")).forEach((attr) => {\n        if (this.isNullOrWhitespace(attr.textContent) || attr.textContent === \"null\") {\n          return;\n        }\n        this.processKvp(cipher, attr.tagName, attr.textContent);\n      });\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordSafeXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const passwordSafe = doc.querySelector(\"passwordsafe\");\n    if (passwordSafe == null) {\n      result.errorMessage = \"Missing `passwordsafe` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const notesDelimiter = passwordSafe.getAttribute(\"delimiter\");\n    const entries = doc.querySelectorAll(\"passwordsafe > entry\");\n    Array.from(entries).forEach((entry) => {\n      const group = this.querySelectorDirectChild(entry, \"group\");\n      const groupText =\n        group != null && !this.isNullOrWhitespace(group.textContent)\n          ? group.textContent.split(\".\").join(\"/\")\n          : null;\n      this.processFolder(result, groupText);\n\n      const title = this.querySelectorDirectChild(entry, \"title\");\n      const username = this.querySelectorDirectChild(entry, \"username\");\n      const email = this.querySelectorDirectChild(entry, \"email\");\n      const password = this.querySelectorDirectChild(entry, \"password\");\n      const url = this.querySelectorDirectChild(entry, \"url\");\n      const notes = this.querySelectorDirectChild(entry, \"notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name = title != null ? this.getValueOrDefault(title.textContent, \"--\") : \"--\";\n      cipher.notes =\n        notes != null\n          ? this.getValueOrDefault(notes.textContent, \"\").split(notesDelimiter).join(\"\\n\")\n          : null;\n      cipher.login.username =\n        username != null ? this.getValueOrDefault(username.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      if (this.isNullOrWhitespace(cipher.login.username) && email != null) {\n        cipher.login.username = this.getValueOrDefault(email.textContent);\n      } else if (email != null && !this.isNullOrWhitespace(email.textContent)) {\n        cipher.notes = this.isNullOrWhitespace(cipher.notes)\n          ? \"Email: \" + email.textContent\n          : cipher.notes + \"\\n\" + \"Email: \" + email.textContent;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordWalletTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 1) {\n        return;\n      }\n      if (value.length > 5) {\n        this.processFolder(result, value[5]);\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      if (value.length > 4) {\n        cipher.notes = this.getValueOrDefault(value[4], \"\").split(\"¬\").join(\"\\n\");\n      }\n      if (value.length > 2) {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n      }\n      if (value.length > 3) {\n        cipher.login.password = this.getValueOrDefault(value[3]);\n      }\n      if (value.length > 1) {\n        cipher.login.uris = this.makeUriArray(value[1]);\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType } from \"../../enums/fieldType\";\nimport { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { ImportResult } from \"../../models/domain/import-result\";\nimport { CipherType } from \"../../vault/enums/cipher-type\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\nimport { SecureNoteView } from \"../../vault/models/view/secure-note.view\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  AppPasswordEntry,\n  BookmarkEntry,\n  EnvironmentVariablesEntry,\n  FoldersEntity,\n  GPGEntry,\n  NotesEntry,\n  PsonoItemTypes,\n  PsonoJsonExport,\n  TOTPEntry,\n  WebsitePasswordEntry,\n} from \"./psono-json-types\";\n\nexport class PsonoJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const psonoExport: PsonoJsonExport = JSON.parse(data);\n    if (psonoExport == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    this.parseFolders(result, psonoExport.folders);\n    this.handleItemParsing(result, psonoExport.items);\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFolders(result: ImportResult, folders: FoldersEntity[]) {\n    if (folders == null || folders.length === 0) {\n      return;\n    }\n\n    folders.forEach((folder) => {\n      if (folder.items == null || folder.items.length == 0) {\n        return;\n      }\n\n      this.processFolder(result, folder.name);\n\n      this.handleItemParsing(result, folder.items);\n    });\n  }\n\n  private handleItemParsing(result: ImportResult, items?: PsonoItemTypes[]) {\n    if (items == null || items.length === 0) {\n      return;\n    }\n\n    items.forEach((record) => {\n      const cipher = this.parsePsonoItem(record);\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n  }\n\n  private parsePsonoItem(item: PsonoItemTypes): CipherView {\n    const cipher = this.initLoginCipher();\n\n    switch (item.type) {\n      case \"website_password\":\n        this.parseWebsiteLogins(item, cipher);\n        break;\n      case \"application_password\":\n        this.parseApplicationPasswords(item, cipher);\n        break;\n      case \"environment_variables\":\n        this.parseEnvironmentVariables(item, cipher);\n        break;\n      case \"totp\":\n        this.parseTOTP(item, cipher);\n        break;\n      case \"bookmark\":\n        this.parseBookmarks(item, cipher);\n        break;\n      // Skipping this until we can save GPG into notes/custom fields\n      // case \"mail_gpg_own_key\":\n      //   this.parseGPG(item, cipher);\n      //   break;\n      case \"note\":\n        this.parseNotes(item, cipher);\n        break;\n      default:\n        break;\n    }\n\n    return cipher;\n  }\n\n  readonly WEBSITE_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"website_password_title\",\n    \"website_password_notes\",\n    \"website_password_username\",\n    \"website_password_password\",\n    \"website_password_url\",\n    \"autosubmit\",\n    \"website_password_auto_submit\",\n    \"urlfilter\",\n    \"website_password_url_filter\",\n  ]);\n  private parseWebsiteLogins(entry: WebsitePasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"website_password\") {\n      return;\n    }\n\n    cipher.name = entry.website_password_title;\n    cipher.notes = entry.website_password_notes;\n\n    cipher.login.username = entry.website_password_username;\n    cipher.login.password = entry.website_password_password;\n\n    cipher.login.uris = this.makeUriArray(entry.website_password_url);\n\n    this.processKvp(\n      cipher,\n      \"website_password_auto_submit\",\n      entry.website_password_auto_submit.toString(),\n      FieldType.Boolean\n    );\n\n    this.processKvp(cipher, \"website_password_url_filter\", entry.website_password_url_filter);\n\n    this.importUnmappedFields(cipher, entry, this.WEBSITE_mappedValues);\n  }\n\n  readonly APP_PWD_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"application_password_title\",\n    \"application_password_notes\",\n    \"application_password_username\",\n    \"application_password_password\",\n  ]);\n  private parseApplicationPasswords(entry: AppPasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"application_password\") {\n      return;\n    }\n\n    cipher.name = entry.application_password_title;\n    cipher.notes = entry.application_password_notes;\n\n    cipher.login.username = entry.application_password_username;\n    cipher.login.password = entry.application_password_password;\n\n    this.importUnmappedFields(cipher, entry, this.APP_PWD_mappedValues);\n  }\n\n  readonly BOOKMARK_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"bookmark_title\",\n    \"bookmark_notes\",\n    \"bookmark_url\",\n  ]);\n  private parseBookmarks(entry: BookmarkEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"bookmark\") {\n      return;\n    }\n\n    cipher.name = entry.bookmark_title;\n    cipher.notes = entry.bookmark_notes;\n\n    cipher.login.uris = this.makeUriArray(entry.bookmark_url);\n\n    this.importUnmappedFields(cipher, entry, this.BOOKMARK_mappedValues);\n  }\n\n  readonly NOTES_mappedValues = new Set([\"type\", \"name\", \"note_title\", \"note_notes\"]);\n  private parseNotes(entry: NotesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"note\") {\n      return;\n    }\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.note_title;\n    cipher.notes = entry.note_notes;\n\n    this.importUnmappedFields(cipher, entry, this.NOTES_mappedValues);\n  }\n\n  readonly TOTP_mappedValues = new Set([\"type\", \"name\", \"totp_title\", \"totp_notes\", \"totp_code\"]);\n  private parseTOTP(entry: TOTPEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"totp\") {\n      return;\n    }\n\n    cipher.name = entry.totp_title;\n    cipher.notes = entry.totp_notes;\n\n    cipher.login.totp = entry.totp_code;\n\n    this.importUnmappedFields(cipher, entry, this.TOTP_mappedValues);\n  }\n\n  readonly ENV_VARIABLES_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"environment_variables_title\",\n    \"environment_variables_notes\",\n    \"environment_variables_variables\",\n  ]);\n  private parseEnvironmentVariables(entry: EnvironmentVariablesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"environment_variables\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.environment_variables_title;\n    cipher.notes = entry.environment_variables_notes;\n\n    entry.environment_variables_variables.forEach((KvPair) => {\n      this.processKvp(cipher, KvPair.key, KvPair.value);\n    });\n\n    this.importUnmappedFields(cipher, entry, this.ENV_VARIABLES_mappedValues);\n  }\n\n  readonly GPG_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"mail_gpg_own_key_title\",\n    \"mail_gpg_own_key_public\",\n    \"mail_gpg_own_key_name\",\n    \"mail_gpg_own_key_email\",\n    \"mail_gpg_own_key_private\",\n  ]);\n  private parseGPG(entry: GPGEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"mail_gpg_own_key\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.mail_gpg_own_key_title;\n    cipher.notes = entry.mail_gpg_own_key_public;\n\n    this.processKvp(cipher, \"mail_gpg_own_key_name\", entry.mail_gpg_own_key_name);\n    this.processKvp(cipher, \"mail_gpg_own_key_email\", entry.mail_gpg_own_key_email);\n    this.processKvp(\n      cipher,\n      \"mail_gpg_own_key_private\",\n      entry.mail_gpg_own_key_private,\n      FieldType.Hidden\n    );\n\n    this.importUnmappedFields(cipher, entry, this.GPG_mappedValues);\n  }\n\n  private importUnmappedFields(\n    cipher: CipherView,\n    entry: PsonoItemTypes,\n    mappedValues: Set<string>\n  ) {\n    const unmappedFields = Object.keys(entry).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = entry as any;\n      this.processKvp(cipher, key, item[key].toString());\n    });\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\nimport { CipherType } from \"../vault/enums/cipher-type\";\nimport { CardView } from \"../vault/models/view/card.view\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RememBearCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.trash === \"true\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.notes);\n      if (value.type === \"LoginItem\") {\n        cipher.login.uris = this.makeUriArray(value.website);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      } else if (value.type === \"CreditCardItem\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.verification);\n\n        try {\n          const expMonth = this.getValueOrDefault(value.expiryMonth);\n          if (expMonth != null) {\n            const expMonthNumber = parseInt(expMonth, null);\n            if (expMonthNumber != null && expMonthNumber >= 1 && expMonthNumber <= 12) {\n              cipher.card.expMonth = expMonthNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n        try {\n          const expYear = this.getValueOrDefault(value.expiryYear);\n          if (expYear != null) {\n            const expYearNumber = parseInt(expYear, null);\n            if (expYearNumber != null) {\n              cipher.card.expYear = expYearNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n\n        const pin = this.getValueOrDefault(value.pin);\n        if (pin != null) {\n          this.processKvp(cipher, \"PIN\", pin);\n        }\n        const zip = this.getValueOrDefault(value.zipCode);\n        if (zip != null) {\n          this.processKvp(cipher, \"Zip Code\", zip);\n        }\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RoboFormCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let i = 1;\n    results.forEach((value) => {\n      const folder =\n        !this.isNullOrWhitespace(value.Folder) && value.Folder.startsWith(\"/\")\n          ? value.Folder.replace(\"/\", \"\")\n          : value.Folder;\n      const folderName = !this.isNullOrWhitespace(folder) ? folder : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Login);\n      cipher.login.password = this.getValueOrDefault(value.Pwd);\n      cipher.login.uris = this.makeUriArray(value.Url);\n\n      if (!this.isNullOrWhitespace(value.Rf_fields)) {\n        let fields: string[] = [value.Rf_fields];\n        if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n          fields = fields.concat(value.__parsed_extra);\n        }\n        fields.forEach((field: string) => {\n          const parts = field.split(\":\");\n          if (parts.length < 3) {\n            return;\n          }\n          const key = parts[0] === \"-no-name-\" ? null : parts[0];\n          const val = parts.length === 4 && parts[2] === \"rck\" ? parts[1] : parts[2];\n          this.processKvp(cipher, key, val);\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n\n      if (\n        i === results.length &&\n        cipher.name === \"--\" &&\n        this.isNullOrWhitespace(cipher.login.password)\n      ) {\n        return;\n      }\n\n      result.ciphers.push(cipher);\n      i++;\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafariCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url ?? value.URL);\n      cipher.login.totp = this.getValueOrDefault(value.OTPAuth);\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType } from \"../enums/fieldType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CipherType } from \"../vault/enums/cipher-type\";\nimport { CipherView } from \"../vault/models/view/cipher.view\";\nimport { FieldView } from \"../vault/models/view/field.view\";\nimport { FolderView } from \"../vault/models/view/folder.view\";\nimport { SecureNoteView } from \"../vault/models/view/secure-note.view\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafeInCloudXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const db = doc.querySelector(\"database\");\n    if (db == null) {\n      result.errorMessage = \"Missing `database` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, number>();\n\n    Array.from(doc.querySelectorAll(\"database > label\")).forEach((labelEl) => {\n      const name = labelEl.getAttribute(\"name\");\n      const id = labelEl.getAttribute(\"id\");\n      if (!this.isNullOrWhitespace(name) && !this.isNullOrWhitespace(id)) {\n        foldersMap.set(id, result.folders.length);\n        const folder = new FolderView();\n        folder.name = name;\n        result.folders.push(folder);\n      }\n    });\n\n    Array.from(doc.querySelectorAll(\"database > card\")).forEach((cardEl) => {\n      if (cardEl.getAttribute(\"template\") === \"true\" || cardEl.getAttribute(\"deleted\") === \"true\") {\n        return;\n      }\n\n      const labelIdEl = this.querySelectorDirectChild(cardEl, \"label_id\");\n      if (labelIdEl != null) {\n        const labelId = labelIdEl.textContent;\n        if (!this.isNullOrWhitespace(labelId) && foldersMap.has(labelId)) {\n          result.folderRelationships.push([result.ciphers.length, foldersMap.get(labelId)]);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(cardEl.getAttribute(\"title\"), \"--\");\n\n      if (cardEl.getAttribute(\"star\") === \"true\") {\n        cipher.favorite = true;\n      }\n\n      const cardType = cardEl.getAttribute(\"type\");\n      if (cardType === \"note\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      } else {\n        Array.from(this.querySelectorAllDirectChild(cardEl, \"field\")).forEach((fieldEl) => {\n          const text = fieldEl.textContent;\n          if (this.isNullOrWhitespace(text)) {\n            return;\n          }\n          const name = fieldEl.getAttribute(\"name\");\n          const fieldType = this.getValueOrDefault(fieldEl.getAttribute(\"type\"), \"\").toLowerCase();\n          if (fieldType === \"login\") {\n            cipher.login.username = text;\n          } else if (fieldType === \"password\" || fieldType === \"secret\") {\n            // safeInCloud allows for more than one password. we just insert them here and find the one used as password later\n            this.processKvp(cipher, name, text, FieldType.Hidden);\n          } else if (fieldType === \"one_time_password\") {\n            cipher.login.totp = text;\n          } else if (fieldType === \"notes\") {\n            cipher.notes += text + \"\\n\";\n          } else if (fieldType === \"weblogin\" || fieldType === \"website\") {\n            cipher.login.uris = this.makeUriArray(text);\n          } else {\n            this.processKvp(cipher, name, text);\n          }\n        });\n      }\n\n      Array.from(this.querySelectorAllDirectChild(cardEl, \"notes\")).forEach((notesEl) => {\n        cipher.notes += notesEl.textContent + \"\\n\";\n      });\n\n      this.setPassword(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  // Choose a password from all passwords. Take one that has password in its name, or the first one if there is no such entry\n  // if its name is password, we can safely remove it form the fields. otherwise, it would maybe be best to keep it as a hidden field\n  setPassword(cipher: CipherView) {\n    const candidates = cipher.fields.filter((field) => field.type === FieldType.Hidden);\n    if (!candidates.length) {\n      return;\n    }\n\n    let choice: FieldView;\n    for (const field of candidates) {\n      if (this.passwordFieldNames.includes(field.name.toLowerCase())) {\n        choice = field;\n        cipher.fields = cipher.fields.filter((f) => f !== choice);\n        break;\n      }\n    }\n\n    if (!choice) {\n      choice = candidates[0];\n    }\n\n    cipher.login.password = choice.value;\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SaferPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.nameFromUrl(value.url), \"--\");\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SecureSafeCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title);\n      cipher.notes = this.getValueOrDefault(value.Comment);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\nimport { CipherView } from \"../vault/models/view/cipher.view\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SplashIdCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      this.processFolder(result, this.getValueOrDefault(value[value.length - 1]));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 2], \"\");\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n\n      if (value[0] === \"Web Logins\" || value[0] === \"Servers\" || value[0] === \"Email Accounts\") {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n        cipher.login.password = this.getValueOrDefault(value[3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n        this.parseFieldsToNotes(cipher, 5, value);\n      } else {\n        this.parseFieldsToNotes(cipher, 2, value);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFieldsToNotes(cipher: CipherView, startIndex: number, value: any) {\n    // last 3 rows do not get parsed\n    for (let i = startIndex; i < value.length - 3; i++) {\n      if (this.isNullOrWhitespace(value[i])) {\n        continue;\n      }\n      cipher.notes += value[i] + \"\\n\";\n    }\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class StickyPasswordXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const loginNodes = doc.querySelectorAll(\"root > Database > Logins > Login\");\n    Array.from(loginNodes).forEach((loginNode) => {\n      const accountId = loginNode.getAttribute(\"ID\");\n      if (this.isNullOrWhitespace(accountId)) {\n        return;\n      }\n\n      const usernameText = loginNode.getAttribute(\"Name\");\n      const passwordText = loginNode.getAttribute(\"Password\");\n      let titleText: string = null;\n      let linkText: string = null;\n      let notesText: string = null;\n      let groupId: string = null;\n      let groupText: string = null;\n\n      const accountLogin = doc.querySelector(\n        \"root > Database > Accounts > Account > \" +\n          'LoginLinks > Login[SourceLoginID=\"' +\n          accountId +\n          '\"]'\n      );\n      if (accountLogin != null) {\n        const account = accountLogin.parentElement.parentElement;\n        if (account != null) {\n          titleText = account.getAttribute(\"Name\");\n          linkText = account.getAttribute(\"Link\");\n          groupId = account.getAttribute(\"ParentID\");\n          notesText = account.getAttribute(\"Comments\");\n          if (!this.isNullOrWhitespace(notesText)) {\n            notesText = notesText.split(\"/n\").join(\"\\n\");\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(groupId)) {\n        groupText = this.buildGroupText(doc, groupId, \"\");\n        this.processFolder(result, groupText);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(titleText, \"--\");\n      cipher.notes = this.getValueOrDefault(notesText);\n      cipher.login.username = this.getValueOrDefault(usernameText);\n      cipher.login.password = this.getValueOrDefault(passwordText);\n      cipher.login.uris = this.makeUriArray(linkText);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  buildGroupText(doc: Document, groupId: string, groupText: string): string {\n    const group = doc.querySelector('root > Database > Groups > Group[ID=\"' + groupId + '\"]');\n    if (group == null) {\n      return groupText;\n    }\n    if (!this.isNullOrWhitespace(groupText)) {\n      groupText = \"/\" + groupText;\n    }\n    groupText = group.getAttribute(\"Name\") + groupText;\n    return this.buildGroupText(doc, group.getAttribute(\"ParentID\"), groupText);\n  }\n}\n","import { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CipherType } from \"../vault/enums/cipher-type\";\nimport { CardView } from \"../vault/models/view/card.view\";\nimport { SecureNoteView } from \"../vault/models/view/secure-note.view\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst PropertiesToIgnore = [\n  \"kind\",\n  \"autologin\",\n  \"favorite\",\n  \"hexcolor\",\n  \"protectedwithpassword\",\n  \"subdomainonly\",\n  \"type\",\n  \"tk_export_version\",\n  \"note\",\n  \"title\",\n  \"document_content\",\n];\n\nexport class TrueKeyCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.favorite, \"\").toLowerCase() === \"true\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.notes = this.getValueOrDefault(value.memo, \"\");\n      cipher.login.username = this.getValueOrDefault(value.login);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n\n      if (value.kind !== \"login\") {\n        cipher.name = this.getValueOrDefault(value.title, \"--\");\n        cipher.notes = this.getValueOrDefault(value.note, \"\");\n      }\n\n      if (value.kind === \"cc\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        if (!this.isNullOrWhitespace(value.expiryDate)) {\n          try {\n            const expDate = new Date(value.expiryDate);\n            cipher.card.expYear = expDate.getFullYear().toString();\n            cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n          } catch {\n            // Ignore error\n          }\n        }\n      } else if (value.kind !== \"login\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = this.getValueOrDefault(value.document_content, \"\");\n        }\n        for (const property in value) {\n          if (\n            value.hasOwnProperty(property) && // eslint-disable-line\n            PropertiesToIgnore.indexOf(property.toLowerCase()) < 0 &&\n            !this.isNullOrWhitespace(value[property])\n          ) {\n            this.processKvp(cipher, property, value[property]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class UpmCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length !== 5) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.notes = this.getValueOrDefault(value[4]);\n      cipher.login.username = this.getValueOrDefault(value[1]);\n      cipher.login.password = this.getValueOrDefault(value[2]);\n      cipher.login.uris = this.makeUriArray(value[3]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class YotiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User name\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\nimport { CipherView } from \"../vault/models/view/cipher.view\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ZohoVaultCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (\n        this.isNullOrWhitespace(value[\"Password Name\"]) &&\n        this.isNullOrWhitespace(value[\"Secret Name\"])\n      ) {\n        return;\n      }\n      this.processFolder(result, this.getValueOrDefault(value.ChamberName));\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite, \"0\") === \"1\";\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(\n        value[\"Password Name\"],\n        this.getValueOrDefault(value[\"Secret Name\"], \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(\n        this.getValueOrDefault(value[\"Password URL\"], this.getValueOrDefault(value[\"Secret URL\"]))\n      );\n      this.parseData(cipher, value.SecretData);\n      this.parseData(cipher, value.CustomData);\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseData(cipher: CipherView, data: string) {\n    if (this.isNullOrWhitespace(data)) {\n      return;\n    }\n    const dataLines = this.splitNewLine(data);\n    dataLines.forEach((line) => {\n      const delimPosition = line.indexOf(\":\");\n      if (delimPosition < 0) {\n        return;\n      }\n      const field = line.substring(0, delimPosition);\n      const value = line.length > delimPosition ? line.substring(delimPosition + 1) : null;\n      if (\n        this.isNullOrWhitespace(field) ||\n        this.isNullOrWhitespace(value) ||\n        field === \"SecretType\"\n      ) {\n        return;\n      }\n      const fieldLower = field.toLowerCase();\n      if (cipher.login.username == null && this.usernameFieldNames.indexOf(fieldLower) > -1) {\n        cipher.login.username = value;\n      } else if (\n        cipher.login.password == null &&\n        this.passwordFieldNames.indexOf(fieldLower) > -1\n      ) {\n        cipher.login.password = value;\n      } else {\n        this.processKvp(cipher, field, value);\n      }\n    });\n  }\n}\n","import { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { FolderRequest } from \"../../vault/models/request/folder.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  folders: FolderRequest[] = [];\n  folderRelationships: KvpRequest<number, number>[] = [];\n}\n","import { CollectionRequest } from \"../../admin-console/models/request/collection.request\";\nimport { CipherRequest } from \"../../vault/models/request/cipher.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportOrganizationCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  collections: CollectionRequest[] = [];\n  collectionRelationships: KvpRequest<number, number>[] = [];\n}\n","export class KvpRequest<TK, TV> {\n  key: TK;\n  value: TV;\n\n  constructor(key: TK, value: TV) {\n    this.key = key;\n    this.value = value;\n  }\n}\n","import { CryptoService } from \"../../abstractions/crypto.service\";\nimport { I18nService } from \"../../abstractions/i18n.service\";\nimport { ImportApiServiceAbstraction } from \"../../abstractions/import/import-api.service.abstraction\";\nimport { ImportService as ImportServiceAbstraction } from \"../../abstractions/import/import.service.abstraction\";\nimport { CollectionService } from \"../../admin-console/abstractions/collection.service\";\nimport { CollectionRequest } from \"../../admin-console/models/request/collection.request\";\nimport {\n  featuredImportOptions,\n  ImportOption,\n  ImportType,\n  regularImportOptions,\n} from \"../../enums/importOptions\";\nimport { AscendoCsvImporter } from \"../../importers/ascendo-csv-importer\";\nimport { AvastCsvImporter } from \"../../importers/avast-csv-importer\";\nimport { AvastJsonImporter } from \"../../importers/avast-json-importer\";\nimport { AviraCsvImporter } from \"../../importers/avira-csv-importer\";\nimport { BitwardenCsvImporter } from \"../../importers/bitwarden-csv-importer\";\nimport { BitwardenJsonImporter } from \"../../importers/bitwarden-json-importer\";\nimport { BitwardenPasswordProtectedImporter } from \"../../importers/bitwarden-password-protected-importer\";\nimport { BlackBerryCsvImporter } from \"../../importers/blackberry-csv-importer\";\nimport { BlurCsvImporter } from \"../../importers/blur-csv-importer\";\nimport { ButtercupCsvImporter } from \"../../importers/buttercup-csv-importer\";\nimport { ChromeCsvImporter } from \"../../importers/chrome-csv-importer\";\nimport { ClipperzHtmlImporter } from \"../../importers/clipperz-html-importer\";\nimport { CodebookCsvImporter } from \"../../importers/codebook-csv-importer\";\nimport { DashlaneCsvImporter } from \"../../importers/dashlane/dashlane-csv-importer\";\nimport { DashlaneJsonImporter } from \"../../importers/dashlane/dashlane-json-importer\";\nimport { EncryptrCsvImporter } from \"../../importers/encryptr-csv-importer\";\nimport { EnpassCsvImporter } from \"../../importers/enpass/enpass-csv-importer\";\nimport { EnpassJsonImporter } from \"../../importers/enpass/enpass-json-importer\";\nimport { FirefoxCsvImporter } from \"../../importers/firefox-csv-importer\";\nimport { FSecureFskImporter } from \"../../importers/fsecure/fsecure-fsk-importer\";\nimport { GnomeJsonImporter } from \"../../importers/gnome-json-importer\";\nimport { ImportError } from \"../../importers/import-error\";\nimport { Importer } from \"../../importers/importer\";\nimport { KasperskyTxtImporter } from \"../../importers/kaspersky-txt-importer\";\nimport { KeePass2XmlImporter } from \"../../importers/keepass2-xml-importer\";\nimport { KeePassXCsvImporter } from \"../../importers/keepassx-csv-importer\";\nimport { KeeperCsvImporter } from \"../../importers/keeper/keeper-csv-importer\";\nimport { LastPassCsvImporter } from \"../../importers/lastpass-csv-importer\";\nimport { LogMeOnceCsvImporter } from \"../../importers/logmeonce-csv-importer\";\nimport { MeldiumCsvImporter } from \"../../importers/meldium-csv-importer\";\nimport { MSecureCsvImporter } from \"../../importers/msecure-csv-importer\";\nimport { MykiCsvImporter } from \"../../importers/myki-csv-importer\";\nimport { NordPassCsvImporter } from \"../../importers/nordpass-csv-importer\";\nimport { OnePassword1PifImporter } from \"../../importers/onepassword/onepassword-1pif-importer\";\nimport { OnePassword1PuxImporter } from \"../../importers/onepassword/onepassword-1pux-importer\";\nimport { OnePasswordMacCsvImporter } from \"../../importers/onepassword/onepassword-mac-csv-importer\";\nimport { OnePasswordWinCsvImporter } from \"../../importers/onepassword/onepassword-win-csv-importer\";\nimport { PadlockCsvImporter } from \"../../importers/padlock-csv-importer\";\nimport { PassKeepCsvImporter } from \"../../importers/passkeep-csv-importer\";\nimport { PasskyJsonImporter } from \"../../importers/passky/passky-json-importer\";\nimport { PassmanJsonImporter } from \"../../importers/passman-json-importer\";\nimport { PasspackCsvImporter } from \"../../importers/passpack-csv-importer\";\nimport { PasswordAgentCsvImporter } from \"../../importers/passwordagent-csv-importer\";\nimport { PasswordBossJsonImporter } from \"../../importers/passwordboss-json-importer\";\nimport { PasswordDragonXmlImporter } from \"../../importers/passworddragon-xml-importer\";\nimport { PasswordSafeXmlImporter } from \"../../importers/passwordsafe-xml-importer\";\nimport { PasswordWalletTxtImporter } from \"../../importers/passwordwallet-txt-importer\";\nimport { PsonoJsonImporter } from \"../../importers/psono/psono-json-importer\";\nimport { RememBearCsvImporter } from \"../../importers/remembear-csv-importer\";\nimport { RoboFormCsvImporter } from \"../../importers/roboform-csv-importer\";\nimport { SafariCsvImporter } from \"../../importers/safari-csv-importer\";\nimport { SafeInCloudXmlImporter } from \"../../importers/safeincloud-xml-importer\";\nimport { SaferPassCsvImporter } from \"../../importers/saferpass-csv-importer\";\nimport { SecureSafeCsvImporter } from \"../../importers/securesafe-csv-importer\";\nimport { SplashIdCsvImporter } from \"../../importers/splashid-csv-importer\";\nimport { StickyPasswordXmlImporter } from \"../../importers/stickypassword-xml-importer\";\nimport { TrueKeyCsvImporter } from \"../../importers/truekey-csv-importer\";\nimport { UpmCsvImporter } from \"../../importers/upm-csv-importer\";\nimport { YotiCsvImporter } from \"../../importers/yoti-csv-importer\";\nimport { ZohoVaultCsvImporter } from \"../../importers/zohovault-csv-importer\";\nimport { Utils } from \"../../misc/utils\";\nimport { ImportResult } from \"../../models/domain/import-result\";\nimport { ImportCiphersRequest } from \"../../models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"../../models/request/import-organization-ciphers.request\";\nimport { KvpRequest } from \"../../models/request/kvp.request\";\nimport { ErrorResponse } from \"../../models/response/error.response\";\nimport { CipherService } from \"../../vault/abstractions/cipher.service\";\nimport { FolderService } from \"../../vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"../../vault/enums/cipher-type\";\nimport { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { FolderRequest } from \"../../vault/models/request/folder.request\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\n\nexport class ImportService implements ImportServiceAbstraction {\n  featuredImportOptions = featuredImportOptions as readonly ImportOption[];\n\n  regularImportOptions = regularImportOptions as readonly ImportOption[];\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private importApiService: ImportApiServiceAbstraction,\n    private i18nService: I18nService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService\n  ) {}\n\n  getImportOptions(): ImportOption[] {\n    return this.featuredImportOptions.concat(this.regularImportOptions);\n  }\n\n  async import(\n    importer: Importer,\n    fileContents: string,\n    organizationId: string = null\n  ): Promise<ImportError> {\n    const importResult = await importer.parse(fileContents);\n    if (importResult.success) {\n      if (importResult.folders.length === 0 && importResult.ciphers.length === 0) {\n        return new ImportError(this.i18nService.t(\"importNothingError\"));\n      } else if (importResult.ciphers.length > 0) {\n        const halfway = Math.floor(importResult.ciphers.length / 2);\n        const last = importResult.ciphers.length - 1;\n\n        if (\n          this.badData(importResult.ciphers[0]) &&\n          this.badData(importResult.ciphers[halfway]) &&\n          this.badData(importResult.ciphers[last])\n        ) {\n          return new ImportError(this.i18nService.t(\"importFormatError\"));\n        }\n      }\n      try {\n        await this.postImport(importResult, organizationId);\n      } catch (error) {\n        const errorResponse = new ErrorResponse(error, 400);\n        return this.handleServerError(errorResponse, importResult);\n      }\n      return null;\n    } else {\n      if (!Utils.isNullOrWhitespace(importResult.errorMessage)) {\n        return new ImportError(importResult.errorMessage, importResult.missingPassword);\n      } else {\n        return new ImportError(\n          this.i18nService.t(\"importFormatError\"),\n          importResult.missingPassword\n        );\n      }\n    }\n  }\n\n  getImporter(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    organizationId: string = null,\n    password: string = null\n  ): Importer {\n    const importer = this.getImporterInstance(format, password);\n    if (importer == null) {\n      return null;\n    }\n    importer.organizationId = organizationId;\n    return importer;\n  }\n\n  private getImporterInstance(format: ImportType | \"bitwardenpasswordprotected\", password: string) {\n    if (format == null) {\n      return null;\n    }\n\n    switch (format) {\n      case \"bitwardencsv\":\n        return new BitwardenCsvImporter();\n      case \"bitwardenjson\":\n        return new BitwardenJsonImporter(this.cryptoService, this.i18nService);\n      case \"bitwardenpasswordprotected\":\n        return new BitwardenPasswordProtectedImporter(\n          this.cryptoService,\n          this.i18nService,\n          password\n        );\n      case \"lastpasscsv\":\n      case \"passboltcsv\":\n        return new LastPassCsvImporter();\n      case \"keepassxcsv\":\n        return new KeePassXCsvImporter();\n      case \"aviracsv\":\n        return new AviraCsvImporter();\n      case \"blurcsv\":\n        return new BlurCsvImporter();\n      case \"safeincloudxml\":\n        return new SafeInCloudXmlImporter();\n      case \"padlockcsv\":\n        return new PadlockCsvImporter();\n      case \"keepass2xml\":\n        return new KeePass2XmlImporter();\n      case \"chromecsv\":\n      case \"operacsv\":\n      case \"vivaldicsv\":\n        return new ChromeCsvImporter();\n      case \"firefoxcsv\":\n        return new FirefoxCsvImporter();\n      case \"upmcsv\":\n        return new UpmCsvImporter();\n      case \"saferpasscsv\":\n        return new SaferPassCsvImporter();\n      case \"safaricsv\":\n        return new SafariCsvImporter();\n      case \"meldiumcsv\":\n        return new MeldiumCsvImporter();\n      case \"1password1pif\":\n        return new OnePassword1PifImporter();\n      case \"1password1pux\":\n        return new OnePassword1PuxImporter();\n      case \"1passwordwincsv\":\n        return new OnePasswordWinCsvImporter();\n      case \"1passwordmaccsv\":\n        return new OnePasswordMacCsvImporter();\n      case \"keepercsv\":\n        return new KeeperCsvImporter();\n      // case \"keeperjson\":\n      //   return new KeeperJsonImporter();\n      case \"passworddragonxml\":\n        return new PasswordDragonXmlImporter();\n      case \"enpasscsv\":\n        return new EnpassCsvImporter();\n      case \"enpassjson\":\n        return new EnpassJsonImporter();\n      case \"pwsafexml\":\n        return new PasswordSafeXmlImporter();\n      case \"dashlanecsv\":\n        return new DashlaneCsvImporter();\n      case \"dashlanejson\":\n        return new DashlaneJsonImporter();\n      case \"msecurecsv\":\n        return new MSecureCsvImporter();\n      case \"stickypasswordxml\":\n        return new StickyPasswordXmlImporter();\n      case \"truekeycsv\":\n        return new TrueKeyCsvImporter();\n      case \"clipperzhtml\":\n        return new ClipperzHtmlImporter();\n      case \"roboformcsv\":\n        return new RoboFormCsvImporter();\n      case \"ascendocsv\":\n        return new AscendoCsvImporter();\n      case \"passwordbossjson\":\n        return new PasswordBossJsonImporter();\n      case \"zohovaultcsv\":\n        return new ZohoVaultCsvImporter();\n      case \"splashidcsv\":\n        return new SplashIdCsvImporter();\n      case \"passkeepcsv\":\n        return new PassKeepCsvImporter();\n      case \"gnomejson\":\n        return new GnomeJsonImporter();\n      case \"passwordagentcsv\":\n        return new PasswordAgentCsvImporter();\n      case \"passpackcsv\":\n        return new PasspackCsvImporter();\n      case \"passmanjson\":\n        return new PassmanJsonImporter();\n      case \"avastcsv\":\n        return new AvastCsvImporter();\n      case \"avastjson\":\n        return new AvastJsonImporter();\n      case \"fsecurefsk\":\n        return new FSecureFskImporter();\n      case \"kasperskytxt\":\n        return new KasperskyTxtImporter();\n      case \"remembearcsv\":\n        return new RememBearCsvImporter();\n      case \"passwordwallettxt\":\n        return new PasswordWalletTxtImporter();\n      case \"mykicsv\":\n        return new MykiCsvImporter();\n      case \"securesafecsv\":\n        return new SecureSafeCsvImporter();\n      case \"logmeoncecsv\":\n        return new LogMeOnceCsvImporter();\n      case \"blackberrycsv\":\n        return new BlackBerryCsvImporter();\n      case \"buttercupcsv\":\n        return new ButtercupCsvImporter();\n      case \"codebookcsv\":\n        return new CodebookCsvImporter();\n      case \"encryptrcsv\":\n        return new EncryptrCsvImporter();\n      case \"yoticsv\":\n        return new YotiCsvImporter();\n      case \"nordpasscsv\":\n        return new NordPassCsvImporter();\n      case \"psonojson\":\n        return new PsonoJsonImporter();\n      case \"passkyjson\":\n        return new PasskyJsonImporter();\n      default:\n        return null;\n    }\n  }\n\n  private async postImport(importResult: ImportResult, organizationId: string = null) {\n    if (organizationId == null) {\n      const request = new ImportCiphersRequest();\n      for (let i = 0; i < importResult.ciphers.length; i++) {\n        const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n        request.ciphers.push(new CipherRequest(c));\n      }\n      if (importResult.folders != null) {\n        for (let i = 0; i < importResult.folders.length; i++) {\n          const f = await this.folderService.encrypt(importResult.folders[i]);\n          request.folders.push(new FolderRequest(f));\n        }\n      }\n      if (importResult.folderRelationships != null) {\n        importResult.folderRelationships.forEach((r) =>\n          request.folderRelationships.push(new KvpRequest(r[0], r[1]))\n        );\n      }\n      return await this.importApiService.postImportCiphers(request);\n    } else {\n      const request = new ImportOrganizationCiphersRequest();\n      for (let i = 0; i < importResult.ciphers.length; i++) {\n        importResult.ciphers[i].organizationId = organizationId;\n        const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n        request.ciphers.push(new CipherRequest(c));\n      }\n      if (importResult.collections != null) {\n        for (let i = 0; i < importResult.collections.length; i++) {\n          importResult.collections[i].organizationId = organizationId;\n          const c = await this.collectionService.encrypt(importResult.collections[i]);\n          request.collections.push(new CollectionRequest(c));\n        }\n      }\n      if (importResult.collectionRelationships != null) {\n        importResult.collectionRelationships.forEach((r) =>\n          request.collectionRelationships.push(new KvpRequest(r[0], r[1]))\n        );\n      }\n      return await this.importApiService.postImportOrganizationCiphers(organizationId, request);\n    }\n  }\n\n  private badData(c: CipherView) {\n    return (\n      (c.name == null || c.name === \"--\") &&\n      c.type === CipherType.Login &&\n      c.login != null &&\n      Utils.isNullOrWhitespace(c.login.password)\n    );\n  }\n\n  private handleServerError(errorResponse: ErrorResponse, importResult: ImportResult): ImportError {\n    if (errorResponse.validationErrors == null) {\n      return new ImportError(errorResponse.message);\n    }\n\n    let errorMessage = \"\";\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const i = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Ciphers\":\n          item = importResult.ciphers[i];\n          itemType = CipherType[item.type];\n          break;\n        case \"Folders\":\n          item = importResult.folders[i];\n          itemType = \"Folder\";\n          break;\n        case \"Collections\":\n          item = importResult.collections[i];\n          itemType = \"Collection\";\n          break;\n        default:\n          return;\n      }\n\n      if (index > 0) {\n        errorMessage += \"\\n\\n\";\n      }\n\n      if (itemType !== \"Folder\" && itemType !== \"Collection\") {\n        errorMessage += \"[\" + (i + 1) + \"] \";\n      }\n\n      errorMessage += \"[\" + itemType + '] \"' + item.name + '\": ' + value;\n    });\n\n    return new ImportError(errorMessage);\n  }\n}\n"],"names":["constructor","modalRef","config","userVerificationService","formBuilder","platformUtilsService","i18nService","confirmDescription","this","data","confirmButtonText","modalTitle","secret","submit","verifyUser","value","e","showToast","t","close","UserVerificationPromptComponent","EncryptedExportType","cryptoService","exportService","eventCollectionService","policyService","win","logService","fileDownloadService","onSaved","disabledByPolicy","exportForm","group","format","filePassword","confirmFilePassword","fileEncryptionType","AccountEncrypted","formatOptions","name","destroy$","Subject","ngOnInit","policyAppliesToActiveUser$","pipe","takeUntil","subscribe","policyAppliesToActiveUser","checkExportDisabled","merge","get","valueChanges","startWith","adjustValidators","ngOnDestroy","next","disable","encryptedFormat","doExport","formPromise","getExportData","downloadFile","saved","collectEvent","setValue","clearValidators","error","warningDialog","message","showDialog","emit","FileEncrypted","getPasswordProtectedExport","getExport","getFileName","prefix","extension","collect","reset","controls","enable","csv","fileName","download","blobData","blobOptions","type","ExportComponent","modalService","super","window","encryptedExportType","isFileEncryptedExport","markAllAsTouched","valid","isAccountEncryptedExport","ref","open","allowMultipleModals","onClosedPromise","FilePasswordPromptComponent","markAsTouched","cancel","ImportComponent","importService","router","syncService","loading","importBlockedByPolicy","organizationId","successNavigate","setImportOptions","firstValueFrom","importer","getImporter","files","document","getElementById","length","fileContents","content","getFileContents","import","passwordRequired","getFilePassword","doPasswordProtectedImport","fullSync","navigate","getFormatInstructionTitle","results","featuredImportOptions","concat","importOptions","filter","o","id","regularImportOptions","sort","a","b","collator","compare","localeCompare","setSelectedFile","event","fileInputEl","target","fileSelected","heightAuto","buttonsStyling","icon","iconHtml","input","inputValue","inputAttributes","readonly","titleText","text","showConfirmButton","onOpen","popupEl","querySelector","scrollTo","file","extract1PuxContent","Promise","resolve","reject","reader","FileReader","readAsText","onload","evt","pre","DOMParser","parseFromString","result","textContent","onerror","loadAsync","then","zip","async","passwordProtectedImporter","title","ExportScopeCalloutComponent","organizationService","stateService","show","hasOrganizations","scopeConfig","description","scopeIdentifier","getEmail","BoxRowDirective","elRef","el","nativeElement","formEls","Array","from","querySelectorAll","forEach","formEl","addEventListener","classList","add","remove","onClick","contains","tagName","toLowerCase","inputEl","click","focus","ImportApiServiceAbstraction","ImportService","ImportApiService","apiService","postImportCiphers","request","send","postImportOrganizationCiphers","ImportResult","success","missingPassword","ciphers","folders","folderRelationships","collections","collectionRelationships","BaseImporter","newLineRegex","passwordFieldNames","usernameFieldNames","notesFieldNames","uriFieldNames","parseCsvOptions","encoding","skipEmptyLines","organization","parseXml","doc","parseCsv","header","options","parseOptions","Object","assign","splitNewLine","join","trim","errors","row","warning","parseSingleRowCsv","rowData","isNullOrWhitespace","parsedRow","makeUriArray","uri","loginUri","fixUri","match","returnArr","u","push","indexOf","substring","nameFromUrl","url","hostname","startsWith","replace","str","getValueOrDefault","defaultValue","split","getCardBrand","cardNum","re","RegExp","test","setCardExpiration","cipher","expiration","parts","month","year","substr","card","expMonth","expYear","moveFoldersToCollections","r","map","f","collection","querySelectorDirectChild","parentEl","query","els","querySelectorAllDirectChild","parentNode","initLoginCipher","favorite","notes","fields","login","cleanupCipher","processKvp","key","search","field","processFolder","folderName","folderIndex","hasFolder","addFolder","i","convertToNoteIfNeeded","username","password","uris","secureNote","processFullName","fullName","nameParts","identity","firstName","lastName","middleName","slice","AscendoCsvImporter","parse","val","fieldLower","AvastCsvImporter","web","AvastJsonImporter","JSON","logins","custName","note","pwd","loginName","label","cards","cardholderName","holderName","number","cardNumber","code","cvv","brand","expirationDate","AviraCsvImporter","website","secondary_username","BitwardenCsvImporter","col","addCollection","collectionIndex","folder","reprompt","parseInt","console","delimPosition","lastIndexOf","totp","login_totp","login_username","login_password","login_uri","BitwardenJsonImporter","items","passwordProtected","errorMessage","encrypted","parseEncrypted","parseDecrypted","encKeyValidation_DO_NOT_EDIT","orgKey","getOrgKey","encKeyValidation","decryptToUtf8","groupingsMap","Map","c","view","decrypt","set","folderId","collectionIds","passwordHistory","has","cId","BitwardenPasswordProtectedImporter","parsedData","cannotParseFile","checkPassword","encData","clearTextData","jdoc","makePinKey","salt","kdfIterations","kdfType","BlackBerryCsvImporter","grouping","fav","extra","BlurCsvImporter","domain","email","OfficialProps","ButtercupCsvImporter","URL","processingCustomFields","prop","hasOwnProperty","ChromeCsvImporter","androidPatternRegex","ClipperzHtmlImporter","textarea","entry","currentVersion","property","actionType","labelLower","CodebookCsvImporter","Category","Favorite","Entry","Note","Username","Email","Password","TOTP","Website","Phone","PIN","Account","Date","_mappedCredentialsColums","Set","_mappedPersonalInfoAsIdentiyColumns","_mappedSecureNoteColumns","DashlaneCsvImporter","x","parsePersonalInformationRecordAsIdentity","rowKeys","keys","category","parseCredentialsRecord","parsePaymentRecord","parseIdRecord","parsePersonalInformationRecord","parseSecureNoteRecords","otpSecret","importUnmappedFields","account_name","mappedValues","cc_number","expiration_month","expiration_year","account_holder","account_number","licenseNumber","passportNumber","state","ssn","first_name","middle_name","last_name","item_name","dataRow","phone","phone_number","address1","address","city","postalCode","country","item","HandledResults","DashlaneJsonImporter","ADDRESS","processAddress","AUTHENTIFIANT","processAuth","BANKSTATEMENT","processNote","IDCARD","PAYMENTMEANS_CREDITCARD","processCard","IDENTITY","processIdentity","credential","secondaryLogin","obj","pseudo","addressName","addressFull","zipcode","toUpperCase","bank","owner","nameProperty","toString","EncryptrCsvImporter","Label","Notes","Text","CVV","expiry","Expiry","expParts","EnpassCsvImporter","firstRow","containsField","fieldValue","fieldName","fieldNameLower","androidUrlRegex","EnpassJsonImporter","foldersMap","foldersIndexMap","folderTree","buildFolderTree","flattenFolderTree","template_type","processLogin","some","urls","cleanedValue","sensitive","uuid","children","parent_uuid","titlePrefix","tree","FirefoxCsvImporter","FskEntryTypesEnum","FSecureFskImporter","parseEntry","service","Login","handleLoginEntry","CreditCard","handleCreditCardEntry","creditNumber","creditCvv","creditExpiry","GnomeJsonImporter","keyRing","display_name","attributes","username_value","attr","ImportError","Error","NotesHeader","ApplicationsHeader","WebsitesHeader","Delimiter","KasperskyTxtImporter","notesData","applicationsData","websitesData","workingData","parseDataCategory","applications","websites","n","w","nameKey","p","itemComment","itemCommentKey","l","colonIndex","size","KeePass2XmlImporter","KeePassFileNode","RootNode","rootGroup","traverse","node","isRootNode","groupPrefixName","groupName","nameEl","cipherIndex","entryString","valueEl","keyEl","attrs","ProtectInMemory","KeePassXCsvImporter","Title","Group","KeeperCsvImporter","LastPassCsvImporter","buildBaseCipher","parseSecureNote","parseCard","parseIdentity","ccnum","cardCipher","profilename","firstname","lastname","ccname","cccsc","ccexp","ccexpParts","middlename","company","address2","address3","charAt","extraParts","processedNote","typeParts","mappedData","parseSecureNoteMapping","Number","undefined","monthString","getMonth","isNaN","Company","State","Country","dataObj","processingNotes","extraPart","LogMeOnceCsvImporter","MeldiumCsvImporter","DisplayName","UserName","Url","MSecureCsvImporter","mappedBaseColumns","_mappedUserAccountColumns","_mappedCreditCardColumns","_mappedIdentityColumns","_mappedIdCardColumns","_mappedTwoFaColumns","_mappedUserNoteColumns","MykiCsvImporter","nickname","additionalInfo","twofaSecret","authToken","cardName","exp_month","exp_year","firstAddressLine","secondAddressLine","zipCode","idType","idName","idCountry","idNumber","NordPassCsvImporter","record","recordType","evaluateType","cardholdername","cardnumber","cvc","expirydate","full_name","CategoryEnum","LoginFieldTypeEnum","OnePassword1PifImporter","line","trashed","hmac","processStandardItem","processWinOpVaultItem","overview","URLs","details","parsePasswordHistory","notesPlain","parseFields","sections","section","openContents","faveIndex","typeName","location","secureContents","maxSize","h","time","ph","lastUsedDate","designationKey","valueKey","k","toUTCString","fieldDesignation","street","fieldType","OnePassword1PuxImporter","accounts","vaults","vault","categoryUuid","Database","WirelessRouter","Server","API_Credential","BankAccount","SecureNote","SoftwareLicense","EmailAccount","MedicalRecord","Identity","DriversLicense","OutdoorLicense","Membership","Passport","RewardsProgram","SocialSecurityNumber","favIndex","processOverview","processLoginFields","processDetails","processSections","tags","capitalize","inputString","loginFields","loginField","designation","CheckBox","parseSectionFields","anyField","getFieldName","extractValue","fillLogin","fillApiCredentials","fillCreditCard","fillBankAccount","fillIdentity","fillDriversLicense","fillOutdoorLicense","fillMembership","fillPassport","fillRewardsProgram","fillSSN","email_address","provider","guarded","date","monthYear","historyItems","CipherImportContext","importRecord","lowerProperty","IgnoredProperties","OnePasswordCsvImporter","loginPropertyParsers","setLoginUsername","setLoginPassword","setLoginUris","creditCardPropertyParsers","setCreditCardNumber","setCreditCardVerification","setCreditCardCardholderName","setCreditCardExpiry","identityPropertyParsers","setIdentityFirstName","setIdentityInitial","setIdentityLastName","setIdentityUserName","setIdentityEmail","setIdentityPhone","setIdentityCompany","quoteChar","escapeChar","getProp","setNotes","setCipherType","altUsername","context","setKnownLoginValue","setKnownCreditCardValue","setKnownIdentityValue","setUnknownValue","entries","reduce","agg","getPropByRegexp","regexp","matchingKeys","getPropIncluding","includesMap","includes","func","bind","readableDate","OnePasswordMacCsvImporter","OnePasswordWinCsvImporter","setIdentityAddress","expSplit","PadlockCsvImporter","headers","v","tag","PassKeepCsvImporter","getValue","PasskyJsonImporter","passkyExport","passwords","PassmanJsonImporter","otp","custom_fields","customField","field_type","PasspackCsvImporter","tagsJson","Tags","tagJson","__parsed_extra","fieldsJson","extraFields","fieldJson","PasswordAgentCsvImporter","newVersion","altFormat","PasswordBossJsonImporter","login_url","identifiers","valObj","expDate","getFullYear","cf","PasswordDragonXmlImporter","records","categoryText","accountName","userId","PasswordSafeXmlImporter","passwordSafe","notesDelimiter","getAttribute","groupText","PasswordWalletTxtImporter","PsonoJsonImporter","WEBSITE_mappedValues","APP_PWD_mappedValues","BOOKMARK_mappedValues","NOTES_mappedValues","TOTP_mappedValues","ENV_VARIABLES_mappedValues","GPG_mappedValues","psonoExport","parseFolders","handleItemParsing","parsePsonoItem","parseWebsiteLogins","parseApplicationPasswords","parseEnvironmentVariables","parseTOTP","parseBookmarks","parseNotes","website_password_title","website_password_notes","website_password_username","website_password_password","website_password_url","website_password_auto_submit","website_password_url_filter","application_password_title","application_password_notes","application_password_username","application_password_password","bookmark_title","bookmark_notes","bookmark_url","note_title","note_notes","totp_title","totp_notes","totp_code","environment_variables_title","environment_variables_notes","environment_variables_variables","KvPair","parseGPG","mail_gpg_own_key_title","mail_gpg_own_key_public","mail_gpg_own_key_name","mail_gpg_own_key_email","mail_gpg_own_key_private","RememBearCsvImporter","trash","cardholder","verification","expiryMonth","expMonthNumber","expiryYear","expYearNumber","pin","RoboFormCsvImporter","Folder","Name","Pwd","Rf_fields","SafariCsvImporter","OTPAuth","SafeInCloudXmlImporter","labelEl","cardEl","labelIdEl","labelId","fieldEl","notesEl","setPassword","candidates","choice","SaferPassCsvImporter","SecureSafeCsvImporter","Comment","SplashIdCsvImporter","parseFieldsToNotes","startIndex","StickyPasswordXmlImporter","loginNodes","loginNode","accountId","usernameText","passwordText","linkText","notesText","groupId","accountLogin","account","parentElement","buildGroupText","PropertiesToIgnore","TrueKeyCsvImporter","memo","kind","expiryDate","document_content","UpmCsvImporter","YotiCsvImporter","ZohoVaultCsvImporter","ChamberName","parseData","SecretData","CustomData","ImportCiphersRequest","ImportOrganizationCiphersRequest","KvpRequest","cipherService","folderService","importApiService","collectionService","getImportOptions","importResult","halfway","Math","floor","last","badData","postImport","errorResponse","handleServerError","getImporterInstance","encrypt","validationErrors","index","itemType"],"sourceRoot":""}