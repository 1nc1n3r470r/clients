{"version":3,"file":"409.e45874fa34b2a6bc6ac1.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/../../libs/angular/src/auth/components/user-verification-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/components/user-verification-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/components/user-verification-prompt.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/navigation.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/layout.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/sm-shared.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/layout.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/layout.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/secrets-manager-logo.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-base.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-item.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-item.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-group.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-group.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-divider.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-divider.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/org-switcher.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/org-switcher.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/navigation.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/navigation.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/progress/progress.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/dialogs/bulk-status-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/dialogs/bulk-status-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/project-list.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/project.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/models/requests/project.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/models/responses/project-list-item.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/models/responses/project.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-delete-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-delete-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/secret-list.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/secret-project.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/secret.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/requests/secret.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret-project.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret-list-item.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret-with-projects-list.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secret.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-delete.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-delete.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/service-account.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/requests/service-account.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/responses/service-account.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-account.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-dialog.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/typography/typography.directive.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/header.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/header.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/new-menu.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/new-menu.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/table/table-data-source.ts","webpack://@bitwarden/web-vault/../../libs/components/src/table/sortable.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/no-items.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/projects-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/no-items.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/projects-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/secrets-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/secrets-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding-task.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding-task.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/progress/progress.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/progress/progress.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/section.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/section.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/access-policy.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/potential-grantee.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/access-policies-create.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/access-policy.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/project-access-policies.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/service-accounts-access-policies.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/access-policy-update.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/access-policy.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/granted-policy.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/potential-grantee.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-policy.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-selector.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-selector.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/dialogs/access-removal-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/dialogs/access-removal-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-people.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-people.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-secrets.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-secrets.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-service-accounts.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-service-accounts.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects/projects.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects/projects.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/requests/access-token.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/requests/revoke-access-tokens.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/responses/access-token-creation.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/responses/access-tokens.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/view/access-token.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/expiration-options.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/expiration-options.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-create-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-create-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-tokens.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-tokens.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/people/service-account-people.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/people/service-account-people.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/projects/service-account-projects.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/projects/service-account-projects.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-account.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-account.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-delete-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-delete-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/error/sm-import-error.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/requests/sm-import.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/requests/sm-imported-project.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/requests/sm-imported-secret.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/responses/sm-exported-project.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/responses/sm-exported-secret.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/responses/sm-export.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/sm-export.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/services/sm-porting-api.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/services/sm-porting.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-export.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-export.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/dialog/sm-import-error-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/dialog/sm-import-error-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-import.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-import.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/settings-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/settings.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/sm.guard.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/dialog/secret-hard-delete.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/dialog/secret-hard-delete.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/dialog/secret-restore.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/dialog/secret-restore.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/trash.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/trash.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/trash-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/trash.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/sm-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets-manager.module.ts"],"sourcesContent":["import { Directive } from \"@angular/core\";\nimport { FormBuilder, FormControl } from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\n\nimport { ModalRef } from \"../../components/modal/modal.ref\";\nimport { ModalConfig } from \"../../services/modal.service\";\n\n/**\n * Used to verify the user's identity (using their master password or email-based OTP for Key Connector users). You can customize all of the text in the modal.\n */\n@Directive()\nexport class UserVerificationPromptComponent {\n  confirmDescription = this.config.data.confirmDescription;\n  confirmButtonText = this.config.data.confirmButtonText;\n  modalTitle = this.config.data.modalTitle;\n  secret = new FormControl();\n\n  constructor(\n    private modalRef: ModalRef,\n    protected config: ModalConfig,\n    protected userVerificationService: UserVerificationService,\n    private formBuilder: FormBuilder,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  async submit() {\n    try {\n      //Incorrect secret will throw an invalid password error.\n      await this.userVerificationService.verifyUser(this.secret.value);\n    } catch (e) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"error\"),\n        this.i18nService.t(\"invalidMasterPassword\")\n      );\n      return;\n    }\n\n    this.modalRef.close(true);\n  }\n}\n","import { Component } from \"@angular/core\";\n\nimport { UserVerificationPromptComponent as BaseUserVerificationPrompt } from \"@bitwarden/angular/auth/components/user-verification-prompt.component\";\n\n@Component({\n  templateUrl: \"user-verification-prompt.component.html\",\n})\nexport class UserVerificationPromptComponent extends BaseUserVerificationPrompt {}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable @angular-eslint/template/button-has-type -->\n<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"confirmUserTitle\">\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form class=\"modal-content\" #form (ngSubmit)=\"submit()\">\n      <h2 class=\"tw-my-6 tw-px-3.5 tw-font-semibold\" id=\"modalTitle | i18n \">\n        {{ modalTitle | i18n | uppercase }}\n      </h2>\n      <div class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-p-3.5\">\n        {{ confirmDescription | i18n }}\n      </div>\n      <div class=\"tw-p-3.5\">\n        <app-user-verification ngDefaultControl [formControl]=\"secret\" name=\"secret\">\n        </app-user-verification>\n      </div>\n      <div\n        class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-p-3.5\"\n      >\n        <button bitButton buttonType=\"primary\" type=\"submit\" appBlurClick>\n          <span>{{ confirmButtonText | i18n }}</span>\n        </button>\n        <button bitButton buttonType=\"secondary\" data-dismiss=\"modal\">\n          {{ \"cancel\" | i18n }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { OverlayModule } from \"@angular/cdk/overlay\";\nimport { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\n\nimport { IconButtonModule } from \"../icon-button/icon-button.module\";\nimport { SharedModule } from \"../shared/shared.module\";\n\nimport { NavDividerComponent } from \"./nav-divider.component\";\nimport { NavGroupComponent } from \"./nav-group.component\";\nimport { NavItemComponent } from \"./nav-item.component\";\n\n@NgModule({\n  imports: [CommonModule, SharedModule, IconButtonModule, OverlayModule, RouterModule],\n  declarations: [NavDividerComponent, NavGroupComponent, NavItemComponent],\n  exports: [NavDividerComponent, NavGroupComponent, NavItemComponent],\n})\nexport class NavigationModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { NavigationModule } from \"@bitwarden/components\";\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared/shared.module\";\n\nimport { LayoutComponent } from \"./layout.component\";\nimport { NavigationComponent } from \"./navigation.component\";\nimport { OrgSwitcherComponent } from \"./org-switcher.component\";\n\n@NgModule({\n  imports: [SharedModule, NavigationModule],\n  declarations: [LayoutComponent, NavigationComponent, OrgSwitcherComponent],\n})\nexport class LayoutModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { MultiSelectModule } from \"@bitwarden/components\";\nimport { ProductSwitcherModule } from \"@bitwarden/web-vault/app/layouts/product-switcher/product-switcher.module\";\nimport { CoreOrganizationModule } from \"@bitwarden/web-vault/app/organizations/core\";\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared\";\n\nimport { AccessSelectorComponent } from \"./access-policies/access-selector.component\";\nimport { AccessRemovalDialogComponent } from \"./access-policies/dialogs/access-removal-dialog.component\";\nimport { BulkStatusDialogComponent } from \"./dialogs/bulk-status-dialog.component\";\nimport { HeaderComponent } from \"./header.component\";\nimport { NewMenuComponent } from \"./new-menu.component\";\nimport { NoItemsComponent } from \"./no-items.component\";\nimport { ProjectsListComponent } from \"./projects-list.component\";\nimport { SecretsListComponent } from \"./secrets-list.component\";\n\n@NgModule({\n  imports: [SharedModule, ProductSwitcherModule, MultiSelectModule, CoreOrganizationModule],\n  exports: [\n    SharedModule,\n    AccessRemovalDialogComponent,\n    BulkStatusDialogComponent,\n    HeaderComponent,\n    NewMenuComponent,\n    NoItemsComponent,\n    ProjectsListComponent,\n    SecretsListComponent,\n    AccessSelectorComponent,\n  ],\n  declarations: [\n    AccessRemovalDialogComponent,\n    BulkStatusDialogComponent,\n    HeaderComponent,\n    NewMenuComponent,\n    NoItemsComponent,\n    ProjectsListComponent,\n    SecretsListComponent,\n    AccessSelectorComponent,\n  ],\n  providers: [],\n  bootstrap: [],\n})\nexport class SecretsManagerSharedModule {}\n","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-layout\",\n  templateUrl: \"./layout.component.html\",\n})\nexport class LayoutComponent implements OnInit {\n  ngOnInit() {\n    document.body.classList.remove(\"layout_frontend\");\n  }\n}\n","<div class=\"tw-flex tw-w-full\">\n  <nav class=\"tw-min-h-screen tw-w-60 tw-bg-background-alt3\">\n    <router-outlet name=\"sidebar\"></router-outlet>\n  </nav>\n  <main class=\"tw-min-h-screen tw-min-w-0 tw-flex-1 tw-p-6\">\n    <router-outlet></router-outlet>\n  </main>\n</div>\n","import { svgIcon } from \"@bitwarden/components\";\n\nexport const SecretsManagerLogo = svgIcon`\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 580 104\" fill=\"none\"><path fill=\"#fff\" d=\"M102.539 52.27c0 28.315-22.954 51.269-51.27 51.269C22.955 103.539 0 80.585 0 52.269 0 23.955 22.954 1 51.27 1c28.315 0 51.269 22.954 51.269 51.27Z\"/><path fill=\"#175DDC\" fill-rule=\"evenodd\" d=\"M75.971 26.765c-.516-.49-1.111-.777-1.786-.777H28.39c-.675 0-1.31.287-1.786.777-.516.49-.754 1.145-.754 1.84v31.47c0 2.371.437 4.66 1.31 6.95.873 2.288 1.984 4.332 3.294 6.13s2.897 3.515 4.682 5.232a62.036 62.036 0 0 0 5 4.25 82.731 82.731 0 0 0 4.802 3.188c1.667.981 2.857 1.676 3.572 2.003.714.368 1.27.613 1.706.817a2.26 2.26 0 0 0 1.032.246 2.26 2.26 0 0 0 1.032-.246c.436-.204.992-.45 1.706-.817.715-.368 1.905-1.022 3.572-2.003a54.848 54.848 0 0 0 4.801-3.188c1.548-1.103 3.215-2.534 5.04-4.25 1.826-1.717 3.373-3.434 4.683-5.232 1.31-1.798 2.42-3.842 3.294-6.13.912-2.29 1.31-4.62 1.31-6.95v-31.47c.04-.695-.239-1.309-.715-1.84Zm-5.913 33.597c0 11.403-18.77 21.172-18.77 21.172V32.732h18.77v27.63Z\" clip-rule=\"evenodd\"/><path fill=\"#fff\" d=\"M142.208 70.81c-2.804 0-5.243-.511-7.319-1.533-2.075-1.023-3.678-2.447-4.806-4.272-1.129-1.826-1.694-3.943-1.694-6.353h4.807c0 1.497.346 2.884 1.038 4.162.692 1.241 1.693 2.246 3.004 3.012 1.347.73 3.004 1.096 4.97 1.096 2.585 0 4.588-.621 6.008-1.862 1.42-1.242 2.13-2.794 2.13-4.656 0-1.533-.327-2.756-.983-3.669-.655-.95-1.547-1.716-2.676-2.3-1.092-.585-2.367-1.096-3.823-1.534a126.43 126.43 0 0 1-4.479-1.479c-2.95-1.022-5.134-2.281-6.555-3.778-1.42-1.534-2.13-3.524-2.13-5.97-.036-2.045.437-3.852 1.42-5.422.984-1.607 2.367-2.848 4.151-3.724 1.821-.913 3.969-1.37 6.446-1.37 2.439 0 4.551.457 6.335 1.37 1.821.913 3.223 2.172 4.206 3.779 1.02 1.606 1.548 3.432 1.584 5.476h-4.806c0-1.058-.274-2.099-.82-3.121-.546-1.06-1.383-1.917-2.512-2.574-1.093-.658-2.476-.986-4.151-.986-2.076-.037-3.787.493-5.135 1.588-1.31 1.095-1.966 2.61-1.966 4.546 0 1.643.455 2.903 1.366 3.779.946.876 2.257 1.606 3.932 2.19 1.675.548 3.605 1.187 5.79 1.917 1.821.657 3.459 1.424 4.916 2.3 1.456.877 2.585 2.009 3.386 3.396.838 1.388 1.256 3.158 1.256 5.313 0 1.825-.473 3.56-1.42 5.203-.946 1.606-2.385 2.92-4.315 3.943-1.893 1.022-4.278 1.533-7.155 1.533ZM172.42 70.81c-2.586 0-4.88-.584-6.882-1.752-2.003-1.205-3.587-2.867-4.752-4.984-1.129-2.118-1.694-4.619-1.694-7.503 0-2.848.565-5.331 1.694-7.449 1.128-2.154 2.694-3.815 4.697-4.983 2.039-1.205 4.388-1.808 7.046-1.808 2.622 0 4.879.603 6.773 1.807 1.93 1.169 3.404 2.72 4.424 4.656a13.201 13.201 0 0 1 1.529 6.243c0 .402-.018.803-.054 1.205v1.37h-21.575c.109 2.08.582 3.815 1.42 5.202.874 1.351 1.948 2.373 3.222 3.067a8.754 8.754 0 0 0 4.152 1.04c1.893 0 3.477-.437 4.751-1.314 1.275-.876 2.203-2.063 2.786-3.56h4.533c-.728 2.52-2.13 4.62-4.205 6.299-2.039 1.643-4.661 2.464-7.865 2.464Zm0-24.59c-2.185 0-4.133.675-5.845 2.026-1.675 1.314-2.64 3.25-2.895 5.805h17.042c-.11-2.446-.947-4.363-2.513-5.75-1.566-1.388-3.495-2.081-5.789-2.081ZM202.697 70.81c-2.585 0-4.916-.584-6.991-1.752-2.039-1.205-3.66-2.867-4.861-4.984-1.166-2.154-1.748-4.655-1.748-7.503s.582-5.331 1.748-7.449c1.201-2.154 2.822-3.815 4.861-4.983 2.075-1.205 4.406-1.808 6.991-1.808 3.204 0 5.899.84 8.084 2.52 2.221 1.679 3.623 3.924 4.206 6.736h-4.698c-.364-1.68-1.256-2.976-2.676-3.889-1.42-.949-3.077-1.424-4.97-1.424-1.53 0-2.968.384-4.315 1.15-1.348.767-2.44 1.917-3.278 3.45-.837 1.534-1.256 3.433-1.256 5.697 0 2.263.419 4.162 1.256 5.696.838 1.533 1.93 2.701 3.278 3.505a8.584 8.584 0 0 0 4.315 1.15c1.893 0 3.55-.457 4.97-1.37 1.42-.949 2.312-2.282 2.676-3.998h4.698c-.547 2.739-1.93 4.966-4.152 6.682-2.221 1.716-4.934 2.574-8.138 2.574ZM220.302 70.153V42.988h4.151l.382 5.203c.838-1.789 2.112-3.213 3.823-4.272 1.712-1.058 3.824-1.588 6.336-1.588v4.82h-1.256c-1.602 0-3.077.292-4.424.876-1.347.548-2.422 1.497-3.223 2.848-.801 1.35-1.201 3.213-1.201 5.586v13.692h-4.588ZM250.218 70.81c-2.585 0-4.879-.584-6.882-1.752-2.003-1.205-3.587-2.867-4.752-4.984-1.129-2.118-1.693-4.619-1.693-7.503 0-2.848.564-5.331 1.693-7.449 1.129-2.154 2.695-3.815 4.698-4.983 2.039-1.205 4.387-1.808 7.045-1.808 2.622 0 4.88.603 6.773 1.807 1.93 1.169 3.405 2.72 4.424 4.656 1.02 1.935 1.53 4.016 1.53 6.243 0 .402-.018.803-.055 1.205v1.37h-21.575c.11 2.08.583 3.815 1.421 5.202.874 1.351 1.948 2.373 3.222 3.067a8.753 8.753 0 0 0 4.151 1.04c1.894 0 3.478-.437 4.752-1.314 1.275-.876 2.203-2.063 2.786-3.56h4.533c-.728 2.52-2.13 4.62-4.206 6.299-2.039 1.643-4.66 2.464-7.865 2.464Zm0-24.59c-2.185 0-4.133.675-5.844 2.026-1.675 1.314-2.64 3.25-2.895 5.805h17.041c-.109-2.446-.946-4.363-2.512-5.75-1.566-1.388-3.496-2.081-5.79-2.081ZM277.841 70.153c-2.476 0-4.424-.603-5.844-1.807-1.42-1.205-2.13-3.378-2.13-6.518V46.877h-4.698v-3.889h4.698l.601-6.517h3.987v6.517h7.974v3.889h-7.974v14.951c0 1.716.346 2.885 1.038 3.505.691.585 1.911.877 3.659.877h2.84v3.943h-4.151ZM297.544 70.81c-3.241 0-5.936-.821-8.084-2.464-2.149-1.643-3.405-3.87-3.769-6.682h4.697c.292 1.424 1.038 2.665 2.24 3.724 1.238 1.022 2.895 1.534 4.97 1.534 1.93 0 3.35-.402 4.26-1.205.911-.84 1.366-1.826 1.366-2.958 0-1.643-.601-2.738-1.803-3.286-1.165-.547-2.822-1.04-4.97-1.478a28.114 28.114 0 0 1-4.369-1.26c-1.457-.548-2.677-1.315-3.66-2.3-.983-1.023-1.475-2.355-1.475-3.998 0-2.373.874-4.309 2.622-5.806 1.784-1.533 4.188-2.3 7.21-2.3 2.876 0 5.225.73 7.046 2.19 1.857 1.425 2.931 3.47 3.222 6.135h-4.533c-.182-1.388-.783-2.465-1.803-3.231-.983-.804-2.312-1.205-3.987-1.205-1.638 0-2.913.346-3.823 1.04-.874.694-1.311 1.607-1.311 2.739 0 1.095.564 1.953 1.693 2.574 1.165.62 2.731 1.15 4.697 1.588 1.675.365 3.259.821 4.752 1.37 1.53.51 2.768 1.295 3.714 2.354.984 1.022 1.475 2.52 1.475 4.491.037 2.446-.892 4.473-2.785 6.08-1.857 1.57-4.388 2.354-7.592 2.354ZM327.019 70.153V31.816h5.353l13.764 26.726 13.655-26.726h5.407v38.337h-4.588V40.031l-12.781 24.645h-3.441l-12.781-24.59v30.067h-4.588ZM380.911 70.81c-2.258 0-4.133-.383-5.626-1.15-1.493-.767-2.604-1.789-3.332-3.067a8.266 8.266 0 0 1-1.092-4.162c0-2.775 1.056-4.911 3.168-6.408 2.112-1.497 4.988-2.245 8.63-2.245h7.319v-.33c0-2.372-.619-4.161-1.857-5.366-1.238-1.242-2.895-1.862-4.971-1.862-1.784 0-3.332.456-4.642 1.369-1.275.876-2.076 2.172-2.404 3.888h-4.697c.182-1.971.838-3.633 1.966-4.983 1.166-1.352 2.604-2.374 4.315-3.068 1.712-.73 3.532-1.095 5.462-1.095 3.787 0 6.627 1.022 8.521 3.067 1.93 2.008 2.895 4.692 2.895 8.05v16.705h-4.097l-.273-4.874c-.765 1.533-1.893 2.848-3.386 3.943-1.457 1.059-3.423 1.588-5.899 1.588Zm.71-3.888c1.748 0 3.241-.457 4.479-1.37a8.66 8.66 0 0 0 2.895-3.56c.655-1.46.983-2.993.983-4.6v-.055h-6.937c-2.695 0-4.606.475-5.735 1.424-1.092.913-1.639 2.063-1.639 3.45 0 1.425.51 2.575 1.53 3.451 1.056.84 2.53 1.26 4.424 1.26ZM400.356 70.153V42.988h4.151l.273 4.875a9.86 9.86 0 0 1 3.769-4.053c1.639-.986 3.496-1.479 5.571-1.479 3.205 0 5.754.986 7.647 2.958 1.93 1.935 2.895 4.929 2.895 8.981v15.883h-4.588v-15.39c0-5.659-2.331-8.489-6.991-8.489-2.331 0-4.279.858-5.845 2.575-1.529 1.679-2.294 4.089-2.294 7.229v14.075h-4.588ZM439.533 70.81c-2.258 0-4.133-.383-5.626-1.15-1.493-.767-2.603-1.789-3.332-3.067a8.266 8.266 0 0 1-1.092-4.162c0-2.775 1.056-4.911 3.168-6.408 2.112-1.497 4.988-2.245 8.63-2.245h7.319v-.33c0-2.372-.619-4.161-1.857-5.366-1.238-1.242-2.895-1.862-4.971-1.862-1.784 0-3.331.456-4.642 1.369-1.275.876-2.076 2.172-2.404 3.888h-4.697c.182-1.971.838-3.633 1.966-4.983 1.166-1.352 2.604-2.374 4.315-3.068 1.712-.73 3.532-1.095 5.462-1.095 3.787 0 6.627 1.022 8.521 3.067 1.93 2.008 2.895 4.692 2.895 8.05v16.705h-4.097l-.273-4.874c-.764 1.533-1.893 2.848-3.386 3.943-1.457 1.059-3.423 1.588-5.899 1.588Zm.71-3.888c1.748 0 3.241-.457 4.479-1.37a8.66 8.66 0 0 0 2.895-3.56c.655-1.46.983-2.993.983-4.6v-.055h-6.937c-2.694 0-4.606.475-5.735 1.424-1.092.913-1.639 2.063-1.639 3.45 0 1.425.51 2.575 1.53 3.451 1.056.84 2.531 1.26 4.424 1.26ZM469.684 61.61c-1.53 0-2.931-.202-4.206-.603l-2.731 2.574c.401.292.892.548 1.475.767.619.182 1.493.365 2.622.547 1.128.146 2.712.31 4.751.493 3.642.256 6.245 1.096 7.811 2.52 1.566 1.424 2.349 3.286 2.349 5.586 0 1.57-.437 3.067-1.311 4.49-.838 1.425-2.149 2.593-3.933 3.506-1.748.913-4.005 1.369-6.773 1.369-2.439 0-4.606-.329-6.499-.986-1.894-.62-3.369-1.588-4.425-2.903-1.055-1.277-1.583-2.902-1.583-4.874 0-1.022.273-2.136.819-3.34.546-1.169 1.566-2.282 3.059-3.341a13.725 13.725 0 0 1-2.076-1.041 13.173 13.173 0 0 1-1.529-1.314V63.8l4.642-4.6c-2.148-1.826-3.222-4.236-3.222-7.23 0-1.789.418-3.414 1.256-4.874.837-1.46 2.057-2.61 3.66-3.45 1.602-.877 3.55-1.315 5.844-1.315 1.566 0 2.986.22 4.26.657h9.995v3.45l-5.079.22c1.056 1.533 1.584 3.304 1.584 5.312 0 1.79-.437 3.414-1.311 4.874-.838 1.461-2.057 2.63-3.66 3.506-1.565.84-3.495 1.26-5.789 1.26Zm0-3.78c1.93 0 3.459-.493 4.588-1.478 1.165-1.023 1.748-2.483 1.748-4.382 0-1.862-.583-3.286-1.748-4.272-1.129-1.022-2.658-1.533-4.588-1.533-1.967 0-3.532.511-4.698 1.533-1.128.986-1.693 2.41-1.693 4.272 0 1.899.565 3.36 1.693 4.382 1.166.985 2.731 1.478 4.698 1.478Zm-7.975 15.828c0 1.826.765 3.177 2.294 4.053 1.53.913 3.441 1.37 5.735 1.37 2.258 0 4.06-.494 5.408-1.48 1.383-.986 2.075-2.3 2.075-3.943 0-1.168-.473-2.19-1.42-3.067-.947-.84-2.694-1.332-5.243-1.479-2.003-.146-3.733-.328-5.189-.547-1.493.803-2.476 1.661-2.95 2.574-.473.95-.71 1.789-.71 2.52ZM499.136 70.81c-2.585 0-4.879-.584-6.882-1.752-2.003-1.205-3.587-2.867-4.752-4.984-1.129-2.118-1.693-4.619-1.693-7.503 0-2.848.564-5.331 1.693-7.449 1.129-2.154 2.695-3.815 4.697-4.983 2.04-1.205 4.388-1.808 7.046-1.808 2.622 0 4.88.603 6.773 1.807 1.93 1.169 3.405 2.72 4.424 4.656 1.02 1.935 1.53 4.016 1.53 6.243 0 .402-.019.803-.055 1.205v1.37h-21.575c.11 2.08.583 3.815 1.42 5.202.874 1.351 1.949 2.373 3.223 3.067a8.753 8.753 0 0 0 4.151 1.04c1.894 0 3.478-.437 4.752-1.314 1.274-.876 2.203-2.063 2.786-3.56h4.533c-.728 2.52-2.13 4.62-4.206 6.299-2.039 1.643-4.661 2.464-7.865 2.464Zm0-24.59c-2.185 0-4.133.675-5.844 2.026-1.675 1.314-2.64 3.25-2.895 5.805h17.041c-.109-2.446-.947-4.363-2.512-5.75-1.566-1.388-3.496-2.081-5.79-2.081ZM516.96 70.153V42.988h4.151l.383 5.203c.837-1.789 2.112-3.213 3.823-4.272 1.712-1.058 3.824-1.588 6.336-1.588v4.82h-1.256c-1.602 0-3.077.292-4.424.876-1.348.548-2.422 1.497-3.223 2.848-.801 1.35-1.202 3.213-1.202 5.586v13.692h-4.588Z\"/></svg>\n`;\n","import { Directive, EventEmitter, Input, Output } from \"@angular/core\";\n\n/**\n * Base class used in `NavGroupComponent` and `NavItemComponent`\n */\n@Directive()\nexport abstract class NavBaseComponent {\n  /**\n   * Text to display in main content\n   */\n  @Input() text: string;\n\n  /**\n   * `aria-label` for main content\n   */\n  @Input() ariaLabel: string;\n\n  /**\n   * Optional icon, e.g. `\"bwi-collection\"`\n   */\n  @Input() icon: string;\n\n  /**\n   * Route to be passed to internal `routerLink`\n   */\n  @Input() route: string | any[];\n\n  /**\n   * If this item is used within a tree, set `variant` to `\"tree\"`\n   */\n  @Input() variant: \"default\" | \"tree\" = \"default\";\n\n  /**\n   * Depth level when nested inside of a `'tree'` variant\n   */\n  @Input() treeDepth = 0;\n\n  /**\n   * If `true`, do not change styles when nav item is active.\n   */\n  @Input() hideActiveStyles = false;\n\n  /**\n   * Fires when main content is clicked\n   */\n  @Output() mainContentClicked: EventEmitter<MouseEvent> = new EventEmitter();\n}\n","<div\n  class=\"tw-relative\"\n  [ngClass]=\"[\n    showActiveStyles ? 'tw-bg-background-alt4' : 'tw-bg-background-alt3',\n    fvwStyles$ | async\n  ]\"\n>\n  <div\n    [ngStyle]=\"{\n      'padding-left': (variant === 'tree' ? 2.5 : 1) + treeDepth * 1.5 + 'rem'\n    }\"\n    class=\"tw-relative tw-flex tw-items-center tw-pr-4\"\n    [ngClass]=\"[variant === 'tree' ? 'tw-py-1' : 'tw-py-2']\"\n  >\n    <div\n      #slotStart\n      class=\"[&>*:focus-visible::before]:!tw-ring-text-alt2 [&>*]:!tw-text-alt2 [&>*:hover]:!tw-border-text-alt2\"\n    >\n      <ng-content select=\"[slot-start]\"></ng-content>\n    </div>\n    <!-- Default content for #slotStart (for consistent sizing) -->\n    <div\n      *ngIf=\"slotStart.childElementCount === 0\"\n      [ngClass]=\"{\n        'tw-w-0': variant !== 'tree'\n      }\"\n    >\n      <button\n        type=\"button\"\n        class=\"tw-invisible\"\n        [bitIconButton]=\"'bwi-angle-down'\"\n        size=\"small\"\n        aria-hidden=\"true\"\n      ></button>\n    </div>\n\n    <ng-container *ngIf=\"route; then isAnchor; else isButton\"></ng-container>\n\n    <!-- Main content of `NavItem` -->\n    <ng-template #anchorAndButtonContent>\n      <i class=\"bwi bwi-fw tw-text-alt2 tw-mx-1 {{ icon }}\"></i\n      ><span [ngClass]=\"showActiveStyles ? 'tw-font-bold' : 'tw-font-semibold'\">{{ text }}</span>\n    </ng-template>\n\n    <!-- Show if a value was passed to `this.to` -->\n    <ng-template #isAnchor>\n      <!-- The `fvw` class passes focus to `this.focusVisibleWithin$` -->\n      <!-- The following `class` field should match the `#isButton` class field below -->\n      <a\n        class=\"fvw tw-w-full tw-overflow-hidden tw-text-ellipsis tw-whitespace-nowrap tw-border-none tw-bg-transparent tw-p-0 tw-text-start !tw-text-alt2 hover:tw-text-alt2 hover:tw-no-underline focus:tw-outline-none [&>:not(.bwi)]:hover:tw-underline\"\n        [routerLink]=\"route\"\n        [attr.aria-label]=\"ariaLabel || text\"\n        routerLinkActive\n        [routerLinkActiveOptions]=\"rlaOptions\"\n        [ariaCurrentWhenActive]=\"'page'\"\n        (isActiveChange)=\"setActive($event)\"\n        (click)=\"mainContentClicked.emit()\"\n      >\n        <ng-container *ngTemplateOutlet=\"anchorAndButtonContent\"></ng-container>\n      </a>\n    </ng-template>\n\n    <!-- Show if `this.to` is falsy -->\n    <ng-template #isButton>\n      <!-- Class field should match `#isAnchor` class field above -->\n      <button\n        type=\"button\"\n        class=\"fvw tw-w-full tw-overflow-hidden tw-text-ellipsis tw-whitespace-nowrap tw-border-none tw-bg-transparent tw-p-0 tw-text-start !tw-text-alt2 hover:tw-text-alt2 hover:tw-no-underline focus:tw-outline-none [&>:not(.bwi)]:hover:tw-underline\"\n        (click)=\"mainContentClicked.emit()\"\n      >\n        <ng-container *ngTemplateOutlet=\"anchorAndButtonContent\"></ng-container>\n      </button>\n    </ng-template>\n\n    <div\n      class=\"tw-flex tw-gap-1 [&>*:focus-visible::before]:!tw-ring-text-alt2 [&>*]:!tw-text-alt2 [&>*:hover]:!tw-border-text-alt2\"\n    >\n      <ng-content select=\"[slot-end]\"></ng-content>\n    </div>\n  </div>\n</div>\n","import { Component, HostListener, Input } from \"@angular/core\";\nimport { IsActiveMatchOptions } from \"@angular/router\";\nimport { BehaviorSubject, map } from \"rxjs\";\n\nimport { NavBaseComponent } from \"./nav-base.component\";\n\n@Component({\n  selector: \"bit-nav-item\",\n  templateUrl: \"./nav-item.component.html\",\n})\nexport class NavItemComponent extends NavBaseComponent {\n  /**\n   * Is `true` if `to` matches the current route\n   */\n  private _active = false;\n  protected setActive(isActive: boolean) {\n    this._active = isActive;\n  }\n  protected get showActiveStyles() {\n    return this._active && !this.hideActiveStyles;\n  }\n  protected rlaOptions: IsActiveMatchOptions = {\n    paths: \"subset\",\n    queryParams: \"exact\",\n    fragment: \"ignored\",\n    matrixParams: \"ignored\",\n  };\n\n  /**\n   * if `true`, use `exact` match for path instead of `subset`.\n   */\n  @Input() set exactMatch(val: boolean) {\n    this.rlaOptions.paths = val ? \"exact\" : \"subset\";\n  }\n\n  /**\n   * The design spec calls for the an outline to wrap the entire element when the template's anchor/button has :focus-visible.\n   * Usually, we would use :focus-within for this. However, that matches when a child element has :focus instead of :focus-visible.\n   *\n   * Currently, the browser does not have a pseudo selector that combines these two, e.g. :focus-visible-within (WICG/focus-visible#151)\n   * To make our own :focus-visible-within functionality, we use event delegation on the host and manually check if the focus target (denoted with the .fvw class) matches :focus-visible. We then map that state to some styles, so the entire component can have an outline.\n   */\n  protected focusVisibleWithin$ = new BehaviorSubject(false);\n  protected fvwStyles$ = this.focusVisibleWithin$.pipe(\n    map((value) => (value ? \"tw-z-10 tw-rounded tw-outline-none tw-ring tw-ring-text-alt2\" : \"\"))\n  );\n  @HostListener(\"focusin\", [\"$event.target\"])\n  onFocusIn(target: HTMLElement) {\n    this.focusVisibleWithin$.next(target.matches(\".fvw:focus-visible\"));\n  }\n  @HostListener(\"focusout\")\n  onFocusOut() {\n    this.focusVisibleWithin$.next(false);\n  }\n}\n","<!-- This a higher order component that composes `NavItemComponent`  -->\n<bit-nav-item\n  [text]=\"text\"\n  [icon]=\"icon\"\n  [route]=\"route\"\n  [variant]=\"variant\"\n  (mainContentClicked)=\"toggle()\"\n  [treeDepth]=\"treeDepth\"\n  (mainContentClicked)=\"mainContentClicked.emit()\"\n  [ariaLabel]=\"ariaLabel\"\n  [exactMatch]=\"exactMatch\"\n>\n  <ng-template #button>\n    <button\n      type=\"button\"\n      class=\"tw-ml-auto\"\n      [bitIconButton]=\"\n        open ? 'bwi-angle-up' : variant === 'tree' ? 'bwi-angle-right' : 'bwi-angle-down'\n      \"\n      [buttonType]=\"'main'\"\n      (click)=\"toggle($event)\"\n      size=\"small\"\n      [title]=\"'toggleCollapse' | i18n\"\n      aria-haspopup=\"true\"\n      [attr.aria-expanded]=\"open.toString()\"\n      [attr.aria-controls]=\"contentId\"\n      [attr.aria-label]=\"['toggleCollapse' | i18n, text].join(' ')\"\n    ></button>\n  </ng-template>\n\n  <!-- Show toggle to the left for trees otherwise to the right -->\n  <ng-container slot-start *ngIf=\"variant === 'tree'\">\n    <ng-container *ngTemplateOutlet=\"button\"></ng-container>\n  </ng-container>\n  <ng-container slot-end *ngIf=\"variant !== 'tree'\">\n    <ng-container *ngTemplateOutlet=\"button\"></ng-container>\n  </ng-container>\n</bit-nav-item>\n\n<!-- [attr.aria-controls] of the above button expects a unique ID on the controlled element -->\n<div\n  *ngIf=\"open\"\n  [attr.id]=\"contentId\"\n  [attr.aria-label]=\"[text, 'submenu' | i18n].join(' ')\"\n  role=\"group\"\n>\n  <ng-content></ng-content>\n</div>\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList,\n} from \"@angular/core\";\n\nimport { NavBaseComponent } from \"./nav-base.component\";\nimport { NavItemComponent } from \"./nav-item.component\";\n\n@Component({\n  selector: \"bit-nav-group\",\n  templateUrl: \"./nav-group.component.html\",\n})\nexport class NavGroupComponent extends NavBaseComponent implements AfterContentInit {\n  @ContentChildren(NavGroupComponent, {\n    descendants: true,\n  })\n  nestedGroups!: QueryList<NavGroupComponent>;\n\n  @ContentChildren(NavItemComponent, {\n    descendants: true,\n  })\n  nestedItems!: QueryList<NavItemComponent>;\n\n  /**\n   * UID for `[attr.aria-controls]`\n   */\n  protected contentId = Math.random().toString(36).substring(2);\n\n  /**\n   * Is `true` if the expanded content is visible\n   */\n  @Input()\n  open = false;\n\n  /**\n   * if `true`, use `exact` match for path instead of `subset`.\n   */\n  @Input() exactMatch: boolean;\n\n  @Output()\n  openChange = new EventEmitter<boolean>();\n\n  protected toggle(event?: MouseEvent) {\n    event?.stopPropagation();\n    this.open = !this.open;\n    this.openChange.emit(this.open);\n  }\n\n  /**\n   * - For any nested NavGroupComponents or NavItemComponents, increment the `treeDepth` by 1.\n   */\n  private initNestedStyles() {\n    if (this.variant !== \"tree\") {\n      return;\n    }\n    [...this.nestedGroups, ...this.nestedItems].forEach((navGroupOrItem) => {\n      navGroupOrItem.treeDepth += 1;\n    });\n  }\n\n  ngAfterContentInit(): void {\n    this.initNestedStyles();\n  }\n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"bit-nav-divider\",\n  templateUrl: \"./nav-divider.component.html\",\n})\nexport class NavDividerComponent {}\n","<div class=\"tw-h-px tw-w-full tw-bg-secondary-300\"></div>\n","<bit-nav-group\n  *ngIf=\"activeOrganization$ | async as activeOrganization\"\n  [text]=\"activeOrganization.name\"\n  [ariaLabel]=\"['organization' | i18n, activeOrganization.name].join(' ')\"\n  icon=\"bwi-business\"\n  [route]=\"['../', activeOrganization.id]\"\n  [(open)]=\"open\"\n  [exactMatch]=\"true\"\n>\n  <ng-container *ngIf=\"organizations$ | async as organizations\">\n    <bit-nav-item\n      *ngFor=\"let org of organizations\"\n      [text]=\"org.name\"\n      [ariaLabel]=\"['organization' | i18n, org.name].join(' ')\"\n      [route]=\"['../', org.id]\"\n      (mainContentClicked)=\"toggle()\"\n      [hideActiveStyles]=\"true\"\n    >\n    </bit-nav-item>\n  </ng-container>\n  <bit-nav-item\n    *ngIf=\"!hideNewButton\"\n    icon=\"bwi-plus\"\n    [text]=\"'newOrganization' | i18n\"\n    route=\"/create-organization\"\n  ></bit-nav-item>\n  <bit-nav-divider></bit-nav-divider>\n</bit-nav-group>\n","import { Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, map, Observable } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization/organization.service.abstraction\";\nimport type { Organization } from \"@bitwarden/common/models/domain/organization\";\n\n@Component({\n  selector: \"org-switcher\",\n  templateUrl: \"org-switcher.component.html\",\n})\nexport class OrgSwitcherComponent {\n  protected organizations$: Observable<Organization[]> =\n    this.organizationService.organizations$.pipe(\n      map((orgs) => orgs.filter(this.filter).sort((a, b) => a.name.localeCompare(b.name)))\n    );\n  protected activeOrganization$: Observable<Organization> = combineLatest([\n    this.route.paramMap,\n    this.organizations$,\n  ]).pipe(map(([params, orgs]) => orgs.find((org) => org.id === params.get(\"organizationId\"))));\n\n  /**\n   * Filter function for displayed organizations in the `org-switcher`\n   * @example\n   * const smFilter = (org: Organization) => org.canAccessSecretsManager\n   * // <org-switcher [filter]=\"smFilter\">\n   */\n  @Input()\n  filter: (org: Organization) => boolean = () => true;\n\n  /**\n   * Is `true` if the expanded content is visible\n   */\n  @Input()\n  open = false;\n  @Output()\n  openChange = new EventEmitter<boolean>();\n\n  /**\n   * Visibility of the New Organization button\n   * (Temporary; will be removed when ability to create organizations is added to SM.)\n   */\n  @Input()\n  hideNewButton = false;\n\n  constructor(private route: ActivatedRoute, private organizationService: OrganizationService) {}\n\n  protected toggle(event?: MouseEvent) {\n    event?.stopPropagation();\n    this.open = !this.open;\n    this.openChange.emit(this.open);\n  }\n}\n","<a routerLink=\".\" class=\"tw-m-5 tw-mt-7 tw-block\">\n  <bit-icon [icon]=\"logo\"></bit-icon>\n</a>\n\n<org-switcher [filter]=\"orgFilter\" [hideNewButton]=\"true\"></org-switcher>\n<bit-nav-item icon=\"bwi-collection\" [text]=\"'projects' | i18n\" route=\"projects\"></bit-nav-item>\n<bit-nav-item icon=\"bwi-key\" [text]=\"'secrets' | i18n\" route=\"secrets\"></bit-nav-item>\n<bit-nav-item\n  icon=\"bwi-wrench\"\n  [text]=\"'serviceAccounts' | i18n\"\n  route=\"service-accounts\"\n></bit-nav-item>\n<bit-nav-item\n  icon=\"bwi-trash\"\n  [text]=\"'trash' | i18n\"\n  route=\"trash\"\n  *ngIf=\"isAdmin$ | async\"\n></bit-nav-item>\n<bit-nav-group icon=\"bwi-cog\" [text]=\"'settings' | i18n\" *ngIf=\"isAdmin$ | async\">\n  <bit-nav-item [text]=\"'importData' | i18n\" route=\"settings/import\"></bit-nav-item>\n  <bit-nav-item [text]=\"'exportData' | i18n\" route=\"settings/export\"></bit-nav-item>\n</bit-nav-group>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { map } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/models/domain/organization\";\n\nimport { SecretsManagerLogo } from \"./secrets-manager-logo\";\n\n@Component({\n  selector: \"sm-navigation\",\n  templateUrl: \"./navigation.component.html\",\n})\nexport class NavigationComponent {\n  protected readonly logo = SecretsManagerLogo;\n  protected orgFilter = (org: Organization) => org.canAccessSecretsManager;\n  protected isAdmin$ = this.route.params.pipe(\n    map((params) => this.organizationService.get(params.organizationId)?.isAdmin)\n  );\n\n  constructor(private route: ActivatedRoute, private organizationService: OrganizationService) {}\n}\n","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\n\nimport { ProgressComponent } from \"./progress.component\";\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [ProgressComponent],\n  declarations: [ProgressComponent],\n})\nexport class ProgressModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { ProgressModule } from \"@bitwarden/components\";\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared\";\n\nimport { OnboardingTaskComponent } from \"./onboarding-task.component\";\nimport { OnboardingComponent } from \"./onboarding.component\";\n\n@NgModule({\n  imports: [SharedModule, ProgressModule],\n  exports: [OnboardingComponent, OnboardingTaskComponent],\n  declarations: [OnboardingComponent, OnboardingTaskComponent],\n})\nexport class OnboardingModule {}\n","<bit-dialog dialogSize=\"default\">\n  <ng-container bitDialogTitle>\n    <span>{{ data.title | i18n }}</span>\n    <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n      {{ data.details.length }}\n      {{ data.subTitle | i18n }}\n    </span>\n  </ng-container>\n\n  <div bitDialogContent>\n    {{ data.message | i18n }}\n    <bit-table>\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ data.columnTitle | i18n }}</th>\n          <th bitCell>{{ \"error\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body>\n        <tr bitRow *ngFor=\"let detail of data.details\">\n          <td bitCell>{{ detail.name }}</td>\n          <td bitCell>{{ detail.errorMessage }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </div>\n\n  <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n    <button bitButton buttonType=\"primary\" bitDialogClose type=\"button\">\n      {{ \"close\" | i18n }}\n    </button>\n  </div>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nexport interface BulkStatusDetails {\n  title: string;\n  subTitle: string;\n  columnTitle: string;\n  message: string;\n  details: BulkOperationStatus[];\n}\n\nexport class BulkOperationStatus {\n  id: string;\n  name: string;\n  errorMessage?: string;\n}\n\n@Component({\n  selector: \"sm-bulk-status-dialog\",\n  templateUrl: \"./bulk-status-dialog.component.html\",\n})\nexport class BulkStatusDialogComponent implements OnInit {\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) public data: BulkStatusDetails) {}\n\n  ngOnInit(): void {\n    // TODO remove null checks once strictNullChecks in TypeScript is turned on.\n    if (\n      !this.data.title ||\n      !this.data.subTitle ||\n      !this.data.columnTitle ||\n      !this.data.message ||\n      !(this.data.details?.length >= 1)\n    ) {\n      this.dialogRef.close();\n      throw new Error(\n        \"The bulk status dialog was not called with the appropriate operation values.\"\n      );\n    }\n  }\n}\n","export class ProjectListView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n}\n","export class ProjectView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n}\n\nexport class ProjectPermissionDetailsView extends ProjectView {\n  read: boolean;\n  write: boolean;\n}\n","import { EncString } from \"@bitwarden/common/models/domain/enc-string\";\n\nexport class ProjectRequest {\n  name: EncString;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class ProjectListItemResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class ProjectResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n\nexport class ProjectPermissionDetailsResponse extends ProjectResponse {\n  read: boolean;\n  write: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.read = this.getResponseProperty(\"Read\");\n    this.write = this.getResponseProperty(\"Write\");\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\n\nimport { ProjectListView } from \"../models/view/project-list.view\";\nimport { ProjectPermissionDetailsView, ProjectView } from \"../models/view/project.view\";\nimport { BulkOperationStatus } from \"../shared/dialogs/bulk-status-dialog.component\";\n\nimport { ProjectRequest } from \"./models/requests/project.request\";\nimport { ProjectListItemResponse } from \"./models/responses/project-list-item.response\";\nimport {\n  ProjectPermissionDetailsResponse,\n  ProjectResponse,\n} from \"./models/responses/project.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ProjectService {\n  protected _project = new Subject<ProjectView>();\n  project$ = this._project.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getByProjectId(projectId: string): Promise<ProjectPermissionDetailsView> {\n    const r = await this.apiService.send(\"GET\", \"/projects/\" + projectId, null, true, true);\n    const projectResponse = new ProjectPermissionDetailsResponse(r);\n    return await this.createProjectPermissionDetailsView(projectResponse);\n  }\n\n  async getProjects(organizationId: string): Promise<ProjectListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/projects\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, ProjectListItemResponse);\n    return await this.createProjectsListView(organizationId, results.data);\n  }\n\n  async create(organizationId: string, projectView: ProjectView): Promise<ProjectView> {\n    const request = await this.getProjectRequest(organizationId, projectView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/projects\",\n      request,\n      true,\n      true\n    );\n\n    const project = await this.createProjectView(new ProjectResponse(r));\n    this._project.next(project);\n    return project;\n  }\n\n  async update(organizationId: string, projectView: ProjectView) {\n    const request = await this.getProjectRequest(organizationId, projectView);\n    const r = await this.apiService.send(\"PUT\", \"/projects/\" + projectView.id, request, true, true);\n    this._project.next(await this.createProjectView(new ProjectResponse(r)));\n  }\n\n  async delete(projects: ProjectListView[]): Promise<BulkOperationStatus[]> {\n    const projectIds = projects.map((project) => project.id);\n    const r = await this.apiService.send(\"POST\", \"/projects/delete\", projectIds, true, true);\n    this._project.next(null);\n    return r.data.map((element: { id: string; error: string }) => {\n      const bulkOperationStatus = new BulkOperationStatus();\n      bulkOperationStatus.id = element.id;\n      bulkOperationStatus.name = projects.find((project) => project.id == element.id).name;\n      bulkOperationStatus.errorMessage = element.error;\n      return bulkOperationStatus;\n    });\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async getProjectRequest(\n    organizationId: string,\n    projectView: ProjectView\n  ): Promise<ProjectRequest> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = new ProjectRequest();\n    request.name = await this.encryptService.encrypt(projectView.name, orgKey);\n\n    return request;\n  }\n\n  private async createProjectView(\n    projectResponse: ProjectResponse | ProjectPermissionDetailsResponse\n  ) {\n    const orgKey = await this.getOrganizationKey(projectResponse.organizationId);\n\n    const projectView = new ProjectView();\n    projectView.id = projectResponse.id;\n    projectView.organizationId = projectResponse.organizationId;\n    projectView.creationDate = projectResponse.creationDate;\n    projectView.revisionDate = projectResponse.revisionDate;\n    projectView.name = await this.encryptService.decryptToUtf8(\n      new EncString(projectResponse.name),\n      orgKey\n    );\n    return projectView;\n  }\n\n  private async createProjectPermissionDetailsView(\n    projectResponse: ProjectPermissionDetailsResponse\n  ): Promise<ProjectPermissionDetailsView> {\n    return {\n      ...(await this.createProjectView(projectResponse)),\n      read: projectResponse.read,\n      write: projectResponse.write,\n    };\n  }\n\n  private async createProjectsListView(\n    organizationId: string,\n    projects: ProjectListItemResponse[]\n  ): Promise<ProjectListView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      projects.map(async (s: ProjectListItemResponse) => {\n        const projectListView = new ProjectListView();\n        projectListView.id = s.id;\n        projectListView.organizationId = s.organizationId;\n        projectListView.name = await this.encryptService.decryptToUtf8(\n          new EncString(s.name),\n          orgKey\n        );\n        projectListView.creationDate = s.creationDate;\n        projectListView.revisionDate = s.revisionDate;\n        return projectListView;\n      })\n    );\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"small\">\n    <ng-container bitDialogTitle>\n      <span>{{ title | i18n }}</span>\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        <ng-container *ngIf=\"data.projects.length == 1\">\n          {{ data.projects[0].name }}\n        </ng-container>\n        <ng-container *ngIf=\"data.projects.length > 1\">\n          {{ data.projects.length }}\n          {{ \"projects\" | i18n }}\n        </ng-container>\n      </span>\n    </ng-container>\n\n    <div bitDialogContent>\n      <bit-callout type=\"warning\" [title]=\"'warning' | i18n\">\n        {{ dialogContent }}\n      </bit-callout>\n      <bit-form-field>\n        <bit-label>{{ dialogConfirmationLabel }}</bit-label>\n        <input bitInput formControlName=\"confirmDelete\" />\n      </bit-form-field>\n    </div>\n\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button type=\"submit\" bitButton buttonType=\"danger\" bitFormButton>\n        {{ title | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </div>\n  </bit-dialog>\n</form>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport {\n  FormControl,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  AbstractControl,\n} from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport {\n  BulkOperationStatus,\n  BulkStatusDetails,\n  BulkStatusDialogComponent,\n} from \"../../shared/dialogs/bulk-status-dialog.component\";\nimport { ProjectService } from \"../project.service\";\n\nexport interface ProjectDeleteOperation {\n  projects: ProjectListView[];\n}\n\n@Component({\n  selector: \"sm-project-delete-dialog\",\n  templateUrl: \"./project-delete-dialog.component.html\",\n})\nexport class ProjectDeleteDialogComponent implements OnInit {\n  formGroup = new FormGroup({\n    confirmDelete: new FormControl(\"\", [this.matchConfirmationMessageValidator()]),\n  });\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: ProjectDeleteOperation,\n    private projectService: ProjectService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private dialogService: DialogService\n  ) {}\n\n  ngOnInit(): void {\n    if (!(this.data.projects?.length >= 1)) {\n      this.dialogRef.close();\n      throw new Error(\n        \"The project delete dialog was not called with the appropriate operation values.\"\n      );\n    }\n  }\n\n  get title() {\n    return this.data.projects.length === 1 ? \"deleteProject\" : \"deleteProjects\";\n  }\n\n  get dialogContent() {\n    return this.data.projects.length === 1\n      ? this.i18nService.t(\"deleteProjectDialogMessage\", this.data.projects[0].name)\n      : this.i18nService.t(\"deleteProjectsDialogMessage\");\n  }\n\n  get dialogConfirmationLabel() {\n    return this.i18nService.t(\"deleteProjectInputLabel\", this.dialogConfirmationMessage);\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    await this.delete();\n    this.dialogRef.close();\n  };\n\n  async delete() {\n    const bulkResponses = await this.projectService.delete(this.data.projects);\n\n    if (bulkResponses.find((response) => response.errorMessage)) {\n      this.openBulkStatusDialog(bulkResponses.filter((response) => response.errorMessage));\n      return;\n    }\n\n    const message = this.data.projects.length === 1 ? \"deleteProjectToast\" : \"deleteProjectsToast\";\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  }\n\n  openBulkStatusDialog(bulkStatusResults: BulkOperationStatus[]) {\n    this.dialogService.open<unknown, BulkStatusDetails>(BulkStatusDialogComponent, {\n      data: {\n        title: \"deleteProjects\",\n        subTitle: \"projects\",\n        columnTitle: \"projectName\",\n        message: \"bulkDeleteProjectsErrorMessage\",\n        details: bulkStatusResults,\n      },\n    });\n  }\n\n  private get dialogConfirmationMessage() {\n    return this.data.projects?.length === 1\n      ? this.i18nService.t(\"deleteProjectConfirmMessage\", this.data.projects[0].name)\n      : this.i18nService.t(\"deleteProjectsConfirmMessage\", this.data.projects?.length.toString());\n  }\n\n  private matchConfirmationMessageValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (this.dialogConfirmationMessage.toLowerCase() == control.value.toLowerCase()) {\n        return null;\n      } else {\n        return {\n          confirmationDoesntMatchError: {\n            message: this.i18nService.t(\"smConfirmationRequired\"),\n          },\n        };\n      }\n    };\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\n\nimport { ProjectView } from \"../../models/view/project.view\";\nimport { ProjectService } from \"../../projects/project.service\";\n\nexport enum OperationType {\n  Add,\n  Edit,\n}\n\nexport interface ProjectOperation {\n  organizationId: string;\n  operation: OperationType;\n  projectId?: string;\n}\n\n@Component({\n  selector: \"sm-project-dialog\",\n  templateUrl: \"./project-dialog.component.html\",\n})\nexport class ProjectDialogComponent implements OnInit {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", [Validators.required]),\n  });\n  protected loading = false;\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: ProjectOperation,\n    private projectService: ProjectService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private router: Router\n  ) {}\n\n  async ngOnInit() {\n    if (this.data.operation === OperationType.Edit && this.data.projectId) {\n      await this.loadData();\n    } else if (this.data.operation !== OperationType.Add) {\n      this.dialogRef.close();\n      throw new Error(`The project dialog was not called with the appropriate operation values.`);\n    }\n  }\n\n  async loadData() {\n    this.loading = true;\n    const project: ProjectView = await this.projectService.getByProjectId(this.data.projectId);\n    this.loading = false;\n    this.formGroup.setValue({ name: project.name });\n  }\n\n  get title() {\n    return this.data.operation === OperationType.Add ? \"newProject\" : \"editProject\";\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const projectView = this.getProjectView();\n    if (this.data.operation === OperationType.Add) {\n      const newProject = await this.createProject(projectView);\n      this.router.navigate([\"sm\", this.data.organizationId, \"projects\", newProject.id]);\n    } else {\n      projectView.id = this.data.projectId;\n      await this.updateProject(projectView);\n    }\n    this.dialogRef.close();\n  };\n\n  private async createProject(projectView: ProjectView) {\n    const newProject = await this.projectService.create(this.data.organizationId, projectView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"projectCreated\"));\n    return newProject;\n  }\n\n  private async updateProject(projectView: ProjectView) {\n    await this.projectService.update(this.data.organizationId, projectView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"projectSaved\"));\n  }\n\n  private getProjectView() {\n    const projectView = new ProjectView();\n    projectView.organizationId = this.data.organizationId;\n    projectView.name = this.formGroup.value.name;\n    return projectView;\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"small\">\n    <span bitDialogTitle>{{ title | i18n }}</span>\n    <span bitDialogContent>\n      <div *ngIf=\"loading\" class=\"tw-text-center\">\n        <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n      </div>\n      <bit-form-field *ngIf=\"!loading\">\n        <bit-label>{{ \"projectName\" | i18n }}</bit-label>\n        <input formControlName=\"name\" maxlength=\"1000\" bitInput />\n      </bit-form-field>\n    </span>\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"save\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </div>\n  </bit-dialog>\n</form>\n","import { SecretProjectView } from \"./secret-project.view\";\n\nexport class SecretListView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectView[];\n}\n","export class SecretProjectView {\n  id: string;\n  name: string;\n}\n","import { SecretProjectView } from \"./secret-project.view\";\n\nexport class SecretView {\n  id: string;\n  organizationId: string;\n  name: string;\n  value: string;\n  note: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectView[];\n}\n","export class SecretRequest {\n  key: string;\n  value: string;\n  note: string;\n  projectIds?: string[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class SecretProjectResponse extends BaseResponse {\n  id: string;\n  name: string;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.id = this.getResponseProperty(\"Id\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretProjectResponse } from \"./secret-project.response\";\n\nexport class SecretListItemResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectResponse[];\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Key\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n\n    const project = this.getResponseProperty(\"projects\");\n    this.projects = project == null ? null : project.map((k: any) => new SecretProjectResponse(k));\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretListItemResponse } from \"./secret-list-item.response\";\nimport { SecretProjectResponse } from \"./secret-project.response\";\n\nexport class SecretWithProjectsListResponse extends BaseResponse {\n  secrets: SecretListItemResponse[];\n  projects: SecretProjectResponse[];\n\n  constructor(response: any) {\n    super(response);\n    const secrets = this.getResponseProperty(\"secrets\");\n    const projects = this.getResponseProperty(\"projects\");\n    this.projects =\n      projects == null ? null : projects.map((k: any) => new SecretProjectResponse(k));\n    this.secrets = secrets == null ? [] : secrets.map((dr: any) => new SecretListItemResponse(dr));\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretProjectResponse } from \"./secret-project.response\";\n\nexport class SecretResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  value: string;\n  note: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectResponse[];\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Key\");\n    this.value = this.getResponseProperty(\"Value\");\n    this.note = this.getResponseProperty(\"Note\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n\n    const projects = this.getResponseProperty(\"Projects\");\n    this.projects =\n      projects == null ? null : projects.map((k: any) => new SecretProjectResponse(k));\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport { SecretProjectView } from \"../models/view/secret-project.view\";\nimport { SecretView } from \"../models/view/secret.view\";\nimport { BulkOperationStatus } from \"../shared/dialogs/bulk-status-dialog.component\";\n\nimport { SecretRequest } from \"./requests/secret.request\";\nimport { SecretListItemResponse } from \"./responses/secret-list-item.response\";\nimport { SecretProjectResponse } from \"./responses/secret-project.response\";\nimport { SecretWithProjectsListResponse } from \"./responses/secret-with-projects-list.response\";\nimport { SecretResponse } from \"./responses/secret.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SecretService {\n  protected _secret: Subject<SecretView> = new Subject();\n\n  secret$ = this._secret.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getBySecretId(secretId: string): Promise<SecretView> {\n    const r = await this.apiService.send(\"GET\", \"/secrets/\" + secretId, null, true, true);\n    const secretResponse = new SecretResponse(r);\n\n    return await this.createSecretView(secretResponse);\n  }\n\n  async getSecrets(organizationId: string): Promise<SecretListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/secrets\",\n      null,\n      true,\n      true\n    );\n\n    const results = new SecretWithProjectsListResponse(r);\n    return await this.createSecretsListView(organizationId, results);\n  }\n\n  async getSecretsByProject(organizationId: string, projectId: string): Promise<SecretListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/projects/\" + projectId + \"/secrets\",\n      null,\n      true,\n      true\n    );\n\n    const results = new SecretWithProjectsListResponse(r);\n    return await this.createSecretsListView(organizationId, results);\n  }\n\n  async create(organizationId: string, secretView: SecretView) {\n    const request = await this.getSecretRequest(organizationId, secretView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/secrets\",\n      request,\n      true,\n      true\n    );\n    this._secret.next(await this.createSecretView(new SecretResponse(r)));\n  }\n\n  async update(organizationId: string, secretView: SecretView) {\n    const request = await this.getSecretRequest(organizationId, secretView);\n    const r = await this.apiService.send(\"PUT\", \"/secrets/\" + secretView.id, request, true, true);\n    this._secret.next(await this.createSecretView(new SecretResponse(r)));\n  }\n\n  async delete(secrets: SecretListView[]): Promise<BulkOperationStatus[]> {\n    const secretIds = secrets.map((secret) => secret.id);\n    const r = await this.apiService.send(\"POST\", \"/secrets/delete\", secretIds, true, true);\n\n    this._secret.next(null);\n    return r.data.map((element: { id: string; error: string }) => {\n      const bulkOperationStatus = new BulkOperationStatus();\n      bulkOperationStatus.id = element.id;\n      bulkOperationStatus.name = secrets.find((secret) => secret.id == element.id).name;\n      bulkOperationStatus.errorMessage = element.error;\n      return bulkOperationStatus;\n    });\n  }\n\n  async getTrashedSecrets(organizationId: string): Promise<SecretListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/secrets/\" + organizationId + \"/trash\",\n      null,\n      true,\n      true\n    );\n\n    return await this.createSecretsListView(organizationId, new SecretWithProjectsListResponse(r));\n  }\n\n  async deleteTrashed(organizationId: string, secretIds: string[]) {\n    await this.apiService.send(\n      \"POST\",\n      \"/secrets/\" + organizationId + \"/trash/empty\",\n      secretIds,\n      true,\n      true\n    );\n\n    this._secret.next(null);\n  }\n\n  async restoreTrashed(organizationId: string, secretIds: string[]) {\n    await this.apiService.send(\n      \"POST\",\n      \"/secrets/\" + organizationId + \"/trash/restore\",\n      secretIds,\n      true,\n      true\n    );\n\n    this._secret.next(null);\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async getSecretRequest(\n    organizationId: string,\n    secretView: SecretView\n  ): Promise<SecretRequest> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = new SecretRequest();\n    const [key, value, note] = await Promise.all([\n      this.encryptService.encrypt(secretView.name, orgKey),\n      this.encryptService.encrypt(secretView.value, orgKey),\n      this.encryptService.encrypt(secretView.note, orgKey),\n    ]);\n    request.key = key.encryptedString;\n    request.value = value.encryptedString;\n    request.note = note.encryptedString;\n    request.projectIds = [];\n\n    secretView.projects?.forEach((e) => request.projectIds.push(e.id));\n\n    return request;\n  }\n\n  private async createSecretView(secretResponse: SecretResponse): Promise<SecretView> {\n    const orgKey = await this.getOrganizationKey(secretResponse.organizationId);\n\n    const secretView = new SecretView();\n    secretView.id = secretResponse.id;\n    secretView.organizationId = secretResponse.organizationId;\n    secretView.creationDate = secretResponse.creationDate;\n    secretView.revisionDate = secretResponse.revisionDate;\n\n    const [name, value, note] = await Promise.all([\n      this.encryptService.decryptToUtf8(new EncString(secretResponse.name), orgKey),\n      this.encryptService.decryptToUtf8(new EncString(secretResponse.value), orgKey),\n      this.encryptService.decryptToUtf8(new EncString(secretResponse.note), orgKey),\n    ]);\n    secretView.name = name;\n    secretView.value = value;\n    secretView.note = note;\n\n    if (secretResponse.projects != null) {\n      secretView.projects = await this.decryptProjectsMappedToSecrets(\n        orgKey,\n        secretResponse.projects\n      );\n    }\n\n    return secretView;\n  }\n\n  private async createSecretsListView(\n    organizationId: string,\n    secrets: SecretWithProjectsListResponse\n  ): Promise<SecretListView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n\n    const projectsMappedToSecretsView = await this.decryptProjectsMappedToSecrets(\n      orgKey,\n      secrets.projects\n    );\n\n    return await Promise.all(\n      secrets.secrets.map(async (s: SecretListItemResponse) => {\n        const secretListView = new SecretListView();\n        secretListView.id = s.id;\n        secretListView.organizationId = s.organizationId;\n        secretListView.name = await this.encryptService.decryptToUtf8(\n          new EncString(s.name),\n          orgKey\n        );\n        secretListView.creationDate = s.creationDate;\n        secretListView.revisionDate = s.revisionDate;\n\n        const projectIds = s.projects?.map((p) => p.id);\n        secretListView.projects = projectsMappedToSecretsView.filter((p) =>\n          projectIds.includes(p.id)\n        );\n\n        return secretListView;\n      })\n    );\n  }\n\n  private async decryptProjectsMappedToSecrets(\n    orgKey: SymmetricCryptoKey,\n    projects: SecretProjectResponse[]\n  ): Promise<SecretProjectView[]> {\n    return await Promise.all(\n      projects.map(async (s: SecretProjectResponse) => {\n        const projectsMappedToSecretView = new SecretProjectView();\n        projectsMappedToSecretView.id = s.id;\n        projectsMappedToSecretView.name = await this.encryptService.decryptToUtf8(\n          new EncString(s.name),\n          orgKey\n        );\n        return projectsMappedToSecretView;\n      })\n    );\n  }\n}\n","<bit-simple-dialog>\n  <span bitDialogTitle>{{ title | i18n }}</span>\n  <span bitDialogContent>\n    <div *ngIf=\"showSoftDeleteSecretWarning\">\n      {{ \"softDeleteSecretWarning\" | i18n }}\n    </div>\n    {{ \"deleteItemConfirmation\" | i18n }}\n  </span>\n  <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n    <button type=\"button\" bitButton buttonType=\"primary\" [bitAction]=\"delete\">\n      {{ submitButtonText | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </div>\n</bit-simple-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { SecretListView } from \"../../models/view/secret-list.view\";\nimport {\n  BulkOperationStatus,\n  BulkStatusDetails,\n  BulkStatusDialogComponent,\n} from \"../../shared/dialogs/bulk-status-dialog.component\";\nimport { SecretService } from \"../secret.service\";\n\nexport interface SecretDeleteOperation {\n  secrets: SecretListView[];\n}\n\n@Component({\n  selector: \"sm-secret-delete-dialog\",\n  templateUrl: \"./secret-delete.component.html\",\n})\nexport class SecretDeleteDialogComponent {\n  constructor(\n    public dialogRef: DialogRef,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    @Inject(DIALOG_DATA) private data: SecretDeleteOperation,\n    private dialogService: DialogService\n  ) {}\n\n  showSoftDeleteSecretWarning = this.data.secrets.length === 1;\n\n  get title() {\n    return this.data.secrets.length === 1 ? \"deleteSecret\" : \"deleteSecrets\";\n  }\n\n  get submitButtonText() {\n    return this.data.secrets.length === 1 ? \"deleteSecret\" : \"deleteSecrets\";\n  }\n\n  delete = async () => {\n    const bulkResponses = await this.secretService.delete(this.data.secrets);\n\n    if (bulkResponses.find((response) => response.errorMessage)) {\n      this.openBulkStatusDialog(bulkResponses.filter((response) => response.errorMessage));\n      this.dialogRef.close(true);\n      return;\n    }\n\n    const message =\n      this.data.secrets.length === 1 ? \"softDeleteSuccessToast\" : \"softDeletesSuccessToast\";\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n\n    this.dialogRef.close(true);\n  };\n\n  openBulkStatusDialog(bulkStatusResults: BulkOperationStatus[]) {\n    this.dialogService.open<unknown, BulkStatusDetails>(BulkStatusDialogComponent, {\n      data: {\n        title: \"deleteSecrets\",\n        subTitle: \"secrets\",\n        columnTitle: \"name\",\n        message: \"bulkDeleteSecretsErrorMessage\",\n        details: bulkStatusResults,\n      },\n    });\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { lastValueFrom, Subject } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport { SecretListView } from \"../../models/view/secret-list.view\";\nimport { SecretProjectView } from \"../../models/view/secret-project.view\";\nimport { SecretView } from \"../../models/view/secret.view\";\nimport { ProjectService } from \"../../projects/project.service\";\nimport { SecretService } from \"../secret.service\";\n\nimport { SecretDeleteDialogComponent, SecretDeleteOperation } from \"./secret-delete.component\";\n\nexport enum OperationType {\n  Add,\n  Edit,\n}\n\nexport interface SecretOperation {\n  organizationId: string;\n  operation: OperationType;\n  projectId?: string;\n  secretId?: string;\n}\n\n@Component({\n  selector: \"sm-secret-dialog\",\n  templateUrl: \"./secret-dialog.component.html\",\n})\nexport class SecretDialogComponent implements OnInit {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", [Validators.required]),\n    value: new FormControl(\"\", [Validators.required]),\n    notes: new FormControl(\"\"),\n    project: new FormControl(\"\", [Validators.required]),\n  });\n\n  protected loading = false;\n  projects: ProjectListView[];\n\n  private destroy$ = new Subject<void>();\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: SecretOperation,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private projectService: ProjectService,\n    private dialogService: DialogService\n  ) {}\n\n  async ngOnInit() {\n    this.projects = await this.projectService\n      .getProjects(this.data.organizationId)\n      .then((projects) => projects.sort((a, b) => a.name.localeCompare(b.name)));\n\n    if (this.data.operation === OperationType.Edit && this.data.secretId) {\n      await this.loadData();\n    } else if (this.data.operation !== OperationType.Add) {\n      this.dialogRef.close();\n      throw new Error(`The secret dialog was not called with the appropriate operation values.`);\n    }\n\n    if (this.data.projectId) {\n      this.formGroup.get(\"project\").setValue(this.data.projectId);\n    }\n  }\n\n  async loadData() {\n    this.loading = true;\n    const secret: SecretView = await this.secretService.getBySecretId(this.data.secretId);\n    this.formGroup.setValue({\n      name: secret.name,\n      value: secret.value,\n      notes: secret.note,\n      project: secret.projects[0]?.id ?? \"\",\n    });\n    this.loading = false;\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  get title() {\n    return this.data.operation === OperationType.Add ? \"newSecret\" : \"editSecret\";\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const secretView = this.getSecretView();\n    if (this.data.operation === OperationType.Add) {\n      await this.createSecret(secretView);\n    } else {\n      secretView.id = this.data.secretId;\n      await this.updateSecret(secretView);\n    }\n    this.dialogRef.close();\n  };\n\n  get deleteButtonIsVisible(): boolean {\n    return this.data.operation === OperationType.Edit;\n  }\n\n  protected openDeleteSecretDialog() {\n    const secretListView: SecretListView[] = this.getSecretListView();\n\n    const dialogRef = this.dialogService.open<unknown, SecretDeleteOperation>(\n      SecretDeleteDialogComponent,\n      {\n        data: {\n          secrets: secretListView,\n        },\n      }\n    );\n\n    // If the secret is deleted, chain close this dialog after the delete dialog\n    lastValueFrom(dialogRef.closed).then(\n      (closeData) => closeData !== undefined && this.dialogRef.close()\n    );\n  }\n\n  private async createSecret(secretView: SecretView) {\n    await this.secretService.create(this.data.organizationId, secretView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"secretCreated\"));\n  }\n\n  private async updateSecret(secretView: SecretView) {\n    await this.secretService.update(this.data.organizationId, secretView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"secretEdited\"));\n  }\n\n  private getSecretView() {\n    const secretView = new SecretView();\n    secretView.organizationId = this.data.organizationId;\n    secretView.name = this.formGroup.value.name;\n    secretView.value = this.formGroup.value.value;\n    secretView.note = this.formGroup.value.notes;\n    secretView.projects = [this.projects.find((p) => p.id == this.formGroup.value.project)];\n    return secretView;\n  }\n\n  private getSecretListView() {\n    const secretListViews: SecretListView[] = [];\n    const emptyProjects: SecretProjectView[] = [];\n\n    const secretListView = new SecretListView();\n\n    if (this.formGroup.value.project) {\n      secretListView.projects = [this.projects.find((p) => p.id == this.formGroup.value.project)];\n    } else {\n      secretListView.projects = emptyProjects;\n    }\n\n    secretListView.organizationId = this.data.organizationId;\n    secretListView.id = this.data.secretId;\n    secretListView.name = this.formGroup.value.name;\n    secretListViews.push(secretListView);\n    return secretListViews;\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"default\">\n    <ng-container bitDialogTitle>{{ title | i18n }}</ng-container>\n    <div bitDialogContent>\n      <div *ngIf=\"loading\" class=\"tw-text-center\">\n        <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n      </div>\n      <ng-container *ngIf=\"!loading\">\n        <div class=\"tw-flex tw-gap-4 tw-pt-4\">\n          <bit-form-field class=\"tw-w-1/3\">\n            <bit-label for=\"secret-name\">{{ \"name\" | i18n }}</bit-label>\n            <input formControlName=\"name\" bitInput />\n          </bit-form-field>\n          <bit-form-field class=\"tw-w-full\">\n            <bit-label>{{ \"value\" | i18n }}</bit-label>\n            <textarea bitInput rows=\"4\" formControlName=\"value\"></textarea>\n          </bit-form-field>\n        </div>\n        <bit-form-field>\n          <bit-label>{{ \"notes\" | i18n }}</bit-label>\n          <textarea bitInput rows=\"4\" formControlName=\"notes\"></textarea>\n        </bit-form-field>\n\n        <hr />\n\n        <bit-form-field class=\"tw-mt-3 tw-mb-0\">\n          <bit-label>{{ \"project\" | i18n }}</bit-label>\n          <select bitInput name=\"project\" formControlName=\"project\">\n            <option value=\"\">{{ \"selectPlaceholder\" | i18n }}</option>\n            <option *ngFor=\"let f of projects\" [value]=\"f.id\">\n              {{ f.name }}\n            </option>\n          </select>\n        </bit-form-field>\n      </ng-container>\n    </div>\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"save\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n      <button\n        *ngIf=\"deleteButtonIsVisible\"\n        class=\"tw-ml-auto\"\n        type=\"button\"\n        bitIconButton=\"bwi-trash\"\n        buttonType=\"danger\"\n        bitFormButton\n        (click)=\"openDeleteSecretDialog()\"\n      ></button>\n    </div>\n  </bit-dialog>\n</form>\n","export class ServiceAccountView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n}\n","import { EncString } from \"@bitwarden/common/models/domain/enc-string\";\n\nexport class ServiceAccountRequest {\n  name: EncString;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class ServiceAccountResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\n\nimport { ServiceAccountView } from \"../models/view/service-account.view\";\nimport { BulkOperationStatus } from \"../shared/dialogs/bulk-status-dialog.component\";\n\nimport { ServiceAccountRequest } from \"./models/requests/service-account.request\";\nimport { ServiceAccountResponse } from \"./models/responses/service-account.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ServiceAccountService {\n  protected _serviceAccount: Subject<ServiceAccountView> = new Subject();\n\n  serviceAccount$ = this._serviceAccount.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getServiceAccounts(organizationId: string): Promise<ServiceAccountView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/service-accounts\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, ServiceAccountResponse);\n    return await this.createServiceAccountViews(organizationId, results.data);\n  }\n\n  async getByServiceAccountId(\n    serviceAccountId: string,\n    organizationId: string\n  ): Promise<ServiceAccountView> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId,\n      null,\n      true,\n      true\n    );\n\n    return await this.createServiceAccountView(orgKey, new ServiceAccountResponse(r));\n  }\n\n  async update(\n    serviceAccountId: string,\n    organizationId: string,\n    serviceAccountView: ServiceAccountView\n  ) {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = await this.getServiceAccountRequest(orgKey, serviceAccountView);\n    const r = await this.apiService.send(\n      \"PUT\",\n      \"/service-accounts/\" + serviceAccountId,\n      request,\n      true,\n      true\n    );\n    this._serviceAccount.next(\n      await this.createServiceAccountView(orgKey, new ServiceAccountResponse(r))\n    );\n  }\n\n  async create(organizationId: string, serviceAccountView: ServiceAccountView) {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = await this.getServiceAccountRequest(orgKey, serviceAccountView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/service-accounts\",\n      request,\n      true,\n      true\n    );\n    this._serviceAccount.next(\n      await this.createServiceAccountView(orgKey, new ServiceAccountResponse(r))\n    );\n  }\n\n  async delete(serviceAccounts: ServiceAccountView[]): Promise<BulkOperationStatus[]> {\n    const ids = serviceAccounts.map((serviceAccount) => serviceAccount.id);\n    const r = await this.apiService.send(\"POST\", \"/service-accounts/delete\", ids, true, true);\n\n    this._serviceAccount.next(null);\n\n    return r.data.map((element: { id: string; error: string }) => {\n      const bulkOperationStatus = new BulkOperationStatus();\n      bulkOperationStatus.id = element.id;\n      bulkOperationStatus.name = serviceAccounts.find((sa) => sa.id == element.id).name;\n      bulkOperationStatus.errorMessage = element.error;\n      return bulkOperationStatus;\n    });\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async getServiceAccountRequest(\n    organizationKey: SymmetricCryptoKey,\n    serviceAccountView: ServiceAccountView\n  ) {\n    const request = new ServiceAccountRequest();\n    request.name = await this.encryptService.encrypt(serviceAccountView.name, organizationKey);\n    return request;\n  }\n\n  private async createServiceAccountView(\n    organizationKey: SymmetricCryptoKey,\n    serviceAccountResponse: ServiceAccountResponse\n  ): Promise<ServiceAccountView> {\n    const serviceAccountView = new ServiceAccountView();\n    serviceAccountView.id = serviceAccountResponse.id;\n    serviceAccountView.organizationId = serviceAccountResponse.organizationId;\n    serviceAccountView.creationDate = serviceAccountResponse.creationDate;\n    serviceAccountView.revisionDate = serviceAccountResponse.revisionDate;\n    serviceAccountView.name = await this.encryptService.decryptToUtf8(\n      new EncString(serviceAccountResponse.name),\n      organizationKey\n    );\n    return serviceAccountView;\n  }\n\n  private async createServiceAccountViews(\n    organizationId: string,\n    serviceAccountResponses: ServiceAccountResponse[]\n  ): Promise<ServiceAccountView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      serviceAccountResponses.map(async (s: ServiceAccountResponse) => {\n        return await this.createServiceAccountView(orgKey, s);\n      })\n    );\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\n\nimport { ServiceAccountView } from \"../../models/view/service-account.view\";\nimport { ServiceAccountService } from \"../service-account.service\";\n\nexport enum OperationType {\n  Add,\n  Edit,\n}\n\nexport interface ServiceAccountOperation {\n  organizationId: string;\n  serviceAccountId?: string;\n  operation: OperationType;\n}\n\n@Component({\n  selector: \"sm-service-account-dialog\",\n  templateUrl: \"./service-account-dialog.component.html\",\n})\nexport class ServiceAccountDialogComponent {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", [Validators.required]),\n  });\n\n  protected loading = false;\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: ServiceAccountOperation,\n    private serviceAccountService: ServiceAccountService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService\n  ) {}\n\n  async ngOnInit() {\n    if (this.data.operation == OperationType.Edit) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    this.loading = true;\n    const serviceAccount: ServiceAccountView =\n      await this.serviceAccountService.getByServiceAccountId(\n        this.data.serviceAccountId,\n        this.data.organizationId\n      );\n    this.formGroup.patchValue({ name: serviceAccount.name });\n    this.loading = false;\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const serviceAccountView = this.getServiceAccountView();\n    let serviceAccountMessage: string;\n\n    if (this.data.operation == OperationType.Add) {\n      await this.serviceAccountService.create(this.data.organizationId, serviceAccountView);\n      serviceAccountMessage = this.i18nService.t(\"serviceAccountCreated\");\n    } else {\n      await this.serviceAccountService.update(\n        this.data.serviceAccountId,\n        this.data.organizationId,\n        serviceAccountView\n      );\n      serviceAccountMessage = this.i18nService.t(\"serviceAccountUpdated\");\n    }\n\n    this.platformUtilsService.showToast(\"success\", null, serviceAccountMessage);\n    this.dialogRef.close();\n  };\n\n  private getServiceAccountView() {\n    const serviceAccountView = new ServiceAccountView();\n    serviceAccountView.organizationId = this.data.organizationId;\n    serviceAccountView.name = this.formGroup.value.name;\n    return serviceAccountView;\n  }\n\n  get title() {\n    return this.data.operation === OperationType.Add ? \"newServiceAccount\" : \"editServiceAccount\";\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"small\">\n    <ng-container bitDialogTitle>{{ title | i18n }}</ng-container>\n    <div bitDialogContent>\n      <div *ngIf=\"loading\" class=\"tw-text-center\">\n        <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n      </div>\n      <div *ngIf=\"!loading\">\n        <bit-form-field>\n          <bit-label>{{ \"serviceAccountName\" | i18n }}</bit-label>\n          <input formControlName=\"name\" maxlength=\"1000\" bitInput />\n        </bit-form-field>\n      </div>\n    </div>\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"save\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </div>\n  </bit-dialog>\n</form>\n","import { coerceBooleanProperty } from \"@angular/cdk/coercion\";\nimport { Directive, HostBinding, Input } from \"@angular/core\";\n\ntype TypographyType = \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\" | \"body1\" | \"body2\" | \"helper\";\n\nconst styles: Record<TypographyType, string[]> = {\n  h1: [\"tw-text-3xl\", \"tw-font-semibold\"],\n  h2: [\"tw-text-2xl\", \"tw-font-semibold\"],\n  h3: [\"tw-text-xl\", \"tw-font-semibold\"],\n  h4: [\"tw-text-lg\", \"tw-font-semibold\"],\n  h5: [\"tw-text-base\", \"tw-font-semibold\"],\n  h6: [\"tw-text-sm\", \"tw-font-semibold\"],\n  body1: [\"tw-text-base\"],\n  body2: [\"tw-text-sm\"],\n  helper: [\"tw-text-xs\"],\n};\n\nconst margins: Record<TypographyType, string[]> = {\n  h1: [\"tw-mb-2\"],\n  h2: [\"tw-mb-2\"],\n  h3: [\"tw-mb-2\"],\n  h4: [\"tw-mb-2\"],\n  h5: [\"tw-mb-2\"],\n  h6: [\"tw-mb-2\"],\n  body1: [],\n  body2: [],\n  helper: [],\n};\n\n@Directive({\n  selector: \"[bitTypography]\",\n})\nexport class TypographyDirective {\n  @Input(\"bitTypography\") bitTypography: TypographyType;\n\n  private _margin = true;\n  @Input()\n  set noMargin(value: boolean | \"\") {\n    this._margin = !coerceBooleanProperty(value);\n  }\n\n  @HostBinding(\"class\") get classList() {\n    return styles[this.bitTypography].concat(this._margin ? margins[this.bitTypography] : []);\n  }\n}\n","<header\n  *ngIf=\"routeData$ | async as routeData\"\n  class=\"-tw-m-6 tw-mb-3 tw-flex tw-flex-col tw-p-6\"\n  [ngClass]=\"{\n    'tw-border-0 tw-border-b tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-pb-0':\n      tabsContainer.childElementCount !== 0\n  }\"\n>\n  <div class=\"tw-flex\">\n    <div class=\"tw-flex tw-min-w-0 tw-flex-1 tw-flex-col tw-gap-2\">\n      <ng-content select=\"[slot=breadcrumbs]\"></ng-content>\n      <div #titleContainer [ngClass]=\"{ 'tw-hidden': titleContainer.childElementCount === 0 }\">\n        <ng-content select=\"[slot=title]\"></ng-content>\n      </div>\n      <h1\n        *ngIf=\"titleContainer.childElementCount === 0\"\n        bitTypography=\"h1\"\n        noMargin\n        class=\"tw-m-0 tw-mr-2 tw-truncate tw-leading-10\"\n        [title]=\"title || (routeData.titleId | i18n)\"\n      >\n        <i *ngIf=\"icon\" class=\"bwi {{ icon }}\" aria-hidden=\"true\"></i>\n        {{ title || (routeData.titleId | i18n) }}\n      </h1>\n    </div>\n    <div class=\"tw-ml-auto tw-flex tw-flex-col tw-gap-4\">\n      <div class=\"tw-flex tw-min-w-max tw-items-center tw-justify-end tw-gap-2\">\n        <ng-content></ng-content>\n        <product-switcher></product-switcher>\n        <ng-container *ngIf=\"account$ | async as account\">\n          <button\n            type=\"button\"\n            [bitMenuTriggerFor]=\"accountMenu\"\n            class=\"tw-border-0 tw-bg-transparent tw-p-0\"\n          >\n            <bit-avatar [id]=\"account.userId\" [text]=\"account.name || account.email\"></bit-avatar>\n          </button>\n\n          <bit-menu #accountMenu>\n            <div class=\"tw-flex tw-min-w-52 tw-max-w-72 tw-flex-col\">\n              <div\n                class=\"tw-flex tw-items-center tw-py-1 tw-px-4 tw-leading-tight tw-text-info\"\n                appStopProp\n              >\n                <bit-avatar\n                  [text]=\"account.name || account.email\"\n                  [id]=\"account.userId\"\n                ></bit-avatar>\n                <div class=\"tw-ml-2 tw-block tw-overflow-hidden tw-whitespace-nowrap\">\n                  <span>{{ \"loggedInAs\" | i18n }}</span>\n                  <small class=\"tw-block tw-overflow-hidden tw-whitespace-nowrap tw-text-muted\">\n                    {{ account.name }}\n                  </small>\n                </div>\n              </div>\n\n              <bit-menu-divider></bit-menu-divider>\n\n              <a bitMenuItem routerLink=\"/settings/account\">\n                <i class=\"bwi bwi-fw bwi-user\" aria-hidden=\"true\"></i>\n                {{ \"accountSettings\" | i18n }}\n              </a>\n              <a bitMenuItem href=\"https://bitwarden.com/help/\" target=\"_blank\" rel=\"noopener\">\n                <i class=\"bwi bwi-fw bwi-question-circle\" aria-hidden=\"true\"></i>\n                {{ \"getHelp\" | i18n }}\n              </a>\n              <a bitMenuItem href=\"https://bitwarden.com/download/\" target=\"_blank\" rel=\"noopener\">\n                <i class=\"bwi bwi-fw bwi-download\" aria-hidden=\"true\"></i>\n                {{ \"getApps\" | i18n }}\n              </a>\n\n              <bit-menu-divider></bit-menu-divider>\n\n              <button bitMenuItem type=\"button\" (click)=\"lock()\">\n                <i class=\"bwi bwi-fw bwi-lock\" aria-hidden=\"true\"></i>\n                {{ \"lockNow\" | i18n }}\n              </button>\n              <button bitMenuItem type=\"button\" (click)=\"logout()\">\n                <i class=\"bwi bwi-fw bwi-sign-out\" aria-hidden=\"true\"></i>\n                {{ \"logOut\" | i18n }}\n              </button>\n            </div>\n          </bit-menu>\n        </ng-container>\n      </div>\n      <div\n        class=\"tw-ml-auto\"\n        #contentContainer\n        [ngClass]=\"{ 'tw-hidden': contentContainer.childElementCount === 0 }\"\n      >\n        <ng-content select=\"[slot=secondary]\"></ng-content>\n      </div>\n    </div>\n  </div>\n  <div\n    #tabsContainer\n    class=\"-tw-mx-4 -tw-mb-px\"\n    [ngClass]=\"{ 'tw-hidden': tabsContainer.childElementCount === 0 }\"\n  >\n    <ng-content select=\"[slot=tabs]\"></ng-content>\n  </div>\n</header>\n","import { Component, Input } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, map, Observable } from \"rxjs\";\n\nimport { MessagingService } from \"@bitwarden/common/abstractions/messaging.service\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { AccountProfile } from \"@bitwarden/common/models/domain/account\";\n\n@Component({\n  selector: \"sm-header\",\n  templateUrl: \"./header.component.html\",\n})\nexport class HeaderComponent {\n  /**\n   * Custom title that overrides the route data `titleId`\n   */\n  @Input() title: string;\n\n  /**\n   * Icon to show before the title\n   */\n  @Input() icon: string;\n\n  protected routeData$: Observable<{ titleId: string }>;\n  protected account$: Observable<AccountProfile>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private stateService: StateService,\n    private messagingService: MessagingService\n  ) {\n    this.routeData$ = this.route.data.pipe(\n      map((params) => {\n        return {\n          titleId: params.titleId,\n        };\n      })\n    );\n\n    this.account$ = combineLatest([\n      this.stateService.activeAccount$,\n      this.stateService.accounts$,\n    ]).pipe(\n      map(([activeAccount, accounts]) => {\n        return accounts[activeAccount]?.profile;\n      })\n    );\n  }\n\n  protected lock() {\n    this.messagingService.send(\"lockVault\");\n  }\n\n  protected logout() {\n    this.messagingService.send(\"logout\");\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport {\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../projects/dialog/project-dialog.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"../secrets/dialog/secret-dialog.component\";\nimport {\n  ServiceAccountDialogComponent,\n  ServiceAccountOperation,\n} from \"../service-accounts/dialog/service-account-dialog.component\";\n\n@Component({\n  selector: \"sm-new-menu\",\n  templateUrl: \"./new-menu.component.html\",\n})\nexport class NewMenuComponent implements OnInit, OnDestroy {\n  private organizationId: string;\n  private destroy$: Subject<void> = new Subject<void>();\n\n  constructor(private route: ActivatedRoute, private dialogService: DialogService) {}\n\n  ngOnInit() {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params: any) => {\n      this.organizationId = params.organizationId;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  openSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openProjectDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openServiceAccountDialog() {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n}\n","<button\n  type=\"button\"\n  bitButton\n  class=\"tw-min-w-max\"\n  buttonType=\"primary\"\n  [bitMenuTriggerFor]=\"newMenu\"\n>\n  {{ \"new\" | i18n }} <i class=\"bwi bwi-angle-down\" aria-hidden=\"true\"></i>\n</button>\n\n<bit-menu #newMenu>\n  <button type=\"button\" bitMenuItem (click)=\"openProjectDialog()\">\n    <i class=\"bwi bwi-fw bwi-sitemap\" aria-hidden=\"true\"></i>\n    {{ \"project\" | i18n }}\n  </button>\n  <button type=\"button\" bitMenuItem (click)=\"openSecretDialog()\">\n    <i class=\"bwi bwi-fw bwi-key\" aria-hidden=\"true\"></i>\n    {{ \"secret\" | i18n }}\n  </button>\n  <button type=\"button\" bitMenuItem (click)=\"openServiceAccountDialog()\">\n    <i class=\"bwi bwi-fw bwi-wrench\" aria-hidden=\"true\"></i>\n    {{ \"serviceAccount\" | i18n }}\n  </button>\n</bit-menu>\n","import { _isNumberValue } from \"@angular/cdk/coercion\";\nimport { DataSource } from \"@angular/cdk/collections\";\nimport { BehaviorSubject, combineLatest, map, Observable, Subscription } from \"rxjs\";\n\nexport type SortDirection = \"asc\" | \"desc\";\nexport type SortFn = (a: any, b: any) => number;\nexport type Sort = {\n  column?: string;\n  direction: SortDirection;\n  fn?: SortFn;\n};\n\n// Loosely based on CDK TableDataSource\n//  https://github.com/angular/components/blob/main/src/material/table/table-data-source.ts\nexport class TableDataSource<T> extends DataSource<T> {\n  private readonly _data: BehaviorSubject<T[]>;\n  private readonly _sort: BehaviorSubject<Sort>;\n  private readonly _filter = new BehaviorSubject<string>(\"\");\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  private _renderChangesSubscription: Subscription | null = null;\n\n  constructor() {\n    super();\n    this._data = new BehaviorSubject([]);\n    this._sort = new BehaviorSubject({ direction: \"asc\" });\n  }\n\n  get data() {\n    return this._data.value;\n  }\n\n  set data(data: T[]) {\n    this._data.next(data ? [...data] : []);\n  }\n\n  set sort(sort: Sort) {\n    this._sort.next(sort);\n  }\n\n  get sort() {\n    return this._sort.value;\n  }\n\n  get filter() {\n    return this._filter.value;\n  }\n\n  set filter(filter: string) {\n    this._filter.next(filter);\n  }\n\n  connect(): Observable<readonly T[]> {\n    if (!this._renderChangesSubscription) {\n      this.updateChangeSubscription();\n    }\n\n    return this._renderData;\n  }\n\n  disconnect(): void {\n    this._renderChangesSubscription?.unsubscribe();\n    this._renderChangesSubscription = null;\n  }\n\n  private updateChangeSubscription() {\n    const filteredData = combineLatest([this._data, this._filter]).pipe(\n      map(([data, filter]) => this.filterData(data, filter))\n    );\n\n    const orderedData = combineLatest([filteredData, this._sort]).pipe(\n      map(([data, sort]) => this.orderData(data, sort))\n    );\n\n    this._renderChangesSubscription?.unsubscribe();\n    this._renderChangesSubscription = orderedData.subscribe((data) => this._renderData.next(data));\n  }\n\n  private filterData(data: T[], filter: string): T[] {\n    if (filter == null || filter == \"\") {\n      return data;\n    }\n\n    return data.filter((obj) => this.filterPredicate(obj, filter));\n  }\n\n  private orderData(data: T[], sort: Sort): T[] {\n    if (!sort) {\n      return data;\n    }\n\n    return this.sortData(data, sort);\n  }\n\n  /**\n   * Copied from https://github.com/angular/components/blob/main/src/material/table/table-data-source.ts\n   * License: MIT\n   * Copyright (c) 2022 Google LLC.\n   *\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  protected sortingDataAccessor(data: T, sortHeaderId: string): string | number {\n    const value = (data as unknown as Record<string, any>)[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      return numberValue < Number.MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Copied from https://github.com/angular/components/blob/main/src/material/table/table-data-source.ts\n   * License: MIT\n   * Copyright (c) 2022 Google LLC.\n   *\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  protected sortData(data: T[], sort: Sort): T[] {\n    const column = sort.column;\n    const directionModifier = sort.direction === \"asc\" ? 1 : -1;\n    if (!column) {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      // If a custom sort function is provided, use it instead of the default.\n      if (sort.fn) {\n        return sort.fn(a, b) * directionModifier;\n      }\n\n      let valueA = this.sortingDataAccessor(a, column);\n      let valueB = this.sortingDataAccessor(b, column);\n\n      // If there are data in the column that can be converted to a number,\n      // it must be ensured that the rest of the data\n      // is of the same type so as not to order incorrectly.\n      const valueAType = typeof valueA;\n      const valueBType = typeof valueB;\n\n      if (valueAType !== valueBType) {\n        if (valueAType === \"number\") {\n          valueA += \"\";\n        }\n        if (valueBType === \"number\") {\n          valueB += \"\";\n        }\n      }\n\n      if (typeof valueA === \"string\" && typeof valueB === \"string\") {\n        return valueA.localeCompare(valueB) * directionModifier;\n      }\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come last.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * directionModifier;\n    });\n  }\n\n  /**\n   * Copied from https://github.com/angular/components/blob/main/src/material/table/table-data-source.ts\n   * License: MIT\n   * Copyright (c) 2022 Google LLC.\n   *\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  protected filterPredicate(data: T, filter: string): boolean {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data as unknown as Record<string, any>)\n      .reduce((currentTerm: string, key: string) => {\n        // Use an obscure Unicode character to delimit the words in the concatenated string.\n        // This avoids matches where the values of two columns combined will match the user's query\n        // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n        // that has a very low chance of being typed in by somebody in a text field. This one in\n        // particular is \"White up-pointing triangle with dot\" from\n        // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n        return currentTerm + (data as unknown as Record<string, any>)[key] + \"◬\";\n      }, \"\")\n      .toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n}\n","import { coerceBooleanProperty } from \"@angular/cdk/coercion\";\nimport { Component, HostBinding, Input, OnInit } from \"@angular/core\";\n\nimport type { SortFn } from \"./table-data-source\";\nimport { TableComponent } from \"./table.component\";\n\n@Component({\n  selector: \"th[bitSortable]\",\n  template: `\n    <button [ngClass]=\"classList\" [attr.aria-pressed]=\"isActive\" (click)=\"setActive()\">\n      <ng-content></ng-content>\n      <i class=\"bwi tw-ml-2\" [ngClass]=\"icon\"></i>\n    </button>\n  `,\n})\nexport class SortableComponent implements OnInit {\n  /**\n   * Mark the column as sortable and specify the key to sort by\n   */\n  @Input() bitSortable: string;\n\n  private _default: boolean;\n  /**\n   * Mark the column as the default sort column\n   */\n  @Input() set default(value: boolean | \"\") {\n    this._default = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Custom sorting function\n   *\n   * @example\n   * fn = (a, b) => a.name.localeCompare(b.name)\n   */\n  @Input() fn: SortFn;\n\n  constructor(private table: TableComponent) {}\n\n  ngOnInit(): void {\n    if (this._default && !this.isActive) {\n      this.setActive();\n    }\n  }\n\n  @HostBinding(\"attr.aria-sort\") get ariaSort() {\n    if (!this.isActive) {\n      return undefined;\n    }\n    return this.sort.direction === \"asc\" ? \"ascending\" : \"descending\";\n  }\n\n  protected setActive() {\n    if (this.table.dataSource) {\n      const direction = this.isActive && this.direction === \"asc\" ? \"desc\" : \"asc\";\n      this.table.dataSource.sort = { column: this.bitSortable, direction: direction, fn: this.fn };\n    }\n  }\n\n  private get sort() {\n    return this.table.dataSource?.sort;\n  }\n\n  get isActive() {\n    return this.sort?.column === this.bitSortable;\n  }\n\n  get direction() {\n    return this.sort?.direction;\n  }\n\n  get icon() {\n    if (!this.isActive) {\n      return \"bwi-up-down-btn\";\n    }\n    return this.direction === \"asc\" ? \"bwi-up-solid\" : \"bwi-down-solid\";\n  }\n\n  get classList() {\n    return [\n      \"tw-group\",\n      \"tw-min-w-max\",\n\n      // Offset to border and padding\n      \"-tw-m-1.5\",\n      \"tw-font-bold\",\n\n      // Below is copied from BitIconButtonComponent\n      \"tw-border\",\n      \"tw-border-solid\",\n      \"tw-rounded\",\n      \"tw-transition\",\n      \"hover:tw-no-underline\",\n      \"focus:tw-outline-none\",\n\n      \"tw-bg-transparent\",\n      \"!tw-text-muted\",\n      \"tw-border-transparent\",\n      \"hover:tw-bg-transparent-hover\",\n      \"hover:tw-border-primary-700\",\n      \"focus-visible:before:tw-ring-primary-700\",\n      \"disabled:tw-opacity-60\",\n      \"disabled:hover:tw-border-transparent\",\n      \"disabled:hover:tw-bg-transparent\",\n\n      // Workaround for box-shadow with transparent offset issue:\n      // https://github.com/tailwindlabs/tailwindcss/issues/3595\n      // Remove `before:` and use regular `tw-ring` when browser no longer has bug, or better:\n      // switch to `outline` with `outline-offset` when Safari supports border radius on outline.\n      // Using `box-shadow` to create outlines is a hack and as such `outline` should be preferred.\n      \"tw-relative\",\n      \"before:tw-content-['']\",\n      \"before:tw-block\",\n      \"before:tw-absolute\",\n      \"before:-tw-inset-[3px]\",\n      \"before:tw-rounded-md\",\n      \"before:tw-transition\",\n      \"before:tw-ring\",\n      \"before:tw-ring-transparent\",\n      \"focus-visible:tw-z-10\",\n    ];\n  }\n}\n","import { Component } from \"@angular/core\";\n\nimport { Icons } from \"@bitwarden/components\";\n\n@Component({\n  selector: \"sm-no-items\",\n  templateUrl: \"./no-items.component.html\",\n})\nexport class NoItemsComponent {\n  protected icon = Icons.Search;\n}\n","<div *ngIf=\"!projects\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<sm-no-items *ngIf=\"projects?.length == 0\">\n  <ng-container slot=\"title\">{{ \"projectsNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container slot=\"description\">{{ \"projectsNoItemsMessage\" | i18n }}</ng-container>\n  <button\n    type=\"button\"\n    slot=\"button\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"newProjectEvent.emit()\"\n  >\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newProject\" | i18n }}\n  </button>\n</sm-no-items>\n\n<bit-table *ngIf=\"projects?.length >= 1\" [dataSource]=\"dataSource\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"!tw-mb-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell bitSortable=\"name\" default>{{ \"name\" | i18n }}</th>\n      <th bitCell bitSortable=\"revisionDate\">{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body let-rows$>\n    <tr bitRow *ngFor=\"let project of rows$ | async\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(project.id) : null\"\n          [checked]=\"selection.isSelected(project.id)\"\n        />\n      </td>\n      <td bitCell>\n        <div class=\"tw-flex tw-items-center tw-gap-4 tw-break-all\">\n          <i class=\"bwi bwi-collection tw-text-muted\" aria-hidden=\"true\"></i>\n          <a bitLink [routerLink]=\"['/sm', project.organizationId, 'projects', project.id]\">{{\n            project.name\n          }}</a>\n        </div>\n      </td>\n      <td bitCell class=\"tw-whitespace-nowrap\">{{ project.revisionDate | date: \"medium\" }}</td>\n      <td bitCell>\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [bitMenuTriggerFor]=\"projectMenu\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n        ></button>\n      </td>\n      <bit-menu #projectMenu>\n        <button type=\"button\" bitMenuItem (click)=\"editProjectEvent.emit(project.id)\">\n          <i class=\"bwi bwi-fw bwi-pencil\" aria-hidden=\"true\"></i>\n          {{ \"editProject\" | i18n }}\n        </button>\n        <a bitMenuItem [routerLink]=\"['/sm', project.organizationId, 'projects', project.id]\">\n          <i class=\"bwi bwi-fw bwi-eye\" aria-hidden=\"true\"></i>\n          {{ \"viewProject\" | i18n }}\n        </a>\n        <button type=\"button\" bitMenuItem (click)=\"deleteProject(project.id)\">\n          <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n          <span class=\"tw-text-danger\">{{ \"deleteProject\" | i18n }}</span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"bulkDeleteProjects()\">\n    <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">{{ \"deleteProjects\" | i18n }}</span>\n  </button>\n</bit-menu>\n","<div\n  class=\"tw-mx-auto tw-flex tw-flex-col tw-items-center tw-justify-center tw-pt-6 tw-text-center\"\n>\n  <div class=\"tw-max-w-sm\">\n    <bit-icon [icon]=\"icon\" aria-hidden=\"true\"></bit-icon>\n    <h3 class=\"tw-font-semibold\">\n      <ng-content select=\"[slot=title]\"></ng-content>\n    </h3>\n    <p>\n      <ng-content select=\"[slot=description]\"></ng-content>\n    </p>\n  </div>\n  <div class=\"tw-space-x-2\">\n    <ng-content select=\"[slot=button]\"></ng-content>\n  </div>\n</div>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, OnDestroy, Output } from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { TableDataSource } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../models/view/project-list.view\";\n\n@Component({\n  selector: \"sm-projects-list\",\n  templateUrl: \"./projects-list.component.html\",\n})\nexport class ProjectsListComponent implements OnDestroy {\n  protected dataSource = new TableDataSource<ProjectListView>();\n\n  @Input()\n  get projects(): ProjectListView[] {\n    return this._projects;\n  }\n  set projects(projects: ProjectListView[]) {\n    this.selection.clear();\n    this._projects = projects;\n    this.dataSource.data = projects;\n  }\n  private _projects: ProjectListView[];\n\n  @Input()\n  set search(search: string) {\n    this.dataSource.filter = search;\n  }\n\n  @Output() editProjectEvent = new EventEmitter<string>();\n  @Output() deleteProjectEvent = new EventEmitter<ProjectListView[]>();\n  @Output() onProjectCheckedEvent = new EventEmitter<string[]>();\n  @Output() newProjectEvent = new EventEmitter();\n\n  private destroy$: Subject<void> = new Subject<void>();\n\n  selection = new SelectionModel<string>(true, []);\n\n  constructor() {\n    this.selection.changed\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((_) => this.onProjectCheckedEvent.emit(this.selection.selected));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.projects.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.projects.map((s) => s.id));\n  }\n\n  deleteProject(projectId: string) {\n    this.deleteProjectEvent.emit(this.projects.filter((p) => p.id == projectId));\n  }\n\n  bulkDeleteProjects() {\n    this.deleteProjectEvent.emit(\n      this.projects.filter((project) => this.selection.isSelected(project.id))\n    );\n  }\n}\n","<div *ngIf=\"!secrets\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<ng-container *ngIf=\"secrets?.length == 0\">\n  <sm-no-items *ngIf=\"trash\">\n    <ng-container slot=\"title\">{{ \"secretsNoItemsTitle\" | i18n }}</ng-container>\n    <ng-container slot=\"description\">{{ \"secretsTrashNoItemsMessage\" | i18n }}</ng-container>\n  </sm-no-items>\n  <sm-no-items *ngIf=\"!trash\">\n    <ng-container slot=\"title\">{{ \"secretsNoItemsTitle\" | i18n }}</ng-container>\n    <ng-container slot=\"description\">{{ \"secretsNoItemsMessage\" | i18n }}</ng-container>\n    <button\n      type=\"button\"\n      slot=\"button\"\n      bitButton\n      buttonType=\"secondary\"\n      (click)=\"newSecretEvent.emit()\"\n    >\n      <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n      {{ \"newSecret\" | i18n }}\n    </button>\n  </sm-no-items>\n</ng-container>\n\n<bit-table *ngIf=\"secrets?.length >= 1\" [dataSource]=\"dataSource\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"!tw-mb-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell bitSortable=\"name\" default>{{ \"name\" | i18n }}</th>\n      <th bitCell bitSortable=\"projects\" [fn]=\"sortProjects\">{{ \"project\" | i18n }}</th>\n      <th bitCell bitSortable=\"revisionDate\">{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body let-rows$>\n    <tr bitRow *ngFor=\"let secret of rows$ | async\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(secret.id) : null\"\n          [checked]=\"selection.isSelected(secret.id)\"\n        />\n      </td>\n      <td bitCell>\n        <div class=\"tw-flex tw-items-center tw-gap-4 tw-break-all\">\n          <i class=\"bwi bwi-key tw-text-muted\" aria-hidden=\"true\"></i>\n          <button type=\"button\" bitLink (click)=\"editSecretEvent.emit(secret.id)\">\n            {{ secret.name }}\n          </button>\n        </div>\n      </td>\n      <td bitCell>\n        <span\n          *ngFor=\"let project of secret.projects\"\n          bitBadge\n          badgeType=\"secondary\"\n          class=\"tw-ml-1\"\n          [title]=\"project.name\"\n        >\n          {{ project.name | ellipsis: 32 }}\n        </span>\n        <span *ngIf=\"secret.projects.length === 0\" bitBadge badgeType=\"warning\" class=\"tw-ml-1\"\n          ><i class=\"bwi bwi-fw bwi-exclamation-triangle tw-mr-1\" aria-hidden=\"true\"></i\n          >{{ \"unassigned\" | i18n }}</span\n        >\n      </td>\n      <td bitCell class=\"tw-whitespace-nowrap\">{{ secret.revisionDate | date: \"medium\" }}</td>\n      <td bitCell>\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"secretMenu\"\n        ></button>\n      </td>\n\n      <bit-menu #secretMenu>\n        <button type=\"button\" bitMenuItem (click)=\"editSecretEvent.emit(secret.id)\" *ngIf=\"!trash\">\n          <i class=\"bwi bwi-fw bwi-pencil\" aria-hidden=\"true\"></i>\n          {{ \"editSecret\" | i18n }}\n        </button>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"copySecretNameEvent.emit(secret.name)\"\n          *ngIf=\"!trash\"\n        >\n          <i class=\"bwi bwi-fw bwi-clone\" aria-hidden=\"true\"></i>\n          {{ \"copySecretName\" | i18n }}\n        </button>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"copySecretValueEvent.emit(secret.id)\"\n          *ngIf=\"!trash\"\n        >\n          <i class=\"bwi bwi-fw bwi-clone\" aria-hidden=\"true\"></i>\n          {{ \"copySecretValue\" | i18n }}\n        </button>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"restoreSecretsEvent.emit([secret.id])\"\n          *ngIf=\"trash\"\n        >\n          <i class=\"bwi bwi-fw bwi-refresh\" aria-hidden=\"true\"></i>\n          {{ \"restoreSecret\" | i18n }}\n        </button>\n        <button type=\"button\" bitMenuItem (click)=\"deleteSecretsEvent.emit([secret])\">\n          <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n          <span class=\"tw-text-danger\">{{\n            (trash ? \"permanentlyDelete\" : \"deleteSecret\") | i18n\n          }}</span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"bulkRestoreSecrets()\" *ngIf=\"trash\">\n    <i class=\"bwi bwi-fw bwi-refresh\" aria-hidden=\"true\"></i>\n    <span>{{ \"restoreSelected\" | i18n }}</span>\n  </button>\n  <button type=\"button\" bitMenuItem (click)=\"bulkDeleteSecrets()\">\n    <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">{{ \"deleteSecrets\" | i18n }}</span>\n  </button>\n</bit-menu>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, OnDestroy, Output } from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { TableDataSource } from \"@bitwarden/components\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\n\n@Component({\n  selector: \"sm-secrets-list\",\n  templateUrl: \"./secrets-list.component.html\",\n})\nexport class SecretsListComponent implements OnDestroy {\n  protected dataSource = new TableDataSource<SecretListView>();\n\n  @Input()\n  get secrets(): SecretListView[] {\n    return this._secrets;\n  }\n  set secrets(secrets: SecretListView[]) {\n    this.selection.clear();\n    this._secrets = secrets;\n    this.dataSource.data = secrets;\n  }\n  private _secrets: SecretListView[];\n\n  @Input()\n  set search(search: string) {\n    this.dataSource.filter = search;\n  }\n\n  @Input() trash: boolean;\n\n  @Output() editSecretEvent = new EventEmitter<string>();\n  @Output() copySecretNameEvent = new EventEmitter<string>();\n  @Output() copySecretValueEvent = new EventEmitter<string>();\n  @Output() onSecretCheckedEvent = new EventEmitter<string[]>();\n  @Output() deleteSecretsEvent = new EventEmitter<SecretListView[]>();\n  @Output() newSecretEvent = new EventEmitter();\n  @Output() restoreSecretsEvent = new EventEmitter();\n\n  private destroy$: Subject<void> = new Subject<void>();\n\n  selection = new SelectionModel<string>(true, []);\n\n  constructor() {\n    this.selection.changed\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((_) => this.onSecretCheckedEvent.emit(this.selection.selected));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.secrets.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.secrets.map((s) => s.id));\n  }\n\n  bulkDeleteSecrets() {\n    if (this.selection.selected.length >= 1) {\n      this.deleteSecretsEvent.emit(\n        this.secrets.filter((secret) => this.selection.isSelected(secret.id))\n      );\n    }\n  }\n\n  bulkRestoreSecrets() {\n    if (this.selection.selected.length >= 1) {\n      this.restoreSecretsEvent.emit(this.selection.selected);\n    }\n  }\n\n  sortProjects = (a: SecretListView, b: SecretListView): number => {\n    const aProjects = a.projects;\n    const bProjects = b.projects;\n    if (aProjects.length !== bProjects.length) {\n      return aProjects.length - bProjects.length;\n    }\n\n    return aProjects[0]?.name.localeCompare(bProjects[0].name);\n  };\n}\n","<ng-template #content>\n  <i class=\"bwi bwi-fw !tw-mr-4\" [ngClass]=\"completed ? 'bwi-check tw-text-success' : icon\"></i\n  ><span\n    [ngClass]=\"{\n      'tw-text-primary-700 tw-line-through tw-decoration-primary-700 tw-opacity-50': completed\n    }\"\n    >{{ title }}<i class=\"bwi bwi-angle-right tw-ml-1\"></i\n  ></span>\n</ng-template>\n\n<li class=\"tw-list-none\">\n  <a bitLink *ngIf=\"route\" [routerLink]=\"route\">\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </a>\n  <button type=\"button\" bitLink *ngIf=\"!route\">\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </button>\n  <div\n    class=\"tw-ml-8 tw-mt-1 tw-text-sm\"\n    [ngClass]=\"{ 'tw-opacity-50': completed }\"\n    (click)=\"handleClick($event)\"\n  >\n    <ng-content></ng-content>\n  </div>\n</li>\n","import { Component, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-onboarding-task\",\n  templateUrl: \"./onboarding-task.component.html\",\n  host: {\n    class: \"tw-max-w-max\",\n  },\n})\nexport class OnboardingTaskComponent {\n  @Input()\n  completed = false;\n\n  @Input()\n  icon = \"bwi-info-circle\";\n\n  @Input()\n  title: string;\n\n  @Input()\n  route: string | any[];\n\n  handleClick(ev: MouseEvent) {\n    /**\n     * If the main `ng-content` is clicked, we don't want to trigger the task's click handler.\n     */\n    ev.stopPropagation();\n  }\n}\n","<div [ngClass]=\"outerBarStyles\">\n  <div\n    [ngClass]=\"innerBarStyles\"\n    role=\"progressbar\"\n    aria-valuemin=\"0\"\n    aria-valuemax=\"100\"\n    attr.aria-valuenow=\"{{ barWidth }}\"\n    [ngStyle]=\"{ width: barWidth + '%' }\"\n  >\n    <div\n      *ngIf=\"displayText\"\n      class=\"tw-flex tw-h-full tw-flex-wrap tw-items-center tw-overflow-hidden\"\n    >\n      <!-- If text is too long to fit, wrap it below to hide -->\n      <div class=\"tw-h-full\">&nbsp;</div>\n      <div class=\"tw-pr-1\">{{ textContent }}</div>\n    </div>\n  </div>\n</div>\n","import { Component, Input } from \"@angular/core\";\n\ntype SizeTypes = \"small\" | \"default\" | \"large\";\ntype BackgroundTypes = \"danger\" | \"primary\" | \"success\" | \"warning\";\n\nconst SizeClasses: Record<SizeTypes, string[]> = {\n  small: [\"tw-h-1\"],\n  default: [\"tw-h-4\"],\n  large: [\"tw-h-6\"],\n};\n\nconst BackgroundClasses: Record<BackgroundTypes, string[]> = {\n  danger: [\"tw-bg-danger-500\"],\n  primary: [\"tw-bg-primary-500\"],\n  success: [\"tw-bg-success-500\"],\n  warning: [\"tw-bg-warning-500\"],\n};\n\n@Component({\n  selector: \"bit-progress\",\n  templateUrl: \"./progress.component.html\",\n})\nexport class ProgressComponent {\n  @Input() barWidth = 0;\n  @Input() bgColor: BackgroundTypes = \"primary\";\n  @Input() showText = true;\n  @Input() size: SizeTypes = \"default\";\n  @Input() text?: string;\n\n  get displayText() {\n    return this.showText && this.size !== \"small\";\n  }\n\n  get outerBarStyles() {\n    return [\"tw-overflow-hidden\", \"tw-rounded\", \"tw-bg-secondary-100\"].concat(\n      SizeClasses[this.size]\n    );\n  }\n\n  get innerBarStyles() {\n    return [\n      \"tw-flex\",\n      \"tw-justify-center\",\n      \"tw-items-center\",\n      \"tw-whitespace-nowrap\",\n      \"tw-text-xs\",\n      \"tw-font-semibold\",\n      \"tw-text-contrast\",\n      \"tw-transition-all\",\n    ]\n      .concat(SizeClasses[this.size])\n      .concat(BackgroundClasses[this.bgColor]);\n  }\n\n  get textContent() {\n    return this.text || this.barWidth + \"%\";\n  }\n}\n","<details #details class=\"tw-rounded-sm tw-bg-background-alt tw-text-main\" (toggle)=\"toggle()\" open>\n  <summary class=\"tw-list-none tw-p-2 tw-px-4\">\n    <div class=\"tw-flex tw-select-none tw-items-center tw-gap-4\">\n      <i class=\"bwi bwi-dashboard tw-text-3xl tw-text-primary-500\" aria-hidden=\"true\"></i>\n      <div class=\"tw-text-lg\">{{ title }}</div>\n      <bit-progress class=\"tw-flex-1\" [showText]=\"false\" [barWidth]=\"barWidth\"></bit-progress>\n      <span *ngIf=\"tasks.length > 0; else spinner\">\n        {{ \"complete\" | i18n: amountCompleted:tasks.length }}\n      </span>\n      <i\n        class=\"bwi tw-my-auto\"\n        [ngClass]=\"open ? 'bwi-angle-down' : 'bwi-angle-up'\"\n        aria-hidden=\"true\"\n      ></i>\n    </div>\n  </summary>\n  <ul class=\"tw-ml-6 tw-mb-0 tw-flex tw-flex-col tw-gap-4\">\n    <ng-content></ng-content>\n  </ul>\n  <div class=\"tw-p-4 tw-pt-0\">\n    <button bitLink type=\"button\" class=\"tw-ml-auto tw-block\" (click)=\"dismiss.emit()\">\n      {{ \"dismiss\" | i18n }}\n    </button>\n  </div>\n</details>\n\n<ng-template #spinner>\n  <i class=\"bwi bwi-spinner bwi-spin\"></i>\n</ng-template>\n","import { Component, ContentChildren, EventEmitter, Input, Output, QueryList } from \"@angular/core\";\n\nimport { OnboardingTaskComponent } from \"./onboarding-task.component\";\n\n@Component({\n  selector: \"sm-onboarding\",\n  templateUrl: \"./onboarding.component.html\",\n})\nexport class OnboardingComponent {\n  @ContentChildren(OnboardingTaskComponent) tasks: QueryList<OnboardingTaskComponent>;\n  @Input() title: string;\n\n  @Output() dismiss = new EventEmitter<void>();\n\n  protected open = true;\n  protected visible = false;\n\n  protected get amountCompleted(): number {\n    return this.tasks.filter((task) => task.completed).length;\n  }\n\n  protected get barWidth(): number {\n    return this.tasks.length === 0 ? 0 : (this.amountCompleted / this.tasks.length) * 100;\n  }\n\n  protected toggle() {\n    this.open = !this.open;\n  }\n}\n","<section>\n  <header class=\"tw-flex tw-max-w-min tw-items-center tw-gap-2\">\n    <div><ng-content select=\"[slot=summary]\"></ng-content></div>\n    <button\n      type=\"button\"\n      [bitIconButton]=\"open ? 'bwi-angle-up' : 'bwi-angle-down'\"\n      (click)=\"toggle()\"\n      [attr.aria-expanded]=\"open\"\n      [attr.aria-controls]=\"contentId\"\n    ></button>\n  </header>\n  <div *ngIf=\"open\" [attr.id]=\"contentId\" class=\"tw-mt-4\">\n    <ng-content></ng-content>\n  </div>\n</section>\n","import { Component, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-section\",\n  templateUrl: \"./section.component.html\",\n})\nexport class SectionComponent {\n  @Input() open = true;\n\n  /**\n   * UID for `[attr.aria-controls]`\n   */\n  protected contentId = Math.random().toString(36).substring(2);\n\n  protected toggle() {\n    this.open = !this.open;\n  }\n}\n","<sm-header [title]=\"organizationName\">\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n\n<div *ngIf=\"!loading && view$ | async as view; else spinner\">\n  <sm-onboarding [title]=\"'getStarted' | i18n\" *ngIf=\"showOnboarding\" (dismiss)=\"hideOnboarding()\">\n    <sm-onboarding-task\n      [title]=\"'createServiceAccount' | i18n\"\n      (click)=\"openServiceAccountDialog()\"\n      icon=\"bwi-cli\"\n      [completed]=\"view.tasks.createServiceAccount\"\n    >\n      <span class=\"tw-pl-1\">\n        {{ \"downloadThe\" | i18n }}\n        <a\n          bitLink\n          href=\"https://bitwarden.com/help/secrets-manager/developer-quick-start/\"\n          target=\"_blank\"\n          >{{ \"smCLI\" | i18n }}</a\n        >\n      </span>\n    </sm-onboarding-task>\n    <sm-onboarding-task\n      *ngIf=\"userIsAdmin\"\n      [title]=\"'createProject' | i18n\"\n      (click)=\"openNewProjectDialog()\"\n      icon=\"bwi-collection\"\n      [completed]=\"view.tasks.createProject\"\n    ></sm-onboarding-task>\n    <sm-onboarding-task\n      *ngIf=\"userIsAdmin\"\n      [title]=\"'importSecrets' | i18n\"\n      [route]=\"['settings', 'import']\"\n      icon=\"bwi-download\"\n      [completed]=\"view.tasks.importSecrets\"\n    ></sm-onboarding-task>\n    <sm-onboarding-task\n      *ngIf=\"view.tasks.createProject\"\n      [title]=\"'createSecret' | i18n\"\n      (click)=\"openSecretDialog()\"\n      icon=\"bwi-key\"\n      [completed]=\"view.tasks.createSecret\"\n    ></sm-onboarding-task>\n  </sm-onboarding>\n\n  <div class=\"tw-mt-6 tw-flex tw-flex-col tw-gap-6\">\n    <sm-section>\n      <h2 slot=\"summary\" class=\"tw-mb-0\" bitTypography=\"h2\" noMargin>{{ \"projects\" | i18n }}</h2>\n      <sm-projects-list\n        (newProjectEvent)=\"openNewProjectDialog()\"\n        (editProjectEvent)=\"openEditProject($event)\"\n        (deleteProjectEvent)=\"openDeleteProjectDialog($event)\"\n        [projects]=\"view.latestProjects\"\n      ></sm-projects-list>\n      <div *ngIf=\"view.allProjects.length > 0\" class=\"tw-ml-auto tw-mt-4 tw-max-w-max\">\n        {{ \"showingPortionOfTotal\" | i18n: view.latestProjects.length:view.allProjects.length }}\n        <a bitLink routerLink=\"projects\" class=\"tw-ml-2\">{{ \"viewAll\" | i18n }}</a>\n      </div>\n    </sm-section>\n    <sm-section>\n      <h2 slot=\"summary\" class=\"tw-mb-0\" bitTypography=\"h2\" noMargin>{{ \"secrets\" | i18n }}</h2>\n      <sm-secrets-list\n        baseRoute=\"secrets\"\n        (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n        (newSecretEvent)=\"openNewSecretDialog()\"\n        (editSecretEvent)=\"openEditSecret($event)\"\n        (copySecretNameEvent)=\"copySecretName($event)\"\n        (copySecretValueEvent)=\"copySecretValue($event)\"\n        [secrets]=\"view.latestSecrets\"\n      ></sm-secrets-list>\n      <div *ngIf=\"view.allSecrets.length > 0\" class=\"tw-ml-auto tw-mt-4 tw-max-w-max\">\n        {{ \"showingPortionOfTotal\" | i18n: view.latestSecrets.length:view.allSecrets.length }}\n        <a bitLink routerLink=\"secrets\" class=\"tw-ml-2\">{{ \"viewAll\" | i18n }}</a>\n      </div>\n    </sm-section>\n  </div>\n</div>\n\n<ng-template #spinner>\n  <div class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n  </div>\n</ng-template>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  map,\n  Observable,\n  switchMap,\n  Subject,\n  takeUntil,\n  combineLatest,\n  startWith,\n  distinctUntilChanged,\n  take,\n  share,\n} from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization/organization.service.abstraction\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../models/view/project-list.view\";\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport {\n  ProjectDeleteDialogComponent,\n  ProjectDeleteOperation,\n} from \"../projects/dialog/project-delete-dialog.component\";\nimport {\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../projects/dialog/project-dialog.component\";\nimport { ProjectService } from \"../projects/project.service\";\nimport {\n  SecretDeleteDialogComponent,\n  SecretDeleteOperation,\n} from \"../secrets/dialog/secret-delete.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"../secrets/dialog/secret-dialog.component\";\nimport { SecretService } from \"../secrets/secret.service\";\nimport {\n  ServiceAccountDialogComponent,\n  ServiceAccountOperation,\n} from \"../service-accounts/dialog/service-account-dialog.component\";\nimport { ServiceAccountService } from \"../service-accounts/service-account.service\";\n\ntype Tasks = {\n  [organizationId: string]: OrganizationTasks;\n};\n\ntype OrganizationTasks = {\n  importSecrets: boolean;\n  createSecret: boolean;\n  createProject: boolean;\n  createServiceAccount: boolean;\n};\n\n@Component({\n  selector: \"sm-overview\",\n  templateUrl: \"./overview.component.html\",\n})\nexport class OverviewComponent implements OnInit, OnDestroy {\n  private destroy$: Subject<void> = new Subject<void>();\n  private tableSize = 10;\n  private organizationId: string;\n  protected organizationName: string;\n  protected userIsAdmin: boolean;\n  protected showOnboarding = false;\n  protected loading = true;\n\n  protected view$: Observable<{\n    allProjects: ProjectListView[];\n    allSecrets: SecretListView[];\n    latestProjects: ProjectListView[];\n    latestSecrets: SecretListView[];\n    tasks: OrganizationTasks;\n  }>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private projectService: ProjectService,\n    private secretService: SecretService,\n    private serviceAccountService: ServiceAccountService,\n    private dialogService: DialogService,\n    private organizationService: OrganizationService,\n    private stateService: StateService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  ngOnInit() {\n    this.stateService.setSMOnboardingTasks(null);\n    const orgId$ = this.route.params.pipe(\n      map((p) => p.organizationId),\n      distinctUntilChanged()\n    );\n\n    orgId$\n      .pipe(\n        map((orgId) => this.organizationService.get(orgId)),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((org) => {\n        this.organizationId = org.id;\n        this.organizationName = org.name;\n        this.userIsAdmin = org.isAdmin;\n        this.loading = true;\n      });\n\n    const projects$ = combineLatest([\n      orgId$,\n      this.projectService.project$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(([orgId]) => this.projectService.getProjects(orgId)),\n      share()\n    );\n\n    const secrets$ = combineLatest([\n      orgId$,\n      this.secretService.secret$.pipe(startWith(null)),\n      this.projectService.project$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(([orgId]) => this.secretService.getSecrets(orgId)),\n      share()\n    );\n\n    const serviceAccounts$ = combineLatest([\n      orgId$,\n      this.serviceAccountService.serviceAccount$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(([orgId]) => this.serviceAccountService.getServiceAccounts(orgId)),\n      share()\n    );\n\n    this.view$ = orgId$.pipe(\n      switchMap((orgId) =>\n        combineLatest([projects$, secrets$, serviceAccounts$]).pipe(\n          switchMap(async ([projects, secrets, serviceAccounts]) => ({\n            latestProjects: this.getRecentItems(projects, this.tableSize),\n            latestSecrets: this.getRecentItems(secrets, this.tableSize),\n            allProjects: projects,\n            allSecrets: secrets,\n            tasks: await this.saveCompletedTasks(orgId, {\n              importSecrets: secrets.length > 0,\n              createSecret: secrets.length > 0,\n              createProject: projects.length > 0,\n              createServiceAccount: serviceAccounts.length > 0,\n            }),\n          }))\n        )\n      )\n    );\n\n    // Refresh onboarding status when orgId changes by fetching the first value from view$.\n    orgId$\n      .pipe(\n        switchMap(() => this.view$.pipe(take(1))),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((view) => {\n        this.showOnboarding = Object.values(view.tasks).includes(false);\n        this.loading = false;\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private getRecentItems<T extends { revisionDate: string }[]>(items: T, length: number): T {\n    return items\n      .sort((a, b) => {\n        return new Date(b.revisionDate).getTime() - new Date(a.revisionDate).getTime();\n      })\n      .slice(0, length) as T;\n  }\n\n  private async saveCompletedTasks(\n    organizationId: string,\n    orgTasks: OrganizationTasks\n  ): Promise<OrganizationTasks> {\n    const prevTasks = ((await this.stateService.getSMOnboardingTasks()) || {}) as Tasks;\n    const newlyCompletedOrgTasks = Object.fromEntries(\n      Object.entries(orgTasks).filter(([_k, v]) => v === true)\n    );\n    const nextOrgTasks = {\n      importSecrets: false,\n      createSecret: false,\n      createProject: false,\n      createServiceAccount: false,\n      ...prevTasks[organizationId],\n      ...newlyCompletedOrgTasks,\n    };\n    this.stateService.setSMOnboardingTasks({\n      ...prevTasks,\n      [organizationId]: nextOrgTasks,\n    });\n    return nextOrgTasks as OrganizationTasks;\n  }\n\n  // Projects ---\n\n  openEditProject(projectId: string) {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        projectId: projectId,\n      },\n    });\n  }\n\n  openNewProjectDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openServiceAccountDialog() {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openDeleteProjectDialog(event: ProjectListView[]) {\n    this.dialogService.open<unknown, ProjectDeleteOperation>(ProjectDeleteDialogComponent, {\n      data: {\n        projects: event,\n      },\n    });\n  }\n\n  // Secrets ---\n\n  openSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openEditSecret(secretId: string) {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        secretId: secretId,\n      },\n    });\n  }\n\n  openDeleteSecret(event: SecretListView[]) {\n    this.dialogService.open<unknown, SecretDeleteOperation>(SecretDeleteDialogComponent, {\n      data: {\n        secrets: event,\n      },\n    });\n  }\n\n  openNewSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  copySecretName(name: string) {\n    this.platformUtilsService.copyToClipboard(name);\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"valueCopied\", this.i18nService.t(\"name\"))\n    );\n  }\n\n  async copySecretValue(id: string) {\n    const secret = await this.secretService.getBySecretId(id);\n    this.platformUtilsService.copyToClipboard(secret.value);\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"valueCopied\", this.i18nService.t(\"value\"))\n    );\n  }\n\n  protected hideOnboarding() {\n    this.showOnboarding = false;\n    this.saveCompletedTasks(this.organizationId, {\n      importSecrets: true,\n      createSecret: true,\n      createProject: true,\n      createServiceAccount: true,\n    });\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { OverviewComponent } from \"./overview.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: OverviewComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OverviewRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { OnboardingModule } from \"./onboarding.module\";\nimport { OverviewRoutingModule } from \"./overview-routing.module\";\nimport { OverviewComponent } from \"./overview.component\";\nimport { SectionComponent } from \"./section.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, OverviewRoutingModule, OnboardingModule],\n  declarations: [OverviewComponent, SectionComponent],\n  providers: [],\n})\nexport class OverviewModule {}\n","export class BaseAccessPolicyView {\n  id: string;\n  read: boolean;\n  write: boolean;\n  creationDate: string;\n  revisionDate: string;\n}\n\nexport class UserProjectAccessPolicyView extends BaseAccessPolicyView {\n  organizationUserId: string;\n  organizationUserName: string;\n  grantedProjectId: string;\n  userId: string;\n}\n\nexport class UserServiceAccountAccessPolicyView extends BaseAccessPolicyView {\n  organizationUserId: string;\n  organizationUserName: string;\n  grantedServiceAccountId: string;\n  userId: string;\n}\n\nexport class GroupProjectAccessPolicyView extends BaseAccessPolicyView {\n  groupId: string;\n  groupName: string;\n  grantedProjectId: string;\n  currentUserInGroup: boolean;\n}\n\nexport class GroupServiceAccountAccessPolicyView extends BaseAccessPolicyView {\n  groupId: string;\n  groupName: string;\n  grantedServiceAccountId: string;\n  currentUserInGroup: boolean;\n}\n\nexport class ServiceAccountProjectAccessPolicyView extends BaseAccessPolicyView {\n  serviceAccountId: string;\n  serviceAccountName: string;\n  grantedProjectId: string;\n  grantedProjectName: string;\n}\n\nexport class ProjectAccessPoliciesView {\n  userAccessPolicies: UserProjectAccessPolicyView[];\n  groupAccessPolicies: GroupProjectAccessPolicyView[];\n  serviceAccountAccessPolicies: ServiceAccountProjectAccessPolicyView[];\n}\n\nexport class ServiceAccountAccessPoliciesView {\n  userAccessPolicies: UserServiceAccountAccessPolicyView[];\n  groupAccessPolicies: GroupServiceAccountAccessPolicyView[];\n}\n","export class PotentialGranteeView {\n  id: string;\n  name: string;\n  type: string;\n  email: string;\n}\n","import { AccessPolicyRequest } from \"./access-policy.request\";\n\nexport class AccessPoliciesCreateRequest {\n  userAccessPolicyRequests?: AccessPolicyRequest[];\n  groupAccessPolicyRequests?: AccessPolicyRequest[];\n  serviceAccountAccessPolicyRequests?: AccessPolicyRequest[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class BaseAccessPolicyResponse extends BaseResponse {\n  id: string;\n  read: boolean;\n  write: boolean;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.read = this.getResponseProperty(\"Read\");\n    this.write = this.getResponseProperty(\"Write\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n\nexport class UserProjectAccessPolicyResponse extends BaseAccessPolicyResponse {\n  organizationUserId: string;\n  organizationUserName: string;\n  grantedProjectId: string;\n  userId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.organizationUserId = this.getResponseProperty(\"OrganizationUserId\");\n    this.organizationUserName = this.getResponseProperty(\"OrganizationUserName\");\n    this.grantedProjectId = this.getResponseProperty(\"GrantedProjectId\");\n    this.userId = this.getResponseProperty(\"UserId\");\n  }\n}\n\nexport class UserServiceAccountAccessPolicyResponse extends BaseAccessPolicyResponse {\n  organizationUserId: string;\n  organizationUserName: string;\n  grantedServiceAccountId: string;\n  userId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.organizationUserId = this.getResponseProperty(\"OrganizationUserId\");\n    this.organizationUserName = this.getResponseProperty(\"OrganizationUserName\");\n    this.grantedServiceAccountId = this.getResponseProperty(\"GrantedServiceAccountId\");\n    this.userId = this.getResponseProperty(\"UserId\");\n  }\n}\n\nexport class GroupProjectAccessPolicyResponse extends BaseAccessPolicyResponse {\n  groupId: string;\n  groupName: string;\n  grantedProjectId: string;\n  currentUserInGroup: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.groupId = this.getResponseProperty(\"GroupId\");\n    this.groupName = this.getResponseProperty(\"GroupName\");\n    this.grantedProjectId = this.getResponseProperty(\"GrantedProjectId\");\n    this.currentUserInGroup = this.getResponseProperty(\"CurrentUserInGroup\");\n  }\n}\n\nexport class GroupServiceAccountAccessPolicyResponse extends BaseAccessPolicyResponse {\n  groupId: string;\n  groupName: string;\n  grantedServiceAccountId: string;\n  currentUserInGroup: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.groupId = this.getResponseProperty(\"GroupId\");\n    this.groupName = this.getResponseProperty(\"GroupName\");\n    this.grantedServiceAccountId = this.getResponseProperty(\"GrantedServiceAccountId\");\n    this.currentUserInGroup = this.getResponseProperty(\"CurrentUserInGroup\");\n  }\n}\n\nexport class ServiceAccountProjectAccessPolicyResponse extends BaseAccessPolicyResponse {\n  serviceAccountId: string;\n  serviceAccountName: string;\n  grantedProjectId: string;\n  grantedProjectName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.serviceAccountId = this.getResponseProperty(\"ServiceAccountId\");\n    this.serviceAccountName = this.getResponseProperty(\"ServiceAccountName\");\n    this.grantedProjectId = this.getResponseProperty(\"GrantedProjectId\");\n    this.grantedProjectName = this.getResponseProperty(\"GrantedProjectName\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport {\n  GroupProjectAccessPolicyResponse,\n  ServiceAccountProjectAccessPolicyResponse,\n  UserProjectAccessPolicyResponse,\n} from \"./access-policy.response\";\n\nexport class ProjectAccessPoliciesResponse extends BaseResponse {\n  userAccessPolicies: UserProjectAccessPolicyResponse[];\n  groupAccessPolicies: GroupProjectAccessPolicyResponse[];\n  serviceAccountAccessPolicies: ServiceAccountProjectAccessPolicyResponse[];\n\n  constructor(response: any) {\n    super(response);\n    const userAccessPolicies = this.getResponseProperty(\"UserAccessPolicies\");\n    this.userAccessPolicies = userAccessPolicies.map(\n      (k: any) => new UserProjectAccessPolicyResponse(k)\n    );\n    const groupAccessPolicies = this.getResponseProperty(\"GroupAccessPolicies\");\n    this.groupAccessPolicies = groupAccessPolicies.map(\n      (k: any) => new GroupProjectAccessPolicyResponse(k)\n    );\n    const serviceAccountAccessPolicies = this.getResponseProperty(\"ServiceAccountAccessPolicies\");\n    this.serviceAccountAccessPolicies = serviceAccountAccessPolicies.map(\n      (k: any) => new ServiceAccountProjectAccessPolicyResponse(k)\n    );\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport {\n  GroupServiceAccountAccessPolicyResponse,\n  UserServiceAccountAccessPolicyResponse,\n} from \"./access-policy.response\";\n\nexport class ServiceAccountAccessPoliciesResponse extends BaseResponse {\n  userAccessPolicies: UserServiceAccountAccessPolicyResponse[];\n  groupAccessPolicies: GroupServiceAccountAccessPolicyResponse[];\n\n  constructor(response: any) {\n    super(response);\n    const userAccessPolicies = this.getResponseProperty(\"UserAccessPolicies\");\n    this.userAccessPolicies = userAccessPolicies.map(\n      (k: any) => new UserServiceAccountAccessPolicyResponse(k)\n    );\n    const groupAccessPolicies = this.getResponseProperty(\"GroupAccessPolicies\");\n    this.groupAccessPolicies = groupAccessPolicies.map(\n      (k: any) => new GroupServiceAccountAccessPolicyResponse(k)\n    );\n  }\n}\n","export class AccessPolicyUpdateRequest {\n  read: boolean;\n  write: boolean;\n}\n","export class AccessPolicyRequest {\n  granteeId: string;\n  read: boolean;\n  write: boolean;\n}\n","export class GrantedPolicyRequest {\n  grantedId: string;\n  read: boolean;\n  write: boolean;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class PotentialGranteeResponse extends BaseResponse {\n  id: string;\n  name: string;\n  type: string;\n  email: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization/organization.service.abstraction\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\n\nimport {\n  BaseAccessPolicyView,\n  GroupProjectAccessPolicyView,\n  GroupServiceAccountAccessPolicyView,\n  ProjectAccessPoliciesView,\n  ServiceAccountAccessPoliciesView,\n  ServiceAccountProjectAccessPolicyView,\n  UserProjectAccessPolicyView,\n  UserServiceAccountAccessPolicyView,\n} from \"../../models/view/access-policy.view\";\nimport { PotentialGranteeView } from \"../../models/view/potential-grantee.view\";\nimport { AccessPoliciesCreateRequest } from \"../../shared/access-policies/models/requests/access-policies-create.request\";\nimport { ProjectAccessPoliciesResponse } from \"../../shared/access-policies/models/responses/project-access-policies.response\";\nimport { ServiceAccountAccessPoliciesResponse } from \"../../shared/access-policies/models/responses/service-accounts-access-policies.response\";\n\nimport { AccessSelectorRowView } from \"./access-selector.component\";\nimport { AccessPolicyUpdateRequest } from \"./models/requests/access-policy-update.request\";\nimport { AccessPolicyRequest } from \"./models/requests/access-policy.request\";\nimport { GrantedPolicyRequest } from \"./models/requests/granted-policy.request\";\nimport {\n  GroupServiceAccountAccessPolicyResponse,\n  UserServiceAccountAccessPolicyResponse,\n  GroupProjectAccessPolicyResponse,\n  ServiceAccountProjectAccessPolicyResponse,\n  UserProjectAccessPolicyResponse,\n} from \"./models/responses/access-policy.response\";\nimport { PotentialGranteeResponse } from \"./models/responses/potential-grantee.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AccessPolicyService {\n  private _projectAccessPolicyChanges$ = new Subject<ProjectAccessPoliciesView>();\n  private _serviceAccountAccessPolicyChanges$ = new Subject<ServiceAccountAccessPoliciesView>();\n  private _serviceAccountGrantedPolicyChanges$ = new Subject<\n    ServiceAccountProjectAccessPolicyView[]\n  >();\n\n  /**\n   * Emits when a project access policy is created or deleted.\n   */\n  readonly projectAccessPolicyChanges$ = this._projectAccessPolicyChanges$.asObservable();\n\n  /**\n   * Emits when a service account access policy is created or deleted.\n   */\n  readonly serviceAccountAccessPolicyChanges$ =\n    this._serviceAccountAccessPolicyChanges$.asObservable();\n\n  /**\n   * Emits when a service account granted policy is created or deleted.\n   */\n  readonly serviceAccountGrantedPolicyChanges$ =\n    this._serviceAccountGrantedPolicyChanges$.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private organizationService: OrganizationService,\n    protected apiService: ApiService,\n    protected encryptService: EncryptService\n  ) {}\n\n  refreshProjectAccessPolicyChanges() {\n    this._projectAccessPolicyChanges$.next(null);\n  }\n\n  refreshServiceAccountAccessPolicyChanges() {\n    this._serviceAccountAccessPolicyChanges$.next(null);\n  }\n\n  async getGrantedPolicies(\n    serviceAccountId: string,\n    organizationId: string\n  ): Promise<ServiceAccountProjectAccessPolicyView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId + \"/granted-policies\",\n      null,\n      true,\n      true\n    );\n\n    const results = new ListResponse(r, ServiceAccountProjectAccessPolicyResponse);\n    return await this.createServiceAccountProjectAccessPolicyViews(results.data, organizationId);\n  }\n\n  async createGrantedPolicies(\n    organizationId: string,\n    serviceAccountId: string,\n    policies: ServiceAccountProjectAccessPolicyView[]\n  ): Promise<ServiceAccountProjectAccessPolicyView[]> {\n    const request = this.getGrantedPoliciesCreateRequest(policies);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/service-accounts/\" + serviceAccountId + \"/granted-policies\",\n      request,\n      true,\n      true\n    );\n    const results = new ListResponse(r, ServiceAccountProjectAccessPolicyResponse);\n    const views = await this.createServiceAccountProjectAccessPolicyViews(\n      results.data,\n      organizationId\n    );\n    this._serviceAccountGrantedPolicyChanges$.next(views);\n    return views;\n  }\n\n  async getProjectAccessPolicies(\n    organizationId: string,\n    projectId: string\n  ): Promise<ProjectAccessPoliciesView> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/projects/\" + projectId + \"/access-policies\",\n      null,\n      true,\n      true\n    );\n\n    const results = new ProjectAccessPoliciesResponse(r);\n    return await this.createProjectAccessPoliciesView(organizationId, results);\n  }\n\n  async getServiceAccountAccessPolicies(\n    serviceAccountId: string\n  ): Promise<ServiceAccountAccessPoliciesView> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-policies\",\n      null,\n      true,\n      true\n    );\n\n    const results = new ServiceAccountAccessPoliciesResponse(r);\n    return await this.createServiceAccountAccessPoliciesView(results);\n  }\n\n  async createProjectAccessPolicies(\n    organizationId: string,\n    projectId: string,\n    projectAccessPoliciesView: ProjectAccessPoliciesView\n  ): Promise<ProjectAccessPoliciesView> {\n    const request = this.getAccessPoliciesCreateRequest(projectAccessPoliciesView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/projects/\" + projectId + \"/access-policies\",\n      request,\n      true,\n      true\n    );\n    const results = new ProjectAccessPoliciesResponse(r);\n    const view = await this.createProjectAccessPoliciesView(organizationId, results);\n    this._projectAccessPolicyChanges$.next(view);\n    return view;\n  }\n\n  async createServiceAccountAccessPolicies(\n    serviceAccountId: string,\n    serviceAccountAccessPoliciesView: ServiceAccountAccessPoliciesView\n  ): Promise<ServiceAccountAccessPoliciesView> {\n    const request = this.getServiceAccountAccessPoliciesCreateRequest(\n      serviceAccountAccessPoliciesView\n    );\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-policies\",\n      request,\n      true,\n      true\n    );\n    const results = new ServiceAccountAccessPoliciesResponse(r);\n    const view = await this.createServiceAccountAccessPoliciesView(results);\n    this._serviceAccountAccessPolicyChanges$.next(view);\n    return view;\n  }\n\n  async deleteAccessPolicy(accessPolicyId: string): Promise<void> {\n    await this.apiService.send(\"DELETE\", \"/access-policies/\" + accessPolicyId, null, true, false);\n    this._projectAccessPolicyChanges$.next(null);\n    this._serviceAccountAccessPolicyChanges$.next(null);\n    this._serviceAccountGrantedPolicyChanges$.next(null);\n  }\n\n  async updateAccessPolicy(baseAccessPolicyView: BaseAccessPolicyView): Promise<void> {\n    const payload = new AccessPolicyUpdateRequest();\n    payload.read = baseAccessPolicyView.read;\n    payload.write = baseAccessPolicyView.write;\n    await this.apiService.send(\n      \"PUT\",\n      \"/access-policies/\" + baseAccessPolicyView.id,\n      payload,\n      true,\n      true\n    );\n  }\n\n  async needToShowAccessRemovalWarning(\n    organizationId: string,\n    policy: AccessSelectorRowView,\n    currentPolicies: AccessSelectorRowView[]\n  ): Promise<boolean> {\n    const organization = this.organizationService.get(organizationId);\n    if (organization.isOwner || organization.isAdmin) {\n      return false;\n    }\n    const currentUserId = organization.userId;\n    const readWriteGroupPolicies = currentPolicies\n      .filter((x) => x.accessPolicyId != policy.accessPolicyId)\n      .filter((x) => x.currentUserInGroup && x.read && x.write).length;\n    const readWriteUserPolicies = currentPolicies\n      .filter((x) => x.accessPolicyId != policy.accessPolicyId)\n      .filter((x) => x.userId == currentUserId && x.read && x.write).length;\n\n    if (policy.type === \"user\" && policy.userId == currentUserId && readWriteGroupPolicies == 0) {\n      return true;\n    } else if (\n      policy.type === \"group\" &&\n      policy.currentUserInGroup &&\n      readWriteUserPolicies == 0 &&\n      readWriteGroupPolicies == 0\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  private async createProjectAccessPoliciesView(\n    organizationId: string,\n    projectAccessPoliciesResponse: ProjectAccessPoliciesResponse\n  ): Promise<ProjectAccessPoliciesView> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const view = new ProjectAccessPoliciesView();\n\n    view.userAccessPolicies = projectAccessPoliciesResponse.userAccessPolicies.map((ap) => {\n      return this.createUserProjectAccessPolicyView(ap);\n    });\n    view.groupAccessPolicies = projectAccessPoliciesResponse.groupAccessPolicies.map((ap) => {\n      return this.createGroupProjectAccessPolicyView(ap);\n    });\n    view.serviceAccountAccessPolicies = await Promise.all(\n      projectAccessPoliciesResponse.serviceAccountAccessPolicies.map(async (ap) => {\n        return await this.createServiceAccountProjectAccessPolicyView(orgKey, ap);\n      })\n    );\n    return view;\n  }\n\n  private getAccessPoliciesCreateRequest(\n    projectAccessPoliciesView: ProjectAccessPoliciesView\n  ): AccessPoliciesCreateRequest {\n    const createRequest = new AccessPoliciesCreateRequest();\n\n    if (projectAccessPoliciesView.userAccessPolicies?.length > 0) {\n      createRequest.userAccessPolicyRequests = projectAccessPoliciesView.userAccessPolicies.map(\n        (ap) => {\n          return this.getAccessPolicyRequest(ap.organizationUserId, ap);\n        }\n      );\n    }\n\n    if (projectAccessPoliciesView.groupAccessPolicies?.length > 0) {\n      createRequest.groupAccessPolicyRequests = projectAccessPoliciesView.groupAccessPolicies.map(\n        (ap) => {\n          return this.getAccessPolicyRequest(ap.groupId, ap);\n        }\n      );\n    }\n\n    if (projectAccessPoliciesView.serviceAccountAccessPolicies?.length > 0) {\n      createRequest.serviceAccountAccessPolicyRequests =\n        projectAccessPoliciesView.serviceAccountAccessPolicies.map((ap) => {\n          return this.getAccessPolicyRequest(ap.serviceAccountId, ap);\n        });\n    }\n    return createRequest;\n  }\n\n  private createUserProjectAccessPolicyView(\n    response: UserProjectAccessPolicyResponse\n  ): UserProjectAccessPolicyView {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedProjectId: response.grantedProjectId,\n      organizationUserId: response.organizationUserId,\n      organizationUserName: response.organizationUserName,\n      userId: response.userId,\n    };\n  }\n\n  private createGroupProjectAccessPolicyView(\n    response: GroupProjectAccessPolicyResponse\n  ): GroupProjectAccessPolicyView {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedProjectId: response.grantedProjectId,\n      groupId: response.groupId,\n      groupName: response.groupName,\n      currentUserInGroup: response.currentUserInGroup,\n    };\n  }\n\n  private async createServiceAccountProjectAccessPolicyView(\n    organizationKey: SymmetricCryptoKey,\n    response: ServiceAccountProjectAccessPolicyResponse\n  ): Promise<ServiceAccountProjectAccessPolicyView> {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedProjectId: response.grantedProjectId,\n      serviceAccountId: response.serviceAccountId,\n      grantedProjectName: response.grantedProjectName\n        ? await this.encryptService.decryptToUtf8(\n            new EncString(response.grantedProjectName),\n            organizationKey\n          )\n        : null,\n      serviceAccountName: await this.encryptService.decryptToUtf8(\n        new EncString(response.serviceAccountName),\n        organizationKey\n      ),\n    };\n  }\n\n  private getServiceAccountAccessPoliciesCreateRequest(\n    serviceAccountAccessPoliciesView: ServiceAccountAccessPoliciesView\n  ): AccessPoliciesCreateRequest {\n    const createRequest = new AccessPoliciesCreateRequest();\n\n    if (serviceAccountAccessPoliciesView.userAccessPolicies?.length > 0) {\n      createRequest.userAccessPolicyRequests =\n        serviceAccountAccessPoliciesView.userAccessPolicies.map((ap) => {\n          return this.getAccessPolicyRequest(ap.organizationUserId, ap);\n        });\n    }\n\n    if (serviceAccountAccessPoliciesView.groupAccessPolicies?.length > 0) {\n      createRequest.groupAccessPolicyRequests =\n        serviceAccountAccessPoliciesView.groupAccessPolicies.map((ap) => {\n          return this.getAccessPolicyRequest(ap.groupId, ap);\n        });\n    }\n\n    return createRequest;\n  }\n\n  private async createServiceAccountAccessPoliciesView(\n    serviceAccountAccessPoliciesResponse: ServiceAccountAccessPoliciesResponse\n  ): Promise<ServiceAccountAccessPoliciesView> {\n    const view = new ServiceAccountAccessPoliciesView();\n    view.userAccessPolicies = serviceAccountAccessPoliciesResponse.userAccessPolicies.map((ap) => {\n      return this.createUserServiceAccountAccessPolicyView(ap);\n    });\n    view.groupAccessPolicies = serviceAccountAccessPoliciesResponse.groupAccessPolicies.map(\n      (ap) => {\n        return this.createGroupServiceAccountAccessPolicyView(ap);\n      }\n    );\n    return view;\n  }\n\n  private createUserServiceAccountAccessPolicyView(\n    response: UserServiceAccountAccessPolicyResponse\n  ): UserServiceAccountAccessPolicyView {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedServiceAccountId: response.grantedServiceAccountId,\n      organizationUserId: response.organizationUserId,\n      organizationUserName: response.organizationUserName,\n      userId: response.userId,\n    };\n  }\n\n  private createGroupServiceAccountAccessPolicyView(\n    response: GroupServiceAccountAccessPolicyResponse\n  ): GroupServiceAccountAccessPolicyView {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedServiceAccountId: response.grantedServiceAccountId,\n      groupId: response.groupId,\n      groupName: response.groupName,\n      currentUserInGroup: response.currentUserInGroup,\n    };\n  }\n\n  async getPeoplePotentialGrantees(organizationId: string) {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/access-policies/people/potential-grantees\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, PotentialGranteeResponse);\n    return await this.createPotentialGranteeViews(organizationId, results.data);\n  }\n\n  async getServiceAccountsPotentialGrantees(organizationId: string) {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/access-policies/service-accounts/potential-grantees\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, PotentialGranteeResponse);\n    return await this.createPotentialGranteeViews(organizationId, results.data);\n  }\n\n  async getProjectsPotentialGrantees(organizationId: string) {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/access-policies/projects/potential-grantees\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, PotentialGranteeResponse);\n    return await this.createPotentialGranteeViews(organizationId, results.data);\n  }\n\n  protected async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  protected getAccessPolicyRequest(\n    granteeId: string,\n    view:\n      | UserProjectAccessPolicyView\n      | UserServiceAccountAccessPolicyView\n      | GroupProjectAccessPolicyView\n      | GroupServiceAccountAccessPolicyView\n      | ServiceAccountProjectAccessPolicyView\n  ) {\n    const request = new AccessPolicyRequest();\n    request.granteeId = granteeId;\n    request.read = view.read;\n    request.write = view.write;\n    return request;\n  }\n\n  protected createBaseAccessPolicyView(\n    response:\n      | UserProjectAccessPolicyResponse\n      | UserServiceAccountAccessPolicyResponse\n      | GroupProjectAccessPolicyResponse\n      | GroupServiceAccountAccessPolicyResponse\n      | ServiceAccountProjectAccessPolicyResponse\n  ) {\n    return {\n      id: response.id,\n      read: response.read,\n      write: response.write,\n      creationDate: response.creationDate,\n      revisionDate: response.revisionDate,\n    };\n  }\n\n  private async createPotentialGranteeViews(\n    organizationId: string,\n    results: PotentialGranteeResponse[]\n  ): Promise<PotentialGranteeView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      results.map(async (r) => {\n        const view = new PotentialGranteeView();\n        view.id = r.id;\n        view.type = r.type;\n        view.email = r.email;\n\n        if (r.type === \"serviceAccount\" || r.type === \"project\") {\n          view.name = await this.encryptService.decryptToUtf8(new EncString(r.name), orgKey);\n        } else {\n          view.name = r.name;\n        }\n        return view;\n      })\n    );\n  }\n\n  private getGrantedPoliciesCreateRequest(\n    policies: ServiceAccountProjectAccessPolicyView[]\n  ): GrantedPolicyRequest[] {\n    return policies.map((ap) => {\n      const request = new GrantedPolicyRequest();\n      request.grantedId = ap.grantedProjectId;\n      request.read = ap.read;\n      request.write = ap.write;\n      return request;\n    });\n  }\n\n  private async createServiceAccountProjectAccessPolicyViews(\n    responses: ServiceAccountProjectAccessPolicyResponse[],\n    organizationId: string\n  ): Promise<ServiceAccountProjectAccessPolicyView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      responses.map(async (response: ServiceAccountProjectAccessPolicyResponse) => {\n        const view = new ServiceAccountProjectAccessPolicyView();\n        view.id = response.id;\n        view.read = response.read;\n        view.write = response.write;\n        view.creationDate = response.creationDate;\n        view.revisionDate = response.revisionDate;\n        view.serviceAccountId = response.serviceAccountId;\n        view.grantedProjectId = response.grantedProjectId;\n        view.serviceAccountName = response.serviceAccountName\n          ? await this.encryptService.decryptToUtf8(\n              new EncString(response.serviceAccountName),\n              orgKey\n            )\n          : null;\n        view.grantedProjectName = response.grantedProjectName\n          ? await this.encryptService.decryptToUtf8(\n              new EncString(response.grantedProjectName),\n              orgKey\n            )\n          : null;\n        return view;\n      })\n    );\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\" class=\"tw-mt-5\">\n  <bit-form-field>\n    <bit-label>{{ label }}</bit-label>\n    <bit-multi-select\n      class=\"tw-mr-4 tw-w-full\"\n      formControlName=\"multiSelect\"\n      [baseItems]=\"selectItems$ | async\"\n      [loading]=\"loading\"\n    ></bit-multi-select>\n    <bit-hint>{{ hint }}</bit-hint>\n    <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n      {{ \"add\" | i18n }}\n    </button>\n  </bit-form-field>\n</form>\n\n<ng-container>\n  <bit-table *ngIf=\"rows$ | async as rows; else spinner\">\n    <ng-container header>\n      <tr>\n        <th bitCell colspan=\"2\">{{ columnTitle }}</th>\n        <th bitCell>{{ \"permissions\" | i18n }}</th>\n      </tr>\n    </ng-container>\n\n    <ng-template body>\n      <ng-container *ngIf=\"rows.length > 0; else empty\">\n        <tr bitRow *ngFor=\"let row of rows\">\n          <td bitCell class=\"tw-w-0 tw-pr-0\">\n            <i class=\"bwi {{ row.icon }} tw-text-muted\" aria-hidden=\"true\"></i>\n          </td>\n          <td bitCell class=\"tw-max-w-sm tw-truncate\">{{ row.name }}</td>\n          <td bitCell>\n            <bit-form-field\n              *ngIf=\"!row.static; else staticPermissions\"\n              class=\"tw-mb-auto tw-inline-block tw-w-auto\"\n            >\n              <select bitInput (change)=\"update($event.target, row)\" [disabled]=\"row.static\">\n                <option value=\"canRead\" [selected]=\"row.read && row.write != true\">\n                  {{ \"canRead\" | i18n }}\n                </option>\n                <option value=\"canReadWrite\" [selected]=\"row.read && row.write\">\n                  {{ \"canReadWrite\" | i18n }}\n                </option>\n              </select>\n            </bit-form-field>\n            <ng-template #staticPermissions>\n              <span *ngIf=\"row.read && row.write != true\">{{ \"canRead\" | i18n }}</span>\n              <span *ngIf=\"row.read != true && row.write\">{{ \"canWrite\" | i18n }}</span>\n              <span *ngIf=\"row.read && row.write\">{{ \"canReadWrite\" | i18n }}</span>\n            </ng-template>\n          </td>\n          <td bitCell class=\"tw-w-0\">\n            <button\n              type=\"button\"\n              bitIconButton=\"bwi-close\"\n              buttonType=\"main\"\n              size=\"default\"\n              [attr.title]=\"'remove' | i18n\"\n              [attr.aria-label]=\"'remove' | i18n\"\n              [bitAction]=\"delete(row)\"\n            ></button>\n          </td>\n        </tr>\n      </ng-container>\n    </ng-template>\n  </bit-table>\n</ng-container>\n\n<ng-template #empty>\n  <div class=\"tw-mt-4 tw-text-center\">\n    {{ emptyMessage }}\n  </div>\n</ng-template>\n\n<ng-template #spinner>\n  <div class=\"tw-items-center tw-justify-center tw-pt-10 tw-text-center\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n  </div>\n</ng-template>\n","import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  combineLatest,\n  firstValueFrom,\n  map,\n  Observable,\n  share,\n  Subject,\n  switchMap,\n  tap,\n} from \"rxjs\";\n\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { SelectItemView } from \"@bitwarden/components/src/multi-select/models/select-item-view\";\n\nimport { BaseAccessPolicyView } from \"../../models/view/access-policy.view\";\n\nimport { AccessPolicyService } from \"./access-policy.service\";\n\nexport type AccessSelectorRowView = {\n  type: \"user\" | \"group\" | \"serviceAccount\" | \"project\";\n  name: string;\n  id: string;\n  accessPolicyId: string;\n  read: boolean;\n  write: boolean;\n  icon: string;\n  userId?: string;\n  currentUserInGroup?: boolean;\n  static?: boolean;\n};\n\n@Component({\n  selector: \"sm-access-selector\",\n  templateUrl: \"./access-selector.component.html\",\n})\nexport class AccessSelectorComponent implements OnInit {\n  static readonly userIcon = \"bwi-user\";\n  static readonly groupIcon = \"bwi-family\";\n  static readonly serviceAccountIcon = \"bwi-wrench\";\n  static readonly projectIcon = \"bwi-collection\";\n\n  /**\n   * Emits the selected itemss on submit.\n   */\n  @Output() onCreateAccessPolicies = new EventEmitter<SelectItemView[]>();\n  @Output() onDeleteAccessPolicy = new EventEmitter<AccessSelectorRowView>();\n  @Output() onUpdateAccessPolicy = new EventEmitter<AccessSelectorRowView>();\n\n  @Input() label: string;\n  @Input() hint: string;\n  @Input() columnTitle: string;\n  @Input() emptyMessage: string;\n  @Input() granteeType: \"people\" | \"serviceAccounts\" | \"projects\";\n\n  protected rows$ = new Subject<AccessSelectorRowView[]>();\n  @Input() private set rows(value: AccessSelectorRowView[]) {\n    this.rows$.next(value);\n  }\n\n  private maxLength = 15;\n  protected formGroup = new FormGroup({\n    multiSelect: new FormControl([], [Validators.required, Validators.maxLength(this.maxLength)]),\n  });\n  protected loading = true;\n\n  protected selectItems$: Observable<SelectItemView[]> = combineLatest([\n    this.rows$,\n    this.route.params,\n  ]).pipe(\n    switchMap(([rows, params]) =>\n      this.getPotentialGrantees(params.organizationId).then((grantees) =>\n        grantees\n          .filter((g) => !rows.some((row) => row.id === g.id))\n          .map((granteeView) => {\n            let icon: string;\n            let listName = granteeView.name;\n            let labelName = granteeView.name;\n            if (granteeView.type === \"user\") {\n              icon = AccessSelectorComponent.userIcon;\n              if (Utils.isNullOrWhitespace(granteeView.name)) {\n                listName = granteeView.email;\n                labelName = granteeView.email;\n              } else {\n                listName = `${granteeView.name} (${granteeView.email})`;\n              }\n            } else if (granteeView.type === \"group\") {\n              icon = AccessSelectorComponent.groupIcon;\n            } else if (granteeView.type === \"serviceAccount\") {\n              icon = AccessSelectorComponent.serviceAccountIcon;\n            } else if (granteeView.type === \"project\") {\n              icon = AccessSelectorComponent.projectIcon;\n            }\n            return {\n              icon: icon,\n              id: granteeView.id,\n              labelName: labelName,\n              listName: listName,\n            };\n          })\n      )\n    ),\n    map((selectItems) => selectItems.sort((a, b) => a.listName.localeCompare(b.listName))),\n    tap(() => {\n      this.loading = false;\n      this.formGroup.reset();\n      this.formGroup.enable();\n    }),\n    share()\n  );\n\n  constructor(private accessPolicyService: AccessPolicyService, private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.formGroup.disable();\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n    if (this.formGroup.invalid) {\n      return;\n    }\n    this.formGroup.disable();\n    this.loading = true;\n\n    this.onCreateAccessPolicies.emit(this.formGroup.value.multiSelect);\n\n    return firstValueFrom(this.selectItems$);\n  };\n\n  async update(target: any, row: AccessSelectorRowView): Promise<void> {\n    if (target.value === \"canRead\") {\n      row.read = true;\n      row.write = false;\n    } else if (target.value === \"canReadWrite\") {\n      row.read = true;\n      row.write = true;\n    }\n    this.onUpdateAccessPolicy.emit(row);\n  }\n\n  delete = (row: AccessSelectorRowView) => async () => {\n    this.loading = true;\n    this.formGroup.disable();\n    this.onDeleteAccessPolicy.emit(row);\n    return firstValueFrom(this.selectItems$);\n  };\n\n  private getPotentialGrantees(organizationId: string) {\n    switch (this.granteeType) {\n      case \"people\":\n        return this.accessPolicyService.getPeoplePotentialGrantees(organizationId);\n      case \"serviceAccounts\":\n        return this.accessPolicyService.getServiceAccountsPotentialGrantees(organizationId);\n      case \"projects\":\n        return this.accessPolicyService.getProjectsPotentialGrantees(organizationId);\n    }\n  }\n\n  static getAccessItemType(item: SelectItemView) {\n    switch (item.icon) {\n      case AccessSelectorComponent.userIcon:\n        return \"user\";\n      case AccessSelectorComponent.groupIcon:\n        return \"group\";\n      case AccessSelectorComponent.serviceAccountIcon:\n        return \"serviceAccount\";\n      case AccessSelectorComponent.projectIcon:\n        return \"project\";\n    }\n  }\n\n  static getBaseAccessPolicyView(row: AccessSelectorRowView) {\n    const view = new BaseAccessPolicyView();\n    view.id = row.accessPolicyId;\n    view.read = row.read;\n    view.write = row.write;\n    return view;\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\n\nimport { AccessPolicyService } from \"../access-policy.service\";\nimport { AccessSelectorComponent, AccessSelectorRowView } from \"../access-selector.component\";\n\nexport interface AccessRemovalDetails {\n  title: string;\n  message: string;\n  operation: \"update\" | \"delete\";\n  type: \"project\" | \"service-account\";\n  returnRoute: string[];\n  policy: AccessSelectorRowView;\n}\n\n@Component({\n  selector: \"sm-access-removal-dialog\",\n  templateUrl: \"./access-removal-dialog.component.html\",\n})\nexport class AccessRemovalDialogComponent implements OnInit {\n  constructor(\n    public dialogRef: DialogRef,\n    private router: Router,\n    private accessPolicyService: AccessPolicyService,\n    @Inject(DIALOG_DATA) public data: AccessRemovalDetails\n  ) {}\n\n  ngOnInit(): void {\n    // TODO remove null checks once strictNullChecks in TypeScript is turned on.\n    if (\n      !this.data.message ||\n      !this.data.title ||\n      !this.data.operation ||\n      !this.data.returnRoute ||\n      !this.data.policy\n    ) {\n      this.dialogRef.close();\n      throw new Error(\n        \"The access removal dialog was not called with the appropriate operation values.\"\n      );\n    }\n  }\n\n  removeAccess = async () => {\n    await this.router.navigate(this.data.returnRoute);\n    if (this.data.operation === \"delete\") {\n      await this.accessPolicyService.deleteAccessPolicy(this.data.policy.accessPolicyId);\n    } else if (this.data.operation == \"update\") {\n      await this.accessPolicyService.updateAccessPolicy(\n        AccessSelectorComponent.getBaseAccessPolicyView(this.data.policy)\n      );\n    }\n    this.dialogRef.close();\n  };\n\n  cancel = () => {\n    if (this.data.type == \"project\") {\n      this.accessPolicyService.refreshProjectAccessPolicyChanges();\n    } else if (this.data.type == \"service-account\") {\n      this.accessPolicyService.refreshServiceAccountAccessPolicyChanges();\n    }\n    this.dialogRef.close();\n  };\n}\n","<bit-simple-dialog>\n  <span bitDialogTitle>{{ data.title | i18n }}</span>\n  <span bitDialogContent>\n    {{ data.message | i18n }}\n  </span>\n  <div bitDialogFooter class=\"tw-flex tw-flex-row tw-gap-2\">\n    <button type=\"button\" bitButton buttonType=\"danger\" [bitAction]=\"removeAccess\">\n      {{ \"removeAccess\" | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" [bitAction]=\"cancel\">\n      {{ \"cancel\" | i18n }}\n    </button>\n  </div>\n</bit-simple-dialog>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { map, Observable, share, startWith, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { ValidationService } from \"@bitwarden/common/abstractions/validation.service\";\nimport { DialogService, SelectItemView } from \"@bitwarden/components\";\n\nimport {\n  GroupProjectAccessPolicyView,\n  ProjectAccessPoliciesView,\n  UserProjectAccessPolicyView,\n} from \"../../models/view/access-policy.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  AccessSelectorComponent,\n  AccessSelectorRowView,\n} from \"../../shared/access-policies/access-selector.component\";\nimport {\n  AccessRemovalDetails,\n  AccessRemovalDialogComponent,\n} from \"../../shared/access-policies/dialogs/access-removal-dialog.component\";\n\n@Component({\n  selector: \"sm-project-people\",\n  templateUrl: \"./project-people.component.html\",\n})\nexport class ProjectPeopleComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private organizationId: string;\n  private projectId: string;\n  private rows: AccessSelectorRowView[];\n\n  protected rows$: Observable<AccessSelectorRowView[]> =\n    this.accessPolicyService.projectAccessPolicyChanges$.pipe(\n      startWith(null),\n      switchMap(() =>\n        this.accessPolicyService.getProjectAccessPolicies(this.organizationId, this.projectId)\n      ),\n      map((policies) => {\n        const rows: AccessSelectorRowView[] = [];\n        policies.userAccessPolicies.forEach((policy) => {\n          rows.push({\n            type: \"user\",\n            name: policy.organizationUserName,\n            id: policy.organizationUserId,\n            accessPolicyId: policy.id,\n            read: policy.read,\n            write: policy.write,\n            userId: policy.userId,\n            icon: AccessSelectorComponent.userIcon,\n          });\n        });\n\n        policies.groupAccessPolicies.forEach((policy) => {\n          rows.push({\n            type: \"group\",\n            name: policy.groupName,\n            id: policy.groupId,\n            accessPolicyId: policy.id,\n            read: policy.read,\n            write: policy.write,\n            currentUserInGroup: policy.currentUserInGroup,\n            icon: AccessSelectorComponent.groupIcon,\n          });\n        });\n        return rows;\n      }),\n      share()\n    );\n\n  protected handleCreateAccessPolicies(selected: SelectItemView[]) {\n    const projectAccessPoliciesView = new ProjectAccessPoliciesView();\n    projectAccessPoliciesView.userAccessPolicies = selected\n      .filter((selection) => AccessSelectorComponent.getAccessItemType(selection) === \"user\")\n      .map((filtered) => {\n        const view = new UserProjectAccessPolicyView();\n        view.grantedProjectId = this.projectId;\n        view.organizationUserId = filtered.id;\n        view.read = true;\n        view.write = false;\n        return view;\n      });\n\n    projectAccessPoliciesView.groupAccessPolicies = selected\n      .filter((selection) => AccessSelectorComponent.getAccessItemType(selection) === \"group\")\n      .map((filtered) => {\n        const view = new GroupProjectAccessPolicyView();\n        view.grantedProjectId = this.projectId;\n        view.groupId = filtered.id;\n        view.read = true;\n        view.write = false;\n        return view;\n      });\n\n    return this.accessPolicyService.createProjectAccessPolicies(\n      this.organizationId,\n      this.projectId,\n      projectAccessPoliciesView\n    );\n  }\n\n  protected async handleDeleteAccessPolicy(policy: AccessSelectorRowView) {\n    if (\n      await this.accessPolicyService.needToShowAccessRemovalWarning(\n        this.organizationId,\n        policy,\n        this.rows\n      )\n    ) {\n      this.launchDeleteWarningDialog(policy);\n      return;\n    }\n\n    try {\n      await this.accessPolicyService.deleteAccessPolicy(policy.accessPolicyId);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  protected async handleUpdateAccessPolicy(policy: AccessSelectorRowView) {\n    if (\n      policy.read === true &&\n      policy.write === false &&\n      (await this.accessPolicyService.needToShowAccessRemovalWarning(\n        this.organizationId,\n        policy,\n        this.rows\n      ))\n    ) {\n      this.launchUpdateWarningDialog(policy);\n      return;\n    }\n\n    try {\n      return await this.accessPolicyService.updateAccessPolicy(\n        AccessSelectorComponent.getBaseAccessPolicyView(policy)\n      );\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private dialogService: DialogService,\n    private validationService: ValidationService,\n    private accessPolicyService: AccessPolicyService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.organizationId = params.organizationId;\n      this.projectId = params.projectId;\n    });\n\n    this.rows$.pipe(takeUntil(this.destroy$)).subscribe((rows) => {\n      this.rows = rows;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private async launchDeleteWarningDialog(policy: AccessSelectorRowView) {\n    this.dialogService.open<unknown, AccessRemovalDetails>(AccessRemovalDialogComponent, {\n      data: {\n        title: \"smAccessRemovalWarningProjectTitle\",\n        message: \"smAccessRemovalWarningProjectMessage\",\n        operation: \"delete\",\n        type: \"project\",\n        returnRoute: [\"sm\", this.organizationId, \"projects\"],\n        policy,\n      },\n    });\n  }\n\n  private launchUpdateWarningDialog(policy: AccessSelectorRowView) {\n    this.dialogService.open<unknown, AccessRemovalDetails>(AccessRemovalDialogComponent, {\n      data: {\n        title: \"smAccessRemovalWarningProjectTitle\",\n        message: \"smAccessRemovalWarningProjectMessage\",\n        operation: \"update\",\n        type: \"project\",\n        returnRoute: [\"sm\", this.organizationId, \"projects\"],\n        policy,\n      },\n    });\n  }\n}\n","<div class=\"tw-w-2/5\">\n  <p class=\"tw-mt-8\">\n    {{ \"projectPeopleDescription\" | i18n }}\n  </p>\n  <sm-access-selector\n    [rows]=\"rows$ | async\"\n    granteeType=\"people\"\n    [label]=\"'people' | i18n\"\n    [hint]=\"'projectPeopleSelectHint' | i18n\"\n    [columnTitle]=\"'groupSlashUser' | i18n\"\n    [emptyMessage]=\"'projectEmptyPeopleAccessPolicies' | i18n\"\n    (onCreateAccessPolicies)=\"handleCreateAccessPolicies($event)\"\n    (onDeleteAccessPolicy)=\"handleDeleteAccessPolicy($event)\"\n    (onUpdateAccessPolicy)=\"handleUpdateAccessPolicy($event)\"\n  >\n  </sm-access-selector>\n</div>\n","<ng-container *ngIf=\"secrets$ | async as secrets; else spinner\">\n  <div *ngIf=\"secrets.length > 0\" class=\"float-right tw-mt-3 tw-items-center\">\n    <button type=\"button\" bitButton buttonType=\"secondary\" (click)=\"openNewSecretDialog()\">\n      <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n      {{ \"newSecret\" | i18n }}\n    </button>\n  </div>\n  <sm-secrets-list\n    (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n    (newSecretEvent)=\"openNewSecretDialog()\"\n    (editSecretEvent)=\"openEditSecret($event)\"\n    (copySecretNameEvent)=\"copySecretName($event)\"\n    (copySecretValueEvent)=\"copySecretValue($event)\"\n    [secrets]=\"secrets\"\n  ></sm-secrets-list>\n</ng-container>\n\n<ng-template #spinner>\n  <div class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n  </div>\n</ng-template>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { SecretListView } from \"../../models/view/secret-list.view\";\nimport {\n  SecretDeleteDialogComponent,\n  SecretDeleteOperation,\n} from \"../../secrets/dialog/secret-delete.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"../../secrets/dialog/secret-dialog.component\";\nimport { SecretService } from \"../../secrets/secret.service\";\n\n@Component({\n  selector: \"sm-project-secrets\",\n  templateUrl: \"./project-secrets.component.html\",\n})\nexport class ProjectSecretsComponent {\n  secrets$: Observable<SecretListView[]>;\n\n  private organizationId: string;\n  private projectId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private secretService: SecretService,\n    private dialogService: DialogService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  ngOnInit() {\n    this.secrets$ = this.secretService.secret$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        this.projectId = params.projectId;\n        return await this.getSecretsByProject();\n      })\n    );\n  }\n\n  private async getSecretsByProject(): Promise<SecretListView[]> {\n    return await this.secretService.getSecretsByProject(this.organizationId, this.projectId);\n  }\n\n  openEditSecret(secretId: string) {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        secretId: secretId,\n      },\n    });\n  }\n\n  openDeleteSecret(event: SecretListView[]) {\n    this.dialogService.open<unknown, SecretDeleteOperation>(SecretDeleteDialogComponent, {\n      data: {\n        secrets: event,\n      },\n    });\n  }\n\n  openNewSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n        projectId: this.projectId,\n      },\n    });\n  }\n\n  copySecretName(name: string) {\n    this.platformUtilsService.copyToClipboard(name);\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"valueCopied\", this.i18nService.t(\"name\"))\n    );\n  }\n\n  async copySecretValue(id: string) {\n    const secret = await this.secretService.getBySecretId(id);\n    this.platformUtilsService.copyToClipboard(secret.value);\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"valueCopied\", this.i18nService.t(\"value\"))\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { map, Observable, startWith, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { ValidationService } from \"@bitwarden/common/abstractions/validation.service\";\nimport { SelectItemView } from \"@bitwarden/components\";\n\nimport {\n  ProjectAccessPoliciesView,\n  ServiceAccountProjectAccessPolicyView,\n} from \"../../models/view/access-policy.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  AccessSelectorComponent,\n  AccessSelectorRowView,\n} from \"../../shared/access-policies/access-selector.component\";\n\n@Component({\n  selector: \"sm-project-service-accounts\",\n  templateUrl: \"./project-service-accounts.component.html\",\n})\nexport class ProjectServiceAccountsComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private organizationId: string;\n  private projectId: string;\n\n  protected rows$: Observable<AccessSelectorRowView[]> =\n    this.accessPolicyService.projectAccessPolicyChanges$.pipe(\n      startWith(null),\n      switchMap(() =>\n        this.accessPolicyService.getProjectAccessPolicies(this.organizationId, this.projectId)\n      ),\n      map((policies) =>\n        policies.serviceAccountAccessPolicies.map((policy) => ({\n          type: \"serviceAccount\",\n          name: policy.serviceAccountName,\n          id: policy.serviceAccountId,\n          accessPolicyId: policy.id,\n          read: policy.read,\n          write: policy.write,\n          icon: AccessSelectorComponent.serviceAccountIcon,\n          static: true,\n        }))\n      )\n    );\n\n  protected handleCreateAccessPolicies(selected: SelectItemView[]) {\n    const projectAccessPoliciesView = new ProjectAccessPoliciesView();\n    projectAccessPoliciesView.serviceAccountAccessPolicies = selected\n      .filter(\n        (selection) => AccessSelectorComponent.getAccessItemType(selection) === \"serviceAccount\"\n      )\n      .map((filtered) => {\n        const view = new ServiceAccountProjectAccessPolicyView();\n        view.grantedProjectId = this.projectId;\n        view.serviceAccountId = filtered.id;\n        view.read = true;\n        view.write = false;\n        return view;\n      });\n\n    return this.accessPolicyService.createProjectAccessPolicies(\n      this.organizationId,\n      this.projectId,\n      projectAccessPoliciesView\n    );\n  }\n\n  protected async handleDeleteAccessPolicy(policy: AccessSelectorRowView) {\n    try {\n      await this.accessPolicyService.deleteAccessPolicy(policy.accessPolicyId);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private validationService: ValidationService,\n    private accessPolicyService: AccessPolicyService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.organizationId = params.organizationId;\n      this.projectId = params.projectId;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","<div class=\"tw-w-2/5\">\n  <p class=\"tw-mt-8\">\n    {{ \"projectServiceAccountsDescription\" | i18n }}\n  </p>\n  <sm-access-selector\n    [rows]=\"rows$ | async\"\n    granteeType=\"serviceAccounts\"\n    [label]=\"'serviceAccounts' | i18n\"\n    [hint]=\"'projectServiceAccountsSelectHint' | i18n\"\n    [columnTitle]=\"'serviceAccounts' | i18n\"\n    [emptyMessage]=\"'projectEmptyServiceAccountAccessPolicies' | i18n\"\n    (onCreateAccessPolicies)=\"handleCreateAccessPolicies($event)\"\n    (onDeleteAccessPolicy)=\"handleDeleteAccessPolicy($event)\"\n  >\n  </sm-access-selector>\n</div>\n","<sm-header *ngIf=\"project$ | async as project\" [title]=\"project.name\" icon=\"bwi-collection\">\n  <bit-breadcrumbs slot=\"breadcrumbs\">\n    <bit-breadcrumb [route]=\"['..']\" icon=\"bwi-angle-left\">{{ \"projects\" | i18n }}</bit-breadcrumb>\n  </bit-breadcrumbs>\n  <bit-tab-nav-bar label=\"Main\" slot=\"tabs\">\n    <bit-tab-link [route]=\"['secrets']\">{{ \"secrets\" | i18n }}</bit-tab-link>\n    <ng-container *ngIf=\"project.write\">\n      <bit-tab-link [route]=\"['people']\">{{ \"people\" | i18n }}</bit-tab-link>\n      <bit-tab-link [route]=\"['service-accounts']\">{{ \"serviceAccounts\" | i18n }}</bit-tab-link>\n    </ng-container>\n  </bit-tab-nav-bar>\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n<router-outlet></router-outlet>\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Observable, switchMap } from \"rxjs\";\n\nimport { ProjectPermissionDetailsView } from \"../../models/view/project.view\";\nimport { ProjectService } from \"../project.service\";\n\n@Component({\n  selector: \"sm-project\",\n  templateUrl: \"./project.component.html\",\n})\nexport class ProjectComponent implements OnInit {\n  project$: Observable<ProjectPermissionDetailsView>;\n\n  constructor(private route: ActivatedRoute, private projectService: ProjectService) {}\n\n  ngOnInit(): void {\n    this.project$ = this.route.params.pipe(\n      switchMap((params) => {\n        return this.projectService.getByProjectId(params.projectId);\n      })\n    );\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  ProjectDeleteDialogComponent,\n  ProjectDeleteOperation,\n} from \"../dialog/project-delete-dialog.component\";\nimport {\n  OperationType,\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../dialog/project-dialog.component\";\nimport { ProjectService } from \"../project.service\";\n\n@Component({\n  selector: \"sm-projects\",\n  templateUrl: \"./projects.component.html\",\n})\nexport class ProjectsComponent implements OnInit {\n  protected projects$: Observable<ProjectListView[]>;\n  protected search: string;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private projectService: ProjectService,\n    private accessPolicyService: AccessPolicyService,\n    private dialogService: DialogService\n  ) {}\n\n  ngOnInit() {\n    this.projects$ = combineLatest([\n      this.route.params,\n      this.projectService.project$.pipe(startWith(null)),\n      this.accessPolicyService.projectAccessPolicyChanges$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(async ([params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getProjects();\n      })\n    );\n  }\n\n  private async getProjects(): Promise<ProjectListView[]> {\n    return await this.projectService.getProjects(this.organizationId);\n  }\n\n  openEditProject(projectId: string) {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        projectId: projectId,\n      },\n    });\n  }\n\n  openNewProjectDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openDeleteProjectDialog(event: ProjectListView[]) {\n    this.dialogService.open<unknown, ProjectDeleteOperation>(ProjectDeleteDialogComponent, {\n      data: {\n        projects: event,\n      },\n    });\n  }\n}\n","<sm-header>\n  <input bitInput [placeholder]=\"'searchProjects' | i18n\" [(ngModel)]=\"search\" />\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n<sm-projects-list\n  (newProjectEvent)=\"openNewProjectDialog()\"\n  (editProjectEvent)=\"openEditProject($event)\"\n  (deleteProjectEvent)=\"openDeleteProjectDialog($event)\"\n  [projects]=\"projects$ | async\"\n  [search]=\"search\"\n>\n</sm-projects-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { ProjectPeopleComponent } from \"./project/project-people.component\";\nimport { ProjectSecretsComponent } from \"./project/project-secrets.component\";\nimport { ProjectServiceAccountsComponent } from \"./project/project-service-accounts.component\";\nimport { ProjectComponent } from \"./project/project.component\";\nimport { ProjectsComponent } from \"./projects/projects.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ProjectsComponent,\n  },\n  {\n    path: \":projectId\",\n    component: ProjectComponent,\n    children: [\n      {\n        path: \"\",\n        pathMatch: \"full\",\n        redirectTo: \"secrets\",\n      },\n      {\n        path: \"secrets\",\n        component: ProjectSecretsComponent,\n      },\n      {\n        path: \"people\",\n        component: ProjectPeopleComponent,\n      },\n      {\n        path: \"service-accounts\",\n        component: ProjectServiceAccountsComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ProjectsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { BreadcrumbsModule } from \"@bitwarden/components\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { ProjectDeleteDialogComponent } from \"./dialog/project-delete-dialog.component\";\nimport { ProjectDialogComponent } from \"./dialog/project-dialog.component\";\nimport { ProjectPeopleComponent } from \"./project/project-people.component\";\nimport { ProjectSecretsComponent } from \"./project/project-secrets.component\";\nimport { ProjectServiceAccountsComponent } from \"./project/project-service-accounts.component\";\nimport { ProjectComponent } from \"./project/project.component\";\nimport { ProjectsRoutingModule } from \"./projects-routing.module\";\nimport { ProjectsComponent } from \"./projects/projects.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, ProjectsRoutingModule, BreadcrumbsModule],\n  declarations: [\n    ProjectsComponent,\n    ProjectDialogComponent,\n    ProjectDeleteDialogComponent,\n    ProjectPeopleComponent,\n    ProjectServiceAccountsComponent,\n    ProjectComponent,\n    ProjectSecretsComponent,\n  ],\n  providers: [],\n})\nexport class ProjectsModule {}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\n\nimport {\n  SecretDeleteDialogComponent,\n  SecretDeleteOperation,\n} from \"./dialog/secret-delete.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"./dialog/secret-dialog.component\";\nimport { SecretService } from \"./secret.service\";\n\n@Component({\n  selector: \"sm-secrets\",\n  templateUrl: \"./secrets.component.html\",\n})\nexport class SecretsComponent implements OnInit {\n  protected secrets$: Observable<SecretListView[]>;\n  protected search: string;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private secretService: SecretService,\n    private dialogService: DialogService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  ngOnInit() {\n    this.secrets$ = this.secretService.secret$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getSecrets();\n      })\n    );\n\n    if (this.route.snapshot.queryParams.search) {\n      this.search = this.route.snapshot.queryParams.search;\n    }\n  }\n\n  private async getSecrets(): Promise<SecretListView[]> {\n    return await this.secretService.getSecrets(this.organizationId);\n  }\n\n  openEditSecret(secretId: string) {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        secretId: secretId,\n      },\n    });\n  }\n\n  openDeleteSecret(event: SecretListView[]) {\n    this.dialogService.open<unknown, SecretDeleteOperation>(SecretDeleteDialogComponent, {\n      data: {\n        secrets: event,\n      },\n    });\n  }\n\n  openNewSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  copySecretName(name: string) {\n    this.platformUtilsService.copyToClipboard(name);\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"valueCopied\", this.i18nService.t(\"name\"))\n    );\n  }\n\n  async copySecretValue(id: string) {\n    const secret = await this.secretService.getBySecretId(id);\n    this.platformUtilsService.copyToClipboard(secret.value);\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"valueCopied\", this.i18nService.t(\"value\"))\n    );\n  }\n}\n","<sm-header>\n  <input bitInput [placeholder]=\"'searchSecrets' | i18n\" [(ngModel)]=\"search\" />\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n<sm-secrets-list\n  (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n  (newSecretEvent)=\"openNewSecretDialog()\"\n  (editSecretEvent)=\"openEditSecret($event)\"\n  (copySecretNameEvent)=\"copySecretName($event)\"\n  (copySecretValueEvent)=\"copySecretValue($event)\"\n  [secrets]=\"secrets$ | async\"\n  [search]=\"search\"\n></sm-secrets-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { SecretsComponent } from \"./secrets.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: SecretsComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SecretsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { SecretDeleteDialogComponent } from \"./dialog/secret-delete.component\";\nimport { SecretDialogComponent } from \"./dialog/secret-dialog.component\";\nimport { SecretsRoutingModule } from \"./secrets-routing.module\";\nimport { SecretsComponent } from \"./secrets.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, SecretsRoutingModule],\n  declarations: [SecretDeleteDialogComponent, SecretDialogComponent, SecretsComponent],\n  providers: [],\n})\nexport class SecretsModule {}\n","import { EncString } from \"@bitwarden/common/models/domain/enc-string\";\n\nexport class AccessTokenRequest {\n  name: EncString;\n  encryptedPayload: EncString;\n  key: EncString;\n  expireAt: Date;\n}\n","export class RevokeAccessTokensRequest {\n  ids: string[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class AccessTokenCreationResponse extends BaseResponse {\n  id: string;\n  name: string;\n  clientSecret: string;\n  expireAt?: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.clientSecret = this.getResponseProperty(\"ClientSecret\");\n    this.expireAt = this.getResponseProperty(\"ExpireAt\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class AccessTokenResponse extends BaseResponse {\n  id: string;\n  name: string;\n  scopes: string[];\n  expireAt?: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.scopes = this.getResponseProperty(\"Scopes\");\n    this.expireAt = this.getResponseProperty(\"ExpireAt\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","export class AccessTokenView {\n  id: string;\n  name: string;\n  scopes: string[];\n  expireAt?: Date;\n  creationDate: Date;\n  revisionDate: Date;\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { CryptoFunctionService } from \"@bitwarden/common/abstractions/cryptoFunction.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\n\nimport { AccessTokenRequest } from \"../models/requests/access-token.request\";\nimport { RevokeAccessTokensRequest } from \"../models/requests/revoke-access-tokens.request\";\nimport { AccessTokenCreationResponse } from \"../models/responses/access-token-creation.response\";\nimport { AccessTokenResponse } from \"../models/responses/access-tokens.response\";\nimport { AccessTokenView } from \"../models/view/access-token.view\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AccessService {\n  private readonly _accessTokenVersion = \"0\";\n  protected _accessToken: Subject<AccessTokenView> = new Subject();\n\n  accessToken$ = this._accessToken.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getAccessTokens(\n    organizationId: string,\n    serviceAccountId: string\n  ): Promise<AccessTokenView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-tokens\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, AccessTokenResponse);\n\n    return await this.createAccessTokenViews(organizationId, results.data);\n  }\n\n  async createAccessToken(\n    organizationId: string,\n    serviceAccountId: string,\n    accessTokenView: AccessTokenView\n  ): Promise<string> {\n    const keyMaterial = await this.cryptoFunctionService.randomBytes(16);\n    const key = await this.cryptoFunctionService.hkdf(\n      keyMaterial,\n      \"bitwarden-accesstoken\",\n      \"sm-access-token\",\n      64,\n      \"sha256\"\n    );\n    const encryptionKey = new SymmetricCryptoKey(key);\n\n    const request = await this.createAccessTokenRequest(\n      organizationId,\n      encryptionKey,\n      accessTokenView\n    );\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-tokens\",\n      request,\n      true,\n      true\n    );\n    const result = new AccessTokenCreationResponse(r);\n    this._accessToken.next(null);\n    const b64Key = Utils.fromBufferToB64(keyMaterial);\n    return `${this._accessTokenVersion}.${result.id}.${result.clientSecret}:${b64Key}`;\n  }\n\n  async revokeAccessTokens(serviceAccountId: string, accessTokenIds: string[]): Promise<void> {\n    const request = new RevokeAccessTokensRequest();\n    request.ids = accessTokenIds;\n\n    await this.apiService.send(\n      \"POST\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-tokens/revoke\",\n      request,\n      true,\n      false\n    );\n\n    this._accessToken.next(null);\n  }\n\n  private async createAccessTokenRequest(\n    organizationId: string,\n    encryptionKey: SymmetricCryptoKey,\n    accessTokenView: AccessTokenView\n  ): Promise<AccessTokenRequest> {\n    const organizationKey = await this.getOrganizationKey(organizationId);\n    const accessTokenRequest = new AccessTokenRequest();\n    const [name, encryptedPayload, key] = await Promise.all([\n      await this.encryptService.encrypt(accessTokenView.name, organizationKey),\n      await this.encryptService.encrypt(\n        JSON.stringify({ encryptionKey: organizationKey.keyB64 }),\n        encryptionKey\n      ),\n      await this.encryptService.encrypt(encryptionKey.keyB64, organizationKey),\n    ]);\n\n    accessTokenRequest.name = name;\n    accessTokenRequest.encryptedPayload = encryptedPayload;\n    accessTokenRequest.key = key;\n    accessTokenRequest.expireAt = accessTokenView.expireAt;\n    return accessTokenRequest;\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async createAccessTokenViews(\n    organizationId: string,\n    accessTokenResponses: AccessTokenResponse[]\n  ): Promise<AccessTokenView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      accessTokenResponses.map(async (s) => {\n        const view = new AccessTokenView();\n        view.id = s.id;\n        view.name = await this.encryptService.decryptToUtf8(new EncString(s.name), orgKey);\n        view.scopes = s.scopes;\n        view.expireAt = s.expireAt ? new Date(s.expireAt) : null;\n        view.creationDate = new Date(s.creationDate);\n        view.revisionDate = new Date(s.revisionDate);\n        return view;\n      })\n    );\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\n\nexport interface AccessTokenDetails {\n  subTitle: string;\n  expirationDate?: Date;\n  accessToken: string;\n}\n\n@Component({\n  selector: \"sm-access-token-dialog\",\n  templateUrl: \"./access-token-dialog.component.html\",\n})\nexport class AccessTokenDialogComponent implements OnInit {\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: AccessTokenDetails,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {\n    this.dialogRef.disableClose = true;\n  }\n\n  ngOnInit(): void {\n    // TODO remove null checks once strictNullChecks in TypeScript is turned on.\n    if (!this.data.subTitle || !this.data.accessToken) {\n      this.dialogRef.close();\n      throw new Error(\"The access token dialog was not called with the appropriate values.\");\n    }\n  }\n\n  copyAccessToken(): void {\n    this.platformUtilsService.copyToClipboard(this.data.accessToken);\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"accessTokenCreatedAndCopied\")\n    );\n    this.dialogRef.close();\n  }\n}\n","<bit-dialog dialogSize=\"default\">\n  <ng-container bitDialogTitle>\n    <span>{{ \"createAccessToken\" | i18n }}</span>\n    <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n      {{ data.subTitle }}\n    </span>\n  </ng-container>\n\n  <div bitDialogContent>\n    <bit-callout type=\"info\" [title]=\"'accessTokenCallOutTitle' | i18n\">\n      {{ \"downloadAccessToken\" | i18n }}<br />\n      {{ \"expiresOnAccessToken\" | i18n }}\n      {{ data.expirationDate === null ? (\"never\" | i18n) : (data.expirationDate | date: \"medium\") }}\n    </bit-callout>\n\n    <bit-form-field class=\"tw-mb-0\">\n      <bit-label>{{ \"accessToken\" | i18n }}</bit-label>\n      <textarea bitInput disabled rows=\"4\">{{ data.accessToken }}</textarea>\n    </bit-form-field>\n    {{ \"expiresOnAccessToken\" | i18n }}\n    {{ data.expirationDate === null ? (\"never\" | i18n) : (data.expirationDate | date: \"medium\") }}\n  </div>\n\n  <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n    <button type=\"button\" bitButton buttonType=\"primary\" (click)=\"copyAccessToken()\">\n      <i class=\"bwi bwi-clone\" aria-hidden=\"true\"></i>\n      {{ \"copyToken\" | i18n }}\n    </button>\n  </div>\n</bit-dialog>\n","<ng-container [formGroup]=\"form\">\n  <bit-form-field>\n    <bit-label>{{ \"expires\" | i18n }}</bit-label>\n    <select bitInput formControlName=\"expires\">\n      <option ngValue=\"never\">{{ \"never\" | i18n }}</option>\n      <option *ngFor=\"let day of expirationDayOptions\" [ngValue]=\"day\">\n        {{ \"days\" | i18n: day }}\n      </option>\n      <option ngValue=\"custom\">{{ \"custom\" | i18n }}</option>\n    </select>\n  </bit-form-field>\n  <bit-form-field *ngIf=\"form.value.expires === 'custom'\">\n    <bit-label>{{ \"expirationDate\" | i18n }}</bit-label>\n    <input\n      bitInput\n      type=\"datetime-local\"\n      [min]=\"currentDate | date: 'YYYY-MM-ddThh:mm'\"\n      formControlName=\"expireDateTime\"\n    />\n  </bit-form-field>\n</ng-container>\n","import { DatePipe } from \"@angular/common\";\nimport { Component, Input, OnDestroy, OnInit } from \"@angular/core\";\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators,\n} from \"@angular/forms\";\nimport { Subject, takeUntil } from \"rxjs\";\n\n@Component({\n  selector: \"sm-expiration-options\",\n  templateUrl: \"./expiration-options.component.html\",\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: ExpirationOptionsComponent,\n    },\n    {\n      provide: NG_VALIDATORS,\n      multi: true,\n      useExisting: ExpirationOptionsComponent,\n    },\n  ],\n})\nexport class ExpirationOptionsComponent\n  implements ControlValueAccessor, Validator, OnInit, OnDestroy\n{\n  private destroy$ = new Subject<void>();\n\n  @Input() expirationDayOptions: number[];\n\n  @Input() set touched(val: boolean) {\n    if (val) {\n      this.form.markAllAsTouched();\n    }\n  }\n\n  currentDate = new Date();\n\n  protected form = new FormGroup({\n    expires: new FormControl(\"never\", [Validators.required]),\n    expireDateTime: new FormControl(\"\", [Validators.required]),\n  });\n\n  constructor(private datePipe: DatePipe) {}\n\n  async ngOnInit() {\n    this.form.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      this._onChange(this.getExpiresDate());\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private _onChange = (_value: Date | null): void => undefined;\n  registerOnChange(fn: (value: Date | null) => void): void {\n    this._onChange = fn;\n  }\n\n  onTouched = (): void => undefined;\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  validate(control: AbstractControl<any, any>): ValidationErrors {\n    if (\n      (this.form.value.expires == \"custom\" && this.form.value.expireDateTime) ||\n      this.form.value.expires !== \"custom\"\n    ) {\n      return null;\n    }\n    return {\n      required: true,\n    };\n  }\n\n  writeValue(value: Date | null): void {\n    if (value == null) {\n      this.form.setValue({ expires: \"never\", expireDateTime: null });\n    }\n    if (value) {\n      this.form.setValue({\n        expires: \"custom\",\n        expireDateTime: this.datePipe.transform(value, \"YYYY-MM-ddThh:mm\"),\n      });\n    }\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    isDisabled ? this.form.disable() : this.form.enable();\n  }\n\n  private getExpiresDate(): Date | null {\n    if (this.form.value.expires == \"never\") {\n      return null;\n    }\n    if (this.form.value.expires == \"custom\") {\n      return new Date(this.form.value.expireDateTime);\n    }\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() + Number(this.form.value.expires));\n    return currentDate;\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../../../models/view/service-account.view\";\nimport { AccessTokenView } from \"../../models/view/access-token.view\";\nimport { AccessService } from \"../access.service\";\n\nimport { AccessTokenDetails, AccessTokenDialogComponent } from \"./access-token-dialog.component\";\n\nexport interface AccessTokenOperation {\n  organizationId: string;\n  serviceAccountView: ServiceAccountView;\n}\n\n@Component({\n  selector: \"sm-access-token-create-dialog\",\n  templateUrl: \"./access-token-create-dialog.component.html\",\n})\nexport class AccessTokenCreateDialogComponent implements OnInit {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", [Validators.required, Validators.maxLength(80)]),\n    expirationDateControl: new FormControl(null),\n  });\n  protected loading = false;\n\n  expirationDayOptions = [7, 30, 60];\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: AccessTokenOperation,\n    private dialogService: DialogService,\n    private accessService: AccessService\n  ) {}\n\n  async ngOnInit() {\n    if (\n      !this.data.organizationId ||\n      !this.data.serviceAccountView?.id ||\n      !this.data.serviceAccountView?.name\n    ) {\n      this.dialogRef.close();\n      throw new Error(\n        `The access token create dialog was not called with the appropriate operation values.`\n      );\n    }\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n    if (this.formGroup.invalid) {\n      return;\n    }\n    const accessTokenView = new AccessTokenView();\n    accessTokenView.name = this.formGroup.value.name;\n    accessTokenView.expireAt = this.formGroup.value.expirationDateControl;\n    const accessToken = await this.accessService.createAccessToken(\n      this.data.organizationId,\n      this.data.serviceAccountView.id,\n      accessTokenView\n    );\n    this.openAccessTokenDialog(\n      this.data.serviceAccountView.name,\n      accessToken,\n      accessTokenView.expireAt\n    );\n    this.dialogRef.close();\n  };\n\n  private openAccessTokenDialog(\n    serviceAccountName: string,\n    accessToken: string,\n    expirationDate?: Date\n  ) {\n    this.dialogService.open<unknown, AccessTokenDetails>(AccessTokenDialogComponent, {\n      data: {\n        subTitle: serviceAccountName,\n        expirationDate: expirationDate,\n        accessToken: accessToken,\n      },\n    });\n  }\n\n  static openNewAccessTokenDialog(\n    dialogService: DialogService,\n    serviceAccountId: string,\n    organizationId: string\n  ) {\n    // TODO once service account names are implemented in service account contents page pass in here.\n    const serviceAccountView = new ServiceAccountView();\n    serviceAccountView.id = serviceAccountId;\n    serviceAccountView.name = \"placeholder\";\n\n    return dialogService.open<unknown, AccessTokenOperation>(AccessTokenCreateDialogComponent, {\n      data: {\n        organizationId: organizationId,\n        serviceAccountView: serviceAccountView,\n      },\n    });\n  }\n}\n","<div *ngIf=\"!tokens\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<sm-no-items *ngIf=\"tokens?.length == 0\">\n  <ng-container slot=\"title\">{{ \"accessTokensNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container slot=\"description\">{{ \"accessTokensNoItemsDesc\" | i18n }}</ng-container>\n  <button\n    type=\"button\"\n    slot=\"button\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"newAccessTokenEvent.emit()\"\n  >\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"createAccessToken\" | i18n }}\n  </button>\n</sm-no-items>\n\n<bit-table *ngIf=\"tokens?.length >= 1\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"tw-m-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell>{{ \"name\" | i18n }}</th>\n      <th bitCell>{{ \"permissions\" | i18n }}</th>\n      <th bitCell>{{ \"expires\" | i18n }}</th>\n      <th bitCell>{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body>\n    <tr bitRow *ngFor=\"let token of tokens\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(token.id) : null\"\n          [checked]=\"selection.isSelected(token.id)\"\n        />\n      </td>\n      <td bitCell>{{ token.name }}</td>\n      <td bitCell>{{ permission(token) | i18n }}</td>\n      <td bitCell>\n        {{ token.expireAt === null ? (\"never\" | i18n) : (token.expireAt | date: \"medium\") }}\n      </td>\n      <td bitCell>{{ token.revisionDate | date: \"medium\" }}</td>\n      <td bitCell>\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"tokenMenu\"\n        ></button>\n      </td>\n\n      <bit-menu #tokenMenu>\n        <button type=\"button\" bitMenuItem (click)=\"revokeAccessTokensEvent.emit([token])\">\n          <span class=\"tw-text-danger\">\n            <i class=\"bwi bwi-fw bwi-minus-circle\" aria-hidden=\"true\"></i>\n            {{ \"revokeAccessToken\" | i18n }}\n          </span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"revokeSelected()\">\n    <i class=\"bwi bwi-fw bwi-minus-circle\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">{{ \"revokeAccessTokens\" | i18n }}</span>\n  </button>\n</bit-menu>\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"default\">\n    <ng-container bitDialogTitle>\n      <span>{{ \"createAccessToken\" | i18n }}</span>\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        {{ data.serviceAccountView.name }}\n      </span>\n    </ng-container>\n\n    <div bitDialogContent>\n      <bit-form-field>\n        <bit-label>{{ \"name\" | i18n }}</bit-label>\n        <input bitInput formControlName=\"name\" />\n      </bit-form-field>\n      <div class=\"tw-mb-6\">\n        <bit-form-field class=\"tw-mb-0\">\n          <bit-label>{{ \"permissions\" | i18n }}</bit-label>\n          <select bitInput disabled>\n            <option selected value=\"canRead\">\n              {{ \"canRead\" | i18n }}\n            </option>\n          </select>\n        </bit-form-field>\n        <span class=\"tw-text-sm tw-text-muted\">\n          {{ \"accessTokenPermissionsBetaNotification\" | i18n }}\n        </span>\n      </div>\n      <sm-expiration-options\n        formControlName=\"expirationDateControl\"\n        [expirationDayOptions]=\"expirationDayOptions\"\n        [touched]=\"formGroup.controls.expirationDateControl.touched\"\n      ></sm-expiration-options>\n    </div>\n\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button class=\"tw-normal-case\" type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"createAccessToken\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </div>\n  </bit-dialog>\n</form>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, Output } from \"@angular/core\";\n\nimport { AccessTokenView } from \"../models/view/access-token.view\";\n\n@Component({\n  selector: \"sm-access-list\",\n  templateUrl: \"./access-list.component.html\",\n})\nexport class AccessListComponent {\n  @Input()\n  get tokens(): AccessTokenView[] {\n    return this._tokens;\n  }\n  set tokens(secrets: AccessTokenView[]) {\n    this.selection.clear();\n    this._tokens = secrets;\n  }\n  private _tokens: AccessTokenView[];\n\n  @Output() newAccessTokenEvent = new EventEmitter();\n  @Output() revokeAccessTokensEvent = new EventEmitter<AccessTokenView[]>();\n\n  protected selection = new SelectionModel<string>(true, []);\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.tokens.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.tokens.map((s) => s.id));\n  }\n\n  protected revokeSelected() {\n    const selected = this.tokens.filter((s) => this.selection.selected.includes(s.id));\n    this.revokeAccessTokensEvent.emit(selected);\n  }\n\n  protected permission(token: AccessTokenView) {\n    return \"canRead\";\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { DialogService } from \"@bitwarden/components\";\nimport { UserVerificationPromptComponent } from \"@bitwarden/web-vault/app/components/user-verification-prompt.component\";\n\nimport { AccessTokenView } from \"../models/view/access-token.view\";\n\nimport { AccessService } from \"./access.service\";\nimport { AccessTokenCreateDialogComponent } from \"./dialogs/access-token-create-dialog.component\";\n\n@Component({\n  selector: \"sm-access-tokens\",\n  templateUrl: \"./access-tokens.component.html\",\n})\nexport class AccessTokenComponent implements OnInit {\n  accessTokens$: Observable<AccessTokenView[]>;\n\n  private serviceAccountId: string;\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private accessService: AccessService,\n    private dialogService: DialogService,\n    private modalService: ModalService,\n    private platformUtilsService: PlatformUtilsService\n  ) {}\n\n  ngOnInit() {\n    this.accessTokens$ = this.accessService.accessToken$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        this.serviceAccountId = params.serviceAccountId;\n        return await this.getAccessTokens();\n      })\n    );\n  }\n\n  protected async revoke(tokens: AccessTokenView[]) {\n    if (!(await this.verifyUser())) {\n      return;\n    }\n\n    await this.accessService.revokeAccessTokens(\n      this.serviceAccountId,\n      tokens.map((t) => t.id)\n    );\n\n    this.platformUtilsService.showToast(\"success\", null, \"Access tokens revoked.\");\n  }\n\n  protected openNewAccessTokenDialog() {\n    AccessTokenCreateDialogComponent.openNewAccessTokenDialog(\n      this.dialogService,\n      this.serviceAccountId,\n      this.organizationId\n    );\n  }\n\n  private verifyUser() {\n    const ref = this.modalService.open(UserVerificationPromptComponent, {\n      allowMultipleModals: true,\n      data: {\n        confirmDescription: \"revokeAccessTokenDesc\",\n        confirmButtonText: \"revokeAccessToken\",\n        modalTitle: \"revokeAccessToken\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return ref.onClosedPromise();\n  }\n\n  private async getAccessTokens(): Promise<AccessTokenView[]> {\n    return await this.accessService.getAccessTokens(this.organizationId, this.serviceAccountId);\n  }\n}\n","<sm-access-list\n  [tokens]=\"accessTokens$ | async\"\n  (newAccessTokenEvent)=\"openNewAccessTokenDialog()\"\n  (revokeAccessTokensEvent)=\"revoke($event)\"\n></sm-access-list>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  combineLatestWith,\n  map,\n  Observable,\n  share,\n  startWith,\n  Subject,\n  switchMap,\n  takeUntil,\n} from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { ValidationService } from \"@bitwarden/common/abstractions/validation.service\";\nimport { DialogService, SimpleDialogOptions, SimpleDialogType } from \"@bitwarden/components\";\nimport { SelectItemView } from \"@bitwarden/components/src/multi-select/models/select-item-view\";\n\nimport {\n  GroupServiceAccountAccessPolicyView,\n  ServiceAccountAccessPoliciesView,\n  UserServiceAccountAccessPolicyView,\n} from \"../../models/view/access-policy.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  AccessSelectorComponent,\n  AccessSelectorRowView,\n} from \"../../shared/access-policies/access-selector.component\";\nimport {\n  AccessRemovalDetails,\n  AccessRemovalDialogComponent,\n} from \"../../shared/access-policies/dialogs/access-removal-dialog.component\";\n\n@Component({\n  selector: \"sm-service-account-people\",\n  templateUrl: \"./service-account-people.component.html\",\n})\nexport class ServiceAccountPeopleComponent {\n  private destroy$ = new Subject<void>();\n  private serviceAccountId: string;\n  private organizationId: string;\n  private rows: AccessSelectorRowView[];\n\n  protected rows$: Observable<AccessSelectorRowView[]> =\n    this.accessPolicyService.serviceAccountAccessPolicyChanges$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(([_, params]) =>\n        this.accessPolicyService.getServiceAccountAccessPolicies(params.serviceAccountId)\n      ),\n      map((policies) => {\n        const rows: AccessSelectorRowView[] = [];\n        policies.userAccessPolicies.forEach((policy) => {\n          rows.push({\n            type: \"user\",\n            name: policy.organizationUserName,\n            id: policy.organizationUserId,\n            accessPolicyId: policy.id,\n            read: policy.read,\n            write: policy.write,\n            userId: policy.userId,\n            icon: AccessSelectorComponent.userIcon,\n            static: true,\n          });\n        });\n\n        policies.groupAccessPolicies.forEach((policy) => {\n          rows.push({\n            type: \"group\",\n            name: policy.groupName,\n            id: policy.groupId,\n            accessPolicyId: policy.id,\n            read: policy.read,\n            write: policy.write,\n            currentUserInGroup: policy.currentUserInGroup,\n            icon: AccessSelectorComponent.groupIcon,\n            static: true,\n          });\n        });\n\n        return rows;\n      }),\n      share()\n    );\n\n  protected handleCreateAccessPolicies(selected: SelectItemView[]) {\n    const serviceAccountAccessPoliciesView = new ServiceAccountAccessPoliciesView();\n    serviceAccountAccessPoliciesView.userAccessPolicies = selected\n      .filter((selection) => AccessSelectorComponent.getAccessItemType(selection) === \"user\")\n      .map((filtered) => {\n        const view = new UserServiceAccountAccessPolicyView();\n        view.grantedServiceAccountId = this.serviceAccountId;\n        view.organizationUserId = filtered.id;\n        view.read = true;\n        view.write = true;\n        return view;\n      });\n\n    serviceAccountAccessPoliciesView.groupAccessPolicies = selected\n      .filter((selection) => AccessSelectorComponent.getAccessItemType(selection) === \"group\")\n      .map((filtered) => {\n        const view = new GroupServiceAccountAccessPolicyView();\n        view.grantedServiceAccountId = this.serviceAccountId;\n        view.groupId = filtered.id;\n        view.read = true;\n        view.write = true;\n        return view;\n      });\n\n    return this.accessPolicyService.createServiceAccountAccessPolicies(\n      this.serviceAccountId,\n      serviceAccountAccessPoliciesView\n    );\n  }\n\n  protected async handleDeleteAccessPolicy(policy: AccessSelectorRowView) {\n    if (\n      await this.accessPolicyService.needToShowAccessRemovalWarning(\n        this.organizationId,\n        policy,\n        this.rows\n      )\n    ) {\n      this.launchDeleteWarningDialog(policy);\n      return;\n    }\n\n    try {\n      await this.accessPolicyService.deleteAccessPolicy(policy.accessPolicyId);\n      const simpleDialogOpts: SimpleDialogOptions = {\n        title: this.i18nService.t(\"saPeopleWarningTitle\"),\n        content: this.i18nService.t(\"saPeopleWarningMessage\"),\n        type: SimpleDialogType.WARNING,\n        acceptButtonText: this.i18nService.t(\"close\"),\n        cancelButtonText: null,\n      };\n      this.dialogService.openSimpleDialog(simpleDialogOpts);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private dialogService: DialogService,\n    private i18nService: I18nService,\n    private validationService: ValidationService,\n    private accessPolicyService: AccessPolicyService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.serviceAccountId = params.serviceAccountId;\n      this.organizationId = params.organizationId;\n    });\n\n    this.rows$.pipe(takeUntil(this.destroy$)).subscribe((rows) => {\n      this.rows = rows;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private launchDeleteWarningDialog(policy: AccessSelectorRowView) {\n    this.dialogService.open<unknown, AccessRemovalDetails>(AccessRemovalDialogComponent, {\n      data: {\n        title: \"smAccessRemovalWarningSaTitle\",\n        message: \"smAccessRemovalWarningSaMessage\",\n        operation: \"delete\",\n        type: \"service-account\",\n        returnRoute: [\"sm\", this.organizationId, \"service-accounts\"],\n        policy,\n      },\n    });\n  }\n}\n","<div class=\"tw-mt-4 tw-w-2/5\">\n  <p class=\"tw-mt-6\">\n    {{ \"serviceAccountPeopleDescription\" | i18n }}\n  </p>\n  <sm-access-selector\n    [rows]=\"rows$ | async\"\n    granteeType=\"people\"\n    [label]=\"'people' | i18n\"\n    [hint]=\"'projectPeopleSelectHint' | i18n\"\n    [columnTitle]=\"'groupSlashUser' | i18n\"\n    [emptyMessage]=\"'projectEmptyPeopleAccessPolicies' | i18n\"\n    (onCreateAccessPolicies)=\"handleCreateAccessPolicies($event)\"\n    (onDeleteAccessPolicy)=\"handleDeleteAccessPolicy($event)\"\n  >\n  </sm-access-selector>\n</div>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, map, Observable, startWith, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { ValidationService } from \"@bitwarden/common/abstractions/validation.service\";\nimport { SelectItemView } from \"@bitwarden/components/src/multi-select/models/select-item-view\";\n\nimport { ServiceAccountProjectAccessPolicyView } from \"../../models/view/access-policy.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  AccessSelectorComponent,\n  AccessSelectorRowView,\n} from \"../../shared/access-policies/access-selector.component\";\n\n@Component({\n  selector: \"sm-service-account-projects\",\n  templateUrl: \"./service-account-projects.component.html\",\n})\nexport class ServiceAccountProjectsComponent {\n  private destroy$ = new Subject<void>();\n  private serviceAccountId: string;\n  private organizationId: string;\n\n  protected rows$: Observable<AccessSelectorRowView[]> =\n    this.accessPolicyService.serviceAccountGrantedPolicyChanges$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(([_, params]) =>\n        this.accessPolicyService.getGrantedPolicies(params.serviceAccountId, params.organizationId)\n      ),\n      map((policies) => {\n        return policies.map((policy) => {\n          return {\n            type: \"project\",\n            name: policy.grantedProjectName,\n            id: policy.grantedProjectId,\n            accessPolicyId: policy.id,\n            read: policy.read,\n            write: policy.write,\n            icon: AccessSelectorComponent.projectIcon,\n            static: true,\n          } as AccessSelectorRowView;\n        });\n      })\n    );\n\n  protected handleCreateAccessPolicies(selected: SelectItemView[]) {\n    const serviceAccountProjectAccessPolicyView = selected\n      .filter((selection) => AccessSelectorComponent.getAccessItemType(selection) === \"project\")\n      .map((filtered) => {\n        const view = new ServiceAccountProjectAccessPolicyView();\n        view.serviceAccountId = this.serviceAccountId;\n        view.grantedProjectId = filtered.id;\n        view.read = true;\n        view.write = false;\n        return view;\n      });\n\n    return this.accessPolicyService.createGrantedPolicies(\n      this.organizationId,\n      this.serviceAccountId,\n      serviceAccountProjectAccessPolicyView\n    );\n  }\n\n  protected async handleDeleteAccessPolicy(policy: AccessSelectorRowView) {\n    try {\n      await this.accessPolicyService.deleteAccessPolicy(policy.accessPolicyId);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private validationService: ValidationService,\n    private accessPolicyService: AccessPolicyService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.organizationId = params.organizationId;\n      this.serviceAccountId = params.serviceAccountId;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","<div class=\"tw-mt-4 tw-w-2/5\">\n  <p class=\"tw-mt-6\">\n    {{ \"serviceAccountProjectsDescription\" | i18n }}\n  </p>\n  <sm-access-selector\n    [rows]=\"rows$ | async\"\n    granteeType=\"projects\"\n    [label]=\"'projects' | i18n\"\n    [hint]=\"'newSaSelectAccess' | i18n\"\n    [columnTitle]=\"'projects' | i18n\"\n    [emptyMessage]=\"'serviceAccountEmptyProjectAccesspolicies' | i18n\"\n    (onCreateAccessPolicies)=\"handleCreateAccessPolicies($event)\"\n    (onDeleteAccessPolicy)=\"handleDeleteAccessPolicy($event)\"\n  >\n  </sm-access-selector>\n</div>\n","<sm-header\n  *ngIf=\"serviceAccount$ | async as serviceAccount\"\n  [title]=\"serviceAccount.name\"\n  icon=\"bwi-wrench\"\n>\n  <bit-breadcrumbs slot=\"breadcrumbs\">\n    <bit-breadcrumb [route]=\"['..']\" icon=\"bwi-angle-left\">{{\n      \"serviceAccounts\" | i18n\n    }}</bit-breadcrumb>\n  </bit-breadcrumbs>\n  <sm-new-menu></sm-new-menu>\n  <bit-tab-nav-bar label=\"Main\" slot=\"tabs\">\n    <bit-tab-link [route]=\"['projects']\">{{ \"projects\" | i18n }}</bit-tab-link>\n    <bit-tab-link [route]=\"['people']\">{{ \"people\" | i18n }}</bit-tab-link>\n    <bit-tab-link [route]=\"['access']\">{{ \"accessTokens\" | i18n }}</bit-tab-link>\n  </bit-tab-nav-bar>\n  <button\n    type=\"button\"\n    slot=\"secondary\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"openNewAccessTokenDialog()\"\n  >\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"createAccessToken\" | i18n }}\n  </button>\n</sm-header>\n<router-outlet></router-outlet>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { switchMap } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { AccessTokenCreateDialogComponent } from \"./access/dialogs/access-token-create-dialog.component\";\nimport { ServiceAccountService } from \"./service-account.service\";\n\n@Component({\n  selector: \"sm-service-account\",\n  templateUrl: \"./service-account.component.html\",\n})\nexport class ServiceAccountComponent {\n  private organizationId: string;\n  private serviceAccountId: string;\n\n  /**\n   * TODO: remove when a server method is available that fetches a service account by ID\n   */\n  protected serviceAccount$ = this.route.params.pipe(\n    switchMap((params) => {\n      this.serviceAccountId = params.serviceAccountId;\n      this.organizationId = params.organizationId;\n\n      return this.serviceAccountService\n        .getServiceAccounts(params.organizationId)\n        .then((saList) => saList.find((sa) => sa.id === params.serviceAccountId));\n    })\n  );\n\n  constructor(\n    private route: ActivatedRoute,\n    private serviceAccountService: ServiceAccountService,\n    private dialogService: DialogService\n  ) {}\n\n  protected openNewAccessTokenDialog() {\n    AccessTokenCreateDialogComponent.openNewAccessTokenDialog(\n      this.dialogService,\n      this.serviceAccountId,\n      this.organizationId\n    );\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"small\">\n    <ng-container bitDialogTitle>\n      <span>{{ title }}</span>\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        <ng-container *ngIf=\"data.serviceAccounts.length == 1\">\n          {{ data.serviceAccounts[0].name }}\n        </ng-container>\n        <ng-container *ngIf=\"data.serviceAccounts.length > 1\">\n          {{ data.serviceAccounts.length }}\n          {{ \"serviceAccounts\" | i18n }}\n        </ng-container>\n      </span>\n    </ng-container>\n\n    <div bitDialogContent>\n      <bit-callout type=\"warning\" [title]=\"'warning' | i18n\">\n        {{ dialogContent }}\n      </bit-callout>\n      <bit-form-field>\n        <bit-label>{{ dialogConfirmationLabel }}</bit-label>\n        <input bitInput formControlName=\"confirmDelete\" />\n      </bit-form-field>\n    </div>\n\n    <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n      <button type=\"submit\" bitButton buttonType=\"danger\" bitFormButton>\n        {{ title }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </div>\n  </bit-dialog>\n</form>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\nimport {\n  FormControl,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  AbstractControl,\n} from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../../models/view/service-account.view\";\nimport {\n  BulkOperationStatus,\n  BulkStatusDetails,\n  BulkStatusDialogComponent,\n} from \"../../shared/dialogs/bulk-status-dialog.component\";\nimport { ServiceAccountService } from \"../service-account.service\";\n\nexport interface ServiceAccountDeleteOperation {\n  serviceAccounts: ServiceAccountView[];\n}\n\n@Component({\n  selector: \"sm-service-account-delete-dialog\",\n  templateUrl: \"./service-account-delete-dialog.component.html\",\n})\nexport class ServiceAccountDeleteDialogComponent {\n  formGroup = new FormGroup({\n    confirmDelete: new FormControl(\"\", [this.matchConfirmationMessageValidator()]),\n  });\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: ServiceAccountDeleteOperation,\n    private serviceAccountService: ServiceAccountService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private dialogService: DialogService\n  ) {}\n\n  get title() {\n    return this.data.serviceAccounts.length === 1\n      ? this.i18nService.t(\"deleteServiceAccount\")\n      : this.i18nService.t(\"deleteServiceAccounts\");\n  }\n\n  get dialogContent() {\n    return this.data.serviceAccounts.length === 1\n      ? this.i18nService.t(\"deleteServiceAccountDialogMessage\", this.data.serviceAccounts[0].name)\n      : this.i18nService.t(\"deleteServiceAccountsDialogMessage\");\n  }\n\n  get dialogConfirmationLabel() {\n    return this.i18nService.t(\"deleteProjectInputLabel\", this.dialogConfirmationMessage);\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    await this.delete();\n    this.dialogRef.close();\n  };\n\n  async delete() {\n    const bulkResponses = await this.serviceAccountService.delete(this.data.serviceAccounts);\n\n    const errors = bulkResponses.filter((response) => response.errorMessage);\n    if (errors.length > 0) {\n      this.openBulkStatusDialog(errors);\n      return;\n    }\n\n    const message =\n      this.data.serviceAccounts.length === 1\n        ? \"deleteServiceAccountToast\"\n        : \"deleteServiceAccountsToast\";\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  }\n\n  openBulkStatusDialog(bulkStatusResults: BulkOperationStatus[]) {\n    this.dialogService.open<unknown, BulkStatusDetails>(BulkStatusDialogComponent, {\n      data: {\n        title: \"deleteServiceAccounts\",\n        subTitle: \"serviceAccounts\",\n        columnTitle: \"serviceAccountName\",\n        message: \"bulkDeleteProjectsErrorMessage\",\n        details: bulkStatusResults,\n      },\n    });\n  }\n\n  private get dialogConfirmationMessage() {\n    return this.data.serviceAccounts?.length === 1\n      ? this.i18nService.t(\"deleteProjectConfirmMessage\", this.data.serviceAccounts[0].name)\n      : this.i18nService.t(\n          \"deleteServiceAccountsConfirmMessage\",\n          this.data.serviceAccounts?.length.toString()\n        );\n  }\n\n  private matchConfirmationMessageValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (this.dialogConfirmationMessage.toLowerCase() == control.value.toLowerCase()) {\n        return null;\n      } else {\n        return {\n          confirmationDoesntMatchError: {\n            message: this.i18nService.t(\"smConfirmationRequired\"),\n          },\n        };\n      }\n    };\n  }\n}\n","<div *ngIf=\"!serviceAccounts\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<sm-no-items *ngIf=\"serviceAccounts?.length == 0\">\n  <ng-container slot=\"title\">{{ \"serviceAccountsNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container slot=\"description\">{{ \"serviceAccountsNoItemsMessage\" | i18n }}</ng-container>\n  <button\n    slot=\"button\"\n    type=\"button\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"newServiceAccountEvent.emit()\"\n  >\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newServiceAccount\" | i18n }}\n  </button>\n</sm-no-items>\n\n<bit-table *ngIf=\"serviceAccounts?.length >= 1\" [dataSource]=\"dataSource\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"!tw-mb-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell colspan=\"2\" bitSortable=\"name\" default>{{ \"name\" | i18n }}</th>\n      <th bitCell>{{ \"secrets\" | i18n }}</th>\n      <th bitCell bitSortable=\"revisionDate\">{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body let-rows$>\n    <tr bitRow *ngFor=\"let serviceAccount of rows$ | async\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(serviceAccount.id) : null\"\n          [checked]=\"selection.isSelected(serviceAccount.id)\"\n        />\n      </td>\n      <td bitCell class=\"tw-w-0 tw-pr-0\">\n        <i class=\"bwi bwi-wrench tw-text-muted\" aria-hidden=\"true\"></i>\n      </td>\n      <td bitCell class=\"tw-break-all\">\n        <a bitLink [routerLink]=\"serviceAccount.id\">\n          {{ serviceAccount.name }}\n        </a>\n      </td>\n      <td bitCell>\n        <!-- TODO add number of secrets once mapping is implemented-->\n        <span> 0 </span>\n      </td>\n      <td bitCell>{{ serviceAccount.revisionDate | date: \"medium\" }}</td>\n      <td bitCell>\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"serviceAccountMenu\"\n        ></button>\n      </td>\n      <bit-menu #serviceAccountMenu>\n        <a type=\"button\" bitMenuItem [routerLink]=\"serviceAccount.id\">\n          <i class=\"bwi bwi-fw bwi-eye\" aria-hidden=\"true\"></i>\n          {{ \"viewServiceAccount\" | i18n }}\n        </a>\n        <button type=\"button\" bitMenuItem (click)=\"editServiceAccountEvent.emit(serviceAccount.id)\">\n          <i class=\"bwi bwi-fw bwi-pencil\" aria-hidden=\"true\"></i>\n          {{ \"editServiceAccount\" | i18n }}\n        </button>\n        <button type=\"button\" bitMenuItem (click)=\"delete(serviceAccount)\">\n          <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n          <span class=\"tw-text-danger\">\n            {{ \"deleteServiceAccount\" | i18n }}\n          </span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"bulkDeleteServiceAccounts()\">\n    <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">\n      {{ \"deleteServiceAccounts\" | i18n }}\n    </span>\n  </button>\n</bit-menu>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, OnDestroy, Output } from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { TableDataSource } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../models/view/service-account.view\";\n\n@Component({\n  selector: \"sm-service-accounts-list\",\n  templateUrl: \"./service-accounts-list.component.html\",\n})\nexport class ServiceAccountsListComponent implements OnDestroy {\n  protected dataSource = new TableDataSource<ServiceAccountView>();\n\n  @Input()\n  get serviceAccounts(): ServiceAccountView[] {\n    return this._serviceAccounts;\n  }\n  set serviceAccounts(serviceAccounts: ServiceAccountView[]) {\n    this.selection.clear();\n    this._serviceAccounts = serviceAccounts;\n    this.dataSource.data = serviceAccounts;\n  }\n  private _serviceAccounts: ServiceAccountView[];\n\n  @Input()\n  set search(search: string) {\n    this.dataSource.filter = search;\n  }\n\n  @Output() newServiceAccountEvent = new EventEmitter();\n  @Output() deleteServiceAccountsEvent = new EventEmitter<ServiceAccountView[]>();\n  @Output() onServiceAccountCheckedEvent = new EventEmitter<string[]>();\n  @Output() editServiceAccountEvent = new EventEmitter<string>();\n\n  private destroy$: Subject<void> = new Subject<void>();\n\n  selection = new SelectionModel<string>(true, []);\n\n  constructor() {\n    this.selection.changed\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((_) => this.onServiceAccountCheckedEvent.emit(this.selection.selected));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.serviceAccounts.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.serviceAccounts.map((s) => s.id));\n  }\n\n  delete(serviceAccount: ServiceAccountView) {\n    this.deleteServiceAccountsEvent.emit([serviceAccount]);\n  }\n\n  bulkDeleteServiceAccounts() {\n    if (this.selection.selected.length >= 1) {\n      this.deleteServiceAccountsEvent.emit(\n        this.serviceAccounts.filter((sa) => this.selection.isSelected(sa.id))\n      );\n    }\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../models/view/service-account.view\";\nimport { AccessPolicyService } from \"../shared/access-policies/access-policy.service\";\n\nimport {\n  ServiceAccountDeleteDialogComponent,\n  ServiceAccountDeleteOperation,\n} from \"./dialog/service-account-delete-dialog.component\";\nimport {\n  OperationType,\n  ServiceAccountDialogComponent,\n  ServiceAccountOperation,\n} from \"./dialog/service-account-dialog.component\";\nimport { ServiceAccountService } from \"./service-account.service\";\n\n@Component({\n  selector: \"sm-service-accounts\",\n  templateUrl: \"./service-accounts.component.html\",\n})\nexport class ServiceAccountsComponent implements OnInit {\n  protected serviceAccounts$: Observable<ServiceAccountView[]>;\n  protected search: string;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private dialogService: DialogService,\n    private accessPolicyService: AccessPolicyService,\n    private serviceAccountService: ServiceAccountService\n  ) {}\n\n  ngOnInit() {\n    this.serviceAccounts$ = combineLatest([\n      this.route.params,\n      this.serviceAccountService.serviceAccount$.pipe(startWith(null)),\n      this.accessPolicyService.serviceAccountAccessPolicyChanges$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(async ([params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getServiceAccounts();\n      })\n    );\n  }\n\n  openNewServiceAccountDialog() {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openEditServiceAccountDialog(serviceAccountId: string) {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        serviceAccountId: serviceAccountId,\n        operation: OperationType.Edit,\n      },\n    });\n  }\n\n  openDeleteDialog(event: ServiceAccountView[]) {\n    this.dialogService.open<unknown, ServiceAccountDeleteOperation>(\n      ServiceAccountDeleteDialogComponent,\n      {\n        data: {\n          serviceAccounts: event,\n        },\n      }\n    );\n  }\n\n  private async getServiceAccounts(): Promise<ServiceAccountView[]> {\n    return await this.serviceAccountService.getServiceAccounts(this.organizationId);\n  }\n}\n","<sm-header>\n  <input bitInput [placeholder]=\"'searchServiceAccounts' | i18n\" [(ngModel)]=\"search\" />\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n<sm-service-accounts-list\n  [serviceAccounts]=\"serviceAccounts$ | async\"\n  (newServiceAccountEvent)=\"openNewServiceAccountDialog()\"\n  (editServiceAccountEvent)=\"openEditServiceAccountDialog($event)\"\n  (deleteServiceAccountsEvent)=\"openDeleteDialog($event)\"\n  [search]=\"search\"\n></sm-service-accounts-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { AccessTokenComponent } from \"./access/access-tokens.component\";\nimport { ServiceAccountPeopleComponent } from \"./people/service-account-people.component\";\nimport { ServiceAccountProjectsComponent } from \"./projects/service-account-projects.component\";\nimport { ServiceAccountComponent } from \"./service-account.component\";\nimport { ServiceAccountsComponent } from \"./service-accounts.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ServiceAccountsComponent,\n  },\n  {\n    path: \":serviceAccountId\",\n    component: ServiceAccountComponent,\n    children: [\n      {\n        path: \"\",\n        pathMatch: \"full\",\n        redirectTo: \"projects\",\n      },\n      {\n        path: \"access\",\n        component: AccessTokenComponent,\n      },\n      {\n        path: \"people\",\n        component: ServiceAccountPeopleComponent,\n      },\n      {\n        path: \"projects\",\n        component: ServiceAccountProjectsComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ServiceAccountsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { BreadcrumbsModule } from \"@bitwarden/components\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { AccessListComponent } from \"./access/access-list.component\";\nimport { AccessTokenComponent } from \"./access/access-tokens.component\";\nimport { AccessTokenCreateDialogComponent } from \"./access/dialogs/access-token-create-dialog.component\";\nimport { AccessTokenDialogComponent } from \"./access/dialogs/access-token-dialog.component\";\nimport { ExpirationOptionsComponent } from \"./access/dialogs/expiration-options.component\";\nimport { ServiceAccountDeleteDialogComponent } from \"./dialog/service-account-delete-dialog.component\";\nimport { ServiceAccountDialogComponent } from \"./dialog/service-account-dialog.component\";\nimport { ServiceAccountPeopleComponent } from \"./people/service-account-people.component\";\nimport { ServiceAccountProjectsComponent } from \"./projects/service-account-projects.component\";\nimport { ServiceAccountComponent } from \"./service-account.component\";\nimport { ServiceAccountsListComponent } from \"./service-accounts-list.component\";\nimport { ServiceAccountsRoutingModule } from \"./service-accounts-routing.module\";\nimport { ServiceAccountsComponent } from \"./service-accounts.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, ServiceAccountsRoutingModule, BreadcrumbsModule],\n  declarations: [\n    AccessListComponent,\n    AccessTokenComponent,\n    AccessTokenCreateDialogComponent,\n    AccessTokenDialogComponent,\n    ExpirationOptionsComponent,\n    ServiceAccountComponent,\n    ServiceAccountDeleteDialogComponent,\n    ServiceAccountDialogComponent,\n    ServiceAccountPeopleComponent,\n    ServiceAccountProjectsComponent,\n    ServiceAccountsComponent,\n    ServiceAccountsListComponent,\n    ServiceAccountPeopleComponent,\n  ],\n  providers: [],\n})\nexport class ServiceAccountsModule {}\n","import { SecretsManagerImportErrorLine } from \"./sm-import-error-line\";\n\nexport class SecretsManagerImportError extends Error {\n  constructor(message?: string) {\n    super(message);\n  }\n\n  lines: SecretsManagerImportErrorLine[];\n}\n","import { SecretsManagerImportedProjectRequest } from \"./sm-imported-project.request\";\nimport { SecretsManagerImportedSecretRequest } from \"./sm-imported-secret.request\";\n\nexport class SecretsManagerImportRequest {\n  projects: SecretsManagerImportedProjectRequest[];\n  secrets: SecretsManagerImportedSecretRequest[];\n}\n","import { EncString } from \"@bitwarden/common/models/domain/enc-string\";\n\nexport class SecretsManagerImportedProjectRequest {\n  id: string;\n  name: EncString;\n}\n","import { EncString } from \"@bitwarden/common/models/domain/enc-string\";\n\nexport class SecretsManagerImportedSecretRequest {\n  id: string;\n  key: EncString;\n  value: EncString;\n  note: EncString;\n  projectIds: string[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class SecretsManagerExportedProjectResponse extends BaseResponse {\n  id: string;\n  name: string;\n\n  constructor(response: any) {\n    super(response);\n\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class SecretsManagerExportedSecretResponse extends BaseResponse {\n  id: string;\n  key: string;\n  value: string;\n  note: string;\n  projectIds: string[];\n\n  constructor(response: any) {\n    super(response);\n\n    this.id = this.getResponseProperty(\"Id\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.value = this.getResponseProperty(\"Value\");\n    this.note = this.getResponseProperty(\"Note\");\n\n    const projectIds = this.getResponseProperty(\"ProjectIds\");\n    this.projectIds = projectIds?.map((id: any) => id.toString());\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretsManagerExportedProjectResponse } from \"./sm-exported-project.response\";\nimport { SecretsManagerExportedSecretResponse } from \"./sm-exported-secret.response\";\n\nexport class SecretsManagerExportResponse extends BaseResponse {\n  projects: SecretsManagerExportedProjectResponse[];\n  secrets: SecretsManagerExportedSecretResponse[];\n\n  constructor(response: any) {\n    super(response);\n\n    const projects = this.getResponseProperty(\"Projects\");\n    const secrets = this.getResponseProperty(\"Secrets\");\n\n    this.projects = projects?.map((k: any) => new SecretsManagerExportedProjectResponse(k));\n    this.secrets = secrets?.map((k: any) => new SecretsManagerExportedSecretResponse(k));\n  }\n}\n","export class SecretsManagerExport {\n  projects: SecretsManagerExportProject[];\n  secrets: SecretsManagerExportSecret[];\n}\n\nexport class SecretsManagerExportProject {\n  id: string;\n  name: string;\n}\n\nexport class SecretsManagerExportSecret {\n  id: string;\n  key: string;\n  value: string;\n  note: string;\n  projectIds: string[];\n}\n","import { Injectable } from \"@angular/core\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/abstractions/encrypt.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\n\nimport { SecretsManagerImportError } from \"../models/error/sm-import-error\";\nimport { SecretsManagerImportRequest } from \"../models/requests/sm-import.request\";\nimport { SecretsManagerImportedProjectRequest } from \"../models/requests/sm-imported-project.request\";\nimport { SecretsManagerImportedSecretRequest } from \"../models/requests/sm-imported-secret.request\";\nimport { SecretsManagerExportResponse } from \"../models/responses/sm-export.response\";\nimport {\n  SecretsManagerExport,\n  SecretsManagerExportProject,\n  SecretsManagerExportSecret,\n} from \"../models/sm-export\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SecretsManagerPortingApiService {\n  constructor(\n    private apiService: ApiService,\n    private encryptService: EncryptService,\n    private cryptoService: CryptoService,\n    private i18nService: I18nService\n  ) {}\n\n  async export(organizationId: string, exportFormat = \"json\"): Promise<string> {\n    const response = await this.apiService.send(\n      \"GET\",\n      \"/sm/\" + organizationId + \"/export?format=\" + exportFormat,\n      null,\n      true,\n      true\n    );\n\n    return JSON.stringify(\n      await this.decryptExport(organizationId, new SecretsManagerExportResponse(response)),\n      null,\n      \"  \"\n    );\n  }\n\n  async import(organizationId: string, fileContents: string): Promise<SecretsManagerImportError> {\n    let requestObject = {};\n\n    try {\n      requestObject = JSON.parse(fileContents);\n      const requestBody = await this.encryptImport(organizationId, requestObject);\n\n      await this.apiService.send(\n        \"POST\",\n        \"/sm/\" + organizationId + \"/import\",\n        requestBody,\n        true,\n        true\n      );\n    } catch (error) {\n      const errorResponse = new ErrorResponse(error, 400);\n      return this.handleServerError(errorResponse, requestObject);\n    }\n  }\n\n  private async encryptImport(\n    organizationId: string,\n    importData: any\n  ): Promise<SecretsManagerImportRequest> {\n    const encryptedImport = new SecretsManagerImportRequest();\n\n    try {\n      const orgKey = await this.cryptoService.getOrgKey(organizationId);\n      encryptedImport.projects = [];\n      encryptedImport.secrets = [];\n\n      encryptedImport.projects = await Promise.all(\n        importData.projects.map(async (p: any) => {\n          const project = new SecretsManagerImportedProjectRequest();\n          project.id = p.id;\n          project.name = await this.encryptService.encrypt(p.name, orgKey);\n          return project;\n        })\n      );\n\n      encryptedImport.secrets = await Promise.all(\n        importData.secrets.map(async (s: any) => {\n          const secret = new SecretsManagerImportedSecretRequest();\n\n          [secret.key, secret.value, secret.note] = await Promise.all([\n            this.encryptService.encrypt(s.key, orgKey),\n            this.encryptService.encrypt(s.value, orgKey),\n            this.encryptService.encrypt(s.note, orgKey),\n          ]);\n\n          secret.id = s.id;\n          secret.projectIds = s.projectIds;\n\n          return secret;\n        })\n      );\n    } catch (error) {\n      return null;\n    }\n\n    return encryptedImport;\n  }\n\n  private async decryptExport(\n    organizationId: string,\n    exportData: SecretsManagerExportResponse\n  ): Promise<SecretsManagerExport> {\n    const orgKey = await this.cryptoService.getOrgKey(organizationId);\n    const decryptedExport = new SecretsManagerExport();\n    decryptedExport.projects = [];\n    decryptedExport.secrets = [];\n\n    decryptedExport.projects = await Promise.all(\n      exportData.projects.map(async (p) => {\n        const project = new SecretsManagerExportProject();\n        project.id = p.id;\n        project.name = await this.encryptService.decryptToUtf8(new EncString(p.name), orgKey);\n        return project;\n      })\n    );\n\n    decryptedExport.secrets = await Promise.all(\n      exportData.secrets.map(async (s) => {\n        const secret = new SecretsManagerExportSecret();\n\n        [secret.key, secret.value, secret.note] = await Promise.all([\n          this.encryptService.decryptToUtf8(new EncString(s.key), orgKey),\n          this.encryptService.decryptToUtf8(new EncString(s.value), orgKey),\n          this.encryptService.decryptToUtf8(new EncString(s.note), orgKey),\n        ]);\n\n        secret.id = s.id;\n        secret.projectIds = s.projectIds;\n\n        return secret;\n      })\n    );\n\n    return decryptedExport;\n  }\n\n  private handleServerError(\n    errorResponse: ErrorResponse,\n    importResult: any\n  ): SecretsManagerImportError {\n    if (errorResponse.validationErrors == null) {\n      return new SecretsManagerImportError(errorResponse.message);\n    }\n\n    const result = new SecretsManagerImportError();\n    result.lines = [];\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const id = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Projects\":\n          item = importResult.projects[id];\n          itemType = \"Project\";\n          break;\n        case \"Secrets\":\n          item = importResult.secrets[id];\n          itemType = \"Secret\";\n          break;\n        default:\n          return;\n      }\n\n      result.lines.push({\n        id: id + 1,\n        type: itemType == \"Project\" ? \"Project\" : \"Secret\",\n        key: item.key,\n        errorMessage: value.length > 0 ? value[0] : \"\",\n      });\n    });\n\n    return result;\n  }\n}\n","import { formatDate } from \"@angular/common\";\nimport { Injectable } from \"@angular/core\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SecretsManagerPortingService {\n  constructor(private i18nService: I18nService) {}\n\n  async getFileName(prefix: string = null, extension = \"json\"): Promise<string> {\n    const locale = await firstValueFrom(this.i18nService.locale$);\n    const dateString = formatDate(new Date(), \"yyyyMMddHHmmss\", locale);\n    return \"bitwarden\" + (prefix ? \"_\" + prefix : \"\") + \"_export_\" + dateString + \".\" + extension;\n  }\n}\n","<sm-header></sm-header>\n\n<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <div class=\"tw-my-4 tw-max-w-xl\">\n    <app-callout type=\"info\" title=\"{{ 'exportingOrganizationSecretDataTitle' | i18n }}\">\n      {{ \"exportingOrganizationSecretDataDescription\" | i18n: orgName }}\n    </app-callout>\n  </div>\n\n  <bit-form-field class=\"tw-max-w-sm\">\n    <bit-label>{{ \"fileFormat\" | i18n }}</bit-label>\n    <select bitInput formControlName=\"format\">\n      <option *ngFor=\"let format of exportFormats\" [ngValue]=\"format\">{{ format }}</option>\n    </select>\n  </bit-form-field>\n\n  <button bitButton bitFormButton type=\"submit\" buttonType=\"primary\">\n    {{ \"exportData\" | i18n }}\n  </button>\n</form>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization/organization.service.abstraction\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationPromptComponent } from \"@bitwarden/web-vault/app/components/user-verification-prompt.component\";\n\nimport { SecretsManagerPortingApiService } from \"../services/sm-porting-api.service\";\nimport { SecretsManagerPortingService } from \"../services/sm-porting.service\";\n\n@Component({\n  selector: \"sm-export\",\n  templateUrl: \"./sm-export.component.html\",\n})\nexport class SecretsManagerExportComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n\n  protected orgName: string;\n  protected orgId: string;\n  protected exportFormats: string[] = [\"Bitwarden (json)\"];\n\n  protected formGroup = new FormGroup({\n    format: new FormControl(\"Bitwarden (json)\", [Validators.required]),\n  });\n\n  constructor(\n    private route: ActivatedRoute,\n    private i18nService: I18nService,\n    private organizationService: OrganizationService,\n    private platformUtilsService: PlatformUtilsService,\n    private smPortingService: SecretsManagerPortingService,\n    private fileDownloadService: FileDownloadService,\n    private logService: LogService,\n    private modalService: ModalService,\n    private secretsManagerApiService: SecretsManagerPortingApiService\n  ) {}\n\n  async ngOnInit() {\n    this.route.params\n      .pipe(\n        switchMap(async (params) => await this.organizationService.get(params.organizationId)),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((organization) => {\n        this.orgName = organization.name;\n        this.orgId = organization.id;\n      });\n\n    this.formGroup.get(\"format\").disable();\n  }\n\n  async ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    await this.doExport();\n  };\n\n  private async doExport() {\n    const exportData = await this.secretsManagerApiService.export(\n      this.orgId,\n      this.formGroup.get(\"format\").value\n    );\n\n    await this.downloadFile(exportData, this.formGroup.get(\"format\").value);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"dataExportSuccess\"));\n  }\n\n  private async downloadFile(data: string, format: string) {\n    const fileName = await this.smPortingService.getFileName(null, format);\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: data,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n\n  private verifyUser() {\n    const ref = this.modalService.open(UserVerificationPromptComponent, {\n      allowMultipleModals: true,\n      data: {\n        confirmDescription: \"exportWarningDesc\",\n        confirmButtonText: \"exportVault\",\n        modalTitle: \"confirmVaultExport\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return ref.onClosedPromise();\n  }\n}\n","<bit-dialog>\n  <span bitDialogTitle>\n    {{ \"importError\" | i18n }}\n  </span>\n  <span bitDialogContent>\n    <div>{{ \"resolveTheErrorsBelowAndTryAgain\" | i18n }}</div>\n    <bit-table>\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"name\" | i18n }}</th>\n          <th bitCell>{{ \"description\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body>\n        <tr bitRow *ngFor=\"let line of errorLines\">\n          <td bitCell class=\"tw-break-all\">[{{ line.id }}] [{{ line.type }}] {{ line.key }}</td>\n          <td bitCell>{{ line.errorMessage }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </span>\n  <div bitDialogFooter>\n    <button bitButton bitDialogClose buttonType=\"primary\" type=\"button\">\n      {{ \"ok\" | i18n }}\n    </button>\n  </div>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\n\nimport { SecretsManagerImportError } from \"../models/error/sm-import-error\";\nimport { SecretsManagerImportErrorLine } from \"../models/error/sm-import-error-line\";\n\nexport interface SecretsManagerImportErrorDialogOperation {\n  error: SecretsManagerImportError;\n}\n\n@Component({\n  selector: \"sm-import-error-dialog\",\n  templateUrl: \"./sm-import-error-dialog.component.html\",\n})\nexport class SecretsManagerImportErrorDialogComponent {\n  errorLines: SecretsManagerImportErrorLine[];\n\n  constructor(\n    public dialogRef: DialogRef,\n    private i18nService: I18nService,\n    @Inject(DIALOG_DATA) public data: SecretsManagerImportErrorDialogOperation\n  ) {\n    this.errorLines = data.error.lines;\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization/organization.service.abstraction\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { DialogService } from \"@bitwarden/components\";\n\nimport {\n  SecretsManagerImportErrorDialogComponent,\n  SecretsManagerImportErrorDialogOperation,\n} from \"../dialog/sm-import-error-dialog.component\";\nimport { SecretsManagerImportError } from \"../models/error/sm-import-error\";\nimport { SecretsManagerPortingApiService } from \"../services/sm-porting-api.service\";\n\n@Component({\n  selector: \"sm-import\",\n  templateUrl: \"./sm-import.component.html\",\n})\nexport class SecretsManagerImportComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  protected orgId: string = null;\n  protected selectedFile: File;\n  protected formGroup = new FormGroup({\n    pastedContents: new FormControl(\"\"),\n  });\n\n  constructor(\n    private route: ActivatedRoute,\n    private i18nService: I18nService,\n    private organizationService: OrganizationService,\n    private platformUtilsService: PlatformUtilsService,\n    protected fileDownloadService: FileDownloadService,\n    private logService: LogService,\n    private secretsManagerPortingApiService: SecretsManagerPortingApiService,\n    private dialogService: DialogService\n  ) {}\n\n  async ngOnInit() {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.orgId = params.organizationId;\n    });\n  }\n\n  async ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    const fileElement = document.getElementById(\"file\") as HTMLInputElement;\n    const importContents = await this.getImportContents(\n      fileElement,\n      this.formGroup.get(\"pastedContents\").value.trim()\n    );\n\n    if (importContents == null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      return;\n    }\n\n    try {\n      const error = await this.secretsManagerPortingApiService.import(this.orgId, importContents);\n\n      if (error?.lines?.length > 0) {\n        this.openImportErrorDialog(error);\n        return;\n      } else if (error != null) {\n        this.platformUtilsService.showToast(\n          \"error\",\n          this.i18nService.t(\"errorOccurred\"),\n          this.i18nService.t(\"errorReadingImportFile\")\n        );\n        return;\n      }\n\n      this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"importSuccess\"));\n      this.clearForm();\n    } catch (error) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"errorReadingImportFile\")\n      );\n      this.logService.error(error);\n    }\n  };\n\n  protected async getImportContents(\n    fileElement: HTMLInputElement,\n    pastedContents: string\n  ): Promise<string> {\n    const files = fileElement.files;\n\n    if (\n      (files == null || files.length === 0) &&\n      (pastedContents == null || pastedContents === \"\")\n    ) {\n      return null;\n    }\n\n    let fileContents = pastedContents;\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      return null;\n    }\n\n    return fileContents;\n  }\n\n  protected setSelectedFile(event: Event) {\n    const fileInputEl = <HTMLInputElement>event.target;\n    const file = fileInputEl.files.length > 0 ? fileInputEl.files[0] : null;\n    this.selectedFile = file;\n  }\n\n  private clearForm() {\n    (document.getElementById(\"file\") as HTMLInputElement).value = \"\";\n    this.selectedFile = null;\n    this.formGroup.reset({\n      pastedContents: \"\",\n    });\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private openImportErrorDialog(error: SecretsManagerImportError) {\n    this.dialogService.open<unknown, SecretsManagerImportErrorDialogOperation>(\n      SecretsManagerImportErrorDialogComponent,\n      {\n        data: {\n          error: error,\n        },\n      }\n    );\n  }\n}\n","<sm-header></sm-header>\n\n<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\" class=\"tw-max-w-xl\">\n  <bit-form-field>\n    <bit-label>{{ \"fileUpload\" | i18n }}</bit-label>\n    <div class=\"file-selector\">\n      <button bitButton type=\"button\" buttonType=\"secondary\" (click)=\"fileSelector.click()\">\n        {{ \"chooseFile\" | i18n }}\n      </button>\n      {{ selectedFile?.name ?? (\"noFileChosen\" | i18n) }}\n    </div>\n    <input\n      #fileSelector\n      hidden\n      bitInput\n      type=\"file\"\n      id=\"file\"\n      class=\"form-control-file\"\n      name=\"file\"\n      (change)=\"setSelectedFile($event)\"\n      accept=\"application/JSON\"\n    />\n    <bit-hint>{{ \"acceptedFormats\" | i18n }} Bitwarden (json)</bit-hint>\n  </bit-form-field>\n  <div class=\"my-4\">\n    {{ \"or\" | i18n }}\n  </div>\n  <bit-form-field>\n    <bit-label for=\"pastedContents\">{{ \"copyPasteImportContents\" | i18n }}</bit-label>\n    <textarea\n      bitInput\n      id=\"pastedContents\"\n      class=\"form-control\"\n      name=\"FileContents\"\n      formControlName=\"pastedContents\"\n    ></textarea>\n    <bit-hint>{{ \"acceptedFormats\" | i18n }} Bitwarden (json)</bit-hint>\n  </bit-form-field>\n  <button bitButton bitFormButton type=\"submit\" buttonType=\"primary\">\n    {{ \"importData\" | i18n }}\n  </button>\n</form>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { Organization } from \"@bitwarden/common/models/domain/organization\";\nimport { OrganizationPermissionsGuard } from \"@bitwarden/web-vault/app/organizations/guards/org-permissions.guard\";\n\nimport { SecretsManagerExportComponent } from \"./porting/sm-export.component\";\nimport { SecretsManagerImportComponent } from \"./porting/sm-import.component\";\n\nconst routes: Routes = [\n  {\n    path: \"import\",\n    component: SecretsManagerImportComponent,\n    canActivate: [OrganizationPermissionsGuard],\n    data: {\n      titleId: \"importData\",\n      organizationPermissions: (org: Organization) => org.isAdmin,\n    },\n  },\n  {\n    path: \"export\",\n    component: SecretsManagerExportComponent,\n    canActivate: [OrganizationPermissionsGuard],\n    data: {\n      titleId: \"exportData\",\n      organizationPermissions: (org: Organization) => org.isAdmin,\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { SecretsManagerImportErrorDialogComponent } from \"./dialog/sm-import-error-dialog.component\";\nimport { SecretsManagerExportComponent } from \"./porting/sm-export.component\";\nimport { SecretsManagerImportComponent } from \"./porting/sm-import.component\";\nimport { SecretsManagerPortingApiService } from \"./services/sm-porting-api.service\";\nimport { SecretsManagerPortingService } from \"./services/sm-porting.service\";\nimport { SettingsRoutingModule } from \"./settings-routing.module\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, SettingsRoutingModule],\n  declarations: [\n    SecretsManagerImportComponent,\n    SecretsManagerExportComponent,\n    SecretsManagerImportErrorDialogComponent,\n  ],\n  providers: [SecretsManagerPortingService, SecretsManagerPortingApiService],\n})\nexport class SettingsModule {}\n","import { Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, CanActivate } from \"@angular/router\";\n\n@Injectable()\nexport class SMGuard implements CanActivate {\n  async canActivate(route: ActivatedRouteSnapshot) {\n    // TODO: Verify org\n    return true;\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\n\nimport { SecretService } from \"../../secrets/secret.service\";\n\nexport interface SecretHardDeleteOperation {\n  secretIds: string[];\n  organizationId: string;\n}\n\n@Component({\n  selector: \"sm-secret-hard-delete-dialog\",\n  templateUrl: \"./secret-hard-delete.component.html\",\n})\nexport class SecretHardDeleteDialogComponent {\n  constructor(\n    public dialogRef: DialogRef,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    @Inject(DIALOG_DATA) public data: SecretHardDeleteOperation\n  ) {}\n\n  get title() {\n    return this.data.secretIds.length === 1 ? \"hardDeleteSecret\" : \"hardDeleteSecrets\";\n  }\n\n  get submitButtonText() {\n    return this.data.secretIds.length === 1 ? \"deleteSecret\" : \"deleteSecrets\";\n  }\n\n  delete = async () => {\n    await this.secretService.deleteTrashed(this.data.organizationId, this.data.secretIds);\n    const message =\n      this.data.secretIds.length === 1 ? \"hardDeleteSuccessToast\" : \"hardDeletesSuccessToast\";\n    this.dialogRef.close(this.data.secretIds);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  };\n}\n","<bit-simple-dialog>\n  <span bitDialogTitle>{{ title | i18n }}</span>\n  <span bitDialogContent>\n    {{\n      data.secretIds.length === 1\n        ? (\"hardDeleteSecretConfirmation\" | i18n)\n        : (\"hardDeleteSecretsConfirmation\" | i18n)\n    }}\n  </span>\n  <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n    <button type=\"button\" bitButton buttonType=\"primary\" [bitAction]=\"delete\">\n      {{ submitButtonText | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </div>\n</bit-simple-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\n\nimport { SecretService } from \"../../secrets/secret.service\";\n\nexport interface SecretRestoreOperation {\n  secretIds: string[];\n  organizationId: string;\n}\n\n@Component({\n  selector: \"sm-secret-restore-dialog\",\n  templateUrl: \"./secret-restore.component.html\",\n})\nexport class SecretRestoreDialogComponent {\n  constructor(\n    public dialogRef: DialogRef,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    @Inject(DIALOG_DATA) public data: SecretRestoreOperation\n  ) {}\n\n  get title() {\n    return this.data.secretIds.length === 1 ? \"restoreSecret\" : \"restoreSecrets\";\n  }\n\n  restore = async () => {\n    let message = \"\";\n    await this.secretService.restoreTrashed(this.data.organizationId, this.data.secretIds);\n    message =\n      this.data.secretIds.length === 1\n        ? \"secretRestoredSuccessToast\"\n        : \"secretsRestoredSuccessToast\";\n    this.dialogRef.close(this.data.secretIds);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  };\n}\n","<bit-simple-dialog>\n  <span bitDialogTitle>{{ title | i18n }}</span>\n  <span bitDialogContent>\n    {{\n      data.secretIds.length === 1 ? (\"restoreSecretPrompt\" | i18n) : (\"restoreSecretsPrompt\" | i18n)\n    }}\n  </span>\n  <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n    <button type=\"button\" bitButton buttonType=\"primary\" [bitAction]=\"restore\">\n      {{ title | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </div>\n</bit-simple-dialog>\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogService } from \"@bitwarden/components\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport { SecretService } from \"../secrets/secret.service\";\n\nimport {\n  SecretHardDeleteDialogComponent,\n  SecretHardDeleteOperation,\n} from \"./dialog/secret-hard-delete.component\";\nimport {\n  SecretRestoreDialogComponent,\n  SecretRestoreOperation,\n} from \"./dialog/secret-restore.component\";\n\n@Component({\n  selector: \"sm-trash\",\n  templateUrl: \"./trash.component.html\",\n})\nexport class TrashComponent implements OnInit {\n  secrets$: Observable<SecretListView[]>;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private secretService: SecretService,\n    private dialogService: DialogService\n  ) {}\n\n  ngOnInit() {\n    this.secrets$ = this.secretService.secret$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getSecrets();\n      })\n    );\n  }\n\n  private async getSecrets(): Promise<SecretListView[]> {\n    return await this.secretService.getTrashedSecrets(this.organizationId);\n  }\n\n  openDeleteSecret(secrets: SecretListView[]) {\n    const secretIds = secrets.map((secret) => secret.id);\n\n    this.dialogService.open<unknown, SecretHardDeleteOperation>(SecretHardDeleteDialogComponent, {\n      data: {\n        secretIds: secretIds,\n        organizationId: this.organizationId,\n      },\n    });\n  }\n\n  openRestoreSecret(secretIds: string[]) {\n    this.dialogService.open<unknown, SecretRestoreOperation>(SecretRestoreDialogComponent, {\n      data: {\n        secretIds: secretIds,\n        organizationId: this.organizationId,\n      },\n    });\n  }\n}\n","<sm-header>\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n<sm-secrets-list\n  (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n  (restoreSecretsEvent)=\"openRestoreSecret($event)\"\n  [secrets]=\"secrets$ | async\"\n  [trash]=\"true\"\n></sm-secrets-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { TrashComponent } from \"./trash.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: TrashComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TrashRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { SecretHardDeleteDialogComponent } from \"./dialog/secret-hard-delete.component\";\nimport { SecretRestoreDialogComponent } from \"./dialog/secret-restore.component\";\nimport { TrashRoutingModule } from \"./trash-routing.module\";\nimport { TrashComponent } from \"./trash.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, TrashRoutingModule],\n  declarations: [SecretHardDeleteDialogComponent, SecretRestoreDialogComponent, TrashComponent],\n  providers: [],\n})\nexport class TrashModule {}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { AuthGuard } from \"@bitwarden/angular/auth/guards/auth.guard\";\nimport { Organization } from \"@bitwarden/common/models/domain/organization\";\nimport { OrganizationPermissionsGuard } from \"@bitwarden/web-vault/app/organizations/guards/org-permissions.guard\";\nimport { buildFlaggedRoute } from \"@bitwarden/web-vault/app/oss-routing.module\";\n\nimport { LayoutComponent } from \"./layout/layout.component\";\nimport { NavigationComponent } from \"./layout/navigation.component\";\nimport { OverviewModule } from \"./overview/overview.module\";\nimport { ProjectsModule } from \"./projects/projects.module\";\nimport { SecretsModule } from \"./secrets/secrets.module\";\nimport { ServiceAccountsModule } from \"./service-accounts/service-accounts.module\";\nimport { SettingsModule } from \"./settings/settings.module\";\nimport { SMGuard } from \"./sm.guard\";\nimport { TrashModule } from \"./trash/trash.module\";\n\nconst routes: Routes = [\n  buildFlaggedRoute(\"secretsManager\", {\n    path: \":organizationId\",\n    component: LayoutComponent,\n    canActivate: [AuthGuard, OrganizationPermissionsGuard, SMGuard],\n    data: {\n      organizationPermissions: (org: Organization) => org.canAccessSecretsManager,\n    },\n    children: [\n      {\n        path: \"\",\n        component: NavigationComponent,\n        outlet: \"sidebar\",\n      },\n      {\n        path: \"secrets\",\n        loadChildren: () => SecretsModule,\n        data: {\n          titleId: \"secrets\",\n        },\n      },\n      {\n        path: \"projects\",\n        loadChildren: () => ProjectsModule,\n        data: {\n          titleId: \"projects\",\n        },\n      },\n      {\n        path: \"service-accounts\",\n        loadChildren: () => ServiceAccountsModule,\n        data: {\n          titleId: \"serviceAccounts\",\n        },\n      },\n      {\n        path: \"trash\",\n        loadChildren: () => TrashModule,\n        data: {\n          titleId: \"trash\",\n        },\n      },\n      {\n        path: \"settings\",\n        loadChildren: () => SettingsModule,\n      },\n      {\n        path: \"\",\n        loadChildren: () => OverviewModule,\n        pathMatch: \"full\",\n      },\n    ],\n  }),\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SecretsManagerRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared\";\n\nimport { LayoutModule } from \"./layout/layout.module\";\nimport { SecretsManagerSharedModule } from \"./shared/sm-shared.module\";\nimport { SecretsManagerRoutingModule } from \"./sm-routing.module\";\nimport { SMGuard } from \"./sm.guard\";\n\n@NgModule({\n  imports: [SharedModule, SecretsManagerSharedModule, SecretsManagerRoutingModule, LayoutModule],\n  providers: [SMGuard],\n})\nexport class SecretsManagerModule {}\n"],"names":["constructor","modalRef","config","userVerificationService","formBuilder","platformUtilsService","i18nService","confirmDescription","this","data","confirmButtonText","modalTitle","secret","submit","verifyUser","value","e","showToast","t","close","UserVerificationPromptComponent","NavigationModule","LayoutModule","SecretsManagerSharedModule","LayoutComponent","ngOnInit","document","body","classList","remove","SecretsManagerLogo","NavBaseComponent","variant","treeDepth","hideActiveStyles","mainContentClicked","setActive","NavItemComponent","_active","rlaOptions","paths","queryParams","fragment","matrixParams","focusVisibleWithin$","BehaviorSubject","fvwStyles$","pipe","map","isActive","showActiveStyles","exactMatch","val","onFocusIn","target","next","matches","onFocusOut","toggle","NavGroupComponent","contentId","Math","random","toString","substring","open","openChange","event","stopPropagation","emit","initNestedStyles","nestedGroups","nestedItems","forEach","navGroupOrItem","ngAfterContentInit","NavDividerComponent","OrgSwitcherComponent","route","organizationService","organizations$","orgs","filter","sort","a","b","name","localeCompare","activeOrganization$","combineLatest","paramMap","params","find","org","id","get","hideNewButton","NavigationComponent","logo","orgFilter","canAccessSecretsManager","isAdmin$","organizationId","isAdmin","ProgressModule","OnboardingModule","BulkOperationStatus","BulkStatusDialogComponent","dialogRef","title","subTitle","columnTitle","message","details","length","Error","ProjectListView","ProjectView","ProjectRequest","ProjectListItemResponse","response","super","getResponseProperty","creationDate","revisionDate","ProjectResponse","ProjectPermissionDetailsResponse","read","write","ProjectService","cryptoService","apiService","encryptService","_project","Subject","project$","asObservable","getByProjectId","projectId","r","send","projectResponse","createProjectPermissionDetailsView","getProjects","results","L","createProjectsListView","create","projectView","request","getProjectRequest","project","createProjectView","update","delete","projects","projectIds","element","bulkOperationStatus","errorMessage","error","getOrganizationKey","getOrgKey","orgKey","encrypt","decryptToUtf8","Promise","all","s","projectListView","ProjectDeleteDialogComponent","projectService","dialogService","formGroup","confirmDelete","matchConfirmationMessageValidator","markAllAsTouched","invalid","dialogContent","dialogConfirmationLabel","dialogConfirmationMessage","bulkResponses","openBulkStatusDialog","bulkStatusResults","control","toLowerCase","confirmationDoesntMatchError","OperationType","ProjectDialogComponent","router","loading","getProjectView","operation","Add","newProject","createProject","navigate","updateProject","Edit","loadData","setValue","SecretListView","SecretProjectView","SecretView","SecretRequest","SecretProjectResponse","SecretListItemResponse","k","SecretWithProjectsListResponse","secrets","dr","SecretResponse","note","SecretService","_secret","secret$","getBySecretId","secretId","secretResponse","createSecretView","getSecrets","createSecretsListView","getSecretsByProject","secretView","getSecretRequest","secretIds","getTrashedSecrets","deleteTrashed","restoreTrashed","key","encryptedString","push","decryptProjectsMappedToSecrets","projectsMappedToSecretsView","secretListView","p","includes","projectsMappedToSecretView","SecretDeleteDialogComponent","secretService","showSoftDeleteSecretWarning","submitButtonText","openDeleteSecretDialog","SecretDialogComponent","notes","destroy$","getSecretView","createSecret","updateSecret","then","ngOnDestroy","complete","deleteButtonIsVisible","getSecretListView","lastValueFrom","closed","closeData","undefined","secretListViews","emptyProjects","ServiceAccountView","ServiceAccountRequest","ServiceAccountResponse","ServiceAccountService","_serviceAccount","serviceAccount$","getServiceAccounts","createServiceAccountViews","getByServiceAccountId","serviceAccountId","createServiceAccountView","serviceAccountView","getServiceAccountRequest","serviceAccounts","ids","serviceAccount","sa","organizationKey","serviceAccountResponse","serviceAccountResponses","ServiceAccountDialogComponent","serviceAccountService","getServiceAccountView","serviceAccountMessage","patchValue","styles","h1","h2","h3","h4","h5","h6","body1","body2","helper","margins","TypographyDirective","_margin","noMargin","bitTypography","concat","lock","logout","HeaderComponent","stateService","messagingService","routeData$","titleId","account$","activeAccount$","accounts$","activeAccount","accounts","profile","NewMenuComponent","takeUntil","subscribe","openSecretDialog","openProjectDialog","openServiceAccountDialog","TableDataSource","_filter","_renderData","_renderChangesSubscription","_data","_sort","direction","connect","updateChangeSubscription","disconnect","unsubscribe","filteredData","filterData","orderedData","orderData","obj","filterPredicate","sortData","sortingDataAccessor","sortHeaderId","numberValue","Number","MAX_SAFE_INTEGER","column","directionModifier","fn","valueA","valueB","valueAType","valueBType","comparatorResult","dataStr","Object","keys","reduce","currentTerm","transformedFilter","trim","indexOf","SortableComponent","table","default","_default","ariaSort","dataSource","bitSortable","icon","NoItemsComponent","newProjectEvent","$event","selection","editProjectEvent","deleteProject","toggleAll","ProjectsListComponent","deleteProjectEvent","onProjectCheckedEvent","changed","_","selected","_projects","clear","search","isAllSelected","select","bulkDeleteProjects","isSelected","newSecretEvent","editSecretEvent","copySecretNameEvent","copySecretValueEvent","restoreSecretsEvent","deleteSecretsEvent","bulkRestoreSecrets","SecretsListComponent","onSecretCheckedEvent","sortProjects","aProjects","bProjects","_secrets","bulkDeleteSecrets","OnboardingTaskComponent","completed","handleClick","ev","SizeClasses","small","large","BackgroundClasses","danger","primary","success","warning","ProgressComponent","barWidth","bgColor","showText","size","displayText","outerBarStyles","innerBarStyles","textContent","text","OnboardingComponent","dismiss","visible","amountCompleted","tasks","task","SectionComponent","openNewProjectDialog","hideOnboarding","openEditProject","openDeleteProjectDialog","openDeleteSecret","openNewSecretDialog","openEditSecret","copySecretName","copySecretValue","OverviewComponent","tableSize","showOnboarding","setSMOnboardingTasks","orgId$","distinctUntilChanged","orgId","organizationName","userIsAdmin","projects$","startWith","switchMap","share","secrets$","serviceAccounts$","view$","latestProjects","getRecentItems","latestSecrets","allProjects","allSecrets","saveCompletedTasks","importSecrets","createServiceAccount","take","view","values","items","Date","getTime","slice","orgTasks","prevTasks","getSMOnboardingTasks","newlyCompletedOrgTasks","fromEntries","entries","_k","v","nextOrgTasks","copyToClipboard","routes","path","component","OverviewRoutingModule","OverviewModule","BaseAccessPolicyView","UserProjectAccessPolicyView","UserServiceAccountAccessPolicyView","GroupProjectAccessPolicyView","GroupServiceAccountAccessPolicyView","ServiceAccountProjectAccessPolicyView","ProjectAccessPoliciesView","ServiceAccountAccessPoliciesView","PotentialGranteeView","AccessPoliciesCreateRequest","BaseAccessPolicyResponse","UserProjectAccessPolicyResponse","organizationUserId","organizationUserName","grantedProjectId","userId","UserServiceAccountAccessPolicyResponse","grantedServiceAccountId","GroupProjectAccessPolicyResponse","groupId","groupName","currentUserInGroup","GroupServiceAccountAccessPolicyResponse","ServiceAccountProjectAccessPolicyResponse","serviceAccountName","grantedProjectName","ProjectAccessPoliciesResponse","userAccessPolicies","groupAccessPolicies","serviceAccountAccessPolicies","ServiceAccountAccessPoliciesResponse","AccessPolicyUpdateRequest","AccessPolicyRequest","GrantedPolicyRequest","PotentialGranteeResponse","type","email","AccessPolicyService","_projectAccessPolicyChanges$","_serviceAccountAccessPolicyChanges$","_serviceAccountGrantedPolicyChanges$","projectAccessPolicyChanges$","serviceAccountAccessPolicyChanges$","serviceAccountGrantedPolicyChanges$","refreshProjectAccessPolicyChanges","refreshServiceAccountAccessPolicyChanges","getGrantedPolicies","createServiceAccountProjectAccessPolicyViews","createGrantedPolicies","policies","getGrantedPoliciesCreateRequest","views","getProjectAccessPolicies","createProjectAccessPoliciesView","getServiceAccountAccessPolicies","createServiceAccountAccessPoliciesView","createProjectAccessPolicies","projectAccessPoliciesView","getAccessPoliciesCreateRequest","createServiceAccountAccessPolicies","serviceAccountAccessPoliciesView","getServiceAccountAccessPoliciesCreateRequest","deleteAccessPolicy","accessPolicyId","updateAccessPolicy","baseAccessPolicyView","payload","needToShowAccessRemovalWarning","policy","currentPolicies","organization","isOwner","currentUserId","readWriteGroupPolicies","x","readWriteUserPolicies","projectAccessPoliciesResponse","ap","createUserProjectAccessPolicyView","createGroupProjectAccessPolicyView","createServiceAccountProjectAccessPolicyView","createRequest","userAccessPolicyRequests","getAccessPolicyRequest","groupAccessPolicyRequests","serviceAccountAccessPolicyRequests","createBaseAccessPolicyView","serviceAccountAccessPoliciesResponse","createUserServiceAccountAccessPolicyView","createGroupServiceAccountAccessPolicyView","getPeoplePotentialGrantees","createPotentialGranteeViews","getServiceAccountsPotentialGrantees","getProjectsPotentialGrantees","granteeId","grantedId","responses","AccessSelectorComponent","accessPolicyService","onCreateAccessPolicies","onDeleteAccessPolicy","onUpdateAccessPolicy","rows$","maxLength","multiSelect","selectItems$","rows","getPotentialGrantees","grantees","g","some","row","granteeView","listName","labelName","userIcon","groupIcon","serviceAccountIcon","projectIcon","selectItems","tap","reset","enable","disable","firstValueFrom","granteeType","static","item","AccessRemovalDialogComponent","removeAccess","returnRoute","getBaseAccessPolicyView","cancel","ProjectPeopleComponent","validationService","handleCreateAccessPolicies","getAccessItemType","filtered","handleDeleteAccessPolicy","launchDeleteWarningDialog","showError","handleUpdateAccessPolicy","launchUpdateWarningDialog","ProjectSecretsComponent","combineLatestWith","ProjectServiceAccountsComponent","ProjectComponent","ProjectsComponent","children","pathMatch","redirectTo","ProjectsRoutingModule","ProjectsModule","SecretsComponent","snapshot","SecretsRoutingModule","SecretsModule","AccessTokenRequest","RevokeAccessTokensRequest","AccessTokenCreationResponse","clientSecret","expireAt","AccessTokenResponse","scopes","AccessTokenView","AccessService","cryptoFunctionService","_accessTokenVersion","_accessToken","accessToken$","getAccessTokens","createAccessTokenViews","createAccessToken","accessTokenView","keyMaterial","randomBytes","hkdf","encryptionKey","createAccessTokenRequest","result","b64Key","revokeAccessTokens","accessTokenIds","accessTokenRequest","encryptedPayload","JSON","stringify","keyB64","accessTokenResponses","AccessTokenDialogComponent","disableClose","accessToken","copyAccessToken","ExpirationOptionsComponent","datePipe","currentDate","form","expires","expireDateTime","_onChange","_value","onTouched","touched","valueChanges","getExpiresDate","registerOnChange","registerOnTouched","validate","required","writeValue","transform","setDisabledState","isDisabled","setDate","getDate","provide","multi","useExisting","AccessTokenCreateDialogComponent","accessService","expirationDateControl","expirationDayOptions","openAccessTokenDialog","expirationDate","newAccessTokenEvent","revokeAccessTokensEvent","AccessListComponent","tokens","_tokens","revokeSelected","permission","token","AccessTokenComponent","modalService","accessTokens$","revoke","openNewAccessTokenDialog","ref","allowMultipleModals","onClosedPromise","ServiceAccountPeopleComponent","simpleDialogOpts","content","acceptButtonText","cancelButtonText","openSimpleDialog","ServiceAccountProjectsComponent","serviceAccountProjectAccessPolicyView","ServiceAccountComponent","saList","ServiceAccountDeleteDialogComponent","errors","newServiceAccountEvent","editServiceAccountEvent","ServiceAccountsListComponent","deleteServiceAccountsEvent","onServiceAccountCheckedEvent","_serviceAccounts","bulkDeleteServiceAccounts","ServiceAccountsComponent","openNewServiceAccountDialog","openEditServiceAccountDialog","openDeleteDialog","ServiceAccountsRoutingModule","ServiceAccountsModule","SecretsManagerImportError","SecretsManagerImportRequest","SecretsManagerImportedProjectRequest","SecretsManagerImportedSecretRequest","SecretsManagerExportedProjectResponse","SecretsManagerExportedSecretResponse","SecretsManagerExportResponse","SecretsManagerExport","SecretsManagerExportProject","SecretsManagerExportSecret","SecretsManagerPortingApiService","export","exportFormat","decryptExport","import","fileContents","requestObject","parse","requestBody","encryptImport","errorResponse","handleServerError","importData","encryptedImport","exportData","decryptedExport","importResult","validationErrors","lines","index","itemType","match","SecretsManagerPortingService","getFileName","prefix","extension","locale","locale$","dateString","SecretsManagerExportComponent","smPortingService","fileDownloadService","logService","secretsManagerApiService","exportFormats","format","doExport","orgName","downloadFile","fileName","download","blobData","blobOptions","SecretsManagerImportErrorDialogComponent","errorLines","SecretsManagerImportComponent","secretsManagerPortingApiService","pastedContents","fileElement","getElementById","importContents","getImportContents","openImportErrorDialog","clearForm","files","getFileContents","setSelectedFile","fileInputEl","file","selectedFile","resolve","reject","reader","FileReader","readAsText","onload","evt","onerror","canActivate","organizationPermissions","SettingsRoutingModule","SettingsModule","SMGuard","SecretHardDeleteDialogComponent","SecretRestoreDialogComponent","restore","TrashComponent","openRestoreSecret","TrashRoutingModule","TrashModule","outlet","loadChildren","SecretsManagerRoutingModule","SecretsManagerModule"],"sourceRoot":""}