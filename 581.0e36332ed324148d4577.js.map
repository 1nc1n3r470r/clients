{"version":3,"file":"581.0e36332ed324148d4577.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/../../libs/angular/src/auth/components/user-verification-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/components/user-verification-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/components/user-verification-prompt.component.html","webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/import-success-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/import-success-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/file-password-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/file-password-prompt.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/directives/box-row.directive.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export-scope-callout.component.html","webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export-scope-callout.component.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import-api.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import-api.service.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/common/src/admin-console/models/request/collection-with-id.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-organization-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/kvp.request.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-result.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/base-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/ascendo-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avast/avast-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avast/avast-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avira-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/blackberry-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/chrome-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-password-protected-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/blur-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/buttercup-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/clipperz-html-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/codebook-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/dashlane/dashlane-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/dashlane/dashlane-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/encryptr-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/enpass/enpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/enpass/enpass-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/firefox-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/fsecure/fsecure-fsk-types.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/fsecure/fsecure-fsk-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/gnome-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/kaspersky-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keepass2-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keepassx-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keeper/keeper-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/logmeonce-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/meldium-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/msecure-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/myki-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/nordpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/types/onepassword-1pux-importer-types.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-1pif-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-1pux-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/cipher-import-context.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-mac-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-win-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/padlock-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passkeep-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passky/passky-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passman-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passpack-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordagent-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordboss-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passworddragon-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordsafe-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordwallet-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/psono/psono-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/remembear-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/roboform-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/safari-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/safeincloud-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/saferpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/securesafe-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/splashid-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/stickypassword-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/truekey-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/upm-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/yoti-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/zohovault-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-options.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import.service.ts"],"sourcesContent":["import { Directive } from \"@angular/core\";\nimport { FormBuilder, FormControl } from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\n\nimport { ModalRef } from \"../../components/modal/modal.ref\";\nimport { ModalConfig } from \"../../services/modal.service\";\n\n/**\n * Used to verify the user's identity (using their master password or email-based OTP for Key Connector users). You can customize all of the text in the modal.\n */\n@Directive()\nexport class UserVerificationPromptComponent {\n  confirmDescription = this.config.data.confirmDescription;\n  confirmButtonText = this.config.data.confirmButtonText;\n  modalTitle = this.config.data.modalTitle;\n  secret = new FormControl();\n\n  constructor(\n    private modalRef: ModalRef,\n    protected config: ModalConfig,\n    protected userVerificationService: UserVerificationService,\n    private formBuilder: FormBuilder,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  async submit() {\n    try {\n      //Incorrect secret will throw an invalid password error.\n      await this.userVerificationService.verifyUser(this.secret.value);\n    } catch (e) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"error\"),\n        this.i18nService.t(\"invalidMasterPassword\")\n      );\n      return;\n    }\n\n    this.modalRef.close(true);\n  }\n}\n","import { Component } from \"@angular/core\";\n\nimport { UserVerificationPromptComponent as BaseUserVerificationPrompt } from \"@bitwarden/angular/auth/components/user-verification-prompt.component\";\n\n@Component({\n  templateUrl: \"user-verification-prompt.component.html\",\n})\nexport class UserVerificationPromptComponent extends BaseUserVerificationPrompt {}\n","<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"confirmUserTitle\">\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form class=\"modal-content\" #form (ngSubmit)=\"submit()\">\n      <h2 class=\"tw-my-6 tw-px-3.5 tw-font-semibold\" id=\"modalTitle | i18n \">\n        {{ modalTitle | i18n | uppercase }}\n      </h2>\n      <div class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-p-3.5\">\n        {{ confirmDescription | i18n }}\n      </div>\n      <div class=\"tw-p-3.5\">\n        <app-user-verification ngDefaultControl [formControl]=\"secret\" name=\"secret\">\n        </app-user-verification>\n      </div>\n      <div\n        class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-p-3.5\"\n      >\n        <button type=\"button\" bitButton buttonType=\"primary\" type=\"submit\" appBlurClick>\n          <span>{{ confirmButtonText | i18n }}</span>\n        </button>\n        <button type=\"button\" bitButton buttonType=\"secondary\" data-dismiss=\"modal\">\n          {{ \"cancel\" | i18n }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { Directive, EventEmitter, OnDestroy, OnInit, Output } from \"@angular/core\";\nimport { UntypedFormBuilder, Validators } from \"@angular/forms\";\nimport { merge, takeUntil, Subject, startWith } from \"rxjs\";\n\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { EncryptedExportType, EventType } from \"@bitwarden/common/enums\";\nimport { VaultExportServiceAbstraction } from \"@bitwarden/exporter/vault-export\";\n\nimport { DialogServiceAbstraction, SimpleDialogType } from \"../../../services/dialog\";\n\n@Directive()\nexport class ExportComponent implements OnInit, OnDestroy {\n  @Output() onSaved = new EventEmitter();\n\n  formPromise: Promise<string>;\n  disabledByPolicy = false;\n\n  exportForm = this.formBuilder.group({\n    format: [\"json\"],\n    secret: [\"\"],\n    filePassword: [\"\", Validators.required],\n    confirmFilePassword: [\"\", Validators.required],\n    fileEncryptionType: [EncryptedExportType.AccountEncrypted],\n  });\n\n  formatOptions = [\n    { name: \".json\", value: \"json\" },\n    { name: \".csv\", value: \"csv\" },\n    { name: \".json (Encrypted)\", value: \"encrypted_json\" },\n  ];\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected exportService: VaultExportServiceAbstraction,\n    protected eventCollectionService: EventCollectionService,\n    private policyService: PolicyService,\n    protected win: Window,\n    private logService: LogService,\n    private userVerificationService: UserVerificationService,\n    private formBuilder: UntypedFormBuilder,\n    protected fileDownloadService: FileDownloadService,\n    protected dialogService: DialogServiceAbstraction\n  ) {}\n\n  async ngOnInit() {\n    this.policyService\n      .policyAppliesToActiveUser$(PolicyType.DisablePersonalVaultExport)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((policyAppliesToActiveUser) => {\n        this.disabledByPolicy = policyAppliesToActiveUser;\n      });\n\n    await this.checkExportDisabled();\n\n    merge(\n      this.exportForm.get(\"format\").valueChanges,\n      this.exportForm.get(\"fileEncryptionType\").valueChanges\n    )\n      .pipe(takeUntil(this.destroy$))\n      .pipe(startWith(0))\n      .subscribe(() => this.adjustValidators());\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n  }\n\n  async checkExportDisabled() {\n    if (this.disabledByPolicy) {\n      this.exportForm.disable();\n    }\n  }\n\n  get encryptedFormat() {\n    return this.format === \"encrypted_json\";\n  }\n\n  protected async doExport() {\n    try {\n      this.formPromise = this.getExportData();\n      const data = await this.formPromise;\n      this.downloadFile(data);\n      this.saved();\n      await this.collectEvent();\n      this.exportForm.get(\"secret\").setValue(\"\");\n      this.exportForm.clearValidators();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async submit() {\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const acceptedWarning = await this.warningDialog();\n    if (!acceptedWarning) {\n      return;\n    }\n    const secret = this.exportForm.get(\"secret\").value;\n\n    try {\n      await this.userVerificationService.verifyUser(secret);\n    } catch (e) {\n      this.platformUtilsService.showToast(\"error\", this.i18nService.t(\"errorOccurred\"), e.message);\n      return;\n    }\n\n    this.doExport();\n  }\n\n  async warningDialog() {\n    if (this.encryptedFormat) {\n      return await this.dialogService.openSimpleDialog({\n        title: { key: \"confirmVaultExport\" },\n        content:\n          this.i18nService.t(\"encExportKeyWarningDesc\") +\n          \" \" +\n          this.i18nService.t(\"encExportAccountWarningDesc\"),\n        acceptButtonText: { key: \"exportVault\" },\n        type: SimpleDialogType.WARNING,\n      });\n    } else {\n      return await this.dialogService.openSimpleDialog({\n        title: { key: \"confirmVaultExport\" },\n        content: { key: \"exportWarningDesc\" },\n        acceptButtonText: { key: \"exportVault\" },\n        type: SimpleDialogType.WARNING,\n      });\n    }\n  }\n\n  protected saved() {\n    this.onSaved.emit();\n  }\n\n  protected getExportData() {\n    if (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    ) {\n      return this.exportService.getPasswordProtectedExport(this.filePassword);\n    } else {\n      return this.exportService.getExport(this.format, null);\n    }\n  }\n\n  protected getFileName(prefix?: string) {\n    let extension = this.format;\n    if (this.format === \"encrypted_json\") {\n      if (prefix == null) {\n        prefix = \"encrypted\";\n      } else {\n        prefix = \"encrypted_\" + prefix;\n      }\n      extension = \"json\";\n    }\n    return this.exportService.getFileName(prefix, extension);\n  }\n\n  protected async collectEvent(): Promise<void> {\n    await this.eventCollectionService.collect(EventType.User_ClientExportedVault);\n  }\n\n  get format() {\n    return this.exportForm.get(\"format\").value;\n  }\n\n  get filePassword() {\n    return this.exportForm.get(\"filePassword\").value;\n  }\n\n  get confirmFilePassword() {\n    return this.exportForm.get(\"confirmFilePassword\").value;\n  }\n\n  get fileEncryptionType() {\n    return this.exportForm.get(\"fileEncryptionType\").value;\n  }\n\n  adjustValidators() {\n    this.exportForm.get(\"confirmFilePassword\").reset();\n    this.exportForm.get(\"filePassword\").reset();\n\n    if (this.encryptedFormat && this.fileEncryptionType == EncryptedExportType.FileEncrypted) {\n      this.exportForm.controls.filePassword.enable();\n      this.exportForm.controls.confirmFilePassword.enable();\n    } else {\n      this.exportForm.controls.filePassword.disable();\n      this.exportForm.controls.confirmFilePassword.disable();\n    }\n  }\n\n  private downloadFile(csv: string): void {\n    const fileName = this.getFileName();\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: csv,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable tailwindcss/no-custom-classname -->\n<form\n  #form\n  (ngSubmit)=\"submit()\"\n  [appApiAction]=\"formPromise\"\n  [formGroup]=\"exportForm\"\n  *ngIf=\"exportForm\"\n>\n  <div class=\"page-header\">\n    <h1>{{ \"exportVault\" | i18n }}</h1>\n  </div>\n\n  <app-callout type=\"error\" title=\"{{ 'vaultExportDisabled' | i18n }}\" *ngIf=\"disabledByPolicy\">\n    {{ \"personalVaultExportPolicyInEffect\" | i18n }}\n  </app-callout>\n  <app-export-scope-callout\n    [organizationId]=\"organizationId\"\n    *ngIf=\"!disabledByPolicy\"\n  ></app-export-scope-callout>\n\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <bit-form-field>\n        <bit-label class=\"tw-text-lg\" for=\"format\">{{ \"fileFormat\" | i18n }}</bit-label>\n        <select bitInput name=\"format\" formControlName=\"format\">\n          <option *ngFor=\"let f of formatOptions\" [value]=\"f.value\">{{ f.name }}</option>\n        </select>\n      </bit-form-field>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"form-group col-6\">\n      <ng-container *ngIf=\"format === 'encrypted_json'\">\n        <div role=\"radiogroup\" aria-labelledby=\"exportTypeHeading\">\n          <label id=\"exportTypeHeading\" class=\"tw-semi-bold tw-text-lg\">\n            {{ \"exportTypeHeading\" | i18n }}\n          </label>\n\n          <div appBoxRow name=\"FileTypeOptions\" class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"AccountEncrypted\"\n                [value]=\"encryptedExportType.AccountEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.AccountEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"AccountEncrypted\">\n                {{ \"accountRestricted\" | i18n }}\n              </label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 pb-2 tw-text-sm\">\n            {{ \"accountRestrictedOptionDescription\" | i18n }}\n          </div>\n\n          <div class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"FileEncrypted\"\n                [value]=\"encryptedExportType.FileEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.FileEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"FileEncrypted\">{{\n                \"passwordProtected\" | i18n\n              }}</label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 tw-text-sm\">\n            {{ \"passwordProtectedOptionDescription\" | i18n }}\n          </div>\n        </div>\n        <br />\n\n        <ng-container *ngIf=\"fileEncryptionType == encryptedExportType.FileEncrypted\">\n          <bit-form-field>\n            <bit-label>{{ \"filePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"filePassword\"\n              formControlName=\"filePassword\"\n              name=\"password\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n            <bit-hint>{{ \"exportPasswordDescription\" | i18n }}</bit-hint>\n          </bit-form-field>\n          <bit-form-field>\n            <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"confirmFilePassword\"\n              formControlName=\"confirmFilePassword\"\n              name=\"confirmFilePassword\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n          </bit-form-field>\n        </ng-container>\n      </ng-container>\n\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary btn-submit\"\n        [disabled]=\"form.loading || disabledByPolicy\"\n        [ngClass]=\"{ manual: disabledByPolicy }\"\n      >\n        <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n        <span>{{ \"confirmFormat\" | i18n }}</span>\n      </button>\n    </div>\n  </div>\n</form>\n","import { Component } from \"@angular/core\";\nimport { UntypedFormBuilder } from \"@angular/forms\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { ExportComponent as BaseExportComponent } from \"@bitwarden/angular/tools/export/components/export.component\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { EncryptedExportType } from \"@bitwarden/common/enums\";\nimport { VaultExportServiceAbstraction } from \"@bitwarden/exporter/vault-export\";\n\nimport { UserVerificationPromptComponent } from \"../../components/user-verification-prompt.component\";\n\n@Component({\n  selector: \"app-export\",\n  templateUrl: \"export.component.html\",\n})\nexport class ExportComponent extends BaseExportComponent {\n  organizationId: string;\n  encryptedExportType = EncryptedExportType;\n  protected showFilePassword: boolean;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    platformUtilsService: PlatformUtilsService,\n    exportService: VaultExportServiceAbstraction,\n    eventCollectionService: EventCollectionService,\n    policyService: PolicyService,\n    logService: LogService,\n    userVerificationService: UserVerificationService,\n    formBuilder: UntypedFormBuilder,\n    fileDownloadService: FileDownloadService,\n    private modalService: ModalService,\n    dialogService: DialogServiceAbstraction\n  ) {\n    super(\n      cryptoService,\n      i18nService,\n      platformUtilsService,\n      exportService,\n      eventCollectionService,\n      policyService,\n      window,\n      logService,\n      userVerificationService,\n      formBuilder,\n      fileDownloadService,\n      dialogService\n    );\n  }\n\n  async submit() {\n    if (this.isFileEncryptedExport && this.filePassword != this.confirmFilePassword) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"filePasswordAndConfirmFilePasswordDoNotMatch\")\n      );\n      return;\n    }\n\n    this.exportForm.markAllAsTouched();\n    if (!this.exportForm.valid) {\n      return;\n    }\n\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    this.doExport();\n  }\n\n  protected saved() {\n    super.saved();\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"exportSuccess\"));\n  }\n\n  private verifyUser() {\n    let confirmDescription = \"exportWarningDesc\";\n    if (this.isFileEncryptedExport) {\n      confirmDescription = \"fileEncryptedExportWarningDesc\";\n    } else if (this.isAccountEncryptedExport) {\n      confirmDescription = \"encExportKeyWarningDesc\";\n    }\n\n    const ref = this.modalService.open(UserVerificationPromptComponent, {\n      allowMultipleModals: true,\n      data: {\n        confirmDescription: confirmDescription,\n        confirmButtonText: \"exportVault\",\n        modalTitle: \"confirmVaultExport\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return ref.onClosedPromise();\n  }\n\n  get isFileEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    );\n  }\n\n  get isAccountEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.AccountEncrypted\n    );\n  }\n}\n","<bit-dialog>\n  <span bitDialogTitle>\n    {{ \"importSuccess\" | i18n }}\n  </span>\n\n  <div bitDialogContent>\n    <span>{{ \"importSuccessNumberOfItems\" | i18n : this.data.ciphers.length }}</span>\n    <bit-table [dataSource]=\"dataSource\">\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"type\" | i18n }}</th>\n          <th bitCell>{{ \"total\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body let-rows$>\n        <tr bitRow *ngFor=\"let r of rows$ | async\">\n          <td bitCell>\n            <i class=\"bwi bwi-fw bwi-{{ r.icon }}\" aria-hidden=\"true\"></i>\n            {{ r.type | i18n }}\n          </td>\n          <td bitCell>{{ r.count }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </div>\n\n  <ng-container bitDialogFooter>\n    <button bitButton bitDialogClose buttonType=\"primary\" type=\"button\">\n      {{ \"ok\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { TableDataSource } from \"@bitwarden/components\";\nimport { ImportResult } from \"@bitwarden/importer\";\n\nexport interface ResultList {\n  icon: string;\n  type: string;\n  count: number;\n}\n\n@Component({\n  templateUrl: \"./import-success-dialog.component.html\",\n})\nexport class ImportSuccessDialogComponent implements OnInit {\n  protected dataSource = new TableDataSource<ResultList>();\n\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) public data: ImportResult) {}\n\n  ngOnInit(): void {\n    if (this.data != null) {\n      this.dataSource.data = this.buildResultList();\n    }\n  }\n\n  private buildResultList(): ResultList[] {\n    let logins = 0;\n    let cards = 0;\n    let identities = 0;\n    let secureNotes = 0;\n    this.data.ciphers.map((c) => {\n      switch (c.type) {\n        case CipherType.Login:\n          logins++;\n          break;\n        case CipherType.Card:\n          cards++;\n          break;\n        case CipherType.SecureNote:\n          secureNotes++;\n          break;\n        case CipherType.Identity:\n          identities++;\n          break;\n        default:\n          break;\n      }\n    });\n\n    const list: ResultList[] = [];\n    if (logins > 0) {\n      list.push({ icon: \"globe\", type: \"typeLogin\", count: logins });\n    }\n    if (cards > 0) {\n      list.push({ icon: \"credit-card\", type: \"typeCard\", count: cards });\n    }\n    if (identities > 0) {\n      list.push({ icon: \"id-card\", type: \"typeIdentity\", count: identities });\n    }\n    if (secureNotes > 0) {\n      list.push({ icon: \"sticky-note\", type: \"typeSecureNote\", count: secureNotes });\n    }\n    if (this.data.folders.length > 0) {\n      list.push({ icon: \"folder\", type: \"folders\", count: this.data.folders.length });\n    }\n    if (this.data.collections.length > 0) {\n      list.push({\n        icon: \"collection\",\n        type: \"collections\",\n        count: this.data.collections.length,\n      });\n    }\n    return list;\n  }\n}\n","import { Component } from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\n\nimport { ModalRef } from \"@bitwarden/angular/components/modal/modal.ref\";\n\n@Component({\n  templateUrl: \"file-password-prompt.component.html\",\n})\nexport class FilePasswordPromptComponent {\n  filePassword = new FormControl(\"\", Validators.required);\n\n  constructor(private modalRef: ModalRef) {}\n\n  submit() {\n    this.filePassword.markAsTouched();\n    if (!this.filePassword.valid) {\n      return;\n    }\n\n    this.modalRef.close(this.filePassword.value);\n  }\n\n  cancel() {\n    this.modalRef.close(null);\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable tailwindcss/no-custom-classname -->\n<div\n  class=\"modal fade\"\n  role=\"dialog\"\n  aria-modal=\"true\"\n  [attr.aria-labelledby]=\"'confirmVaultImport' | i18n\"\n>\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form #form (ngSubmit)=\"submit()\">\n      <div class=\"form-group modal-content\">\n        <h2 class=\"tw-my-6 tw-ml-3.5 tw-font-semibold\" id=\"confirmVaultImport\">\n          {{ \"confirmVaultImport\" | i18n | uppercase }}\n        </h2>\n        <div\n          class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-px-3.5 tw-pt-3.5\"\n        >\n          {{ \"confirmVaultImportDesc\" | i18n }}\n          <bit-form-field class=\"tw-pt-3.5\">\n            <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              name=\"filePassword\"\n              [formControl]=\"filePassword\"\n              appAutofocus\n              appInputVerbatim\n            />\n            <button type=\"button\" bitSuffix bitIconButton bitPasswordInputToggle></button>\n          </bit-form-field>\n        </div>\n        <div\n          class=\"tw-flex tw-w-full tw-flex-wrap tw-items-center tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-px-3.5 tw-pb-3.5 tw-pt-4\"\n        >\n          <button bitButton buttonType=\"primary\" class=\"tw-mr-2\" type=\"submit\" appBlurClick>\n            <span>{{ \"importData\" | i18n }}</span>\n          </button>\n          <button bitButton buttonType=\"secondary\" type=\"button\" (click)=\"cancel()\">\n            <span>{{ \"cancel\" | i18n }}</span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n","<div class=\"page-header\">\n  <h1>{{ \"importData\" | i18n }}</h1>\n</div>\n<app-callout type=\"info\" *ngIf=\"importBlockedByPolicy\">\n  {{ \"personalOwnershipPolicyInEffectImports\" | i18n }}\n</app-callout>\n<form #form (ngSubmit)=\"submit()\" ngNativeValidate>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"form-group\">\n        <label for=\"type\">1. {{ \"selectFormat\" | i18n }}</label>\n        <select\n          id=\"type\"\n          name=\"Format\"\n          [(ngModel)]=\"format\"\n          class=\"form-control\"\n          [disabled]=\"importBlockedByPolicy\"\n          required\n        >\n          <option *ngFor=\"let o of featuredImportOptions\" [ngValue]=\"o.id\">{{ o.name }}</option>\n          <ng-container *ngIf=\"importOptions && importOptions.length\">\n            <option value=\"-\" disabled></option>\n            <option *ngFor=\"let o of importOptions\" [ngValue]=\"o.id\">{{ o.name }}</option>\n          </ng-container>\n        </select>\n      </div>\n    </div>\n  </div>\n  <app-callout type=\"info\" title=\"{{ getFormatInstructionTitle() }}\" *ngIf=\"format\">\n    <ng-container *ngIf=\"format === 'bitwardencsv' || format === 'bitwardenjson'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/export-your-data/\">\n        https://bitwarden.com/help/export-your-data/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'lastpasscsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-lastpass/\">\n        https://bitwarden.com/help/import-from-lastpass/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepassxcsv'\">\n      Using the KeePassX desktop application, navigate to \"Database\" &rarr; \"Export to CSV file\" and\n      save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'aviracsv'\">\n      In the Avira web vault, go to \"Settings\" &rarr; \"My Data\" &rarr; \"Export data\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blurcsv'\">\n      In the Blur web vault, click your username at the top and go to \"Settings\" &rarr; \"Export\n      Data\", then click \"Export CSV\" for your \"Accounts\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safeincloudxml'\">\n      Using the SaveInCloud desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As XML\"\n      and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'padlockcsv'\">\n      Using the Padlock desktop application, click the hamburger icon in the top left corner and\n      navigate to \"Settings\" &rarr; \"Export\" button and save the file \"As CSV\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepass2xml'\">\n      Using the KeePass 2 desktop application, navigate to \"File\" &rarr; \"Export\" and select the\n      \"KeePass XML (2.x)\" option.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'upmcsv'\">\n      Using the Universal Password Manager desktop application, navigate to \"Database\" &rarr;\n      \"Export\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'saferpasscsv'\">\n      Using the SaferPass browser extension, click the hamburger icon in the top left corner and\n      navigate to \"Settings\". Click the \"Export accounts\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'meldiumcsv'\">\n      Using the Meldium web vault, navigate to \"Settings\". Locate the \"Export data\" function and\n      click \"Show me my data\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepercsv'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .csv File\" option. Click\n      \"Export\" to save the CSV file.\n    </ng-container>\n    <!--\n    <ng-container *ngIf=\"format === 'keeperjson'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .json File\" option. Click\n      \"Export\" to save the JSON file.\n    </ng-container>\n    -->\n    <ng-container\n      *ngIf=\"format === 'chromecsv' || format === 'operacsv' || format === 'vivaldicsv'\"\n    >\n      <span *ngIf=\"format !== 'chromecsv'\">\n        The process is exactly the same as importing from Google Chrome.\n      </span>\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-chrome/\">\n        https://bitwarden.com/help/import-from-chrome/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'firefoxcsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-firefox/\">\n        https://bitwarden.com/help/import-from-firefox/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safaricsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-safari/\">\n        https://bitwarden.com/help/import-from-safari/</a\n      >.\n    </ng-container>\n    <ng-container\n      *ngIf=\"\n        format === '1password1pux' ||\n        format === '1password1pif' ||\n        format === '1passwordwincsv' ||\n        format === '1passwordmaccsv'\n      \"\n    >\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-1password/\">\n        https://bitwarden.com/help/import-from-1password/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passworddragonxml'\">\n      Using the Password Dragon desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"To\n      XML\". In the dialog that pops up select \"All Rows\" and check all fields. Click the \"Export\"\n      button and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpasscsv'\">\n      Using the Enpass desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As CSV\".\n      Select \"OK\" to the warning alert and save the CSV file. Note that the importer only supports\n      files exported while Enpass is set to the English language, so adjust your settings\n      accordingly.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpassjson'\">\n      Using the Enpass 6 desktop application, click the menu button and navigate to \"File\" &rarr;\n      \"Export\". Select the \".json\" file format option and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'pwsafexml'\">\n      Using the Password Safe desktop application, navigate to \"File\" &rarr; \"Export To\" &rarr; \"XML\n      format...\" and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanecsv'\">\n      Log in to Dashlane, click on \"My Account\" &rarr; \"Settings\" &rarr; \"Export file\" and select\n      \"Export as a CSV file\". This will download a zip archive containing various CSV files. Unzip\n      the archive and import each CSV file individually.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanejson'\">\n      Dashlane no longer supports the JSON format. Only use this if you have an existing JSON for\n      import. Use the CSV importer when creating new exports.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'msecurecsv'\">\n      Using the mSecure desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"CSV File...\"\n      and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'stickypasswordxml'\">\n      Using the Sticky Password desktop application, navigate to \"Menu\" (top right) &rarr; \"Export\"\n      &rarr; \"Export all\". Select the unencrypted format XML option and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'truekeycsv'\">\n      Using the True Key desktop application, click the gear icon (top right) and then navigate to\n      \"App Settings\". Click the \"Export\" button, enter your password and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'clipperzhtml'\">\n      Log into the Clipperz web application (clipperz.is/app). Click the hamburger menu icon in the\n      top right to expand the navigation bar. Navigate to \"Data\" &rarr; \"Export\". Click the\n      \"download HTML+JSON\" button to save the HTML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'roboformcsv'\">\n      Using the RoboForm Editor desktop application, navigate to \"RoboForm\" (top left) &rarr;\n      \"Options\" &rarr; \"Account &amp; Data\" and click the \"Export\" button. Select all of your data,\n      change the \"Format\" to \"CSV file\" and then click the \"Export\" button to save the CSV file.\n      Note: RoboForm only allows you to export Logins. Other items will not be exported.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passboltcsv'\">\n      Log into the Passbolt web vault and navigate to the \"Passwords\" listing. Select all of the\n      passwords you would like to export and click the \"Export\" button at the top of the listing.\n      Choose the \"csv (lastpass)\" export format and click the \"Export\" button.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'ascendocsv'\">\n      Using the Ascendo DataVault desktop application, navigate to \"Tools\" &rarr; \"Export\". In the\n      dialog that pops up, select the \"All Items (DVX, CSV)\" option. Click the \"Ok\" button to save\n      the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordbossjson'\">\n      Using the Password Boss desktop application, navigate to \"File\" &rarr; \"Export data\" &rarr;\n      \"Password Boss JSON - not encrypted\" and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'zohovaultcsv'\">\n      Log into the Zoho web vault (vault.zoho.com). Navigate to \"Tools\" &rarr; \"Export Secrets\".\n      Select \"All Secrets\" and click the \"Zoho Vault Format CSV\" button. Highlight and copy the data\n      from the textarea. Open a text editor like Notepad and paste the data. Save the data from the\n      text editor as\n      <code>zoho_export.csv</code>.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'splashidcsv'\">\n      Using the SplashID Safe desktop application, click on the SplashID blue lock logo in the top\n      right corner. Navigate to \"Export\" &rarr; \"Export as CSV\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkeepcsv'\">\n      Using the PassKeep mobile app, navigate to \"Backup/Restore\". Locate the \"CSV Backup/Restore\"\n      section and click \"Backup to CSV\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'gnomejson'\">\n      Make sure you have python-keyring and python-gnomekeyring installed. Save the\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bit.ly/2GpOMTg\"\n        >GNOME Keyring Import/Export</a\n      >\n      python script to your desktop as <code>pw_helper.py</code>. Open terminal and run\n      <code>chmod +rx Desktop/pw_helper.py</code> and then\n      <code>python Desktop/pw_helper.py export Desktop/my_passwords.json</code>. Then upload the\n      resulting <code>my_passwords.json</code> file here to Bitwarden.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordagentcsv'\">\n      Using the Password Agent desktop application navigate to \"File\" &rarr; \"Export\", select the\n      \"Fields to export\" button and check all of the fields, change the \"Output format\" to \"CSV\",\n      and then click the \"Start\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passpackcsv'\">\n      Log into the Passpack website vault and navigate to \"Settings\" &rarr; \"Export\", then click the\n      \"Download\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passmanjson'\">\n      Open your Passman vault and click on \"Settings\" in the bottom left corner. In the \"Settings\"\n      window switch to the \"Export credentials\" tab and choose \"JSON\" as the export type. Enter your\n      vault's passphrase and click the \"Export\" button to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastcsv'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to CSV file\" option to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastjson'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to JSON file\" option to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'fsecurefsk'\">\n      Open the F-Secure KEY desktop application and navigate to \"Settings\" &rarr; \"Export\n      Passwords\". Select the \"Export\" button, enter your master password, and save the FSK file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'kasperskytxt'\">\n      Open the Kaspersky Password Manager desktop application and navigate to \"Settings\" &rarr;\n      \"Import/Export\". Locate the \"Export to text file\" section and select the \"Export\" button to\n      save the TXT file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'remembearcsv'\">\n      Open the RememBear desktop application and navigate to \"Settings\" &rarr; \"Account\" &rarr;\n      \"Export\". Enter your master password and select the \"Export Anyway\" button to save the CSV\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordwallettxt'\">\n      Open the PasswordWallet desktop application and navigate to \"File\" &rarr; \"Export\" &rarr;\n      \"Visible entries to text file\". Enter your password and select the \"Ok\" button to save the TXT\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'mykicsv'\">\n      Open the Myki desktop browser extension and navigate to \"Advanced\" &rarr; \"Export Accounts\"\n      and then scan the QR code with your mobile device. Various CSV files will then be saved to\n      your computer's downloads folder.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'securesafecsv'\">\n      Export your SecureSafe password safe to a CSV file with a comma delimiter.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'logmeoncecsv'\">\n      Open the LogMeOnce browser extension, then navigate to \"Open Menu\" &rarr; \"Export To\" and\n      select \"CSV File\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blackberrycsv'\">\n      Open the BlackBerry Password Keeper application, then navigate to \"Settings\" &rarr;\n      \"Import/Export\". Select \"Export Passwords\" and follow the instructions on screen to save the\n      unencrypted CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'buttercupcsv'\">\n      Open the Buttercup desktop application and unlock your vault. Right click on your vault's icon\n      and select \"Export\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'codebookcsv'\">\n      Open the Codebook desktop application and log in. Navigate to \"File\" &rarr; \"Export all\", then\n      click \"Yes\" on the dialog and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'encryptrcsv'\">\n      Open the newest version of the Encryptr desktop application and allow all of your data to\n      sync. Once syncing of your data is complete, the download icon in the top right corner will\n      turn pink. Click the download icon and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'yoticsv'\">\n      From the Yoti browser extension, click on \"Settings\", then \"Export Saved Logins\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'psonojson'\">\n      Log in to the Psono web vault, click on the \"Signed in as\"-dropdown, select \"Others\". Go to\n      the \"Export\"-tab and select the json type export and then click on Export.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkyjson'\">\n      Log in to \"https://vault.passky.org\" &rarr; \"Import & Export\" &rarr; \"Export\" in the Passky\n      section. (\"Backup\" is unsupported as it is encrypted).\n    </ng-container>\n  </app-callout>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"form-group\">\n        <label for=\"file\">2. {{ \"selectImportFile\" | i18n }}</label>\n        <br />\n        <div class=\"file-selector\">\n          <button\n            type=\"button\"\n            class=\"btn btn-outline-primary\"\n            (click)=\"fileSelector.click()\"\n            [disabled]=\"importBlockedByPolicy\"\n          >\n            {{ \"chooseFile\" | i18n }}\n          </button>\n          {{ this.fileSelected ? this.fileSelected.name : (\"noFileChosen\" | i18n) }}\n        </div>\n        <input\n          #fileSelector\n          type=\"file\"\n          id=\"file\"\n          class=\"form-control-file\"\n          name=\"file\"\n          (change)=\"setSelectedFile($event)\"\n          hidden\n          [disabled]=\"importBlockedByPolicy\"\n        />\n      </div>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"fileContents\">{{ \"orCopyPasteFileContents\" | i18n }}</label>\n    <textarea\n      id=\"fileContents\"\n      class=\"form-control\"\n      name=\"FileContents\"\n      [(ngModel)]=\"fileContents\"\n      [disabled]=\"importBlockedByPolicy\"\n    ></textarea>\n  </div>\n  <button\n    type=\"submit\"\n    class=\"btn btn-primary btn-submit\"\n    [disabled]=\"loading || importBlockedByPolicy\"\n    [ngClass]=\"{ manual: importBlockedByPolicy }\"\n  >\n    <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n    <span>{{ \"importData\" | i18n }}</span>\n  </button>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport * as JSZip from \"jszip\";\nimport { firstValueFrom } from \"rxjs\";\nimport Swal, { SweetAlertIcon } from \"sweetalert2\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport {\n  ImportOption,\n  ImportType,\n  ImportResult,\n  ImportServiceAbstraction,\n} from \"@bitwarden/importer\";\n\nimport { ImportSuccessDialogComponent, FilePasswordPromptComponent } from \"./dialog\";\n\n@Component({\n  selector: \"app-import\",\n  templateUrl: \"import.component.html\",\n})\nexport class ImportComponent implements OnInit {\n  featuredImportOptions: ImportOption[];\n  importOptions: ImportOption[];\n  format: ImportType = null;\n  fileContents: string;\n  fileSelected: File;\n  loading = false;\n  importBlockedByPolicy = false;\n\n  protected organizationId: string = null;\n  protected successNavigate: any[] = [\"vault\"];\n\n  constructor(\n    protected i18nService: I18nService,\n    protected importService: ImportServiceAbstraction,\n    protected router: Router,\n    protected platformUtilsService: PlatformUtilsService,\n    protected policyService: PolicyService,\n    private logService: LogService,\n    protected modalService: ModalService,\n    protected syncService: SyncService,\n    protected dialogService: DialogServiceAbstraction\n  ) {}\n\n  async ngOnInit() {\n    this.setImportOptions();\n\n    this.importBlockedByPolicy = await firstValueFrom(\n      this.policyService.policyAppliesToActiveUser$(PolicyType.PersonalOwnership)\n    );\n  }\n\n  async submit() {\n    if (this.importBlockedByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalOwnershipPolicyInEffectImports\")\n      );\n      return;\n    }\n\n    this.loading = true;\n\n    const promptForPassword_callback = async () => {\n      return await this.getFilePassword();\n    };\n\n    const importer = this.importService.getImporter(\n      this.format,\n      promptForPassword_callback,\n      this.organizationId\n    );\n    if (importer === null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFormat\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    const fileEl = document.getElementById(\"file\") as HTMLInputElement;\n    const files = fileEl.files;\n    if (\n      (files == null || files.length === 0) &&\n      (this.fileContents == null || this.fileContents === \"\")\n    ) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    let fileContents = this.fileContents;\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    try {\n      const result = await this.importService.import(importer, fileContents, this.organizationId);\n\n      //No errors, display success message\n      this.dialogService.open<unknown, ImportResult>(ImportSuccessDialogComponent, {\n        data: result,\n      });\n\n      this.syncService.fullSync(true);\n      this.router.navigate(this.successNavigate);\n    } catch (e) {\n      this.error(e);\n      this.logService.error(e);\n    }\n\n    this.loading = false;\n  }\n\n  getFormatInstructionTitle() {\n    if (this.format == null) {\n      return null;\n    }\n\n    const results = this.featuredImportOptions\n      .concat(this.importOptions)\n      .filter((o) => o.id === this.format);\n    if (results.length > 0) {\n      return this.i18nService.t(\"instructionsFor\", results[0].name);\n    }\n    return null;\n  }\n\n  protected setImportOptions() {\n    this.featuredImportOptions = [\n      {\n        id: null,\n        name: \"-- \" + this.i18nService.t(\"select\") + \" --\",\n      },\n      ...this.importService.featuredImportOptions,\n    ];\n    this.importOptions = [...this.importService.regularImportOptions].sort((a, b) => {\n      if (a.name == null && b.name != null) {\n        return -1;\n      }\n      if (a.name != null && b.name == null) {\n        return 1;\n      }\n      if (a.name == null && b.name == null) {\n        return 0;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(a.name, b.name)\n        : a.name.localeCompare(b.name);\n    });\n  }\n\n  setSelectedFile(event: Event) {\n    const fileInputEl = <HTMLInputElement>event.target;\n    this.fileSelected = fileInputEl.files.length > 0 ? fileInputEl.files[0] : null;\n  }\n\n  private async error(error: Error) {\n    await Swal.fire({\n      heightAuto: false,\n      buttonsStyling: false,\n      icon: \"error\" as SweetAlertIcon,\n      iconHtml: `<i class=\"swal-custom-icon bwi bwi-error text-danger\"></i>`,\n      input: \"textarea\",\n      inputValue: error.message,\n      inputAttributes: {\n        readonly: \"true\",\n      },\n      titleText: this.i18nService.t(\"importError\"),\n      text: this.i18nService.t(\"importErrorDesc\"),\n      showConfirmButton: true,\n      confirmButtonText: this.i18nService.t(\"ok\"),\n      onOpen: (popupEl) => {\n        popupEl.querySelector(\".swal2-textarea\").scrollTo(0, 0);\n      },\n    });\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    if (this.format === \"1password1pux\") {\n      return this.extract1PuxContent(file);\n    }\n\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        if (this.format === \"lastpasscsv\" && file.type === \"text/html\") {\n          const parser = new DOMParser();\n          const doc = parser.parseFromString((evt.target as any).result, \"text/html\");\n          const pre = doc.querySelector(\"pre\");\n          if (pre != null) {\n            resolve(pre.textContent);\n            return;\n          }\n          reject();\n          return;\n        }\n\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private extract1PuxContent(file: File): Promise<string> {\n    return new JSZip()\n      .loadAsync(file)\n      .then((zip) => {\n        return zip.file(\"export.data\").async(\"string\");\n      })\n      .then(\n        function success(content) {\n          return content;\n        },\n        function error(e) {\n          return \"\";\n        }\n      );\n  }\n\n  async getFilePassword(): Promise<string> {\n    const ref = this.modalService.open(FilePasswordPromptComponent, {\n      allowMultipleModals: true,\n    });\n\n    if (ref == null) {\n      return null;\n    }\n\n    return await ref.onClosedPromise();\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from \"@angular/core\";\n\n@Directive({\n  selector: \"[appBoxRow]\",\n})\nexport class BoxRowDirective implements OnInit {\n  el: HTMLElement = null;\n  formEls: Element[];\n\n  constructor(elRef: ElementRef) {\n    this.el = elRef.nativeElement;\n  }\n\n  ngOnInit(): void {\n    this.formEls = Array.from(\n      this.el.querySelectorAll('input:not([type=\"hidden\"]), select, textarea')\n    );\n    this.formEls.forEach((formEl) => {\n      formEl.addEventListener(\n        \"focus\",\n        () => {\n          this.el.classList.add(\"active\");\n        },\n        false\n      );\n\n      formEl.addEventListener(\n        \"blur\",\n        () => {\n          this.el.classList.remove(\"active\");\n        },\n        false\n      );\n    });\n  }\n\n  @HostListener(\"click\", [\"$event\"]) onClick(event: Event) {\n    const target = event.target as HTMLElement;\n    if (\n      target !== this.el &&\n      !target.classList.contains(\"progress\") &&\n      !target.classList.contains(\"progress-bar\")\n    ) {\n      return;\n    }\n\n    if (this.formEls.length > 0) {\n      const formEl = this.formEls[0] as HTMLElement;\n      if (formEl.tagName.toLowerCase() === \"input\") {\n        const inputEl = formEl as HTMLInputElement;\n        if (inputEl.type != null && inputEl.type.toLowerCase() === \"checkbox\") {\n          inputEl.click();\n          return;\n        }\n      }\n      formEl.focus();\n    }\n  }\n}\n","<ng-container *ngIf=\"show\">\n  <app-callout type=\"info\" title=\"{{ scopeConfig.title | i18n }}\">\n    {{ scopeConfig.description | i18n : scopeConfig.scopeIdentifier }}\n  </app-callout>\n</ng-container>\n","import { Component, Input, OnInit } from \"@angular/core\";\n\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\n\n@Component({\n  selector: \"app-export-scope-callout\",\n  templateUrl: \"export-scope-callout.component.html\",\n})\nexport class ExportScopeCalloutComponent implements OnInit {\n  @Input() organizationId: string = null;\n\n  show = false;\n  scopeConfig: {\n    title: string;\n    description: string;\n    scopeIdentifier: string;\n  };\n\n  constructor(\n    protected organizationService: OrganizationService,\n    protected stateService: StateService\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    if (!this.organizationService.hasOrganizations()) {\n      return;\n    }\n    this.scopeConfig =\n      this.organizationId != null\n        ? {\n            title: \"exportingOrganizationVaultTitle\",\n            description: \"exportingOrganizationVaultDescription\",\n            scopeIdentifier: this.organizationService.get(this.organizationId).name,\n          }\n        : {\n            title: \"exportingPersonalVaultTitle\",\n            description: \"exportingPersonalVaultDescription\",\n            scopeIdentifier: await this.stateService.getEmail(),\n          };\n    this.show = true;\n  }\n}\n","import { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nexport abstract class ImportApiServiceAbstraction {\n  postImportCiphers: (request: ImportCiphersRequest) => Promise<any>;\n  postImportOrganizationCiphers: (\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ) => Promise<any>;\n}\n","import { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nimport { ImportApiServiceAbstraction } from \"./import-api.service.abstraction\";\n\nexport class ImportApiService implements ImportApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  async postImportCiphers(request: ImportCiphersRequest): Promise<any> {\n    return await this.apiService.send(\"POST\", \"/ciphers/import\", request, true, false);\n  }\n\n  async postImportOrganizationCiphers(\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ): Promise<any> {\n    return await this.apiService.send(\n      \"POST\",\n      \"/ciphers/import-organization?organizationId=\" + organizationId,\n      request,\n      true,\n      false\n    );\n  }\n}\n","import { Importer } from \"../importers/importer\";\nimport { ImportOption, ImportType } from \"../models/import-options\";\nimport { ImportResult } from \"../models/import-result\";\n\nexport abstract class ImportServiceAbstraction {\n  featuredImportOptions: readonly ImportOption[];\n  regularImportOptions: readonly ImportOption[];\n  getImportOptions: () => ImportOption[];\n  import: (\n    importer: Importer,\n    fileContents: string,\n    organizationId?: string\n  ) => Promise<ImportResult>;\n  getImporter: (\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>,\n    organizationId: string\n  ) => Importer;\n}\n","import { Collection } from \"../domain/collection\";\nimport { CollectionRequest } from \"../request/collection.request\";\n\nexport class CollectionWithIdRequest extends CollectionRequest {\n  id: string;\n\n  constructor(collection?: Collection) {\n    if (collection == null) {\n      return;\n    }\n    super(collection);\n    this.id = collection.id;\n  }\n}\n","import { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { FolderWithIdRequest } from \"../../vault/models/request/folder-with-id.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  folders: FolderWithIdRequest[] = [];\n  folderRelationships: KvpRequest<number, number>[] = [];\n}\n","import { CollectionWithIdRequest } from \"../../admin-console/models/request/collection-with-id.request\";\nimport { CipherRequest } from \"../../vault/models/request/cipher.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportOrganizationCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  collections: CollectionWithIdRequest[] = [];\n  collectionRelationships: KvpRequest<number, number>[] = [];\n}\n","export class KvpRequest<TK, TV> {\n  key: TK;\n  value: TV;\n\n  constructor(key: TK, value: TV) {\n    this.key = key;\n    this.value = value;\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nexport class ImportResult {\n  success = false;\n  errorMessage: string;\n  ciphers: CipherView[] = [];\n  folders: FolderView[] = [];\n  folderRelationships: [number, number][] = [];\n  collections: CollectionView[] = [];\n  collectionRelationships: [number, number][] = [];\n}\n","import * as papa from \"papaparse\";\n\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\nimport { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { ConsoleLogService } from \"@bitwarden/common/services/consoleLog.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { LoginUriView } from \"@bitwarden/common/vault/models/view/login-uri.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nexport abstract class BaseImporter {\n  organizationId: string = null;\n\n  protected logService: LogService = new ConsoleLogService(false);\n\n  protected newLineRegex = /(?:\\r\\n|\\r|\\n)/;\n\n  protected passwordFieldNames = [\n    \"password\",\n    \"pass word\",\n    \"passphrase\",\n    \"pass phrase\",\n    \"pass\",\n    \"code\",\n    \"code word\",\n    \"codeword\",\n    \"secret\",\n    \"secret word\",\n    \"personpwd\",\n    \"key\",\n    \"keyword\",\n    \"key word\",\n    \"keyphrase\",\n    \"key phrase\",\n    \"form_pw\",\n    \"wppassword\",\n    \"pin\",\n    \"pwd\",\n    \"pw\",\n    \"pword\",\n    \"passwd\",\n    \"p\",\n    \"serial\",\n    \"serial#\",\n    \"license key\",\n    \"reg #\",\n\n    // Non-English names\n    \"passwort\",\n  ];\n\n  protected usernameFieldNames = [\n    \"user\",\n    \"name\",\n    \"user name\",\n    \"username\",\n    \"login name\",\n    \"email\",\n    \"e-mail\",\n    \"id\",\n    \"userid\",\n    \"user id\",\n    \"login\",\n    \"form_loginname\",\n    \"wpname\",\n    \"mail\",\n    \"loginid\",\n    \"login id\",\n    \"log\",\n    \"personlogin\",\n    \"first name\",\n    \"last name\",\n    \"card#\",\n    \"account #\",\n    \"member\",\n    \"member #\",\n\n    // Non-English names\n    \"nom\",\n    \"benutzername\",\n  ];\n\n  protected notesFieldNames = [\n    \"note\",\n    \"notes\",\n    \"comment\",\n    \"comments\",\n    \"memo\",\n    \"description\",\n    \"free form\",\n    \"freeform\",\n    \"free text\",\n    \"freetext\",\n    \"free\",\n\n    // Non-English names\n    \"kommentar\",\n  ];\n\n  protected uriFieldNames: string[] = [\n    \"url\",\n    \"hyper link\",\n    \"hyperlink\",\n    \"link\",\n    \"host\",\n    \"hostname\",\n    \"host name\",\n    \"server\",\n    \"address\",\n    \"hyper ref\",\n    \"href\",\n    \"web\",\n    \"website\",\n    \"web site\",\n    \"site\",\n    \"web-site\",\n    \"uri\",\n\n    // Non-English names\n    \"ort\",\n    \"adresse\",\n  ];\n\n  protected parseCsvOptions = {\n    encoding: \"UTF-8\",\n    skipEmptyLines: false,\n  };\n\n  protected get organization() {\n    return this.organizationId != null;\n  }\n\n  protected parseXml(data: string): Document {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(data, \"application/xml\");\n    return doc != null && doc.querySelector(\"parsererror\") == null ? doc : null;\n  }\n\n  protected parseCsv(data: string, header: boolean, options: any = {}): any[] {\n    const parseOptions: papa.ParseConfig<string> = Object.assign(\n      { header: header },\n      this.parseCsvOptions,\n      options\n    );\n    data = this.splitNewLine(data).join(\"\\n\").trim();\n    const result = papa.parse(data, parseOptions);\n    if (result.errors != null && result.errors.length > 0) {\n      result.errors.forEach((e) => {\n        if (e.row != null) {\n          this.logService.warning(\"Error parsing row \" + e.row + \": \" + e.message);\n        }\n      });\n    }\n    return result.data && result.data.length > 0 ? result.data : null;\n  }\n\n  protected parseSingleRowCsv(rowData: string) {\n    if (this.isNullOrWhitespace(rowData)) {\n      return null;\n    }\n    const parsedRow = this.parseCsv(rowData, false);\n    if (parsedRow != null && parsedRow.length > 0 && parsedRow[0].length > 0) {\n      return parsedRow[0];\n    }\n    return null;\n  }\n\n  protected makeUriArray(uri: string | string[]): LoginUriView[] {\n    if (uri == null) {\n      return null;\n    }\n\n    if (typeof uri === \"string\") {\n      const loginUri = new LoginUriView();\n      loginUri.uri = this.fixUri(uri);\n      if (this.isNullOrWhitespace(loginUri.uri)) {\n        return null;\n      }\n      loginUri.match = null;\n      return [loginUri];\n    }\n\n    if (uri.length > 0) {\n      const returnArr: LoginUriView[] = [];\n      uri.forEach((u) => {\n        const loginUri = new LoginUriView();\n        loginUri.uri = this.fixUri(u);\n        if (this.isNullOrWhitespace(loginUri.uri)) {\n          return;\n        }\n        loginUri.match = null;\n        returnArr.push(loginUri);\n      });\n      return returnArr.length === 0 ? null : returnArr;\n    }\n\n    return null;\n  }\n\n  protected fixUri(uri: string) {\n    if (uri == null) {\n      return null;\n    }\n    uri = uri.trim();\n    if (uri.indexOf(\"://\") === -1 && uri.indexOf(\".\") >= 0) {\n      uri = \"http://\" + uri;\n    }\n    if (uri.length > 1000) {\n      return uri.substring(0, 1000);\n    }\n    return uri;\n  }\n\n  protected nameFromUrl(url: string) {\n    const hostname = Utils.getHostname(url);\n    if (this.isNullOrWhitespace(hostname)) {\n      return null;\n    }\n    return hostname.startsWith(\"www.\") ? hostname.replace(\"www.\", \"\") : hostname;\n  }\n\n  protected isNullOrWhitespace(str: string): boolean {\n    return Utils.isNullOrWhitespace(str);\n  }\n\n  protected getValueOrDefault(str: string, defaultValue: string = null): string {\n    if (this.isNullOrWhitespace(str)) {\n      return defaultValue;\n    }\n    return str;\n  }\n\n  protected splitNewLine(str: string): string[] {\n    return str.split(this.newLineRegex);\n  }\n\n  // ref https://stackoverflow.com/a/5911300\n  protected getCardBrand(cardNum: string) {\n    if (this.isNullOrWhitespace(cardNum)) {\n      return null;\n    }\n\n    // Visa\n    let re = new RegExp(\"^4\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    // Mastercard\n    // Updated for Mastercard 2017 BINs expansion\n    if (\n      /^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$/.test(\n        cardNum\n      )\n    ) {\n      return \"Mastercard\";\n    }\n\n    // AMEX\n    re = new RegExp(\"^3[47]\");\n    if (cardNum.match(re) != null) {\n      return \"Amex\";\n    }\n\n    // Discover\n    re = new RegExp(\n      \"^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)\"\n    );\n    if (cardNum.match(re) != null) {\n      return \"Discover\";\n    }\n\n    // Diners\n    re = new RegExp(\"^36\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // Diners - Carte Blanche\n    re = new RegExp(\"^30[0-5]\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // JCB\n    re = new RegExp(\"^35(2[89]|[3-8][0-9])\");\n    if (cardNum.match(re) != null) {\n      return \"JCB\";\n    }\n\n    // Visa Electron\n    re = new RegExp(\"^(4026|417500|4508|4844|491(3|7))\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    return null;\n  }\n\n  protected setCardExpiration(cipher: CipherView, expiration: string): boolean {\n    if (!this.isNullOrWhitespace(expiration)) {\n      expiration = expiration.replace(/\\s/g, \"\");\n      const parts = expiration.split(\"/\");\n      if (parts.length === 2) {\n        let month: string = null;\n        let year: string = null;\n        if (parts[0].length === 1 || parts[0].length === 2) {\n          month = parts[0];\n          if (month.length === 2 && month[0] === \"0\") {\n            month = month.substr(1, 1);\n          }\n        }\n        if (parts[1].length === 2 || parts[1].length === 4) {\n          year = month.length === 2 ? \"20\" + parts[1] : parts[1];\n        }\n        if (month != null && year != null) {\n          cipher.card.expMonth = month;\n          cipher.card.expYear = year;\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  protected moveFoldersToCollections(result: ImportResult) {\n    result.folderRelationships.forEach((r) => result.collectionRelationships.push(r));\n    result.collections = result.folders.map((f) => {\n      const collection = new CollectionView();\n      collection.name = f.name;\n      collection.id = f.id;\n      return collection;\n    });\n    result.folderRelationships = [];\n    result.folders = [];\n  }\n\n  protected querySelectorDirectChild(parentEl: Element, query: string) {\n    const els = this.querySelectorAllDirectChild(parentEl, query);\n    return els.length === 0 ? null : els[0];\n  }\n\n  protected querySelectorAllDirectChild(parentEl: Element, query: string) {\n    return Array.from(parentEl.querySelectorAll(query)).filter((el) => el.parentNode === parentEl);\n  }\n\n  protected initLoginCipher() {\n    const cipher = new CipherView();\n    cipher.favorite = false;\n    cipher.notes = \"\";\n    cipher.fields = [];\n    cipher.login = new LoginView();\n    cipher.type = CipherType.Login;\n    return cipher;\n  }\n\n  protected cleanupCipher(cipher: CipherView) {\n    if (cipher == null) {\n      return;\n    }\n    if (cipher.type !== CipherType.Login) {\n      cipher.login = null;\n    }\n    if (this.isNullOrWhitespace(cipher.name)) {\n      cipher.name = \"--\";\n    }\n    if (this.isNullOrWhitespace(cipher.notes)) {\n      cipher.notes = null;\n    } else {\n      cipher.notes = cipher.notes.trim();\n    }\n    if (cipher.fields != null && cipher.fields.length === 0) {\n      cipher.fields = null;\n    }\n  }\n\n  protected processKvp(\n    cipher: CipherView,\n    key: string,\n    value: string,\n    type: FieldType = FieldType.Text\n  ) {\n    if (this.isNullOrWhitespace(value)) {\n      return;\n    }\n    if (this.isNullOrWhitespace(key)) {\n      key = \"\";\n    }\n    if (value.length > 200 || value.trim().search(this.newLineRegex) > -1) {\n      if (cipher.notes == null) {\n        cipher.notes = \"\";\n      }\n      cipher.notes += key + \": \" + this.splitNewLine(value).join(\"\\n\") + \"\\n\";\n    } else {\n      if (cipher.fields == null) {\n        cipher.fields = [];\n      }\n      const field = new FieldView();\n      field.type = type;\n      field.name = key;\n      field.value = value;\n      cipher.fields.push(field);\n    }\n  }\n\n  protected processFolder(result: ImportResult, folderName: string) {\n    if (this.isNullOrWhitespace(folderName)) {\n      return;\n    }\n\n    let folderIndex = result.folders.length;\n    // Replace backslashes with forward slashes, ensuring we create sub-folders\n    folderName = folderName.replace(\"\\\\\", \"/\");\n    let addFolder = true;\n\n    for (let i = 0; i < result.folders.length; i++) {\n      if (result.folders[i].name === folderName) {\n        addFolder = false;\n        folderIndex = i;\n        break;\n      }\n    }\n\n    if (addFolder) {\n      const f = new FolderView();\n      f.name = folderName;\n      result.folders.push(f);\n    }\n\n    result.folderRelationships.push([result.ciphers.length, folderIndex]);\n  }\n\n  protected convertToNoteIfNeeded(cipher: CipherView) {\n    if (\n      cipher.type === CipherType.Login &&\n      this.isNullOrWhitespace(cipher.login.username) &&\n      this.isNullOrWhitespace(cipher.login.password) &&\n      (cipher.login.uris == null || cipher.login.uris.length === 0)\n    ) {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    }\n  }\n\n  protected processFullName(cipher: CipherView, fullName: string) {\n    if (this.isNullOrWhitespace(fullName)) {\n      return;\n    }\n\n    const nameParts = fullName.split(\" \");\n    if (nameParts.length > 0) {\n      cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n    }\n    if (nameParts.length === 2) {\n      cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n    } else if (nameParts.length >= 3) {\n      cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n      cipher.identity.lastName = nameParts.slice(2, nameParts.length).join(\" \");\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AscendoCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 2) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const val: string = value[i + 2];\n          const field: string = value[i + 1];\n          if (this.isNullOrWhitespace(val) || this.isNullOrWhitespace(field)) {\n            continue;\n          }\n\n          const fieldLower = field.toLowerCase();\n          if (cipher.login.password == null && this.passwordFieldNames.indexOf(fieldLower) > -1) {\n            cipher.login.password = this.getValueOrDefault(val);\n          } else if (\n            cipher.login.username == null &&\n            this.usernameFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.username = this.getValueOrDefault(val);\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n          } else {\n            this.processKvp(cipher, field, val);\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.login.uris = this.makeUriArray(value.web);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.username = this.getValueOrDefault(value.login);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.logins != null) {\n      results.logins.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.pwd);\n        cipher.login.username = this.getValueOrDefault(value.loginName);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.notes != null) {\n      results.notes.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.name = this.getValueOrDefault(value.label);\n        cipher.notes = this.getValueOrDefault(value.text);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.cards != null) {\n      results.cards.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Card;\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.card.cardholderName = this.getValueOrDefault(value.holderName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        if (value.expirationDate != null) {\n          if (value.expirationDate.month != null) {\n            cipher.card.expMonth = value.expirationDate.month + \"\";\n          }\n          if (value.expirationDate.year != null) {\n            cipher.card.expYear = value.expirationDate.year + \"\";\n          }\n        }\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AviraCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.name,\n        this.getValueOrDefault(this.nameFromUrl(value.website), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.website);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (\n        this.isNullOrWhitespace(value.username) &&\n        !this.isNullOrWhitespace(value.secondary_username)\n      ) {\n        cipher.login.username = value.secondary_username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.notes = this.getValueOrDefault(value.secondary_username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlackBerryCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.grouping === \"list\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.favorite = value.fav === \"1\";\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.extra);\n      if (value.grouping !== \"note\") {\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ChromeCsvImporter extends BaseImporter implements Importer {\n  private androidPatternRegex = new RegExp(\"^android:\\\\/\\\\/.*(?<=@)(.*)(?=\\\\/)\");\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      let name = value.name;\n      if (!name && this.androidPatternRegex.test(value.url)) {\n        name = value.url.match(this.androidPatternRegex)[1];\n      }\n      cipher.name = this.getValueOrDefault(name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\nimport { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.organization && !this.isNullOrWhitespace(value.collections)) {\n        const collections = (value.collections as string).split(\",\");\n        collections.forEach((col) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === col) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = col;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization) {\n        this.processFolder(result, value.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.favorite =\n        !this.organization && this.getValueOrDefault(value.favorite, \"0\") !== \"0\" ? true : false;\n      cipher.type = CipherType.Login;\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      try {\n        cipher.reprompt = parseInt(\n          this.getValueOrDefault(value.reprompt, CipherRepromptType.None.toString()),\n          10\n        );\n      } catch (e) {\n        // eslint-disable-next-line\n        console.error(\"Unable to parse reprompt value\", e);\n        cipher.reprompt = CipherRepromptType.None;\n      }\n\n      if (!this.isNullOrWhitespace(value.fields)) {\n        const fields = this.splitNewLine(value.fields);\n        for (let i = 0; i < fields.length; i++) {\n          if (this.isNullOrWhitespace(fields[i])) {\n            continue;\n          }\n\n          const delimPosition = fields[i].lastIndexOf(\": \");\n          if (delimPosition === -1) {\n            continue;\n          }\n\n          if (cipher.fields == null) {\n            cipher.fields = [];\n          }\n\n          const field = new FieldView();\n          field.name = fields[i].substr(0, delimPosition);\n          field.value = null;\n          field.type = FieldType.Text;\n          if (fields[i].length > delimPosition + 2) {\n            field.value = fields[i].substr(delimPosition + 2);\n          }\n          cipher.fields.push(field);\n        }\n      }\n\n      const valueType = value.type != null ? value.type.toLowerCase() : null;\n      switch (valueType) {\n        case \"note\":\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote = new SecureNoteView();\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default: {\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.totp = this.getValueOrDefault(value.login_totp || value.totp);\n          cipher.login.username = this.getValueOrDefault(value.login_username || value.username);\n          cipher.login.password = this.getValueOrDefault(value.login_password || value.password);\n          const uris = this.parseSingleRowCsv(value.login_uri || value.uri);\n          cipher.login.uris = this.makeUriArray(uris);\n          break;\n        }\n      }\n\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport {\n  CipherWithIdExport,\n  CollectionWithIdExport,\n  FolderWithIdExport,\n} from \"@bitwarden/common/models/export\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenJsonImporter extends BaseImporter implements Importer {\n  private results: any;\n  private result: ImportResult;\n\n  protected constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService\n  ) {\n    super();\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    this.results = JSON.parse(data);\n    if (this.results == null || this.results.items == null) {\n      this.result.success = false;\n      return this.result;\n    }\n\n    if (this.results.encrypted) {\n      await this.parseEncrypted();\n    } else {\n      this.parseDecrypted();\n    }\n\n    return this.result;\n  }\n\n  private async parseEncrypted() {\n    if (this.results.encKeyValidation_DO_NOT_EDIT != null) {\n      const orgKey = await this.cryptoService.getOrgKey(this.organizationId);\n      const encKeyValidation = new EncString(this.results.encKeyValidation_DO_NOT_EDIT);\n      const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n        encKeyValidation,\n        orgKey\n      );\n      if (encKeyValidationDecrypt === null) {\n        this.result.success = false;\n        this.result.errorMessage = this.i18nService.t(\"importEncKeyError\");\n        return;\n      }\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    if (this.organization && this.results.collections != null) {\n      for (const c of this.results.collections as CollectionWithIdExport[]) {\n        const collection = CollectionWithIdExport.toDomain(c);\n        if (collection != null) {\n          collection.organizationId = this.organizationId;\n          const view = await collection.decrypt();\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(view);\n        }\n      }\n    } else if (!this.organization && this.results.folders != null) {\n      for (const f of this.results.folders as FolderWithIdExport[]) {\n        const folder = FolderWithIdExport.toDomain(f);\n        if (folder != null) {\n          const view = await folder.decrypt();\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(view);\n        }\n      }\n    }\n\n    for (const c of this.results.items as CipherWithIdExport[]) {\n      const cipher = CipherWithIdExport.toDomain(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = this.organizationId;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      const view = await cipher.decrypt();\n      this.cleanupCipher(view);\n      this.result.ciphers.push(view);\n    }\n\n    this.result.success = true;\n  }\n\n  private parseDecrypted() {\n    const groupingsMap = new Map<string, number>();\n    if (this.organization && this.results.collections != null) {\n      this.results.collections.forEach((c: CollectionWithIdExport) => {\n        const collection = CollectionWithIdExport.toView(c);\n        if (collection != null) {\n          collection.organizationId = null;\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(collection);\n        }\n      });\n    } else if (!this.organization && this.results.folders != null) {\n      this.results.folders.forEach((f: FolderWithIdExport) => {\n        const folder = FolderWithIdExport.toView(f);\n        if (folder != null) {\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(folder);\n        }\n      });\n    }\n\n    this.results.items.forEach((c: CipherWithIdExport) => {\n      const cipher = CipherWithIdExport.toView(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = null;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n  }\n}\n","import { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { KdfConfig } from \"@bitwarden/common/auth/models/domain/kdf-config\";\nimport { KdfType } from \"@bitwarden/common/enums\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\nimport { BitwardenPasswordProtectedFileFormat } from \"@bitwarden/exporter/vault-export/bitwarden-password-protected-types\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { Importer } from \"../importer\";\n\nimport { BitwardenJsonImporter } from \"./bitwarden-json-importer\";\nexport class BitwardenPasswordProtectedImporter extends BitwardenJsonImporter implements Importer {\n  private key: SymmetricCryptoKey;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    private promptForPassword_callback: () => Promise<string>\n  ) {\n    super(cryptoService, i18nService);\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const parsedData: BitwardenPasswordProtectedFileFormat = JSON.parse(data);\n\n    if (!parsedData) {\n      result.success = false;\n      return result;\n    }\n\n    // File is unencrypted\n    if (!parsedData?.encrypted) {\n      return await super.parse(data);\n    }\n\n    // File is account-encrypted\n    if (!parsedData?.passwordProtected) {\n      return await super.parse(data);\n    }\n\n    if (this.cannotParseFile(parsedData)) {\n      result.success = false;\n      return result;\n    }\n\n    // File is password-protected\n    const password = await this.promptForPassword_callback();\n    if (!(await this.checkPassword(parsedData, password))) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"invalidFilePassword\");\n      return result;\n    }\n\n    const encData = new EncString(parsedData.data);\n    const clearTextData = await this.cryptoService.decryptToUtf8(encData, this.key);\n    return await super.parse(clearTextData);\n  }\n\n  private async checkPassword(\n    jdoc: BitwardenPasswordProtectedFileFormat,\n    password: string\n  ): Promise<boolean> {\n    this.key = await this.cryptoService.makePinKey(\n      password,\n      jdoc.salt,\n      jdoc.kdfType,\n      new KdfConfig(jdoc.kdfIterations, jdoc.kdfMemory, jdoc.kdfParallelism)\n    );\n\n    const encKeyValidation = new EncString(jdoc.encKeyValidation_DO_NOT_EDIT);\n\n    const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n      encKeyValidation,\n      this.key\n    );\n    if (encKeyValidationDecrypt === null) {\n      return false;\n    }\n    return true;\n  }\n\n  private cannotParseFile(jdoc: BitwardenPasswordProtectedFileFormat): boolean {\n    return (\n      !jdoc ||\n      !jdoc.encrypted ||\n      !jdoc.passwordProtected ||\n      !jdoc.salt ||\n      !jdoc.kdfIterations ||\n      typeof jdoc.kdfIterations !== \"number\" ||\n      jdoc.kdfType == null ||\n      KdfType[jdoc.kdfType] == null ||\n      !jdoc.encKeyValidation_DO_NOT_EDIT ||\n      !jdoc.data\n    );\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlurCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.label === \"null\") {\n        value.label = null;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.label,\n        this.getValueOrDefault(this.nameFromUrl(value.domain), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.domain);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (this.isNullOrWhitespace(value.email) && !this.isNullOrWhitespace(value.username)) {\n        cipher.login.username = value.username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.email);\n        cipher.notes = this.getValueOrDefault(value.username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst OfficialProps = [\"!group_id\", \"!group_name\", \"title\", \"username\", \"password\", \"URL\", \"id\"];\n\nexport class ButtercupCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value[\"!group_name\"]));\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      let processingCustomFields = false;\n      for (const prop in value) {\n        // eslint-disable-next-line\n        if (value.hasOwnProperty(prop)) {\n          if (!processingCustomFields && OfficialProps.indexOf(prop) === -1) {\n            processingCustomFields = true;\n          }\n          if (processingCustomFields) {\n            this.processKvp(cipher, prop, value[prop]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ClipperzHtmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const textarea = doc.querySelector(\"textarea\");\n    if (textarea == null || this.isNullOrWhitespace(textarea.textContent)) {\n      result.errorMessage = \"Missing textarea.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const entries = JSON.parse(textarea.textContent);\n    entries.forEach((entry: any) => {\n      const cipher = this.initLoginCipher();\n      if (!this.isNullOrWhitespace(entry.label)) {\n        cipher.name = entry.label.split(\" \")[0];\n      }\n      if (entry.data != null && !this.isNullOrWhitespace(entry.data.notes)) {\n        cipher.notes = entry.data.notes.split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (entry.currentVersion != null && entry.currentVersion.fields != null) {\n        for (const property in entry.currentVersion.fields) {\n          // eslint-disable-next-line\n          if (!entry.currentVersion.fields.hasOwnProperty(property)) {\n            continue;\n          }\n\n          const field = entry.currentVersion.fields[property];\n          const actionType = field.actionType != null ? field.actionType.toLowerCase() : null;\n          switch (actionType) {\n            case \"password\":\n              cipher.login.password = this.getValueOrDefault(field.value);\n              break;\n            case \"email\":\n            case \"username\":\n            case \"user\":\n            case \"name\":\n              cipher.login.username = this.getValueOrDefault(field.value);\n              break;\n            case \"url\":\n              cipher.login.uris = this.makeUriArray(field.value);\n              break;\n            default: {\n              const labelLower = field.label != null ? field.label.toLowerCase() : null;\n              if (\n                cipher.login.password == null &&\n                this.passwordFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.password = this.getValueOrDefault(field.value);\n              } else if (\n                cipher.login.username == null &&\n                this.usernameFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.username = this.getValueOrDefault(field.value);\n              } else if (\n                (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n                this.uriFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.uris = this.makeUriArray(field.value);\n              } else {\n                this.processKvp(cipher, field.label, field.value);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class CodebookCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value.Category));\n\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite) === \"True\";\n      cipher.name = this.getValueOrDefault(value.Entry, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.login.username = this.getValueOrDefault(value.Username, value.Email);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.totp = this.getValueOrDefault(value.TOTP);\n      cipher.login.uris = this.makeUriArray(value.Website);\n\n      if (!this.isNullOrWhitespace(value.Username)) {\n        this.processKvp(cipher, \"Email\", value.Email);\n      }\n      this.processKvp(cipher, \"Phone\", value.Phone);\n      this.processKvp(cipher, \"PIN\", value.PIN);\n      this.processKvp(cipher, \"Account\", value.Account);\n      this.processKvp(cipher, \"Date\", value.Date);\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CredentialsRecord,\n  IdRecord,\n  PaymentsRecord,\n  PersonalInformationRecord,\n  SecureNoteRecord,\n} from \"./types/dashlane-csv-types\";\n\nconst _mappedCredentialsColumns = new Set([\n  \"title\",\n  \"note\",\n  \"username\",\n  \"password\",\n  \"url\",\n  \"otpSecret\",\n  \"category\",\n]);\n\nconst _mappedPersonalInfoAsIdentityColumns = new Set([\n  \"type\",\n  \"title\",\n  \"first_name\",\n  \"middle_name\",\n  \"last_name\",\n  \"login\",\n  \"email\",\n  \"phone_number\",\n  \"address\",\n  \"country\",\n  \"state\",\n  \"city\",\n  \"zip\",\n  // Skip item_name as we already have set a combined name\n  \"item_name\",\n]);\n\nconst _mappedSecureNoteColumns = new Set([\"title\", \"note\"]);\n\nexport class DashlaneCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results[0].type != null && results[0].title != null) {\n      const personalRecords = results as PersonalInformationRecord[];\n\n      // If personalRecords has only one \"name\" then create an Identity-Cipher\n      if (personalRecords.filter((x) => x.type === \"name\").length === 1) {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        results.forEach((row) => {\n          this.parsePersonalInformationRecordAsIdentity(cipher, row);\n        });\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n        result.success = true;\n        return Promise.resolve(result);\n      }\n    }\n\n    results.forEach((row) => {\n      const cipher = this.initLoginCipher();\n\n      const rowKeys = Object.keys(row);\n      if (rowKeys[0] === \"username\") {\n        this.processFolder(result, row.category);\n        this.parseCredentialsRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"account_name\") {\n        this.parsePaymentRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"number\") {\n        this.parseIdRecord(cipher, row);\n      }\n\n      if ((rowKeys[0] === \"type\") != null && rowKeys[1] === \"title\") {\n        this.parsePersonalInformationRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"title\" && rowKeys[1] === \"note\") {\n        this.parseSecureNoteRecords(cipher, row);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  parseCredentialsRecord(cipher: CipherView, row: CredentialsRecord) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    cipher.name = row.title;\n    cipher.notes = row.note;\n    cipher.login.username = row.username;\n    cipher.login.password = row.password;\n    cipher.login.totp = row.otpSecret;\n    cipher.login.uris = this.makeUriArray(row.url);\n\n    this.importUnmappedFields(cipher, row, _mappedCredentialsColumns);\n  }\n\n  parsePaymentRecord(cipher: CipherView, row: PaymentsRecord) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n\n    cipher.name = row.account_name;\n    let mappedValues: string[] = [];\n    switch (row.type) {\n      case \"credit_card\":\n        cipher.card.cardholderName = row.account_name;\n        cipher.card.number = row.cc_number;\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = row.code;\n        this.setCardExpiration(cipher, `${row.expiration_month}/${row.expiration_year}`);\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\n          \"account_name\",\n          \"account_holder\",\n          \"cc_number\",\n          \"code\",\n          \"expiration_month\",\n          \"expiration_year\",\n        ];\n        break;\n      case \"bank\":\n        cipher.card.cardholderName = row.account_holder;\n        cipher.card.number = row.account_number;\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\"account_name\", \"account_holder\", \"account_number\"];\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parseIdRecord(cipher: CipherView, row: IdRecord) {\n    cipher.type = CipherType.Identity;\n    cipher.identity = new IdentityView();\n\n    const mappedValues: string[] = [\"name\", \"number\"];\n    switch (row.type) {\n      case \"card\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        break;\n      case \"passport\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.passportNumber = row.number;\n        break;\n      case \"license\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        cipher.identity.state = row.state;\n\n        mappedValues.push(\"state\");\n        break;\n      case \"social_security\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.ssn = row.number;\n        break;\n      case \"tax_number\":\n        cipher.name = row.type;\n        cipher.identity.licenseNumber = row.number;\n        break;\n\n      default:\n        break;\n    }\n\n    // If you add more mapped fields please extend this\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parsePersonalInformationRecord(cipher: CipherView, row: PersonalInformationRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    if (row.type === \"name\") {\n      cipher.name = `${row.title} ${row.first_name} ${row.middle_name} ${row.last_name}`\n        .replace(\"  \", \" \")\n        .trim();\n    } else {\n      cipher.name = row.item_name;\n    }\n\n    const dataRow = row as any;\n    Object.keys(row).forEach((key) => {\n      this.processKvp(cipher, key, dataRow[key]);\n    });\n  }\n\n  parsePersonalInformationRecordAsIdentity(cipher: CipherView, row: PersonalInformationRecord) {\n    switch (row.type) {\n      case \"name\":\n        this.processFullName(cipher, `${row.first_name} ${row.middle_name} ${row.last_name}`);\n        cipher.identity.title = row.title;\n        cipher.name = cipher.identity.fullName;\n\n        cipher.identity.username = row.login;\n        break;\n      case \"email\":\n        cipher.identity.email = row.email;\n        break;\n      case \"number\":\n        cipher.identity.phone = row.phone_number;\n        break;\n      case \"address\":\n        cipher.identity.address1 = row.address;\n        cipher.identity.city = row.city;\n        cipher.identity.postalCode = row.zip;\n        cipher.identity.state = row.state;\n        cipher.identity.country = row.country;\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, _mappedPersonalInfoAsIdentityColumns);\n  }\n\n  parseSecureNoteRecords(cipher: CipherView, row: SecureNoteRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = row.title;\n    cipher.notes = row.note;\n\n    this.importUnmappedFields(cipher, row, _mappedSecureNoteColumns);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nconst HandledResults = new Set([\n  \"ADDRESS\",\n  \"AUTHENTIFIANT\",\n  \"BANKSTATEMENT\",\n  \"IDCARD\",\n  \"IDENTITY\",\n  \"PAYMENTMEANS_CREDITCARD\",\n  \"PAYMENTMEAN_PAYPAL\",\n  \"EMAIL\",\n]);\n\nexport class DashlaneJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    if (results.ADDRESS != null) {\n      this.processAddress(results.ADDRESS);\n    }\n    if (results.AUTHENTIFIANT != null) {\n      this.processAuth(results.AUTHENTIFIANT);\n    }\n    if (results.BANKSTATEMENT != null) {\n      this.processNote(results.BANKSTATEMENT, \"BankAccountName\");\n    }\n    if (results.IDCARD != null) {\n      this.processNote(results.IDCARD, \"Fullname\");\n    }\n    if (results.PAYMENTMEANS_CREDITCARD != null) {\n      this.processCard(results.PAYMENTMEANS_CREDITCARD);\n    }\n    if (results.IDENTITY != null) {\n      this.processIdentity(results.IDENTITY);\n    }\n\n    for (const key in results) {\n      // eslint-disable-next-line\n      if (results.hasOwnProperty(key) && !HandledResults.has(key)) {\n        this.processNote(results[key], null, \"Generic Note\");\n      }\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processAuth(results: any[]) {\n    results.forEach((credential: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(credential.title);\n\n      cipher.login.username = this.getValueOrDefault(\n        credential.login,\n        this.getValueOrDefault(credential.secondaryLogin)\n      );\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.domain);\n      cipher.notes += this.getValueOrDefault(credential.note, \"\");\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processIdentity(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.fullName, \"\");\n      const nameParts = cipher.name.split(\" \");\n      if (nameParts.length > 0) {\n        cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n      }\n      if (nameParts.length === 2) {\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n      } else if (nameParts.length === 3) {\n        cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[2]);\n      }\n      cipher.identity.username = this.getValueOrDefault(obj.pseudo);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processAddress(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.addressName);\n      cipher.identity.address1 = this.getValueOrDefault(obj.addressFull);\n      cipher.identity.city = this.getValueOrDefault(obj.city);\n      cipher.identity.state = this.getValueOrDefault(obj.state);\n      cipher.identity.postalCode = this.getValueOrDefault(obj.zipcode);\n      cipher.identity.country = this.getValueOrDefault(obj.country);\n      if (cipher.identity.country != null) {\n        cipher.identity.country = cipher.identity.country.toUpperCase();\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processCard(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.card = new CardView();\n      cipher.type = CipherType.Card;\n      cipher.name = this.getValueOrDefault(obj.bank);\n      cipher.card.number = this.getValueOrDefault(obj.cardNumber);\n      cipher.card.brand = this.getCardBrand(cipher.card.number);\n      cipher.card.cardholderName = this.getValueOrDefault(obj.owner);\n      if (!this.isNullOrWhitespace(cipher.card.brand)) {\n        if (this.isNullOrWhitespace(cipher.name)) {\n          cipher.name = cipher.card.brand;\n        } else {\n          cipher.name += \" - \" + cipher.card.brand;\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processNote(results: any[], nameProperty: string, name: string = null) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.secureNote = new SecureNoteView();\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote.type = SecureNoteType.Generic;\n      if (name != null) {\n        cipher.name = name;\n      } else {\n        cipher.name = this.getValueOrDefault(obj[nameProperty]);\n      }\n      for (const key in obj) {\n        // eslint-disable-next-line\n        if (obj.hasOwnProperty(key) && key !== nameProperty) {\n          this.processKvp(cipher, key, obj[key].toString());\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class EncryptrCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Label, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      const text = this.getValueOrDefault(value.Text);\n      if (!this.isNullOrWhitespace(text)) {\n        if (this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = text;\n        } else {\n          cipher.notes += \"\\n\\n\" + text;\n        }\n      }\n\n      const type = value[\"Entry Type\"];\n      if (type === \"Password\") {\n        cipher.login.username = this.getValueOrDefault(value.Username);\n        cipher.login.password = this.getValueOrDefault(value.Password);\n        cipher.login.uris = this.makeUriArray(value[\"Site URL\"]);\n      } else if (type === \"Credit Card\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value[\"Name on card\"]);\n        cipher.card.number = this.getValueOrDefault(value[\"Card Number\"]);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.CVV);\n        const expiry = this.getValueOrDefault(value.Expiry);\n        if (!this.isNullOrWhitespace(expiry)) {\n          const expParts = expiry.split(\"/\");\n          if (expParts.length > 1) {\n            cipher.card.expMonth = parseInt(expParts[0], null).toString();\n            cipher.card.expYear = (2000 + parseInt(expParts[1], null)).toString();\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class EnpassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let firstRow = true;\n    results.forEach((value) => {\n      if (value.length < 2 || (firstRow && (value[0] === \"Title\" || value[0] === \"title\"))) {\n        firstRow = false;\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (\n        value.length === 2 ||\n        (!this.containsField(value, \"username\") &&\n          !this.containsField(value, \"password\") &&\n          !this.containsField(value, \"email\") &&\n          !this.containsField(value, \"url\"))\n      ) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      }\n\n      if (\n        this.containsField(value, \"cardholder\") &&\n        this.containsField(value, \"number\") &&\n        this.containsField(value, \"expiry date\")\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      }\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const fieldValue: string = value[i + 2];\n          if (this.isNullOrWhitespace(fieldValue)) {\n            continue;\n          }\n\n          const fieldName: string = value[i + 1];\n          const fieldNameLower = fieldName.toLowerCase();\n\n          if (cipher.type === CipherType.Login) {\n            if (\n              fieldNameLower === \"url\" &&\n              (cipher.login.uris == null || cipher.login.uris.length === 0)\n            ) {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              continue;\n            } else if (\n              (fieldNameLower === \"username\" || fieldNameLower === \"email\") &&\n              this.isNullOrWhitespace(cipher.login.username)\n            ) {\n              cipher.login.username = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"password\" &&\n              this.isNullOrWhitespace(cipher.login.password)\n            ) {\n              cipher.login.password = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n              cipher.login.totp = fieldValue;\n              continue;\n            }\n          } else if (cipher.type === CipherType.Card) {\n            if (\n              fieldNameLower === \"cardholder\" &&\n              this.isNullOrWhitespace(cipher.card.cardholderName)\n            ) {\n              cipher.card.cardholderName = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"number\" && this.isNullOrWhitespace(cipher.card.number)) {\n              cipher.card.number = fieldValue;\n              cipher.card.brand = this.getCardBrand(fieldValue);\n              continue;\n            } else if (fieldNameLower === \"cvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n              cipher.card.code = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"expiry date\" &&\n              this.isNullOrWhitespace(cipher.card.expMonth) &&\n              this.isNullOrWhitespace(cipher.card.expYear)\n            ) {\n              if (this.setCardExpiration(cipher, fieldValue)) {\n                continue;\n              }\n            } else if (fieldNameLower === \"type\") {\n              // Skip since brand was determined from number above\n              continue;\n            }\n          }\n\n          this.processKvp(cipher, fieldName, fieldValue);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private containsField(fields: any[], name: string) {\n    if (fields == null || name == null) {\n      return false;\n    }\n    return (\n      fields.filter((f) => !this.isNullOrWhitespace(f) && f.toLowerCase() === name.toLowerCase())\n        .length > 0\n    );\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { EnpassJsonFile, EnpassFolder, EnpassField } from \"./types/enpass-json-type\";\n\ntype EnpassFolderTreeItem = EnpassFolder & { children: EnpassFolderTreeItem[] };\nconst androidUrlRegex = new RegExp(\"androidapp://.*==@\", \"g\");\n\nexport class EnpassJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: EnpassJsonFile = JSON.parse(data);\n    if (results == null || results.items == null || results.items.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    const foldersIndexMap = new Map<string, number>();\n    const folderTree = this.buildFolderTree(results.folders);\n    this.flattenFolderTree(null, folderTree, foldersMap);\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((item) => {\n      if (item.folders != null && item.folders.length > 0 && foldersIndexMap.has(item.folders[0])) {\n        result.folderRelationships.push([\n          result.ciphers.length,\n          foldersIndexMap.get(item.folders[0]),\n        ]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(item.title);\n      cipher.favorite = item.favorite > 0;\n\n      if (item.template_type != null && item.fields != null && item.fields.length > 0) {\n        if (\n          item.template_type.indexOf(\"login.\") === 0 ||\n          item.template_type.indexOf(\"password.\") === 0\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else if (item.template_type.indexOf(\"creditcard.\") === 0) {\n          this.processCard(cipher, item.fields);\n        } else if (\n          item.template_type.indexOf(\"identity.\") < 0 &&\n          item.fields.some((f) => f.type === \"password\" && !this.isNullOrWhitespace(f.value))\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else {\n          this.processNote(cipher, item.fields);\n        }\n      }\n\n      cipher.notes += \"\\n\" + this.getValueOrDefault(item.note, \"\");\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private processLogin(cipher: CipherView, fields: EnpassField[]) {\n    const urls: string[] = [];\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n\n      if (\n        (field.type === \"username\" || field.type === \"email\") &&\n        this.isNullOrWhitespace(cipher.login.username)\n      ) {\n        cipher.login.username = field.value;\n      } else if (field.type === \"password\" && this.isNullOrWhitespace(cipher.login.password)) {\n        cipher.login.password = field.value;\n      } else if (field.type === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n        cipher.login.totp = field.value;\n      } else if (field.type === \"url\") {\n        urls.push(field.value);\n      } else if (field.type === \".Android#\") {\n        let cleanedValue = field.value.startsWith(\"androidapp://\")\n          ? field.value\n          : \"androidapp://\" + field.value;\n        cleanedValue = cleanedValue.replace(\"android://\", \"\");\n        cleanedValue = cleanedValue.replace(androidUrlRegex, \"androidapp://\");\n        urls.push(cleanedValue);\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n    cipher.login.uris = this.makeUriArray(urls);\n  }\n\n  private processCard(cipher: CipherView, fields: EnpassField[]) {\n    cipher.card = new CardView();\n    cipher.type = CipherType.Card;\n    fields.forEach((field) => {\n      if (\n        this.isNullOrWhitespace(field.value) ||\n        field.type === \"section\" ||\n        field.type === \"ccType\"\n      ) {\n        return;\n      }\n\n      if (field.type === \"ccName\" && this.isNullOrWhitespace(cipher.card.cardholderName)) {\n        cipher.card.cardholderName = field.value;\n      } else if (field.type === \"ccNumber\" && this.isNullOrWhitespace(cipher.card.number)) {\n        cipher.card.number = field.value;\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n      } else if (field.type === \"ccCvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n        cipher.card.code = field.value;\n      } else if (field.type === \"ccExpiry\" && this.isNullOrWhitespace(cipher.card.expYear)) {\n        if (!this.setCardExpiration(cipher, field.value)) {\n          this.processKvp(\n            cipher,\n            field.label,\n            field.value,\n            field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n          );\n        }\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n  }\n\n  private processNote(cipher: CipherView, fields: EnpassField[]) {\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n      this.processKvp(\n        cipher,\n        field.label,\n        field.value,\n        field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n      );\n    });\n  }\n\n  private buildFolderTree(folders: EnpassFolder[]): EnpassFolderTreeItem[] {\n    if (folders == null) {\n      return [];\n    }\n    const folderTree: EnpassFolderTreeItem[] = [];\n    const map = new Map<string, EnpassFolderTreeItem>([]);\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      map.set(obj.uuid, obj);\n      obj.children = [];\n    });\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      if (obj.parent_uuid != null && obj.parent_uuid !== \"\" && map.has(obj.parent_uuid)) {\n        map.get(obj.parent_uuid).children.push(obj);\n      } else {\n        folderTree.push(obj);\n      }\n    });\n    return folderTree;\n  }\n\n  private flattenFolderTree(\n    titlePrefix: string,\n    tree: EnpassFolderTreeItem[],\n    map: Map<string, string>\n  ) {\n    if (tree == null) {\n      return;\n    }\n    tree.forEach((f) => {\n      if (f.title != null && f.title.trim() !== \"\") {\n        let title = f.title.trim();\n        if (titlePrefix != null && titlePrefix.trim() !== \"\") {\n          title = titlePrefix + \"/\" + title;\n        }\n        map.set(f.uuid, title);\n        if (f.children != null && f.children.length !== 0) {\n          this.flattenFolderTree(title, f.children, map);\n        }\n      }\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class FirefoxCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results\n      .filter((value) => {\n        return value.url !== \"chrome://FirefoxAccounts\";\n      })\n      .forEach((value) => {\n        const cipher = this.initLoginCipher();\n        const url = this.getValueOrDefault(value.url, this.getValueOrDefault(value.hostname));\n        cipher.name = this.getValueOrDefault(this.nameFromUrl(url), \"--\");\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.uris = this.makeUriArray(url);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export interface FskFile {\n  data: Data;\n}\n\nexport interface Data {\n  [key: string]: FskEntry;\n}\n\nexport enum FskEntryTypesEnum {\n  Login = 1,\n  CreditCard = 2,\n}\n\nexport interface FskEntry {\n  color: string;\n  creditCvv: string;\n  creditExpiry: string;\n  creditNumber: string;\n  favorite: number; // UNIX timestamp\n  notes: string;\n  password: string;\n  passwordList: PasswordList[];\n  passwordModifiedDate: number; // UNIX timestamp\n  rev: string | number;\n  service: string;\n  style: string;\n  type: FskEntryTypesEnum;\n  url: string;\n  username: string;\n  createdDate: number; // UNIX timestamp\n  modifiedDate: number; // UNIX timestamp\n}\n\nexport interface PasswordList {\n  changedate: string;\n  password: string;\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { FskEntry, FskEntryTypesEnum, FskFile } from \"./fsecure-fsk-types\";\n\nexport class FSecureFskImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: FskFile = JSON.parse(data);\n    if (results == null || results.data == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const key in results.data) {\n      // eslint-disable-next-line\n      if (!results.data.hasOwnProperty(key)) {\n        continue;\n      }\n\n      const value = results.data[key];\n      const cipher = this.parseEntry(value);\n      result.ciphers.push(cipher);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseEntry(entry: FskEntry): CipherView {\n    const cipher = this.initLoginCipher();\n    cipher.name = this.getValueOrDefault(entry.service);\n    cipher.notes = this.getValueOrDefault(entry.notes);\n    cipher.favorite = entry.favorite > 0;\n\n    switch (entry.type) {\n      case FskEntryTypesEnum.Login:\n        this.handleLoginEntry(entry, cipher);\n        break;\n      case FskEntryTypesEnum.CreditCard:\n        this.handleCreditCardEntry(entry, cipher);\n        break;\n      default:\n        return;\n        break;\n    }\n\n    this.convertToNoteIfNeeded(cipher);\n    this.cleanupCipher(cipher);\n    return cipher;\n  }\n\n  private handleLoginEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.login.username = this.getValueOrDefault(entry.username);\n    cipher.login.password = this.getValueOrDefault(entry.password);\n    cipher.login.uris = this.makeUriArray(entry.url);\n  }\n\n  private handleCreditCardEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n    cipher.card.cardholderName = this.getValueOrDefault(entry.username);\n    cipher.card.number = this.getValueOrDefault(entry.creditNumber);\n    cipher.card.brand = this.getCardBrand(cipher.card.number);\n    cipher.card.code = this.getValueOrDefault(entry.creditCvv);\n    if (!this.isNullOrWhitespace(entry.creditExpiry)) {\n      if (!this.setCardExpiration(cipher, entry.creditExpiry)) {\n        this.processKvp(cipher, \"Expiration\", entry.creditExpiry);\n      }\n    }\n    if (!this.isNullOrWhitespace(entry.password)) {\n      this.processKvp(cipher, \"PIN\", entry.password);\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class GnomeJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || Object.keys(results).length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const keyRing in results) {\n      if (\n        !results.hasOwnProperty(keyRing) || // eslint-disable-line\n        this.isNullOrWhitespace(keyRing) ||\n        results[keyRing].length === 0\n      ) {\n        continue;\n      }\n\n      results[keyRing].forEach((value: any) => {\n        if (\n          this.isNullOrWhitespace(value.display_name) ||\n          value.display_name.indexOf(\"http\") !== 0\n        ) {\n          return;\n        }\n\n        this.processFolder(result, keyRing);\n        const cipher = this.initLoginCipher();\n        cipher.name = value.display_name.replace(\"http://\", \"\").replace(\"https://\", \"\");\n        if (cipher.name.length > 30) {\n          cipher.name = cipher.name.substring(0, 30);\n        }\n        cipher.login.password = this.getValueOrDefault(value.secret);\n        cipher.login.uris = this.makeUriArray(value.display_name);\n\n        if (value.attributes != null) {\n          cipher.login.username =\n            value.attributes != null\n              ? this.getValueOrDefault(value.attributes.username_value)\n              : null;\n          for (const attr in value.attributes) {\n            if (\n              !value.attributes.hasOwnProperty(attr) || // eslint-disable-line\n              attr === \"username_value\" ||\n              attr === \"xdg:schema\"\n            ) {\n              continue;\n            }\n            this.processKvp(cipher, attr, value.attributes[attr]);\n          }\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst NotesHeader = \"Notes\\n\\n\";\nconst ApplicationsHeader = \"Applications\\n\\n\";\nconst WebsitesHeader = \"Websites\\n\\n\";\nconst Delimiter = \"\\n---\\n\";\n\nexport class KasperskyTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n\n    let notesData: string;\n    let applicationsData: string;\n    let websitesData: string;\n    let workingData = this.splitNewLine(data).join(\"\\n\");\n\n    if (workingData.indexOf(NotesHeader) !== -1) {\n      const parts = workingData.split(NotesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        notesData = parts[1];\n      }\n    }\n    if (workingData.indexOf(ApplicationsHeader) !== -1) {\n      const parts = workingData.split(ApplicationsHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        applicationsData = parts[1];\n      }\n    }\n    if (workingData.indexOf(WebsitesHeader) === 0) {\n      const parts = workingData.split(WebsitesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        websitesData = parts[1];\n      }\n    }\n\n    const notes = this.parseDataCategory(notesData);\n    const applications = this.parseDataCategory(applicationsData);\n    const websites = this.parseDataCategory(websitesData);\n\n    notes.forEach((n) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(n.get(\"Name\"));\n      cipher.notes = this.getValueOrDefault(n.get(\"Text\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    websites.concat(applications).forEach((w) => {\n      const cipher = this.initLoginCipher();\n      const nameKey = w.has(\"Website name\") ? \"Website name\" : \"Application\";\n      cipher.name = this.getValueOrDefault(w.get(nameKey), \"\");\n      if (!this.isNullOrWhitespace(w.get(\"Login name\"))) {\n        if (!this.isNullOrWhitespace(cipher.name)) {\n          cipher.name += \": \";\n        }\n        cipher.name += w.get(\"Login name\");\n      }\n      cipher.notes = this.getValueOrDefault(w.get(\"Comment\"));\n      if (w.has(\"Website URL\")) {\n        cipher.login.uris = this.makeUriArray(w.get(\"Website URL\"));\n      }\n      cipher.login.username = this.getValueOrDefault(w.get(\"Login\"));\n      cipher.login.password = this.getValueOrDefault(w.get(\"Password\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseDataCategory(data: string): Map<string, string>[] {\n    if (this.isNullOrWhitespace(data) || data.indexOf(Delimiter) === -1) {\n      return [];\n    }\n    const items: Map<string, string>[] = [];\n    data.split(Delimiter).forEach((p) => {\n      if (p.indexOf(\"\\n\") === -1) {\n        return;\n      }\n      const item = new Map<string, string>();\n      let itemComment: string;\n      let itemCommentKey: string;\n      p.split(\"\\n\").forEach((l) => {\n        if (itemComment != null) {\n          itemComment += \"\\n\" + l;\n          return;\n        }\n        const colonIndex = l.indexOf(\":\");\n        let key: string;\n        let val: string;\n        if (colonIndex === -1) {\n          return;\n        } else {\n          key = l.substring(0, colonIndex);\n          if (l.length > colonIndex + 1) {\n            val = l.substring(colonIndex + 2);\n          }\n        }\n        if (key != null) {\n          item.set(key, val);\n        }\n        if (key === \"Comment\" || key === \"Text\") {\n          itemComment = val;\n          itemCommentKey = key;\n        }\n      });\n      if (itemComment != null && itemCommentKey != null) {\n        item.set(itemCommentKey, itemComment);\n      }\n      if (item.size === 0) {\n        return;\n      }\n      items.push(item);\n    });\n    return items;\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePass2XmlImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    //Note: The doc.querySelector(\"KeePassFile > Root > Group\") no longers works on node and we have to breakdown the query by nodes\n    const KeePassFileNode = doc.querySelector(\"KeePassFile\");\n\n    if (KeePassFileNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const RootNode = KeePassFileNode.querySelector(\"Root\");\n    if (RootNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const rootGroup = RootNode.querySelector(\"Group\");\n    if (rootGroup == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root > Group` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    this.traverse(rootGroup, true, \"\");\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  traverse(node: Element, isRootNode: boolean, groupPrefixName: string) {\n    const folderIndex = this.result.folders.length;\n    let groupName = groupPrefixName;\n\n    if (!isRootNode) {\n      if (groupName !== \"\") {\n        groupName += \"/\";\n      }\n      const nameEl = this.querySelectorDirectChild(node, \"Name\");\n      groupName += nameEl == null ? \"-\" : nameEl.textContent;\n      const folder = new FolderView();\n      folder.name = groupName;\n      this.result.folders.push(folder);\n    }\n\n    this.querySelectorAllDirectChild(node, \"Entry\").forEach((entry) => {\n      const cipherIndex = this.result.ciphers.length;\n\n      const cipher = this.initLoginCipher();\n      this.querySelectorAllDirectChild(entry, \"String\").forEach((entryString) => {\n        const valueEl = this.querySelectorDirectChild(entryString, \"Value\");\n        const value = valueEl != null ? valueEl.textContent : null;\n        if (this.isNullOrWhitespace(value)) {\n          return;\n        }\n        const keyEl = this.querySelectorDirectChild(entryString, \"Key\");\n        const key = keyEl != null ? keyEl.textContent : null;\n\n        if (key === \"URL\") {\n          cipher.login.uris = this.makeUriArray(value);\n        } else if (key === \"UserName\") {\n          cipher.login.username = value;\n        } else if (key === \"Password\") {\n          cipher.login.password = value;\n        } else if (key === \"otp\") {\n          cipher.login.totp = value.replace(\"key=\", \"\");\n        } else if (key === \"Title\") {\n          cipher.name = value;\n        } else if (key === \"Notes\") {\n          cipher.notes += value + \"\\n\";\n        } else {\n          let type = FieldType.Text;\n          const attrs = valueEl.attributes as any;\n          if (\n            attrs.length > 0 &&\n            attrs.ProtectInMemory != null &&\n            attrs.ProtectInMemory.value === \"True\"\n          ) {\n            type = FieldType.Hidden;\n          }\n          this.processKvp(cipher, key, value, type);\n        }\n      });\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n\n      if (!isRootNode) {\n        this.result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    this.querySelectorAllDirectChild(node, \"Group\").forEach((group) => {\n      this.traverse(group, false, groupName);\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePassXCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(value.Title)) {\n        return;\n      }\n\n      value.Group =\n        !this.isNullOrWhitespace(value.Group) && value.Group.startsWith(\"Root/\")\n          ? value.Group.replace(\"Root/\", \"\")\n          : value.Group;\n      const groupName = !this.isNullOrWhitespace(value.Group) ? value.Group : null;\n      this.processFolder(result, groupName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class KeeperCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 6) {\n        return;\n      }\n\n      this.processFolder(result, value[0]);\n      const cipher = this.initLoginCipher();\n\n      const notes = this.getValueOrDefault(value[5]);\n      if (notes) {\n        cipher.notes = `${notes}\\n`;\n      }\n\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[4]);\n\n      if (value.length > 7) {\n        // we have some custom fields.\n        for (let i = 7; i < value.length; i = i + 2) {\n          if (value[i] == \"TFC:Keeper\") {\n            cipher.login.totp = value[i + 1];\n          } else {\n            this.processKvp(cipher, value[i], value[i + 1]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LastPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipherIndex = result.ciphers.length;\n      let folderIndex = result.folders.length;\n      let grouping = value.grouping;\n      if (grouping != null) {\n        // eslint-disable-next-line\n        grouping = grouping.replace(/\\\\/g, \"/\").replace(/[\\x00-\\x1F\\x7F-\\x9F]/g, \"\");\n      }\n      const hasFolder = this.getValueOrDefault(grouping, \"(none)\") !== \"(none)\";\n      let addFolder = hasFolder;\n\n      if (hasFolder) {\n        for (let i = 0; i < result.folders.length; i++) {\n          if (result.folders[i].name === grouping) {\n            addFolder = false;\n            folderIndex = i;\n            break;\n          }\n        }\n      }\n\n      const cipher = this.buildBaseCipher(value);\n      if (cipher.type === CipherType.Login) {\n        cipher.notes = this.getValueOrDefault(value.extra);\n        cipher.login = new LoginView();\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.totp);\n      } else if (cipher.type === CipherType.SecureNote) {\n        this.parseSecureNote(value, cipher);\n      } else if (cipher.type === CipherType.Card) {\n        cipher.card = this.parseCard(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n      } else if (cipher.type === CipherType.Identity) {\n        cipher.identity = this.parseIdentity(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n        if (!this.isNullOrWhitespace(value.ccnum)) {\n          // there is a card on this identity too\n          const cardCipher = this.buildBaseCipher(value);\n          cardCipher.identity = null;\n          cardCipher.type = CipherType.Card;\n          cardCipher.card = this.parseCard(value);\n          result.ciphers.push(cardCipher);\n        }\n      }\n\n      result.ciphers.push(cipher);\n\n      if (addFolder) {\n        const f = new FolderView();\n        f.name = grouping;\n        result.folders.push(f);\n      }\n      if (hasFolder) {\n        result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private buildBaseCipher(value: any) {\n    const cipher = new CipherView();\n    // eslint-disable-next-line\n    if (value.hasOwnProperty(\"profilename\") && value.hasOwnProperty(\"profilelanguage\")) {\n      // form fill\n      cipher.favorite = false;\n      cipher.name = this.getValueOrDefault(value.profilename, \"--\");\n      cipher.type = CipherType.Card;\n\n      if (\n        !this.isNullOrWhitespace(value.title) ||\n        !this.isNullOrWhitespace(value.firstname) ||\n        !this.isNullOrWhitespace(value.lastname) ||\n        !this.isNullOrWhitespace(value.address1) ||\n        !this.isNullOrWhitespace(value.phone) ||\n        !this.isNullOrWhitespace(value.username) ||\n        !this.isNullOrWhitespace(value.email)\n      ) {\n        cipher.type = CipherType.Identity;\n      }\n    } else {\n      // site or secure note\n      cipher.favorite = !this.organization && this.getValueOrDefault(value.fav, \"0\") === \"1\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.type = value.url === \"http://sn\" ? CipherType.SecureNote : CipherType.Login;\n    }\n    return cipher;\n  }\n\n  private parseCard(value: any): CardView {\n    const card = new CardView();\n    card.cardholderName = this.getValueOrDefault(value.ccname);\n    card.number = this.getValueOrDefault(value.ccnum);\n    card.code = this.getValueOrDefault(value.cccsc);\n    card.brand = this.getCardBrand(value.ccnum);\n\n    if (!this.isNullOrWhitespace(value.ccexp) && value.ccexp.indexOf(\"-\") > -1) {\n      const ccexpParts = (value.ccexp as string).split(\"-\");\n      if (ccexpParts.length > 1) {\n        card.expYear = ccexpParts[0];\n        card.expMonth = ccexpParts[1];\n        if (card.expMonth.length === 2 && card.expMonth[0] === \"0\") {\n          card.expMonth = card.expMonth[1];\n        }\n      }\n    }\n\n    return card;\n  }\n\n  private parseIdentity(value: any): IdentityView {\n    const identity = new IdentityView();\n    identity.title = this.getValueOrDefault(value.title);\n    identity.firstName = this.getValueOrDefault(value.firstname);\n    identity.middleName = this.getValueOrDefault(value.middlename);\n    identity.lastName = this.getValueOrDefault(value.lastname);\n    identity.username = this.getValueOrDefault(value.username);\n    identity.company = this.getValueOrDefault(value.company);\n    identity.ssn = this.getValueOrDefault(value.ssn);\n    identity.address1 = this.getValueOrDefault(value.address1);\n    identity.address2 = this.getValueOrDefault(value.address2);\n    identity.address3 = this.getValueOrDefault(value.address3);\n    identity.city = this.getValueOrDefault(value.city);\n    identity.state = this.getValueOrDefault(value.state);\n    identity.postalCode = this.getValueOrDefault(value.zip);\n    identity.country = this.getValueOrDefault(value.country);\n    identity.email = this.getValueOrDefault(value.email);\n    identity.phone = this.getValueOrDefault(value.phone);\n\n    if (!this.isNullOrWhitespace(identity.title)) {\n      identity.title = identity.title.charAt(0).toUpperCase() + identity.title.slice(1);\n    }\n\n    return identity;\n  }\n\n  private parseSecureNote(value: any, cipher: CipherView) {\n    const extraParts = this.splitNewLine(value.extra);\n    let processedNote = false;\n\n    if (extraParts.length) {\n      const typeParts = extraParts[0].split(\":\");\n      if (\n        typeParts.length > 1 &&\n        typeParts[0] === \"NoteType\" &&\n        (typeParts[1] === \"Credit Card\" || typeParts[1] === \"Address\")\n      ) {\n        if (typeParts[1] === \"Credit Card\") {\n          const mappedData = this.parseSecureNoteMapping<CardView>(cipher, extraParts, {\n            Number: \"number\",\n            \"Name on Card\": \"cardholderName\",\n            \"Security Code\": \"code\",\n            // LP provides date in a format like 'June,2020'\n            // Store in expMonth, then parse and modify\n            \"Expiration Date\": \"expMonth\",\n          });\n\n          if (this.isNullOrWhitespace(mappedData.expMonth) || mappedData.expMonth === \",\") {\n            // No expiration data\n            mappedData.expMonth = undefined;\n          } else {\n            const [monthString, year] = mappedData.expMonth.split(\",\");\n            // Parse month name into number\n            if (!this.isNullOrWhitespace(monthString)) {\n              const month = new Date(Date.parse(monthString.trim() + \" 1, 2012\")).getMonth() + 1;\n              if (isNaN(month)) {\n                mappedData.expMonth = undefined;\n              } else {\n                mappedData.expMonth = month.toString();\n              }\n            } else {\n              mappedData.expMonth = undefined;\n            }\n            if (!this.isNullOrWhitespace(year)) {\n              mappedData.expYear = year;\n            }\n          }\n\n          cipher.type = CipherType.Card;\n          cipher.card = mappedData;\n        } else if (typeParts[1] === \"Address\") {\n          const mappedData = this.parseSecureNoteMapping<IdentityView>(cipher, extraParts, {\n            Title: \"title\",\n            \"First Name\": \"firstName\",\n            \"Last Name\": \"lastName\",\n            \"Middle Name\": \"middleName\",\n            Company: \"company\",\n            \"Address 1\": \"address1\",\n            \"Address 2\": \"address2\",\n            \"Address 3\": \"address3\",\n            \"City / Town\": \"city\",\n            State: \"state\",\n            \"Zip / Postal Code\": \"postalCode\",\n            Country: \"country\",\n            \"Email Address\": \"email\",\n            Username: \"username\",\n          });\n          cipher.type = CipherType.Identity;\n          cipher.identity = mappedData;\n        }\n        processedNote = true;\n      }\n    }\n\n    if (!processedNote) {\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n      cipher.notes = this.getValueOrDefault(value.extra);\n    }\n  }\n\n  private parseSecureNoteMapping<T>(cipher: CipherView, extraParts: string[], map: any): T {\n    const dataObj: any = {};\n\n    let processingNotes = false;\n    extraParts.forEach((extraPart) => {\n      let key: string = null;\n      let val: string = null;\n      if (!processingNotes) {\n        if (this.isNullOrWhitespace(extraPart)) {\n          return;\n        }\n        const colonIndex = extraPart.indexOf(\":\");\n        if (colonIndex === -1) {\n          key = extraPart;\n        } else {\n          key = extraPart.substring(0, colonIndex);\n          if (extraPart.length > colonIndex) {\n            val = extraPart.substring(colonIndex + 1);\n          }\n        }\n        if (this.isNullOrWhitespace(key) || this.isNullOrWhitespace(val) || key === \"NoteType\") {\n          return;\n        }\n      }\n\n      if (processingNotes) {\n        cipher.notes += \"\\n\" + extraPart;\n      } else if (key === \"Notes\") {\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes += \"\\n\" + val;\n        } else {\n          cipher.notes = val;\n        }\n        processingNotes = true;\n        // eslint-disable-next-line\n      } else if (map.hasOwnProperty(key)) {\n        dataObj[map[key]] = val;\n      } else {\n        this.processKvp(cipher, key, val);\n      }\n    });\n\n    return dataObj;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LogMeOnceCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 4) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[1]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MeldiumCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.DisplayName, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.login.username = this.getValueOrDefault(value.UserName);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MSecureCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      const folderName =\n        this.getValueOrDefault(value[0], \"Unassigned\") !== \"Unassigned\" ? value[0] : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[2], \"--\");\n\n      if (value[1] === \"Web Logins\" || value[1] === \"Login\") {\n        cipher.login.uris = this.makeUriArray(value[4]);\n        cipher.login.username = this.getValueOrDefault(value[5]);\n        cipher.login.password = this.getValueOrDefault(value[6]);\n        cipher.notes = !this.isNullOrWhitespace(value[3]) ? value[3].split(\"\\\\n\").join(\"\\n\") : null;\n      } else if (value.length > 3) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        for (let i = 3; i < value.length; i++) {\n          if (!this.isNullOrWhitespace(value[i])) {\n            cipher.notes += value[i] + \"\\n\";\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(value[1]) && cipher.type !== CipherType.Login) {\n        cipher.name = value[1] + \": \" + cipher.name;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst mappedBaseColumns = [\"nickname\", \"additionalInfo\"];\nconst _mappedUserAccountColumns = new Set(\n  mappedBaseColumns.concat([\"url\", \"username\", \"password\", \"twofaSecret\"])\n);\nconst _mappedCreditCardColumns = new Set(\n  mappedBaseColumns.concat([\"cardNumber\", \"cardName\", \"exp_month\", \"exp_year\", \"cvv\"])\n);\n\nconst _mappedIdentityColumns = new Set(\n  mappedBaseColumns.concat([\n    \"title\",\n    \"firstName\",\n    \"middleName\",\n    \"lastName\",\n    \"email\",\n    \"firstAddressLine\",\n    \"secondAddressLine\",\n    \"city\",\n    \"country\",\n    \"zipCode\",\n  ])\n);\n\nconst _mappedIdCardColumns = new Set(mappedBaseColumns.concat([\"idName\", \"idNumber\", \"idCountry\"]));\n\nconst _mappedTwoFaColumns = new Set(mappedBaseColumns.concat([\"authToken\"]));\n\nconst _mappedUserNoteColumns = new Set(mappedBaseColumns.concat([\"content\"]));\n\nexport class MykiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.nickname, \"--\");\n      cipher.notes = this.getValueOrDefault(value.additionalInfo);\n\n      if (value.url !== undefined) {\n        // Accounts\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.twofaSecret);\n\n        this.importUnmappedFields(cipher, value, _mappedUserAccountColumns);\n      } else if (value.authToken !== undefined) {\n        // TwoFA\n        cipher.login.totp = this.getValueOrDefault(value.authToken);\n\n        this.importUnmappedFields(cipher, value, _mappedTwoFaColumns);\n      } else if (value.cardNumber !== undefined) {\n        // Cards\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.expMonth = this.getValueOrDefault(value.exp_month);\n        cipher.card.expYear = this.getValueOrDefault(value.exp_year);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n\n        this.importUnmappedFields(cipher, value, _mappedCreditCardColumns);\n      } else if (value.firstName !== undefined) {\n        // Identities\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        cipher.identity.title = this.getValueOrDefault(value.title);\n        cipher.identity.firstName = this.getValueOrDefault(value.firstName);\n        cipher.identity.middleName = this.getValueOrDefault(value.middleName);\n        cipher.identity.lastName = this.getValueOrDefault(value.lastName);\n        cipher.identity.phone = this.getValueOrDefault(value.number);\n        cipher.identity.email = this.getValueOrDefault(value.email);\n        cipher.identity.address1 = this.getValueOrDefault(value.firstAddressLine);\n        cipher.identity.address2 = this.getValueOrDefault(value.secondAddressLine);\n        cipher.identity.city = this.getValueOrDefault(value.city);\n        cipher.identity.country = this.getValueOrDefault(value.country);\n        cipher.identity.postalCode = this.getValueOrDefault(value.zipCode);\n\n        this.importUnmappedFields(cipher, value, _mappedIdentityColumns);\n      } else if (value.idType !== undefined) {\n        // IdCards\n\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        this.processFullName(cipher, value.idName);\n        cipher.identity.country = this.getValueOrDefault(value.idCountry);\n\n        switch (value.idType) {\n          // case \"Driver's License\":\n          // case \"ID Card\":\n          // case \"Outdoor License\":\n          // case \"Software License\":\n          // case \"Tax Number\":\n          // case \"Bank Account\":\n          // case \"Insurance Card\":\n          // case \"Health Card\":\n          // case \"Membership\":\n          // case \"Database\":\n          // case \"Reward Program\":\n          // case \"Tour Visa\":\n          case \"Passport\":\n            cipher.identity.passportNumber = value.idNumber;\n            break;\n          case \"Social Security\":\n            cipher.identity.ssn = value.idNumber;\n            break;\n          default:\n            cipher.identity.licenseNumber = value.idNumber;\n            break;\n        }\n\n        this.importUnmappedFields(cipher, value, _mappedIdCardColumns);\n      } else if (value.content !== undefined) {\n        // Notes\n        cipher.secureNote = new SecureNoteView();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.notes = this.getValueOrDefault(value.content);\n\n        this.importUnmappedFields(cipher, value, _mappedUserNoteColumns);\n      } else {\n        return;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\ntype nodePassCsvParsed = {\n  name: string;\n  url: string;\n  username: string;\n  password: string;\n  note: string;\n  cardholdername: string;\n  cardnumber: string;\n  cvc: string;\n  expirydate: string;\n  zipcode: string;\n  folder: string;\n  full_name: string;\n  phone_number: string;\n  email: string;\n  address1: string;\n  address2: string;\n  city: string;\n  country: string;\n  state: string;\n};\n\nexport class NordPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: nodePassCsvParsed[] = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((record) => {\n      const recordType = this.evaluateType(record);\n      if (recordType === undefined) {\n        return;\n      }\n\n      if (!this.organization) {\n        this.processFolder(result, record.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.name = this.getValueOrDefault(record.name, \"--\");\n      cipher.notes = this.getValueOrDefault(record.note);\n\n      switch (recordType) {\n        case CipherType.Login:\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.username = this.getValueOrDefault(record.username);\n          cipher.login.password = this.getValueOrDefault(record.password);\n          cipher.login.uris = this.makeUriArray(record.url);\n          break;\n        case CipherType.Card:\n          cipher.type = CipherType.Card;\n          cipher.card.cardholderName = this.getValueOrDefault(record.cardholdername);\n          cipher.card.number = this.getValueOrDefault(record.cardnumber);\n          cipher.card.code = this.getValueOrDefault(record.cvc);\n          cipher.card.brand = this.getCardBrand(cipher.card.number);\n          this.setCardExpiration(cipher, record.expirydate);\n          break;\n\n        case CipherType.Identity:\n          cipher.type = CipherType.Identity;\n\n          this.processFullName(cipher, this.getValueOrDefault(record.full_name));\n          cipher.identity.address1 = this.getValueOrDefault(record.address1);\n          cipher.identity.address2 = this.getValueOrDefault(record.address2);\n          cipher.identity.city = this.getValueOrDefault(record.city);\n          cipher.identity.state = this.getValueOrDefault(record.state);\n          cipher.identity.postalCode = this.getValueOrDefault(record.zipcode);\n          cipher.identity.country = this.getValueOrDefault(record.country);\n          if (cipher.identity.country != null) {\n            cipher.identity.country = cipher.identity.country.toUpperCase();\n          }\n          cipher.identity.email = this.getValueOrDefault(record.email);\n          cipher.identity.phone = this.getValueOrDefault(record.phone_number);\n          break;\n        case CipherType.SecureNote:\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default:\n          break;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private evaluateType(record: nodePassCsvParsed): CipherType {\n    if (!this.isNullOrWhitespace(record.username)) {\n      return CipherType.Login;\n    }\n\n    if (!this.isNullOrWhitespace(record.cardnumber)) {\n      return CipherType.Card;\n    }\n\n    if (!this.isNullOrWhitespace(record.full_name)) {\n      return CipherType.Identity;\n    }\n\n    if (!this.isNullOrWhitespace(record.note)) {\n      return CipherType.SecureNote;\n    }\n\n    return undefined;\n  }\n}\n","export interface ExportData {\n  accounts?: AccountsEntity[] | null;\n}\nexport interface AccountsEntity {\n  attrs: AccountAttributes;\n  vaults?: VaultsEntity[] | null;\n}\nexport interface AccountAttributes {\n  accountName: string;\n  name: string;\n  avatar: string;\n  email: string;\n  uuid: string;\n  domain: string;\n}\nexport interface VaultsEntity {\n  attrs: VaultAttributes;\n  items?: Item[] | null;\n}\nexport interface VaultAttributes {\n  uuid: string;\n  desc: string;\n  avatar: string;\n  name: string;\n  type: string;\n}\n\nexport enum CategoryEnum {\n  Login = \"001\",\n  CreditCard = \"002\",\n  SecureNote = \"003\",\n  Identity = \"004\",\n  Password = \"005\",\n  Document = \"006\",\n  SoftwareLicense = \"100\",\n  BankAccount = \"101\",\n  Database = \"102\",\n  DriversLicense = \"103\",\n  OutdoorLicense = \"104\",\n  Membership = \"105\",\n  Passport = \"106\",\n  RewardsProgram = \"107\",\n  SocialSecurityNumber = \"108\",\n  WirelessRouter = \"109\",\n  Server = \"110\",\n  EmailAccount = \"111\",\n  API_Credential = \"112\",\n  MedicalRecord = \"113\",\n}\n\nexport interface Item {\n  uuid: string;\n  favIndex: number;\n  createdAt: number;\n  updatedAt: number;\n  trashed?: boolean;\n  categoryUuid: string;\n  details: Details;\n  overview: Overview;\n}\nexport interface Details {\n  loginFields?: (LoginFieldsEntity | null)[] | null;\n  notesPlain?: string | null;\n  sections?: (SectionsEntity | null)[] | null;\n  passwordHistory?: (PasswordHistoryEntity | null)[] | null;\n  documentAttributes?: DocumentAttributes | null;\n  password?: string | null;\n}\n\nexport enum LoginFieldTypeEnum {\n  TextOrHtml = \"T\",\n  EmailAddress = \"E\",\n  URL = \"U\",\n  Number = \"N\",\n  Password = \"P\",\n  TextArea = \"A\",\n  PhoneNumber = \"T\",\n  CheckBox = \"C\",\n}\nexport interface LoginFieldsEntity {\n  value: string;\n  id: string;\n  name: string;\n  fieldType: LoginFieldTypeEnum | string;\n  designation?: string | null;\n}\nexport interface SectionsEntity {\n  title: string;\n  name?: string | null;\n  fields?: FieldsEntity[] | null;\n}\nexport interface FieldsEntity {\n  title: string;\n  id: string;\n  value: Value;\n  indexAtSource: number;\n  guarded: boolean;\n  multiline: boolean;\n  dontGenerate: boolean;\n  placeholder?: string;\n  inputTraits: InputTraits;\n  clipboardFilter?: string | null;\n}\nexport interface Value {\n  totp?: string | null;\n  date?: number | null;\n  string?: string | null;\n  concealed?: string | null;\n  email?: Email | null;\n  phone?: string | null;\n  menu?: string | null;\n  gender?: string | null;\n  monthYear?: number | null;\n  url?: string | null;\n  address?: Address | null;\n  creditCardType?: string | null;\n  creditCardNumber?: string | null;\n  reference?: string | null;\n}\n\nexport interface Email {\n  email_address: string;\n  provider: string;\n}\n\nexport interface Address {\n  street: string;\n  city: string;\n  country: string;\n  zip: string;\n  state: string;\n}\nexport interface InputTraits {\n  keyboard: string;\n  correction: string;\n  capitalization: string;\n}\nexport interface PasswordHistoryEntity {\n  value: string;\n  time: number;\n}\nexport interface DocumentAttributes {\n  fileName: string;\n  documentId: string;\n  decryptedSize: number;\n}\nexport interface Overview {\n  subtitle: string;\n  title: string;\n  url: string;\n  urls?: UrlsEntity[] | null;\n  ps?: number | null;\n  pbe?: number | null;\n  pgrng?: boolean | null;\n  tags?: string[] | null;\n}\nexport interface UrlsEntity {\n  label: string;\n  url: string;\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class OnePassword1PifImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    data.split(this.newLineRegex).forEach((line) => {\n      if (this.isNullOrWhitespace(line) || line[0] !== \"{\") {\n        return;\n      }\n      const item = JSON.parse(line);\n      if (item.trashed === true) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n\n      if (this.isNullOrWhitespace(item.hmac)) {\n        this.processStandardItem(item, cipher);\n      } else {\n        this.processWinOpVaultItem(item, cipher);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processWinOpVaultItem(item: any, cipher: CipherView) {\n    if (item.overview != null) {\n      cipher.name = this.getValueOrDefault(item.overview.title);\n      if (item.overview.URLs != null) {\n        const urls: string[] = [];\n        item.overview.URLs.forEach((url: any) => {\n          if (!this.isNullOrWhitespace(url.u)) {\n            urls.push(url.u);\n          }\n        });\n        cipher.login.uris = this.makeUriArray(urls);\n      }\n    }\n\n    if (item.details != null) {\n      if (item.details.passwordHistory != null) {\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n      }\n      if (\n        !this.isNullOrWhitespace(item.details.ccnum) ||\n        !this.isNullOrWhitespace(item.details.cvv)\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      } else if (\n        !this.isNullOrWhitespace(item.details.firstname) ||\n        !this.isNullOrWhitespace(item.details.address1)\n      ) {\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n      }\n      if (cipher.type === CipherType.Login && !this.isNullOrWhitespace(item.details.password)) {\n        cipher.login.password = item.details.password;\n      }\n      if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n        cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (item.details.fields != null) {\n        this.parseFields(item.details.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.details.sections != null) {\n        item.details.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private processStandardItem(item: any, cipher: CipherView) {\n    cipher.favorite = item.openContents && item.openContents.faveIndex ? true : false;\n    cipher.name = this.getValueOrDefault(item.title);\n\n    if (item.typeName === \"securenotes.SecureNote\") {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    } else if (item.typeName === \"wallet.financial.CreditCard\") {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    } else if (item.typeName === \"identities.Identity\") {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    } else {\n      cipher.login.uris = this.makeUriArray(item.location);\n    }\n\n    if (item.secureContents != null) {\n      if (item.secureContents.passwordHistory != null) {\n        this.parsePasswordHistory(item.secureContents.passwordHistory, cipher);\n      }\n      if (!this.isNullOrWhitespace(item.secureContents.notesPlain)) {\n        cipher.notes = item.secureContents.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (cipher.type === CipherType.Login) {\n        if (!this.isNullOrWhitespace(item.secureContents.password)) {\n          cipher.login.password = item.secureContents.password;\n        }\n        if (item.secureContents.URLs != null) {\n          const urls: string[] = [];\n          item.secureContents.URLs.forEach((u: any) => {\n            if (!this.isNullOrWhitespace(u.url)) {\n              urls.push(u.url);\n            }\n          });\n          if (urls.length > 0) {\n            cipher.login.uris = this.makeUriArray(urls);\n          }\n        }\n      }\n      if (item.secureContents.fields != null) {\n        this.parseFields(item.secureContents.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.secureContents.sections != null) {\n        item.secureContents.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private parsePasswordHistory(items: any[], cipher: CipherView) {\n    const maxSize = items.length > 5 ? 5 : items.length;\n    cipher.passwordHistory = items\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n\n  private parseFields(\n    fields: any[],\n    cipher: CipherView,\n    designationKey: string,\n    valueKey: string,\n    nameKey: string\n  ) {\n    fields.forEach((field: any) => {\n      if (field[valueKey] == null || field[valueKey].toString().trim() === \"\") {\n        return;\n      }\n\n      // TODO: when date FieldType exists, store this as a date field type instead of formatted Text if k is 'date'\n      const fieldValue =\n        field.k === \"date\"\n          ? new Date(field[valueKey] * 1000).toUTCString()\n          : field[valueKey].toString();\n      const fieldDesignation =\n        field[designationKey] != null ? field[designationKey].toString() : null;\n\n      if (cipher.type === CipherType.Login) {\n        if (this.isNullOrWhitespace(cipher.login.username) && fieldDesignation === \"username\") {\n          cipher.login.username = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.password) &&\n          fieldDesignation === \"password\"\n        ) {\n          cipher.login.password = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.totp) &&\n          fieldDesignation != null &&\n          fieldDesignation.startsWith(\"TOTP_\")\n        ) {\n          cipher.login.totp = fieldValue;\n          return;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.isNullOrWhitespace(cipher.card.number) && fieldDesignation === \"ccnum\") {\n          cipher.card.number = fieldValue;\n          cipher.card.brand = this.getCardBrand(fieldValue);\n          return;\n        } else if (this.isNullOrWhitespace(cipher.card.code) && fieldDesignation === \"cvv\") {\n          cipher.card.code = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.cardholderName) &&\n          fieldDesignation === \"cardholder\"\n        ) {\n          cipher.card.cardholderName = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.expiration) &&\n          fieldDesignation === \"expiry\" &&\n          fieldValue.length === 6\n        ) {\n          cipher.card.expMonth = (fieldValue as string).substr(4, 2);\n          if (cipher.card.expMonth[0] === \"0\") {\n            cipher.card.expMonth = cipher.card.expMonth.substr(1, 1);\n          }\n          cipher.card.expYear = (fieldValue as string).substr(0, 4);\n          return;\n        } else if (fieldDesignation === \"type\") {\n          // Skip since brand was determined from number above\n          return;\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        const identity = cipher.identity;\n        if (this.isNullOrWhitespace(identity.firstName) && fieldDesignation === \"firstname\") {\n          identity.firstName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.lastName) && fieldDesignation === \"lastname\") {\n          identity.lastName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.middleName) && fieldDesignation === \"initial\") {\n          identity.middleName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.phone) && fieldDesignation === \"defphone\") {\n          identity.phone = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.company) && fieldDesignation === \"company\") {\n          identity.company = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.email) && fieldDesignation === \"email\") {\n          identity.email = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.username) && fieldDesignation === \"username\") {\n          identity.username = fieldValue;\n          return;\n        } else if (fieldDesignation === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip } = field[valueKey];\n          identity.address1 = this.getValueOrDefault(street);\n          identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            identity.country = country.toUpperCase();\n          }\n          identity.postalCode = this.getValueOrDefault(zip);\n          return;\n        }\n      }\n\n      const fieldName = this.isNullOrWhitespace(field[nameKey]) ? \"no_name\" : field[nameKey];\n      if (\n        fieldName === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      const fieldType = field.k === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CategoryEnum,\n  Details,\n  ExportData,\n  FieldsEntity,\n  Item,\n  LoginFieldTypeEnum,\n  Overview,\n  PasswordHistoryEntity,\n  SectionsEntity,\n  UrlsEntity,\n  Value,\n  VaultsEntity,\n} from \"./types/onepassword-1pux-importer-types\";\n\nexport class OnePassword1PuxImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const exportData: ExportData = JSON.parse(data);\n\n    const account = exportData.accounts[0];\n    // TODO Add handling of multiple vaults\n    // const personalVaults = account.vaults[0].filter((v) => v.attrs.type === VaultAttributeTypeEnum.Personal);\n    account.vaults.forEach((vault: VaultsEntity) => {\n      vault.items.forEach((item: Item) => {\n        if (item.trashed === true) {\n          return;\n        }\n\n        const cipher = this.initLoginCipher();\n\n        const category = item.categoryUuid as CategoryEnum;\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.Password:\n          case CategoryEnum.WirelessRouter:\n          case CategoryEnum.Server:\n          case CategoryEnum.API_Credential:\n            cipher.type = CipherType.Login;\n            cipher.login = new LoginView();\n            break;\n          case CategoryEnum.CreditCard:\n          case CategoryEnum.BankAccount:\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            break;\n          case CategoryEnum.SecureNote:\n          case CategoryEnum.SoftwareLicense:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.MedicalRecord:\n            // case CategoryEnum.Document:\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case CategoryEnum.Identity:\n          case CategoryEnum.DriversLicense:\n          case CategoryEnum.OutdoorLicense:\n          case CategoryEnum.Membership:\n          case CategoryEnum.Passport:\n          case CategoryEnum.RewardsProgram:\n          case CategoryEnum.SocialSecurityNumber:\n            cipher.type = CipherType.Identity;\n            cipher.identity = new IdentityView();\n            break;\n          default:\n            break;\n        }\n\n        cipher.favorite = item.favIndex === 1 ? true : false;\n\n        this.processOverview(item.overview, cipher);\n\n        this.processLoginFields(item, cipher);\n\n        this.processDetails(category, item.details, cipher);\n\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n\n        this.processSections(category, item.details.sections, cipher);\n\n        if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n          cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        this.result.ciphers.push(cipher);\n      });\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processOverview(overview: Overview, cipher: CipherView) {\n    if (overview == null) {\n      return;\n    }\n\n    cipher.name = this.getValueOrDefault(overview.title);\n\n    if (overview.urls != null) {\n      const urls: string[] = [];\n      overview.urls.forEach((url: UrlsEntity) => {\n        if (!this.isNullOrWhitespace(url.url)) {\n          urls.push(url.url);\n        }\n      });\n      cipher.login.uris = this.makeUriArray(urls);\n    }\n\n    if (overview.tags != null && overview.tags.length > 0) {\n      const folderName = this.capitalize(overview.tags[0]);\n      this.processFolder(this.result, folderName);\n    }\n  }\n\n  private capitalize(inputString: string): string {\n    return inputString.trim().replace(/\\w\\S*/g, (w) => w.replace(/^\\w/, (c) => c.toUpperCase()));\n  }\n\n  private processLoginFields(item: Item, cipher: CipherView) {\n    if (item.details == null) {\n      return;\n    }\n\n    if (item.details.loginFields == null || item.details.loginFields.length === 0) {\n      return;\n    }\n\n    item.details.loginFields.forEach((loginField) => {\n      if (loginField.designation === \"username\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.username = loginField.value;\n        return;\n      }\n\n      if (loginField.designation === \"password\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.password = loginField.value;\n        return;\n      }\n\n      let fieldValue = loginField.value;\n      let fieldType: FieldType = FieldType.Text;\n      switch (loginField.fieldType) {\n        case LoginFieldTypeEnum.Password:\n          fieldType = FieldType.Hidden;\n          break;\n        case LoginFieldTypeEnum.CheckBox:\n          fieldValue = loginField.value !== \"\" ? \"true\" : \"false\";\n          fieldType = FieldType.Boolean;\n          break;\n        default:\n          break;\n      }\n      this.processKvp(cipher, loginField.name, fieldValue, fieldType);\n    });\n  }\n\n  private processDetails(category: CategoryEnum, details: Details, cipher: CipherView) {\n    if (category !== CategoryEnum.Password) {\n      return;\n    }\n\n    if (details == null) {\n      return;\n    }\n    cipher.login.password = details.password;\n  }\n\n  private processSections(category: CategoryEnum, sections: SectionsEntity[], cipher: CipherView) {\n    if (sections == null || sections.length === 0) {\n      return;\n    }\n\n    sections.forEach((section: SectionsEntity) => {\n      if (section.fields == null) {\n        return;\n      }\n\n      this.parseSectionFields(category, section.fields, cipher);\n    });\n  }\n\n  private parseSectionFields(category: CategoryEnum, fields: FieldsEntity[], cipher: CipherView) {\n    fields.forEach((field: FieldsEntity) => {\n      const valueKey = Object.keys(field.value)[0];\n      const anyField = field as any;\n\n      if (\n        anyField.value == null ||\n        anyField.value[valueKey] == null ||\n        anyField.value[valueKey] === \"\"\n      ) {\n        return;\n      }\n\n      const fieldName = this.getFieldName(field.id, field.title);\n      const fieldValue = this.extractValue(field.value, valueKey);\n\n      if (cipher.type === CipherType.Login) {\n        if (this.fillLogin(field, fieldValue, cipher)) {\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.WirelessRouter:\n            break;\n\n          case CategoryEnum.Server:\n            if (this.isNullOrWhitespace(cipher.login.uri) && field.id === \"url\") {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              return;\n            }\n            break;\n\n          case CategoryEnum.API_Credential:\n            if (this.fillApiCredentials(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.fillCreditCard(field, fieldValue, cipher)) {\n          return;\n        }\n\n        if (category === CategoryEnum.BankAccount) {\n          if (this.fillBankAccount(field, fieldValue, cipher)) {\n            return;\n          }\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        if (this.fillIdentity(field, fieldValue, cipher, valueKey)) {\n          return;\n        }\n        if (valueKey === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip, state } = field.value.address;\n          cipher.identity.address1 = this.getValueOrDefault(street);\n          cipher.identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            cipher.identity.country = country.toUpperCase();\n          }\n          cipher.identity.postalCode = this.getValueOrDefault(zip);\n          cipher.identity.state = this.getValueOrDefault(state);\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Identity:\n            break;\n          case CategoryEnum.DriversLicense:\n            if (this.fillDriversLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.OutdoorLicense:\n            if (this.fillOutdoorLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Membership:\n            if (this.fillMembership(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Passport:\n            if (this.fillPassport(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.RewardsProgram:\n            if (this.fillRewardsProgram(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.SocialSecurityNumber:\n            if (this.fillSSN(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (valueKey === \"email\") {\n        // fieldValue is an object casted into a string, so access the plain value instead\n        const { email_address, provider } = field.value.email;\n        this.processKvp(cipher, fieldName, email_address, FieldType.Text);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return;\n      }\n\n      // Do not include a password field if it's already in the history\n      if (\n        field.title === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      // TODO ?? If one of the fields is marked as guarded, then activate Password-Reprompt for the entire item\n      if (field.guarded && cipher.reprompt === CipherRepromptType.None) {\n        cipher.reprompt = CipherRepromptType.Password;\n      }\n\n      const fieldType = valueKey === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n\n  private getFieldName(id: string, title: string): string {\n    if (this.isNullOrWhitespace(title)) {\n      return id;\n    }\n\n    // Naive approach of checking if the fields id is usable\n    if (id.length > 25 && RegExp(/[0-9]{2}[A-Z]{2}/, \"i\").test(id)) {\n      return title;\n    }\n    return id;\n  }\n\n  private extractValue(value: Value, valueKey: string): string {\n    if (valueKey === \"date\") {\n      return new Date(value.date * 1000).toUTCString();\n    }\n\n    if (valueKey === \"monthYear\") {\n      return value.monthYear.toString();\n    }\n\n    return (value as any)[valueKey];\n  }\n\n  private fillLogin(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.username) && fieldName === \"username\") {\n      cipher.login.username = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"password\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (\n      this.isNullOrWhitespace(cipher.login.totp) &&\n      field.id != null &&\n      field.id.startsWith(\"TOTP_\")\n    ) {\n      cipher.login.totp = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillApiCredentials(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"credential\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.uri) && fieldName === \"hostname\") {\n      cipher.login.uris = this.makeUriArray(fieldValue);\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillCreditCard(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.number) && field.id === \"ccnum\") {\n      cipher.card.number = fieldValue;\n      cipher.card.brand = this.getCardBrand(fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.code) && field.id === \"cvv\") {\n      cipher.card.code = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"cardholder\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.expiration) && field.id === \"expiry\") {\n      const monthYear: string = fieldValue.toString().trim();\n      cipher.card.expMonth = monthYear.substring(4, 6);\n      if (cipher.card.expMonth[0] === \"0\") {\n        cipher.card.expMonth = cipher.card.expMonth.substring(1, 2);\n      }\n      cipher.card.expYear = monthYear.substring(0, 4);\n      return true;\n    }\n\n    if (field.id === \"type\") {\n      // Skip since brand was determined from number above\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillBankAccount(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"owner\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillIdentity(\n    field: FieldsEntity,\n    fieldValue: string,\n    cipher: CipherView,\n    valueKey: string\n  ): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"firstname\") {\n      cipher.identity.firstName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.lastName) && field.id === \"lastname\") {\n      cipher.identity.lastName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.middleName) && field.id === \"initial\") {\n      cipher.identity.middleName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"defphone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.email)) {\n      if (valueKey === \"email\") {\n        const { email_address, provider } = field.value.email;\n        cipher.identity.email = this.getValueOrDefault(email_address);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return true;\n      }\n\n      if (field.id === \"email\") {\n        cipher.identity.email = fieldValue;\n        return true;\n      }\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.username) && field.id === \"username\") {\n      cipher.identity.username = fieldValue;\n      return true;\n    }\n    return false;\n  }\n\n  private fillDriversLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.address1) && field.id === \"address\") {\n      cipher.identity.address1 = fieldValue;\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.licenseNumber) && field.id === \"number\") {\n      cipher.identity.licenseNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillOutdoorLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillMembership(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"org_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"phone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillPassport(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO Iso\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"issuing_country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.passportNumber) && field.id === \"number\") {\n      cipher.identity.passportNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillRewardsProgram(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillSSN(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.ssn) && field.id === \"number\") {\n      cipher.identity.ssn = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private parsePasswordHistory(historyItems: PasswordHistoryEntity[], cipher: CipherView) {\n    if (historyItems == null || historyItems.length === 0) {\n      return;\n    }\n\n    const maxSize = historyItems.length > 5 ? 5 : historyItems.length;\n    cipher.passwordHistory = historyItems\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nexport class CipherImportContext {\n  lowerProperty: string;\n  constructor(public importRecord: any, public property: string, public cipher: CipherView) {\n    this.lowerProperty = property.toLowerCase();\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\n\nexport const IgnoredProperties = [\n  \"ainfo\",\n  \"autosubmit\",\n  \"notesplain\",\n  \"ps\",\n  \"scope\",\n  \"tags\",\n  \"title\",\n  \"uuid\",\n  \"notes\",\n];\n\nexport abstract class OnePasswordCsvImporter extends BaseImporter implements Importer {\n  protected loginPropertyParsers = [\n    this.setLoginUsername,\n    this.setLoginPassword,\n    this.setLoginUris,\n  ];\n  protected creditCardPropertyParsers = [\n    this.setCreditCardNumber,\n    this.setCreditCardVerification,\n    this.setCreditCardCardholderName,\n    this.setCreditCardExpiry,\n  ];\n  protected identityPropertyParsers = [\n    this.setIdentityFirstName,\n    this.setIdentityInitial,\n    this.setIdentityLastName,\n    this.setIdentityUserName,\n    this.setIdentityEmail,\n    this.setIdentityPhone,\n    this.setIdentityCompany,\n  ];\n\n  abstract setCipherType(value: any, cipher: CipherView): void;\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true, {\n      quoteChar: '\"',\n      escapeChar: \"\\\\\",\n    });\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(this.getProp(value, \"title\"))) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.getProp(value, \"title\"), \"--\");\n\n      this.setNotes(value, cipher);\n\n      this.setCipherType(value, cipher);\n\n      let altUsername: string = null;\n      for (const property in value) {\n        // eslint-disable-next-line\n        if (!value.hasOwnProperty(property) || this.isNullOrWhitespace(value[property])) {\n          continue;\n        }\n\n        const context = new CipherImportContext(value, property, cipher);\n        if (cipher.type === CipherType.Login && this.setKnownLoginValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Card && this.setKnownCreditCardValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Identity && this.setKnownIdentityValue(context)) {\n          continue;\n        }\n\n        altUsername = this.setUnknownValue(context, altUsername);\n      }\n\n      if (\n        cipher.type === CipherType.Login &&\n        !this.isNullOrWhitespace(altUsername) &&\n        this.isNullOrWhitespace(cipher.login.username) &&\n        altUsername.indexOf(\"://\") === -1\n      ) {\n        cipher.login.username = altUsername;\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  protected getProp(obj: any, name: string): any {\n    const lowerObj = Object.entries(obj).reduce((agg: any, entry: [string, any]) => {\n      agg[entry[0].toLowerCase()] = entry[1];\n      return agg;\n    }, {});\n    return lowerObj[name.toLowerCase()];\n  }\n\n  protected getPropByRegexp(obj: any, regexp: RegExp): any {\n    const matchingKeys = Object.keys(obj).reduce((agg: string[], key: string) => {\n      if (key.match(regexp)) {\n        agg.push(key);\n      }\n      return agg;\n    }, []);\n    if (matchingKeys.length === 0) {\n      return null;\n    } else {\n      return obj[matchingKeys[0]];\n    }\n  }\n\n  protected getPropIncluding(obj: any, name: string): any {\n    const includesMap = Object.keys(obj).reduce((agg: string[], entry: string) => {\n      if (entry.toLowerCase().includes(name.toLowerCase())) {\n        agg.push(entry);\n      }\n      return agg;\n    }, []);\n    if (includesMap.length === 0) {\n      return null;\n    } else {\n      return obj[includesMap[0]];\n    }\n  }\n\n  protected setNotes(importRecord: any, cipher: CipherView) {\n    cipher.notes =\n      this.getValueOrDefault(this.getProp(importRecord, \"notesPlain\"), \"\") +\n      \"\\n\" +\n      this.getValueOrDefault(this.getProp(importRecord, \"notes\"), \"\") +\n      \"\\n\";\n    cipher.notes.trim();\n  }\n\n  protected setKnownLoginValue(context: CipherImportContext): boolean {\n    return this.loginPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownCreditCardValue(context: CipherImportContext): boolean {\n    return this.creditCardPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownIdentityValue(context: CipherImportContext): boolean {\n    return this.identityPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setUnknownValue(context: CipherImportContext, altUsername: string): string {\n    if (\n      IgnoredProperties.indexOf(context.lowerProperty) === -1 &&\n      !context.lowerProperty.startsWith(\"section:\") &&\n      !context.lowerProperty.startsWith(\"section \")\n    ) {\n      if (altUsername == null && context.lowerProperty === \"email\") {\n        return context.importRecord[context.property];\n      } else if (\n        context.lowerProperty === \"created date\" ||\n        context.lowerProperty === \"modified date\"\n      ) {\n        const readableDate = new Date(\n          parseInt(context.importRecord[context.property], 10) * 1000\n        ).toUTCString();\n        this.processKvp(context.cipher, \"1Password \" + context.property, readableDate);\n        return null;\n      }\n      if (\n        context.lowerProperty.includes(\"password\") ||\n        context.lowerProperty.includes(\"key\") ||\n        context.lowerProperty.includes(\"secret\")\n      ) {\n        this.processKvp(\n          context.cipher,\n          context.property,\n          context.importRecord[context.property],\n          FieldType.Hidden\n        );\n      } else {\n        this.processKvp(context.cipher, context.property, context.importRecord[context.property]);\n      }\n    }\n    return null;\n  }\n\n  protected setIdentityFirstName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.firstName) &&\n      context.lowerProperty.includes(\"first name\")\n    ) {\n      context.cipher.identity.firstName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityInitial(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.middleName) &&\n      context.lowerProperty.includes(\"initial\")\n    ) {\n      context.cipher.identity.middleName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityLastName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.lastName) &&\n      context.lowerProperty.includes(\"last name\")\n    ) {\n      context.cipher.identity.lastName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityUserName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.username) &&\n      context.lowerProperty.includes(\"username\")\n    ) {\n      context.cipher.identity.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityCompany(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.company) &&\n      context.lowerProperty.includes(\"company\")\n    ) {\n      context.cipher.identity.company = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityPhone(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.phone) &&\n      context.lowerProperty.includes(\"default phone\")\n    ) {\n      context.cipher.identity.phone = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityEmail(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.email) &&\n      context.lowerProperty.includes(\"email\")\n    ) {\n      context.cipher.identity.email = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardNumber(context: CipherImportContext): boolean {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.number) &&\n      context.lowerProperty.includes(\"number\")\n    ) {\n      context.cipher.card.number = context.importRecord[context.property];\n      context.cipher.card.brand = this.getCardBrand(context.cipher.card.number);\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardVerification(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.code) &&\n      context.lowerProperty.includes(\"verification number\")\n    ) {\n      context.cipher.card.code = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardCardholderName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.cardholderName) &&\n      context.lowerProperty.includes(\"cardholder name\")\n    ) {\n      context.cipher.card.cardholderName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\") &&\n      context.importRecord[context.property].length === 7\n    ) {\n      context.cipher.card.expMonth = (context.importRecord[context.property] as string).substr(\n        0,\n        2\n      );\n      if (context.cipher.card.expMonth[0] === \"0\") {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = (context.importRecord[context.property] as string).substr(3, 4);\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginPassword(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.password) &&\n      context.lowerProperty === \"password\"\n    ) {\n      context.cipher.login.password = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUsername(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.username) &&\n      context.lowerProperty === \"username\"\n    ) {\n      context.cipher.login.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUris(context: CipherImportContext) {\n    if (\n      (context.cipher.login.uris == null || context.cipher.login.uris.length === 0) &&\n      context.lowerProperty === \"urls\"\n    ) {\n      const urls = context.importRecord[context.property].split(this.newLineRegex);\n      context.cipher.login.uris = this.makeUriArray(urls);\n      return true;\n    } else if (context.lowerProperty === \"url\") {\n      if (context.cipher.login.uris == null) {\n        context.cipher.login.uris = [];\n      }\n      context.cipher.login.uris.concat(this.makeUriArray(context.importRecord[context.property]));\n      return true;\n    }\n    return false;\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { IgnoredProperties, OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordMacCsvImporter extends OnePasswordCsvImporter implements Importer {\n  setCipherType(value: any, cipher: CipherView) {\n    const onePassType = this.getValueOrDefault(this.getProp(value, \"type\"), \"Login\");\n    switch (onePassType) {\n      case \"Credit Card\":\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Identity\":\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Login\":\n      case \"Secure Note\":\n        IgnoredProperties.push(\"type\");\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\nimport { OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordWinCsvImporter extends OnePasswordCsvImporter implements Importer {\n  constructor() {\n    super();\n    this.identityPropertyParsers.push(this.setIdentityAddress);\n  }\n\n  setCipherType(value: any, cipher: CipherView) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: number/i)) &&\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: expiry date/i))\n    ) {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    }\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: first name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: initial/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: last name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /internet \\d+: email/i))\n    ) {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    }\n  }\n\n  setIdentityAddress(context: CipherImportContext) {\n    if (context.lowerProperty.match(/address \\d+: address/i)) {\n      this.processKvp(context.cipher, \"address\", context.importRecord[context.property]);\n      return true;\n    }\n    return false;\n  }\n\n  setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\")\n    ) {\n      const expSplit = (context.importRecord[context.property] as string).split(\"/\");\n      context.cipher.card.expMonth = expSplit[0];\n      if (context.cipher.card.expMonth[0] === \"0\" && context.cipher.card.expMonth.length === 2) {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = expSplit[2].length > 4 ? expSplit[2].substr(0, 4) : expSplit[2];\n      return true;\n    }\n    return false;\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PadlockCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let headers: string[] = null;\n    results.forEach((value) => {\n      if (headers == null) {\n        headers = value.map((v: string) => v);\n        return;\n      }\n\n      if (value.length < 2 || value.length !== headers.length) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value[1])) {\n        if (this.organization) {\n          const tags = (value[1] as string).split(\",\");\n          tags.forEach((tag) => {\n            tag = tag.trim();\n            let addCollection = true;\n            let collectionIndex = result.collections.length;\n\n            for (let i = 0; i < result.collections.length; i++) {\n              if (result.collections[i].name === tag) {\n                addCollection = false;\n                collectionIndex = i;\n                break;\n              }\n            }\n\n            if (addCollection) {\n              const collection = new CollectionView();\n              collection.name = tag;\n              result.collections.push(collection);\n            }\n\n            result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n          });\n        } else {\n          const tags = (value[1] as string).split(\",\");\n          const tag = tags.length > 0 ? tags[0].trim() : null;\n          this.processFolder(result, tag);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      for (let i = 2; i < value.length; i++) {\n        const header = headers[i].trim().toLowerCase();\n        if (this.isNullOrWhitespace(value[i]) || this.isNullOrWhitespace(header)) {\n          continue;\n        }\n\n        if (this.usernameFieldNames.indexOf(header) > -1) {\n          cipher.login.username = value[i];\n        } else if (this.passwordFieldNames.indexOf(header) > -1) {\n          cipher.login.password = value[i];\n        } else if (this.uriFieldNames.indexOf(header) > -1) {\n          cipher.login.uris = this.makeUriArray(value[i]);\n        } else {\n          this.processKvp(cipher, headers[i], value[i]);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassKeepCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValue(\"category\", value));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValue(\"description\", value);\n      cipher.name = this.getValueOrDefault(this.getValue(\"title\", value), \"--\");\n      cipher.login.username = this.getValue(\"username\", value);\n      cipher.login.password = this.getValue(\"password\", value);\n      cipher.login.uris = this.makeUriArray(this.getValue(\"site\", value));\n      this.processKvp(cipher, \"Password 2\", this.getValue(\"password2\", value));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private getValue(key: string, value: any) {\n    return this.getValueOrDefault(value[key], this.getValueOrDefault(value[\" \" + key]));\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { PasskyJsonExport } from \"./passky-json-types\";\n\nexport class PasskyJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const passkyExport: PasskyJsonExport = JSON.parse(data);\n    if (\n      passkyExport == null ||\n      passkyExport.passwords == null ||\n      passkyExport.passwords.length === 0\n    ) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (passkyExport.encrypted == true) {\n      result.success = false;\n      result.errorMessage = \"Unable to import an encrypted passky backup.\";\n      return Promise.resolve(result);\n    }\n\n    passkyExport.passwords.forEach((record) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = record.website;\n      cipher.login.username = record.username;\n      cipher.login.password = record.password;\n\n      cipher.login.uris = this.makeUriArray(record.website);\n      cipher.notes = record.message;\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassmanJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((credential: any) => {\n      if (credential.tags != null && credential.tags.length > 0) {\n        const folderName = credential.tags[0].text;\n        this.processFolder(result, folderName);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = credential.label;\n\n      cipher.login.username = this.getValueOrDefault(credential.username);\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.url);\n      cipher.notes += this.getValueOrDefault(credential.description, \"\");\n      if (credential.otp != null) {\n        cipher.login.totp = this.getValueOrDefault(credential.otp.secret);\n      }\n\n      if (credential.custom_fields != null) {\n        credential.custom_fields.forEach((customField: any) => {\n          switch (customField.field_type) {\n            case \"text\":\n            case \"password\":\n              this.processKvp(cipher, customField.label, customField.value);\n              break;\n          }\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasspackCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const tagsJson = !this.isNullOrWhitespace(value.Tags) ? JSON.parse(value.Tags) : null;\n      const tags: string[] =\n        tagsJson != null && tagsJson.tags != null && tagsJson.tags.length > 0\n          ? tagsJson.tags\n              .map((tagJson: string) => {\n                try {\n                  const t = JSON.parse(tagJson);\n                  return this.getValueOrDefault(t.tag);\n                } catch {\n                  // Ignore error\n                }\n                return null;\n              })\n              .filter((t: string) => !this.isNullOrWhitespace(t))\n          : null;\n\n      if (this.organization && tags != null && tags.length > 0) {\n        tags.forEach((tag) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === tag) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = tag;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization && tags != null && tags.length > 0) {\n        this.processFolder(result, tags[0]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes, \"\");\n      cipher.notes += \"\\n\\n\" + this.getValueOrDefault(value[\"Shared Notes\"], \"\") + \"\\n\";\n      cipher.name = this.getValueOrDefault(value[\"Entry Name\"], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User ID\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n        value.__parsed_extra.forEach((extra: string) => {\n          if (!this.isNullOrWhitespace(extra)) {\n            cipher.notes += \"\\n\" + extra;\n          }\n        });\n      }\n\n      const fieldsJson = !this.isNullOrWhitespace(value[\"Extra Fields\"])\n        ? JSON.parse(value[\"Extra Fields\"])\n        : null;\n      const fields =\n        fieldsJson != null && fieldsJson.extraFields != null && fieldsJson.extraFields.length > 0\n          ? fieldsJson.extraFields.map((fieldJson: string) => {\n              try {\n                return JSON.parse(fieldJson);\n              } catch {\n                // Ignore error\n              }\n              return null;\n            })\n          : null;\n      if (fields != null) {\n        fields.forEach((f: any) => {\n          if (f != null) {\n            this.processKvp(cipher, f.name, f.data);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordAgentCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let newVersion = true;\n    results.forEach((value) => {\n      if (value.length !== 5 && value.length < 9) {\n        return;\n      }\n      const altFormat = value.length === 10 && value[0] === \"0\";\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[altFormat ? 1 : 0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[altFormat ? 2 : 1]);\n      cipher.login.password = this.getValueOrDefault(value[altFormat ? 3 : 2]);\n      if (value.length === 5) {\n        newVersion = false;\n        cipher.notes = this.getValueOrDefault(value[4]);\n        cipher.login.uris = this.makeUriArray(value[3]);\n      } else {\n        const folder = this.getValueOrDefault(value[altFormat ? 9 : 8], \"(None)\");\n        let folderName = folder !== \"(None)\" ? folder.split(\"\\\\\").join(\"/\") : null;\n        if (folderName != null) {\n          folderName = folder.split(\" > \").join(\"/\");\n          folderName = folder.split(\">\").join(\"/\");\n        }\n        this.processFolder(result, folderName);\n        cipher.notes = this.getValueOrDefault(value[altFormat ? 5 : 3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (newVersion && this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordBossJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.items == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    results.folders.forEach((value: any) => {\n      foldersMap.set(value.id, value.name);\n    });\n    const foldersIndexMap = new Map<string, number>();\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((value: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.login.uris = this.makeUriArray(value.login_url);\n\n      if (value.folder != null && foldersIndexMap.has(value.folder)) {\n        result.folderRelationships.push([result.ciphers.length, foldersIndexMap.get(value.folder)]);\n      }\n\n      if (value.identifiers == null) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value.identifiers.notes)) {\n        cipher.notes = value.identifiers.notes.split(\"\\\\r\\\\n\").join(\"\\n\").split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (value.type === \"CreditCard\") {\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n      }\n\n      for (const property in value.identifiers) {\n        // eslint-disable-next-line\n        if (!value.identifiers.hasOwnProperty(property)) {\n          continue;\n        }\n        const valObj = value.identifiers[property];\n        const val = valObj != null ? valObj.toString() : null;\n        if (\n          this.isNullOrWhitespace(val) ||\n          property === \"notes\" ||\n          property === \"ignoreItemInSecurityScore\"\n        ) {\n          continue;\n        }\n\n        if (property === \"custom_fields\") {\n          valObj.forEach((cf: any) => {\n            this.processKvp(cipher, cf.name, cf.value);\n          });\n          continue;\n        }\n\n        if (cipher.type === CipherType.Card) {\n          if (property === \"cardNumber\") {\n            cipher.card.number = val;\n            cipher.card.brand = this.getCardBrand(val);\n            continue;\n          } else if (property === \"nameOnCard\") {\n            cipher.card.cardholderName = val;\n            continue;\n          } else if (property === \"security_code\") {\n            cipher.card.code = val;\n            continue;\n          } else if (property === \"expires\") {\n            try {\n              const expDate = new Date(val);\n              cipher.card.expYear = expDate.getFullYear().toString();\n              cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n            } catch {\n              // Ignore error\n            }\n            continue;\n          } else if (property === \"cardType\") {\n            continue;\n          }\n        } else {\n          if (\n            (property === \"username\" || property === \"email\") &&\n            this.isNullOrWhitespace(cipher.login.username)\n          ) {\n            cipher.login.username = val;\n            continue;\n          } else if (property === \"password\") {\n            cipher.login.password = val;\n            continue;\n          } else if (property === \"totp\") {\n            cipher.login.totp = val;\n            continue;\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(property) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n            continue;\n          }\n        }\n\n        this.processKvp(cipher, property, val);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordDragonXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const records = doc.querySelectorAll(\"PasswordManager > record\");\n    Array.from(records).forEach((record) => {\n      const category = this.querySelectorDirectChild(record, \"Category\");\n      const categoryText =\n        category != null &&\n        !this.isNullOrWhitespace(category.textContent) &&\n        category.textContent !== \"Unfiled\"\n          ? category.textContent\n          : null;\n      this.processFolder(result, categoryText);\n\n      const accountName = this.querySelectorDirectChild(record, \"Account-Name\");\n      const userId = this.querySelectorDirectChild(record, \"User-Id\");\n      const password = this.querySelectorDirectChild(record, \"Password\");\n      const url = this.querySelectorDirectChild(record, \"URL\");\n      const notes = this.querySelectorDirectChild(record, \"Notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name =\n        accountName != null ? this.getValueOrDefault(accountName.textContent, \"--\") : \"--\";\n      cipher.notes = notes != null ? this.getValueOrDefault(notes.textContent) : \"\";\n      cipher.login.username = userId != null ? this.getValueOrDefault(userId.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      const attributes: string[] = [];\n      for (let i = 1; i <= 10; i++) {\n        attributes.push(\"Attribute-\" + i);\n      }\n\n      this.querySelectorAllDirectChild(record, attributes.join(\",\")).forEach((attr) => {\n        if (this.isNullOrWhitespace(attr.textContent) || attr.textContent === \"null\") {\n          return;\n        }\n        this.processKvp(cipher, attr.tagName, attr.textContent);\n      });\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordSafeXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const passwordSafe = doc.querySelector(\"passwordsafe\");\n    if (passwordSafe == null) {\n      result.errorMessage = \"Missing `passwordsafe` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const notesDelimiter = passwordSafe.getAttribute(\"delimiter\");\n    const entries = doc.querySelectorAll(\"passwordsafe > entry\");\n    Array.from(entries).forEach((entry) => {\n      const group = this.querySelectorDirectChild(entry, \"group\");\n      const groupText =\n        group != null && !this.isNullOrWhitespace(group.textContent)\n          ? group.textContent.split(\".\").join(\"/\")\n          : null;\n      this.processFolder(result, groupText);\n\n      const title = this.querySelectorDirectChild(entry, \"title\");\n      const username = this.querySelectorDirectChild(entry, \"username\");\n      const email = this.querySelectorDirectChild(entry, \"email\");\n      const password = this.querySelectorDirectChild(entry, \"password\");\n      const url = this.querySelectorDirectChild(entry, \"url\");\n      const notes = this.querySelectorDirectChild(entry, \"notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name = title != null ? this.getValueOrDefault(title.textContent, \"--\") : \"--\";\n      cipher.notes =\n        notes != null\n          ? this.getValueOrDefault(notes.textContent, \"\").split(notesDelimiter).join(\"\\n\")\n          : null;\n      cipher.login.username =\n        username != null ? this.getValueOrDefault(username.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      if (this.isNullOrWhitespace(cipher.login.username) && email != null) {\n        cipher.login.username = this.getValueOrDefault(email.textContent);\n      } else if (email != null && !this.isNullOrWhitespace(email.textContent)) {\n        cipher.notes = this.isNullOrWhitespace(cipher.notes)\n          ? \"Email: \" + email.textContent\n          : cipher.notes + \"\\n\" + \"Email: \" + email.textContent;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordWalletTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 1) {\n        return;\n      }\n      if (value.length > 5) {\n        this.processFolder(result, value[5]);\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      if (value.length > 4) {\n        cipher.notes = this.getValueOrDefault(value[4], \"\").split(\"¬\").join(\"\\n\");\n      }\n      if (value.length > 2) {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n      }\n      if (value.length > 3) {\n        cipher.login.password = this.getValueOrDefault(value[3]);\n      }\n      if (value.length > 1) {\n        cipher.login.uris = this.makeUriArray(value[1]);\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  AppPasswordEntry,\n  BookmarkEntry,\n  EnvironmentVariablesEntry,\n  FoldersEntity,\n  GPGEntry,\n  NotesEntry,\n  PsonoItemTypes,\n  PsonoJsonExport,\n  TOTPEntry,\n  WebsitePasswordEntry,\n} from \"./psono-json-types\";\n\nexport class PsonoJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const psonoExport: PsonoJsonExport = JSON.parse(data);\n    if (psonoExport == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    this.parseFolders(result, psonoExport.folders);\n    this.handleItemParsing(result, psonoExport.items);\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFolders(result: ImportResult, folders: FoldersEntity[]) {\n    if (folders == null || folders.length === 0) {\n      return;\n    }\n\n    folders.forEach((folder) => {\n      if (folder.items == null || folder.items.length == 0) {\n        return;\n      }\n\n      this.processFolder(result, folder.name);\n\n      this.handleItemParsing(result, folder.items);\n    });\n  }\n\n  private handleItemParsing(result: ImportResult, items?: PsonoItemTypes[]) {\n    if (items == null || items.length === 0) {\n      return;\n    }\n\n    items.forEach((record) => {\n      const cipher = this.parsePsonoItem(record);\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n  }\n\n  private parsePsonoItem(item: PsonoItemTypes): CipherView {\n    const cipher = this.initLoginCipher();\n\n    switch (item.type) {\n      case \"website_password\":\n        this.parseWebsiteLogins(item, cipher);\n        break;\n      case \"application_password\":\n        this.parseApplicationPasswords(item, cipher);\n        break;\n      case \"environment_variables\":\n        this.parseEnvironmentVariables(item, cipher);\n        break;\n      case \"totp\":\n        this.parseTOTP(item, cipher);\n        break;\n      case \"bookmark\":\n        this.parseBookmarks(item, cipher);\n        break;\n      // Skipping this until we can save GPG into notes/custom fields\n      // case \"mail_gpg_own_key\":\n      //   this.parseGPG(item, cipher);\n      //   break;\n      case \"note\":\n        this.parseNotes(item, cipher);\n        break;\n      default:\n        break;\n    }\n\n    return cipher;\n  }\n\n  readonly WEBSITE_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"website_password_title\",\n    \"website_password_notes\",\n    \"website_password_username\",\n    \"website_password_password\",\n    \"website_password_url\",\n    \"autosubmit\",\n    \"website_password_auto_submit\",\n    \"urlfilter\",\n    \"website_password_url_filter\",\n  ]);\n  private parseWebsiteLogins(entry: WebsitePasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"website_password\") {\n      return;\n    }\n\n    cipher.name = entry.website_password_title;\n    cipher.notes = entry.website_password_notes;\n\n    cipher.login.username = entry.website_password_username;\n    cipher.login.password = entry.website_password_password;\n\n    cipher.login.uris = this.makeUriArray(entry.website_password_url);\n\n    this.processKvp(\n      cipher,\n      \"website_password_auto_submit\",\n      entry.website_password_auto_submit.toString(),\n      FieldType.Boolean\n    );\n\n    this.processKvp(cipher, \"website_password_url_filter\", entry.website_password_url_filter);\n\n    this.importUnmappedFields(cipher, entry, this.WEBSITE_mappedValues);\n  }\n\n  readonly APP_PWD_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"application_password_title\",\n    \"application_password_notes\",\n    \"application_password_username\",\n    \"application_password_password\",\n  ]);\n  private parseApplicationPasswords(entry: AppPasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"application_password\") {\n      return;\n    }\n\n    cipher.name = entry.application_password_title;\n    cipher.notes = entry.application_password_notes;\n\n    cipher.login.username = entry.application_password_username;\n    cipher.login.password = entry.application_password_password;\n\n    this.importUnmappedFields(cipher, entry, this.APP_PWD_mappedValues);\n  }\n\n  readonly BOOKMARK_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"bookmark_title\",\n    \"bookmark_notes\",\n    \"bookmark_url\",\n  ]);\n  private parseBookmarks(entry: BookmarkEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"bookmark\") {\n      return;\n    }\n\n    cipher.name = entry.bookmark_title;\n    cipher.notes = entry.bookmark_notes;\n\n    cipher.login.uris = this.makeUriArray(entry.bookmark_url);\n\n    this.importUnmappedFields(cipher, entry, this.BOOKMARK_mappedValues);\n  }\n\n  readonly NOTES_mappedValues = new Set([\"type\", \"name\", \"note_title\", \"note_notes\"]);\n  private parseNotes(entry: NotesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"note\") {\n      return;\n    }\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.note_title;\n    cipher.notes = entry.note_notes;\n\n    this.importUnmappedFields(cipher, entry, this.NOTES_mappedValues);\n  }\n\n  readonly TOTP_mappedValues = new Set([\"type\", \"name\", \"totp_title\", \"totp_notes\", \"totp_code\"]);\n  private parseTOTP(entry: TOTPEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"totp\") {\n      return;\n    }\n\n    cipher.name = entry.totp_title;\n    cipher.notes = entry.totp_notes;\n\n    cipher.login.totp = entry.totp_code;\n\n    this.importUnmappedFields(cipher, entry, this.TOTP_mappedValues);\n  }\n\n  readonly ENV_VARIABLES_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"environment_variables_title\",\n    \"environment_variables_notes\",\n    \"environment_variables_variables\",\n  ]);\n  private parseEnvironmentVariables(entry: EnvironmentVariablesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"environment_variables\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.environment_variables_title;\n    cipher.notes = entry.environment_variables_notes;\n\n    entry.environment_variables_variables.forEach((KvPair) => {\n      this.processKvp(cipher, KvPair.key, KvPair.value);\n    });\n\n    this.importUnmappedFields(cipher, entry, this.ENV_VARIABLES_mappedValues);\n  }\n\n  readonly GPG_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"mail_gpg_own_key_title\",\n    \"mail_gpg_own_key_public\",\n    \"mail_gpg_own_key_name\",\n    \"mail_gpg_own_key_email\",\n    \"mail_gpg_own_key_private\",\n  ]);\n  private parseGPG(entry: GPGEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"mail_gpg_own_key\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.mail_gpg_own_key_title;\n    cipher.notes = entry.mail_gpg_own_key_public;\n\n    this.processKvp(cipher, \"mail_gpg_own_key_name\", entry.mail_gpg_own_key_name);\n    this.processKvp(cipher, \"mail_gpg_own_key_email\", entry.mail_gpg_own_key_email);\n    this.processKvp(\n      cipher,\n      \"mail_gpg_own_key_private\",\n      entry.mail_gpg_own_key_private,\n      FieldType.Hidden\n    );\n\n    this.importUnmappedFields(cipher, entry, this.GPG_mappedValues);\n  }\n\n  private importUnmappedFields(\n    cipher: CipherView,\n    entry: PsonoItemTypes,\n    mappedValues: Set<string>\n  ) {\n    const unmappedFields = Object.keys(entry).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = entry as any;\n      this.processKvp(cipher, key, item[key].toString());\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RememBearCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.trash === \"true\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.notes);\n      if (value.type === \"LoginItem\") {\n        cipher.login.uris = this.makeUriArray(value.website);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      } else if (value.type === \"CreditCardItem\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.verification);\n\n        try {\n          const expMonth = this.getValueOrDefault(value.expiryMonth);\n          if (expMonth != null) {\n            const expMonthNumber = parseInt(expMonth, null);\n            if (expMonthNumber != null && expMonthNumber >= 1 && expMonthNumber <= 12) {\n              cipher.card.expMonth = expMonthNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n        try {\n          const expYear = this.getValueOrDefault(value.expiryYear);\n          if (expYear != null) {\n            const expYearNumber = parseInt(expYear, null);\n            if (expYearNumber != null) {\n              cipher.card.expYear = expYearNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n\n        const pin = this.getValueOrDefault(value.pin);\n        if (pin != null) {\n          this.processKvp(cipher, \"PIN\", pin);\n        }\n        const zip = this.getValueOrDefault(value.zipCode);\n        if (zip != null) {\n          this.processKvp(cipher, \"Zip Code\", zip);\n        }\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RoboFormCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let i = 1;\n    results.forEach((value) => {\n      const folder =\n        !this.isNullOrWhitespace(value.Folder) && value.Folder.startsWith(\"/\")\n          ? value.Folder.replace(\"/\", \"\")\n          : value.Folder;\n      const folderName = !this.isNullOrWhitespace(folder) ? folder : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Login);\n      cipher.login.password = this.getValueOrDefault(value.Pwd);\n      cipher.login.uris = this.makeUriArray(value.Url);\n\n      if (!this.isNullOrWhitespace(value.Rf_fields)) {\n        let fields: string[] = [value.Rf_fields];\n        if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n          fields = fields.concat(value.__parsed_extra);\n        }\n        fields.forEach((field: string) => {\n          const parts = field.split(\":\");\n          if (parts.length < 3) {\n            return;\n          }\n          const key = parts[0] === \"-no-name-\" ? null : parts[0];\n          const val = parts.length === 4 && parts[2] === \"rck\" ? parts[1] : parts[2];\n          this.processKvp(cipher, key, val);\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n\n      if (\n        i === results.length &&\n        cipher.name === \"--\" &&\n        this.isNullOrWhitespace(cipher.login.password)\n      ) {\n        return;\n      }\n\n      result.ciphers.push(cipher);\n      i++;\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafariCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url ?? value.URL);\n      cipher.login.totp = this.getValueOrDefault(value.OTPAuth);\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafeInCloudXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const db = doc.querySelector(\"database\");\n    if (db == null) {\n      result.errorMessage = \"Missing `database` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, number>();\n\n    Array.from(doc.querySelectorAll(\"database > label\")).forEach((labelEl) => {\n      const name = labelEl.getAttribute(\"name\");\n      const id = labelEl.getAttribute(\"id\");\n      if (!this.isNullOrWhitespace(name) && !this.isNullOrWhitespace(id)) {\n        foldersMap.set(id, result.folders.length);\n        const folder = new FolderView();\n        folder.name = name;\n        result.folders.push(folder);\n      }\n    });\n\n    Array.from(doc.querySelectorAll(\"database > card\")).forEach((cardEl) => {\n      if (cardEl.getAttribute(\"template\") === \"true\" || cardEl.getAttribute(\"deleted\") === \"true\") {\n        return;\n      }\n\n      const labelIdEl = this.querySelectorDirectChild(cardEl, \"label_id\");\n      if (labelIdEl != null) {\n        const labelId = labelIdEl.textContent;\n        if (!this.isNullOrWhitespace(labelId) && foldersMap.has(labelId)) {\n          result.folderRelationships.push([result.ciphers.length, foldersMap.get(labelId)]);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(cardEl.getAttribute(\"title\"), \"--\");\n\n      if (cardEl.getAttribute(\"star\") === \"true\") {\n        cipher.favorite = true;\n      }\n\n      const cardType = cardEl.getAttribute(\"type\");\n      if (cardType === \"note\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      } else {\n        Array.from(this.querySelectorAllDirectChild(cardEl, \"field\")).forEach((fieldEl) => {\n          const text = fieldEl.textContent;\n          if (this.isNullOrWhitespace(text)) {\n            return;\n          }\n          const name = fieldEl.getAttribute(\"name\");\n          const fieldType = this.getValueOrDefault(fieldEl.getAttribute(\"type\"), \"\").toLowerCase();\n          if (fieldType === \"login\") {\n            cipher.login.username = text;\n          } else if (fieldType === \"password\" || fieldType === \"secret\") {\n            // safeInCloud allows for more than one password. we just insert them here and find the one used as password later\n            this.processKvp(cipher, name, text, FieldType.Hidden);\n          } else if (fieldType === \"one_time_password\") {\n            cipher.login.totp = text;\n          } else if (fieldType === \"notes\") {\n            cipher.notes += text + \"\\n\";\n          } else if (fieldType === \"weblogin\" || fieldType === \"website\") {\n            cipher.login.uris = this.makeUriArray(text);\n          } else {\n            this.processKvp(cipher, name, text);\n          }\n        });\n      }\n\n      Array.from(this.querySelectorAllDirectChild(cardEl, \"notes\")).forEach((notesEl) => {\n        cipher.notes += notesEl.textContent + \"\\n\";\n      });\n\n      this.setPassword(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  // Choose a password from all passwords. Take one that has password in its name, or the first one if there is no such entry\n  // if its name is password, we can safely remove it form the fields. otherwise, it would maybe be best to keep it as a hidden field\n  setPassword(cipher: CipherView) {\n    const candidates = cipher.fields.filter((field) => field.type === FieldType.Hidden);\n    if (!candidates.length) {\n      return;\n    }\n\n    let choice: FieldView;\n    for (const field of candidates) {\n      if (this.passwordFieldNames.includes(field.name.toLowerCase())) {\n        choice = field;\n        cipher.fields = cipher.fields.filter((f) => f !== choice);\n        break;\n      }\n    }\n\n    if (!choice) {\n      choice = candidates[0];\n    }\n\n    cipher.login.password = choice.value;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SaferPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.nameFromUrl(value.url), \"--\");\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SecureSafeCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title);\n      cipher.notes = this.getValueOrDefault(value.Comment);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SplashIdCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      this.processFolder(result, this.getValueOrDefault(value[value.length - 1]));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 2], \"\");\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n\n      if (value[0] === \"Web Logins\" || value[0] === \"Servers\" || value[0] === \"Email Accounts\") {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n        cipher.login.password = this.getValueOrDefault(value[3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n        this.parseFieldsToNotes(cipher, 5, value);\n      } else {\n        this.parseFieldsToNotes(cipher, 2, value);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFieldsToNotes(cipher: CipherView, startIndex: number, value: any) {\n    // last 3 rows do not get parsed\n    for (let i = startIndex; i < value.length - 3; i++) {\n      if (this.isNullOrWhitespace(value[i])) {\n        continue;\n      }\n      cipher.notes += value[i] + \"\\n\";\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class StickyPasswordXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const loginNodes = doc.querySelectorAll(\"root > Database > Logins > Login\");\n    Array.from(loginNodes).forEach((loginNode) => {\n      const accountId = loginNode.getAttribute(\"ID\");\n      if (this.isNullOrWhitespace(accountId)) {\n        return;\n      }\n\n      const usernameText = loginNode.getAttribute(\"Name\");\n      const passwordText = loginNode.getAttribute(\"Password\");\n      let titleText: string = null;\n      let linkText: string = null;\n      let notesText: string = null;\n      let groupId: string = null;\n      let groupText: string = null;\n\n      const accountLogin = doc.querySelector(\n        \"root > Database > Accounts > Account > \" +\n          'LoginLinks > Login[SourceLoginID=\"' +\n          accountId +\n          '\"]'\n      );\n      if (accountLogin != null) {\n        const account = accountLogin.parentElement.parentElement;\n        if (account != null) {\n          titleText = account.getAttribute(\"Name\");\n          linkText = account.getAttribute(\"Link\");\n          groupId = account.getAttribute(\"ParentID\");\n          notesText = account.getAttribute(\"Comments\");\n          if (!this.isNullOrWhitespace(notesText)) {\n            notesText = notesText.split(\"/n\").join(\"\\n\");\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(groupId)) {\n        groupText = this.buildGroupText(doc, groupId, \"\");\n        this.processFolder(result, groupText);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(titleText, \"--\");\n      cipher.notes = this.getValueOrDefault(notesText);\n      cipher.login.username = this.getValueOrDefault(usernameText);\n      cipher.login.password = this.getValueOrDefault(passwordText);\n      cipher.login.uris = this.makeUriArray(linkText);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  buildGroupText(doc: Document, groupId: string, groupText: string): string {\n    const group = doc.querySelector('root > Database > Groups > Group[ID=\"' + groupId + '\"]');\n    if (group == null) {\n      return groupText;\n    }\n    if (!this.isNullOrWhitespace(groupText)) {\n      groupText = \"/\" + groupText;\n    }\n    groupText = group.getAttribute(\"Name\") + groupText;\n    return this.buildGroupText(doc, group.getAttribute(\"ParentID\"), groupText);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst PropertiesToIgnore = [\n  \"kind\",\n  \"autologin\",\n  \"favorite\",\n  \"hexcolor\",\n  \"protectedwithpassword\",\n  \"subdomainonly\",\n  \"type\",\n  \"tk_export_version\",\n  \"note\",\n  \"title\",\n  \"document_content\",\n];\n\nexport class TrueKeyCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.favorite, \"\").toLowerCase() === \"true\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.notes = this.getValueOrDefault(value.memo, \"\");\n      cipher.login.username = this.getValueOrDefault(value.login);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n\n      if (value.kind !== \"login\") {\n        cipher.name = this.getValueOrDefault(value.title, \"--\");\n        cipher.notes = this.getValueOrDefault(value.note, \"\");\n      }\n\n      if (value.kind === \"cc\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        if (!this.isNullOrWhitespace(value.expiryDate)) {\n          try {\n            const expDate = new Date(value.expiryDate);\n            cipher.card.expYear = expDate.getFullYear().toString();\n            cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n          } catch {\n            // Ignore error\n          }\n        }\n      } else if (value.kind !== \"login\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = this.getValueOrDefault(value.document_content, \"\");\n        }\n        for (const property in value) {\n          if (\n            value.hasOwnProperty(property) && // eslint-disable-line\n            PropertiesToIgnore.indexOf(property.toLowerCase()) < 0 &&\n            !this.isNullOrWhitespace(value[property])\n          ) {\n            this.processKvp(cipher, property, value[property]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class UpmCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length !== 5) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.notes = this.getValueOrDefault(value[4]);\n      cipher.login.username = this.getValueOrDefault(value[1]);\n      cipher.login.password = this.getValueOrDefault(value[2]);\n      cipher.login.uris = this.makeUriArray(value[3]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class YotiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User name\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ZohoVaultCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (\n        this.isNullOrWhitespace(value[\"Password Name\"]) &&\n        this.isNullOrWhitespace(value[\"Secret Name\"])\n      ) {\n        return;\n      }\n      this.processFolder(result, this.getValueOrDefault(value.ChamberName));\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite, \"0\") === \"1\";\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(\n        value[\"Password Name\"],\n        this.getValueOrDefault(value[\"Secret Name\"], \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(\n        this.getValueOrDefault(value[\"Password URL\"], this.getValueOrDefault(value[\"Secret URL\"]))\n      );\n      this.parseData(cipher, value.SecretData);\n      this.parseData(cipher, value.CustomData);\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseData(cipher: CipherView, data: string) {\n    if (this.isNullOrWhitespace(data)) {\n      return;\n    }\n    const dataLines = this.splitNewLine(data);\n    dataLines.forEach((line) => {\n      const delimPosition = line.indexOf(\":\");\n      if (delimPosition < 0) {\n        return;\n      }\n      const field = line.substring(0, delimPosition);\n      const value = line.length > delimPosition ? line.substring(delimPosition + 1) : null;\n      if (\n        this.isNullOrWhitespace(field) ||\n        this.isNullOrWhitespace(value) ||\n        field === \"SecretType\"\n      ) {\n        return;\n      }\n      const fieldLower = field.toLowerCase();\n      if (cipher.login.username == null && this.usernameFieldNames.indexOf(fieldLower) > -1) {\n        cipher.login.username = value;\n      } else if (\n        cipher.login.password == null &&\n        this.passwordFieldNames.indexOf(fieldLower) > -1\n      ) {\n        cipher.login.password = value;\n      } else {\n        this.processKvp(cipher, field, value);\n      }\n    });\n  }\n}\n","export interface ImportOption {\n  id: string;\n  name: string;\n}\n\nexport const featuredImportOptions = [\n  { id: \"bitwardenjson\", name: \"Bitwarden (json)\" },\n  { id: \"bitwardencsv\", name: \"Bitwarden (csv)\" },\n  { id: \"chromecsv\", name: \"Chrome (csv)\" },\n  { id: \"dashlanecsv\", name: \"Dashlane (csv)\" },\n  { id: \"firefoxcsv\", name: \"Firefox (csv)\" },\n  { id: \"keepass2xml\", name: \"KeePass 2 (xml)\" },\n  { id: \"lastpasscsv\", name: \"LastPass (csv)\" },\n  { id: \"safaricsv\", name: \"Safari and macOS (csv)\" },\n  { id: \"1password1pux\", name: \"1Password (1pux)\" },\n] as const;\n\nexport const regularImportOptions = [\n  { id: \"keepassxcsv\", name: \"KeePassX (csv)\" },\n  { id: \"1password1pif\", name: \"1Password (1pif)\" },\n  { id: \"1passwordwincsv\", name: \"1Password 6 and 7 Windows (csv)\" },\n  { id: \"1passwordmaccsv\", name: \"1Password 6 and 7 Mac (csv)\" },\n  { id: \"dashlanejson\", name: \"Dashlane (json)\" },\n  { id: \"roboformcsv\", name: \"RoboForm (csv)\" },\n  { id: \"keepercsv\", name: \"Keeper (csv)\" },\n  // Temporarily remove this option for the Feb release\n  // { id: \"keeperjson\", name: \"Keeper (json)\" },\n  { id: \"enpasscsv\", name: \"Enpass (csv)\" },\n  { id: \"enpassjson\", name: \"Enpass (json)\" },\n  { id: \"safeincloudxml\", name: \"SafeInCloud (xml)\" },\n  { id: \"pwsafexml\", name: \"Password Safe (xml)\" },\n  { id: \"stickypasswordxml\", name: \"Sticky Password (xml)\" },\n  { id: \"msecurecsv\", name: \"mSecure (csv)\" },\n  { id: \"truekeycsv\", name: \"True Key (csv)\" },\n  { id: \"passwordbossjson\", name: \"Password Boss (json)\" },\n  { id: \"zohovaultcsv\", name: \"Zoho Vault (csv)\" },\n  { id: \"splashidcsv\", name: \"SplashID (csv)\" },\n  { id: \"passworddragonxml\", name: \"Password Dragon (xml)\" },\n  { id: \"padlockcsv\", name: \"Padlock (csv)\" },\n  { id: \"passboltcsv\", name: \"Passbolt (csv)\" },\n  { id: \"clipperzhtml\", name: \"Clipperz (html)\" },\n  { id: \"aviracsv\", name: \"Avira (csv)\" },\n  { id: \"saferpasscsv\", name: \"SaferPass (csv)\" },\n  { id: \"upmcsv\", name: \"Universal Password Manager (csv)\" },\n  { id: \"ascendocsv\", name: \"Ascendo DataVault (csv)\" },\n  { id: \"meldiumcsv\", name: \"Meldium (csv)\" },\n  { id: \"passkeepcsv\", name: \"PassKeep (csv)\" },\n  { id: \"operacsv\", name: \"Opera (csv)\" },\n  { id: \"vivaldicsv\", name: \"Vivaldi (csv)\" },\n  { id: \"gnomejson\", name: \"GNOME Passwords and Keys/Seahorse (json)\" },\n  { id: \"blurcsv\", name: \"Blur (csv)\" },\n  { id: \"passwordagentcsv\", name: \"Password Agent (csv)\" },\n  { id: \"passpackcsv\", name: \"Passpack (csv)\" },\n  { id: \"passmanjson\", name: \"Passman (json)\" },\n  { id: \"avastcsv\", name: \"Avast Passwords (csv)\" },\n  { id: \"avastjson\", name: \"Avast Passwords (json)\" },\n  { id: \"fsecurefsk\", name: \"F-Secure KEY (fsk)\" },\n  { id: \"kasperskytxt\", name: \"Kaspersky Password Manager (txt)\" },\n  { id: \"remembearcsv\", name: \"RememBear (csv)\" },\n  { id: \"passwordwallettxt\", name: \"PasswordWallet (txt)\" },\n  { id: \"mykicsv\", name: \"Myki (csv)\" },\n  { id: \"securesafecsv\", name: \"SecureSafe (csv)\" },\n  { id: \"logmeoncecsv\", name: \"LogMeOnce (csv)\" },\n  { id: \"blackberrycsv\", name: \"BlackBerry Password Keeper (csv)\" },\n  { id: \"buttercupcsv\", name: \"Buttercup (csv)\" },\n  { id: \"codebookcsv\", name: \"Codebook (csv)\" },\n  { id: \"encryptrcsv\", name: \"Encryptr (csv)\" },\n  { id: \"yoticsv\", name: \"Yoti (csv)\" },\n  { id: \"nordpasscsv\", name: \"Nordpass (csv)\" },\n  { id: \"psonojson\", name: \"Psono (json)\" },\n  { id: \"passkyjson\", name: \"Passky (json)\" },\n] as const;\n\nexport type ImportType =\n  | (typeof featuredImportOptions)[number][\"id\"]\n  | (typeof regularImportOptions)[number][\"id\"];\n","import { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { CollectionService } from \"@bitwarden/common/admin-console/abstractions/collection.service\";\nimport { CollectionWithIdRequest } from \"@bitwarden/common/admin-console/models/request/collection-with-id.request\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\nimport { KvpRequest } from \"@bitwarden/common/models/request/kvp.request\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherRequest } from \"@bitwarden/common/vault/models/request/cipher.request\";\nimport { FolderWithIdRequest } from \"@bitwarden/common/vault/models/request/folder-with-id.request\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport {\n  AscendoCsvImporter,\n  AvastCsvImporter,\n  AvastJsonImporter,\n  AviraCsvImporter,\n  BitwardenCsvImporter,\n  BitwardenPasswordProtectedImporter,\n  BlackBerryCsvImporter,\n  BlurCsvImporter,\n  ButtercupCsvImporter,\n  ChromeCsvImporter,\n  ClipperzHtmlImporter,\n  CodebookCsvImporter,\n  DashlaneCsvImporter,\n  DashlaneJsonImporter,\n  EncryptrCsvImporter,\n  EnpassCsvImporter,\n  EnpassJsonImporter,\n  FirefoxCsvImporter,\n  FSecureFskImporter,\n  GnomeJsonImporter,\n  KasperskyTxtImporter,\n  KeePass2XmlImporter,\n  KeePassXCsvImporter,\n  KeeperCsvImporter,\n  // KeeperJsonImporter,\n  LastPassCsvImporter,\n  LogMeOnceCsvImporter,\n  MSecureCsvImporter,\n  MeldiumCsvImporter,\n  MykiCsvImporter,\n  NordPassCsvImporter,\n  OnePassword1PifImporter,\n  OnePassword1PuxImporter,\n  OnePasswordMacCsvImporter,\n  OnePasswordWinCsvImporter,\n  PadlockCsvImporter,\n  PassKeepCsvImporter,\n  PasskyJsonImporter,\n  PassmanJsonImporter,\n  PasspackCsvImporter,\n  PasswordAgentCsvImporter,\n  PasswordBossJsonImporter,\n  PasswordDragonXmlImporter,\n  PasswordSafeXmlImporter,\n  PasswordWalletTxtImporter,\n  PsonoJsonImporter,\n  RememBearCsvImporter,\n  RoboFormCsvImporter,\n  SafariCsvImporter,\n  SafeInCloudXmlImporter,\n  SaferPassCsvImporter,\n  SecureSafeCsvImporter,\n  SplashIdCsvImporter,\n  StickyPasswordXmlImporter,\n  TrueKeyCsvImporter,\n  UpmCsvImporter,\n  YotiCsvImporter,\n  ZohoVaultCsvImporter,\n} from \"../importers\";\nimport { Importer } from \"../importers/importer\";\nimport {\n  featuredImportOptions,\n  ImportOption,\n  ImportType,\n  regularImportOptions,\n} from \"../models/import-options\";\nimport { ImportResult } from \"../models/import-result\";\nimport { ImportApiServiceAbstraction } from \"../services/import-api.service.abstraction\";\nimport { ImportServiceAbstraction } from \"../services/import.service.abstraction\";\n\nexport class ImportService implements ImportServiceAbstraction {\n  featuredImportOptions = featuredImportOptions as readonly ImportOption[];\n\n  regularImportOptions = regularImportOptions as readonly ImportOption[];\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private importApiService: ImportApiServiceAbstraction,\n    private i18nService: I18nService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService\n  ) {}\n\n  getImportOptions(): ImportOption[] {\n    return this.featuredImportOptions.concat(this.regularImportOptions);\n  }\n\n  async import(\n    importer: Importer,\n    fileContents: string,\n    organizationId: string = null\n  ): Promise<ImportResult> {\n    const importResult = await importer.parse(fileContents);\n    if (!importResult.success) {\n      if (!Utils.isNullOrWhitespace(importResult.errorMessage)) {\n        throw new Error(importResult.errorMessage);\n      }\n      throw new Error(this.i18nService.t(\"importFormatError\"));\n    }\n\n    if (importResult.folders.length === 0 && importResult.ciphers.length === 0) {\n      throw new Error(this.i18nService.t(\"importNothingError\"));\n    }\n\n    if (importResult.ciphers.length > 0) {\n      const halfway = Math.floor(importResult.ciphers.length / 2);\n      const last = importResult.ciphers.length - 1;\n\n      if (\n        this.badData(importResult.ciphers[0]) &&\n        this.badData(importResult.ciphers[halfway]) &&\n        this.badData(importResult.ciphers[last])\n      ) {\n        throw new Error(this.i18nService.t(\"importFormatError\"));\n      }\n    }\n\n    try {\n      if (organizationId != null) {\n        await this.handleOrganizationalImport(importResult, organizationId);\n      } else {\n        await this.handleIndividualImport(importResult);\n      }\n    } catch (error) {\n      const errorResponse = new ErrorResponse(error, 400);\n      throw this.handleServerError(errorResponse, importResult);\n    }\n    return importResult;\n  }\n\n  getImporter(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>,\n    organizationId: string = null\n  ): Importer {\n    if (promptForPassword_callback == null) {\n      return null;\n    }\n\n    const importer = this.getImporterInstance(format, promptForPassword_callback);\n    if (importer == null) {\n      return null;\n    }\n    importer.organizationId = organizationId;\n    return importer;\n  }\n\n  private getImporterInstance(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>\n  ) {\n    if (format == null) {\n      return null;\n    }\n\n    switch (format) {\n      case \"bitwardencsv\":\n        return new BitwardenCsvImporter();\n      case \"bitwardenjson\":\n      case \"bitwardenpasswordprotected\":\n        return new BitwardenPasswordProtectedImporter(\n          this.cryptoService,\n          this.i18nService,\n          promptForPassword_callback\n        );\n      case \"lastpasscsv\":\n      case \"passboltcsv\":\n        return new LastPassCsvImporter();\n      case \"keepassxcsv\":\n        return new KeePassXCsvImporter();\n      case \"aviracsv\":\n        return new AviraCsvImporter();\n      case \"blurcsv\":\n        return new BlurCsvImporter();\n      case \"safeincloudxml\":\n        return new SafeInCloudXmlImporter();\n      case \"padlockcsv\":\n        return new PadlockCsvImporter();\n      case \"keepass2xml\":\n        return new KeePass2XmlImporter();\n      case \"chromecsv\":\n      case \"operacsv\":\n      case \"vivaldicsv\":\n        return new ChromeCsvImporter();\n      case \"firefoxcsv\":\n        return new FirefoxCsvImporter();\n      case \"upmcsv\":\n        return new UpmCsvImporter();\n      case \"saferpasscsv\":\n        return new SaferPassCsvImporter();\n      case \"safaricsv\":\n        return new SafariCsvImporter();\n      case \"meldiumcsv\":\n        return new MeldiumCsvImporter();\n      case \"1password1pif\":\n        return new OnePassword1PifImporter();\n      case \"1password1pux\":\n        return new OnePassword1PuxImporter();\n      case \"1passwordwincsv\":\n        return new OnePasswordWinCsvImporter();\n      case \"1passwordmaccsv\":\n        return new OnePasswordMacCsvImporter();\n      case \"keepercsv\":\n        return new KeeperCsvImporter();\n      // case \"keeperjson\":\n      //   return new KeeperJsonImporter();\n      case \"passworddragonxml\":\n        return new PasswordDragonXmlImporter();\n      case \"enpasscsv\":\n        return new EnpassCsvImporter();\n      case \"enpassjson\":\n        return new EnpassJsonImporter();\n      case \"pwsafexml\":\n        return new PasswordSafeXmlImporter();\n      case \"dashlanecsv\":\n        return new DashlaneCsvImporter();\n      case \"dashlanejson\":\n        return new DashlaneJsonImporter();\n      case \"msecurecsv\":\n        return new MSecureCsvImporter();\n      case \"stickypasswordxml\":\n        return new StickyPasswordXmlImporter();\n      case \"truekeycsv\":\n        return new TrueKeyCsvImporter();\n      case \"clipperzhtml\":\n        return new ClipperzHtmlImporter();\n      case \"roboformcsv\":\n        return new RoboFormCsvImporter();\n      case \"ascendocsv\":\n        return new AscendoCsvImporter();\n      case \"passwordbossjson\":\n        return new PasswordBossJsonImporter();\n      case \"zohovaultcsv\":\n        return new ZohoVaultCsvImporter();\n      case \"splashidcsv\":\n        return new SplashIdCsvImporter();\n      case \"passkeepcsv\":\n        return new PassKeepCsvImporter();\n      case \"gnomejson\":\n        return new GnomeJsonImporter();\n      case \"passwordagentcsv\":\n        return new PasswordAgentCsvImporter();\n      case \"passpackcsv\":\n        return new PasspackCsvImporter();\n      case \"passmanjson\":\n        return new PassmanJsonImporter();\n      case \"avastcsv\":\n        return new AvastCsvImporter();\n      case \"avastjson\":\n        return new AvastJsonImporter();\n      case \"fsecurefsk\":\n        return new FSecureFskImporter();\n      case \"kasperskytxt\":\n        return new KasperskyTxtImporter();\n      case \"remembearcsv\":\n        return new RememBearCsvImporter();\n      case \"passwordwallettxt\":\n        return new PasswordWalletTxtImporter();\n      case \"mykicsv\":\n        return new MykiCsvImporter();\n      case \"securesafecsv\":\n        return new SecureSafeCsvImporter();\n      case \"logmeoncecsv\":\n        return new LogMeOnceCsvImporter();\n      case \"blackberrycsv\":\n        return new BlackBerryCsvImporter();\n      case \"buttercupcsv\":\n        return new ButtercupCsvImporter();\n      case \"codebookcsv\":\n        return new CodebookCsvImporter();\n      case \"encryptrcsv\":\n        return new EncryptrCsvImporter();\n      case \"yoticsv\":\n        return new YotiCsvImporter();\n      case \"nordpasscsv\":\n        return new NordPassCsvImporter();\n      case \"psonojson\":\n        return new PsonoJsonImporter();\n      case \"passkyjson\":\n        return new PasskyJsonImporter();\n      default:\n        return null;\n    }\n  }\n\n  private async handleIndividualImport(importResult: ImportResult) {\n    const request = new ImportCiphersRequest();\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.folders != null) {\n      for (let i = 0; i < importResult.folders.length; i++) {\n        const f = await this.folderService.encrypt(importResult.folders[i]);\n        request.folders.push(new FolderWithIdRequest(f));\n      }\n    }\n    if (importResult.folderRelationships != null) {\n      importResult.folderRelationships.forEach((r) =>\n        request.folderRelationships.push(new KvpRequest(r[0], r[1]))\n      );\n    }\n    return await this.importApiService.postImportCiphers(request);\n  }\n\n  private async handleOrganizationalImport(importResult: ImportResult, organizationId: string) {\n    const request = new ImportOrganizationCiphersRequest();\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      importResult.ciphers[i].organizationId = organizationId;\n      const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.collections != null) {\n      for (let i = 0; i < importResult.collections.length; i++) {\n        importResult.collections[i].organizationId = organizationId;\n        const c = await this.collectionService.encrypt(importResult.collections[i]);\n        request.collections.push(new CollectionWithIdRequest(c));\n      }\n    }\n    if (importResult.collectionRelationships != null) {\n      importResult.collectionRelationships.forEach((r) =>\n        request.collectionRelationships.push(new KvpRequest(r[0], r[1]))\n      );\n    }\n    return await this.importApiService.postImportOrganizationCiphers(organizationId, request);\n  }\n\n  private badData(c: CipherView) {\n    return (\n      (c.name == null || c.name === \"--\") &&\n      c.type === CipherType.Login &&\n      c.login != null &&\n      Utils.isNullOrWhitespace(c.login.password)\n    );\n  }\n\n  private handleServerError(errorResponse: ErrorResponse, importResult: ImportResult): Error {\n    if (errorResponse.validationErrors == null) {\n      return new Error(errorResponse.message);\n    }\n\n    let errorMessage = \"\";\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const i = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Ciphers\":\n          item = importResult.ciphers[i];\n          itemType = CipherType[item.type];\n          break;\n        case \"Folders\":\n          item = importResult.folders[i];\n          itemType = \"Folder\";\n          break;\n        case \"Collections\":\n          item = importResult.collections[i];\n          itemType = \"Collection\";\n          break;\n        default:\n          return;\n      }\n\n      if (index > 0) {\n        errorMessage += \"\\n\\n\";\n      }\n\n      if (itemType !== \"Folder\" && itemType !== \"Collection\") {\n        errorMessage += \"[\" + (i + 1) + \"] \";\n      }\n\n      errorMessage += \"[\" + itemType + '] \"' + item.name + '\": ' + value;\n    });\n\n    return new Error(errorMessage);\n  }\n}\n"],"names":["constructor","modalRef","config","userVerificationService","formBuilder","platformUtilsService","i18nService","confirmDescription","this","data","confirmButtonText","modalTitle","secret","submit","verifyUser","value","e","showToast","t","close","UserVerificationPromptComponent","cryptoService","exportService","eventCollectionService","policyService","win","logService","fileDownloadService","dialogService","onSaved","disabledByPolicy","exportForm","group","format","filePassword","confirmFilePassword","fileEncryptionType","formatOptions","name","destroy$","Subject","ngOnInit","policyAppliesToActiveUser$","pipe","takeUntil","subscribe","policyAppliesToActiveUser","checkExportDisabled","merge","get","valueChanges","startWith","adjustValidators","ngOnDestroy","next","disable","encryptedFormat","doExport","formPromise","getExportData","downloadFile","saved","collectEvent","setValue","clearValidators","error","warningDialog","message","openSimpleDialog","title","key","content","acceptButtonText","type","emit","getPasswordProtectedExport","getExport","getFileName","prefix","extension","collect","reset","controls","enable","csv","fileName","download","blobData","blobOptions","ExportComponent","modalService","super","window","encryptedExportType","isFileEncryptedExport","markAllAsTouched","valid","isAccountEncryptedExport","ref","open","allowMultipleModals","onClosedPromise","ImportSuccessDialogComponent","dialogRef","dataSource","buildResultList","logins","cards","identities","secureNotes","ciphers","map","c","list","push","icon","count","folders","length","collections","FilePasswordPromptComponent","markAsTouched","cancel","ImportComponent","importService","router","syncService","loading","importBlockedByPolicy","organizationId","successNavigate","setImportOptions","firstValueFrom","importer","getImporter","getFilePassword","files","document","getElementById","fileContents","getFileContents","result","import","fullSync","navigate","getFormatInstructionTitle","results","featuredImportOptions","concat","importOptions","filter","o","id","regularImportOptions","sort","a","b","collator","compare","localeCompare","setSelectedFile","event","fileInputEl","target","fileSelected","heightAuto","buttonsStyling","iconHtml","input","inputValue","inputAttributes","readonly","titleText","text","showConfirmButton","onOpen","popupEl","querySelector","scrollTo","file","extract1PuxContent","Promise","resolve","reject","reader","FileReader","readAsText","onload","evt","pre","DOMParser","parseFromString","textContent","onerror","loadAsync","then","zip","async","BoxRowDirective","elRef","el","nativeElement","formEls","Array","from","querySelectorAll","forEach","formEl","addEventListener","classList","add","remove","onClick","contains","tagName","toLowerCase","inputEl","click","focus","ExportScopeCalloutComponent","organizationService","stateService","show","hasOrganizations","scopeConfig","description","scopeIdentifier","getEmail","ImportApiServiceAbstraction","ImportApiService","apiService","postImportCiphers","request","send","postImportOrganizationCiphers","ImportServiceAbstraction","CollectionWithIdRequest","collection","ImportCiphersRequest","folderRelationships","ImportOrganizationCiphersRequest","collectionRelationships","KvpRequest","success","newLineRegex","passwordFieldNames","usernameFieldNames","notesFieldNames","uriFieldNames","parseCsvOptions","encoding","skipEmptyLines","organization","parseXml","doc","parseCsv","header","options","parseOptions","Object","assign","splitNewLine","join","trim","errors","row","warning","parseSingleRowCsv","rowData","isNullOrWhitespace","parsedRow","makeUriArray","uri","loginUri","fixUri","match","returnArr","u","indexOf","substring","nameFromUrl","url","hostname","startsWith","replace","str","getValueOrDefault","defaultValue","split","getCardBrand","cardNum","re","RegExp","test","setCardExpiration","cipher","expiration","parts","month","year","substr","card","expMonth","expYear","moveFoldersToCollections","r","f","querySelectorDirectChild","parentEl","query","els","querySelectorAllDirectChild","parentNode","initLoginCipher","favorite","notes","fields","login","cleanupCipher","processKvp","search","field","processFolder","folderName","folderIndex","addFolder","i","convertToNoteIfNeeded","username","password","uris","secureNote","processFullName","fullName","nameParts","identity","firstName","lastName","middleName","slice","AscendoCsvImporter","parse","val","fieldLower","AvastCsvImporter","web","AvastJsonImporter","JSON","custName","note","pwd","loginName","label","cardholderName","holderName","number","cardNumber","code","cvv","brand","expirationDate","AviraCsvImporter","website","secondary_username","BlackBerryCsvImporter","grouping","fav","extra","ChromeCsvImporter","androidPatternRegex","BitwardenCsvImporter","col","addCollection","collectionIndex","folder","reprompt","parseInt","console","delimPosition","lastIndexOf","totp","login_totp","login_username","login_password","login_uri","BitwardenJsonImporter","items","encrypted","parseEncrypted","parseDecrypted","encKeyValidation_DO_NOT_EDIT","orgKey","getOrgKey","encKeyValidation","decryptToUtf8","errorMessage","groupingsMap","Map","view","decrypt","set","collectionIds","passwordHistory","folderId","has","cId","BitwardenPasswordProtectedImporter","promptForPassword_callback","parsedData","passwordProtected","cannotParseFile","checkPassword","encData","clearTextData","jdoc","makePinKey","salt","kdfType","kdfIterations","kdfMemory","kdfParallelism","BlurCsvImporter","domain","email","OfficialProps","ButtercupCsvImporter","URL","processingCustomFields","prop","hasOwnProperty","ClipperzHtmlImporter","textarea","entry","currentVersion","property","actionType","labelLower","CodebookCsvImporter","Category","Favorite","Entry","Note","Username","Email","Password","TOTP","Website","Phone","PIN","Account","Date","_mappedCredentialsColumns","Set","_mappedPersonalInfoAsIdentityColumns","_mappedSecureNoteColumns","DashlaneCsvImporter","x","parsePersonalInformationRecordAsIdentity","rowKeys","keys","category","parseCredentialsRecord","parsePaymentRecord","parseIdRecord","parsePersonalInformationRecord","parseSecureNoteRecords","otpSecret","importUnmappedFields","account_name","mappedValues","cc_number","expiration_month","expiration_year","account_holder","account_number","licenseNumber","passportNumber","state","ssn","first_name","middle_name","last_name","item_name","dataRow","phone","phone_number","address1","address","city","postalCode","country","item","HandledResults","DashlaneJsonImporter","ADDRESS","processAddress","AUTHENTIFIANT","processAuth","BANKSTATEMENT","processNote","IDCARD","PAYMENTMEANS_CREDITCARD","processCard","IDENTITY","processIdentity","credential","secondaryLogin","obj","pseudo","addressName","addressFull","zipcode","toUpperCase","bank","owner","nameProperty","toString","EncryptrCsvImporter","Label","Notes","Text","CVV","expiry","Expiry","expParts","EnpassCsvImporter","firstRow","containsField","fieldValue","fieldName","fieldNameLower","androidUrlRegex","EnpassJsonImporter","foldersMap","foldersIndexMap","folderTree","buildFolderTree","flattenFolderTree","template_type","processLogin","some","urls","cleanedValue","sensitive","uuid","children","parent_uuid","titlePrefix","tree","FirefoxCsvImporter","FskEntryTypesEnum","FSecureFskImporter","parseEntry","service","Login","handleLoginEntry","CreditCard","handleCreditCardEntry","creditNumber","creditCvv","creditExpiry","GnomeJsonImporter","keyRing","display_name","attributes","username_value","attr","NotesHeader","ApplicationsHeader","WebsitesHeader","Delimiter","KasperskyTxtImporter","notesData","applicationsData","websitesData","workingData","parseDataCategory","applications","websites","n","w","nameKey","p","itemComment","itemCommentKey","l","colonIndex","size","KeePass2XmlImporter","KeePassFileNode","RootNode","rootGroup","traverse","node","isRootNode","groupPrefixName","groupName","nameEl","cipherIndex","entryString","valueEl","keyEl","attrs","ProtectInMemory","KeePassXCsvImporter","Title","Group","KeeperCsvImporter","LastPassCsvImporter","hasFolder","buildBaseCipher","parseSecureNote","parseCard","parseIdentity","ccnum","cardCipher","profilename","firstname","lastname","ccname","cccsc","ccexp","ccexpParts","middlename","company","address2","address3","charAt","extraParts","processedNote","typeParts","mappedData","parseSecureNoteMapping","Number","undefined","monthString","getMonth","isNaN","Company","State","Country","dataObj","processingNotes","extraPart","LogMeOnceCsvImporter","MeldiumCsvImporter","DisplayName","UserName","Url","MSecureCsvImporter","mappedBaseColumns","_mappedUserAccountColumns","_mappedCreditCardColumns","_mappedIdentityColumns","_mappedIdCardColumns","_mappedTwoFaColumns","_mappedUserNoteColumns","MykiCsvImporter","nickname","additionalInfo","twofaSecret","authToken","cardName","exp_month","exp_year","firstAddressLine","secondAddressLine","zipCode","idType","idName","idCountry","idNumber","NordPassCsvImporter","record","recordType","evaluateType","cardholdername","cardnumber","cvc","expirydate","full_name","CategoryEnum","LoginFieldTypeEnum","OnePassword1PifImporter","line","trashed","hmac","processStandardItem","processWinOpVaultItem","overview","URLs","details","parsePasswordHistory","notesPlain","parseFields","sections","section","openContents","faveIndex","typeName","location","secureContents","maxSize","h","time","ph","lastUsedDate","designationKey","valueKey","k","toUTCString","fieldDesignation","street","fieldType","OnePassword1PuxImporter","accounts","vaults","vault","categoryUuid","Database","WirelessRouter","Server","API_Credential","BankAccount","SecureNote","SoftwareLicense","EmailAccount","MedicalRecord","Identity","DriversLicense","OutdoorLicense","Membership","Passport","RewardsProgram","SocialSecurityNumber","favIndex","processOverview","processLoginFields","processDetails","processSections","tags","capitalize","inputString","loginFields","loginField","designation","CheckBox","parseSectionFields","anyField","getFieldName","extractValue","fillLogin","fillApiCredentials","fillCreditCard","fillBankAccount","fillIdentity","fillDriversLicense","fillOutdoorLicense","fillMembership","fillPassport","fillRewardsProgram","fillSSN","email_address","provider","guarded","date","monthYear","historyItems","CipherImportContext","importRecord","lowerProperty","IgnoredProperties","OnePasswordCsvImporter","loginPropertyParsers","setLoginUsername","setLoginPassword","setLoginUris","creditCardPropertyParsers","setCreditCardNumber","setCreditCardVerification","setCreditCardCardholderName","setCreditCardExpiry","identityPropertyParsers","setIdentityFirstName","setIdentityInitial","setIdentityLastName","setIdentityUserName","setIdentityEmail","setIdentityPhone","setIdentityCompany","quoteChar","escapeChar","getProp","setNotes","setCipherType","altUsername","context","setKnownLoginValue","setKnownCreditCardValue","setKnownIdentityValue","setUnknownValue","entries","reduce","agg","getPropByRegexp","regexp","matchingKeys","getPropIncluding","includesMap","includes","func","bind","readableDate","OnePasswordMacCsvImporter","OnePasswordWinCsvImporter","setIdentityAddress","expSplit","PadlockCsvImporter","headers","v","tag","PassKeepCsvImporter","getValue","PasskyJsonImporter","passkyExport","passwords","PassmanJsonImporter","otp","custom_fields","customField","field_type","PasspackCsvImporter","tagsJson","Tags","tagJson","__parsed_extra","fieldsJson","extraFields","fieldJson","PasswordAgentCsvImporter","newVersion","altFormat","PasswordBossJsonImporter","login_url","identifiers","valObj","expDate","getFullYear","cf","PasswordDragonXmlImporter","records","categoryText","accountName","userId","PasswordSafeXmlImporter","passwordSafe","notesDelimiter","getAttribute","groupText","PasswordWalletTxtImporter","PsonoJsonImporter","WEBSITE_mappedValues","APP_PWD_mappedValues","BOOKMARK_mappedValues","NOTES_mappedValues","TOTP_mappedValues","ENV_VARIABLES_mappedValues","GPG_mappedValues","psonoExport","parseFolders","handleItemParsing","parsePsonoItem","parseWebsiteLogins","parseApplicationPasswords","parseEnvironmentVariables","parseTOTP","parseBookmarks","parseNotes","website_password_title","website_password_notes","website_password_username","website_password_password","website_password_url","website_password_auto_submit","website_password_url_filter","application_password_title","application_password_notes","application_password_username","application_password_password","bookmark_title","bookmark_notes","bookmark_url","note_title","note_notes","totp_title","totp_notes","totp_code","environment_variables_title","environment_variables_notes","environment_variables_variables","KvPair","parseGPG","mail_gpg_own_key_title","mail_gpg_own_key_public","mail_gpg_own_key_name","mail_gpg_own_key_email","mail_gpg_own_key_private","RememBearCsvImporter","trash","cardholder","verification","expiryMonth","expMonthNumber","expiryYear","expYearNumber","pin","RoboFormCsvImporter","Folder","Name","Pwd","Rf_fields","SafariCsvImporter","OTPAuth","SafeInCloudXmlImporter","labelEl","cardEl","labelIdEl","labelId","fieldEl","notesEl","setPassword","candidates","choice","SaferPassCsvImporter","SecureSafeCsvImporter","Comment","SplashIdCsvImporter","parseFieldsToNotes","startIndex","StickyPasswordXmlImporter","loginNodes","loginNode","accountId","usernameText","passwordText","linkText","notesText","groupId","accountLogin","account","parentElement","buildGroupText","PropertiesToIgnore","TrueKeyCsvImporter","memo","kind","expiryDate","document_content","UpmCsvImporter","YotiCsvImporter","ZohoVaultCsvImporter","ChamberName","parseData","SecretData","CustomData","ImportService","cipherService","folderService","importApiService","collectionService","getImportOptions","importResult","Error","halfway","Math","floor","last","badData","handleOrganizationalImport","handleIndividualImport","errorResponse","handleServerError","getImporterInstance","encrypt","validationErrors","index","itemType"],"sourceRoot":""}