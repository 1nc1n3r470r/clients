{"version":3,"file":"581.2cab05a33b4ba947be4f.js","mappings":"woBAmBO,MAAM,EAMGA,uBACZ,OAAOC,KAAKC,iBACd,CAkBAC,YACYC,EACAC,EACAC,EACAC,EACAC,EACFC,EACEC,EACFC,EACAC,EACAC,EACEC,EACAC,GAXA,KAAAX,cAAAA,EACA,KAAAC,YAAAA,EACA,KAAAC,qBAAAA,EACA,KAAAC,cAAAA,EACA,KAAAC,uBAAAA,EACF,KAAAC,cAAAA,EACE,KAAAC,IAAAA,EACF,KAAAC,WAAAA,EACA,KAAAC,wBAAAA,EACA,KAAAC,YAAAA,EACE,KAAAC,oBAAAA,EACA,KAAAC,cAAAA,EArCF,KAAAC,QAAU,IAAI,MAGhB,KAAAd,mBAAoB,EAM5B,KAAAe,WAAahB,KAAKY,YAAYK,MAAM,CAClCC,OAAQ,CAAC,QACTC,OAAQ,CAAC,IACTC,aAAc,CAAC,GAAI,KAAWC,UAC9BC,oBAAqB,CAAC,GAAI,KAAWD,UACrCE,mBAAoB,CAAC,KAAoBC,oBAG3C,KAAAC,cAAgB,CACd,CAAEC,KAAM,QAASC,MAAO,QACxB,CAAED,KAAM,OAAQC,MAAO,OACvB,CAAED,KAAM,oBAAqBC,MAAO,mBAG9B,KAAAC,SAAW,IAAIC,EAAA,CAepB,CAEGC,W,yCACJ9B,KAAKQ,cACFuB,2BAA2B,KAAWC,4BACtCC,MAAK,EAAAC,EAAA,GAAUlC,KAAK4B,WACpBO,WAAWC,IACVpC,KAAKC,kBAAoBmC,EACrBpC,KAAKD,kBACPC,KAAKgB,WAAWqB,S,KAItB,EAAAC,EAAA,GACEtC,KAAKgB,WAAWuB,IAAI,UAAUC,aAC9BxC,KAAKgB,WAAWuB,IAAI,sBAAsBC,cAEzCP,MAAK,EAAAC,EAAA,GAAUlC,KAAK4B,WACpBK,MAAK,EAAAQ,EAAA,GAAU,IACfN,WAAU,IAAMnC,KAAK0C,oBAC1B,G,CAEAC,cACE3C,KAAK4B,SAASgB,MAChB,CAEIC,sBACF,MAAuB,mBAAhB7C,KAAKkB,MACd,CAEgB4B,W,yCACd,IACE9C,KAAK+C,YAAc/C,KAAKgD,gBACxB,MAAMC,QAAajD,KAAK+C,YACxB/C,KAAKkD,aAAaD,GAClBjD,KAAKmD,cACCnD,KAAKoD,eACXpD,KAAKgB,WAAWuB,IAAI,UAAUc,SAAS,IACvCrD,KAAKgB,WAAWsC,iB,CAChB,MAAOC,GACPvD,KAAKU,WAAW8C,MAAMD,E,CAE1B,G,CAEME,S,yCACJ,GAAIzD,KAAKD,iBAMP,YALAC,KAAKK,qBAAqBqD,UACxB,QACA,KACA1D,KAAKI,YAAYuD,EAAE,sCAMvB,WAD8B3D,KAAK4D,iBAEjC,OAEF,MAAMzC,EAASnB,KAAKgB,WAAWuB,IAAI,UAAUZ,MAE7C,UACQ3B,KAAKW,wBAAwBkD,WAAW1C,E,CAC9C,MAAOoC,GAEP,YADAvD,KAAKK,qBAAqBqD,UAAU,QAAS1D,KAAKI,YAAYuD,EAAE,iBAAkBJ,EAAEO,Q,CAItF9D,KAAK8C,UACP,G,CAEMc,gB,yCACJ,OAAI5D,KAAK6C,sBACM7C,KAAKc,cAAciD,iBAAiB,CAC/CC,MAAO,CAAEC,IAAK,sBACdC,QACElE,KAAKI,YAAYuD,EAAE,2BACnB,IACA3D,KAAKI,YAAYuD,EAAE,+BACrBQ,iBAAkB,CAAEF,IAAK,eACzBG,KAAM,KAAiBC,gBAGZrE,KAAKc,cAAciD,iBAAiB,CAC/CC,MAAO,CAAEC,IAAK,sBACdC,QAAS,CAAED,IAAK,qBAChBE,iBAAkB,CAAEF,IAAK,eACzBG,KAAM,KAAiBC,SAG7B,G,CAEUlB,QACRnD,KAAKe,QAAQuD,MACf,CAEUtB,gBACR,MACkB,mBAAhBhD,KAAKkB,QACLlB,KAAKuB,qBAAuB,KAAoBgD,cAEzCvE,KAAKM,cAAckE,2BAA2BxE,KAAKoB,cAEnDpB,KAAKM,cAAcmE,UAAUzE,KAAKkB,OAAQ,KAErD,CAEUwD,YAAYC,GACpB,IAAIC,EAAY5E,KAAKkB,OASrB,MARoB,mBAAhBlB,KAAKkB,SAELyD,EADY,MAAVA,EACO,YAEA,aAAeA,EAE1BC,EAAY,QAEP5E,KAAKM,cAAcoE,YAAYC,EAAQC,EAChD,CAEgBxB,e,+CACRpD,KAAKO,uBAAuBsE,QAAQ,KAAUC,yBACtD,G,CAEI5D,aACF,OAAOlB,KAAKgB,WAAWuB,IAAI,UAAUZ,KACvC,CAEIP,mBACF,OAAOpB,KAAKgB,WAAWuB,IAAI,gBAAgBZ,KAC7C,CAEIL,0BACF,OAAOtB,KAAKgB,WAAWuB,IAAI,uBAAuBZ,KACpD,CAEIJ,yBACF,OAAOvB,KAAKgB,WAAWuB,IAAI,sBAAsBZ,KACnD,CAEAe,mBACE1C,KAAKgB,WAAWuB,IAAI,uBAAuBwC,QAC3C/E,KAAKgB,WAAWuB,IAAI,gBAAgBwC,QAEhC/E,KAAK6C,iBAAmB7C,KAAKuB,oBAAsB,KAAoBgD,eACzEvE,KAAKgB,WAAWgE,SAAS5D,aAAa6D,SACtCjF,KAAKgB,WAAWgE,SAAS1D,oBAAoB2D,WAE7CjF,KAAKgB,WAAWgE,SAAS5D,aAAaiB,UACtCrC,KAAKgB,WAAWgE,SAAS1D,oBAAoBe,UAEjD,CAEQa,aAAagC,GACnB,MAAMC,EAAWnF,KAAK0E,cACtB1E,KAAKa,oBAAoBuE,SAAS,CAChCD,SAAUA,EACVE,SAAUH,EACVI,YAAa,CAAElB,KAAM,eAEzB,E,iCAtMW,GAAe,4I,mBAAf,EAAe,8B,wdCN1B,0B,gBACE,S,gBACF,S,MAF0B,gDACxB,+E,yBAEF,uC,sBACE,wC,2BASM,qBAA0D,SAAY,S,yBAA9B,uBAAkB,sB,0CA6D5D,SACE,kDACE,+CAAW,S,gBAA2B,QACtC,8CAOA,gDAKE,mGACD,QACD,gDAAU,U,iBAAwC,QACpD,iCACA,oDACE,iDAAW,U,iBAAkC,QAC7C,gDAOA,iDAKE,mGACD,QACH,iCACF,8B,0BAlCe,0CAaT,6CAEQ,wDAGC,kDAaT,4C,2BAvFR,SACE,wCACE,4CACE,S,gBACF,QAEA,4CACE,0CACE,kDASF,mCACA,2CACE,kDACE,U,iBACF,QACF,mCACF,iCAEA,8CACE,U,iBACF,QAEA,8CACE,2CACE,kDASF,mCACA,2CACE,kDAA2E,U,iBAEzE,QACJ,mCACF,iCAEA,8CACE,U,iBACF,QACF,+BACA,sCAEA,6DAqCF,8B,sBAxFM,gFAUI,+DAA8C,yEAO9C,yFAMJ,kGAUI,4DAA2C,sEAM8B,iDAO7E,kGAKW,gF,gFArFvB,oBAEE,6DAAY,QAAAX,SAAQ,IAKpB,iCACE,gCAAI,S,gBAA0B,QAChC,wBAEA,kDAGA,8DAKA,qCACE,qCACE,gDACE,+CAA2C,U,iBAAyB,QACpE,4CACE,qDACF,+BACF,6BACF,2BACF,yBACA,mCACE,sCACE,yDA6FA,6CAME,wC,iBACA,wCAAM,U,iBAA4B,QACpC,6BACF,2BACF,yBACF,sB,oCApIE,oCAA4B,0BAKtB,0CAGgE,0CAKnE,2CAM8C,0CAEnB,0CAOX,oDAgGb,yDAA6C,0CAGT,+CAC9B,4C,EC9GP,MAAM8B,UAAwB,EAKnCrF,YACEC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAE,EACAC,EACAC,EACAC,EACQ2E,EACR1E,GAEA2E,MACEtF,EACAC,EACAC,EACAC,EACAC,EACAC,EACAkF,OACAhF,EACAC,EACAC,EACAC,EACAC,GAfM,KAAA0E,aAAAA,EAdV,KAAAG,oBAAsB,IA+BtB,CAEMlC,S,yCACJ,GAAIzD,KAAK4F,uBAAyB5F,KAAKoB,cAAgBpB,KAAKsB,oBAM1D,YALAtB,KAAKK,qBAAqBqD,UACxB,QACA1D,KAAKI,YAAYuD,EAAE,iBACnB3D,KAAKI,YAAYuD,EAAE,iDAMvB,GADA3D,KAAKgB,WAAW6E,oBACX7F,KAAKgB,WAAW8E,MACnB,OAGF,GAAI9F,KAAKD,iBAMP,YALAC,KAAKK,qBAAqBqD,UACxB,QACA,KACA1D,KAAKI,YAAYuD,EAAE,6CAKI3D,KAAK6D,eAKhC7D,KAAK8C,UACP,G,CAEUK,QACRsC,MAAMtC,QACNnD,KAAKK,qBAAqBqD,UAAU,UAAW,KAAM1D,KAAKI,YAAYuD,EAAE,iBAC1E,CAEQE,aACN,IAAIkC,EAAqB,oBACrB/F,KAAK4F,sBACPG,EAAqB,iCACZ/F,KAAKgG,2BACdD,EAAqB,2BAGvB,MAAME,EAAMjG,KAAKwF,aAAaU,KAAK,KAAiC,CAClEC,qBAAqB,EACrBlD,KAAM,CACJ8C,mBAAoBA,EACpBK,kBAAmB,cACnBC,WAAY,wBAIhB,GAAW,MAAPJ,EAIJ,OAAOA,EAAIK,iBACb,CAEIV,4BACF,MACkB,mBAAhB5F,KAAKkB,QACLlB,KAAKuB,qBAAuB,KAAoBgD,aAEpD,CAEIyB,+BACF,MACkB,mBAAhBhG,KAAKkB,QACLlB,KAAKuB,qBAAuB,KAAoBC,gBAEpD,E,iCA5GW+D,GAAe,yI,mBAAfA,EAAe,0sDDtB5B,cACA,wCAwIA,e,MAnIG,oC,qbEQK,gBACE,wCACE,0CACA,S,gBACF,QACA,wCAAY,SAAa,QAC3B,gC,yBAJO,4CACH,kEAEU,uB,2BALd,6C,iBAOF,qB,yBAP2B,sC,ECC1B,MAAMgB,EAGXrG,YAAmBsG,EAAkDvD,GAAlD,KAAAuD,UAAAA,EAAkD,KAAAvD,KAAAA,EAF3D,KAAAwD,WAAa,IAAI,GAE+D,CAE1F3E,WACmB,MAAb9B,KAAKiD,OACPjD,KAAKyG,WAAWxD,KAAOjD,KAAK0G,kBAEhC,CAEQA,kBACN,IAAIC,EAAS,EACTC,EAAQ,EACRC,EAAa,EACbC,EAAc,EAClB9G,KAAKiD,KAAK8D,QAAQC,KAAKC,IACrB,OAAQA,EAAE7C,MACR,KAAK,IAAW8C,MACdP,IACA,MACF,KAAK,IAAWQ,KACdP,IACA,MACF,KAAK,IAAWQ,WACdN,IACA,MACF,KAAK,IAAWO,SACdR,I,IAON,MAAMS,EAAqB,GAuB3B,OAtBIX,EAAS,GACXW,EAAKC,KAAK,CAAEC,KAAM,QAASpD,KAAM,YAAaqD,MAAOd,IAEnDC,EAAQ,GACVU,EAAKC,KAAK,CAAEC,KAAM,cAAepD,KAAM,WAAYqD,MAAOb,IAExDC,EAAa,GACfS,EAAKC,KAAK,CAAEC,KAAM,UAAWpD,KAAM,eAAgBqD,MAAOZ,IAExDC,EAAc,GAChBQ,EAAKC,KAAK,CAAEC,KAAM,cAAepD,KAAM,iBAAkBqD,MAAOX,IAE9D9G,KAAKiD,KAAKyE,QAAQC,OAAS,GAC7BL,EAAKC,KAAK,CAAEC,KAAM,SAAUpD,KAAM,UAAWqD,MAAOzH,KAAKiD,KAAKyE,QAAQC,SAEpE3H,KAAKiD,KAAK2E,YAAYD,OAAS,GACjCL,EAAKC,KAAK,CACRC,KAAM,aACNpD,KAAM,cACNqD,MAAOzH,KAAKiD,KAAK2E,YAAYD,SAG1BL,CACT,E,iCA3DWf,GAA4B,kBAGU,MAAW,E,mBAHjDA,EAA4B,sWDhBzC,sBACE,kCACE,S,gBACF,QAEA,mCACE,kCAAM,S,iBAAoE,QAC1E,2CACE,iCACE,sCACE,0CAAY,U,iBAAmB,QAC/B,0CAAY,U,iBAAoB,QAClC,+BACF,6BACA,qDASF,2BACF,yBAEA,+BACE,wCACE,U,iBACF,QACF,yBACF,uBACA,gB,MA9BI,2DAIM,+EACK,0CAGO,oCACA,qCAiBhB,uD,6LEpBC,MAAMsB,EAGX3H,YAAoB4H,GAAA,KAAAA,SAAAA,EAFpB,KAAA1G,aAAe,IAAI,KAAY,GAAI,KAAWC,SAEL,CAEzCoC,SACEzD,KAAKoB,aAAa2G,gBACb/H,KAAKoB,aAAa0E,OAIvB9F,KAAK8H,SAASE,MAAMhI,KAAKoB,aAAaO,MACxC,CAEAsG,SACEjI,KAAK8H,SAASE,MAAM,KACtB,E,iCAhBWH,GAA2B,a,mBAA3BA,EAA2B,u9BCPxC,cACA,+B,gBAME,iCACE,sCAAY,oCAAY,EAAApE,QAAQ,IAC9B,sCACE,wCACE,U,uCACF,QACA,yCAGE,U,iBACA,6BACE,iDAAW,U,iBAAkC,QAC7C,+CAQA,gDACF,iCACF,+BACA,0CAGE,+CACE,4CAAM,U,iBAAyB,QACjC,iCACA,+CAAuD,iCAAS,EAAAwE,QAAQ,IACtE,4CAAM,U,iBAAqB,QAC7B,iCACF,+BACF,6BACF,2BACF,yBACF,uBACA,gB,MAvCE,kEAMQ,2FAKA,oFAEa,mDAKT,6CAWI,2CAGA,sC,yfCnClB,0BACE,S,gBACF,S,MADE,gF,0BAeQ,qBAAiE,SAAY,S,yBAA7B,sBAAiB,sB,2BAG/D,qBAAyD,SAAY,S,yBAA7B,sBAAiB,sB,2BAF3D,SACE,+CACA,oDACF,iC,qBADwB,yC,wBAO9B,SACE,yEACA,gBACE,kEAA4C,QAEhD,0B,uBACA,SACE,yEACA,gBACE,sEAAgD,QAEpD,0B,uBACA,SACE,6IAEF,Q,uBACA,SACE,4HAEF,Q,wBACA,SACE,yKAEF,Q,wBACA,SACE,2IAEF,Q,wBACA,SACE,gMAEF,Q,wBACA,SACE,kJAEF,Q,wBACA,SACE,mJAEF,Q,wBACA,SACE,4MAEF,Q,wBACA,SACE,yKAEF,Q,wBACA,SACE,iQAGF,Q,wBAWE,gBACE,8FACF,Q,2BALF,SAGE,8CAGA,yEACA,gBACE,oEAA8C,QAElD,2B,sBAPS,6C,yBAQT,SACE,yEACA,gBACE,qEAA+C,QAChD,mBACH,Q,wBACA,SACE,yEACA,gBACE,oEAA8C,QAC/C,mBACH,Q,wBACA,SAQE,yEACA,gBACE,uEAAiD,QAClD,mBACH,Q,wBACA,SACE,oPAGF,Q,wBACA,SACE,4TAIF,Q,wBACA,SACE,+LAEF,Q,wBACA,SACE,uJAEF,Q,wBACA,SACE,yQAGF,Q,wBACA,SACE,oLAEF,Q,wBACA,SACE,4IAEF,Q,wBACA,SACE,yMAEF,Q,wBACA,SACE,mNAEF,Q,wBACA,SACE,yQAGF,Q,wBACA,SACE,oYAIF,Q,wBACA,SACE,uSAGF,Q,wBACA,SACE,0OAGF,Q,wBACA,SACE,+KAEF,Q,wBACA,SACE,kVAIA,gBAAM,2BAAe,QAAO,mBAC9B,Q,wBACA,SACE,yMAEF,Q,wBACA,SACE,qLAEF,Q,wBACA,SACE,yGACA,gBACG,uCAA2B,QAE9B,qDAAiC,gBAAM,wBAAY,QAAO,2CAC1D,gBAAM,0CAA8B,QAAQ,8BAC5C,iBAAM,yEAA4D,QAAO,gDAC/D,iBAAM,8BAAiB,QAAQ,2CAC3C,Q,wBACA,SACE,kRAGF,Q,wBACA,SACE,kKAEF,Q,wBACA,SACE,4SAGF,Q,wBACA,SACE,qNAEF,Q,wBACA,SACE,uNAEF,Q,wBACA,SACE,0MAEF,Q,wBACA,SACE,2OAGF,Q,wBACA,SACE,wNAGF,Q,wBACA,SACE,4NAGF,Q,wBACA,SACE,4PAGF,Q,wBACA,SACE,oGACF,Q,wBACA,SACE,6JAEF,Q,wBACA,SACE,yOAGF,Q,wBACA,SACE,0KAEF,Q,wBACA,SACE,2KAEF,Q,wBACA,SACE,uRAGF,Q,wBACA,SACE,wIAEF,Q,wBACA,SACE,uMAEF,Q,wBACA,SACE,yKAEF,Q,2BA7QF,0BACE,mDAMA,mDAMA,mDAIA,mDAIA,qDAIA,sDAIA,sDAIA,sDAIA,sDAIA,sDAIA,sDAIA,sDAKA,mBAOA,sDAWA,sDAMA,sDAMA,sDAaA,sDAKA,sDAMA,sDAIA,sDAIA,sDAKA,sDAIA,sDAIA,sDAIA,sDAIA,sDAKA,sDAMA,sDAKA,sDAKA,sDAIA,sDAOA,sDAIA,sDAIA,uDAUA,sDAKA,sDAIA,sDAKA,sDAIA,sDAIA,sDAIA,sDAKA,sDAKA,sDAKA,sDAKA,sDAGA,sDAIA,sDAKA,sDAIA,sDAIA,wDAKA,wDAIA,wDAIA,wDAIF,2B,qBA9QyB,6CACR,6EAMA,gDAMA,gDAIA,6CAIA,4CAIA,mDAIA,+CAIA,gDAIA,2CAIA,iDAIA,+CAIA,8CAaZ,8FAUY,+CAMA,8CAOZ,0IAYY,sDAKA,8CAMA,+CAIA,8CAIA,gDAKA,iDAIA,+CAIA,sDAIA,+CAIA,iDAKA,gDAMA,gDAKA,+CAKA,qDAIA,iDAOA,gDAIA,gDAIA,8CAUA,qDAKA,gDAIA,gDAKA,6CAIA,8CAIA,+CAIA,iDAKA,iDAKA,sDAKA,4CAKA,kDAGA,iDAIA,kDAKA,iDAIA,gDAIA,gDAKA,4CAIA,8CAIA,8C,yCC1QZ,MAAMC,GAaXhI,YACYE,EACA+H,EACAC,EACA/H,EACAG,EACFE,EACE8E,EACA6C,EACAvH,GARA,KAAAV,YAAAA,EACA,KAAA+H,cAAAA,EACA,KAAAC,OAAAA,EACA,KAAA/H,qBAAAA,EACA,KAAAG,cAAAA,EACF,KAAAE,WAAAA,EACE,KAAA8E,aAAAA,EACA,KAAA6C,YAAAA,EACA,KAAAvH,cAAAA,EAnBZ,KAAAI,OAAqB,KAGrB,KAAAoH,SAAU,EAEA,KAAAC,eAAyB,KACzB,KAAA3G,SAAW,IAAIC,EAAA,EAEjB,KAAA2G,wBAAyB,CAY9B,CAEWC,4BACZ,OAAOzI,KAAKwI,sBACd,CAKgBE,qB,+CACR1I,KAAKoI,OAAOO,SAAS,CAAC,SAC9B,G,CAEA7G,WACE9B,KAAK4I,mBAEL5I,KAAKQ,cACFuB,2BAA2B,KAAW8G,mBACtC5G,MAAK,EAAAC,EAAA,GAAUlC,KAAK4B,WACpBO,WAAWC,IACVpC,KAAKwI,uBAAyBpG,CAAyB,GAE7D,CAEMqB,S,yCACJ,GAAIzD,KAAKyI,sBAMP,YALAzI,KAAKK,qBAAqBqD,UACxB,QACA,KACA1D,KAAKI,YAAYuD,EAAE,2CAKvB3D,KAAKsI,SAAU,EAEf,MAIMQ,EAAW9I,KAAKmI,cAAcY,YAClC/I,KAAKkB,QAL4B,IAAY,EAAD,gCAC5C,aAAalB,KAAKgJ,iBACpB,KAKEhJ,KAAKuI,gBAEP,GAAiB,OAAbO,EAOF,OANA9I,KAAKK,qBAAqBqD,UACxB,QACA1D,KAAKI,YAAYuD,EAAE,iBACnB3D,KAAKI,YAAYuD,EAAE,sBAErB3D,KAAKsI,SAAU,GAIjB,MACMW,EADSC,SAASC,eAAe,QAClBF,MACrB,KACY,MAATA,GAAkC,IAAjBA,EAAMtB,QACF,MAArB3H,KAAKoJ,cAA8C,KAAtBpJ,KAAKoJ,cAQnC,OANApJ,KAAKK,qBAAqBqD,UACxB,QACA1D,KAAKI,YAAYuD,EAAE,iBACnB3D,KAAKI,YAAYuD,EAAE,oBAErB3D,KAAKsI,SAAU,GAIjB,IAAIc,EAAepJ,KAAKoJ,aACxB,GAAa,MAATH,GAAiBA,EAAMtB,OAAS,EAClC,IACE,MAAMzD,QAAgBlE,KAAKqJ,gBAAgBJ,EAAM,IAClC,MAAX/E,IACFkF,EAAelF,E,CAEjB,MAAOX,GACPvD,KAAKU,WAAW8C,MAAMD,E,CAI1B,GAAoB,MAAhB6F,GAAyC,KAAjBA,EAO1B,OANApJ,KAAKK,qBAAqBqD,UACxB,QACA1D,KAAKI,YAAYuD,EAAE,iBACnB3D,KAAKI,YAAYuD,EAAE,oBAErB3D,KAAKsI,SAAU,GAIjB,IACE,MAAMgB,QAAetJ,KAAKmI,cAAcoB,OAAOT,EAAUM,EAAcpJ,KAAKuI,gBAG5EvI,KAAKc,cAAcoF,KAA4BK,EAA8B,CAC3EtD,KAAMqG,IAGRtJ,KAAKqI,YAAYmB,UAAS,SACpBxJ,KAAK0I,oB,CACX,MAAOnF,GACPvD,KAAKwD,MAAMD,GACXvD,KAAKU,WAAW8C,MAAMD,E,CAGxBvD,KAAKsI,SAAU,CACjB,G,CAEAmB,4BACE,GAAmB,MAAfzJ,KAAKkB,OACP,OAAO,KAGT,MAAMwI,EAAU1J,KAAK2J,sBAClBC,OAAO5J,KAAK6J,eACZC,QAAQC,GAAMA,EAAEC,KAAOhK,KAAKkB,SAC/B,OAAIwI,EAAQ/B,OAAS,EACZ3H,KAAKI,YAAYuD,EAAE,kBAAmB+F,EAAQ,GAAGhI,MAEnD,IACT,CAEUkH,mBACR5I,KAAK2J,sBAAwB,CAC3B,CACEK,GAAI,KACJtI,KAAM,MAAQ1B,KAAKI,YAAYuD,EAAE,UAAY,UAE5C3D,KAAKmI,cAAcwB,uBAExB3J,KAAK6J,cAAgB,IAAI7J,KAAKmI,cAAc8B,sBAAsBC,MAAK,CAACC,EAAGC,IAC3D,MAAVD,EAAEzI,MAA0B,MAAV0I,EAAE1I,MACd,EAEI,MAAVyI,EAAEzI,MAA0B,MAAV0I,EAAE1I,KACf,EAEK,MAAVyI,EAAEzI,MAA0B,MAAV0I,EAAE1I,KACf,EAGF1B,KAAKI,YAAYiK,SACpBrK,KAAKI,YAAYiK,SAASC,QAAQH,EAAEzI,KAAM0I,EAAE1I,MAC5CyI,EAAEzI,KAAK6I,cAAcH,EAAE1I,OAE/B,CAEA8I,gBAAgBC,GACd,MAAMC,EAAgCD,EAAME,OAC5C3K,KAAK4K,aAAeF,EAAYzB,MAAMtB,OAAS,EAAI+C,EAAYzB,MAAM,GAAK,IAC5E,CAEczF,MAAMA,G,+CACZ,SAAU,CACdqH,YAAY,EACZC,gBAAgB,EAChBtD,KAAM,QACNuD,SAAU,6DACVC,MAAO,WACPC,WAAYzH,EAAMM,QAClBoH,gBAAiB,CACfC,SAAU,QAEZC,UAAWpL,KAAKI,YAAYuD,EAAE,eAC9B0H,KAAMrL,KAAKI,YAAYuD,EAAE,mBACzB2H,mBAAmB,EACnBlF,kBAAmBpG,KAAKI,YAAYuD,EAAE,MACtC4H,OAASC,IACPA,EAAQC,cAAc,mBAAmBC,SAAS,EAAG,EAAE,GAG7D,G,CAEQrC,gBAAgBsC,GACtB,MAAoB,kBAAhB3L,KAAKkB,OACAlB,KAAK4L,mBAAmBD,GAG1B,IAAIE,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,WAAWP,EAAM,SACxBK,EAAOG,OAAUC,IACf,GAAoB,gBAAhBpM,KAAKkB,QAA0C,cAAdyK,EAAKvH,KAAsB,CAC9D,MAEMiI,GAFS,IAAIC,WACAC,gBAAiBH,EAAIzB,OAAerB,OAAQ,aAC/CmC,cAAc,OAC9B,OAAW,MAAPY,OACFP,EAAQO,EAAIG,kBAGdT,G,CAIFD,EAASM,EAAIzB,OAAerB,OAAO,EAErC0C,EAAOS,QAAU,KACfV,GAAQ,CACT,GAEL,CAEQH,mBAAmBD,GACzB,OAAO,IAAI,GACRe,UAAUf,GACVgB,MAAMC,GACEA,EAAIjB,KAAK,eAAekB,MAAM,YAEtCF,MACC,SAAiBzI,GACf,OAAOA,CACT,IACA,SAAeX,GACb,MAAO,EACT,GAEN,CAEMyF,kB,yCACJ,MAAM/C,EAAMjG,KAAKwF,aAAaU,KAAK2B,EAA6B,CAC9D1B,qBAAqB,IAGvB,OAAW,MAAPF,EACK,WAGIA,EAAIK,iBACnB,G,CAEA3D,cACE3C,KAAK4B,SAASgB,OACd5C,KAAK4B,SAASkL,UAChB,E,kCAlQW5E,IAAe,wG,oBAAfA,GAAe,4kD,gBD5B5B,iBACE,8BAAI,S,gBAAyB,QAC/B,sBACA,6CAGA,kCAAY,oCAAY,EAAAzE,QAAQ,IAC9B,mCACE,qCACE,uCACE,2CAAkB,U,iBAA8B,QAChD,4CAGE,wDAKA,oDACA,2DAIF,+BACF,6BACF,2BACF,yBACA,sDA+QA,mCACE,qCACE,uCACE,4CAAkB,U,iBAAkC,QACpD,sCACA,0CACE,+CAGE,4DAAS,gBAAoB,IAG7B,U,iBACF,QACA,U,iBACF,QACA,+CAME,mCAAU,EAAA+G,gBAAA,EAAuB,IANnC,QAUF,6BACF,2BACF,yBACA,mCACE,wCAA0B,U,iBAAsC,QAChE,2CAIE,8DAED,QACH,yBACA,uCAME,oC,iBACA,oCAAM,U,iBAAyB,QACjC,yBACF,uBACA,c,OA3VM,yCAEoB,+CAOA,sDAIhB,mCAAoB,oCAKE,kDACP,+DAQ6C,gCAkR5C,yDAOd,mDAEA,0EAEF,2GAUA,mDAMoB,uDAKxB,yCAA0B,oCAO5B,8DAA6C,gDAGT,+CAC9B,0C,uJEpVH,MAAMuC,EAIX7M,YAAY8M,GAHZ,KAAAC,GAAkB,KAIhBjN,KAAKiN,GAAKD,EAAME,aAClB,CAEApL,WACE9B,KAAKmN,QAAUC,MAAMC,KACnBrN,KAAKiN,GAAGK,iBAAiB,iDAE3BtN,KAAKmN,QAAQI,SAASC,IACpBA,EAAOC,iBACL,SACA,KACEzN,KAAKiN,GAAGS,UAAUC,IAAI,SAAS,IAEjC,GAGFH,EAAOC,iBACL,QACA,KACEzN,KAAKiN,GAAGS,UAAUE,OAAO,SAAS,IAEpC,EACD,GAEL,CAEmCC,QAAQpD,GACzC,MAAME,EAASF,EAAME,OACrB,IACEA,IAAW3K,KAAKiN,IACftC,EAAO+C,UAAUI,SAAS,aAC1BnD,EAAO+C,UAAUI,SAAS,kBAKzB9N,KAAKmN,QAAQxF,OAAS,EAAG,CAC3B,MAAM6F,EAASxN,KAAKmN,QAAQ,GAC5B,GAAqC,UAAjCK,EAAOO,QAAQC,cAA2B,CAC5C,MAAMC,EAAUT,EAChB,GAAoB,MAAhBS,EAAQ7J,MAA+C,aAA/B6J,EAAQ7J,KAAK4J,cAEvC,YADAC,EAAQC,O,CAIZV,EAAOW,O,CAEX,E,iCApDWpB,GAAe,e,mBAAfA,EAAe,gE,kCAAf,YAAe,G,2aCL5B,SACE,yC,gBACE,S,gBACF,QACF,uB,qBAH2B,+CAAA/I,QACvB,kG,ECOG,MAAMoK,EAUXlO,YACYmO,EACAC,GADA,KAAAD,oBAAAA,EACA,KAAAC,aAAAA,EAXH,KAAA/F,eAAyB,KAElC,KAAAgG,MAAO,CAUJ,CAEGzM,W,yCACC9B,KAAKqO,oBAAoBG,qBAG9BxO,KAAKyO,YACoB,MAAvBzO,KAAKuI,eACD,CACEvE,MAAO,kCACP0K,YAAa,wCACbC,gBAAiB3O,KAAKqO,oBAAoB9L,IAAIvC,KAAKuI,gBAAgB7G,MAErE,CACEsC,MAAO,8BACP0K,YAAa,oCACbC,sBAAuB3O,KAAKsO,aAAaM,YAEjD5O,KAAKuO,MAAO,EACd,G,mCAhCWH,GAA2B,yB,mBAA3BA,EAA2B,4KDTxC,gCAKA,e,KALe,oB,+GEGR,MAAeS,G,0SCGf,MAAMC,EACX5O,YAAoB6O,GAAA,KAAAA,WAAAA,CAAyB,CAEvCC,kBAAkBC,G,yCACtB,aAAajP,KAAK+O,WAAWG,KAAK,OAAQ,kBAAmBD,GAAS,GAAM,EAC9E,G,CAEME,8BACJ5G,EACA0G,G,yCAEA,aAAajP,KAAK+O,WAAWG,KAC3B,OACA,+CAAiD3G,EACjD0G,GACA,GACA,EAEJ,G,ECpBK,MAAeG,G,eCDf,MAAMC,UAAgC,IAG3CnP,YAAYoP,GACQ,MAAdA,IAGJ7J,MAAM6J,GACNtP,KAAKgK,GAAKsF,EAAWtF,GACvB,ECPK,MAAMuF,EAAb,cACE,KAAAxI,QAA2B,GAC3B,KAAAW,QAAiC,GACjC,KAAA8H,oBAAoD,EACtD,ECJO,MAAMC,EAAb,cACE,KAAA1I,QAA2B,GAC3B,KAAAa,YAAyC,GACzC,KAAA8H,wBAAwD,EAC1D,ECTO,MAAMC,EAIXzP,YAAY+D,EAAStC,GACnB3B,KAAKiE,IAAMA,EACXjE,KAAK2B,MAAQA,CACf,E,2DCHK,MAAM,EAAb,cACE,KAAAiO,SAAU,EAEV,KAAA7I,QAAwB,GACxB,KAAAW,QAAwB,GACxB,KAAA8H,oBAA0C,GAC1C,KAAA5H,YAAgC,GAChC,KAAA8H,wBAA8C,EAChD,E,kHCKO,MAAe,EAAtB,cACE,KAAAnH,eAAyB,KAEf,KAAA7H,WAAyB,IAAI,KAAkB,GAE/C,KAAAmP,aAAe,iBAEf,KAAAC,mBAAqB,CAC7B,WACA,YACA,aACA,cACA,OACA,OACA,YACA,WACA,SACA,cACA,YACA,MACA,UACA,WACA,YACA,aACA,UACA,aACA,MACA,MACA,KACA,QACA,SACA,IACA,SACA,UACA,cACA,QAGA,YAGQ,KAAAC,mBAAqB,CAC7B,OACA,OACA,YACA,WACA,aACA,QACA,SACA,KACA,SACA,UACA,QACA,iBACA,SACA,OACA,UACA,WACA,MACA,cACA,aACA,YACA,QACA,YACA,SACA,WAGA,MACA,gBAGQ,KAAAC,gBAAkB,CAC1B,OACA,QACA,UACA,WACA,OACA,cACA,YACA,WACA,YACA,WACA,OAGA,aAGQ,KAAAC,cAA0B,CAClC,MACA,aACA,YACA,OACA,OACA,WACA,YACA,SACA,UACA,YACA,OACA,MACA,UACA,WACA,OACA,WACA,MAGA,MACA,WAGQ,KAAAC,gBAAkB,CAC1BC,SAAU,QACVC,gBAAgB,EA6UpB,CA1UgBC,mBACZ,OAA8B,MAAvBrQ,KAAKuI,cACd,CAEU+H,SAASrN,GACjB,MACMsN,GADS,IAAIjE,WACAC,gBAAgBtJ,EAAM,mBACzC,OAAc,MAAPsN,GAAmD,MAApCA,EAAI9E,cAAc,eAAyB8E,EAAM,IACzE,CAEUC,SAASvN,EAAcwN,EAAiBC,EAAe,CAAC,GAChE,MAAMC,EAAyCC,OAAOC,OACpD,CAAEJ,OAAQA,GACVzQ,KAAKkQ,gBACLQ,GAEFzN,EAAOjD,KAAK8Q,aAAa7N,GAAM8N,KAAK,MAAMC,OAC1C,MAAM1H,EAAS,QAAWrG,EAAM0N,GAQhC,OAPqB,MAAjBrH,EAAO2H,QAAkB3H,EAAO2H,OAAOtJ,OAAS,GAClD2B,EAAO2H,OAAO1D,SAAShK,IACR,MAATA,EAAE2N,KACJlR,KAAKU,WAAWyQ,QAAQ,qBAAuB5N,EAAE2N,IAAM,KAAO3N,EAAEO,Q,IAI/DwF,EAAOrG,MAAQqG,EAAOrG,KAAK0E,OAAS,EAAI2B,EAAOrG,KAAO,IAC/D,CAEUmO,kBAAkBC,GAC1B,GAAIrR,KAAKsR,mBAAmBD,GAC1B,OAAO,KAET,MAAME,EAAYvR,KAAKwQ,SAASa,GAAS,GACzC,OAAiB,MAAbE,GAAqBA,EAAU5J,OAAS,GAAK4J,EAAU,GAAG5J,OAAS,EAC9D4J,EAAU,GAEZ,IACT,CAEUC,aAAaC,GACrB,GAAW,MAAPA,EACF,OAAO,KAGT,GAAmB,iBAARA,EAAkB,CAC3B,MAAMC,EAAW,IAAI,IAErB,OADAA,EAASD,IAAMzR,KAAK2R,OAAOF,GACvBzR,KAAKsR,mBAAmBI,EAASD,KAC5B,MAETC,EAASE,MAAQ,KACV,CAACF,G,CAGV,GAAID,EAAI9J,OAAS,EAAG,CAClB,MAAMkK,EAA4B,GAUlC,OATAJ,EAAIlE,SAASuE,IACX,MAAMJ,EAAW,IAAI,IACrBA,EAASD,IAAMzR,KAAK2R,OAAOG,GACvB9R,KAAKsR,mBAAmBI,EAASD,OAGrCC,EAASE,MAAQ,KACjBC,EAAUtK,KAAKmK,GAAS,IAEE,IAArBG,EAAUlK,OAAe,KAAOkK,C,CAGzC,OAAO,IACT,CAEUF,OAAOF,GACf,OAAW,MAAPA,EACK,OAGmB,KAD5BA,EAAMA,EAAIT,QACFe,QAAQ,QAAiBN,EAAIM,QAAQ,MAAQ,IACnDN,EAAM,UAAYA,GAEhBA,EAAI9J,OAAS,IACR8J,EAAIO,UAAU,EAAG,KAEnBP,EACT,CAEUQ,YAAYC,GACpB,MAAMC,EAAW,IAAMC,YAAYF,GACnC,OAAIlS,KAAKsR,mBAAmBa,GACnB,KAEFA,EAASE,WAAW,QAAUF,EAASG,QAAQ,OAAQ,IAAMH,CACtE,CAEUb,mBAAmBiB,GAC3B,OAAO,IAAMjB,mBAAmBiB,EAClC,CAEUC,kBAAkBD,EAAaE,EAAuB,MAC9D,OAAIzS,KAAKsR,mBAAmBiB,GACnBE,EAEFF,CACT,CAEUzB,aAAayB,GACrB,OAAOA,EAAIG,MAAM1S,KAAK6P,aACxB,CAGU8C,aAAaC,GACrB,GAAI5S,KAAKsR,mBAAmBsB,GAC1B,OAAO,KAIT,IAAIC,EAAK,IAAIC,OAAO,MACpB,OAAyB,MAArBF,EAAQhB,MAAMiB,GACT,OAMP,sGAAsGE,KACpGH,GAGK,cAITC,EAAK,IAAIC,OAAO,UACS,MAArBF,EAAQhB,MAAMiB,GACT,QAITA,EAAK,IAAIC,OACP,iFAEuB,MAArBF,EAAQhB,MAAMiB,GACT,YAITA,EAAK,IAAIC,OAAO,OACS,MAArBF,EAAQhB,MAAMiB,GACT,eAITA,EAAK,IAAIC,OAAO,YACS,MAArBF,EAAQhB,MAAMiB,GACT,eAITA,EAAK,IAAIC,OAAO,yBACS,MAArBF,EAAQhB,MAAMiB,GACT,OAITA,EAAK,IAAIC,OAAO,qCACS,MAArBF,EAAQhB,MAAMiB,GACT,OAGF,UACT,CAEUG,kBAAkBC,EAAoBC,GAC9C,GAAIlT,KAAKsR,mBAAmB4B,GAC1B,OAAO,EAGTA,EAAaA,EAAWZ,QAAQ,MAAO,IAEvC,MAEMa,EAAc,IAAIL,OAAO,+DAEzBM,EAAcF,EAAWtB,MAAMuB,GAErC,IAAKC,EACH,OAAO,EAGTH,EAAOI,KAAKC,SAAWF,EAAYG,OAAOC,MAC1C,MAAMC,EAAeL,EAAYG,OAAOE,KAExC,OADAR,EAAOI,KAAKK,QAA0B,IAAhBD,EAAK9L,OAAe,KAAO8L,EAAOA,GACjD,CACT,CAEUE,yBAAyBrK,GACjCA,EAAOkG,oBAAoBjC,SAASqG,GAAMtK,EAAOoG,wBAAwBnI,KAAKqM,KAC9EtK,EAAO1B,YAAc0B,EAAO5B,QAAQV,KAAK6M,IACvC,MAAMvE,EAAa,IAAI,IAGvB,OAFAA,EAAW5N,KAAOmS,EAAEnS,KACpB4N,EAAWtF,GAAK6J,EAAE7J,GACXsF,CAAU,IAEnBhG,EAAOkG,oBAAsB,GAC7BlG,EAAO5B,QAAU,EACnB,CAEUoM,yBAAyBC,EAAmBC,GACpD,MAAMC,EAAMjU,KAAKkU,4BAA4BH,EAAUC,GACvD,OAAsB,IAAfC,EAAItM,OAAe,KAAOsM,EAAI,EACvC,CAEUC,4BAA4BH,EAAmBC,GACvD,OAAO5G,MAAMC,KAAK0G,EAASzG,iBAAiB0G,IAAQlK,QAAQmD,GAAOA,EAAGkH,aAAeJ,GACvF,CAEUK,kBACR,MAAMnB,EAAS,IAAI,IAMnB,OALAA,EAAOoB,UAAW,EAClBpB,EAAOqB,MAAQ,GACfrB,EAAOsB,OAAS,GAChBtB,EAAOuB,MAAQ,IAAI,IACnBvB,EAAO7O,KAAO,IAAW8C,MAClB+L,CACT,CAEUwB,cAAcxB,GACR,MAAVA,IAGAA,EAAO7O,OAAS,IAAW8C,QAC7B+L,EAAOuB,MAAQ,MAEbxU,KAAKsR,mBAAmB2B,EAAOvR,QACjCuR,EAAOvR,KAAO,MAEZ1B,KAAKsR,mBAAmB2B,EAAOqB,OACjCrB,EAAOqB,MAAQ,KAEfrB,EAAOqB,MAAQrB,EAAOqB,MAAMtD,OAET,MAAjBiC,EAAOsB,QAA2C,IAAzBtB,EAAOsB,OAAO5M,SACzCsL,EAAOsB,OAAS,MAEpB,CAEUG,WACRzB,EACAhP,EACAtC,EACAyC,EAAkB,KAAUuQ,MAE5B,IAAI3U,KAAKsR,mBAAmB3P,GAM5B,GAHI3B,KAAKsR,mBAAmBrN,KAC1BA,EAAM,IAEJtC,EAAMgG,OAAS,KAAOhG,EAAMqP,OAAO4D,OAAO5U,KAAK6P,eAAiB,EAC9C,MAAhBoD,EAAOqB,QACTrB,EAAOqB,MAAQ,IAEjBrB,EAAOqB,OAASrQ,EAAM,KAAOjE,KAAK8Q,aAAanP,GAAOoP,KAAK,MAAQ,SAC9D,CACgB,MAAjBkC,EAAOsB,SACTtB,EAAOsB,OAAS,IAElB,MAAMM,EAAQ,IAAI,IAClBA,EAAMzQ,KAAOA,EACbyQ,EAAMnT,KAAOuC,EACb4Q,EAAMlT,MAAQA,EACdsR,EAAOsB,OAAOhN,KAAKsN,E,CAEvB,CAEUC,cAAcxL,EAAsByL,GAC5C,GAAI/U,KAAKsR,mBAAmByD,GAC1B,OAGF,IAAIC,EAAc1L,EAAO5B,QAAQC,OAEjCoN,EAAaA,EAAWzC,QAAQ,KAAM,KACtC,IAAI2C,GAAY,EAEhB,IAAK,IAAIC,EAAI,EAAGA,EAAI5L,EAAO5B,QAAQC,OAAQuN,IACzC,GAAI5L,EAAO5B,QAAQwN,GAAGxT,OAASqT,EAAY,CACzCE,GAAY,EACZD,EAAcE,EACd,K,CAIJ,GAAID,EAAW,CACb,MAAMpB,EAAI,IAAI,IACdA,EAAEnS,KAAOqT,EACTzL,EAAO5B,QAAQH,KAAKsM,E,CAGtBvK,EAAOkG,oBAAoBjI,KAAK,CAAC+B,EAAOvC,QAAQY,OAAQqN,GAC1D,CAEUG,sBAAsBlC,GAE5BA,EAAO7O,OAAS,IAAW8C,OAC3BlH,KAAKsR,mBAAmB2B,EAAOuB,MAAMY,WACrCpV,KAAKsR,mBAAmB2B,EAAOuB,MAAMa,YACf,MAArBpC,EAAOuB,MAAMc,MAA6C,IAA7BrC,EAAOuB,MAAMc,KAAK3N,UAEhDsL,EAAO7O,KAAO,IAAWgD,WACzB6L,EAAOsC,WAAa,IAAI,IACxBtC,EAAOsC,WAAWnR,KAAO,KAAeoR,QAE5C,CAEUC,gBAAgBxC,EAAoByC,GAC5C,GAAI1V,KAAKsR,mBAAmBoE,GAC1B,OAGF,MAAMC,EAAYD,EAAShD,MAAM,KAC7BiD,EAAUhO,OAAS,IACrBsL,EAAO2C,SAASC,UAAY7V,KAAKwS,kBAAkBmD,EAAU,KAEtC,IAArBA,EAAUhO,OACZsL,EAAO2C,SAASE,SAAW9V,KAAKwS,kBAAkBmD,EAAU,IACnDA,EAAUhO,QAAU,IAC7BsL,EAAO2C,SAASG,WAAa/V,KAAKwS,kBAAkBmD,EAAU,IAC9D1C,EAAO2C,SAASE,SAAWH,EAAUK,MAAM,EAAGL,EAAUhO,QAAQoJ,KAAK,KAEzE,EC3cK,MAAMkF,UAA2B,EACtCC,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,GAAIA,EAAMgG,OAAS,EACjB,OAGF,MAAMsL,EAASjT,KAAKoU,kBAIpB,GAHAnB,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAMA,EAAMgG,OAAS,IAC3DsL,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAM,GAAI,MAE3CA,EAAMgG,OAAS,GAAKhG,EAAMgG,OAAS,GAAM,EAC3C,IAAK,IAAIuN,EAAI,EAAGA,EAAIvT,EAAMgG,OAAS,EAAGuN,GAAK,EAAG,CAC5C,MAAMiB,EAAcxU,EAAMuT,EAAI,GACxBL,EAAgBlT,EAAMuT,EAAI,GAChC,GAAIlV,KAAKsR,mBAAmB6E,IAAQnW,KAAKsR,mBAAmBuD,GAC1D,SAGF,MAAMuB,EAAavB,EAAM7G,cACI,MAAzBiF,EAAOuB,MAAMa,UAAoBrV,KAAK8P,mBAAmBiC,QAAQqE,IAAe,EAClFnD,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB2D,GAEtB,MAAzBlD,EAAOuB,MAAMY,UACbpV,KAAK+P,mBAAmBgC,QAAQqE,IAAe,EAE/CnD,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB2D,IAEzB,MAArBlD,EAAOuB,MAAMc,MAA6C,IAA7BrC,EAAOuB,MAAMc,KAAK3N,SAChD3H,KAAKiQ,cAAc8B,QAAQqE,IAAe,EAE1CnD,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa2E,GAEtCnW,KAAK0U,WAAWzB,EAAQ4B,EAAOsB,E,CAKrCnW,KAAKmV,sBAAsBlC,GAC3BjT,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECrDK,MAAM+M,UAAyB,EACpCH,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,MAAMsR,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAMD,MAC3CuR,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAM2U,KAC5CrD,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAM0T,UACrDpC,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAM6S,OACrDxU,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,EClBK,MAAMiN,UAA0B,EACrCL,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU8M,KAAKN,MAAMjT,GAC3B,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGH,MAAlBI,EAAQ/C,QACV+C,EAAQ/C,OAAO4G,SAAS5L,IACtB,MAAMsR,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAM8U,UAC3CxD,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM+U,MAC5CzD,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAMuQ,KAC5Ce,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAMgV,KACrD1D,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAMiV,WACrD5W,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAIV,MAAjBvJ,EAAQ4K,OACV5K,EAAQ4K,MAAM/G,SAAS5L,IACrB,MAAMsR,EAASjT,KAAKoU,kBACpBnB,EAAO7O,KAAO,IAAWgD,WACzB6L,EAAOsC,WAAWnR,KAAO,KAAeoR,QACxCvC,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAMkV,OAC3C5D,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM0J,MAC5CrL,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAIV,MAAjBvJ,EAAQ9C,OACV8C,EAAQ9C,MAAM2G,SAAS5L,IACrB,MAAMsR,EAASjT,KAAKoU,kBACpBnB,EAAO7O,KAAO,IAAW+C,KACzB8L,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAM8U,UAC3CxD,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM+U,MAC5CzD,EAAOI,KAAKyD,eAAiB9W,KAAKwS,kBAAkB7Q,EAAMoV,YAC1D9D,EAAOI,KAAK2D,OAAShX,KAAKwS,kBAAkB7Q,EAAMsV,YAClDhE,EAAOI,KAAK6D,KAAOlX,KAAKwS,kBAAkB7Q,EAAMwV,KAChDlE,EAAOI,KAAK+D,MAAQpX,KAAK2S,aAAaM,EAAOI,KAAK2D,QACtB,MAAxBrV,EAAM0V,iBAC0B,MAA9B1V,EAAM0V,eAAe7D,QACvBP,EAAOI,KAAKC,SAAW3R,EAAM0V,eAAe7D,MAAQ,IAErB,MAA7B7R,EAAM0V,eAAe5D,OACvBR,EAAOI,KAAKK,QAAU/R,EAAM0V,eAAe5D,KAAO,KAGtDzT,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAI/B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,EC7DK,MAAMgO,UAAyB,EACpCpB,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,MAAMsR,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAO1B,KAAKwS,kBACjB7Q,EAAMD,KACN1B,KAAKwS,kBAAkBxS,KAAKiS,YAAYtQ,EAAM4V,SAAU,OAE1DtE,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAM4V,SAC5CtE,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAM0T,UAGnDrV,KAAKsR,mBAAmB3P,EAAMyT,YAC7BpV,KAAKsR,mBAAmB3P,EAAM6V,oBAE/BvE,EAAOuB,MAAMY,SAAWzT,EAAM6V,oBAE9BvE,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAMyT,UACrDnC,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM6V,qBAG9CxX,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,EClCK,MAAMmO,UAA8B,EACzCvB,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,GAAuB,SAAnBA,EAAM+V,SACR,OAEF,MAAMzE,EAASjT,KAAKoU,kBACpBnB,EAAOoB,SAAyB,MAAd1S,EAAMgW,IACxB1E,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAMD,MAC3CuR,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAMiW,OACrB,SAAnBjW,EAAM+V,WACRzE,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAMuQ,KAC5Ce,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAM0T,UACrDpC,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAMyT,WAEvDpV,KAAKmV,sBAAsBlC,GAC3BjT,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,EC7BK,MAAMuO,UAA0B,EAAvC,c,oBACU,KAAAC,oBAAsB,IAAIhF,OAAO,qCA2B3C,CAzBEoD,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,MAAMsR,EAASjT,KAAKoU,kBACpB,IAAI1S,EAAOC,EAAMD,MACZA,GAAQ1B,KAAK8X,oBAAoB/E,KAAKpR,EAAMuQ,OAC/CxQ,EAAOC,EAAMuQ,IAAIN,MAAM5R,KAAK8X,qBAAqB,IAEnD7E,EAAOvR,KAAO1B,KAAKwS,kBAAkB9Q,EAAM,MAC3CuR,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAMyT,UACrDnC,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAM0T,UACrDpC,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAMuQ,KAC5ClS,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,E,eCnBK,MAAMyO,UAA6B,EACxC7B,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,GAAI3B,KAAKqQ,eAAiBrQ,KAAKsR,mBAAmB3P,EAAMiG,aAAc,CAC/CjG,EAAMiG,YAAuB8K,MAAM,KAC5CnF,SAASyK,IACnB,IAAIC,GAAgB,EAChBC,EAAkB5O,EAAO1B,YAAYD,OAEzC,IAAK,IAAIuN,EAAI,EAAGA,EAAI5L,EAAO1B,YAAYD,OAAQuN,IAC7C,GAAI5L,EAAO1B,YAAYsN,GAAGxT,OAASsW,EAAK,CACtCC,GAAgB,EAChBC,EAAkBhD,EAClB,K,CAIJ,GAAI+C,EAAe,CACjB,MAAM3I,EAAa,IAAI,IACvBA,EAAW5N,KAAOsW,EAClB1O,EAAO1B,YAAYL,KAAK+H,E,CAG1BhG,EAAOoG,wBAAwBnI,KAAK,CAAC+B,EAAOvC,QAAQY,OAAQuQ,GAAiB,G,MAErElY,KAAKqQ,cACfrQ,KAAK8U,cAAcxL,EAAQ3H,EAAMwW,QAGnC,MAAMlF,EAAS,IAAI,IACnBA,EAAOoB,UACJrU,KAAKqQ,cAAgE,MAAhDrQ,KAAKwS,kBAAkB7Q,EAAM0S,SAAU,KAC/DpB,EAAO7O,KAAO,IAAW8C,MACzB+L,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM2S,OAC5CrB,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAMD,KAAM,MACjD,IACEuR,EAAOmF,SAAWC,SAChBrY,KAAKwS,kBAAkB7Q,EAAMyW,SAAU,IAAmBE,KAAKC,YAC/D,G,CAEF,MAAOhV,GAEPiV,QAAQhV,MAAM,iCAAkCD,GAChD0P,EAAOmF,SAAW,IAAmBE,I,CAGvC,IAAKtY,KAAKsR,mBAAmB3P,EAAM4S,QAAS,CAC1C,MAAMA,EAASvU,KAAK8Q,aAAanP,EAAM4S,QACvC,IAAK,IAAIW,EAAI,EAAGA,EAAIX,EAAO5M,OAAQuN,IAAK,CACtC,GAAIlV,KAAKsR,mBAAmBiD,EAAOW,IACjC,SAGF,MAAMuD,EAAgBlE,EAAOW,GAAGwD,YAAY,MAC5C,IAAuB,IAAnBD,EACF,SAGmB,MAAjBxF,EAAOsB,SACTtB,EAAOsB,OAAS,IAGlB,MAAMM,EAAQ,IAAI,IAClBA,EAAMnT,KAAO6S,EAAOW,GAAGyD,OAAO,EAAGF,GACjC5D,EAAMlT,MAAQ,KACdkT,EAAMzQ,KAAO,KAAUuQ,KACnBJ,EAAOW,GAAGvN,OAAS8Q,EAAgB,IACrC5D,EAAMlT,MAAQ4S,EAAOW,GAAGyD,OAAOF,EAAgB,IAEjDxF,EAAOsB,OAAOhN,KAAKsN,E,EAKvB,OADgC,MAAdlT,EAAMyC,KAAezC,EAAMyC,KAAK4J,cAAgB,MAEhE,IAAK,OACHiF,EAAO7O,KAAO,IAAWgD,WACzB6L,EAAOsC,WAAa,IAAI,IACxBtC,EAAOsC,WAAWnR,KAAO,KAAeoR,QACxC,MACF,QAAS,CACPvC,EAAO7O,KAAO,IAAW8C,MACzB+L,EAAOuB,MAAQ,IAAI,IACnBvB,EAAOuB,MAAMoE,KAAO5Y,KAAKwS,kBAAkB7Q,EAAMkX,YAAclX,EAAMiX,MACrE3F,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAMmX,gBAAkBnX,EAAMyT,UAC7EnC,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAMoX,gBAAkBpX,EAAM0T,UAC7E,MAAMC,EAAOtV,KAAKoR,kBAAkBzP,EAAMqX,WAAarX,EAAM8P,KAC7DwB,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa8D,GACtC,K,EAIJhM,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,E,gUCxGK,MAAM2P,UAA8B,EAIzC,YACY9Y,EACAC,GAEVqF,QAHU,KAAAtF,cAAAA,EACA,KAAAC,YAAAA,CAGZ,CAEM8V,MAAMjT,G,yCAGV,OAFAjD,KAAKsJ,OAAS,IAAI,EAClBtJ,KAAK0J,QAAU8M,KAAKN,MAAMjT,GACN,MAAhBjD,KAAK0J,SAAyC,MAAtB1J,KAAK0J,QAAQwP,OACvClZ,KAAKsJ,OAAOsG,SAAU,EACf5P,KAAKsJ,SAGVtJ,KAAK0J,QAAQyP,gBACTnZ,KAAKoZ,iBAEXpZ,KAAKqZ,iBAGArZ,KAAKsJ,OACd,G,CAEc8P,iB,yCACZ,GAAiD,MAA7CpZ,KAAK0J,QAAQ4P,6BAAsC,CACrD,MAAMC,QAAevZ,KAAKG,cAAcqZ,UAAUxZ,KAAKuI,gBACjDkR,EAAmB,IAAI,IAAUzZ,KAAK0J,QAAQ4P,8BAKpD,GAAgC,cAJMtZ,KAAKG,cAAcuZ,cACvDD,EACAF,IAKA,OAFAvZ,KAAKsJ,OAAOsG,SAAU,OACtB5P,KAAKsJ,OAAOqQ,aAAe3Z,KAAKI,YAAYuD,EAAE,qB,CAKlD,MAAMiW,EAAe,IAAIC,IAEzB,GAAI7Z,KAAKqQ,cAA4C,MAA5BrQ,KAAK0J,QAAQ9B,YACpC,IAAK,MAAMX,KAAKjH,KAAK0J,QAAQ9B,YAAyC,CACpE,MAAM0H,EAAa,KAAuBwK,SAAS7S,GACnD,GAAkB,MAAdqI,EAAoB,CACtBA,EAAW/G,eAAiBvI,KAAKuI,eACjC,MAAMwR,QAAazK,EAAW0K,UAC9BJ,EAAaK,IAAIhT,EAAE+C,GAAIhK,KAAKsJ,OAAO1B,YAAYD,QAC/C3H,KAAKsJ,OAAO1B,YAAYL,KAAKwS,E,OAG5B,IAAK/Z,KAAKqQ,cAAwC,MAAxBrQ,KAAK0J,QAAQhC,QAC5C,IAAK,MAAMmM,KAAK7T,KAAK0J,QAAQhC,QAAiC,CAC5D,MAAMyQ,EAAS,KAAmB2B,SAASjG,GAC3C,GAAc,MAAVsE,EAAgB,CAClB,MAAM4B,QAAa5B,EAAO6B,UAC1BJ,EAAaK,IAAIpG,EAAE7J,GAAIhK,KAAKsJ,OAAO5B,QAAQC,QAC3C3H,KAAKsJ,OAAO5B,QAAQH,KAAKwS,E,EAK/B,IAAK,MAAM9S,KAAKjH,KAAK0J,QAAQwP,MAA+B,CAC1D,MAAMjG,EAAS,KAAmB6G,SAAS7S,GAE3CgM,EAAOjJ,GAAK,KACZiJ,EAAO1K,eAAiBvI,KAAKuI,eAC7B0K,EAAOiH,cAAgB,KAGO,MAA1BjH,EAAOkH,iBAA2BlH,EAAOkH,gBAAgBxS,OAAS,IACpEsL,EAAOkH,gBAAkBlH,EAAOkH,gBAAgBnE,MAAM,EAAG,KAGtDhW,KAAKqQ,cAA8B,MAAdpJ,EAAEmT,UAAoBR,EAAaS,IAAIpT,EAAEmT,UACjEpa,KAAKsJ,OAAOkG,oBAAoBjI,KAAK,CACnCvH,KAAKsJ,OAAOvC,QAAQY,OACpBiS,EAAarX,IAAI0E,EAAEmT,YAEZpa,KAAKqQ,cAAmC,MAAnBpJ,EAAEiT,eAChCjT,EAAEiT,cAAc3M,SAAS+M,IACnBV,EAAaS,IAAIC,IACnBta,KAAKsJ,OAAOoG,wBAAwBnI,KAAK,CACvCvH,KAAKsJ,OAAOvC,QAAQY,OACpBiS,EAAarX,IAAI+X,I,IAMzB,MAAMP,QAAa9G,EAAO+G,UAC1Bha,KAAKyU,cAAcsF,GACnB/Z,KAAKsJ,OAAOvC,QAAQQ,KAAKwS,E,CAG3B/Z,KAAKsJ,OAAOsG,SAAU,CACxB,G,CAEQyJ,iBACN,MAAMO,EAAe,IAAIC,IACrB7Z,KAAKqQ,cAA4C,MAA5BrQ,KAAK0J,QAAQ9B,YACpC5H,KAAK0J,QAAQ9B,YAAY2F,SAAStG,IAChC,MAAMqI,EAAa,KAAuBiL,OAAOtT,GAC/B,MAAdqI,IACFA,EAAW/G,eAAiB,KAC5BqR,EAAaK,IAAIhT,EAAE+C,GAAIhK,KAAKsJ,OAAO1B,YAAYD,QAC/C3H,KAAKsJ,OAAO1B,YAAYL,KAAK+H,G,IAGvBtP,KAAKqQ,cAAwC,MAAxBrQ,KAAK0J,QAAQhC,SAC5C1H,KAAK0J,QAAQhC,QAAQ6F,SAASsG,IAC5B,MAAMsE,EAAS,KAAmBoC,OAAO1G,GAC3B,MAAVsE,IACFyB,EAAaK,IAAIpG,EAAE7J,GAAIhK,KAAKsJ,OAAO5B,QAAQC,QAC3C3H,KAAKsJ,OAAO5B,QAAQH,KAAK4Q,G,IAK/BnY,KAAK0J,QAAQwP,MAAM3L,SAAStG,IAC1B,MAAMgM,EAAS,KAAmBsH,OAAOtT,GAEzCgM,EAAOjJ,GAAK,KACZiJ,EAAO1K,eAAiB,KACxB0K,EAAOiH,cAAgB,KAGO,MAA1BjH,EAAOkH,iBAA2BlH,EAAOkH,gBAAgBxS,OAAS,IACpEsL,EAAOkH,gBAAkBlH,EAAOkH,gBAAgBnE,MAAM,EAAG,KAGtDhW,KAAKqQ,cAA8B,MAAdpJ,EAAEmT,UAAoBR,EAAaS,IAAIpT,EAAEmT,UACjEpa,KAAKsJ,OAAOkG,oBAAoBjI,KAAK,CACnCvH,KAAKsJ,OAAOvC,QAAQY,OACpBiS,EAAarX,IAAI0E,EAAEmT,YAEZpa,KAAKqQ,cAAmC,MAAnBpJ,EAAEiT,eAChCjT,EAAEiT,cAAc3M,SAAS+M,IACnBV,EAAaS,IAAIC,IACnBta,KAAKsJ,OAAOoG,wBAAwBnI,KAAK,CACvCvH,KAAKsJ,OAAOvC,QAAQY,OACpBiS,EAAarX,IAAI+X,I,IAMzBta,KAAKyU,cAAcxB,GACnBjT,KAAKsJ,OAAOvC,QAAQQ,KAAK0L,EAAO,IAGlCjT,KAAKsJ,OAAOsG,SAAU,CACxB,E,qTC7JK,MAAM4K,UAA2CvB,EAGtD/Y,YACEC,EACAC,EACQqa,GAERhV,MAAMtF,EAAeC,GAFb,KAAAqa,2BAAAA,CAGV,CAEMvE,MAAMjT,G,mGACV,MAAMqG,EAAS,IAAI,EACboR,EAAmDlE,KAAKN,MAAMjT,GAEpE,IAAKyX,EAEH,OADApR,EAAOsG,SAAU,EACVtG,EAIT,KAAKoR,aAAU,EAAVA,EAAYvB,WACf,aAAa,EAAMjD,MAAK,UAACjT,GAI3B,KAAKyX,aAAU,EAAVA,EAAYC,mBACf,aAAa,EAAMzE,MAAK,UAACjT,GAG3B,GAAIjD,KAAK4a,gBAAgBF,GAEvB,OADApR,EAAOsG,SAAU,EACVtG,EAIT,MAAM+L,QAAiBrV,KAAKya,6BAC5B,WAAYza,KAAK6a,cAAcH,EAAYrF,IAGzC,OAFA/L,EAAOsG,SAAU,EACjBtG,EAAOqQ,aAAe3Z,KAAKI,YAAYuD,EAAE,uBAClC2F,EAGT,MAAMwR,EAAU,IAAI,IAAUJ,EAAWzX,MACnC8X,QAAsB/a,KAAKG,cAAcuZ,cAAcoB,EAAS9a,KAAKiE,KAC3E,aAAa,EAAMiS,MAAK,UAAC6E,EAC3B,G,CAEcF,cACZG,EACA3F,G,yCAEArV,KAAKiE,UAAYjE,KAAKG,cAAc8a,WAClC5F,EACA2F,EAAKE,KACLF,EAAKG,QACL,IAAI,IAAUH,EAAKI,cAAeJ,EAAKK,UAAWL,EAAKM,iBAGzD,MAAM7B,EAAmB,IAAI,IAAUuB,EAAK1B,8BAM5C,OAAgC,cAJMtZ,KAAKG,cAAcuZ,cACvDD,EACAzZ,KAAKiE,KAMT,G,CAEQ2W,gBAAgBI,GACtB,QACGA,GACAA,EAAK7B,WACL6B,EAAKL,mBACLK,EAAKE,MACLF,EAAKI,eACwB,iBAAvBJ,EAAKI,eACI,MAAhBJ,EAAKG,SACoB,MAAzB,KAAQH,EAAKG,UACZH,EAAK1B,8BACL0B,EAAK/X,KAEV,EC3FK,MAAMsY,UAAwB,EACnCrF,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACK,SAAhBA,EAAMkV,QACRlV,EAAMkV,MAAQ,MAEhB,MAAM5D,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAO1B,KAAKwS,kBACjB7Q,EAAMkV,MACN7W,KAAKwS,kBAAkBxS,KAAKiS,YAAYtQ,EAAM6Z,QAAS,OAEzDvI,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAM6Z,QAC5CvI,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAM0T,UAEjDrV,KAAKsR,mBAAmB3P,EAAM8Z,SAAWzb,KAAKsR,mBAAmB3P,EAAMyT,UACzEnC,EAAOuB,MAAMY,SAAWzT,EAAMyT,UAE9BnC,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAM8Z,OACrDxI,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAMyT,WAG9CpV,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,EClCF,MAAMoS,EAAgB,CAAC,YAAa,cAAe,QAAS,WAAY,WAAY,MAAO,MAEpF,MAAMC,UAA6B,EACxCzF,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf3B,KAAK8U,cAAcxL,EAAQtJ,KAAKwS,kBAAkB7Q,EAAM,iBAExD,MAAMsR,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAMqC,MAAO,MAClDiP,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAMyT,UACrDnC,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAM0T,UACrDpC,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAMia,KAE5C,IAAIC,GAAyB,EAC7B,IAAK,MAAMC,KAAQna,EAEbA,EAAMoa,eAAeD,KAClBD,IAA2D,IAAjCH,EAAc3J,QAAQ+J,KACnDD,GAAyB,GAEvBA,GACF7b,KAAK0U,WAAWzB,EAAQ6I,EAAMna,EAAMma,KAK1C9b,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAGzBjT,KAAKqQ,cACPrQ,KAAK2T,yBAAyBrK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,EC3CK,MAAM0S,UAA6B,EACxC9F,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbiH,EAAMvQ,KAAKsQ,SAASrN,GAC1B,GAAW,MAAPsN,EAEF,OADAjH,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,MAAM2S,EAAW1L,EAAI9E,cAAc,YACnC,GAAgB,MAAZwQ,GAAoBjc,KAAKsR,mBAAmB2K,EAASzP,aAGvD,OAFAlD,EAAOqQ,aAAe,oBACtBrQ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAmEzB,OAhEgBkN,KAAKN,MAAM+F,EAASzP,aAC5Be,SAAS2O,IACf,MAAMjJ,EAASjT,KAAKoU,kBAQpB,GAPKpU,KAAKsR,mBAAmB4K,EAAMrF,SACjC5D,EAAOvR,KAAOwa,EAAMrF,MAAMnE,MAAM,MAAM,IAEtB,MAAdwJ,EAAMjZ,MAAiBjD,KAAKsR,mBAAmB4K,EAAMjZ,KAAKqR,SAC5DrB,EAAOqB,MAAQ4H,EAAMjZ,KAAKqR,MAAM5B,MAAM,OAAO3B,KAAK,OAGxB,MAAxBmL,EAAMC,gBAAyD,MAA/BD,EAAMC,eAAe5H,OACvD,IAAK,MAAM6H,KAAYF,EAAMC,eAAe5H,OAAQ,CAElD,IAAK2H,EAAMC,eAAe5H,OAAOwH,eAAeK,GAC9C,SAGF,MAAMvH,EAAQqH,EAAMC,eAAe5H,OAAO6H,GAE1C,OADuC,MAApBvH,EAAMwH,WAAqBxH,EAAMwH,WAAWrO,cAAgB,MAE7E,IAAK,WACHiF,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkBqC,EAAMlT,OACrD,MACF,IAAK,QACL,IAAK,WACL,IAAK,OACL,IAAK,OACHsR,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkBqC,EAAMlT,OACrD,MACF,IAAK,MACHsR,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAaqD,EAAMlT,OAC5C,MACF,QAAS,CACP,MAAM2a,EAA4B,MAAfzH,EAAMgC,MAAgBhC,EAAMgC,MAAM7I,cAAgB,KAE1C,MAAzBiF,EAAOuB,MAAMa,UACbrV,KAAK8P,mBAAmBiC,QAAQuK,IAAe,EAE/CrJ,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkBqC,EAAMlT,OAE5B,MAAzBsR,EAAOuB,MAAMY,UACbpV,KAAK+P,mBAAmBgC,QAAQuK,IAAe,EAE/CrJ,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkBqC,EAAMlT,QAE/B,MAArBsR,EAAOuB,MAAMc,MAA6C,IAA7BrC,EAAOuB,MAAMc,KAAK3N,SAChD3H,KAAKiQ,cAAc8B,QAAQuK,IAAe,EAE1CrJ,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAaqD,EAAMlT,OAE5C3B,KAAK0U,WAAWzB,EAAQ4B,EAAMgC,MAAOhC,EAAMlT,OAE7C,K,GAMR3B,KAAKmV,sBAAsBlC,GAC3BjT,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,ECjFK,MAAMiT,UAA4B,EACvCrG,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf3B,KAAK8U,cAAcxL,EAAQtJ,KAAKwS,kBAAkB7Q,EAAM6a,WAExD,MAAMvJ,EAASjT,KAAKoU,kBACpBnB,EAAOoB,SAAsD,SAA3CrU,KAAKwS,kBAAkB7Q,EAAM8a,UAC/CxJ,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAM+a,MAAO,MAClDzJ,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAMgb,MAC5C1J,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAMib,SAAUjb,EAAMkb,OACrE5J,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAMmb,UACrD7J,EAAOuB,MAAMoE,KAAO5Y,KAAKwS,kBAAkB7Q,EAAMob,MACjD9J,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAMqb,SAEvChd,KAAKsR,mBAAmB3P,EAAMib,WACjC5c,KAAK0U,WAAWzB,EAAQ,QAAStR,EAAMkb,OAEzC7c,KAAK0U,WAAWzB,EAAQ,QAAStR,EAAMsb,OACvCjd,KAAK0U,WAAWzB,EAAQ,MAAOtR,EAAMub,KACrCld,KAAK0U,WAAWzB,EAAQ,UAAWtR,EAAMwb,SACzCnd,KAAK0U,WAAWzB,EAAQ,OAAQtR,EAAMyb,MAEtCpd,KAAKmV,sBAAsBlC,GAC3BjT,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAGzBjT,KAAKqQ,cACPrQ,KAAK2T,yBAAyBrK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,E,0BC1BF,MAAM+T,EAA4B,IAAIC,IAAI,CACxC,QACA,OACA,WACA,WACA,MACA,YACA,aAGIC,EAAuC,IAAID,IAAI,CACnD,OACA,QACA,aACA,cACA,YACA,QACA,QACA,eACA,UACA,UACA,QACA,OACA,MAEA,cAGIE,EAA2B,IAAIF,IAAI,CAAC,QAAS,SAE5C,MAAMG,WAA4B,EACvCvH,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,GAAe,MAAXyG,EAEF,OADAJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,GAAuB,MAAnBI,EAAQ,GAAGtF,MAAoC,MAApBsF,EAAQ,GAAG1F,MAAe,CAIvD,GAAgE,IAHxC0F,EAGJI,QAAQ4T,GAAiB,SAAXA,EAAEtZ,OAAiBuD,OAAc,CACjE,MAAMsL,EAASjT,KAAKoU,kBASpB,OARAnB,EAAO7O,KAAO,IAAWiD,SACzB4L,EAAO2C,SAAW,IAAI,IACtBlM,EAAQ6D,SAAS2D,IACflR,KAAK2d,yCAAyC1K,EAAQ/B,EAAI,IAE5DlR,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,GACpB3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,E,EAuC3B,OAnCAI,EAAQ6D,SAAS2D,IACf,MAAM+B,EAASjT,KAAKoU,kBAEdwJ,EAAUhN,OAAOiN,KAAK3M,GACT,aAAf0M,EAAQ,KACV5d,KAAK8U,cAAcxL,EAAQ4H,EAAI4M,UAC/B9d,KAAK+d,uBAAuB9K,EAAQ/B,IAGnB,SAAf0M,EAAQ,IAAgC,iBAAfA,EAAQ,IACnC5d,KAAKge,mBAAmB/K,EAAQ/B,GAGf,SAAf0M,EAAQ,IAAgC,WAAfA,EAAQ,IACnC5d,KAAKie,cAAchL,EAAQ/B,GAGT,SAAf0M,EAAQ,IAAkB,MAAuB,UAAfA,EAAQ,IAC7C5d,KAAKke,+BAA+BjL,EAAQ/B,GAG3B,UAAf0M,EAAQ,IAAiC,SAAfA,EAAQ,IACpC5d,KAAKme,uBAAuBlL,EAAQ/B,GAGtClR,KAAKmV,sBAAsBlC,GAC3BjT,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAGzBjT,KAAKqQ,cACPrQ,KAAK2T,yBAAyBrK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,CAEAyU,uBAAuB9K,EAAoB/B,GACzC+B,EAAO7O,KAAO,IAAW8C,MACzB+L,EAAOuB,MAAQ,IAAI,IAEnBvB,EAAOvR,KAAOwP,EAAIlN,MAClBiP,EAAOqB,MAAQpD,EAAIwF,KACnBzD,EAAOuB,MAAMY,SAAWlE,EAAIkE,SAC5BnC,EAAOuB,MAAMa,SAAWnE,EAAImE,SAC5BpC,EAAOuB,MAAMoE,KAAO1H,EAAIkN,UACxBnL,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAaN,EAAIgB,KAE1ClS,KAAKqe,qBAAqBpL,EAAQ/B,EAAKmM,EACzC,CAEAW,mBAAmB/K,EAAoB/B,GACrC+B,EAAO7O,KAAO,IAAW+C,KACzB8L,EAAOI,KAAO,IAAI,IAElBJ,EAAOvR,KAAOwP,EAAIoN,aAClB,IAAIC,EAAyB,GAC7B,OAAQrN,EAAI9M,MACV,IAAK,cACH6O,EAAOI,KAAKyD,eAAiB5F,EAAIoN,aACjCrL,EAAOI,KAAK2D,OAAS9F,EAAIsN,UACzBvL,EAAOI,KAAK+D,MAAQpX,KAAK2S,aAAaM,EAAOI,KAAK2D,QAClD/D,EAAOI,KAAK6D,KAAOhG,EAAIgG,KACvBlX,KAAKgT,kBAAkBC,EAAQ,GAAG/B,EAAIuN,oBAAoBvN,EAAIwN,mBAG9DH,EAAe,CACb,eACA,iBACA,YACA,OACA,mBACA,mBAEF,MACF,IAAK,OACHtL,EAAOI,KAAKyD,eAAiB5F,EAAIyN,eACjC1L,EAAOI,KAAK2D,OAAS9F,EAAI0N,eAGzBL,EAAe,CAAC,eAAgB,iBAAkB,kBAMtDve,KAAKqe,qBAAqBpL,EAAQ/B,EAAK,IAAIoM,IAAIiB,GACjD,CAEAN,cAAchL,EAAoB/B,GAChC+B,EAAO7O,KAAO,IAAWiD,SACzB4L,EAAO2C,SAAW,IAAI,IAEtB,MAAM2I,EAAyB,CAAC,OAAQ,UACxC,OAAQrN,EAAI9M,MACV,IAAK,OACH6O,EAAOvR,KAAO,GAAGwP,EAAIxP,QAAQwP,EAAI9M,OACjCpE,KAAKyV,gBAAgBxC,EAAQ/B,EAAIxP,MACjCuR,EAAO2C,SAASiJ,cAAgB3N,EAAI8F,OACpC,MACF,IAAK,WACH/D,EAAOvR,KAAO,GAAGwP,EAAIxP,QAAQwP,EAAI9M,OACjCpE,KAAKyV,gBAAgBxC,EAAQ/B,EAAIxP,MACjCuR,EAAO2C,SAASkJ,eAAiB5N,EAAI8F,OACrC,MACF,IAAK,UACH/D,EAAOvR,KAAO,GAAGwP,EAAIxP,QAAQwP,EAAI9M,OACjCpE,KAAKyV,gBAAgBxC,EAAQ/B,EAAIxP,MACjCuR,EAAO2C,SAASiJ,cAAgB3N,EAAI8F,OACpC/D,EAAO2C,SAASmJ,MAAQ7N,EAAI6N,MAE5BR,EAAahX,KAAK,SAClB,MACF,IAAK,kBACH0L,EAAOvR,KAAO,GAAGwP,EAAIxP,QAAQwP,EAAI9M,OACjCpE,KAAKyV,gBAAgBxC,EAAQ/B,EAAIxP,MACjCuR,EAAO2C,SAASoJ,IAAM9N,EAAI8F,OAC1B,MACF,IAAK,aACH/D,EAAOvR,KAAOwP,EAAI9M,KAClB6O,EAAO2C,SAASiJ,cAAgB3N,EAAI8F,OAQxChX,KAAKqe,qBAAqBpL,EAAQ/B,EAAK,IAAIoM,IAAIiB,GACjD,CAEAL,+BAA+BjL,EAAoB/B,GACjD+B,EAAO7O,KAAO,IAAWgD,WACzB6L,EAAOsC,WAAWnR,KAAO,KAAeoR,QACvB,SAAbtE,EAAI9M,KACN6O,EAAOvR,KAAO,GAAGwP,EAAIlN,SAASkN,EAAI+N,cAAc/N,EAAIgO,eAAehO,EAAIiO,YACpE7M,QAAQ,KAAM,KACdtB,OAEHiC,EAAOvR,KAAOwP,EAAIkO,UAGpB,MAAMC,EAAUnO,EAChBN,OAAOiN,KAAK3M,GAAK3D,SAAStJ,IACxBjE,KAAK0U,WAAWzB,EAAQhP,EAAKob,EAAQpb,GAAK,GAE9C,CAEA0Z,yCAAyC1K,EAAoB/B,GAC3D,OAAQA,EAAI9M,MACV,IAAK,OACHpE,KAAKyV,gBAAgBxC,EAAQ,GAAG/B,EAAI+N,cAAc/N,EAAIgO,eAAehO,EAAIiO,aACzElM,EAAO2C,SAAS5R,MAAQkN,EAAIlN,MAC5BiP,EAAOvR,KAAOuR,EAAO2C,SAASF,SAE9BzC,EAAO2C,SAASR,SAAWlE,EAAIsD,MAC/B,MACF,IAAK,QACHvB,EAAO2C,SAAS6F,MAAQvK,EAAIuK,MAC5B,MACF,IAAK,SACHxI,EAAO2C,SAAS0J,MAAQpO,EAAIqO,aAC5B,MACF,IAAK,UACHtM,EAAO2C,SAAS4J,SAAWtO,EAAIuO,QAC/BxM,EAAO2C,SAAS8J,KAAOxO,EAAIwO,KAC3BzM,EAAO2C,SAAS+J,WAAazO,EAAItE,IACjCqG,EAAO2C,SAASmJ,MAAQ7N,EAAI6N,MAC5B9L,EAAO2C,SAASgK,QAAU1O,EAAI0O,QAMlC5f,KAAKqe,qBAAqBpL,EAAQ/B,EAAKqM,EACzC,CAEAY,uBAAuBlL,EAAoB/B,GACzC+B,EAAO7O,KAAO,IAAWgD,WACzB6L,EAAOsC,WAAWnR,KAAO,KAAeoR,QACxCvC,EAAOvR,KAAOwP,EAAIlN,MAClBiP,EAAOqB,MAAQpD,EAAIwF,KAEnB1W,KAAKqe,qBAAqBpL,EAAQ/B,EAAKsM,EACzC,CAEAa,qBAAqBpL,EAAoB/B,EAAUqN,GAC1B3N,OAAOiN,KAAK3M,GAAKpH,QAAQ4T,IAAOa,EAAalE,IAAIqD,KACzDnQ,SAAStJ,IACtB,MAAM4b,EAAO3O,EACblR,KAAK0U,WAAWzB,EAAQhP,EAAK4b,EAAK5b,GAAK,GAE3C,EClQF,MAAM6b,GAAiB,IAAIxC,IAAI,CAC7B,UACA,gBACA,gBACA,SACA,WACA,0BACA,qBACA,UAGK,MAAMyC,WAA6B,EAGxC7J,MAAMjT,GACJjD,KAAKsJ,OAAS,IAAI,EAClB,MAAMI,EAAU8M,KAAKN,MAAMjT,GAC3B,GAAe,MAAXyG,GAAsC,IAAnBA,EAAQ/B,OAE7B,OADA3H,KAAKsJ,OAAOsG,SAAU,EACf/D,QAAQC,QAAQ9L,KAAKsJ,QAGP,MAAnBI,EAAQsW,SACVhgB,KAAKigB,eAAevW,EAAQsW,SAED,MAAzBtW,EAAQwW,eACVlgB,KAAKmgB,YAAYzW,EAAQwW,eAEE,MAAzBxW,EAAQ0W,eACVpgB,KAAKqgB,YAAY3W,EAAQ0W,cAAe,mBAEpB,MAAlB1W,EAAQ4W,QACVtgB,KAAKqgB,YAAY3W,EAAQ4W,OAAQ,YAEI,MAAnC5W,EAAQ6W,yBACVvgB,KAAKwgB,YAAY9W,EAAQ6W,yBAEH,MAApB7W,EAAQ+W,UACVzgB,KAAK0gB,gBAAgBhX,EAAQ+W,UAG/B,IAAK,MAAMxc,KAAOyF,EAEZA,EAAQqS,eAAe9X,KAAS6b,GAAezF,IAAIpW,IACrDjE,KAAKqgB,YAAY3W,EAAQzF,GAAM,KAAM,gBAKzC,OADAjE,KAAKsJ,OAAOsG,SAAU,EACf/D,QAAQC,QAAQ9L,KAAKsJ,OAC9B,CAEQ6W,YAAYzW,GAClBA,EAAQ6D,SAASoT,IACf,MAAM1N,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAO1B,KAAKwS,kBAAkBmO,EAAW3c,OAEhDiP,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAC3BmO,EAAWnM,MACXxU,KAAKwS,kBAAkBmO,EAAWC,iBAEhC5gB,KAAKsR,mBAAmB2B,EAAOuB,MAAMY,UACvCnC,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkBmO,EAAWlF,OAChDzb,KAAKsR,mBAAmBqP,EAAWlF,SAC7CxI,EAAOqB,MAAQ,UAAYqM,EAAWlF,MAAQ,MAGhDxI,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkBmO,EAAWtL,UAC1DpC,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAamP,EAAWnF,QACjDvI,EAAOqB,OAAStU,KAAKwS,kBAAkBmO,EAAWjK,KAAM,IAExD1W,KAAKmV,sBAAsBlC,GAC3BjT,KAAKyU,cAAcxB,GACnBjT,KAAKsJ,OAAOvC,QAAQQ,KAAK0L,EAAO,GAEpC,CAEQyN,gBAAgBhX,GACtBA,EAAQ6D,SAASsT,IACf,MAAM5N,EAAS,IAAI,IACnBA,EAAO2C,SAAW,IAAI,IACtB3C,EAAO7O,KAAO,IAAWiD,SACzB4L,EAAOvR,KAAO1B,KAAKwS,kBAAkBqO,EAAInL,SAAU,IACnD,MAAMC,EAAY1C,EAAOvR,KAAKgR,MAAM,KAChCiD,EAAUhO,OAAS,IACrBsL,EAAO2C,SAASC,UAAY7V,KAAKwS,kBAAkBmD,EAAU,KAEtC,IAArBA,EAAUhO,OACZsL,EAAO2C,SAASE,SAAW9V,KAAKwS,kBAAkBmD,EAAU,IAC9B,IAArBA,EAAUhO,SACnBsL,EAAO2C,SAASG,WAAa/V,KAAKwS,kBAAkBmD,EAAU,IAC9D1C,EAAO2C,SAASE,SAAW9V,KAAKwS,kBAAkBmD,EAAU,KAE9D1C,EAAO2C,SAASR,SAAWpV,KAAKwS,kBAAkBqO,EAAIC,QACtD9gB,KAAKyU,cAAcxB,GACnBjT,KAAKsJ,OAAOvC,QAAQQ,KAAK0L,EAAO,GAEpC,CAEQgN,eAAevW,GACrBA,EAAQ6D,SAASsT,IACf,MAAM5N,EAAS,IAAI,IACnBA,EAAO2C,SAAW,IAAI,IACtB3C,EAAO7O,KAAO,IAAWiD,SACzB4L,EAAOvR,KAAO1B,KAAKwS,kBAAkBqO,EAAIE,aACzC9N,EAAO2C,SAAS4J,SAAWxf,KAAKwS,kBAAkBqO,EAAIG,aACtD/N,EAAO2C,SAAS8J,KAAO1f,KAAKwS,kBAAkBqO,EAAInB,MAClDzM,EAAO2C,SAASmJ,MAAQ/e,KAAKwS,kBAAkBqO,EAAI9B,OACnD9L,EAAO2C,SAAS+J,WAAa3f,KAAKwS,kBAAkBqO,EAAII,SACxDhO,EAAO2C,SAASgK,QAAU5f,KAAKwS,kBAAkBqO,EAAIjB,SACtB,MAA3B3M,EAAO2C,SAASgK,UAClB3M,EAAO2C,SAASgK,QAAU3M,EAAO2C,SAASgK,QAAQsB,eAEpDlhB,KAAKyU,cAAcxB,GACnBjT,KAAKsJ,OAAOvC,QAAQQ,KAAK0L,EAAO,GAEpC,CAEQuN,YAAY9W,GAClBA,EAAQ6D,SAASsT,IACf,MAAM5N,EAAS,IAAI,IACnBA,EAAOI,KAAO,IAAI,IAClBJ,EAAO7O,KAAO,IAAW+C,KACzB8L,EAAOvR,KAAO1B,KAAKwS,kBAAkBqO,EAAIM,MACzClO,EAAOI,KAAK2D,OAAShX,KAAKwS,kBAAkBqO,EAAI5J,YAChDhE,EAAOI,KAAK+D,MAAQpX,KAAK2S,aAAaM,EAAOI,KAAK2D,QAClD/D,EAAOI,KAAKyD,eAAiB9W,KAAKwS,kBAAkBqO,EAAIO,OACnDphB,KAAKsR,mBAAmB2B,EAAOI,KAAK+D,SACnCpX,KAAKsR,mBAAmB2B,EAAOvR,MACjCuR,EAAOvR,KAAOuR,EAAOI,KAAK+D,MAE1BnE,EAAOvR,MAAQ,MAAQuR,EAAOI,KAAK+D,OAGvCpX,KAAKyU,cAAcxB,GACnBjT,KAAKsJ,OAAOvC,QAAQQ,KAAK0L,EAAO,GAEpC,CAEQoN,YAAY3W,EAAgB2X,EAAsB3f,EAAe,MACvEgI,EAAQ6D,SAASsT,IACf,MAAM5N,EAAS,IAAI,IACnBA,EAAOsC,WAAa,IAAI,IACxBtC,EAAO7O,KAAO,IAAWgD,WACzB6L,EAAOsC,WAAWnR,KAAO,KAAeoR,QAEtCvC,EAAOvR,KADG,MAARA,EACYA,EAEA1B,KAAKwS,kBAAkBqO,EAAIQ,IAE3C,IAAK,MAAMpd,KAAO4c,EAEZA,EAAI9E,eAAe9X,IAAQA,IAAQod,GACrCrhB,KAAK0U,WAAWzB,EAAQhP,EAAK4c,EAAI5c,GAAKsU,YAG1CvY,KAAKyU,cAAcxB,GACnBjT,KAAKsJ,OAAOvC,QAAQQ,KAAK0L,EAAO,GAEpC,EClKK,MAAMqO,WAA4B,EACvCpL,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,MAAMsR,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAM4f,MAAO,MAClDtO,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM6f,OAC5C,MAAMnW,EAAOrL,KAAKwS,kBAAkB7Q,EAAMgT,MACrC3U,KAAKsR,mBAAmBjG,KACvBrL,KAAKsR,mBAAmB2B,EAAOqB,OACjCrB,EAAOqB,MAAQjJ,EAEf4H,EAAOqB,OAAS,OAASjJ,GAI7B,MAAMjH,EAAOzC,EAAM,cACnB,GAAa,aAATyC,EACF6O,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAMib,UACrD3J,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAMmb,UACrD7J,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAM,kBACvC,GAAa,gBAATyC,EAAwB,CACjC6O,EAAO7O,KAAO,IAAW+C,KACzB8L,EAAOI,KAAO,IAAI,IAClBJ,EAAOI,KAAKyD,eAAiB9W,KAAKwS,kBAAkB7Q,EAAM,iBAC1DsR,EAAOI,KAAK2D,OAAShX,KAAKwS,kBAAkB7Q,EAAM,gBAClDsR,EAAOI,KAAK+D,MAAQpX,KAAK2S,aAAaM,EAAOI,KAAK2D,QAClD/D,EAAOI,KAAK6D,KAAOlX,KAAKwS,kBAAkB7Q,EAAM8f,KAChD,MAAMC,EAAS1hB,KAAKwS,kBAAkB7Q,EAAMggB,QAC5C,IAAK3hB,KAAKsR,mBAAmBoQ,GAAS,CACpC,MAAME,EAAWF,EAAOhP,MAAM,KAC1BkP,EAASja,OAAS,IACpBsL,EAAOI,KAAKC,SAAW+E,SAASuJ,EAAS,GAAI,MAAMrJ,WACnDtF,EAAOI,KAAKK,SAAW,IAAO2E,SAASuJ,EAAS,GAAI,OAAOrJ,W,EAKjEvY,KAAKmV,sBAAsBlC,GAC3BjT,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,EClDK,MAAMuY,WAA0B,EACrC3L,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,GAAe,MAAXyG,EAEF,OADAJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,IAAIwY,GAAW,EAsGf,OArGApY,EAAQ6D,SAAS5L,IACf,GAAIA,EAAMgG,OAAS,GAAMma,IAA0B,UAAbngB,EAAM,IAA+B,UAAbA,EAAM,IAElE,YADAmgB,GAAW,GAIb,MAAM7O,EAASjT,KAAKoU,kBAyBpB,GAxBAnB,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAMA,EAAMgG,OAAS,IAC3DsL,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAM,GAAI,MAG5B,IAAjBA,EAAMgG,SACJ3H,KAAK+hB,cAAcpgB,EAAO,aACzB3B,KAAK+hB,cAAcpgB,EAAO,aAC1B3B,KAAK+hB,cAAcpgB,EAAO,UAC1B3B,KAAK+hB,cAAcpgB,EAAO,UAE7BsR,EAAO7O,KAAO,IAAWgD,WACzB6L,EAAOsC,WAAa,IAAI,IACxBtC,EAAOsC,WAAWnR,KAAO,KAAeoR,SAIxCxV,KAAK+hB,cAAcpgB,EAAO,eAC1B3B,KAAK+hB,cAAcpgB,EAAO,WAC1B3B,KAAK+hB,cAAcpgB,EAAO,iBAE1BsR,EAAO7O,KAAO,IAAW+C,KACzB8L,EAAOI,KAAO,IAAI,KAGhB1R,EAAMgG,OAAS,GAAKhG,EAAMgG,OAAS,GAAM,EAC3C,IAAK,IAAIuN,EAAI,EAAGA,EAAIvT,EAAMgG,OAAS,EAAGuN,GAAK,EAAG,CAC5C,MAAM8M,EAAqBrgB,EAAMuT,EAAI,GACrC,GAAIlV,KAAKsR,mBAAmB0Q,GAC1B,SAGF,MAAMC,EAAoBtgB,EAAMuT,EAAI,GAC9BgN,EAAiBD,EAAUjU,cAEjC,GAAIiF,EAAO7O,OAAS,IAAW8C,MAAO,CACpC,GACqB,QAAnBgb,IACsB,MAArBjP,EAAOuB,MAAMc,MAA6C,IAA7BrC,EAAOuB,MAAMc,KAAK3N,QAChD,CACAsL,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAawQ,GACtC,Q,CACK,IACe,aAAnBE,GAAoD,UAAnBA,IAClCliB,KAAKsR,mBAAmB2B,EAAOuB,MAAMY,UACrC,CACAnC,EAAOuB,MAAMY,SAAW4M,EACxB,Q,CACK,GACc,aAAnBE,GACAliB,KAAKsR,mBAAmB2B,EAAOuB,MAAMa,UACrC,CACApC,EAAOuB,MAAMa,SAAW2M,EACxB,Q,CACK,GAAuB,SAAnBE,GAA6BliB,KAAKsR,mBAAmB2B,EAAOuB,MAAMoE,MAAO,CAClF3F,EAAOuB,MAAMoE,KAAOoJ,EACpB,Q,OAEG,GAAI/O,EAAO7O,OAAS,IAAW+C,KAAM,CAC1C,GACqB,eAAnB+a,GACAliB,KAAKsR,mBAAmB2B,EAAOI,KAAKyD,gBACpC,CACA7D,EAAOI,KAAKyD,eAAiBkL,EAC7B,Q,CACK,GAAuB,WAAnBE,GAA+BliB,KAAKsR,mBAAmB2B,EAAOI,KAAK2D,QAAS,CACrF/D,EAAOI,KAAK2D,OAASgL,EACrB/O,EAAOI,KAAK+D,MAAQpX,KAAK2S,aAAaqP,GACtC,Q,CACK,GAAuB,QAAnBE,GAA4BliB,KAAKsR,mBAAmB2B,EAAOI,KAAK6D,MAAO,CAChFjE,EAAOI,KAAK6D,KAAO8K,EACnB,Q,CACK,GACc,gBAAnBE,GACAliB,KAAKsR,mBAAmB2B,EAAOI,KAAKC,WACpCtT,KAAKsR,mBAAmB2B,EAAOI,KAAKK,UAEpC,GAAI1T,KAAKgT,kBAAkBC,EAAQ+O,GACjC,cAEG,GAAuB,SAAnBE,EAET,Q,CAIJliB,KAAK0U,WAAWzB,EAAQgP,EAAWD,E,CAIvChiB,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,CAEQyY,cAAcxN,EAAe7S,GACnC,OAAc,MAAV6S,GAA0B,MAAR7S,GAIpB6S,EAAOzK,QAAQ+J,IAAO7T,KAAKsR,mBAAmBuC,IAAMA,EAAE7F,gBAAkBtM,EAAKsM,gBAC1ErG,OAAS,CAEhB,ECtHF,MAAMwa,GAAkB,IAAIrP,OAAO,qBAAsB,KAElD,MAAMsP,WAA2B,EACtClM,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAA0B8M,KAAKN,MAAMjT,GAC3C,GAAe,MAAXyG,GAAoC,MAAjBA,EAAQwP,OAA0C,IAAzBxP,EAAQwP,MAAMvR,OAE5D,OADA2B,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,MAAM+Y,EAAa,IAAIxI,IACjByI,EAAkB,IAAIzI,IACtB0I,EAAaviB,KAAKwiB,gBAAgB9Y,EAAQhC,SA8ChD,OA7CA1H,KAAKyiB,kBAAkB,KAAMF,EAAYF,GACzCA,EAAW9U,SAAQ,CAAC4I,EAAKlS,KACvBqe,EAAgBrI,IAAIhW,EAAKqF,EAAO5B,QAAQC,QACxC,MAAMkM,EAAI,IAAI,IACdA,EAAEnS,KAAOyU,EACT7M,EAAO5B,QAAQH,KAAKsM,EAAE,IAGxBnK,EAAQwP,MAAM3L,SAASsS,IACD,MAAhBA,EAAKnY,SAAmBmY,EAAKnY,QAAQC,OAAS,GAAK2a,EAAgBjI,IAAIwF,EAAKnY,QAAQ,KACtF4B,EAAOkG,oBAAoBjI,KAAK,CAC9B+B,EAAOvC,QAAQY,OACf2a,EAAgB/f,IAAIsd,EAAKnY,QAAQ,MAIrC,MAAMuL,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAO1B,KAAKwS,kBAAkBqN,EAAK7b,OAC1CiP,EAAOoB,SAAWwL,EAAKxL,SAAW,EAER,MAAtBwL,EAAK6C,eAAwC,MAAf7C,EAAKtL,QAAkBsL,EAAKtL,OAAO5M,OAAS,IAEjC,IAAzCkY,EAAK6C,cAAc3Q,QAAQ,WACiB,IAA5C8N,EAAK6C,cAAc3Q,QAAQ,aAE3B/R,KAAK2iB,aAAa1P,EAAQ4M,EAAKtL,QACwB,IAA9CsL,EAAK6C,cAAc3Q,QAAQ,eACpC/R,KAAKwgB,YAAYvN,EAAQ4M,EAAKtL,QAE9BsL,EAAK6C,cAAc3Q,QAAQ,aAAe,GAC1C8N,EAAKtL,OAAOqO,MAAM/O,GAAiB,aAAXA,EAAEzP,OAAwBpE,KAAKsR,mBAAmBuC,EAAElS,SAE5E3B,KAAK2iB,aAAa1P,EAAQ4M,EAAKtL,QAE/BvU,KAAKqgB,YAAYpN,EAAQ4M,EAAKtL,SAIlCtB,EAAOqB,OAAS,KAAOtU,KAAKwS,kBAAkBqN,EAAKnJ,KAAM,IACzD1W,KAAKmV,sBAAsBlC,GAC3BjT,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,CAEQqZ,aAAa1P,EAAoBsB,GACvC,MAAMsO,EAAiB,GACvBtO,EAAOhH,SAASsH,IACd,IAAI7U,KAAKsR,mBAAmBuD,EAAMlT,QAAyB,YAAfkT,EAAMzQ,KAIlD,GACkB,aAAfyQ,EAAMzQ,MAAsC,UAAfyQ,EAAMzQ,OACpCpE,KAAKsR,mBAAmB2B,EAAOuB,MAAMY,UAGhC,GAAmB,aAAfP,EAAMzQ,MAAuBpE,KAAKsR,mBAAmB2B,EAAOuB,MAAMa,UAC3EpC,EAAOuB,MAAMa,SAAWR,EAAMlT,WACzB,GAAmB,SAAfkT,EAAMzQ,MAAmBpE,KAAKsR,mBAAmB2B,EAAOuB,MAAMoE,MACvE3F,EAAOuB,MAAMoE,KAAO/D,EAAMlT,WACrB,GAAmB,QAAfkT,EAAMzQ,KACfye,EAAKtb,KAAKsN,EAAMlT,YACX,GAAmB,cAAfkT,EAAMzQ,KAAsB,CACrC,IAAI0e,EAAejO,EAAMlT,MAAM0Q,WAAW,iBACtCwC,EAAMlT,MACN,gBAAkBkT,EAAMlT,MAC5BmhB,EAAeA,EAAaxQ,QAAQ,aAAc,IAClDwQ,EAAeA,EAAaxQ,QAAQ6P,GAAiB,iBACrDU,EAAKtb,KAAKub,E,MAEV9iB,KAAK0U,WACHzB,EACA4B,EAAMgC,MACNhC,EAAMlT,MACc,IAApBkT,EAAMkO,UAAkB,KAAUC,OAAS,KAAUrO,WAnBvD1B,EAAOuB,MAAMY,SAAWP,EAAMlT,K,IAuBlCsR,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAaqR,EACxC,CAEQrC,YAAYvN,EAAoBsB,GACtCtB,EAAOI,KAAO,IAAI,IAClBJ,EAAO7O,KAAO,IAAW+C,KACzBoN,EAAOhH,SAASsH,IAEZ7U,KAAKsR,mBAAmBuD,EAAMlT,QACf,YAAfkT,EAAMzQ,MACS,WAAfyQ,EAAMzQ,OAKW,WAAfyQ,EAAMzQ,MAAqBpE,KAAKsR,mBAAmB2B,EAAOI,KAAKyD,gBACjE7D,EAAOI,KAAKyD,eAAiBjC,EAAMlT,MACX,aAAfkT,EAAMzQ,MAAuBpE,KAAKsR,mBAAmB2B,EAAOI,KAAK2D,SAC1E/D,EAAOI,KAAK2D,OAASnC,EAAMlT,MAC3BsR,EAAOI,KAAK+D,MAAQpX,KAAK2S,aAAaM,EAAOI,KAAK2D,SAC1B,UAAfnC,EAAMzQ,MAAoBpE,KAAKsR,mBAAmB2B,EAAOI,KAAK6D,MACvEjE,EAAOI,KAAK6D,KAAOrC,EAAMlT,MACD,aAAfkT,EAAMzQ,MAAuBpE,KAAKsR,mBAAmB2B,EAAOI,KAAKK,UACrE1T,KAAKgT,kBAAkBC,EAAQ4B,EAAMlT,QAS1C3B,KAAK0U,WACHzB,EACA4B,EAAMgC,MACNhC,EAAMlT,MACc,IAApBkT,EAAMkO,UAAkB,KAAUC,OAAS,KAAUrO,M,GAI7D,CAEQ0L,YAAYpN,EAAoBsB,GACtCA,EAAOhH,SAASsH,IACV7U,KAAKsR,mBAAmBuD,EAAMlT,QAAyB,YAAfkT,EAAMzQ,MAGlDpE,KAAK0U,WACHzB,EACA4B,EAAMgC,MACNhC,EAAMlT,MACc,IAApBkT,EAAMkO,UAAkB,KAAUC,OAAS,KAAUrO,KACtD,GAEL,CAEQ6N,gBAAgB9a,GACtB,GAAe,MAAXA,EACF,MAAO,GAET,MAAM6a,EAAqC,GACrCvb,EAAM,IAAI6S,IAAkC,IAYlD,OAXAnS,EAAQ6F,SAASsT,IACf7Z,EAAIiT,IAAI4G,EAAIoC,KAAMpC,GAClBA,EAAIqC,SAAW,EAAE,IAEnBxb,EAAQ6F,SAASsT,IACQ,MAAnBA,EAAIsC,aAA2C,KAApBtC,EAAIsC,aAAsBnc,EAAIqT,IAAIwG,EAAIsC,aACnEnc,EAAIzE,IAAIse,EAAIsC,aAAaD,SAAS3b,KAAKsZ,GAEvC0B,EAAWhb,KAAKsZ,E,IAGb0B,CACT,CAEQE,kBACNW,EACAC,EACArc,GAEY,MAARqc,GAGJA,EAAK9V,SAASsG,IACZ,GAAe,MAAXA,EAAE7P,OAAoC,KAAnB6P,EAAE7P,MAAMgN,OAAe,CAC5C,IAAIhN,EAAQ6P,EAAE7P,MAAMgN,OACD,MAAfoS,GAA8C,KAAvBA,EAAYpS,SACrChN,EAAQof,EAAc,IAAMpf,GAE9BgD,EAAIiT,IAAIpG,EAAEoP,KAAMjf,GACE,MAAd6P,EAAEqP,UAA0C,IAAtBrP,EAAEqP,SAASvb,QACnC3H,KAAKyiB,kBAAkBze,EAAO6P,EAAEqP,SAAUlc,E,IAIlD,ECxMK,MAAMsc,WAA2B,EACtCpN,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EACGI,QAAQnI,GACc,6BAAdA,EAAMuQ,MAEd3E,SAAS5L,IACR,MAAMsR,EAASjT,KAAKoU,kBACdlC,EAAMlS,KAAKwS,kBAAkB7Q,EAAMuQ,IAAKlS,KAAKwS,kBAAkB7Q,EAAMwQ,WAC3Ec,EAAOvR,KAAO1B,KAAKwS,kBAAkBxS,KAAKiS,YAAYC,GAAM,MAC5De,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAMyT,UACrDnC,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAM0T,UACrDpC,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAaU,GACtClS,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG/B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECvBF,IAAYia,IAAZ,SAAYA,GACV,qBACA,8BACD,CAHD,CAAYA,KAAAA,GAAiB,KCEtB,MAAMC,WAA2B,EACtCtN,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAmB8M,KAAKN,MAAMjT,GACpC,GAAe,MAAXyG,GAAmC,MAAhBA,EAAQzG,KAE7B,OADAqG,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,IAAK,MAAMrF,KAAOyF,EAAQzG,KAAM,CAE9B,IAAKyG,EAAQzG,KAAK8Y,eAAe9X,GAC/B,SAGF,MAAMtC,EAAQ+H,EAAQzG,KAAKgB,GACrBgP,EAASjT,KAAKyjB,WAAW9hB,GAC/B2H,EAAOvC,QAAQQ,KAAK0L,E,CAItB,OADA3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,CAEQma,WAAWvH,GACjB,MAAMjJ,EAASjT,KAAKoU,kBAKpB,OAJAnB,EAAOvR,KAAO1B,KAAKwS,kBAAkB0J,EAAMwH,SAC3CzQ,EAAOqB,MAAQtU,KAAKwS,kBAAkB0J,EAAM5H,OAC5CrB,EAAOoB,SAAW6H,EAAM7H,SAAW,EAE3B6H,EAAM9X,MACZ,KAAKmf,GAAkBrc,MACrBlH,KAAK2jB,iBAAiBzH,EAAOjJ,GAC7B,MACF,KAAKsQ,GAAkBK,WACrB5jB,KAAK6jB,sBAAsB3H,EAAOjJ,GAClC,MACF,QACE,OAMJ,OAFAjT,KAAKmV,sBAAsBlC,GAC3BjT,KAAKyU,cAAcxB,GACZA,CACT,CAEQ0Q,iBAAiBzH,EAAiBjJ,GACxCA,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB0J,EAAM9G,UACrDnC,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB0J,EAAM7G,UACrDpC,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa0K,EAAMhK,IAC9C,CAEQ2R,sBAAsB3H,EAAiBjJ,GAC7CA,EAAO7O,KAAO,IAAW+C,KACzB8L,EAAOI,KAAO,IAAI,IAClBJ,EAAOI,KAAKyD,eAAiB9W,KAAKwS,kBAAkB0J,EAAM9G,UAC1DnC,EAAOI,KAAK2D,OAAShX,KAAKwS,kBAAkB0J,EAAM4H,cAClD7Q,EAAOI,KAAK+D,MAAQpX,KAAK2S,aAAaM,EAAOI,KAAK2D,QAClD/D,EAAOI,KAAK6D,KAAOlX,KAAKwS,kBAAkB0J,EAAM6H,WAC3C/jB,KAAKsR,mBAAmB4K,EAAM8H,eAC5BhkB,KAAKgT,kBAAkBC,EAAQiJ,EAAM8H,eACxChkB,KAAK0U,WAAWzB,EAAQ,aAAciJ,EAAM8H,cAG3ChkB,KAAKsR,mBAAmB4K,EAAM7G,WACjCrV,KAAK0U,WAAWzB,EAAQ,MAAOiJ,EAAM7G,SAEzC,ECzEK,MAAM4O,WAA0B,EACrC/N,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU8M,KAAKN,MAAMjT,GAC3B,GAAe,MAAXyG,GAAmD,IAAhCkH,OAAOiN,KAAKnU,GAAS/B,OAE1C,OADA2B,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,IAAK,MAAM4a,KAAWxa,EAEjBA,EAAQqS,eAAemI,KACxBlkB,KAAKsR,mBAAmB4S,IACI,IAA5Bxa,EAAQwa,GAASvc,QAKnB+B,EAAQwa,GAAS3W,SAAS5L,IACxB,GACE3B,KAAKsR,mBAAmB3P,EAAMwiB,eACS,IAAvCxiB,EAAMwiB,aAAapS,QAAQ,QAE3B,OAGF/R,KAAK8U,cAAcxL,EAAQ4a,GAC3B,MAAMjR,EAASjT,KAAKoU,kBAQpB,GAPAnB,EAAOvR,KAAOC,EAAMwiB,aAAa7R,QAAQ,UAAW,IAAIA,QAAQ,WAAY,IACxEW,EAAOvR,KAAKiG,OAAS,KACvBsL,EAAOvR,KAAOuR,EAAOvR,KAAKsQ,UAAU,EAAG,KAEzCiB,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAMR,QACrD8R,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAMwiB,cAEpB,MAApBxiB,EAAMyiB,WAAoB,CAC5BnR,EAAOuB,MAAMY,SACS,MAApBzT,EAAMyiB,WACFpkB,KAAKwS,kBAAkB7Q,EAAMyiB,WAAWC,gBACxC,KACN,IAAK,MAAMC,KAAQ3iB,EAAMyiB,WAEpBziB,EAAMyiB,WAAWrI,eAAeuI,IACxB,mBAATA,GACS,eAATA,GAIFtkB,KAAK0U,WAAWzB,EAAQqR,EAAM3iB,EAAMyiB,WAAWE,G,CAInDtkB,KAAKmV,sBAAsBlC,GAC3BjT,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAS/B,OALIjT,KAAKqQ,cACPrQ,KAAK2T,yBAAyBrK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,EChEF,MAAMib,GAAc,YACdC,GAAqB,mBACrBC,GAAiB,eACjBC,GAAY,UAEX,MAAMC,WAA6B,EACxCzO,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EAEnB,IAAIsb,EACAC,EACAC,EACAC,EAAc/kB,KAAK8Q,aAAa7N,GAAM8N,KAAK,MAE/C,IAA0C,IAAtCgU,EAAYhT,QAAQwS,IAAqB,CAC3C,MAAMS,EAAQD,EAAYrS,MAAM6R,IAC5BS,EAAMrd,OAAS,IACjBod,EAAcC,EAAM,GACpBJ,EAAYI,EAAM,G,CAGtB,IAAiD,IAA7CD,EAAYhT,QAAQyS,IAA4B,CAClD,MAAMQ,EAAQD,EAAYrS,MAAM8R,IAC5BQ,EAAMrd,OAAS,IACjBod,EAAcC,EAAM,GACpBH,EAAmBG,EAAM,G,CAG7B,GAA4C,IAAxCD,EAAYhT,QAAQ0S,IAAuB,CAC7C,MAAMO,EAAQD,EAAYrS,MAAM+R,IAC5BO,EAAMrd,OAAS,IACjBod,EAAcC,EAAM,GACpBF,EAAeE,EAAM,G,CAIzB,MAAM1Q,EAAQtU,KAAKilB,kBAAkBL,GAC/BM,EAAellB,KAAKilB,kBAAkBJ,GACtCM,EAAWnlB,KAAKilB,kBAAkBH,GA+BxC,OA7BAxQ,EAAM/G,SAAS6X,IACb,MAAMnS,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAO1B,KAAKwS,kBAAkB4S,EAAE7iB,IAAI,SAC3C0Q,EAAOqB,MAAQtU,KAAKwS,kBAAkB4S,EAAE7iB,IAAI,SAC5CvC,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7BkS,EAASvb,OAAOsb,GAAc3X,SAAS8X,IACrC,MAAMpS,EAASjT,KAAKoU,kBACdkR,EAAUD,EAAEhL,IAAI,gBAAkB,eAAiB,cACzDpH,EAAOvR,KAAO1B,KAAKwS,kBAAkB6S,EAAE9iB,IAAI+iB,GAAU,IAChDtlB,KAAKsR,mBAAmB+T,EAAE9iB,IAAI,iBAC5BvC,KAAKsR,mBAAmB2B,EAAOvR,QAClCuR,EAAOvR,MAAQ,MAEjBuR,EAAOvR,MAAQ2jB,EAAE9iB,IAAI,eAEvB0Q,EAAOqB,MAAQtU,KAAKwS,kBAAkB6S,EAAE9iB,IAAI,YACxC8iB,EAAEhL,IAAI,iBACRpH,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa6T,EAAE9iB,IAAI,iBAE9C0Q,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB6S,EAAE9iB,IAAI,UACrD0Q,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB6S,EAAE9iB,IAAI,aACrDvC,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,CAEQ2b,kBAAkBhiB,GACxB,GAAIjD,KAAKsR,mBAAmBrO,KAAsC,IAA7BA,EAAK8O,QAAQ2S,IAChD,MAAO,GAET,MAAMxL,EAA+B,GAwCrC,OAvCAjW,EAAKyP,MAAMgS,IAAWnX,SAASgY,IAC7B,IAAyB,IAArBA,EAAExT,QAAQ,MACZ,OAEF,MAAM8N,EAAO,IAAIhG,IACjB,IAAI2L,EACAC,EACJF,EAAE7S,MAAM,MAAMnF,SAASmY,IACrB,GAAmB,MAAfF,EAEF,YADAA,GAAe,KAAOE,GAGxB,MAAMC,EAAaD,EAAE3T,QAAQ,KAC7B,IAAI9N,EACAkS,GACgB,IAAhBwP,IAGF1hB,EAAMyhB,EAAE1T,UAAU,EAAG2T,GACjBD,EAAE/d,OAASge,EAAa,IAC1BxP,EAAMuP,EAAE1T,UAAU2T,EAAa,IAGxB,MAAP1hB,GACF4b,EAAK5F,IAAIhW,EAAKkS,GAEJ,YAARlS,GAA6B,SAARA,IACvBuhB,EAAcrP,EACdsP,EAAiBxhB,G,IAGF,MAAfuhB,GAAyC,MAAlBC,GACzB5F,EAAK5F,IAAIwL,EAAgBD,GAET,IAAd3F,EAAK+F,MAGT1M,EAAM3R,KAAKsY,EAAK,IAEX3G,CACT,EClHK,MAAM2M,WAA4B,EAAzC,c,oBACE,KAAAvc,OAAS,IAAI,CA4Gf,CA1GE4M,MAAMjT,GACJ,MAAMsN,EAAMvQ,KAAKsQ,SAASrN,GAC1B,GAAW,MAAPsN,EAEF,OADAvQ,KAAKsJ,OAAOsG,SAAU,EACf/D,QAAQC,QAAQ9L,KAAKsJ,QAI9B,MAAMwc,EAAkBvV,EAAI9E,cAAc,eAE1C,GAAuB,MAAnBqa,EAGF,OAFA9lB,KAAKsJ,OAAOqQ,aAAe,8BAC3B3Z,KAAKsJ,OAAOsG,SAAU,EACf/D,QAAQC,QAAQ9L,KAAKsJ,QAG9B,MAAMyc,EAAWD,EAAgBra,cAAc,QAC/C,GAAgB,MAAZsa,EAGF,OAFA/lB,KAAKsJ,OAAOqQ,aAAe,qCAC3B3Z,KAAKsJ,OAAOsG,SAAU,EACf/D,QAAQC,QAAQ9L,KAAKsJ,QAG9B,MAAM0c,EAAYD,EAASta,cAAc,SACzC,OAAiB,MAAbua,GACFhmB,KAAKsJ,OAAOqQ,aAAe,6CAC3B3Z,KAAKsJ,OAAOsG,SAAU,EACf/D,QAAQC,QAAQ9L,KAAKsJ,UAG9BtJ,KAAKimB,SAASD,GAAW,EAAM,IAE3BhmB,KAAKqQ,cACPrQ,KAAK2T,yBAAyB3T,KAAKsJ,QAGrCtJ,KAAKsJ,OAAOsG,SAAU,EACf/D,QAAQC,QAAQ9L,KAAKsJ,QAC9B,CAEA2c,SAASC,EAAeC,EAAqBC,GAC3C,MAAMpR,EAAchV,KAAKsJ,OAAO5B,QAAQC,OACxC,IAAI0e,EAAYD,EAEhB,IAAKD,EAAY,CACG,KAAdE,IACFA,GAAa,KAEf,MAAMC,EAAStmB,KAAK8T,yBAAyBoS,EAAM,QACnDG,GAAuB,MAAVC,EAAiB,IAAMA,EAAO9Z,YAC3C,MAAM2L,EAAS,IAAI,IACnBA,EAAOzW,KAAO2kB,EACdrmB,KAAKsJ,OAAO5B,QAAQH,KAAK4Q,E,CAG3BnY,KAAKkU,4BAA4BgS,EAAM,SAAS3Y,SAAS2O,IACvD,MAAMqK,EAAcvmB,KAAKsJ,OAAOvC,QAAQY,OAElCsL,EAASjT,KAAKoU,kBACpBpU,KAAKkU,4BAA4BgI,EAAO,UAAU3O,SAASiZ,IACzD,MAAMC,EAAUzmB,KAAK8T,yBAAyB0S,EAAa,SACrD7kB,EAAmB,MAAX8kB,EAAkBA,EAAQja,YAAc,KACtD,GAAIxM,KAAKsR,mBAAmB3P,GAC1B,OAEF,MAAM+kB,EAAQ1mB,KAAK8T,yBAAyB0S,EAAa,OACnDviB,EAAe,MAATyiB,EAAgBA,EAAMla,YAAc,KAEhD,GAAY,QAARvI,EACFgP,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,QACjC,GAAY,aAARsC,EACTgP,EAAOuB,MAAMY,SAAWzT,OACnB,GAAY,aAARsC,EACTgP,EAAOuB,MAAMa,SAAW1T,OACnB,GAAY,QAARsC,EACTgP,EAAOuB,MAAMoE,KAAOjX,EAAM2Q,QAAQ,OAAQ,SACrC,GAAY,UAARrO,EACTgP,EAAOvR,KAAOC,OACT,GAAY,UAARsC,EACTgP,EAAOqB,OAAS3S,EAAQ,SACnB,CACL,IAAIyC,EAAO,KAAUuQ,KACrB,MAAMgS,EAAQF,EAAQrC,WAEpBuC,EAAMhf,OAAS,GACU,MAAzBgf,EAAMC,iBAC0B,SAAhCD,EAAMC,gBAAgBjlB,QAEtByC,EAAO,KAAU4e,QAEnBhjB,KAAK0U,WAAWzB,EAAQhP,EAAKtC,EAAOyC,E,KAIxCpE,KAAKyU,cAAcxB,GACnBjT,KAAKsJ,OAAOvC,QAAQQ,KAAK0L,GAEpBkT,GACHnmB,KAAKsJ,OAAOkG,oBAAoBjI,KAAK,CAACgf,EAAavR,G,IAIvDhV,KAAKkU,4BAA4BgS,EAAM,SAAS3Y,SAAStM,IACvDjB,KAAKimB,SAAShlB,GAAO,EAAOolB,EAAU,GAE1C,EC/GK,MAAMQ,WAA4B,EACvC3Q,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,GAAI3B,KAAKsR,mBAAmB3P,EAAMmlB,OAChC,OAGFnlB,EAAMolB,OACH/mB,KAAKsR,mBAAmB3P,EAAMolB,QAAUplB,EAAMolB,MAAM1U,WAAW,SAC5D1Q,EAAMolB,MAAMzU,QAAQ,QAAS,IAC7B3Q,EAAMolB,MACZ,MAAMV,EAAarmB,KAAKsR,mBAAmB3P,EAAMolB,OAAuB,KAAdplB,EAAMolB,MAChE/mB,KAAK8U,cAAcxL,EAAQ+c,GAE3B,MAAMpT,EAASjT,KAAKoU,kBACpBnB,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM6f,OAC5CvO,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAMmlB,MAAO,MAClD7T,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAMib,UACrD3J,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAMmb,UACrD7J,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAMia,KAC5C5b,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAGzBjT,KAAKqQ,cACPrQ,KAAK2T,yBAAyBrK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECtCK,MAAM0d,WAA0B,EACrC9Q,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,GAAIA,EAAMgG,OAAS,EACjB,OAGF3H,KAAK8U,cAAcxL,EAAQ3H,EAAM,IACjC,MAAMsR,EAASjT,KAAKoU,kBAEdE,EAAQtU,KAAKwS,kBAAkB7Q,EAAM,IAU3C,GATI2S,IACFrB,EAAOqB,MAAQ,GAAGA,OAGpBrB,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAM,GAAI,MAC/CsR,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAM,IACrDsR,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAM,IACrDsR,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAM,IAExCA,EAAMgG,OAAS,EAEjB,IAAK,IAAIuN,EAAI,EAAGA,EAAIvT,EAAMgG,OAAQuN,GAAQ,EACxB,cAAZvT,EAAMuT,GACRjC,EAAOuB,MAAMoE,KAAOjX,EAAMuT,EAAI,GAE9BlV,KAAK0U,WAAWzB,EAAQtR,EAAMuT,GAAIvT,EAAMuT,EAAI,IAKlDlV,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAGzBjT,KAAKqQ,cACPrQ,KAAK2T,yBAAyBrK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECtCK,MAAM2d,WAA4B,EACvC/Q,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,MAAM4kB,EAAcjd,EAAOvC,QAAQY,OACnC,IAAIqN,EAAc1L,EAAO5B,QAAQC,OAC7B+P,EAAW/V,EAAM+V,SACL,MAAZA,IAEFA,EAAWA,EAASpF,QAAQ,MAAO,KAAKA,QAAQ,wBAAyB,KAE3E,MAAM4U,EAA2D,WAA/ClnB,KAAKwS,kBAAkBkF,EAAU,UACnD,IAAIzC,EAAYiS,EAEhB,GAAIA,EACF,IAAK,IAAIhS,EAAI,EAAGA,EAAI5L,EAAO5B,QAAQC,OAAQuN,IACzC,GAAI5L,EAAO5B,QAAQwN,GAAGxT,OAASgW,EAAU,CACvCzC,GAAY,EACZD,EAAcE,EACd,K,CAKN,MAAMjC,EAASjT,KAAKmnB,gBAAgBxlB,GACpC,GAAIsR,EAAO7O,OAAS,IAAW8C,MAC7B+L,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAMiW,OAC5C3E,EAAOuB,MAAQ,IAAI,IACnBvB,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAMuQ,KAC5Ce,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAMyT,UACrDnC,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAM0T,UACrDpC,EAAOuB,MAAMoE,KAAO5Y,KAAKwS,kBAAkB7Q,EAAMiX,WAC5C,GAAI3F,EAAO7O,OAAS,IAAWgD,WACpCpH,KAAKonB,gBAAgBzlB,EAAOsR,QACvB,GAAIA,EAAO7O,OAAS,IAAW+C,KACpC8L,EAAOI,KAAOrT,KAAKqnB,UAAU1lB,GAC7BsR,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM2S,YACvC,GAAIrB,EAAO7O,OAAS,IAAWiD,WACpC4L,EAAO2C,SAAW5V,KAAKsnB,cAAc3lB,GACrCsR,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM2S,QACvCtU,KAAKsR,mBAAmB3P,EAAM4lB,QAAQ,CAEzC,MAAMC,EAAaxnB,KAAKmnB,gBAAgBxlB,GACxC6lB,EAAW5R,SAAW,KACtB4R,EAAWpjB,KAAO,IAAW+C,KAC7BqgB,EAAWnU,KAAOrT,KAAKqnB,UAAU1lB,GACjC2H,EAAOvC,QAAQQ,KAAKigB,E,CAMxB,GAFAle,EAAOvC,QAAQQ,KAAK0L,GAEhBgC,EAAW,CACb,MAAMpB,EAAI,IAAI,IACdA,EAAEnS,KAAOgW,EACTpO,EAAO5B,QAAQH,KAAKsM,E,CAElBqT,GACF5d,EAAOkG,oBAAoBjI,KAAK,CAACgf,EAAavR,G,IAI9ChV,KAAKqQ,cACPrQ,KAAK2T,yBAAyBrK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,CAEQ6d,gBAAgBxlB,GACtB,MAAMsR,EAAS,IAAI,IAyBnB,OAvBItR,EAAMoa,eAAe,gBAAkBpa,EAAMoa,eAAe,oBAE9D9I,EAAOoB,UAAW,EAClBpB,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAM8lB,YAAa,MACxDxU,EAAO7O,KAAO,IAAW+C,KAGtBnH,KAAKsR,mBAAmB3P,EAAMqC,QAC9BhE,KAAKsR,mBAAmB3P,EAAM+lB,YAC9B1nB,KAAKsR,mBAAmB3P,EAAMgmB,WAC9B3nB,KAAKsR,mBAAmB3P,EAAM6d,WAC9Bxf,KAAKsR,mBAAmB3P,EAAM2d,QAC9Btf,KAAKsR,mBAAmB3P,EAAMyT,WAC9BpV,KAAKsR,mBAAmB3P,EAAM8Z,SAE/BxI,EAAO7O,KAAO,IAAWiD,YAI3B4L,EAAOoB,UAAYrU,KAAKqQ,cAA2D,MAA3CrQ,KAAKwS,kBAAkB7Q,EAAMgW,IAAK,KAC1E1E,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAMD,KAAM,MACjDuR,EAAO7O,KAAqB,cAAdzC,EAAMuQ,IAAsB,IAAW9K,WAAa,IAAWF,OAExE+L,CACT,CAEQoU,UAAU1lB,GAChB,MAAM0R,EAAO,IAAI,IAMjB,GALAA,EAAKyD,eAAiB9W,KAAKwS,kBAAkB7Q,EAAMimB,QACnDvU,EAAK2D,OAAShX,KAAKwS,kBAAkB7Q,EAAM4lB,OAC3ClU,EAAK6D,KAAOlX,KAAKwS,kBAAkB7Q,EAAMkmB,OACzCxU,EAAK+D,MAAQpX,KAAK2S,aAAahR,EAAM4lB,QAEhCvnB,KAAKsR,mBAAmB3P,EAAMmmB,QAAUnmB,EAAMmmB,MAAM/V,QAAQ,MAAQ,EAAG,CAC1E,MAAMgW,EAAcpmB,EAAMmmB,MAAiBpV,MAAM,KAC7CqV,EAAWpgB,OAAS,IACtB0L,EAAKK,QAAUqU,EAAW,GAC1B1U,EAAKC,SAAWyU,EAAW,GACE,IAAzB1U,EAAKC,SAAS3L,QAAqC,MAArB0L,EAAKC,SAAS,KAC9CD,EAAKC,SAAWD,EAAKC,SAAS,I,CAKpC,OAAOD,CACT,CAEQiU,cAAc3lB,GACpB,MAAMiU,EAAW,IAAI,IAsBrB,OArBAA,EAAS5R,MAAQhE,KAAKwS,kBAAkB7Q,EAAMqC,OAC9C4R,EAASC,UAAY7V,KAAKwS,kBAAkB7Q,EAAM+lB,WAClD9R,EAASG,WAAa/V,KAAKwS,kBAAkB7Q,EAAMqmB,YACnDpS,EAASE,SAAW9V,KAAKwS,kBAAkB7Q,EAAMgmB,UACjD/R,EAASR,SAAWpV,KAAKwS,kBAAkB7Q,EAAMyT,UACjDQ,EAASqS,QAAUjoB,KAAKwS,kBAAkB7Q,EAAMsmB,SAChDrS,EAASoJ,IAAMhf,KAAKwS,kBAAkB7Q,EAAMqd,KAC5CpJ,EAAS4J,SAAWxf,KAAKwS,kBAAkB7Q,EAAM6d,UACjD5J,EAASsS,SAAWloB,KAAKwS,kBAAkB7Q,EAAMumB,UACjDtS,EAASuS,SAAWnoB,KAAKwS,kBAAkB7Q,EAAMwmB,UACjDvS,EAAS8J,KAAO1f,KAAKwS,kBAAkB7Q,EAAM+d,MAC7C9J,EAASmJ,MAAQ/e,KAAKwS,kBAAkB7Q,EAAMod,OAC9CnJ,EAAS+J,WAAa3f,KAAKwS,kBAAkB7Q,EAAMiL,KACnDgJ,EAASgK,QAAU5f,KAAKwS,kBAAkB7Q,EAAMie,SAChDhK,EAAS6F,MAAQzb,KAAKwS,kBAAkB7Q,EAAM8Z,OAC9C7F,EAAS0J,MAAQtf,KAAKwS,kBAAkB7Q,EAAM2d,OAEzCtf,KAAKsR,mBAAmBsE,EAAS5R,SACpC4R,EAAS5R,MAAQ4R,EAAS5R,MAAMokB,OAAO,GAAGlH,cAAgBtL,EAAS5R,MAAMgS,MAAM,IAG1EJ,CACT,CAEQwR,gBAAgBzlB,EAAYsR,GAClC,MAAMoV,EAAaroB,KAAK8Q,aAAanP,EAAMiW,OAC3C,IAAI0Q,GAAgB,EAEpB,GAAID,EAAW1gB,OAAQ,CACrB,MAAM4gB,EAAYF,EAAW,GAAG3V,MAAM,KACtC,GACE6V,EAAU5gB,OAAS,GACF,aAAjB4gB,EAAU,KACQ,gBAAjBA,EAAU,IAAyC,YAAjBA,EAAU,IAC7C,CACA,GAAqB,gBAAjBA,EAAU,GAAsB,CAClC,MAAMC,EAAaxoB,KAAKyoB,uBAAiCxV,EAAQoV,EAAY,CAC3EK,OAAQ,SACR,eAAgB,iBAChB,gBAAiB,OAGjB,kBAAmB,aAGrB,GAAI1oB,KAAKsR,mBAAmBkX,EAAWlV,WAAqC,MAAxBkV,EAAWlV,SAE7DkV,EAAWlV,cAAWqV,MACjB,CACL,MAAOC,EAAanV,GAAQ+U,EAAWlV,SAASZ,MAAM,KAEtD,GAAK1S,KAAKsR,mBAAmBsX,GAQ3BJ,EAAWlV,cAAWqV,MARmB,CACzC,MAAMnV,EAAQ,IAAI4J,KAAKA,KAAKlH,MAAM0S,EAAY5X,OAAS,aAAa6X,WAAa,EAC7EC,MAAMtV,GACRgV,EAAWlV,cAAWqV,EAEtBH,EAAWlV,SAAWE,EAAM+E,U,CAK3BvY,KAAKsR,mBAAmBmC,KAC3B+U,EAAW9U,QAAUD,E,CAIzBR,EAAO7O,KAAO,IAAW+C,KACzB8L,EAAOI,KAAOmV,C,MACT,GAAqB,YAAjBD,EAAU,GAAkB,CACrC,MAAMC,EAAaxoB,KAAKyoB,uBAAqCxV,EAAQoV,EAAY,CAC/EvB,MAAO,QACP,aAAc,YACd,YAAa,WACb,cAAe,aACfiC,QAAS,UACT,YAAa,WACb,YAAa,WACb,YAAa,WACb,cAAe,OACfC,MAAO,QACP,oBAAqB,aACrBC,QAAS,UACT,gBAAiB,QACjBrM,SAAU,aAEZ3J,EAAO7O,KAAO,IAAWiD,SACzB4L,EAAO2C,SAAW4S,C,CAEpBF,GAAgB,C,EAIfA,IACHrV,EAAOsC,WAAa,IAAI,IACxBtC,EAAOsC,WAAWnR,KAAO,KAAeoR,QACxCvC,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAMiW,OAEhD,CAEQ6Q,uBAA0BxV,EAAoBoV,EAAsBrhB,GAC1E,MAAMkiB,EAAe,CAAC,EAEtB,IAAIC,GAAkB,EAuCtB,OAtCAd,EAAW9a,SAAS6b,IAClB,IAAInlB,EAAc,KACdkS,EAAc,KAClB,IAAKgT,EAAiB,CACpB,GAAInpB,KAAKsR,mBAAmB8X,GAC1B,OAEF,MAAMzD,EAAayD,EAAUrX,QAAQ,KASrC,IARoB,IAAhB4T,EACF1hB,EAAMmlB,GAENnlB,EAAMmlB,EAAUpX,UAAU,EAAG2T,GACzByD,EAAUzhB,OAASge,IACrBxP,EAAMiT,EAAUpX,UAAU2T,EAAa,KAGvC3lB,KAAKsR,mBAAmBrN,IAAQjE,KAAKsR,mBAAmB6E,IAAgB,aAARlS,EAClE,M,CAIAklB,EACFlW,EAAOqB,OAAS,KAAO8U,EACN,UAARnlB,GACJjE,KAAKsR,mBAAmB2B,EAAOqB,OAGlCrB,EAAOqB,MAAQ6B,EAFflD,EAAOqB,OAAS,KAAO6B,EAIzBgT,GAAkB,GAETniB,EAAI+U,eAAe9X,GAC5BilB,EAAQliB,EAAI/C,IAAQkS,EAEpBnW,KAAK0U,WAAWzB,EAAQhP,EAAKkS,E,IAI1B+S,CACT,ECvRK,MAAMG,WAA6B,EACxCnT,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,GAAIA,EAAMgG,OAAS,EACjB,OAEF,MAAMsL,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAM,GAAI,MAC/CsR,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAM,IACrDsR,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAM,IACrDsR,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAM,IAC5C3B,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECxBK,MAAMggB,WAA2B,EACtCpT,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,MAAMsR,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAM4nB,YAAa,MACxDtW,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM6f,OAC5CvO,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAM6nB,UACrDvW,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAMmb,UACrD7J,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAM8nB,KAC5CzpB,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,EClBK,MAAMogB,WAA2B,EACtCxT,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,GAAIA,EAAMgG,OAAS,EACjB,OAGF,MAAMoN,EAC+C,eAAnD/U,KAAKwS,kBAAkB7Q,EAAM,GAAI,cAAiCA,EAAM,GAAK,KAC/E3B,KAAK8U,cAAcxL,EAAQyL,GAE3B,MAAM9B,EAASjT,KAAKoU,kBAGpB,GAFAnB,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAM,GAAI,MAE9B,eAAbA,EAAM,IAAoC,UAAbA,EAAM,GACrCsR,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAM,IAC5CsR,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAM,IACrDsR,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAM,IACrDsR,EAAOqB,MAAStU,KAAKsR,mBAAmB3P,EAAM,IAAyC,KAAnCA,EAAM,GAAG+Q,MAAM,OAAO3B,KAAK,WAC1E,GAAIpP,EAAMgG,OAAS,EAAG,CAC3BsL,EAAO7O,KAAO,IAAWgD,WACzB6L,EAAOsC,WAAa,IAAI,IACxBtC,EAAOsC,WAAWnR,KAAO,KAAeoR,QACxC,IAAK,IAAIN,EAAI,EAAGA,EAAIvT,EAAMgG,OAAQuN,IAC3BlV,KAAKsR,mBAAmB3P,EAAMuT,MACjCjC,EAAOqB,OAAS3S,EAAMuT,GAAK,K,CAK5BlV,KAAKsR,mBAAmB3P,EAAM,KAAOsR,EAAO7O,OAAS,IAAW8C,QACnE+L,EAAOvR,KAAOC,EAAM,GAAK,KAAOsR,EAAOvR,MAGzC1B,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAGzBjT,KAAKqQ,cACPrQ,KAAK2T,yBAAyBrK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,EChDF,MAAMqgB,GAAoB,CAAC,WAAY,kBACjCC,GAA4B,IAAItM,IACpCqM,GAAkB/f,OAAO,CAAC,MAAO,WAAY,WAAY,iBAErDigB,GAA2B,IAAIvM,IACnCqM,GAAkB/f,OAAO,CAAC,aAAc,WAAY,YAAa,WAAY,SAGzEkgB,GAAyB,IAAIxM,IACjCqM,GAAkB/f,OAAO,CACvB,QACA,YACA,aACA,WACA,QACA,mBACA,oBACA,OACA,UACA,aAIEmgB,GAAuB,IAAIzM,IAAIqM,GAAkB/f,OAAO,CAAC,SAAU,WAAY,eAE/EogB,GAAsB,IAAI1M,IAAIqM,GAAkB/f,OAAO,CAAC,eAExDqgB,GAAyB,IAAI3M,IAAIqM,GAAkB/f,OAAO,CAAC,aAE1D,MAAMsgB,WAAwB,EACnChU,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,MAAMsR,EAASjT,KAAKoU,kBAIpB,GAHAnB,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAMwoB,SAAU,MACrDlX,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAMyoB,qBAE1BzB,IAAdhnB,EAAMuQ,IAERe,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAMuQ,KAC5Ce,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAMyT,UACrDnC,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAM0T,UACrDpC,EAAOuB,MAAMoE,KAAO5Y,KAAKwS,kBAAkB7Q,EAAM0oB,aAEjDrqB,KAAKqe,qBAAqBpL,EAAQtR,EAAOioB,SACpC,QAAwBjB,IAApBhnB,EAAM2oB,UAEfrX,EAAOuB,MAAMoE,KAAO5Y,KAAKwS,kBAAkB7Q,EAAM2oB,WAEjDtqB,KAAKqe,qBAAqBpL,EAAQtR,EAAOqoB,SACpC,QAAyBrB,IAArBhnB,EAAMsV,WAEfhE,EAAOI,KAAO,IAAI,IAClBJ,EAAO7O,KAAO,IAAW+C,KACzB8L,EAAOI,KAAKyD,eAAiB9W,KAAKwS,kBAAkB7Q,EAAM4oB,UAC1DtX,EAAOI,KAAK2D,OAAShX,KAAKwS,kBAAkB7Q,EAAMsV,YAClDhE,EAAOI,KAAK+D,MAAQpX,KAAK2S,aAAaM,EAAOI,KAAK2D,QAClD/D,EAAOI,KAAKC,SAAWtT,KAAKwS,kBAAkB7Q,EAAM6oB,WACpDvX,EAAOI,KAAKK,QAAU1T,KAAKwS,kBAAkB7Q,EAAM8oB,UACnDxX,EAAOI,KAAK6D,KAAOlX,KAAKwS,kBAAkB7Q,EAAMwV,KAEhDnX,KAAKqe,qBAAqBpL,EAAQtR,EAAOkoB,SACpC,QAAwBlB,IAApBhnB,EAAMkU,UAEf5C,EAAO2C,SAAW,IAAI,IACtB3C,EAAO7O,KAAO,IAAWiD,SACzB4L,EAAO2C,SAAS5R,MAAQhE,KAAKwS,kBAAkB7Q,EAAMqC,OACrDiP,EAAO2C,SAASC,UAAY7V,KAAKwS,kBAAkB7Q,EAAMkU,WACzD5C,EAAO2C,SAASG,WAAa/V,KAAKwS,kBAAkB7Q,EAAMoU,YAC1D9C,EAAO2C,SAASE,SAAW9V,KAAKwS,kBAAkB7Q,EAAMmU,UACxD7C,EAAO2C,SAAS0J,MAAQtf,KAAKwS,kBAAkB7Q,EAAMqV,QACrD/D,EAAO2C,SAAS6F,MAAQzb,KAAKwS,kBAAkB7Q,EAAM8Z,OACrDxI,EAAO2C,SAAS4J,SAAWxf,KAAKwS,kBAAkB7Q,EAAM+oB,kBACxDzX,EAAO2C,SAASsS,SAAWloB,KAAKwS,kBAAkB7Q,EAAMgpB,mBACxD1X,EAAO2C,SAAS8J,KAAO1f,KAAKwS,kBAAkB7Q,EAAM+d,MACpDzM,EAAO2C,SAASgK,QAAU5f,KAAKwS,kBAAkB7Q,EAAMie,SACvD3M,EAAO2C,SAAS+J,WAAa3f,KAAKwS,kBAAkB7Q,EAAMipB,SAE1D5qB,KAAKqe,qBAAqBpL,EAAQtR,EAAOmoB,SACpC,QAAqBnB,IAAjBhnB,EAAMkpB,OAAsB,CAQrC,OALA5X,EAAO2C,SAAW,IAAI,IACtB3C,EAAO7O,KAAO,IAAWiD,SACzBrH,KAAKyV,gBAAgBxC,EAAQtR,EAAMmpB,QACnC7X,EAAO2C,SAASgK,QAAU5f,KAAKwS,kBAAkB7Q,EAAMopB,WAE/CppB,EAAMkpB,QAaZ,IAAK,WACH5X,EAAO2C,SAASkJ,eAAiBnd,EAAMqpB,SACvC,MACF,IAAK,kBACH/X,EAAO2C,SAASoJ,IAAMrd,EAAMqpB,SAC5B,MACF,QACE/X,EAAO2C,SAASiJ,cAAgBld,EAAMqpB,SAI1ChrB,KAAKqe,qBAAqBpL,EAAQtR,EAAOooB,G,KACpC,SAAsBpB,IAAlBhnB,EAAMuC,QASf,OAPA+O,EAAOsC,WAAa,IAAI,IACxBtC,EAAO7O,KAAO,IAAWgD,WACzB6L,EAAOsC,WAAWnR,KAAO,KAAeoR,QACxCvC,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAMuC,SAE5ClE,KAAKqe,qBAAqBpL,EAAQtR,EAAOsoB,G,CAK3CjqB,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,CAEA+U,qBAAqBpL,EAAoB/B,EAAUqN,GAC1B3N,OAAOiN,KAAK3M,GAAKpH,QAAQ4T,IAAOa,EAAalE,IAAIqD,KACzDnQ,SAAStJ,IACtB,MAAM4b,EAAO3O,EACblR,KAAK0U,WAAWzB,EAAQhP,EAAK4b,EAAK5b,GAAK,GAE3C,EC5HK,MAAMgnB,WAA4B,EACvC/U,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAA+B1J,KAAKwQ,SAASvN,GAAM,GACzD,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS2d,IACf,MAAMC,EAAanrB,KAAKorB,aAAaF,GACrC,QAAmBvC,IAAfwC,EACF,OAGGnrB,KAAKqQ,cACRrQ,KAAK8U,cAAcxL,EAAQ4hB,EAAO/S,QAGpC,MAAMlF,EAAS,IAAI,IAInB,OAHAA,EAAOvR,KAAO1B,KAAKwS,kBAAkB0Y,EAAOxpB,KAAM,MAClDuR,EAAOqB,MAAQtU,KAAKwS,kBAAkB0Y,EAAOxU,MAErCyU,GACN,KAAK,IAAWjkB,MACd+L,EAAO7O,KAAO,IAAW8C,MACzB+L,EAAOuB,MAAQ,IAAI,IACnBvB,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB0Y,EAAO9V,UACtDnC,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB0Y,EAAO7V,UACtDpC,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa0Z,EAAOhZ,KAC7C,MACF,KAAK,IAAW/K,KACd8L,EAAO7O,KAAO,IAAW+C,KACzB8L,EAAOI,KAAKyD,eAAiB9W,KAAKwS,kBAAkB0Y,EAAOG,gBAC3DpY,EAAOI,KAAK2D,OAAShX,KAAKwS,kBAAkB0Y,EAAOI,YACnDrY,EAAOI,KAAK6D,KAAOlX,KAAKwS,kBAAkB0Y,EAAOK,KACjDtY,EAAOI,KAAK+D,MAAQpX,KAAK2S,aAAaM,EAAOI,KAAK2D,QAClDhX,KAAKgT,kBAAkBC,EAAQiY,EAAOM,YACtC,MAEF,KAAK,IAAWnkB,SACd4L,EAAO7O,KAAO,IAAWiD,SAEzBrH,KAAKyV,gBAAgBxC,EAAQjT,KAAKwS,kBAAkB0Y,EAAOO,YAC3DxY,EAAO2C,SAAS4J,SAAWxf,KAAKwS,kBAAkB0Y,EAAO1L,UACzDvM,EAAO2C,SAASsS,SAAWloB,KAAKwS,kBAAkB0Y,EAAOhD,UACzDjV,EAAO2C,SAAS8J,KAAO1f,KAAKwS,kBAAkB0Y,EAAOxL,MACrDzM,EAAO2C,SAASmJ,MAAQ/e,KAAKwS,kBAAkB0Y,EAAOnM,OACtD9L,EAAO2C,SAAS+J,WAAa3f,KAAKwS,kBAAkB0Y,EAAOjK,SAC3DhO,EAAO2C,SAASgK,QAAU5f,KAAKwS,kBAAkB0Y,EAAOtL,SACzB,MAA3B3M,EAAO2C,SAASgK,UAClB3M,EAAO2C,SAASgK,QAAU3M,EAAO2C,SAASgK,QAAQsB,eAEpDjO,EAAO2C,SAAS6F,MAAQzb,KAAKwS,kBAAkB0Y,EAAOzP,OACtDxI,EAAO2C,SAAS0J,MAAQtf,KAAKwS,kBAAkB0Y,EAAO3L,cACtD,MACF,KAAK,IAAWnY,WACd6L,EAAO7O,KAAO,IAAWgD,WACzB6L,EAAOsC,WAAWnR,KAAO,KAAeoR,QAM5CxV,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAGzBjT,KAAKqQ,cACPrQ,KAAK2T,yBAAyBrK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,CAEQ8hB,aAAaF,GACnB,OAAKlrB,KAAKsR,mBAAmB4Z,EAAO9V,UAI/BpV,KAAKsR,mBAAmB4Z,EAAOI,YAI/BtrB,KAAKsR,mBAAmB4Z,EAAOO,WAI/BzrB,KAAKsR,mBAAmB4Z,EAAOxU,WAApC,EACS,IAAWtP,WAJX,IAAWC,SAJX,IAAWF,KAJX,IAAWD,KAgBtB,E,ICnGUwkB,GA0CAC,G,YCzDL,MAAMC,WAAgC,EAA7C,c,oBACE,KAAAtiB,OAAS,IAAI,CAsQf,CApQE4M,MAAMjT,GAuBJ,OAtBAA,EAAKyP,MAAM1S,KAAK6P,cAActC,SAASse,IACrC,GAAI7rB,KAAKsR,mBAAmBua,IAAqB,MAAZA,EAAK,GACxC,OAEF,MAAMhM,EAAOrJ,KAAKN,MAAM2V,GACxB,IAAqB,IAAjBhM,EAAKiM,QACP,OAEF,MAAM7Y,EAASjT,KAAKoU,kBAEhBpU,KAAKsR,mBAAmBuO,EAAKkM,MAC/B/rB,KAAKgsB,oBAAoBnM,EAAM5M,GAE/BjT,KAAKisB,sBAAsBpM,EAAM5M,GAGnCjT,KAAKmV,sBAAsBlC,GAC3BjT,KAAKyU,cAAcxB,GACnBjT,KAAKsJ,OAAOvC,QAAQQ,KAAK0L,EAAO,IAGlCjT,KAAKsJ,OAAOsG,SAAU,EACf/D,QAAQC,QAAQ9L,KAAKsJ,OAC9B,CAEQ2iB,sBAAsBpM,EAAW5M,GACvC,GAAqB,MAAjB4M,EAAKqM,WACPjZ,EAAOvR,KAAO1B,KAAKwS,kBAAkBqN,EAAKqM,SAASloB,OACzB,MAAtB6b,EAAKqM,SAASC,MAAc,CAC9B,MAAMtJ,EAAiB,GACvBhD,EAAKqM,SAASC,KAAK5e,SAAS2E,IACrBlS,KAAKsR,mBAAmBY,EAAIJ,IAC/B+Q,EAAKtb,KAAK2K,EAAIJ,E,IAGlBmB,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAaqR,E,CAItB,MAAhBhD,EAAKuM,UAC6B,MAAhCvM,EAAKuM,QAAQjS,iBACfna,KAAKqsB,qBAAqBxM,EAAKuM,QAAQjS,gBAAiBlH,GAGvDjT,KAAKsR,mBAAmBuO,EAAKuM,QAAQ7E,QACrCvnB,KAAKsR,mBAAmBuO,EAAKuM,QAAQjV,KAKrCnX,KAAKsR,mBAAmBuO,EAAKuM,QAAQ1E,YACrC1nB,KAAKsR,mBAAmBuO,EAAKuM,QAAQ5M,YAEtCvM,EAAO7O,KAAO,IAAWiD,SACzB4L,EAAO2C,SAAW,IAAI,MAPtB3C,EAAO7O,KAAO,IAAW+C,KACzB8L,EAAOI,KAAO,IAAI,KAQhBJ,EAAO7O,OAAS,IAAW8C,OAAUlH,KAAKsR,mBAAmBuO,EAAKuM,QAAQ/W,YAC5EpC,EAAOuB,MAAMa,SAAWwK,EAAKuM,QAAQ/W,UAElCrV,KAAKsR,mBAAmBuO,EAAKuM,QAAQE,cACxCrZ,EAAOqB,MAAQuL,EAAKuM,QAAQE,WAAW5Z,MAAM1S,KAAK6P,cAAckB,KAAK,MAAQ,MAEpD,MAAvB8O,EAAKuM,QAAQ7X,QACfvU,KAAKusB,YAAY1M,EAAKuM,QAAQ7X,OAAQtB,EAAQ,cAAe,QAAS,QAE3C,MAAzB4M,EAAKuM,QAAQI,UACf3M,EAAKuM,QAAQI,SAASjf,SAASkf,IACP,MAAlBA,EAAQlY,QACVvU,KAAKusB,YAAYE,EAAQlY,OAAQtB,EAAQ,IAAK,IAAK,I,IAK7D,CAEQ+Y,oBAAoBnM,EAAW5M,GAkBrC,GAjBAA,EAAOoB,YAAWwL,EAAK6M,eAAgB7M,EAAK6M,aAAaC,WACzD1Z,EAAOvR,KAAO1B,KAAKwS,kBAAkBqN,EAAK7b,OAEpB,2BAAlB6b,EAAK+M,UACP3Z,EAAO7O,KAAO,IAAWgD,WACzB6L,EAAOsC,WAAa,IAAI,IACxBtC,EAAOsC,WAAWnR,KAAO,KAAeoR,SACb,gCAAlBqK,EAAK+M,UACd3Z,EAAO7O,KAAO,IAAW+C,KACzB8L,EAAOI,KAAO,IAAI,KACS,wBAAlBwM,EAAK+M,UACd3Z,EAAO7O,KAAO,IAAWiD,SACzB4L,EAAO2C,SAAW,IAAI,KAEtB3C,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAaqO,EAAKgN,UAGlB,MAAvBhN,EAAKiN,eAAwB,CAO/B,GAN2C,MAAvCjN,EAAKiN,eAAe3S,iBACtBna,KAAKqsB,qBAAqBxM,EAAKiN,eAAe3S,gBAAiBlH,GAE5DjT,KAAKsR,mBAAmBuO,EAAKiN,eAAeR,cAC/CrZ,EAAOqB,MAAQuL,EAAKiN,eAAeR,WAAW5Z,MAAM1S,KAAK6P,cAAckB,KAAK,MAAQ,MAElFkC,EAAO7O,OAAS,IAAW8C,QACxBlH,KAAKsR,mBAAmBuO,EAAKiN,eAAezX,YAC/CpC,EAAOuB,MAAMa,SAAWwK,EAAKiN,eAAezX,UAEd,MAA5BwK,EAAKiN,eAAeX,MAAc,CACpC,MAAMtJ,EAAiB,GACvBhD,EAAKiN,eAAeX,KAAK5e,SAASuE,IAC3B9R,KAAKsR,mBAAmBQ,EAAEI,MAC7B2Q,EAAKtb,KAAKuK,EAAEI,I,IAGZ2Q,EAAKlb,OAAS,IAChBsL,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAaqR,G,CAIV,MAA9BhD,EAAKiN,eAAevY,QACtBvU,KAAKusB,YAAY1M,EAAKiN,eAAevY,OAAQtB,EAAQ,cAAe,QAAS,QAE3C,MAAhC4M,EAAKiN,eAAeN,UACtB3M,EAAKiN,eAAeN,SAASjf,SAASkf,IACd,MAAlBA,EAAQlY,QACVvU,KAAKusB,YAAYE,EAAQlY,OAAQtB,EAAQ,IAAK,IAAK,I,IAK7D,CAEQoZ,qBAAqBnT,EAAcjG,GACzC,MAAM8Z,EAAU7T,EAAMvR,OAAS,EAAI,EAAIuR,EAAMvR,OAC7CsL,EAAOkH,gBAAkBjB,EACtBpP,QAAQkjB,IAAYhtB,KAAKsR,mBAAmB0b,EAAErrB,QAAoB,MAAVqrB,EAAEC,OAC1D/iB,MAAK,CAACC,EAAGC,IAAMA,EAAE6iB,KAAO9iB,EAAE8iB,OAC1BjX,MAAM,EAAG+W,GACT/lB,KAAKgmB,IACJ,MAAME,EAAK,IAAI,KAGf,OAFAA,EAAG7X,SAAW2X,EAAErrB,MAChBurB,EAAGC,aAAe,IAAI/P,MAAM,GAAK4P,EAAEC,MAAMtlB,QAAU,GAAKqlB,EAAEC,KAAgB,IAATD,EAAEC,MAC5DC,CAAE,GAEf,CAEQX,YACNhY,EACAtB,EACAma,EACAC,EACA/H,GAEA/Q,EAAOhH,SAASsH,IACd,GAAuB,MAAnBA,EAAMwY,IAA2D,KAAtCxY,EAAMwY,GAAU9U,WAAWvH,OACxD,OAIF,MAAMgR,EACQ,SAAZnN,EAAMyY,EACF,IAAIlQ,KAAuB,IAAlBvI,EAAMwY,IAAkBE,cACjC1Y,EAAMwY,GAAU9U,WAChBiV,EACqB,MAAzB3Y,EAAMuY,GAA0BvY,EAAMuY,GAAgB7U,WAAa,KAErE,GAAItF,EAAO7O,OAAS,IAAW8C,MAAO,CACpC,GAAIlH,KAAKsR,mBAAmB2B,EAAOuB,MAAMY,WAAkC,aAArBoY,EAEpD,YADAva,EAAOuB,MAAMY,SAAW4M,GAEnB,GACLhiB,KAAKsR,mBAAmB2B,EAAOuB,MAAMa,WAChB,aAArBmY,EAGA,YADAva,EAAOuB,MAAMa,SAAW2M,GAEnB,GACLhiB,KAAKsR,mBAAmB2B,EAAOuB,MAAMoE,OACjB,MAApB4U,GACAA,EAAiBnb,WAAW,SAG5B,YADAY,EAAOuB,MAAMoE,KAAOoJ,E,MAGjB,GAAI/O,EAAO7O,OAAS,IAAW+C,KAAM,CAC1C,GAAInH,KAAKsR,mBAAmB2B,EAAOI,KAAK2D,SAAgC,UAArBwW,EAGjD,OAFAva,EAAOI,KAAK2D,OAASgL,OACrB/O,EAAOI,KAAK+D,MAAQpX,KAAK2S,aAAaqP,IAEjC,GAAIhiB,KAAKsR,mBAAmB2B,EAAOI,KAAK6D,OAA8B,QAArBsW,EAEtD,YADAva,EAAOI,KAAK6D,KAAO8K,GAEd,GACLhiB,KAAKsR,mBAAmB2B,EAAOI,KAAKyD,iBACf,eAArB0W,EAGA,YADAva,EAAOI,KAAKyD,eAAiBkL,GAExB,GACLhiB,KAAKsR,mBAAmB2B,EAAOI,KAAKH,aACf,WAArBsa,GACsB,IAAtBxL,EAAWra,OAOX,OALAsL,EAAOI,KAAKC,SAAY0O,EAAsBrJ,OAAO,EAAG,GACxB,MAA5B1F,EAAOI,KAAKC,SAAS,KACvBL,EAAOI,KAAKC,SAAWL,EAAOI,KAAKC,SAASqF,OAAO,EAAG,SAExD1F,EAAOI,KAAKK,QAAWsO,EAAsBrJ,OAAO,EAAG,IAElD,GAAyB,SAArB6U,EAET,M,MAEG,GAAIva,EAAO7O,OAAS,IAAWiD,SAAU,CAC9C,MAAMuO,EAAW3C,EAAO2C,SACxB,GAAI5V,KAAKsR,mBAAmBsE,EAASC,YAAmC,cAArB2X,EAEjD,YADA5X,EAASC,UAAYmM,GAEhB,GAAIhiB,KAAKsR,mBAAmBsE,EAASE,WAAkC,aAArB0X,EAEvD,YADA5X,EAASE,SAAWkM,GAEf,GAAIhiB,KAAKsR,mBAAmBsE,EAASG,aAAoC,YAArByX,EAEzD,YADA5X,EAASG,WAAaiM,GAEjB,GAAIhiB,KAAKsR,mBAAmBsE,EAAS0J,QAA+B,aAArBkO,EAEpD,YADA5X,EAAS0J,MAAQ0C,GAEZ,GAAIhiB,KAAKsR,mBAAmBsE,EAASqS,UAAiC,YAArBuF,EAEtD,YADA5X,EAASqS,QAAUjG,GAEd,GAAIhiB,KAAKsR,mBAAmBsE,EAAS6F,QAA+B,UAArB+R,EAEpD,YADA5X,EAAS6F,MAAQuG,GAEZ,GAAIhiB,KAAKsR,mBAAmBsE,EAASR,WAAkC,aAArBoY,EAEvD,YADA5X,EAASR,SAAW4M,GAEf,GAAyB,YAArBwL,EAAgC,CAEzC,MAAM,OAAEC,EAAM,KAAE/N,EAAI,QAAEE,EAAO,IAAEhT,GAAQiI,EAAMwY,GAO7C,OANAzX,EAAS4J,SAAWxf,KAAKwS,kBAAkBib,GAC3C7X,EAAS8J,KAAO1f,KAAKwS,kBAAkBkN,GAClC1f,KAAKsR,mBAAmBsO,KAC3BhK,EAASgK,QAAUA,EAAQsB,oBAE7BtL,EAAS+J,WAAa3f,KAAKwS,kBAAkB5F,G,EAKjD,MAAMqV,EAAYjiB,KAAKsR,mBAAmBuD,EAAMyQ,IAAY,UAAYzQ,EAAMyQ,GAC9E,GACgB,aAAdrD,GAC0B,MAA1BhP,EAAOkH,iBACPlH,EAAOkH,gBAAgByI,MAAMoK,GAAMA,EAAE3X,WAAa2M,IAElD,OAGF,MAAM0L,EAAwB,cAAZ7Y,EAAMyY,EAAoB,KAAUtK,OAAS,KAAUrO,KACzE3U,KAAK0U,WAAWzB,EAAQgP,EAAWD,EAAY0L,EAAU,GAE7D,GDvPF,SAAYhC,GACV,cACA,mBACA,mBACA,iBACA,iBACA,iBACA,wBACA,oBACA,iBACA,uBACA,uBACA,mBACA,iBACA,uBACA,6BACA,uBACA,eACA,qBACA,uBACA,qBACD,CArBD,CAAYA,KAAAA,GAAY,KA0CxB,SAAYC,GACV,iBACA,mBACA,UACA,aACA,eACA,eACA,kBACA,cACD,CATD,CAAYA,KAAAA,GAAkB,KExCvB,MAAMgC,WAAgC,EAA7C,c,oBACE,KAAArkB,OAAS,IAAI,CA8lBf,CA5lBE4M,MAAMjT,GAgFJ,OA/E+BuT,KAAKN,MAAMjT,GAEf2qB,SAAS,GAG5BC,OAAOtgB,SAASugB,IACtBA,EAAM5U,MAAM3L,SAASsS,IACnB,IAAqB,IAAjBA,EAAKiM,QACP,OAGF,MAAM7Y,EAASjT,KAAKoU,kBAEd0J,EAAW+B,EAAKkO,aACtB,OAAQjQ,GACN,KAAK4N,GAAaxkB,MAClB,KAAKwkB,GAAasC,SAClB,KAAKtC,GAAa5O,SAClB,KAAK4O,GAAauC,eAClB,KAAKvC,GAAawC,OAClB,KAAKxC,GAAayC,eAChBlb,EAAO7O,KAAO,IAAW8C,MACzB+L,EAAOuB,MAAQ,IAAI,IACnB,MACF,KAAKkX,GAAa9H,WAClB,KAAK8H,GAAa0C,YAChBnb,EAAO7O,KAAO,IAAW+C,KACzB8L,EAAOI,KAAO,IAAI,IAClB,MACF,KAAKqY,GAAatkB,WAClB,KAAKskB,GAAa2C,gBAClB,KAAK3C,GAAa4C,aAClB,KAAK5C,GAAa6C,cAEhBtb,EAAO7O,KAAO,IAAWgD,WACzB6L,EAAOsC,WAAa,IAAI,IACxBtC,EAAOsC,WAAWnR,KAAO,KAAeoR,QACxC,MACF,KAAKkW,GAAarkB,SAClB,KAAKqkB,GAAa8C,eAClB,KAAK9C,GAAa+C,eAClB,KAAK/C,GAAagD,WAClB,KAAKhD,GAAaiD,SAClB,KAAKjD,GAAakD,eAClB,KAAKlD,GAAamD,qBAChB5b,EAAO7O,KAAO,IAAWiD,SACzB4L,EAAO2C,SAAW,IAAI,IAM1B3C,EAAOoB,SAA6B,IAAlBwL,EAAKiP,SAEvB9uB,KAAK+uB,gBAAgBlP,EAAKqM,SAAUjZ,GAEpCjT,KAAKgvB,mBAAmBnP,EAAM5M,GAE9BjT,KAAKivB,eAAenR,EAAU+B,EAAKuM,QAASnZ,GAE5CjT,KAAKqsB,qBAAqBxM,EAAKuM,QAAQjS,gBAAiBlH,GAExDjT,KAAKkvB,gBAAgBpR,EAAU+B,EAAKuM,QAAQI,SAAUvZ,GAEjDjT,KAAKsR,mBAAmBuO,EAAKuM,QAAQE,cACxCrZ,EAAOqB,MAAQuL,EAAKuM,QAAQE,WAAW5Z,MAAM1S,KAAK6P,cAAckB,KAAK,MAAQ,MAG/E/Q,KAAKmV,sBAAsBlC,GAC3BjT,KAAKyU,cAAcxB,GACnBjT,KAAKsJ,OAAOvC,QAAQQ,KAAK0L,EAAO,GAChC,IAGAjT,KAAKqQ,cACPrQ,KAAK2T,yBAAyB3T,KAAKsJ,QAGrCtJ,KAAKsJ,OAAOsG,SAAU,EACf/D,QAAQC,QAAQ9L,KAAKsJ,OAC9B,CAEQylB,gBAAgB7C,EAAoBjZ,GAC1C,GAAgB,MAAZiZ,EAAJ,CAMA,GAFAjZ,EAAOvR,KAAO1B,KAAKwS,kBAAkB0Z,EAASloB,OAEzB,MAAjBkoB,EAASrJ,KAAc,CACzB,MAAMA,EAAiB,GACvBqJ,EAASrJ,KAAKtV,SAAS2E,IAChBlS,KAAKsR,mBAAmBY,EAAIA,MAC/B2Q,EAAKtb,KAAK2K,EAAIA,I,IAGlBe,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAaqR,E,CAGxC,GAAqB,MAAjBqJ,EAASiD,MAAgBjD,EAASiD,KAAKxnB,OAAS,EAAG,CACrD,MAAMoN,EAAa/U,KAAKovB,WAAWlD,EAASiD,KAAK,IACjDnvB,KAAK8U,cAAc9U,KAAKsJ,OAAQyL,E,EAEpC,CAEQqa,WAAWC,GACjB,OAAOA,EAAYre,OAAOsB,QAAQ,UAAW+S,GAAMA,EAAE/S,QAAQ,OAAQrL,GAAMA,EAAEia,iBAC/E,CAEQ8N,mBAAmBnP,EAAY5M,GACjB,MAAhB4M,EAAKuM,SAIuB,MAA5BvM,EAAKuM,QAAQkD,aAA2D,IAApCzP,EAAKuM,QAAQkD,YAAY3nB,QAIjEkY,EAAKuM,QAAQkD,YAAY/hB,SAASgiB,IAChC,GAA+B,aAA3BA,EAAWC,aAAmD,KAArBD,EAAW5tB,MAGtD,OAFAsR,EAAO7O,KAAO,IAAW8C,WACzB+L,EAAOuB,MAAMY,SAAWma,EAAW5tB,OAIrC,GAA+B,aAA3B4tB,EAAWC,aAAmD,KAArBD,EAAW5tB,MAGtD,OAFAsR,EAAO7O,KAAO,IAAW8C,WACzB+L,EAAOuB,MAAMa,SAAWka,EAAW5tB,OAIrC,IAAIqgB,EAAauN,EAAW5tB,MACxB+rB,EAAuB,KAAU/Y,KACrC,OAAQ4a,EAAW7B,WACjB,KAAK/B,GAAmB7O,SACtB4Q,EAAY,KAAU1K,OACtB,MACF,KAAK2I,GAAmB8D,SACtBzN,EAAkC,KAArBuN,EAAW5tB,MAAe,OAAS,QAChD+rB,EAAY,KAAUgC,QAK1B1vB,KAAK0U,WAAWzB,EAAQsc,EAAW7tB,KAAMsgB,EAAY0L,EAAU,GAEnE,CAEQuB,eAAenR,EAAwBsO,EAAkBnZ,GAC3D6K,IAAa4N,GAAa5O,UAIf,MAAXsP,IAGJnZ,EAAOuB,MAAMa,SAAW+W,EAAQ/W,SAClC,CAEQ6Z,gBAAgBpR,EAAwB0O,EAA4BvZ,GAC1D,MAAZuZ,GAAwC,IAApBA,EAAS7kB,QAIjC6kB,EAASjf,SAASkf,IACM,MAAlBA,EAAQlY,QAIZvU,KAAK2vB,mBAAmB7R,EAAU2O,EAAQlY,OAAQtB,EAAO,GAE7D,CAEQ0c,mBAAmB7R,EAAwBvJ,EAAwBtB,GACzEsB,EAAOhH,SAASsH,IACd,MAAMwY,EAAWzc,OAAOiN,KAAKhJ,EAAMlT,OAAO,GACpCiuB,EAAW/a,EAEjB,GACoB,MAAlB+a,EAASjuB,OACmB,MAA5BiuB,EAASjuB,MAAM0rB,IACc,KAA7BuC,EAASjuB,MAAM0rB,GAEf,OAGF,MAAMpL,EAAYjiB,KAAK6vB,aAAahb,EAAM7K,GAAI6K,EAAM7Q,OAC9Cge,EAAahiB,KAAK8vB,aAAajb,EAAMlT,MAAO0rB,GAElD,GAAIpa,EAAO7O,OAAS,IAAW8C,MAAO,CACpC,GAAIlH,KAAK+vB,UAAUlb,EAAOmN,EAAY/O,GACpC,OAGF,OAAQ6K,GACN,KAAK4N,GAAaxkB,MAClB,KAAKwkB,GAAasC,SAClB,KAAKtC,GAAa4C,aAClB,KAAK5C,GAAauC,eAChB,MAEF,KAAKvC,GAAawC,OAChB,GAAIluB,KAAKsR,mBAAmB2B,EAAOuB,MAAM/C,MAAqB,QAAboD,EAAM7K,GAErD,YADAiJ,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAawQ,IAGxC,MAEF,KAAK0J,GAAayC,eAChB,GAAInuB,KAAKgwB,mBAAmBnb,EAAOmN,EAAY/O,GAC7C,O,MAMD,GAAIA,EAAO7O,OAAS,IAAW+C,KAAM,CAC1C,GAAInH,KAAKiwB,eAAepb,EAAOmN,EAAY/O,GACzC,OAGF,GAAI6K,IAAa4N,GAAa0C,aACxBpuB,KAAKkwB,gBAAgBrb,EAAOmN,EAAY/O,GAC1C,M,MAGC,GAAIA,EAAO7O,OAAS,IAAWiD,SAAU,CAC9C,GAAIrH,KAAKmwB,aAAatb,EAAOmN,EAAY/O,EAAQoa,GAC/C,OAEF,GAAiB,YAAbA,EAAwB,CAE1B,MAAM,OAAEI,EAAM,KAAE/N,EAAI,QAAEE,EAAO,IAAEhT,EAAG,MAAEmS,GAAUlK,EAAMlT,MAAM8d,QAQ1D,OAPAxM,EAAO2C,SAAS4J,SAAWxf,KAAKwS,kBAAkBib,GAClDxa,EAAO2C,SAAS8J,KAAO1f,KAAKwS,kBAAkBkN,GACzC1f,KAAKsR,mBAAmBsO,KAC3B3M,EAAO2C,SAASgK,QAAUA,EAAQsB,eAEpCjO,EAAO2C,SAAS+J,WAAa3f,KAAKwS,kBAAkB5F,QACpDqG,EAAO2C,SAASmJ,MAAQ/e,KAAKwS,kBAAkBuM,G,CAIjD,OAAQjB,GACN,KAAK4N,GAAarkB,SAChB,MACF,KAAKqkB,GAAa8C,eAChB,GAAIxuB,KAAKowB,mBAAmBvb,EAAOmN,EAAY/O,GAC7C,OAEF,MACF,KAAKyY,GAAa+C,eAChB,GAAIzuB,KAAKqwB,mBAAmBxb,EAAOmN,EAAY/O,GAC7C,OAEF,MACF,KAAKyY,GAAagD,WAChB,GAAI1uB,KAAKswB,eAAezb,EAAOmN,EAAY/O,GACzC,OAEF,MACF,KAAKyY,GAAaiD,SAChB,GAAI3uB,KAAKuwB,aAAa1b,EAAOmN,EAAY/O,GACvC,OAEF,MACF,KAAKyY,GAAakD,eAChB,GAAI5uB,KAAKwwB,mBAAmB3b,EAAOmN,EAAY/O,GAC7C,OAEF,MACF,KAAKyY,GAAamD,qBAChB,GAAI7uB,KAAKywB,QAAQ5b,EAAOmN,EAAY/O,GAClC,O,CAQR,GAAiB,UAAboa,EAAsB,CAExB,MAAM,cAAEqD,EAAa,SAAEC,GAAa9b,EAAMlT,MAAM8Z,MAGhD,OAFAzb,KAAK0U,WAAWzB,EAAQgP,EAAWyO,EAAe,KAAU/b,WAC5D3U,KAAK0U,WAAWzB,EAAQ,WAAY0d,EAAU,KAAUhc,K,CAK1D,GACkB,aAAhBE,EAAM7Q,OACoB,MAA1BiP,EAAOkH,iBACPlH,EAAOkH,gBAAgByI,MAAMoK,GAAMA,EAAE3X,WAAa2M,IAElD,OAIEnN,EAAM+b,SAAW3d,EAAOmF,WAAa,IAAmBE,OAC1DrF,EAAOmF,SAAW,IAAmB0E,UAGvC,MAAM4Q,EAAyB,cAAbL,EAA2B,KAAUrK,OAAS,KAAUrO,KAC1E3U,KAAK0U,WAAWzB,EAAQgP,EAAWD,EAAY0L,EAAU,GAE7D,CAEQmC,aAAa7lB,EAAYhG,GAC/B,OAAIhE,KAAKsR,mBAAmBtN,GACnBgG,EAILA,EAAGrC,OAAS,IAAMmL,OAAO,mBAAoB,KAAKC,KAAK/I,GAClDhG,EAEFgG,CACT,CAEQ8lB,aAAanuB,EAAc0rB,GACjC,MAAiB,SAAbA,EACK,IAAIjQ,KAAkB,IAAbzb,EAAMkvB,MAAatD,cAGpB,cAAbF,EACK1rB,EAAMmvB,UAAUvY,WAGjB5W,EAAc0rB,EACxB,CAEQ0C,UAAUlb,EAAqBmN,EAAoB/O,GACzD,MAAMgP,EAAYjiB,KAAK6vB,aAAahb,EAAM7K,GAAI6K,EAAM7Q,OAEpD,OAAIhE,KAAKsR,mBAAmB2B,EAAOuB,MAAMY,WAA2B,aAAd6M,GACpDhP,EAAOuB,MAAMY,SAAW4M,GACjB,GAGLhiB,KAAKsR,mBAAmB2B,EAAOuB,MAAMa,WAA2B,aAAd4M,GACpDhP,EAAOuB,MAAMa,SAAW2M,GACjB,MAIPhiB,KAAKsR,mBAAmB2B,EAAOuB,MAAMoE,OACzB,MAAZ/D,EAAM7K,KACN6K,EAAM7K,GAAGqI,WAAW,YAEpBY,EAAOuB,MAAMoE,KAAOoJ,GACb,EAIX,CAEQgO,mBAAmBnb,EAAqBmN,EAAoB/O,GAClE,MAAMgP,EAAYjiB,KAAK6vB,aAAahb,EAAM7K,GAAI6K,EAAM7Q,OAEpD,OAAIhE,KAAKsR,mBAAmB2B,EAAOuB,MAAMa,WAA2B,eAAd4M,GACpDhP,EAAOuB,MAAMa,SAAW2M,GACjB,MAGLhiB,KAAKsR,mBAAmB2B,EAAOuB,MAAM/C,MAAsB,aAAdwQ,KAC/ChP,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAawQ,IAC/B,EAIX,CAEQiO,eAAepb,EAAqBmN,EAAoB/O,GAC9D,GAAIjT,KAAKsR,mBAAmB2B,EAAOI,KAAK2D,SAAwB,UAAbnC,EAAM7K,GAGvD,OAFAiJ,EAAOI,KAAK2D,OAASgL,EACrB/O,EAAOI,KAAK+D,MAAQpX,KAAK2S,aAAaqP,IAC/B,EAGT,GAAIhiB,KAAKsR,mBAAmB2B,EAAOI,KAAK6D,OAAsB,QAAbrC,EAAM7K,GAErD,OADAiJ,EAAOI,KAAK6D,KAAO8K,GACZ,EAGT,GAAIhiB,KAAKsR,mBAAmB2B,EAAOI,KAAKyD,iBAAgC,eAAbjC,EAAM7K,GAE/D,OADAiJ,EAAOI,KAAKyD,eAAiBkL,GACtB,EAGT,GAAIhiB,KAAKsR,mBAAmB2B,EAAOI,KAAKH,aAA4B,WAAb2B,EAAM7K,GAAiB,CAC5E,MAAM8mB,EAAoB9O,EAAWzJ,WAAWvH,OAMhD,OALAiC,EAAOI,KAAKC,SAAWwd,EAAU9e,UAAU,EAAG,GACd,MAA5BiB,EAAOI,KAAKC,SAAS,KACvBL,EAAOI,KAAKC,SAAWL,EAAOI,KAAKC,SAAStB,UAAU,EAAG,IAE3DiB,EAAOI,KAAKK,QAAUod,EAAU9e,UAAU,EAAG,IACtC,C,CAGT,MAAiB,SAAb6C,EAAM7K,EAMZ,CAEQkmB,gBAAgBrb,EAAqBmN,EAAoB/O,GAC/D,SAAIjT,KAAKsR,mBAAmB2B,EAAOI,KAAKyD,iBAAgC,UAAbjC,EAAM7K,MAC/DiJ,EAAOI,KAAKyD,eAAiBkL,GACtB,EAIX,CAEQmO,aACNtb,EACAmN,EACA/O,EACAoa,GAEA,GAAIrtB,KAAKsR,mBAAmB2B,EAAO2C,SAASC,YAA2B,cAAbhB,EAAM7K,GAE9D,OADAiJ,EAAO2C,SAASC,UAAYmM,GACrB,EAGT,GAAIhiB,KAAKsR,mBAAmB2B,EAAO2C,SAASE,WAA0B,aAAbjB,EAAM7K,GAE7D,OADAiJ,EAAO2C,SAASE,SAAWkM,GACpB,EAGT,GAAIhiB,KAAKsR,mBAAmB2B,EAAO2C,SAASG,aAA4B,YAAblB,EAAM7K,GAE/D,OADAiJ,EAAO2C,SAASG,WAAaiM,GACtB,EAGT,GAAIhiB,KAAKsR,mBAAmB2B,EAAO2C,SAAS0J,QAAuB,aAAbzK,EAAM7K,GAE1D,OADAiJ,EAAO2C,SAAS0J,MAAQ0C,GACjB,EAGT,GAAIhiB,KAAKsR,mBAAmB2B,EAAO2C,SAASqS,UAAyB,YAAbpT,EAAM7K,GAE5D,OADAiJ,EAAO2C,SAASqS,QAAUjG,GACnB,EAGT,GAAIhiB,KAAKsR,mBAAmB2B,EAAO2C,SAAS6F,OAAQ,CAClD,GAAiB,UAAb4R,EAAsB,CACxB,MAAM,cAAEqD,EAAa,SAAEC,GAAa9b,EAAMlT,MAAM8Z,MAGhD,OAFAxI,EAAO2C,SAAS6F,MAAQzb,KAAKwS,kBAAkBke,GAC/C1wB,KAAK0U,WAAWzB,EAAQ,WAAY0d,EAAU,KAAUhc,OACjD,C,CAGT,GAAiB,UAAbE,EAAM7K,GAER,OADAiJ,EAAO2C,SAAS6F,MAAQuG,GACjB,C,CAIX,SAAIhiB,KAAKsR,mBAAmB2B,EAAO2C,SAASR,WAA0B,aAAbP,EAAM7K,MAC7DiJ,EAAO2C,SAASR,SAAW4M,GACpB,EAGX,CAEQoO,mBAAmBvb,EAAqBmN,EAAoB/O,GAClE,OAAIjT,KAAKsR,mBAAmB2B,EAAO2C,SAASC,YAA2B,aAAbhB,EAAM7K,IAC9DhK,KAAKyV,gBAAgBxC,EAAQ+O,IACtB,GAGLhiB,KAAKsR,mBAAmB2B,EAAO2C,SAAS4J,WAA0B,YAAb3K,EAAM7K,IAC7DiJ,EAAO2C,SAAS4J,SAAWwC,GACpB,GAILhiB,KAAKsR,mBAAmB2B,EAAO2C,SAASgK,UAAyB,YAAb/K,EAAM7K,IAC5DiJ,EAAO2C,SAASgK,QAAUoC,GACnB,GAGLhiB,KAAKsR,mBAAmB2B,EAAO2C,SAASmJ,QAAuB,UAAblK,EAAM7K,IAC1DiJ,EAAO2C,SAASmJ,MAAQiD,GACjB,MAGLhiB,KAAKsR,mBAAmB2B,EAAO2C,SAASiJ,gBAA+B,WAAbhK,EAAM7K,MAClEiJ,EAAO2C,SAASiJ,cAAgBmD,GACzB,EAIX,CAEQqO,mBAAmBxb,EAAqBmN,EAAoB/O,GAClE,OAAIjT,KAAKsR,mBAAmB2B,EAAO2C,SAASC,YAA2B,SAAbhB,EAAM7K,IAC9DhK,KAAKyV,gBAAgBxC,EAAQ+O,IACtB,GAILhiB,KAAKsR,mBAAmB2B,EAAO2C,SAASgK,UAAyB,YAAb/K,EAAM7K,IAC5DiJ,EAAO2C,SAASgK,QAAUoC,GACnB,MAGLhiB,KAAKsR,mBAAmB2B,EAAO2C,SAASmJ,QAAuB,UAAblK,EAAM7K,MAC1DiJ,EAAO2C,SAASmJ,MAAQiD,GACjB,EAIX,CAEQsO,eAAezb,EAAqBmN,EAAoB/O,GAC9D,OAAIjT,KAAKsR,mBAAmB2B,EAAO2C,SAASC,YAA2B,gBAAbhB,EAAM7K,IAC9DhK,KAAKyV,gBAAgBxC,EAAQ+O,IACtB,GAGLhiB,KAAKsR,mBAAmB2B,EAAO2C,SAASqS,UAAyB,aAAbpT,EAAM7K,IAC5DiJ,EAAO2C,SAASqS,QAAUjG,GACnB,MAGLhiB,KAAKsR,mBAAmB2B,EAAO2C,SAAS0J,QAAuB,UAAbzK,EAAM7K,MAC1DiJ,EAAO2C,SAAS0J,MAAQ0C,GACjB,EAIX,CAEQuO,aAAa1b,EAAqBmN,EAAoB/O,GAC5D,OAAIjT,KAAKsR,mBAAmB2B,EAAO2C,SAASC,YAA2B,aAAbhB,EAAM7K,IAC9DhK,KAAKyV,gBAAgBxC,EAAQ+O,IACtB,GAILhiB,KAAKsR,mBAAmB2B,EAAO2C,SAASgK,UAAyB,oBAAb/K,EAAM7K,IAC5DiJ,EAAO2C,SAASgK,QAAUoC,GACnB,MAGLhiB,KAAKsR,mBAAmB2B,EAAO2C,SAASkJ,iBAAgC,WAAbjK,EAAM7K,MACnEiJ,EAAO2C,SAASkJ,eAAiBkD,GAC1B,EAIX,CAEQwO,mBAAmB3b,EAAqBmN,EAAoB/O,GAClE,OAAIjT,KAAKsR,mBAAmB2B,EAAO2C,SAASC,YAA2B,gBAAbhB,EAAM7K,IAC9DhK,KAAKyV,gBAAgBxC,EAAQ+O,IACtB,MAGLhiB,KAAKsR,mBAAmB2B,EAAO2C,SAASqS,UAAyB,iBAAbpT,EAAM7K,MAC5DiJ,EAAO2C,SAASqS,QAAUjG,GACnB,EAIX,CAEQyO,QAAQ5b,EAAqBmN,EAAoB/O,GACvD,OAAIjT,KAAKsR,mBAAmB2B,EAAO2C,SAASC,YAA2B,SAAbhB,EAAM7K,IAC9DhK,KAAKyV,gBAAgBxC,EAAQ+O,IACtB,MAGLhiB,KAAKsR,mBAAmB2B,EAAO2C,SAASoJ,MAAqB,WAAbnK,EAAM7K,MACxDiJ,EAAO2C,SAASoJ,IAAMgD,GACf,EAIX,CAEQqK,qBAAqB0E,EAAuC9d,GAClE,GAAoB,MAAhB8d,GAAgD,IAAxBA,EAAappB,OACvC,OAGF,MAAMolB,EAAUgE,EAAappB,OAAS,EAAI,EAAIopB,EAAappB,OAC3DsL,EAAOkH,gBAAkB4W,EACtBjnB,QAAQkjB,IAAYhtB,KAAKsR,mBAAmB0b,EAAErrB,QAAoB,MAAVqrB,EAAEC,OAC1D/iB,MAAK,CAACC,EAAGC,IAAMA,EAAE6iB,KAAO9iB,EAAE8iB,OAC1BjX,MAAM,EAAG+W,GACT/lB,KAAKgmB,IACJ,MAAME,EAAK,IAAI,KAGf,OAFAA,EAAG7X,SAAW2X,EAAErrB,MAChBurB,EAAGC,aAAe,IAAI/P,MAAM,GAAK4P,EAAEC,MAAMtlB,QAAU,GAAKqlB,EAAEC,KAAgB,IAATD,EAAEC,MAC5DC,CAAE,GAEf,ECznBK,MAAM8D,GAEX9wB,YAAmB+wB,EAA0B7U,EAAyBnJ,GAAnD,KAAAge,aAAAA,EAA0B,KAAA7U,SAAAA,EAAyB,KAAAnJ,OAAAA,EACpEjT,KAAKkxB,cAAgB9U,EAASpO,aAChC,ECIK,MAAMmjB,GAAoB,CAC/B,QACA,aACA,aACA,KACA,QACA,OACA,QACA,OACA,SAGK,MAAeC,WAA+B,EAArD,c,oBACY,KAAAC,qBAAuB,CAC/BrxB,KAAKsxB,iBACLtxB,KAAKuxB,iBACLvxB,KAAKwxB,cAEG,KAAAC,0BAA4B,CACpCzxB,KAAK0xB,oBACL1xB,KAAK2xB,0BACL3xB,KAAK4xB,4BACL5xB,KAAK6xB,qBAEG,KAAAC,wBAA0B,CAClC9xB,KAAK+xB,qBACL/xB,KAAKgyB,mBACLhyB,KAAKiyB,oBACLjyB,KAAKkyB,oBACLlyB,KAAKmyB,iBACLnyB,KAAKoyB,iBACLpyB,KAAKqyB,mBAsVT,CAjVEnc,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,EAAM,CACxCqvB,UAAW,IACXC,WAAY,OAEd,OAAe,MAAX7oB,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,GAAI3B,KAAKsR,mBAAmBtR,KAAKwyB,QAAQ7wB,EAAO,UAC9C,OAGF,MAAMsR,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAO1B,KAAKwS,kBAAkBxS,KAAKwyB,QAAQ7wB,EAAO,SAAU,MAEnE3B,KAAKyyB,SAAS9wB,EAAOsR,GAErBjT,KAAK0yB,cAAc/wB,EAAOsR,GAE1B,IAAI0f,EAAsB,KAC1B,IAAK,MAAMvW,KAAYza,EAAO,CAE5B,IAAKA,EAAMoa,eAAeK,IAAapc,KAAKsR,mBAAmB3P,EAAMya,IACnE,SAGF,MAAMwW,EAAU,IAAI5B,GAAoBrvB,EAAOya,EAAUnJ,GACrDA,EAAO7O,OAAS,IAAW8C,OAASlH,KAAK6yB,mBAAmBD,KAErD3f,EAAO7O,OAAS,IAAW+C,MAAQnH,KAAK8yB,wBAAwBF,IAEhE3f,EAAO7O,OAAS,IAAWiD,UAAYrH,KAAK+yB,sBAAsBH,KAI7ED,EAAc3yB,KAAKgzB,gBAAgBJ,EAASD,I,CAI5C1f,EAAO7O,OAAS,IAAW8C,QAC1BlH,KAAKsR,mBAAmBqhB,IACzB3yB,KAAKsR,mBAAmB2B,EAAOuB,MAAMY,YACL,IAAhCud,EAAY5gB,QAAQ,SAEpBkB,EAAOuB,MAAMY,SAAWud,GAG1B3yB,KAAKmV,sBAAsBlC,GAC3BjT,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,CAEUkpB,QAAQ3R,EAAUnf,GAK1B,OAJiBkP,OAAOqiB,QAAQpS,GAAKqS,QAAO,CAACC,EAAUjX,KACrDiX,EAAIjX,EAAM,GAAGlO,eAAiBkO,EAAM,GAC7BiX,IACN,CAAC,GACYzxB,EAAKsM,cACvB,CAEUolB,gBAAgBvS,EAAUwS,GAClC,MAAMC,EAAe1iB,OAAOiN,KAAKgD,GAAKqS,QAAO,CAACC,EAAelvB,KACvDA,EAAI2N,MAAMyhB,IACZF,EAAI5rB,KAAKtD,GAEJkvB,IACN,IACH,OAA4B,IAAxBG,EAAa3rB,OACR,KAEAkZ,EAAIyS,EAAa,GAE5B,CAEUC,iBAAiB1S,EAAUnf,GACnC,MAAM8xB,EAAc5iB,OAAOiN,KAAKgD,GAAKqS,QAAO,CAACC,EAAejX,KACtDA,EAAMlO,cAAcylB,SAAS/xB,EAAKsM,gBACpCmlB,EAAI5rB,KAAK2U,GAEJiX,IACN,IACH,OAA2B,IAAvBK,EAAY7rB,OACP,KAEAkZ,EAAI2S,EAAY,GAE3B,CAEUf,SAASxB,EAAmBhe,GACpCA,EAAOqB,MACLtU,KAAKwS,kBAAkBxS,KAAKwyB,QAAQvB,EAAc,cAAe,IACjE,KACAjxB,KAAKwS,kBAAkBxS,KAAKwyB,QAAQvB,EAAc,SAAU,IAC5D,KACFhe,EAAOqB,MAAMtD,MACf,CAEU6hB,mBAAmBD,GAC3B,OAAO5yB,KAAKqxB,qBAAqB6B,QAAO,CAACC,EAAcO,KAChDP,IACHA,EAAMO,EAAKC,KAAK3zB,KAAV0zB,CAAgBd,IAEjBO,KACN,EACL,CAEUL,wBAAwBF,GAChC,OAAO5yB,KAAKyxB,0BAA0ByB,QAAO,CAACC,EAAcO,KACrDP,IACHA,EAAMO,EAAKC,KAAK3zB,KAAV0zB,CAAgBd,IAEjBO,KACN,EACL,CAEUJ,sBAAsBH,GAC9B,OAAO5yB,KAAK8xB,wBAAwBoB,QAAO,CAACC,EAAcO,KACnDP,IACHA,EAAMO,EAAKC,KAAK3zB,KAAV0zB,CAAgBd,IAEjBO,KACN,EACL,CAEUH,gBAAgBJ,EAA8BD,GACtD,IACwD,IAAtDxB,GAAkBpf,QAAQ6gB,EAAQ1B,iBACjC0B,EAAQ1B,cAAc7e,WAAW,cACjCugB,EAAQ1B,cAAc7e,WAAW,YAClC,CACA,GAAmB,MAAfsgB,GAAiD,UAA1BC,EAAQ1B,cACjC,OAAO0B,EAAQ3B,aAAa2B,EAAQxW,UAC/B,GACqB,iBAA1BwW,EAAQ1B,eACkB,kBAA1B0B,EAAQ1B,cACR,CACA,MAAM0C,EAAe,IAAIxW,KACgC,IAAvD/E,SAASua,EAAQ3B,aAAa2B,EAAQxW,UAAW,KACjDmR,cAEF,OADAvtB,KAAK0U,WAAWke,EAAQ3f,OAAQ,aAAe2f,EAAQxW,SAAUwX,GAC1D,I,CAGPhB,EAAQ1B,cAAcuC,SAAS,aAC/Bb,EAAQ1B,cAAcuC,SAAS,QAC/Bb,EAAQ1B,cAAcuC,SAAS,UAE/BzzB,KAAK0U,WACHke,EAAQ3f,OACR2f,EAAQxW,SACRwW,EAAQ3B,aAAa2B,EAAQxW,UAC7B,KAAU4G,QAGZhjB,KAAK0U,WAAWke,EAAQ3f,OAAQ2f,EAAQxW,SAAUwW,EAAQ3B,aAAa2B,EAAQxW,U,CAGnF,OAAO,IACT,CAEU2V,qBAAqBa,GAC7B,SACE5yB,KAAKsR,mBAAmBshB,EAAQ3f,OAAO2C,SAASC,aAChD+c,EAAQ1B,cAAcuC,SAAS,iBAE/Bb,EAAQ3f,OAAO2C,SAASC,UAAY+c,EAAQ3B,aAAa2B,EAAQxW,WAC1D,EAGX,CAEU4V,mBAAmBY,GAC3B,SACE5yB,KAAKsR,mBAAmBshB,EAAQ3f,OAAO2C,SAASG,cAChD6c,EAAQ1B,cAAcuC,SAAS,cAE/Bb,EAAQ3f,OAAO2C,SAASG,WAAa6c,EAAQ3B,aAAa2B,EAAQxW,WAC3D,EAGX,CAEU6V,oBAAoBW,GAC5B,SACE5yB,KAAKsR,mBAAmBshB,EAAQ3f,OAAO2C,SAASE,YAChD8c,EAAQ1B,cAAcuC,SAAS,gBAE/Bb,EAAQ3f,OAAO2C,SAASE,SAAW8c,EAAQ3B,aAAa2B,EAAQxW,WACzD,EAGX,CAEU8V,oBAAoBU,GAC5B,SACE5yB,KAAKsR,mBAAmBshB,EAAQ3f,OAAO2C,SAASR,YAChDwd,EAAQ1B,cAAcuC,SAAS,eAE/Bb,EAAQ3f,OAAO2C,SAASR,SAAWwd,EAAQ3B,aAAa2B,EAAQxW,WACzD,EAGX,CAEUiW,mBAAmBO,GAC3B,SACE5yB,KAAKsR,mBAAmBshB,EAAQ3f,OAAO2C,SAASqS,WAChD2K,EAAQ1B,cAAcuC,SAAS,cAE/Bb,EAAQ3f,OAAO2C,SAASqS,QAAU2K,EAAQ3B,aAAa2B,EAAQxW,WACxD,EAGX,CAEUgW,iBAAiBQ,GACzB,SACE5yB,KAAKsR,mBAAmBshB,EAAQ3f,OAAO2C,SAAS0J,SAChDsT,EAAQ1B,cAAcuC,SAAS,oBAE/Bb,EAAQ3f,OAAO2C,SAAS0J,MAAQsT,EAAQ3B,aAAa2B,EAAQxW,WACtD,EAGX,CAEU+V,iBAAiBS,GACzB,SACE5yB,KAAKsR,mBAAmBshB,EAAQ3f,OAAO2C,SAAS6F,SAChDmX,EAAQ1B,cAAcuC,SAAS,YAE/Bb,EAAQ3f,OAAO2C,SAAS6F,MAAQmX,EAAQ3B,aAAa2B,EAAQxW,WACtD,EAGX,CAEUsV,oBAAoBkB,GAC5B,SACE5yB,KAAKsR,mBAAmBshB,EAAQ3f,OAAOI,KAAK2D,UAC5C4b,EAAQ1B,cAAcuC,SAAS,aAE/Bb,EAAQ3f,OAAOI,KAAK2D,OAAS4b,EAAQ3B,aAAa2B,EAAQxW,UAC1DwW,EAAQ3f,OAAOI,KAAK+D,MAAQpX,KAAK2S,aAAaigB,EAAQ3f,OAAOI,KAAK2D,SAC3D,EAGX,CAEU2a,0BAA0BiB,GAClC,SACE5yB,KAAKsR,mBAAmBshB,EAAQ3f,OAAOI,KAAK6D,QAC5C0b,EAAQ1B,cAAcuC,SAAS,0BAE/Bb,EAAQ3f,OAAOI,KAAK6D,KAAO0b,EAAQ3B,aAAa2B,EAAQxW,WACjD,EAGX,CAEUwV,4BAA4BgB,GACpC,SACE5yB,KAAKsR,mBAAmBshB,EAAQ3f,OAAOI,KAAKyD,kBAC5C8b,EAAQ1B,cAAcuC,SAAS,sBAE/Bb,EAAQ3f,OAAOI,KAAKyD,eAAiB8b,EAAQ3B,aAAa2B,EAAQxW,WAC3D,EAGX,CAEUyV,oBAAoBe,GAC5B,SACE5yB,KAAKsR,mBAAmBshB,EAAQ3f,OAAOI,KAAKH,cAC5C0f,EAAQ1B,cAAcuC,SAAS,gBACmB,IAAlDb,EAAQ3B,aAAa2B,EAAQxW,UAAUzU,UAEvCirB,EAAQ3f,OAAOI,KAAKC,SAAYsf,EAAQ3B,aAAa2B,EAAQxW,UAAqBzD,OAChF,EACA,GAEsC,MAApCia,EAAQ3f,OAAOI,KAAKC,SAAS,KAC/Bsf,EAAQ3f,OAAOI,KAAKC,SAAWsf,EAAQ3f,OAAOI,KAAKC,SAASqF,OAAO,EAAG,IAExEia,EAAQ3f,OAAOI,KAAKK,QAAWkf,EAAQ3B,aAAa2B,EAAQxW,UAAqBzD,OAAO,EAAG,IACpF,EAGX,CAEU4Y,iBAAiBqB,GACzB,SACE5yB,KAAKsR,mBAAmBshB,EAAQ3f,OAAOuB,MAAMa,WACnB,aAA1Bud,EAAQ1B,iBAER0B,EAAQ3f,OAAOuB,MAAMa,SAAWud,EAAQ3B,aAAa2B,EAAQxW,WACtD,EAGX,CAEUkV,iBAAiBsB,GACzB,SACE5yB,KAAKsR,mBAAmBshB,EAAQ3f,OAAOuB,MAAMY,WACnB,aAA1Bwd,EAAQ1B,iBAER0B,EAAQ3f,OAAOuB,MAAMY,SAAWwd,EAAQ3B,aAAa2B,EAAQxW,WACtD,EAGX,CAEUoV,aAAaoB,GACrB,IACgC,MAA7BA,EAAQ3f,OAAOuB,MAAMc,MAAqD,IAArCsd,EAAQ3f,OAAOuB,MAAMc,KAAK3N,SACtC,SAA1BirB,EAAQ1B,cACR,CACA,MAAMrO,EAAO+P,EAAQ3B,aAAa2B,EAAQxW,UAAU1J,MAAM1S,KAAK6P,cAE/D,OADA+iB,EAAQ3f,OAAOuB,MAAMc,KAAOtV,KAAKwR,aAAaqR,IACvC,C,CACF,MAA8B,QAA1B+P,EAAQ1B,gBACgB,MAA7B0B,EAAQ3f,OAAOuB,MAAMc,OACvBsd,EAAQ3f,OAAOuB,MAAMc,KAAO,IAE9Bsd,EAAQ3f,OAAOuB,MAAMc,KAAK1L,OAAO5J,KAAKwR,aAAaohB,EAAQ3B,aAAa2B,EAAQxW,aACzE,EAGX,ECrXK,MAAMyX,WAAkCzC,GAC7CsB,cAAc/wB,EAAYsR,GAExB,OADoBjT,KAAKwS,kBAAkBxS,KAAKwyB,QAAQ7wB,EAAO,QAAS,UAEtE,IAAK,cACHsR,EAAO7O,KAAO,IAAW+C,KACzB8L,EAAOI,KAAO,IAAI,IAClB8d,GAAkB5pB,KAAK,QACvB,MACF,IAAK,WACH0L,EAAO7O,KAAO,IAAWiD,SACzB4L,EAAO2C,SAAW,IAAI,IACtBub,GAAkB5pB,KAAK,QACvB,MACF,IAAK,QACL,IAAK,cACH4pB,GAAkB5pB,KAAK,QAK7B,ECnBK,MAAMusB,WAAkC1C,GAC7ClxB,cACEuF,QACAzF,KAAK8xB,wBAAwBvqB,KAAKvH,KAAK+zB,mBACzC,CAEArB,cAAc/wB,EAAYsR,GACxBA,EAAO7O,KAAO,IAAW8C,MACzB+L,EAAOuB,MAAQ,IAAI,IAGhBxU,KAAKsR,mBAAmBtR,KAAKozB,gBAAgBzxB,EAAO,kBACpD3B,KAAKsR,mBAAmBtR,KAAKozB,gBAAgBzxB,EAAO,wBAErDsR,EAAO7O,KAAO,IAAW+C,KACzB8L,EAAOI,KAAO,IAAI,KAIjBrT,KAAKsR,mBAAmBtR,KAAKozB,gBAAgBzxB,EAAO,2BACpD3B,KAAKsR,mBAAmBtR,KAAKozB,gBAAgBzxB,EAAO,wBACpD3B,KAAKsR,mBAAmBtR,KAAKozB,gBAAgBzxB,EAAO,0BACpD3B,KAAKsR,mBAAmBtR,KAAKozB,gBAAgBzxB,EAAO,2BAErDsR,EAAO7O,KAAO,IAAWiD,SACzB4L,EAAO2C,SAAW,IAAI,IAE1B,CAEAme,mBAAmBnB,GACjB,QAAIA,EAAQ1B,cAActf,MAAM,2BAC9B5R,KAAK0U,WAAWke,EAAQ3f,OAAQ,UAAW2f,EAAQ3B,aAAa2B,EAAQxW,YACjE,EAGX,CAEAyV,oBAAoBe,GAClB,GACE5yB,KAAKsR,mBAAmBshB,EAAQ3f,OAAOI,KAAKH,aAC5C0f,EAAQ1B,cAAcuC,SAAS,eAC/B,CACA,MAAMO,EAAYpB,EAAQ3B,aAAa2B,EAAQxW,UAAqB1J,MAAM,KAM1E,OALAkgB,EAAQ3f,OAAOI,KAAKC,SAAW0gB,EAAS,GACA,MAApCpB,EAAQ3f,OAAOI,KAAKC,SAAS,IAAsD,IAAxCsf,EAAQ3f,OAAOI,KAAKC,SAAS3L,SAC1EirB,EAAQ3f,OAAOI,KAAKC,SAAWsf,EAAQ3f,OAAOI,KAAKC,SAASqF,OAAO,EAAG,IAExEia,EAAQ3f,OAAOI,KAAKK,QAAUsgB,EAAS,GAAGrsB,OAAS,EAAIqsB,EAAS,GAAGrb,OAAO,EAAG,GAAKqb,EAAS,IACpF,C,CAET,OAAO,CACT,ECvDK,MAAMC,WAA2B,EACtC/d,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,GAAe,MAAXyG,EAEF,OADAJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,IAAI4qB,EAAoB,KAmExB,OAlEAxqB,EAAQ6D,SAAS5L,IACf,GAAe,MAAXuyB,EAEF,YADAA,EAAUvyB,EAAMqF,KAAKmtB,GAAcA,KAIrC,GAAIxyB,EAAMgG,OAAS,GAAKhG,EAAMgG,SAAWusB,EAAQvsB,OAC/C,OAGF,IAAK3H,KAAKsR,mBAAmB3P,EAAM,IACjC,GAAI3B,KAAKqQ,aAAc,CACP1O,EAAM,GAAc+Q,MAAM,KACnCnF,SAAS6mB,IACZA,EAAMA,EAAIpjB,OACV,IAAIiH,GAAgB,EAChBC,EAAkB5O,EAAO1B,YAAYD,OAEzC,IAAK,IAAIuN,EAAI,EAAGA,EAAI5L,EAAO1B,YAAYD,OAAQuN,IAC7C,GAAI5L,EAAO1B,YAAYsN,GAAGxT,OAAS0yB,EAAK,CACtCnc,GAAgB,EAChBC,EAAkBhD,EAClB,K,CAIJ,GAAI+C,EAAe,CACjB,MAAM3I,EAAa,IAAI,IACvBA,EAAW5N,KAAO0yB,EAClB9qB,EAAO1B,YAAYL,KAAK+H,E,CAG1BhG,EAAOoG,wBAAwBnI,KAAK,CAAC+B,EAAOvC,QAAQY,OAAQuQ,GAAiB,G,KAE1E,CACL,MAAMiX,EAAQxtB,EAAM,GAAc+Q,MAAM,KAClC0hB,EAAMjF,EAAKxnB,OAAS,EAAIwnB,EAAK,GAAGne,OAAS,KAC/ChR,KAAK8U,cAAcxL,EAAQ8qB,E,CAI/B,MAAMnhB,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAM,GAAI,MAE/C,IAAK,IAAIuT,EAAI,EAAGA,EAAIvT,EAAMgG,OAAQuN,IAAK,CACrC,MAAMzE,EAASyjB,EAAQhf,GAAGlE,OAAOhD,cAC7BhO,KAAKsR,mBAAmB3P,EAAMuT,KAAOlV,KAAKsR,mBAAmBb,KAI7DzQ,KAAK+P,mBAAmBgC,QAAQtB,IAAW,EAC7CwC,EAAOuB,MAAMY,SAAWzT,EAAMuT,GACrBlV,KAAK8P,mBAAmBiC,QAAQtB,IAAW,EACpDwC,EAAOuB,MAAMa,SAAW1T,EAAMuT,GACrBlV,KAAKiQ,cAAc8B,QAAQtB,IAAW,EAC/CwC,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAMuT,IAE5ClV,KAAK0U,WAAWzB,EAAQihB,EAAQhf,GAAIvT,EAAMuT,I,CAI9ClV,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,EC/EK,MAAM+qB,WAA4B,EACvCne,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf3B,KAAK8U,cAAcxL,EAAQtJ,KAAKs0B,SAAS,WAAY3yB,IACrD,MAAMsR,EAASjT,KAAKoU,kBACpBnB,EAAOqB,MAAQtU,KAAKs0B,SAAS,cAAe3yB,GAC5CsR,EAAOvR,KAAO1B,KAAKwS,kBAAkBxS,KAAKs0B,SAAS,QAAS3yB,GAAQ,MACpEsR,EAAOuB,MAAMY,SAAWpV,KAAKs0B,SAAS,WAAY3yB,GAClDsR,EAAOuB,MAAMa,SAAWrV,KAAKs0B,SAAS,WAAY3yB,GAClDsR,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAaxR,KAAKs0B,SAAS,OAAQ3yB,IAC5D3B,KAAK0U,WAAWzB,EAAQ,aAAcjT,KAAKs0B,SAAS,YAAa3yB,IACjE3B,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAGzBjT,KAAKqQ,cACPrQ,KAAK2T,yBAAyBrK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,CAEQgrB,SAASrwB,EAAatC,GAC5B,OAAO3B,KAAKwS,kBAAkB7Q,EAAMsC,GAAMjE,KAAKwS,kBAAkB7Q,EAAM,IAAMsC,IAC/E,EC/BK,MAAMswB,WAA2B,EACtCre,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbkrB,EAAiChe,KAAKN,MAAMjT,GAClD,OACkB,MAAhBuxB,GAC0B,MAA1BA,EAAaC,WACqB,IAAlCD,EAAaC,UAAU9sB,QAEvB2B,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,IAGK,GAA1BkrB,EAAarb,WACf7P,EAAOsG,SAAU,EACjBtG,EAAOqQ,aAAe,+CACf9N,QAAQC,QAAQxC,KAGzBkrB,EAAaC,UAAUlnB,SAAS2d,IAC9B,MAAMjY,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAOwpB,EAAO3T,QACrBtE,EAAOuB,MAAMY,SAAW8V,EAAO9V,SAC/BnC,EAAOuB,MAAMa,SAAW6V,EAAO7V,SAE/BpC,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa0Z,EAAO3T,SAC7CtE,EAAOqB,MAAQ4W,EAAOpnB,QAEtB9D,KAAKmV,sBAAsBlC,GAC3BjT,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECpCK,MAAMorB,WAA4B,EACvCxe,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU8M,KAAKN,MAAMjT,GAC3B,OAAe,MAAXyG,GAAsC,IAAnBA,EAAQ/B,QAC7B2B,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASoT,IACf,GAAuB,MAAnBA,EAAWwO,MAAgBxO,EAAWwO,KAAKxnB,OAAS,EAAG,CACzD,MAAMoN,EAAa4L,EAAWwO,KAAK,GAAG9jB,KACtCrL,KAAK8U,cAAcxL,EAAQyL,E,CAG7B,MAAM9B,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAOif,EAAW9J,MAEzB5D,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkBmO,EAAWvL,UACtDpV,KAAKsR,mBAAmB2B,EAAOuB,MAAMY,UACvCnC,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkBmO,EAAWlF,OAChDzb,KAAKsR,mBAAmBqP,EAAWlF,SAC7CxI,EAAOqB,MAAQ,UAAYqM,EAAWlF,MAAQ,MAGhDxI,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkBmO,EAAWtL,UAC1DpC,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAamP,EAAWzO,KACjDe,EAAOqB,OAAStU,KAAKwS,kBAAkBmO,EAAWjS,YAAa,IACzC,MAAlBiS,EAAWgU,MACb1hB,EAAOuB,MAAMoE,KAAO5Y,KAAKwS,kBAAkBmO,EAAWgU,IAAIxzB,SAG5B,MAA5Bwf,EAAWiU,eACbjU,EAAWiU,cAAcrnB,SAASsnB,IAChC,OAAQA,EAAYC,YAClB,IAAK,OACL,IAAK,WACH90B,KAAK0U,WAAWzB,EAAQ4hB,EAAYhe,MAAOge,EAAYlzB,O,IAM/D3B,KAAKmV,sBAAsBlC,GAC3BjT,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAGzBjT,KAAKqQ,cACPrQ,KAAK2T,yBAAyBrK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECpDK,MAAMyrB,WAA4B,EACvC7e,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,MAAMqzB,EAAYh1B,KAAKsR,mBAAmB3P,EAAMszB,MAAiC,KAAzBze,KAAKN,MAAMvU,EAAMszB,MACnE9F,EACQ,MAAZ6F,GAAqC,MAAjBA,EAAS7F,MAAgB6F,EAAS7F,KAAKxnB,OAAS,EAChEqtB,EAAS7F,KACNnoB,KAAKkuB,IACJ,IACE,MAAMvxB,EAAI6S,KAAKN,MAAMgf,GACrB,OAAOl1B,KAAKwS,kBAAkB7O,EAAEywB,I,CAChC,S,CAGF,OAAO,IAAI,IAEZtqB,QAAQnG,IAAe3D,KAAKsR,mBAAmB3N,KAClD,KAEF3D,KAAKqQ,cAAwB,MAAR8e,GAAgBA,EAAKxnB,OAAS,EACrDwnB,EAAK5hB,SAAS6mB,IACZ,IAAInc,GAAgB,EAChBC,EAAkB5O,EAAO1B,YAAYD,OAEzC,IAAK,IAAIuN,EAAI,EAAGA,EAAI5L,EAAO1B,YAAYD,OAAQuN,IAC7C,GAAI5L,EAAO1B,YAAYsN,GAAGxT,OAAS0yB,EAAK,CACtCnc,GAAgB,EAChBC,EAAkBhD,EAClB,K,CAIJ,GAAI+C,EAAe,CACjB,MAAM3I,EAAa,IAAI,IACvBA,EAAW5N,KAAO0yB,EAClB9qB,EAAO1B,YAAYL,KAAK+H,E,CAG1BhG,EAAOoG,wBAAwBnI,KAAK,CAAC+B,EAAOvC,QAAQY,OAAQuQ,GAAiB,KAErElY,KAAKqQ,cAAwB,MAAR8e,GAAgBA,EAAKxnB,OAAS,GAC7D3H,KAAK8U,cAAcxL,EAAQ6lB,EAAK,IAGlC,MAAMlc,EAASjT,KAAKoU,kBACpBnB,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM6f,MAAO,IACnDvO,EAAOqB,OAAS,OAAStU,KAAKwS,kBAAkB7Q,EAAM,gBAAiB,IAAM,KAC7EsR,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAM,cAAe,MAC1DsR,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAM,YACrDsR,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAMmb,UACrD7J,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAMia,KAEhB,MAAxBja,EAAMwzB,gBAA0BxzB,EAAMwzB,eAAextB,OAAS,GAChEhG,EAAMwzB,eAAe5nB,SAASqK,IACvB5X,KAAKsR,mBAAmBsG,KAC3B3E,EAAOqB,OAAS,KAAOsD,E,IAK7B,MAAMwd,EAAcp1B,KAAKsR,mBAAmB3P,EAAM,iBAE9C,KADA6U,KAAKN,MAAMvU,EAAM,iBAEf4S,EACU,MAAd6gB,GAAgD,MAA1BA,EAAWC,aAAuBD,EAAWC,YAAY1tB,OAAS,EACpFytB,EAAWC,YAAYruB,KAAKsuB,IAC1B,IACE,OAAO9e,KAAKN,MAAMof,E,CAClB,S,CAGF,OAAO,IAAI,IAEb,KACQ,MAAV/gB,GACFA,EAAOhH,SAASsG,IACL,MAALA,GACF7T,KAAK0U,WAAWzB,EAAQY,EAAEnS,KAAMmS,EAAE5Q,K,IAKxCjD,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECjGK,MAAMisB,WAAiC,EAC5Crf,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,GAAe,MAAXyG,EAEF,OADAJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,IAAIksB,GAAa,EAmCjB,OAlCA9rB,EAAQ6D,SAAS5L,IACf,GAAqB,IAAjBA,EAAMgG,QAAgBhG,EAAMgG,OAAS,EACvC,OAEF,MAAM8tB,EAA6B,KAAjB9zB,EAAMgG,QAA8B,MAAbhG,EAAM,GACzCsR,EAASjT,KAAKoU,kBAIpB,GAHAnB,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAM8zB,EAAY,EAAI,GAAI,MAC/DxiB,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAM8zB,EAAY,EAAI,IACrExiB,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAM8zB,EAAY,EAAI,IAChD,IAAjB9zB,EAAMgG,OACR6tB,GAAa,EACbviB,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM,IAC5CsR,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAM,QACvC,CACL,MAAMwW,EAASnY,KAAKwS,kBAAkB7Q,EAAM8zB,EAAY,EAAI,GAAI,UAChE,IAAI1gB,EAAwB,WAAXoD,EAAsBA,EAAOzF,MAAM,MAAM3B,KAAK,KAAO,KACpD,MAAdgE,IACFA,EAAaoD,EAAOzF,MAAM,OAAO3B,KAAK,KACtCgE,EAAaoD,EAAOzF,MAAM,KAAK3B,KAAK,MAEtC/Q,KAAK8U,cAAcxL,EAAQyL,GAC3B9B,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM8zB,EAAY,EAAI,IAC5DxiB,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAM,G,CAE9C3B,KAAKmV,sBAAsBlC,GAC3BjT,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAGzBuiB,GAAcx1B,KAAKqQ,cACrBrQ,KAAK2T,yBAAyBrK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,ECzCK,MAAMosB,WAAiC,EAC5Cxf,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU8M,KAAKN,MAAMjT,GAC3B,GAAe,MAAXyG,GAAoC,MAAjBA,EAAQwP,MAE7B,OADA5P,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,MAAM+Y,EAAa,IAAIxI,IACvBnQ,EAAQhC,QAAQ6F,SAAS5L,IACvB0gB,EAAWpI,IAAItY,EAAMqI,GAAIrI,EAAMD,KAAK,IAEtC,MAAM4gB,EAAkB,IAAIzI,IA0G5B,OAzGAwI,EAAW9U,SAAQ,CAAC4I,EAAKlS,KACvBqe,EAAgBrI,IAAIhW,EAAKqF,EAAO5B,QAAQC,QACxC,MAAMkM,EAAI,IAAI,IACdA,EAAEnS,KAAOyU,EACT7M,EAAO5B,QAAQH,KAAKsM,EAAE,IAGxBnK,EAAQwP,MAAM3L,SAAS5L,IACrB,MAAMsR,EAASjT,KAAKoU,kBAQpB,GAPAnB,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAMD,KAAM,MACjDuR,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAMg0B,WAExB,MAAhBh0B,EAAMwW,QAAkBmK,EAAgBjI,IAAI1Y,EAAMwW,SACpD7O,EAAOkG,oBAAoBjI,KAAK,CAAC+B,EAAOvC,QAAQY,OAAQ2a,EAAgB/f,IAAIZ,EAAMwW,UAG3D,MAArBxW,EAAMi0B,YAAV,CAIK51B,KAAKsR,mBAAmB3P,EAAMi0B,YAAYthB,SAC7CrB,EAAOqB,MAAQ3S,EAAMi0B,YAAYthB,MAAM5B,MAAM,UAAU3B,KAAK,MAAM2B,MAAM,OAAO3B,KAAK,OAGnE,eAAfpP,EAAMyC,OACR6O,EAAOI,KAAO,IAAI,IAClBJ,EAAO7O,KAAO,IAAW+C,MAG3B,IAAK,MAAMiV,KAAYza,EAAMi0B,YAAa,CAExC,IAAKj0B,EAAMi0B,YAAY7Z,eAAeK,GACpC,SAEF,MAAMyZ,EAASl0B,EAAMi0B,YAAYxZ,GAC3BjG,EAAgB,MAAV0f,EAAiBA,EAAOtd,WAAa,KACjD,IACEvY,KAAKsR,mBAAmB6E,IACX,UAAbiG,GACa,8BAAbA,EAKF,GAAiB,kBAAbA,EAAJ,CAOA,GAAInJ,EAAO7O,OAAS,IAAW+C,KAAM,CACnC,GAAiB,eAAbiV,EAA2B,CAC7BnJ,EAAOI,KAAK2D,OAASb,EACrBlD,EAAOI,KAAK+D,MAAQpX,KAAK2S,aAAawD,GACtC,Q,CACK,GAAiB,eAAbiG,EAA2B,CACpCnJ,EAAOI,KAAKyD,eAAiBX,EAC7B,Q,CACK,GAAiB,kBAAbiG,EAA8B,CACvCnJ,EAAOI,KAAK6D,KAAOf,EACnB,Q,CACK,GAAiB,YAAbiG,EAAwB,CACjC,IACE,MAAM0Z,EAAU,IAAI1Y,KAAKjH,GACzBlD,EAAOI,KAAKK,QAAUoiB,EAAQC,cAAcxd,WAC5CtF,EAAOI,KAAKC,UAAYwiB,EAAQjN,WAAa,GAAGtQ,U,CAChD,S,CAGF,Q,CACK,GAAiB,aAAb6D,EACT,Q,KAEG,CACL,IACgB,aAAbA,GAAwC,UAAbA,IAC5Bpc,KAAKsR,mBAAmB2B,EAAOuB,MAAMY,UACrC,CACAnC,EAAOuB,MAAMY,SAAWe,EACxB,Q,CACK,GAAiB,aAAbiG,EAAyB,CAClCnJ,EAAOuB,MAAMa,SAAWc,EACxB,Q,CACK,GAAiB,SAAbiG,EAAqB,CAC9BnJ,EAAOuB,MAAMoE,KAAOzC,EACpB,Q,CACK,IACiB,MAArBlD,EAAOuB,MAAMc,MAA6C,IAA7BrC,EAAOuB,MAAMc,KAAK3N,SAChD3H,KAAKiQ,cAAc8B,QAAQqK,IAAa,EACxC,CACAnJ,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa2E,GACtC,Q,EAIJnW,KAAK0U,WAAWzB,EAAQmJ,EAAUjG,E,MAnDhC0f,EAAOtoB,SAASyoB,IACdh2B,KAAK0U,WAAWzB,EAAQ+iB,EAAGt0B,KAAMs0B,EAAGr0B,MAAM,G,CAqDhD3B,KAAKmV,sBAAsBlC,GAC3BjT,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,E,CAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,EC5HK,MAAM2sB,WAAkC,EAC7C/f,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbiH,EAAMvQ,KAAKsQ,SAASrN,GAC1B,GAAW,MAAPsN,EAEF,OADAjH,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,MAAM4sB,EAAU3lB,EAAIjD,iBAAiB,4BA8CrC,OA7CAF,MAAMC,KAAK6oB,GAAS3oB,SAAS2d,IAC3B,MAAMpN,EAAW9d,KAAK8T,yBAAyBoX,EAAQ,YACjDiL,EACQ,MAAZrY,GACC9d,KAAKsR,mBAAmBwM,EAAStR,cACT,YAAzBsR,EAAStR,YAEL,KADAsR,EAAStR,YAEfxM,KAAK8U,cAAcxL,EAAQ6sB,GAE3B,MAAMC,EAAcp2B,KAAK8T,yBAAyBoX,EAAQ,gBACpDmL,EAASr2B,KAAK8T,yBAAyBoX,EAAQ,WAC/C7V,EAAWrV,KAAK8T,yBAAyBoX,EAAQ,YACjDhZ,EAAMlS,KAAK8T,yBAAyBoX,EAAQ,OAC5C5W,EAAQtU,KAAK8T,yBAAyBoX,EAAQ,SAC9CjY,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KACU,MAAf00B,EAAsBp2B,KAAKwS,kBAAkB4jB,EAAY5pB,YAAa,MAAQ,KAChFyG,EAAOqB,MAAiB,MAATA,EAAgBtU,KAAKwS,kBAAkB8B,EAAM9H,aAAe,GAC3EyG,EAAOuB,MAAMY,SAAqB,MAAVihB,EAAiBr2B,KAAKwS,kBAAkB6jB,EAAO7pB,aAAe,KACtFyG,EAAOuB,MAAMa,SACC,MAAZA,EAAmBrV,KAAKwS,kBAAkB6C,EAAS7I,aAAe,KACpEyG,EAAOuB,MAAMc,KAAc,MAAPpD,EAAclS,KAAKwR,aAAaU,EAAI1F,aAAe,KAEvE,MAAM4X,EAAuB,GAC7B,IAAK,IAAIlP,EAAI,EAAGA,GAAK,GAAIA,IACvBkP,EAAW7c,KAAK,aAAe2N,GAGjClV,KAAKkU,4BAA4BgX,EAAQ9G,EAAWrT,KAAK,MAAMxD,SAAS+W,IAClEtkB,KAAKsR,mBAAmBgT,EAAK9X,cAAqC,SAArB8X,EAAK9X,aAGtDxM,KAAK0U,WAAWzB,EAAQqR,EAAKvW,QAASuW,EAAK9X,YAAY,IAGzDxM,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAGzBjT,KAAKqQ,cACPrQ,KAAK2T,yBAAyBrK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,ECxDK,MAAMgtB,WAAgC,EAC3CpgB,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbiH,EAAMvQ,KAAKsQ,SAASrN,GAC1B,GAAW,MAAPsN,EAEF,OADAjH,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,MAAMitB,EAAehmB,EAAI9E,cAAc,gBACvC,GAAoB,MAAhB8qB,EAGF,OAFAjtB,EAAOqQ,aAAe,+BACtBrQ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,MAAMktB,EAAiBD,EAAaE,aAAa,aAC3CxD,EAAU1iB,EAAIjD,iBAAiB,wBA4CrC,OA3CAF,MAAMC,KAAK4lB,GAAS1lB,SAAS2O,IAC3B,MAAMjb,EAAQjB,KAAK8T,yBAAyBoI,EAAO,SAC7Cwa,EACK,MAATz1B,GAAkBjB,KAAKsR,mBAAmBrQ,EAAMuL,aAE5C,KADAvL,EAAMuL,YAAYkG,MAAM,KAAK3B,KAAK,KAExC/Q,KAAK8U,cAAcxL,EAAQotB,GAE3B,MAAM1yB,EAAQhE,KAAK8T,yBAAyBoI,EAAO,SAC7C9G,EAAWpV,KAAK8T,yBAAyBoI,EAAO,YAChDT,EAAQzb,KAAK8T,yBAAyBoI,EAAO,SAC7C7G,EAAWrV,KAAK8T,yBAAyBoI,EAAO,YAChDhK,EAAMlS,KAAK8T,yBAAyBoI,EAAO,OAC3C5H,EAAQtU,KAAK8T,yBAAyBoI,EAAO,SAC7CjJ,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAgB,MAATsC,EAAgBhE,KAAKwS,kBAAkBxO,EAAMwI,YAAa,MAAQ,KAChFyG,EAAOqB,MACI,MAATA,EACItU,KAAKwS,kBAAkB8B,EAAM9H,YAAa,IAAIkG,MAAM8jB,GAAgBzlB,KAAK,MACzE,KACNkC,EAAOuB,MAAMY,SACC,MAAZA,EAAmBpV,KAAKwS,kBAAkB4C,EAAS5I,aAAe,KACpEyG,EAAOuB,MAAMa,SACC,MAAZA,EAAmBrV,KAAKwS,kBAAkB6C,EAAS7I,aAAe,KACpEyG,EAAOuB,MAAMc,KAAc,MAAPpD,EAAclS,KAAKwR,aAAaU,EAAI1F,aAAe,KAEnExM,KAAKsR,mBAAmB2B,EAAOuB,MAAMY,WAAsB,MAATqG,EACpDxI,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkBiJ,EAAMjP,aACnC,MAATiP,GAAkBzb,KAAKsR,mBAAmBmK,EAAMjP,eACzDyG,EAAOqB,MAAQtU,KAAKsR,mBAAmB2B,EAAOqB,OAC1C,UAAYmH,EAAMjP,YAClByG,EAAOqB,MAAPrB,YAAkCwI,EAAMjP,aAG9CxM,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAGzBjT,KAAKqQ,cACPrQ,KAAK2T,yBAAyBrK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,EC9DK,MAAMqtB,WAAkC,EAC7CzgB,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,GAAIA,EAAMgG,OAAS,EACjB,OAEEhG,EAAMgG,OAAS,GACjB3H,KAAK8U,cAAcxL,EAAQ3H,EAAM,IAEnC,MAAMsR,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAM,GAAI,MAC3CA,EAAMgG,OAAS,IACjBsL,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM,GAAI,IAAI+Q,MAAM,KAAK3B,KAAK,OAElEpP,EAAMgG,OAAS,IACjBsL,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAM,KAEnDA,EAAMgG,OAAS,IACjBsL,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAM,KAEnDA,EAAMgG,OAAS,IACjBsL,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAM,KAE9C3B,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAGzBjT,KAAKqQ,cACPrQ,KAAK2T,yBAAyBrK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECvBK,MAAMstB,WAA0B,EAAvC,c,oBAkFW,KAAAC,qBAAuB,IAAIvZ,IAAI,CACtC,OACA,OACA,yBACA,yBACA,4BACA,4BACA,uBACA,aACA,+BACA,YACA,gCA2BO,KAAAwZ,qBAAuB,IAAIxZ,IAAI,CACtC,OACA,OACA,6BACA,6BACA,gCACA,kCAgBO,KAAAyZ,sBAAwB,IAAIzZ,IAAI,CACvC,OACA,OACA,iBACA,iBACA,iBAeO,KAAA0Z,mBAAqB,IAAI1Z,IAAI,CAAC,OAAQ,OAAQ,aAAc,eAc5D,KAAA2Z,kBAAoB,IAAI3Z,IAAI,CAAC,OAAQ,OAAQ,aAAc,aAAc,cAczE,KAAA4Z,2BAA6B,IAAI5Z,IAAI,CAC5C,OACA,OACA,8BACA,8BACA,oCAoBO,KAAA6Z,iBAAmB,IAAI7Z,IAAI,CAClC,OACA,OACA,yBACA,0BACA,wBACA,yBACA,4BAoCJ,CAjQEpH,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACb8tB,EAA+B5gB,KAAKN,MAAMjT,GAChD,OAAmB,MAAfm0B,GACF9tB,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBtJ,KAAKq3B,aAAa/tB,EAAQ8tB,EAAY1vB,SACtC1H,KAAKs3B,kBAAkBhuB,EAAQ8tB,EAAYle,OAEvClZ,KAAKqQ,cACPrQ,KAAK2T,yBAAyBrK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,CAEQ+tB,aAAa/tB,EAAsB5B,GAC1B,MAAXA,GAAsC,IAAnBA,EAAQC,QAI/BD,EAAQ6F,SAAS4K,IACK,MAAhBA,EAAOe,OAAwC,GAAvBf,EAAOe,MAAMvR,SAIzC3H,KAAK8U,cAAcxL,EAAQ6O,EAAOzW,MAElC1B,KAAKs3B,kBAAkBhuB,EAAQ6O,EAAOe,OAAM,GAEhD,CAEQoe,kBAAkBhuB,EAAsB4P,GACjC,MAATA,GAAkC,IAAjBA,EAAMvR,QAI3BuR,EAAM3L,SAAS2d,IACb,MAAMjY,EAASjT,KAAKu3B,eAAerM,GAEnClrB,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,GAE/B,CAEQskB,eAAe1X,GACrB,MAAM5M,EAASjT,KAAKoU,kBAEpB,OAAQyL,EAAKzb,MACX,IAAK,mBACHpE,KAAKw3B,mBAAmB3X,EAAM5M,GAC9B,MACF,IAAK,uBACHjT,KAAKy3B,0BAA0B5X,EAAM5M,GACrC,MACF,IAAK,wBACHjT,KAAK03B,0BAA0B7X,EAAM5M,GACrC,MACF,IAAK,OACHjT,KAAK23B,UAAU9X,EAAM5M,GACrB,MACF,IAAK,WACHjT,KAAK43B,eAAe/X,EAAM5M,GAC1B,MAKF,IAAK,OACHjT,KAAK63B,WAAWhY,EAAM5M,GAM1B,OAAOA,CACT,CAeQukB,mBAAmBtb,EAA6BjJ,GACzC,MAATiJ,GAA+B,oBAAdA,EAAM9X,OAI3B6O,EAAOvR,KAAOwa,EAAM4b,uBACpB7kB,EAAOqB,MAAQ4H,EAAM6b,uBAErB9kB,EAAOuB,MAAMY,SAAW8G,EAAM8b,0BAC9B/kB,EAAOuB,MAAMa,SAAW6G,EAAM+b,0BAE9BhlB,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa0K,EAAMgc,sBAE5Cl4B,KAAK0U,WACHzB,EACA,+BACAiJ,EAAMic,6BAA6B5f,WACnC,KAAUmX,SAGZ1vB,KAAK0U,WAAWzB,EAAQ,8BAA+BiJ,EAAMkc,6BAE7Dp4B,KAAKqe,qBAAqBpL,EAAQiJ,EAAOlc,KAAK62B,sBAChD,CAUQY,0BAA0Bvb,EAAyBjJ,GAC5C,MAATiJ,GAA+B,wBAAdA,EAAM9X,OAI3B6O,EAAOvR,KAAOwa,EAAMmc,2BACpBplB,EAAOqB,MAAQ4H,EAAMoc,2BAErBrlB,EAAOuB,MAAMY,SAAW8G,EAAMqc,8BAC9BtlB,EAAOuB,MAAMa,SAAW6G,EAAMsc,8BAE9Bx4B,KAAKqe,qBAAqBpL,EAAQiJ,EAAOlc,KAAK82B,sBAChD,CASQc,eAAe1b,EAAsBjJ,GAC9B,MAATiJ,GAA+B,YAAdA,EAAM9X,OAI3B6O,EAAOvR,KAAOwa,EAAMuc,eACpBxlB,EAAOqB,MAAQ4H,EAAMwc,eAErBzlB,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa0K,EAAMyc,cAE5C34B,KAAKqe,qBAAqBpL,EAAQiJ,EAAOlc,KAAK+2B,uBAChD,CAGQc,WAAW3b,EAAmBjJ,GACvB,MAATiJ,GAA+B,QAAdA,EAAM9X,OAG3B6O,EAAO7O,KAAO,IAAWgD,WACzB6L,EAAOsC,WAAa,IAAI,IACxBtC,EAAOsC,WAAWnR,KAAO,KAAeoR,QACxCvC,EAAOvR,KAAOwa,EAAM0c,WACpB3lB,EAAOqB,MAAQ4H,EAAM2c,WAErB74B,KAAKqe,qBAAqBpL,EAAQiJ,EAAOlc,KAAKg3B,oBAChD,CAGQW,UAAUzb,EAAkBjJ,GACrB,MAATiJ,GAA+B,QAAdA,EAAM9X,OAI3B6O,EAAOvR,KAAOwa,EAAM4c,WACpB7lB,EAAOqB,MAAQ4H,EAAM6c,WAErB9lB,EAAOuB,MAAMoE,KAAOsD,EAAM8c,UAE1Bh5B,KAAKqe,qBAAqBpL,EAAQiJ,EAAOlc,KAAKi3B,mBAChD,CASQS,0BAA0Bxb,EAAkCjJ,GACrD,MAATiJ,GAA+B,yBAAdA,EAAM9X,OAI3B6O,EAAO7O,KAAO,IAAWgD,WACzB6L,EAAOsC,WAAa,IAAI,IACxBtC,EAAOsC,WAAWnR,KAAO,KAAeoR,QACxCvC,EAAOvR,KAAOwa,EAAM+c,4BACpBhmB,EAAOqB,MAAQ4H,EAAMgd,4BAErBhd,EAAMid,gCAAgC5rB,SAAS6rB,IAC7Cp5B,KAAK0U,WAAWzB,EAAQmmB,EAAOn1B,IAAKm1B,EAAOz3B,MAAM,IAGnD3B,KAAKqe,qBAAqBpL,EAAQiJ,EAAOlc,KAAKk3B,4BAChD,CAWQmC,SAASnd,EAAiBjJ,GACnB,MAATiJ,GAA+B,oBAAdA,EAAM9X,OAI3B6O,EAAO7O,KAAO,IAAWgD,WACzB6L,EAAOsC,WAAa,IAAI,IACxBtC,EAAOsC,WAAWnR,KAAO,KAAeoR,QACxCvC,EAAOvR,KAAOwa,EAAMod,uBACpBrmB,EAAOqB,MAAQ4H,EAAMqd,wBAErBv5B,KAAK0U,WAAWzB,EAAQ,wBAAyBiJ,EAAMsd,uBACvDx5B,KAAK0U,WAAWzB,EAAQ,yBAA0BiJ,EAAMud,wBACxDz5B,KAAK0U,WACHzB,EACA,2BACAiJ,EAAMwd,yBACN,KAAU1W,QAGZhjB,KAAKqe,qBAAqBpL,EAAQiJ,EAAOlc,KAAKm3B,kBAChD,CAEQ9Y,qBACNpL,EACAiJ,EACAqC,GAEuB3N,OAAOiN,KAAK3B,GAAOpS,QAAQ4T,IAAOa,EAAalE,IAAIqD,KAC3DnQ,SAAStJ,IACtB,MAAM4b,EAAO3D,EACblc,KAAK0U,WAAWzB,EAAQhP,EAAK4b,EAAK5b,GAAKsU,WAAW,GAEtD,EC/QK,MAAMohB,WAA6B,EACxCzjB,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,GAAoB,SAAhBA,EAAMi4B,MACR,OAEF,MAAM3mB,EAASjT,KAAKoU,kBAGpB,GAFAnB,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAMD,MAC3CuR,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM2S,OACzB,cAAf3S,EAAMyC,KACR6O,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAM4V,SAC5CtE,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAM0T,UACrDpC,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAMyT,eAChD,GAAmB,mBAAfzT,EAAMyC,KAA2B,CAC1C6O,EAAO7O,KAAO,IAAW+C,KACzB8L,EAAOI,KAAO,IAAI,IAClBJ,EAAOI,KAAKyD,eAAiB9W,KAAKwS,kBAAkB7Q,EAAMk4B,YAC1D5mB,EAAOI,KAAK2D,OAAShX,KAAKwS,kBAAkB7Q,EAAMqV,QAClD/D,EAAOI,KAAK+D,MAAQpX,KAAK2S,aAAaM,EAAOI,KAAK2D,QAClD/D,EAAOI,KAAK6D,KAAOlX,KAAKwS,kBAAkB7Q,EAAMm4B,cAEhD,IACE,MAAMxmB,EAAWtT,KAAKwS,kBAAkB7Q,EAAMo4B,aAC9C,GAAgB,MAAZzmB,EAAkB,CACpB,MAAM0mB,EAAiB3hB,SAAS/E,EAAU,MACpB,MAAlB0mB,GAA0BA,GAAkB,GAAKA,GAAkB,KACrE/mB,EAAOI,KAAKC,SAAW0mB,EAAezhB,W,EAG1C,S,CAGF,IACE,MAAM7E,EAAU1T,KAAKwS,kBAAkB7Q,EAAMs4B,YAC7C,GAAe,MAAXvmB,EAAiB,CACnB,MAAMwmB,EAAgB7hB,SAAS3E,EAAS,MACnB,MAAjBwmB,IACFjnB,EAAOI,KAAKK,QAAUwmB,EAAc3hB,W,EAGxC,S,CAIF,MAAM4hB,EAAMn6B,KAAKwS,kBAAkB7Q,EAAMw4B,KAC9B,MAAPA,GACFn6B,KAAK0U,WAAWzB,EAAQ,MAAOknB,GAEjC,MAAMvtB,EAAM5M,KAAKwS,kBAAkB7Q,EAAMipB,SAC9B,MAAPhe,GACF5M,KAAK0U,WAAWzB,EAAQ,WAAYrG,E,CAGxC5M,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECrEK,MAAM8wB,WAA4B,EACvClkB,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,GAAe,MAAXyG,EAEF,OADAJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,IAAI4L,EAAI,EAoDR,OAnDAxL,EAAQ6D,SAAS5L,IACf,MAAMwW,GACHnY,KAAKsR,mBAAmB3P,EAAM04B,SAAW14B,EAAM04B,OAAOhoB,WAAW,KAC9D1Q,EAAM04B,OAAO/nB,QAAQ,IAAK,IAC1B3Q,EAAM04B,OACNtlB,EAAc/U,KAAKsR,mBAAmB6G,GAAmB,KAATA,EACtDnY,KAAK8U,cAAcxL,EAAQyL,GAE3B,MAAM9B,EAASjT,KAAKoU,kBAOpB,GANAnB,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAMgb,MAC5C1J,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAM24B,KAAM,MACjDrnB,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAMuF,OACrD+L,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAM44B,KACrDtnB,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAM8nB,MAEvCzpB,KAAKsR,mBAAmB3P,EAAM64B,WAAY,CAC7C,IAAIjmB,EAAmB,CAAC5S,EAAM64B,WACF,MAAxB74B,EAAMwzB,gBAA0BxzB,EAAMwzB,eAAextB,OAAS,IAChE4M,EAASA,EAAO3K,OAAOjI,EAAMwzB,iBAE/B5gB,EAAOhH,SAASsH,IACd,MAAMmQ,EAAQnQ,EAAMnC,MAAM,KAC1B,GAAIsS,EAAMrd,OAAS,EACjB,OAEF,MAAM1D,EAAmB,cAAb+gB,EAAM,GAAqB,KAAOA,EAAM,GAC9C7O,EAAuB,IAAjB6O,EAAMrd,QAA6B,QAAbqd,EAAM,GAAeA,EAAM,GAAKA,EAAM,GACxEhlB,KAAK0U,WAAWzB,EAAQhP,EAAKkS,EAAI,G,CAIrCnW,KAAKmV,sBAAsBlC,GAC3BjT,KAAKyU,cAAcxB,GAGjBiC,IAAMxL,EAAQ/B,QACE,OAAhBsL,EAAOvR,MACP1B,KAAKsR,mBAAmB2B,EAAOuB,MAAMa,YAKvC/L,EAAOvC,QAAQQ,KAAK0L,GACpBiC,IAAG,IAGDlV,KAAKqQ,cACPrQ,KAAK2T,yBAAyBrK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,EC9DK,MAAMmxB,WAA0B,EACrCvkB,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,I,MACf,MAAMsR,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAMmlB,MAAO,MAClD7T,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAMib,UACrD3J,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAMmb,UACrD7J,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAsB,QAAT,EAAA7P,EAAM8nB,WAAG,QAAI9nB,EAAMia,KACzD3I,EAAOuB,MAAMoE,KAAO5Y,KAAKwS,kBAAkB7Q,EAAM+4B,SACjDznB,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM6f,OAC5CxhB,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,EChBK,MAAMqxB,WAA+B,EAC1CzkB,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbiH,EAAMvQ,KAAKsQ,SAASrN,GAC1B,GAAW,MAAPsN,EAEF,OADAjH,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAIzB,GAAU,MADCiH,EAAI9E,cAAc,YAI3B,OAFAnC,EAAOqQ,aAAe,2BACtBrQ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,MAAM+Y,EAAa,IAAIxI,IA6EvB,OA3EAzM,MAAMC,KAAKkD,EAAIjD,iBAAiB,qBAAqBC,SAASqtB,IAC5D,MAAMl5B,EAAOk5B,EAAQnE,aAAa,QAC5BzsB,EAAK4wB,EAAQnE,aAAa,MAChC,IAAKz2B,KAAKsR,mBAAmB5P,KAAU1B,KAAKsR,mBAAmBtH,GAAK,CAClEqY,EAAWpI,IAAIjQ,EAAIV,EAAO5B,QAAQC,QAClC,MAAMwQ,EAAS,IAAI,IACnBA,EAAOzW,KAAOA,EACd4H,EAAO5B,QAAQH,KAAK4Q,E,KAIxB/K,MAAMC,KAAKkD,EAAIjD,iBAAiB,oBAAoBC,SAASstB,IAC3D,GAAwC,SAApCA,EAAOpE,aAAa,aAA6D,SAAnCoE,EAAOpE,aAAa,WACpE,OAGF,MAAMqE,EAAY96B,KAAK8T,yBAAyB+mB,EAAQ,YACxD,GAAiB,MAAbC,EAAmB,CACrB,MAAMC,EAAUD,EAAUtuB,aACrBxM,KAAKsR,mBAAmBypB,IAAY1Y,EAAWhI,IAAI0gB,IACtDzxB,EAAOkG,oBAAoBjI,KAAK,CAAC+B,EAAOvC,QAAQY,OAAQ0a,EAAW9f,IAAIw4B,I,CAI3E,MAAM9nB,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAO1B,KAAKwS,kBAAkBqoB,EAAOpE,aAAa,SAAU,MAE/B,SAAhCoE,EAAOpE,aAAa,UACtBxjB,EAAOoB,UAAW,GAIH,SADAwmB,EAAOpE,aAAa,SAEnCxjB,EAAO7O,KAAO,IAAWgD,WACzB6L,EAAOsC,WAAa,IAAI,IACxBtC,EAAOsC,WAAWnR,KAAO,KAAeoR,SAExCpI,MAAMC,KAAKrN,KAAKkU,4BAA4B2mB,EAAQ,UAAUttB,SAASytB,IACrE,MAAM3vB,EAAO2vB,EAAQxuB,YACrB,GAAIxM,KAAKsR,mBAAmBjG,GAC1B,OAEF,MAAM3J,EAAOs5B,EAAQvE,aAAa,QAC5B/I,EAAY1tB,KAAKwS,kBAAkBwoB,EAAQvE,aAAa,QAAS,IAAIzoB,cACzD,UAAd0f,EACFza,EAAOuB,MAAMY,SAAW/J,EACD,aAAdqiB,GAA0C,WAAdA,EAErC1tB,KAAK0U,WAAWzB,EAAQvR,EAAM2J,EAAM,KAAU2X,QACvB,sBAAd0K,EACTza,EAAOuB,MAAMoE,KAAOvN,EACG,UAAdqiB,EACTza,EAAOqB,OAASjJ,EAAO,KACA,aAAdqiB,GAA0C,YAAdA,EACrCza,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAanG,GAEtCrL,KAAK0U,WAAWzB,EAAQvR,EAAM2J,E,IAKpC+B,MAAMC,KAAKrN,KAAKkU,4BAA4B2mB,EAAQ,UAAUttB,SAAS0tB,IACrEhoB,EAAOqB,OAAS2mB,EAAQzuB,YAAc,IAAI,IAG5CxM,KAAKk7B,YAAYjoB,GACjBjT,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAGzBjT,KAAKqQ,cACPrQ,KAAK2T,yBAAyBrK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,CAIA4xB,YAAYjoB,GACV,MAAMkoB,EAAaloB,EAAOsB,OAAOzK,QAAQ+K,GAAUA,EAAMzQ,OAAS,KAAU4e,SAC5E,IAAKmY,EAAWxzB,OACd,OAGF,IAAIyzB,EACJ,IAAK,MAAMvmB,KAASsmB,EAClB,GAAIn7B,KAAK8P,mBAAmB2jB,SAAS5e,EAAMnT,KAAKsM,eAAgB,CAC9DotB,EAASvmB,EACT5B,EAAOsB,OAAStB,EAAOsB,OAAOzK,QAAQ+J,GAAMA,IAAMunB,IAClD,K,CAICA,IACHA,EAASD,EAAW,IAGtBloB,EAAOuB,MAAMa,SAAW+lB,EAAOz5B,KACjC,EC7HK,MAAM05B,WAA6B,EACxCnlB,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,MAAMsR,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAO1B,KAAKwS,kBAAkBxS,KAAKiS,YAAYtQ,EAAMuQ,KAAM,MAClEe,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM2S,OAC5CrB,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAMyT,UACrDnC,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAM0T,UACrDpC,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAMuQ,KAC5ClS,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECtBK,MAAMgyB,WAA8B,EACzCplB,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,MAAMsR,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAMmlB,OAC3C7T,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM45B,SAC5CtoB,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAM8nB,KAC5CxW,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAMmb,UACrD7J,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAMib,UACrD5c,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECpBK,MAAMkyB,WAA4B,EACvCtlB,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,GAAIA,EAAMgG,OAAS,EACjB,OAGF3H,KAAK8U,cAAcxL,EAAQtJ,KAAKwS,kBAAkB7Q,EAAMA,EAAMgG,OAAS,KACvE,MAAMsL,EAASjT,KAAKoU,kBACpBnB,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAMA,EAAMgG,OAAS,GAAI,IAC/DsL,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAM,GAAI,MAE9B,eAAbA,EAAM,IAAoC,YAAbA,EAAM,IAAiC,mBAAbA,EAAM,IAC/DsR,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAM,IACrDsR,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAM,IACrDsR,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAM,IAC5C3B,KAAKy7B,mBAAmBxoB,EAAQ,EAAGtR,IAEnC3B,KAAKy7B,mBAAmBxoB,EAAQ,EAAGtR,GAGrC3B,KAAKmV,sBAAsBlC,GAC3BjT,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAGzBjT,KAAKqQ,cACPrQ,KAAK2T,yBAAyBrK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,CAEQmyB,mBAAmBxoB,EAAoByoB,EAAoB/5B,GAEjE,IAAK,IAAIuT,EAAIwmB,EAAYxmB,EAAIvT,EAAMgG,OAAS,EAAGuN,IACzClV,KAAKsR,mBAAmB3P,EAAMuT,MAGlCjC,EAAOqB,OAAS3S,EAAMuT,GAAK,KAE/B,ECnDK,MAAMymB,WAAkC,EAC7CzlB,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbiH,EAAMvQ,KAAKsQ,SAASrN,GAC1B,GAAW,MAAPsN,EAEF,OADAjH,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,MAAMsyB,EAAarrB,EAAIjD,iBAAiB,oCAsDxC,OArDAF,MAAMC,KAAKuuB,GAAYruB,SAASsuB,IAC9B,MAAMC,EAAYD,EAAUpF,aAAa,MACzC,GAAIz2B,KAAKsR,mBAAmBwqB,GAC1B,OAGF,MAAMC,EAAeF,EAAUpF,aAAa,QACtCuF,EAAeH,EAAUpF,aAAa,YAC5C,IAAIrrB,EAAoB,KACpB6wB,EAAmB,KACnBC,EAAoB,KACpBC,EAAkB,KAClBzF,EAAoB,KAExB,MAAM0F,EAAe7rB,EAAI9E,cACvB,4EAEEqwB,EACA,MAEJ,GAAoB,MAAhBM,EAAsB,CACxB,MAAMC,EAAUD,EAAaE,cAAcA,cAC5B,MAAXD,IACFjxB,EAAYixB,EAAQ5F,aAAa,QACjCwF,EAAWI,EAAQ5F,aAAa,QAChC0F,EAAUE,EAAQ5F,aAAa,YAC/ByF,EAAYG,EAAQ5F,aAAa,YAC5Bz2B,KAAKsR,mBAAmB4qB,KAC3BA,EAAYA,EAAUxpB,MAAM,MAAM3B,KAAK,O,CAKxC/Q,KAAKsR,mBAAmB6qB,KAC3BzF,EAAY12B,KAAKu8B,eAAehsB,EAAK4rB,EAAS,IAC9Cn8B,KAAK8U,cAAcxL,EAAQotB,IAG7B,MAAMzjB,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAO1B,KAAKwS,kBAAkBpH,EAAW,MAChD6H,EAAOqB,MAAQtU,KAAKwS,kBAAkB0pB,GACtCjpB,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkBupB,GAC/C9oB,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkBwpB,GAC/C/oB,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAayqB,GACtCj8B,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAGzBjT,KAAKqQ,cACPrQ,KAAK2T,yBAAyBrK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,CAEAizB,eAAehsB,EAAe4rB,EAAiBzF,GAC7C,MAAMz1B,EAAQsP,EAAI9E,cAAc,wCAA0C0wB,EAAU,MACpF,OAAa,MAATl7B,EACKy1B,GAEJ12B,KAAKsR,mBAAmBolB,KAC3BA,EAAY,IAAMA,GAEpBA,EAAYz1B,EAAMw1B,aAAa,QAAUC,EAClC12B,KAAKu8B,eAAehsB,EAAKtP,EAAMw1B,aAAa,YAAaC,GAClE,ECvEF,MAAM8F,GAAqB,CACzB,OACA,YACA,WACA,WACA,wBACA,gBACA,OACA,oBACA,OACA,QACA,oBAGK,MAAMC,WAA2B,EACtCvmB,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,MAAMsR,EAASjT,KAAKoU,kBAapB,GAZAnB,EAAOoB,SAAwE,SAA7DrU,KAAKwS,kBAAkB7Q,EAAM0S,SAAU,IAAIrG,cAC7DiF,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAMD,KAAM,MACjDuR,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM+6B,KAAM,IAClDzpB,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAM6S,OACrDvB,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAM0T,UACrDpC,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAMuQ,KAEzB,UAAfvQ,EAAMg7B,OACR1pB,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAMqC,MAAO,MAClDiP,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM+U,KAAM,KAGjC,OAAf/U,EAAMg7B,MAMR,GALA1pB,EAAO7O,KAAO,IAAW+C,KACzB8L,EAAOI,KAAO,IAAI,IAClBJ,EAAOI,KAAKyD,eAAiB9W,KAAKwS,kBAAkB7Q,EAAMk4B,YAC1D5mB,EAAOI,KAAK2D,OAAShX,KAAKwS,kBAAkB7Q,EAAMqV,QAClD/D,EAAOI,KAAK+D,MAAQpX,KAAK2S,aAAaM,EAAOI,KAAK2D,SAC7ChX,KAAKsR,mBAAmB3P,EAAMi7B,YACjC,IACE,MAAM9G,EAAU,IAAI1Y,KAAKzb,EAAMi7B,YAC/B3pB,EAAOI,KAAKK,QAAUoiB,EAAQC,cAAcxd,WAC5CtF,EAAOI,KAAKC,UAAYwiB,EAAQjN,WAAa,GAAGtQ,U,CAChD,S,OAIC,GAAmB,UAAf5W,EAAMg7B,KAAkB,CACjC1pB,EAAO7O,KAAO,IAAWgD,WACzB6L,EAAOsC,WAAa,IAAI,IACxBtC,EAAOsC,WAAWnR,KAAO,KAAeoR,QACnCxV,KAAKsR,mBAAmB2B,EAAOqB,SAClCrB,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAMk7B,iBAAkB,KAEhE,IAAK,MAAMzgB,KAAYza,EAEnBA,EAAMoa,eAAeK,IACrBogB,GAAmBzqB,QAAQqK,EAASpO,eAAiB,IACpDhO,KAAKsR,mBAAmB3P,EAAMya,KAE/Bpc,KAAK0U,WAAWzB,EAAQmJ,EAAUza,EAAMya,G,CAK9Cpc,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECjFK,MAAMwzB,WAAuB,EAClC5mB,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,GAAqB,IAAjBA,EAAMgG,OACR,OAEF,MAAMsL,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAM,GAAI,MAC/CsR,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM,IAC5CsR,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAM,IACrDsR,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAM,IACrDsR,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAM,IAC5C3B,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECzBK,MAAMyzB,WAAwB,EACnC7mB,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,MAAMsR,EAASjT,KAAKoU,kBACpBnB,EAAOvR,KAAO1B,KAAKwS,kBAAkB7Q,EAAM24B,KAAM,MACjDrnB,EAAOuB,MAAMY,SAAWpV,KAAKwS,kBAAkB7Q,EAAM,cACrDsR,EAAOuB,MAAMa,SAAWrV,KAAKwS,kBAAkB7Q,EAAMmb,UACrD7J,EAAOuB,MAAMc,KAAOtV,KAAKwR,aAAa7P,EAAMia,KAC5C5b,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAG7B3J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECnBK,MAAM0zB,WAA6B,EACxC9mB,MAAMjT,GACJ,MAAMqG,EAAS,IAAI,EACbI,EAAU1J,KAAKwQ,SAASvN,GAAM,GACpC,OAAe,MAAXyG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS5L,IACf,GACE3B,KAAKsR,mBAAmB3P,EAAM,mBAC9B3B,KAAKsR,mBAAmB3P,EAAM,gBAE9B,OAEF3B,KAAK8U,cAAcxL,EAAQtJ,KAAKwS,kBAAkB7Q,EAAMs7B,cACxD,MAAMhqB,EAASjT,KAAKoU,kBACpBnB,EAAOoB,SAA2D,MAAhDrU,KAAKwS,kBAAkB7Q,EAAM8a,SAAU,KACzDxJ,EAAOqB,MAAQtU,KAAKwS,kBAAkB7Q,EAAM6f,OAC5CvO,EAAOvR,KAAO1B,KAAKwS,kBACjB7Q,EAAM,iBACN3B,KAAKwS,kBAAkB7Q,EAAM,eAAgB,OAE/CsR,EAAOuB,MAAMc,KAAOtV,KAAKwR,aACvBxR,KAAKwS,kBAAkB7Q,EAAM,gBAAiB3B,KAAKwS,kBAAkB7Q,EAAM,iBAE7E3B,KAAKk9B,UAAUjqB,EAAQtR,EAAMw7B,YAC7Bn9B,KAAKk9B,UAAUjqB,EAAQtR,EAAMy7B,YAC7Bp9B,KAAKmV,sBAAsBlC,GAC3BjT,KAAKyU,cAAcxB,GACnB3J,EAAOvC,QAAQQ,KAAK0L,EAAO,IAGzBjT,KAAKqQ,cACPrQ,KAAK2T,yBAAyBrK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,CAEQ4zB,UAAUjqB,EAAoBhQ,GACpC,GAAIjD,KAAKsR,mBAAmBrO,GAC1B,OAEgBjD,KAAK8Q,aAAa7N,GAC1BsK,SAASse,IACjB,MAAMpT,EAAgBoT,EAAK9Z,QAAQ,KACnC,GAAI0G,EAAgB,EAClB,OAEF,MAAM5D,EAAQgX,EAAK7Z,UAAU,EAAGyG,GAC1B9W,EAAQkqB,EAAKlkB,OAAS8Q,EAAgBoT,EAAK7Z,UAAUyG,EAAgB,GAAK,KAChF,GACEzY,KAAKsR,mBAAmBuD,IACxB7U,KAAKsR,mBAAmB3P,IACd,eAAVkT,EAEA,OAEF,MAAMuB,EAAavB,EAAM7G,cACI,MAAzBiF,EAAOuB,MAAMY,UAAoBpV,KAAK+P,mBAAmBgC,QAAQqE,IAAe,EAClFnD,EAAOuB,MAAMY,SAAWzT,EAEC,MAAzBsR,EAAOuB,MAAMa,UACbrV,KAAK8P,mBAAmBiC,QAAQqE,IAAe,EAE/CnD,EAAOuB,MAAMa,SAAW1T,EAExB3B,KAAK0U,WAAWzB,EAAQ4B,EAAOlT,E,GAGrC,EC3EK,MAAMgI,GAAwB,CACnC,CAAEK,GAAI,gBAAiBtI,KAAM,oBAC7B,CAAEsI,GAAI,eAAgBtI,KAAM,mBAC5B,CAAEsI,GAAI,YAAatI,KAAM,gBACzB,CAAEsI,GAAI,cAAetI,KAAM,kBAC3B,CAAEsI,GAAI,aAActI,KAAM,iBAC1B,CAAEsI,GAAI,cAAetI,KAAM,mBAC3B,CAAEsI,GAAI,cAAetI,KAAM,kBAC3B,CAAEsI,GAAI,YAAatI,KAAM,0BACzB,CAAEsI,GAAI,gBAAiBtI,KAAM,qBAGlBuI,GAAuB,CAClC,CAAED,GAAI,cAAetI,KAAM,kBAC3B,CAAEsI,GAAI,gBAAiBtI,KAAM,oBAC7B,CAAEsI,GAAI,kBAAmBtI,KAAM,mCAC/B,CAAEsI,GAAI,kBAAmBtI,KAAM,+BAC/B,CAAEsI,GAAI,eAAgBtI,KAAM,mBAC5B,CAAEsI,GAAI,cAAetI,KAAM,kBAC3B,CAAEsI,GAAI,YAAatI,KAAM,gBAGzB,CAAEsI,GAAI,YAAatI,KAAM,gBACzB,CAAEsI,GAAI,aAActI,KAAM,iBAC1B,CAAEsI,GAAI,iBAAkBtI,KAAM,qBAC9B,CAAEsI,GAAI,YAAatI,KAAM,uBACzB,CAAEsI,GAAI,oBAAqBtI,KAAM,yBACjC,CAAEsI,GAAI,aAActI,KAAM,iBAC1B,CAAEsI,GAAI,aAActI,KAAM,kBAC1B,CAAEsI,GAAI,mBAAoBtI,KAAM,wBAChC,CAAEsI,GAAI,eAAgBtI,KAAM,oBAC5B,CAAEsI,GAAI,cAAetI,KAAM,kBAC3B,CAAEsI,GAAI,oBAAqBtI,KAAM,yBACjC,CAAEsI,GAAI,aAActI,KAAM,iBAC1B,CAAEsI,GAAI,cAAetI,KAAM,kBAC3B,CAAEsI,GAAI,eAAgBtI,KAAM,mBAC5B,CAAEsI,GAAI,WAAYtI,KAAM,eACxB,CAAEsI,GAAI,eAAgBtI,KAAM,mBAC5B,CAAEsI,GAAI,SAAUtI,KAAM,oCACtB,CAAEsI,GAAI,aAActI,KAAM,2BAC1B,CAAEsI,GAAI,aAActI,KAAM,iBAC1B,CAAEsI,GAAI,cAAetI,KAAM,kBAC3B,CAAEsI,GAAI,WAAYtI,KAAM,eACxB,CAAEsI,GAAI,aAActI,KAAM,iBAC1B,CAAEsI,GAAI,YAAatI,KAAM,4CACzB,CAAEsI,GAAI,UAAWtI,KAAM,cACvB,CAAEsI,GAAI,mBAAoBtI,KAAM,wBAChC,CAAEsI,GAAI,cAAetI,KAAM,kBAC3B,CAAEsI,GAAI,cAAetI,KAAM,kBAC3B,CAAEsI,GAAI,WAAYtI,KAAM,yBACxB,CAAEsI,GAAI,YAAatI,KAAM,0BACzB,CAAEsI,GAAI,aAActI,KAAM,sBAC1B,CAAEsI,GAAI,eAAgBtI,KAAM,oCAC5B,CAAEsI,GAAI,eAAgBtI,KAAM,mBAC5B,CAAEsI,GAAI,oBAAqBtI,KAAM,wBACjC,CAAEsI,GAAI,UAAWtI,KAAM,cACvB,CAAEsI,GAAI,gBAAiBtI,KAAM,oBAC7B,CAAEsI,GAAI,eAAgBtI,KAAM,mBAC5B,CAAEsI,GAAI,gBAAiBtI,KAAM,oCAC7B,CAAEsI,GAAI,eAAgBtI,KAAM,mBAC5B,CAAEsI,GAAI,cAAetI,KAAM,kBAC3B,CAAEsI,GAAI,cAAetI,KAAM,kBAC3B,CAAEsI,GAAI,UAAWtI,KAAM,cACvB,CAAEsI,GAAI,cAAetI,KAAM,kBAC3B,CAAEsI,GAAI,YAAatI,KAAM,gBACzB,CAAEsI,GAAI,aAActI,KAAM,kB,2SCiBrB,MAAM27B,GAKXn9B,YACUo9B,EACAC,EACAC,EACAp9B,EACAq9B,EACAt9B,GALA,KAAAm9B,cAAAA,EACA,KAAAC,cAAAA,EACA,KAAAC,iBAAAA,EACA,KAAAp9B,YAAAA,EACA,KAAAq9B,kBAAAA,EACA,KAAAt9B,cAAAA,EAVV,KAAAwJ,sBAAwBA,GAExB,KAAAM,qBAAuBA,EASpB,CAEHyzB,mBACE,OAAO19B,KAAK2J,sBAAsBC,OAAO5J,KAAKiK,qBAChD,CAEMV,OACJT,EACAM,EACAb,EAAyB,M,0CAEzB,MAAMo1B,QAAqB70B,EAASoN,MAAM9M,GAC1C,IAAKu0B,EAAa/tB,QAAS,CACzB,IAAK,IAAM0B,mBAAmBqsB,EAAahkB,cACzC,MAAM,IAAIikB,MAAMD,EAAahkB,cAE/B,MAAM,IAAIikB,MAAM59B,KAAKI,YAAYuD,EAAE,qB,CAGrC,GAAoC,IAAhCg6B,EAAaj2B,QAAQC,QAAgD,IAAhCg2B,EAAa52B,QAAQY,OAC5D,MAAM,IAAIi2B,MAAM59B,KAAKI,YAAYuD,EAAE,uBAGrC,GAAIg6B,EAAa52B,QAAQY,OAAS,EAAG,CACnC,MAAMk2B,EAAUC,KAAKC,MAAMJ,EAAa52B,QAAQY,OAAS,GACnDq2B,EAAOL,EAAa52B,QAAQY,OAAS,EAE3C,GACE3H,KAAKi+B,QAAQN,EAAa52B,QAAQ,KAClC/G,KAAKi+B,QAAQN,EAAa52B,QAAQ82B,KAClC79B,KAAKi+B,QAAQN,EAAa52B,QAAQi3B,IAElC,MAAM,IAAIJ,MAAM59B,KAAKI,YAAYuD,EAAE,qB,CAIvC,IACwB,MAAlB4E,QACIvI,KAAKk+B,2BAA2BP,EAAcp1B,SAE9CvI,KAAKm+B,uBAAuBR,E,CAEpC,MAAOn6B,GACP,MAAM46B,EAAgB,IAAI,IAAc56B,EAAO,KAC/C,MAAMxD,KAAKq+B,kBAAkBD,EAAeT,E,CAE9C,OAAOA,CACT,G,CAEA50B,YACE7H,EACAuZ,EACAlS,EAAyB,MAEzB,GAAkC,MAA9BkS,EACF,OAAO,KAGT,MAAM3R,EAAW9I,KAAKs+B,oBAAoBp9B,EAAQuZ,GAClD,OAAgB,MAAZ3R,EACK,MAETA,EAASP,eAAiBA,EACnBO,EACT,CAEQw1B,oBACNp9B,EACAuZ,GAEA,GAAc,MAAVvZ,EACF,OAAO,KAGT,OAAQA,GACN,IAAK,eACH,OAAO,IAAI6W,EACb,IAAK,gBACL,IAAK,6BACH,OAAO,IAAIyC,EACTxa,KAAKG,cACLH,KAAKI,YACLqa,GAEJ,IAAK,cACL,IAAK,cACH,OAAO,IAAIwM,GACb,IAAK,cACH,OAAO,IAAIJ,GACb,IAAK,WACH,OAAO,IAAIvP,EACb,IAAK,UACH,OAAO,IAAIiE,EACb,IAAK,iBACH,OAAO,IAAIof,GACb,IAAK,aACH,OAAO,IAAI1G,GACb,IAAK,cACH,OAAO,IAAIpO,GACb,IAAK,YACL,IAAK,WACL,IAAK,aACH,OAAO,IAAIhO,EACb,IAAK,aACH,OAAO,IAAIyL,GACb,IAAK,SACH,OAAO,IAAIwZ,GACb,IAAK,eACH,OAAO,IAAIzB,GACb,IAAK,YACH,OAAO,IAAIZ,GACb,IAAK,aACH,OAAO,IAAInR,GACb,IAAK,gBACH,OAAO,IAAIsC,GACb,IAAK,gBACH,OAAO,IAAI+B,GACb,IAAK,kBACH,OAAO,IAAImG,GACb,IAAK,kBACH,OAAO,IAAID,GACb,IAAK,YACH,OAAO,IAAI7M,GAGb,IAAK,oBACH,OAAO,IAAIiP,GACb,IAAK,YACH,OAAO,IAAIpU,GACb,IAAK,aACH,OAAO,IAAIO,GACb,IAAK,YACH,OAAO,IAAIkU,GACb,IAAK,cACH,OAAO,IAAI7Y,GACb,IAAK,eACH,OAAO,IAAIsC,GACb,IAAK,aACH,OAAO,IAAI2J,GACb,IAAK,oBACH,OAAO,IAAIiS,GACb,IAAK,aACH,OAAO,IAAIc,GACb,IAAK,eACH,OAAO,IAAIzgB,EACb,IAAK,cACH,OAAO,IAAIoe,GACb,IAAK,aACH,OAAO,IAAInkB,EACb,IAAK,mBACH,OAAO,IAAIyf,GACb,IAAK,eACH,OAAO,IAAIsH,GACb,IAAK,cACH,OAAO,IAAIxB,GACb,IAAK,cACH,OAAO,IAAInH,GACb,IAAK,YACH,OAAO,IAAIpQ,GACb,IAAK,mBACH,OAAO,IAAIsR,GACb,IAAK,cACH,OAAO,IAAIR,GACb,IAAK,cACH,OAAO,IAAIL,GACb,IAAK,WACH,OAAO,IAAIre,EACb,IAAK,YACH,OAAO,IAAIE,EACb,IAAK,aACH,OAAO,IAAIiN,GACb,IAAK,eACH,OAAO,IAAImB,GACb,IAAK,eACH,OAAO,IAAIgV,GACb,IAAK,oBACH,OAAO,IAAIhD,GACb,IAAK,UACH,OAAO,IAAIzM,GACb,IAAK,gBACH,OAAO,IAAIoR,GACb,IAAK,eACH,OAAO,IAAIjS,GACb,IAAK,gBACH,OAAO,IAAI5R,EACb,IAAK,eACH,OAAO,IAAIkE,EACb,IAAK,cACH,OAAO,IAAIY,EACb,IAAK,cACH,OAAO,IAAI+E,GACb,IAAK,UACH,OAAO,IAAIyb,GACb,IAAK,cACH,OAAO,IAAI9R,GACb,IAAK,YACH,OAAO,IAAI2L,GACb,IAAK,aACH,OAAO,IAAIrC,GACb,QACE,OAAO,KAEb,CAEc4J,uBAAuBR,G,0CACnC,MAAM1uB,EAAU,IAAIM,EACpB,IAAK,IAAI2F,EAAI,EAAGA,EAAIyoB,EAAa52B,QAAQY,OAAQuN,IAAK,CACpD,MAAMjO,QAAUjH,KAAKs9B,cAAciB,QAAQZ,EAAa52B,QAAQmO,IAChEjG,EAAQlI,QAAQQ,KAAK,IAAI,IAAcN,G,CAEzC,GAA4B,MAAxB02B,EAAaj2B,QACf,IAAK,IAAIwN,EAAI,EAAGA,EAAIyoB,EAAaj2B,QAAQC,OAAQuN,IAAK,CACpD,MAAMrB,QAAU7T,KAAKu9B,cAAcgB,QAAQZ,EAAaj2B,QAAQwN,IAChEjG,EAAQvH,QAAQH,KAAK,IAAI,IAAoBsM,G,CAQjD,OALwC,MAApC8pB,EAAanuB,qBACfmuB,EAAanuB,oBAAoBjC,SAASqG,GACxC3E,EAAQO,oBAAoBjI,KAAK,IAAIoI,EAAWiE,EAAE,GAAIA,EAAE,aAG/C5T,KAAKw9B,iBAAiBxuB,kBAAkBC,EACvD,G,CAEcivB,2BAA2BP,EAA4Bp1B,G,0CACnE,MAAM0G,EAAU,IAAIQ,EACpB,IAAK,IAAIyF,EAAI,EAAGA,EAAIyoB,EAAa52B,QAAQY,OAAQuN,IAAK,CACpDyoB,EAAa52B,QAAQmO,GAAG3M,eAAiBA,EACzC,MAAMtB,QAAUjH,KAAKs9B,cAAciB,QAAQZ,EAAa52B,QAAQmO,IAChEjG,EAAQlI,QAAQQ,KAAK,IAAI,IAAcN,G,CAEzC,GAAgC,MAA5B02B,EAAa/1B,YACf,IAAK,IAAIsN,EAAI,EAAGA,EAAIyoB,EAAa/1B,YAAYD,OAAQuN,IAAK,CACxDyoB,EAAa/1B,YAAYsN,GAAG3M,eAAiBA,EAC7C,MAAMtB,QAAUjH,KAAKy9B,kBAAkBc,QAAQZ,EAAa/1B,YAAYsN,IACxEjG,EAAQrH,YAAYL,KAAK,IAAI8H,EAAwBpI,G,CAQzD,OAL4C,MAAxC02B,EAAajuB,yBACfiuB,EAAajuB,wBAAwBnC,SAASqG,GAC5C3E,EAAQS,wBAAwBnI,KAAK,IAAIoI,EAAWiE,EAAE,GAAIA,EAAE,aAGnD5T,KAAKw9B,iBAAiBruB,8BAA8B5G,EAAgB0G,EACnF,G,CAEQgvB,QAAQh3B,GACd,OACa,MAAVA,EAAEvF,MAA2B,OAAXuF,EAAEvF,OACrBuF,EAAE7C,OAAS,IAAW8C,OACX,MAAXD,EAAEuN,OACF,IAAMlD,mBAAmBrK,EAAEuN,MAAMa,SAErC,CAEQgpB,kBAAkBD,EAA8BT,GACtD,GAAsC,MAAlCS,EAAcI,iBAChB,OAAO,IAAIZ,MAAMQ,EAAct6B,SAGjC,IAAI6V,EAAe,GAmCnB,OAjCA/I,OAAOqiB,QAAQmL,EAAcI,kBAAkBjxB,SAAQ,EAAEtJ,EAAKtC,GAAQ88B,KACpE,IAAI5e,EACA6e,EACJ,MAAMxpB,EAAIwT,OAAOzkB,EAAI2N,MAAM,UAAU,IAErC,OAAQ3N,EAAI2N,MAAM,QAAQ,IACxB,IAAK,UACHiO,EAAO8d,EAAa52B,QAAQmO,GAC5BwpB,EAAW,IAAW7e,EAAKzb,MAC3B,MACF,IAAK,UACHyb,EAAO8d,EAAaj2B,QAAQwN,GAC5BwpB,EAAW,SACX,MACF,IAAK,cACH7e,EAAO8d,EAAa/1B,YAAYsN,GAChCwpB,EAAW,aACX,MACF,QACE,OAGAD,EAAQ,IACV9kB,GAAgB,QAGD,WAAb+kB,GAAsC,eAAbA,IAC3B/kB,GAAgB,KAAOzE,EAAI,GAAK,MAGlCyE,GAAgB,IAAM+kB,EAAW,MAAQ7e,EAAKne,KAAO,MAAQC,CAAK,IAG7D,IAAIi8B,MAAMjkB,EACnB,E","sources":["webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/import-success-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/import-success-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/file-password-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/file-password-prompt.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/directives/box-row.directive.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export-scope-callout.component.html","webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export-scope-callout.component.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import-api.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import-api.service.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/common/src/admin-console/models/request/collection-with-id.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-organization-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/kvp.request.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-result.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/base-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/ascendo-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avast/avast-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avast/avast-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avira-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/blackberry-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/chrome-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-password-protected-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/blur-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/buttercup-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/clipperz-html-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/codebook-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/dashlane/dashlane-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/dashlane/dashlane-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/encryptr-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/enpass/enpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/enpass/enpass-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/firefox-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/fsecure/fsecure-fsk-types.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/fsecure/fsecure-fsk-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/gnome-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/kaspersky-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keepass2-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keepassx-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keeper/keeper-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/logmeonce-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/meldium-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/msecure-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/myki-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/nordpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/types/onepassword-1pux-importer-types.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-1pif-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-1pux-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/cipher-import-context.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-mac-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-win-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/padlock-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passkeep-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passky/passky-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passman-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passpack-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordagent-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordboss-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passworddragon-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordsafe-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordwallet-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/psono/psono-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/remembear-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/roboform-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/safari-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/safeincloud-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/saferpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/securesafe-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/splashid-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/stickypassword-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/truekey-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/upm-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/yoti-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/zohovault-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-options.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import.service.ts"],"sourcesContent":["import { Directive, EventEmitter, OnDestroy, OnInit, Output } from \"@angular/core\";\nimport { UntypedFormBuilder, Validators } from \"@angular/forms\";\nimport { merge, startWith, Subject, takeUntil } from \"rxjs\";\n\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { EncryptedExportType, EventType } from \"@bitwarden/common/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { VaultExportServiceAbstraction } from \"@bitwarden/exporter/vault-export\";\n\nimport { DialogServiceAbstraction, SimpleDialogType } from \"../../../services/dialog\";\n\n@Directive()\nexport class ExportComponent implements OnInit, OnDestroy {\n  @Output() onSaved = new EventEmitter();\n\n  formPromise: Promise<string>;\n  private _disabledByPolicy = false;\n\n  protected get disabledByPolicy(): boolean {\n    return this._disabledByPolicy;\n  }\n\n  exportForm = this.formBuilder.group({\n    format: [\"json\"],\n    secret: [\"\"],\n    filePassword: [\"\", Validators.required],\n    confirmFilePassword: [\"\", Validators.required],\n    fileEncryptionType: [EncryptedExportType.AccountEncrypted],\n  });\n\n  formatOptions = [\n    { name: \".json\", value: \"json\" },\n    { name: \".csv\", value: \"csv\" },\n    { name: \".json (Encrypted)\", value: \"encrypted_json\" },\n  ];\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected exportService: VaultExportServiceAbstraction,\n    protected eventCollectionService: EventCollectionService,\n    private policyService: PolicyService,\n    protected win: Window,\n    private logService: LogService,\n    private userVerificationService: UserVerificationService,\n    private formBuilder: UntypedFormBuilder,\n    protected fileDownloadService: FileDownloadService,\n    protected dialogService: DialogServiceAbstraction\n  ) {}\n\n  async ngOnInit() {\n    this.policyService\n      .policyAppliesToActiveUser$(PolicyType.DisablePersonalVaultExport)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((policyAppliesToActiveUser) => {\n        this._disabledByPolicy = policyAppliesToActiveUser;\n        if (this.disabledByPolicy) {\n          this.exportForm.disable();\n        }\n      });\n\n    merge(\n      this.exportForm.get(\"format\").valueChanges,\n      this.exportForm.get(\"fileEncryptionType\").valueChanges\n    )\n      .pipe(takeUntil(this.destroy$))\n      .pipe(startWith(0))\n      .subscribe(() => this.adjustValidators());\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n  }\n\n  get encryptedFormat() {\n    return this.format === \"encrypted_json\";\n  }\n\n  protected async doExport() {\n    try {\n      this.formPromise = this.getExportData();\n      const data = await this.formPromise;\n      this.downloadFile(data);\n      this.saved();\n      await this.collectEvent();\n      this.exportForm.get(\"secret\").setValue(\"\");\n      this.exportForm.clearValidators();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async submit() {\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const acceptedWarning = await this.warningDialog();\n    if (!acceptedWarning) {\n      return;\n    }\n    const secret = this.exportForm.get(\"secret\").value;\n\n    try {\n      await this.userVerificationService.verifyUser(secret);\n    } catch (e) {\n      this.platformUtilsService.showToast(\"error\", this.i18nService.t(\"errorOccurred\"), e.message);\n      return;\n    }\n\n    this.doExport();\n  }\n\n  async warningDialog() {\n    if (this.encryptedFormat) {\n      return await this.dialogService.openSimpleDialog({\n        title: { key: \"confirmVaultExport\" },\n        content:\n          this.i18nService.t(\"encExportKeyWarningDesc\") +\n          \" \" +\n          this.i18nService.t(\"encExportAccountWarningDesc\"),\n        acceptButtonText: { key: \"exportVault\" },\n        type: SimpleDialogType.WARNING,\n      });\n    } else {\n      return await this.dialogService.openSimpleDialog({\n        title: { key: \"confirmVaultExport\" },\n        content: { key: \"exportWarningDesc\" },\n        acceptButtonText: { key: \"exportVault\" },\n        type: SimpleDialogType.WARNING,\n      });\n    }\n  }\n\n  protected saved() {\n    this.onSaved.emit();\n  }\n\n  protected getExportData() {\n    if (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    ) {\n      return this.exportService.getPasswordProtectedExport(this.filePassword);\n    } else {\n      return this.exportService.getExport(this.format, null);\n    }\n  }\n\n  protected getFileName(prefix?: string) {\n    let extension = this.format;\n    if (this.format === \"encrypted_json\") {\n      if (prefix == null) {\n        prefix = \"encrypted\";\n      } else {\n        prefix = \"encrypted_\" + prefix;\n      }\n      extension = \"json\";\n    }\n    return this.exportService.getFileName(prefix, extension);\n  }\n\n  protected async collectEvent(): Promise<void> {\n    await this.eventCollectionService.collect(EventType.User_ClientExportedVault);\n  }\n\n  get format() {\n    return this.exportForm.get(\"format\").value;\n  }\n\n  get filePassword() {\n    return this.exportForm.get(\"filePassword\").value;\n  }\n\n  get confirmFilePassword() {\n    return this.exportForm.get(\"confirmFilePassword\").value;\n  }\n\n  get fileEncryptionType() {\n    return this.exportForm.get(\"fileEncryptionType\").value;\n  }\n\n  adjustValidators() {\n    this.exportForm.get(\"confirmFilePassword\").reset();\n    this.exportForm.get(\"filePassword\").reset();\n\n    if (this.encryptedFormat && this.fileEncryptionType == EncryptedExportType.FileEncrypted) {\n      this.exportForm.controls.filePassword.enable();\n      this.exportForm.controls.confirmFilePassword.enable();\n    } else {\n      this.exportForm.controls.filePassword.disable();\n      this.exportForm.controls.confirmFilePassword.disable();\n    }\n  }\n\n  private downloadFile(csv: string): void {\n    const fileName = this.getFileName();\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: csv,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable tailwindcss/no-custom-classname -->\n<form\n  #form\n  (ngSubmit)=\"submit()\"\n  [appApiAction]=\"formPromise\"\n  [formGroup]=\"exportForm\"\n  *ngIf=\"exportForm\"\n>\n  <div class=\"page-header\">\n    <h1>{{ \"exportVault\" | i18n }}</h1>\n  </div>\n\n  <app-callout type=\"error\" title=\"{{ 'vaultExportDisabled' | i18n }}\" *ngIf=\"disabledByPolicy\">\n    {{ \"personalVaultExportPolicyInEffect\" | i18n }}\n  </app-callout>\n  <app-export-scope-callout\n    [organizationId]=\"organizationId\"\n    *ngIf=\"!disabledByPolicy\"\n  ></app-export-scope-callout>\n\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <bit-form-field>\n        <bit-label class=\"tw-text-lg\" for=\"format\">{{ \"fileFormat\" | i18n }}</bit-label>\n        <select bitInput name=\"format\" formControlName=\"format\">\n          <option *ngFor=\"let f of formatOptions\" [value]=\"f.value\">{{ f.name }}</option>\n        </select>\n      </bit-form-field>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"form-group col-6\">\n      <ng-container *ngIf=\"format === 'encrypted_json'\">\n        <div role=\"radiogroup\" aria-labelledby=\"exportTypeHeading\">\n          <label id=\"exportTypeHeading\" class=\"tw-semi-bold tw-text-lg\">\n            {{ \"exportTypeHeading\" | i18n }}\n          </label>\n\n          <div appBoxRow name=\"FileTypeOptions\" class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"AccountEncrypted\"\n                [value]=\"encryptedExportType.AccountEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.AccountEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"AccountEncrypted\">\n                {{ \"accountRestricted\" | i18n }}\n              </label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 pb-2 tw-text-sm\">\n            {{ \"accountRestrictedOptionDescription\" | i18n }}\n          </div>\n\n          <div class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"FileEncrypted\"\n                [value]=\"encryptedExportType.FileEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.FileEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"FileEncrypted\">{{\n                \"passwordProtected\" | i18n\n              }}</label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 tw-text-sm\">\n            {{ \"passwordProtectedOptionDescription\" | i18n }}\n          </div>\n        </div>\n        <br />\n\n        <ng-container *ngIf=\"fileEncryptionType == encryptedExportType.FileEncrypted\">\n          <bit-form-field>\n            <bit-label>{{ \"filePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"filePassword\"\n              formControlName=\"filePassword\"\n              name=\"password\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n            <bit-hint>{{ \"exportPasswordDescription\" | i18n }}</bit-hint>\n          </bit-form-field>\n          <bit-form-field>\n            <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"confirmFilePassword\"\n              formControlName=\"confirmFilePassword\"\n              name=\"confirmFilePassword\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n          </bit-form-field>\n        </ng-container>\n      </ng-container>\n\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary btn-submit\"\n        [disabled]=\"form.loading || disabledByPolicy\"\n        [ngClass]=\"{ manual: disabledByPolicy }\"\n      >\n        <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n        <span>{{ \"confirmFormat\" | i18n }}</span>\n      </button>\n    </div>\n  </div>\n</form>\n","import { Component } from \"@angular/core\";\nimport { UntypedFormBuilder } from \"@angular/forms\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { ExportComponent as BaseExportComponent } from \"@bitwarden/angular/tools/export/components/export.component\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { EncryptedExportType } from \"@bitwarden/common/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { VaultExportServiceAbstraction } from \"@bitwarden/exporter/vault-export\";\n\nimport { UserVerificationPromptComponent } from \"../../shared/components/user-verification\";\n\n@Component({\n  selector: \"app-export\",\n  templateUrl: \"export.component.html\",\n})\nexport class ExportComponent extends BaseExportComponent {\n  organizationId: string;\n  encryptedExportType = EncryptedExportType;\n  protected showFilePassword: boolean;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    platformUtilsService: PlatformUtilsService,\n    exportService: VaultExportServiceAbstraction,\n    eventCollectionService: EventCollectionService,\n    policyService: PolicyService,\n    logService: LogService,\n    userVerificationService: UserVerificationService,\n    formBuilder: UntypedFormBuilder,\n    fileDownloadService: FileDownloadService,\n    private modalService: ModalService,\n    dialogService: DialogServiceAbstraction\n  ) {\n    super(\n      cryptoService,\n      i18nService,\n      platformUtilsService,\n      exportService,\n      eventCollectionService,\n      policyService,\n      window,\n      logService,\n      userVerificationService,\n      formBuilder,\n      fileDownloadService,\n      dialogService\n    );\n  }\n\n  async submit() {\n    if (this.isFileEncryptedExport && this.filePassword != this.confirmFilePassword) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"filePasswordAndConfirmFilePasswordDoNotMatch\")\n      );\n      return;\n    }\n\n    this.exportForm.markAllAsTouched();\n    if (!this.exportForm.valid) {\n      return;\n    }\n\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    this.doExport();\n  }\n\n  protected saved() {\n    super.saved();\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"exportSuccess\"));\n  }\n\n  private verifyUser() {\n    let confirmDescription = \"exportWarningDesc\";\n    if (this.isFileEncryptedExport) {\n      confirmDescription = \"fileEncryptedExportWarningDesc\";\n    } else if (this.isAccountEncryptedExport) {\n      confirmDescription = \"encExportKeyWarningDesc\";\n    }\n\n    const ref = this.modalService.open(UserVerificationPromptComponent, {\n      allowMultipleModals: true,\n      data: {\n        confirmDescription: confirmDescription,\n        confirmButtonText: \"exportVault\",\n        modalTitle: \"confirmVaultExport\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return ref.onClosedPromise();\n  }\n\n  get isFileEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    );\n  }\n\n  get isAccountEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.AccountEncrypted\n    );\n  }\n}\n","<bit-dialog>\n  <span bitDialogTitle>\n    {{ \"importSuccess\" | i18n }}\n  </span>\n\n  <div bitDialogContent>\n    <span>{{ \"importSuccessNumberOfItems\" | i18n : this.data.ciphers.length }}</span>\n    <bit-table [dataSource]=\"dataSource\">\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"type\" | i18n }}</th>\n          <th bitCell>{{ \"total\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body let-rows$>\n        <tr bitRow *ngFor=\"let r of rows$ | async\">\n          <td bitCell>\n            <i class=\"bwi bwi-fw bwi-{{ r.icon }}\" aria-hidden=\"true\"></i>\n            {{ r.type | i18n }}\n          </td>\n          <td bitCell>{{ r.count }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </div>\n\n  <ng-container bitDialogFooter>\n    <button bitButton bitDialogClose buttonType=\"primary\" type=\"button\">\n      {{ \"ok\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { TableDataSource } from \"@bitwarden/components\";\nimport { ImportResult } from \"@bitwarden/importer\";\n\nexport interface ResultList {\n  icon: string;\n  type: string;\n  count: number;\n}\n\n@Component({\n  templateUrl: \"./import-success-dialog.component.html\",\n})\nexport class ImportSuccessDialogComponent implements OnInit {\n  protected dataSource = new TableDataSource<ResultList>();\n\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) public data: ImportResult) {}\n\n  ngOnInit(): void {\n    if (this.data != null) {\n      this.dataSource.data = this.buildResultList();\n    }\n  }\n\n  private buildResultList(): ResultList[] {\n    let logins = 0;\n    let cards = 0;\n    let identities = 0;\n    let secureNotes = 0;\n    this.data.ciphers.map((c) => {\n      switch (c.type) {\n        case CipherType.Login:\n          logins++;\n          break;\n        case CipherType.Card:\n          cards++;\n          break;\n        case CipherType.SecureNote:\n          secureNotes++;\n          break;\n        case CipherType.Identity:\n          identities++;\n          break;\n        default:\n          break;\n      }\n    });\n\n    const list: ResultList[] = [];\n    if (logins > 0) {\n      list.push({ icon: \"globe\", type: \"typeLogin\", count: logins });\n    }\n    if (cards > 0) {\n      list.push({ icon: \"credit-card\", type: \"typeCard\", count: cards });\n    }\n    if (identities > 0) {\n      list.push({ icon: \"id-card\", type: \"typeIdentity\", count: identities });\n    }\n    if (secureNotes > 0) {\n      list.push({ icon: \"sticky-note\", type: \"typeSecureNote\", count: secureNotes });\n    }\n    if (this.data.folders.length > 0) {\n      list.push({ icon: \"folder\", type: \"folders\", count: this.data.folders.length });\n    }\n    if (this.data.collections.length > 0) {\n      list.push({\n        icon: \"collection\",\n        type: \"collections\",\n        count: this.data.collections.length,\n      });\n    }\n    return list;\n  }\n}\n","import { Component } from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\n\nimport { ModalRef } from \"@bitwarden/angular/components/modal/modal.ref\";\n\n@Component({\n  templateUrl: \"file-password-prompt.component.html\",\n})\nexport class FilePasswordPromptComponent {\n  filePassword = new FormControl(\"\", Validators.required);\n\n  constructor(private modalRef: ModalRef) {}\n\n  submit() {\n    this.filePassword.markAsTouched();\n    if (!this.filePassword.valid) {\n      return;\n    }\n\n    this.modalRef.close(this.filePassword.value);\n  }\n\n  cancel() {\n    this.modalRef.close(null);\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable tailwindcss/no-custom-classname -->\n<div\n  class=\"modal fade\"\n  role=\"dialog\"\n  aria-modal=\"true\"\n  [attr.aria-labelledby]=\"'confirmVaultImport' | i18n\"\n>\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form #form (ngSubmit)=\"submit()\">\n      <div class=\"form-group modal-content\">\n        <h2 class=\"tw-my-6 tw-ml-3.5 tw-font-semibold\" id=\"confirmVaultImport\">\n          {{ \"confirmVaultImport\" | i18n | uppercase }}\n        </h2>\n        <div\n          class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-px-3.5 tw-pt-3.5\"\n        >\n          {{ \"confirmVaultImportDesc\" | i18n }}\n          <bit-form-field class=\"tw-pt-3.5\">\n            <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              name=\"filePassword\"\n              [formControl]=\"filePassword\"\n              appAutofocus\n              appInputVerbatim\n            />\n            <button type=\"button\" bitSuffix bitIconButton bitPasswordInputToggle></button>\n          </bit-form-field>\n        </div>\n        <div\n          class=\"tw-flex tw-w-full tw-flex-wrap tw-items-center tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-px-3.5 tw-pb-3.5 tw-pt-4\"\n        >\n          <button bitButton buttonType=\"primary\" class=\"tw-mr-2\" type=\"submit\" appBlurClick>\n            <span>{{ \"importData\" | i18n }}</span>\n          </button>\n          <button bitButton buttonType=\"secondary\" type=\"button\" (click)=\"cancel()\">\n            <span>{{ \"cancel\" | i18n }}</span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n","<div class=\"page-header\">\n  <h1>{{ \"importData\" | i18n }}</h1>\n</div>\n<app-callout type=\"info\" *ngIf=\"importBlockedByPolicy\">\n  {{ \"personalOwnershipPolicyInEffectImports\" | i18n }}\n</app-callout>\n<form #form (ngSubmit)=\"submit()\" ngNativeValidate>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"form-group\">\n        <label for=\"type\">1. {{ \"selectFormat\" | i18n }}</label>\n        <select\n          id=\"type\"\n          name=\"Format\"\n          [(ngModel)]=\"format\"\n          class=\"form-control\"\n          [disabled]=\"importBlockedByPolicy\"\n          required\n        >\n          <option *ngFor=\"let o of featuredImportOptions\" [ngValue]=\"o.id\">{{ o.name }}</option>\n          <ng-container *ngIf=\"importOptions && importOptions.length\">\n            <option value=\"-\" disabled></option>\n            <option *ngFor=\"let o of importOptions\" [ngValue]=\"o.id\">{{ o.name }}</option>\n          </ng-container>\n        </select>\n      </div>\n    </div>\n  </div>\n  <app-callout type=\"info\" title=\"{{ getFormatInstructionTitle() }}\" *ngIf=\"format\">\n    <ng-container *ngIf=\"format === 'bitwardencsv' || format === 'bitwardenjson'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/export-your-data/\">\n        https://bitwarden.com/help/export-your-data/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'lastpasscsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-lastpass/\">\n        https://bitwarden.com/help/import-from-lastpass/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepassxcsv'\">\n      Using the KeePassX desktop application, navigate to \"Database\" &rarr; \"Export to CSV file\" and\n      save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'aviracsv'\">\n      In the Avira web vault, go to \"Settings\" &rarr; \"My Data\" &rarr; \"Export data\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blurcsv'\">\n      In the Blur web vault, click your username at the top and go to \"Settings\" &rarr; \"Export\n      Data\", then click \"Export CSV\" for your \"Accounts\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safeincloudxml'\">\n      Using the SaveInCloud desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As XML\"\n      and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'padlockcsv'\">\n      Using the Padlock desktop application, click the hamburger icon in the top left corner and\n      navigate to \"Settings\" &rarr; \"Export\" button and save the file \"As CSV\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepass2xml'\">\n      Using the KeePass 2 desktop application, navigate to \"File\" &rarr; \"Export\" and select the\n      \"KeePass XML (2.x)\" option.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'upmcsv'\">\n      Using the Universal Password Manager desktop application, navigate to \"Database\" &rarr;\n      \"Export\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'saferpasscsv'\">\n      Using the SaferPass browser extension, click the hamburger icon in the top left corner and\n      navigate to \"Settings\". Click the \"Export accounts\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'meldiumcsv'\">\n      Using the Meldium web vault, navigate to \"Settings\". Locate the \"Export data\" function and\n      click \"Show me my data\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepercsv'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .csv File\" option. Click\n      \"Export\" to save the CSV file.\n    </ng-container>\n    <!--\n    <ng-container *ngIf=\"format === 'keeperjson'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .json File\" option. Click\n      \"Export\" to save the JSON file.\n    </ng-container>\n    -->\n    <ng-container\n      *ngIf=\"format === 'chromecsv' || format === 'operacsv' || format === 'vivaldicsv'\"\n    >\n      <span *ngIf=\"format !== 'chromecsv'\">\n        The process is exactly the same as importing from Google Chrome.\n      </span>\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-chrome/\">\n        https://bitwarden.com/help/import-from-chrome/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'firefoxcsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-firefox/\">\n        https://bitwarden.com/help/import-from-firefox/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safaricsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-safari/\">\n        https://bitwarden.com/help/import-from-safari/</a\n      >.\n    </ng-container>\n    <ng-container\n      *ngIf=\"\n        format === '1password1pux' ||\n        format === '1password1pif' ||\n        format === '1passwordwincsv' ||\n        format === '1passwordmaccsv'\n      \"\n    >\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-1password/\">\n        https://bitwarden.com/help/import-from-1password/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passworddragonxml'\">\n      Using the Password Dragon desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"To\n      XML\". In the dialog that pops up select \"All Rows\" and check all fields. Click the \"Export\"\n      button and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpasscsv'\">\n      Using the Enpass desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As CSV\".\n      Select \"OK\" to the warning alert and save the CSV file. Note that the importer only supports\n      files exported while Enpass is set to the English language, so adjust your settings\n      accordingly.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpassjson'\">\n      Using the Enpass 6 desktop application, click the menu button and navigate to \"File\" &rarr;\n      \"Export\". Select the \".json\" file format option and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'pwsafexml'\">\n      Using the Password Safe desktop application, navigate to \"File\" &rarr; \"Export To\" &rarr; \"XML\n      format...\" and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanecsv'\">\n      Log in to Dashlane, click on \"My Account\" &rarr; \"Settings\" &rarr; \"Export file\" and select\n      \"Export as a CSV file\". This will download a zip archive containing various CSV files. Unzip\n      the archive and import each CSV file individually.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanejson'\">\n      Dashlane no longer supports the JSON format. Only use this if you have an existing JSON for\n      import. Use the CSV importer when creating new exports.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'msecurecsv'\">\n      Using the mSecure desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"CSV File...\"\n      and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'stickypasswordxml'\">\n      Using the Sticky Password desktop application, navigate to \"Menu\" (top right) &rarr; \"Export\"\n      &rarr; \"Export all\". Select the unencrypted format XML option and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'truekeycsv'\">\n      Using the True Key desktop application, click the gear icon (top right) and then navigate to\n      \"App Settings\". Click the \"Export\" button, enter your password and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'clipperzhtml'\">\n      Log into the Clipperz web application (clipperz.is/app). Click the hamburger menu icon in the\n      top right to expand the navigation bar. Navigate to \"Data\" &rarr; \"Export\". Click the\n      \"download HTML+JSON\" button to save the HTML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'roboformcsv'\">\n      Using the RoboForm Editor desktop application, navigate to \"RoboForm\" (top left) &rarr;\n      \"Options\" &rarr; \"Account &amp; Data\" and click the \"Export\" button. Select all of your data,\n      change the \"Format\" to \"CSV file\" and then click the \"Export\" button to save the CSV file.\n      Note: RoboForm only allows you to export Logins. Other items will not be exported.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passboltcsv'\">\n      Log into the Passbolt web vault and navigate to the \"Passwords\" listing. Select all of the\n      passwords you would like to export and click the \"Export\" button at the top of the listing.\n      Choose the \"csv (lastpass)\" export format and click the \"Export\" button.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'ascendocsv'\">\n      Using the Ascendo DataVault desktop application, navigate to \"Tools\" &rarr; \"Export\". In the\n      dialog that pops up, select the \"All Items (DVX, CSV)\" option. Click the \"Ok\" button to save\n      the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordbossjson'\">\n      Using the Password Boss desktop application, navigate to \"File\" &rarr; \"Export data\" &rarr;\n      \"Password Boss JSON - not encrypted\" and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'zohovaultcsv'\">\n      Log into the Zoho web vault (vault.zoho.com). Navigate to \"Tools\" &rarr; \"Export Secrets\".\n      Select \"All Secrets\" and click the \"Zoho Vault Format CSV\" button. Highlight and copy the data\n      from the textarea. Open a text editor like Notepad and paste the data. Save the data from the\n      text editor as\n      <code>zoho_export.csv</code>.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'splashidcsv'\">\n      Using the SplashID Safe desktop application, click on the SplashID blue lock logo in the top\n      right corner. Navigate to \"Export\" &rarr; \"Export as CSV\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkeepcsv'\">\n      Using the PassKeep mobile app, navigate to \"Backup/Restore\". Locate the \"CSV Backup/Restore\"\n      section and click \"Backup to CSV\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'gnomejson'\">\n      Make sure you have python-keyring and python-gnomekeyring installed. Save the\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bit.ly/2GpOMTg\"\n        >GNOME Keyring Import/Export</a\n      >\n      python script to your desktop as <code>pw_helper.py</code>. Open terminal and run\n      <code>chmod +rx Desktop/pw_helper.py</code> and then\n      <code>python Desktop/pw_helper.py export Desktop/my_passwords.json</code>. Then upload the\n      resulting <code>my_passwords.json</code> file here to Bitwarden.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordagentcsv'\">\n      Using the Password Agent desktop application navigate to \"File\" &rarr; \"Export\", select the\n      \"Fields to export\" button and check all of the fields, change the \"Output format\" to \"CSV\",\n      and then click the \"Start\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passpackcsv'\">\n      Log into the Passpack website vault and navigate to \"Settings\" &rarr; \"Export\", then click the\n      \"Download\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passmanjson'\">\n      Open your Passman vault and click on \"Settings\" in the bottom left corner. In the \"Settings\"\n      window switch to the \"Export credentials\" tab and choose \"JSON\" as the export type. Enter your\n      vault's passphrase and click the \"Export\" button to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastcsv'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to CSV file\" option to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastjson'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to JSON file\" option to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'fsecurefsk'\">\n      Open the F-Secure KEY desktop application and navigate to \"Settings\" &rarr; \"Export\n      Passwords\". Select the \"Export\" button, enter your master password, and save the FSK file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'kasperskytxt'\">\n      Open the Kaspersky Password Manager desktop application and navigate to \"Settings\" &rarr;\n      \"Import/Export\". Locate the \"Export to text file\" section and select the \"Export\" button to\n      save the TXT file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'remembearcsv'\">\n      Open the RememBear desktop application and navigate to \"Settings\" &rarr; \"Account\" &rarr;\n      \"Export\". Enter your master password and select the \"Export Anyway\" button to save the CSV\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordwallettxt'\">\n      Open the PasswordWallet desktop application and navigate to \"File\" &rarr; \"Export\" &rarr;\n      \"Visible entries to text file\". Enter your password and select the \"Ok\" button to save the TXT\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'mykicsv'\">\n      Open the Myki desktop browser extension and navigate to \"Advanced\" &rarr; \"Export Accounts\"\n      and then scan the QR code with your mobile device. Various CSV files will then be saved to\n      your computer's downloads folder.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'securesafecsv'\">\n      Export your SecureSafe password safe to a CSV file with a comma delimiter.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'logmeoncecsv'\">\n      Open the LogMeOnce browser extension, then navigate to \"Open Menu\" &rarr; \"Export To\" and\n      select \"CSV File\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blackberrycsv'\">\n      Open the BlackBerry Password Keeper application, then navigate to \"Settings\" &rarr;\n      \"Import/Export\". Select \"Export Passwords\" and follow the instructions on screen to save the\n      unencrypted CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'buttercupcsv'\">\n      Open the Buttercup desktop application and unlock your vault. Right click on your vault's icon\n      and select \"Export\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'codebookcsv'\">\n      Open the Codebook desktop application and log in. Navigate to \"File\" &rarr; \"Export all\", then\n      click \"Yes\" on the dialog and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'encryptrcsv'\">\n      Open the newest version of the Encryptr desktop application and allow all of your data to\n      sync. Once syncing of your data is complete, the download icon in the top right corner will\n      turn pink. Click the download icon and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'yoticsv'\">\n      From the Yoti browser extension, click on \"Settings\", then \"Export Saved Logins\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'psonojson'\">\n      Log in to the Psono web vault, click on the \"Signed in as\"-dropdown, select \"Others\". Go to\n      the \"Export\"-tab and select the json type export and then click on Export.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkyjson'\">\n      Log in to \"https://vault.passky.org\" &rarr; \"Import & Export\" &rarr; \"Export\" in the Passky\n      section. (\"Backup\" is unsupported as it is encrypted).\n    </ng-container>\n  </app-callout>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"form-group\">\n        <label for=\"file\">2. {{ \"selectImportFile\" | i18n }}</label>\n        <br />\n        <div class=\"file-selector\">\n          <button\n            type=\"button\"\n            class=\"btn btn-outline-primary\"\n            (click)=\"fileSelector.click()\"\n            [disabled]=\"importBlockedByPolicy\"\n          >\n            {{ \"chooseFile\" | i18n }}\n          </button>\n          {{ this.fileSelected ? this.fileSelected.name : (\"noFileChosen\" | i18n) }}\n        </div>\n        <input\n          #fileSelector\n          type=\"file\"\n          id=\"file\"\n          class=\"form-control-file\"\n          name=\"file\"\n          (change)=\"setSelectedFile($event)\"\n          hidden\n          [disabled]=\"importBlockedByPolicy\"\n        />\n      </div>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"fileContents\">{{ \"orCopyPasteFileContents\" | i18n }}</label>\n    <textarea\n      id=\"fileContents\"\n      class=\"form-control\"\n      name=\"FileContents\"\n      [(ngModel)]=\"fileContents\"\n      [disabled]=\"importBlockedByPolicy\"\n    ></textarea>\n  </div>\n  <button\n    type=\"submit\"\n    class=\"btn btn-primary btn-submit\"\n    [disabled]=\"loading || importBlockedByPolicy\"\n    [ngClass]=\"{ manual: importBlockedByPolicy }\"\n  >\n    <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n    <span>{{ \"importData\" | i18n }}</span>\n  </button>\n</form>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport * as JSZip from \"jszip\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport Swal, { SweetAlertIcon } from \"sweetalert2\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport {\n  ImportOption,\n  ImportResult,\n  ImportServiceAbstraction,\n  ImportType,\n} from \"@bitwarden/importer\";\n\nimport { FilePasswordPromptComponent, ImportSuccessDialogComponent } from \"./dialog\";\n\n@Component({\n  selector: \"app-import\",\n  templateUrl: \"import.component.html\",\n})\nexport class ImportComponent implements OnInit, OnDestroy {\n  featuredImportOptions: ImportOption[];\n  importOptions: ImportOption[];\n  format: ImportType = null;\n  fileContents: string;\n  fileSelected: File;\n  loading = false;\n\n  protected organizationId: string = null;\n  protected destroy$ = new Subject<void>();\n\n  private _importBlockedByPolicy = false;\n\n  constructor(\n    protected i18nService: I18nService,\n    protected importService: ImportServiceAbstraction,\n    protected router: Router,\n    protected platformUtilsService: PlatformUtilsService,\n    protected policyService: PolicyService,\n    private logService: LogService,\n    protected modalService: ModalService,\n    protected syncService: SyncService,\n    protected dialogService: DialogServiceAbstraction\n  ) {}\n\n  protected get importBlockedByPolicy(): boolean {\n    return this._importBlockedByPolicy;\n  }\n\n  /**\n   * Callback that is called after a successful import.\n   */\n  protected async onSuccessfulImport(): Promise<void> {\n    await this.router.navigate([\"vault\"]);\n  }\n\n  ngOnInit() {\n    this.setImportOptions();\n\n    this.policyService\n      .policyAppliesToActiveUser$(PolicyType.PersonalOwnership)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((policyAppliesToActiveUser) => {\n        this._importBlockedByPolicy = policyAppliesToActiveUser;\n      });\n  }\n\n  async submit() {\n    if (this.importBlockedByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalOwnershipPolicyInEffectImports\")\n      );\n      return;\n    }\n\n    this.loading = true;\n\n    const promptForPassword_callback = async () => {\n      return await this.getFilePassword();\n    };\n\n    const importer = this.importService.getImporter(\n      this.format,\n      promptForPassword_callback,\n      this.organizationId\n    );\n    if (importer === null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFormat\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    const fileEl = document.getElementById(\"file\") as HTMLInputElement;\n    const files = fileEl.files;\n    if (\n      (files == null || files.length === 0) &&\n      (this.fileContents == null || this.fileContents === \"\")\n    ) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    let fileContents = this.fileContents;\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    try {\n      const result = await this.importService.import(importer, fileContents, this.organizationId);\n\n      //No errors, display success message\n      this.dialogService.open<unknown, ImportResult>(ImportSuccessDialogComponent, {\n        data: result,\n      });\n\n      this.syncService.fullSync(true);\n      await this.onSuccessfulImport();\n    } catch (e) {\n      this.error(e);\n      this.logService.error(e);\n    }\n\n    this.loading = false;\n  }\n\n  getFormatInstructionTitle() {\n    if (this.format == null) {\n      return null;\n    }\n\n    const results = this.featuredImportOptions\n      .concat(this.importOptions)\n      .filter((o) => o.id === this.format);\n    if (results.length > 0) {\n      return this.i18nService.t(\"instructionsFor\", results[0].name);\n    }\n    return null;\n  }\n\n  protected setImportOptions() {\n    this.featuredImportOptions = [\n      {\n        id: null,\n        name: \"-- \" + this.i18nService.t(\"select\") + \" --\",\n      },\n      ...this.importService.featuredImportOptions,\n    ];\n    this.importOptions = [...this.importService.regularImportOptions].sort((a, b) => {\n      if (a.name == null && b.name != null) {\n        return -1;\n      }\n      if (a.name != null && b.name == null) {\n        return 1;\n      }\n      if (a.name == null && b.name == null) {\n        return 0;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(a.name, b.name)\n        : a.name.localeCompare(b.name);\n    });\n  }\n\n  setSelectedFile(event: Event) {\n    const fileInputEl = <HTMLInputElement>event.target;\n    this.fileSelected = fileInputEl.files.length > 0 ? fileInputEl.files[0] : null;\n  }\n\n  private async error(error: Error) {\n    await Swal.fire({\n      heightAuto: false,\n      buttonsStyling: false,\n      icon: \"error\" as SweetAlertIcon,\n      iconHtml: `<i class=\"swal-custom-icon bwi bwi-error text-danger\"></i>`,\n      input: \"textarea\",\n      inputValue: error.message,\n      inputAttributes: {\n        readonly: \"true\",\n      },\n      titleText: this.i18nService.t(\"importError\"),\n      text: this.i18nService.t(\"importErrorDesc\"),\n      showConfirmButton: true,\n      confirmButtonText: this.i18nService.t(\"ok\"),\n      onOpen: (popupEl) => {\n        popupEl.querySelector(\".swal2-textarea\").scrollTo(0, 0);\n      },\n    });\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    if (this.format === \"1password1pux\") {\n      return this.extract1PuxContent(file);\n    }\n\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        if (this.format === \"lastpasscsv\" && file.type === \"text/html\") {\n          const parser = new DOMParser();\n          const doc = parser.parseFromString((evt.target as any).result, \"text/html\");\n          const pre = doc.querySelector(\"pre\");\n          if (pre != null) {\n            resolve(pre.textContent);\n            return;\n          }\n          reject();\n          return;\n        }\n\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private extract1PuxContent(file: File): Promise<string> {\n    return new JSZip()\n      .loadAsync(file)\n      .then((zip) => {\n        return zip.file(\"export.data\").async(\"string\");\n      })\n      .then(\n        function success(content) {\n          return content;\n        },\n        function error(e) {\n          return \"\";\n        }\n      );\n  }\n\n  async getFilePassword(): Promise<string> {\n    const ref = this.modalService.open(FilePasswordPromptComponent, {\n      allowMultipleModals: true,\n    });\n\n    if (ref == null) {\n      return null;\n    }\n\n    return await ref.onClosedPromise();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from \"@angular/core\";\n\n@Directive({\n  selector: \"[appBoxRow]\",\n})\nexport class BoxRowDirective implements OnInit {\n  el: HTMLElement = null;\n  formEls: Element[];\n\n  constructor(elRef: ElementRef) {\n    this.el = elRef.nativeElement;\n  }\n\n  ngOnInit(): void {\n    this.formEls = Array.from(\n      this.el.querySelectorAll('input:not([type=\"hidden\"]), select, textarea')\n    );\n    this.formEls.forEach((formEl) => {\n      formEl.addEventListener(\n        \"focus\",\n        () => {\n          this.el.classList.add(\"active\");\n        },\n        false\n      );\n\n      formEl.addEventListener(\n        \"blur\",\n        () => {\n          this.el.classList.remove(\"active\");\n        },\n        false\n      );\n    });\n  }\n\n  @HostListener(\"click\", [\"$event\"]) onClick(event: Event) {\n    const target = event.target as HTMLElement;\n    if (\n      target !== this.el &&\n      !target.classList.contains(\"progress\") &&\n      !target.classList.contains(\"progress-bar\")\n    ) {\n      return;\n    }\n\n    if (this.formEls.length > 0) {\n      const formEl = this.formEls[0] as HTMLElement;\n      if (formEl.tagName.toLowerCase() === \"input\") {\n        const inputEl = formEl as HTMLInputElement;\n        if (inputEl.type != null && inputEl.type.toLowerCase() === \"checkbox\") {\n          inputEl.click();\n          return;\n        }\n      }\n      formEl.focus();\n    }\n  }\n}\n","<ng-container *ngIf=\"show\">\n  <app-callout type=\"info\" title=\"{{ scopeConfig.title | i18n }}\">\n    {{ scopeConfig.description | i18n : scopeConfig.scopeIdentifier }}\n  </app-callout>\n</ng-container>\n","import { Component, Input, OnInit } from \"@angular/core\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\n\n@Component({\n  selector: \"app-export-scope-callout\",\n  templateUrl: \"export-scope-callout.component.html\",\n})\nexport class ExportScopeCalloutComponent implements OnInit {\n  @Input() organizationId: string = null;\n\n  show = false;\n  scopeConfig: {\n    title: string;\n    description: string;\n    scopeIdentifier: string;\n  };\n\n  constructor(\n    protected organizationService: OrganizationService,\n    protected stateService: StateService\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    if (!this.organizationService.hasOrganizations()) {\n      return;\n    }\n    this.scopeConfig =\n      this.organizationId != null\n        ? {\n            title: \"exportingOrganizationVaultTitle\",\n            description: \"exportingOrganizationVaultDescription\",\n            scopeIdentifier: this.organizationService.get(this.organizationId).name,\n          }\n        : {\n            title: \"exportingPersonalVaultTitle\",\n            description: \"exportingPersonalVaultDescription\",\n            scopeIdentifier: await this.stateService.getEmail(),\n          };\n    this.show = true;\n  }\n}\n","import { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nexport abstract class ImportApiServiceAbstraction {\n  postImportCiphers: (request: ImportCiphersRequest) => Promise<any>;\n  postImportOrganizationCiphers: (\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ) => Promise<any>;\n}\n","import { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nimport { ImportApiServiceAbstraction } from \"./import-api.service.abstraction\";\n\nexport class ImportApiService implements ImportApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  async postImportCiphers(request: ImportCiphersRequest): Promise<any> {\n    return await this.apiService.send(\"POST\", \"/ciphers/import\", request, true, false);\n  }\n\n  async postImportOrganizationCiphers(\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ): Promise<any> {\n    return await this.apiService.send(\n      \"POST\",\n      \"/ciphers/import-organization?organizationId=\" + organizationId,\n      request,\n      true,\n      false\n    );\n  }\n}\n","import { Importer } from \"../importers/importer\";\nimport { ImportOption, ImportType } from \"../models/import-options\";\nimport { ImportResult } from \"../models/import-result\";\n\nexport abstract class ImportServiceAbstraction {\n  featuredImportOptions: readonly ImportOption[];\n  regularImportOptions: readonly ImportOption[];\n  getImportOptions: () => ImportOption[];\n  import: (\n    importer: Importer,\n    fileContents: string,\n    organizationId?: string\n  ) => Promise<ImportResult>;\n  getImporter: (\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>,\n    organizationId: string\n  ) => Importer;\n}\n","import { Collection } from \"../domain/collection\";\nimport { CollectionRequest } from \"../request/collection.request\";\n\nexport class CollectionWithIdRequest extends CollectionRequest {\n  id: string;\n\n  constructor(collection?: Collection) {\n    if (collection == null) {\n      return;\n    }\n    super(collection);\n    this.id = collection.id;\n  }\n}\n","import { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { FolderWithIdRequest } from \"../../vault/models/request/folder-with-id.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  folders: FolderWithIdRequest[] = [];\n  folderRelationships: KvpRequest<number, number>[] = [];\n}\n","import { CollectionWithIdRequest } from \"../../admin-console/models/request/collection-with-id.request\";\nimport { CipherRequest } from \"../../vault/models/request/cipher.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportOrganizationCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  collections: CollectionWithIdRequest[] = [];\n  collectionRelationships: KvpRequest<number, number>[] = [];\n}\n","export class KvpRequest<TK, TV> {\n  key: TK;\n  value: TV;\n\n  constructor(key: TK, value: TV) {\n    this.key = key;\n    this.value = value;\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nexport class ImportResult {\n  success = false;\n  errorMessage: string;\n  ciphers: CipherView[] = [];\n  folders: FolderView[] = [];\n  folderRelationships: [number, number][] = [];\n  collections: CollectionView[] = [];\n  collectionRelationships: [number, number][] = [];\n}\n","import * as papa from \"papaparse\";\n\nimport { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\nimport { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { ConsoleLogService } from \"@bitwarden/common/platform/services/console-log.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { LoginUriView } from \"@bitwarden/common/vault/models/view/login-uri.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nexport abstract class BaseImporter {\n  organizationId: string = null;\n\n  protected logService: LogService = new ConsoleLogService(false);\n\n  protected newLineRegex = /(?:\\r\\n|\\r|\\n)/;\n\n  protected passwordFieldNames = [\n    \"password\",\n    \"pass word\",\n    \"passphrase\",\n    \"pass phrase\",\n    \"pass\",\n    \"code\",\n    \"code word\",\n    \"codeword\",\n    \"secret\",\n    \"secret word\",\n    \"personpwd\",\n    \"key\",\n    \"keyword\",\n    \"key word\",\n    \"keyphrase\",\n    \"key phrase\",\n    \"form_pw\",\n    \"wppassword\",\n    \"pin\",\n    \"pwd\",\n    \"pw\",\n    \"pword\",\n    \"passwd\",\n    \"p\",\n    \"serial\",\n    \"serial#\",\n    \"license key\",\n    \"reg #\",\n\n    // Non-English names\n    \"passwort\",\n  ];\n\n  protected usernameFieldNames = [\n    \"user\",\n    \"name\",\n    \"user name\",\n    \"username\",\n    \"login name\",\n    \"email\",\n    \"e-mail\",\n    \"id\",\n    \"userid\",\n    \"user id\",\n    \"login\",\n    \"form_loginname\",\n    \"wpname\",\n    \"mail\",\n    \"loginid\",\n    \"login id\",\n    \"log\",\n    \"personlogin\",\n    \"first name\",\n    \"last name\",\n    \"card#\",\n    \"account #\",\n    \"member\",\n    \"member #\",\n\n    // Non-English names\n    \"nom\",\n    \"benutzername\",\n  ];\n\n  protected notesFieldNames = [\n    \"note\",\n    \"notes\",\n    \"comment\",\n    \"comments\",\n    \"memo\",\n    \"description\",\n    \"free form\",\n    \"freeform\",\n    \"free text\",\n    \"freetext\",\n    \"free\",\n\n    // Non-English names\n    \"kommentar\",\n  ];\n\n  protected uriFieldNames: string[] = [\n    \"url\",\n    \"hyper link\",\n    \"hyperlink\",\n    \"link\",\n    \"host\",\n    \"hostname\",\n    \"host name\",\n    \"server\",\n    \"address\",\n    \"hyper ref\",\n    \"href\",\n    \"web\",\n    \"website\",\n    \"web site\",\n    \"site\",\n    \"web-site\",\n    \"uri\",\n\n    // Non-English names\n    \"ort\",\n    \"adresse\",\n  ];\n\n  protected parseCsvOptions = {\n    encoding: \"UTF-8\",\n    skipEmptyLines: false,\n  };\n\n  protected get organization() {\n    return this.organizationId != null;\n  }\n\n  protected parseXml(data: string): Document {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(data, \"application/xml\");\n    return doc != null && doc.querySelector(\"parsererror\") == null ? doc : null;\n  }\n\n  protected parseCsv(data: string, header: boolean, options: any = {}): any[] {\n    const parseOptions: papa.ParseConfig<string> = Object.assign(\n      { header: header },\n      this.parseCsvOptions,\n      options\n    );\n    data = this.splitNewLine(data).join(\"\\n\").trim();\n    const result = papa.parse(data, parseOptions);\n    if (result.errors != null && result.errors.length > 0) {\n      result.errors.forEach((e) => {\n        if (e.row != null) {\n          this.logService.warning(\"Error parsing row \" + e.row + \": \" + e.message);\n        }\n      });\n    }\n    return result.data && result.data.length > 0 ? result.data : null;\n  }\n\n  protected parseSingleRowCsv(rowData: string) {\n    if (this.isNullOrWhitespace(rowData)) {\n      return null;\n    }\n    const parsedRow = this.parseCsv(rowData, false);\n    if (parsedRow != null && parsedRow.length > 0 && parsedRow[0].length > 0) {\n      return parsedRow[0];\n    }\n    return null;\n  }\n\n  protected makeUriArray(uri: string | string[]): LoginUriView[] {\n    if (uri == null) {\n      return null;\n    }\n\n    if (typeof uri === \"string\") {\n      const loginUri = new LoginUriView();\n      loginUri.uri = this.fixUri(uri);\n      if (this.isNullOrWhitespace(loginUri.uri)) {\n        return null;\n      }\n      loginUri.match = null;\n      return [loginUri];\n    }\n\n    if (uri.length > 0) {\n      const returnArr: LoginUriView[] = [];\n      uri.forEach((u) => {\n        const loginUri = new LoginUriView();\n        loginUri.uri = this.fixUri(u);\n        if (this.isNullOrWhitespace(loginUri.uri)) {\n          return;\n        }\n        loginUri.match = null;\n        returnArr.push(loginUri);\n      });\n      return returnArr.length === 0 ? null : returnArr;\n    }\n\n    return null;\n  }\n\n  protected fixUri(uri: string) {\n    if (uri == null) {\n      return null;\n    }\n    uri = uri.trim();\n    if (uri.indexOf(\"://\") === -1 && uri.indexOf(\".\") >= 0) {\n      uri = \"http://\" + uri;\n    }\n    if (uri.length > 1000) {\n      return uri.substring(0, 1000);\n    }\n    return uri;\n  }\n\n  protected nameFromUrl(url: string) {\n    const hostname = Utils.getHostname(url);\n    if (this.isNullOrWhitespace(hostname)) {\n      return null;\n    }\n    return hostname.startsWith(\"www.\") ? hostname.replace(\"www.\", \"\") : hostname;\n  }\n\n  protected isNullOrWhitespace(str: string): boolean {\n    return Utils.isNullOrWhitespace(str);\n  }\n\n  protected getValueOrDefault(str: string, defaultValue: string = null): string {\n    if (this.isNullOrWhitespace(str)) {\n      return defaultValue;\n    }\n    return str;\n  }\n\n  protected splitNewLine(str: string): string[] {\n    return str.split(this.newLineRegex);\n  }\n\n  // ref https://stackoverflow.com/a/5911300\n  protected getCardBrand(cardNum: string) {\n    if (this.isNullOrWhitespace(cardNum)) {\n      return null;\n    }\n\n    // Visa\n    let re = new RegExp(\"^4\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    // Mastercard\n    // Updated for Mastercard 2017 BINs expansion\n    if (\n      /^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$/.test(\n        cardNum\n      )\n    ) {\n      return \"Mastercard\";\n    }\n\n    // AMEX\n    re = new RegExp(\"^3[47]\");\n    if (cardNum.match(re) != null) {\n      return \"Amex\";\n    }\n\n    // Discover\n    re = new RegExp(\n      \"^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)\"\n    );\n    if (cardNum.match(re) != null) {\n      return \"Discover\";\n    }\n\n    // Diners\n    re = new RegExp(\"^36\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // Diners - Carte Blanche\n    re = new RegExp(\"^30[0-5]\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // JCB\n    re = new RegExp(\"^35(2[89]|[3-8][0-9])\");\n    if (cardNum.match(re) != null) {\n      return \"JCB\";\n    }\n\n    // Visa Electron\n    re = new RegExp(\"^(4026|417500|4508|4844|491(3|7))\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    return null;\n  }\n\n  protected setCardExpiration(cipher: CipherView, expiration: string): boolean {\n    if (this.isNullOrWhitespace(expiration)) {\n      return false;\n    }\n\n    expiration = expiration.replace(/\\s/g, \"\");\n\n    const monthRegex = \"0?(?<month>[1-9]|1[0-2])\";\n    const yearRegex = \"(?<year>(?:[1-2][0-9])?[0-9]{2})\";\n    const expiryRegex = new RegExp(`^${monthRegex}/${yearRegex}$`);\n\n    const expiryMatch = expiration.match(expiryRegex);\n\n    if (!expiryMatch) {\n      return false;\n    }\n\n    cipher.card.expMonth = expiryMatch.groups.month;\n    const year: string = expiryMatch.groups.year;\n    cipher.card.expYear = year.length === 2 ? \"20\" + year : year;\n    return true;\n  }\n\n  protected moveFoldersToCollections(result: ImportResult) {\n    result.folderRelationships.forEach((r) => result.collectionRelationships.push(r));\n    result.collections = result.folders.map((f) => {\n      const collection = new CollectionView();\n      collection.name = f.name;\n      collection.id = f.id;\n      return collection;\n    });\n    result.folderRelationships = [];\n    result.folders = [];\n  }\n\n  protected querySelectorDirectChild(parentEl: Element, query: string) {\n    const els = this.querySelectorAllDirectChild(parentEl, query);\n    return els.length === 0 ? null : els[0];\n  }\n\n  protected querySelectorAllDirectChild(parentEl: Element, query: string) {\n    return Array.from(parentEl.querySelectorAll(query)).filter((el) => el.parentNode === parentEl);\n  }\n\n  protected initLoginCipher() {\n    const cipher = new CipherView();\n    cipher.favorite = false;\n    cipher.notes = \"\";\n    cipher.fields = [];\n    cipher.login = new LoginView();\n    cipher.type = CipherType.Login;\n    return cipher;\n  }\n\n  protected cleanupCipher(cipher: CipherView) {\n    if (cipher == null) {\n      return;\n    }\n    if (cipher.type !== CipherType.Login) {\n      cipher.login = null;\n    }\n    if (this.isNullOrWhitespace(cipher.name)) {\n      cipher.name = \"--\";\n    }\n    if (this.isNullOrWhitespace(cipher.notes)) {\n      cipher.notes = null;\n    } else {\n      cipher.notes = cipher.notes.trim();\n    }\n    if (cipher.fields != null && cipher.fields.length === 0) {\n      cipher.fields = null;\n    }\n  }\n\n  protected processKvp(\n    cipher: CipherView,\n    key: string,\n    value: string,\n    type: FieldType = FieldType.Text\n  ) {\n    if (this.isNullOrWhitespace(value)) {\n      return;\n    }\n    if (this.isNullOrWhitespace(key)) {\n      key = \"\";\n    }\n    if (value.length > 200 || value.trim().search(this.newLineRegex) > -1) {\n      if (cipher.notes == null) {\n        cipher.notes = \"\";\n      }\n      cipher.notes += key + \": \" + this.splitNewLine(value).join(\"\\n\") + \"\\n\";\n    } else {\n      if (cipher.fields == null) {\n        cipher.fields = [];\n      }\n      const field = new FieldView();\n      field.type = type;\n      field.name = key;\n      field.value = value;\n      cipher.fields.push(field);\n    }\n  }\n\n  protected processFolder(result: ImportResult, folderName: string) {\n    if (this.isNullOrWhitespace(folderName)) {\n      return;\n    }\n\n    let folderIndex = result.folders.length;\n    // Replace backslashes with forward slashes, ensuring we create sub-folders\n    folderName = folderName.replace(\"\\\\\", \"/\");\n    let addFolder = true;\n\n    for (let i = 0; i < result.folders.length; i++) {\n      if (result.folders[i].name === folderName) {\n        addFolder = false;\n        folderIndex = i;\n        break;\n      }\n    }\n\n    if (addFolder) {\n      const f = new FolderView();\n      f.name = folderName;\n      result.folders.push(f);\n    }\n\n    result.folderRelationships.push([result.ciphers.length, folderIndex]);\n  }\n\n  protected convertToNoteIfNeeded(cipher: CipherView) {\n    if (\n      cipher.type === CipherType.Login &&\n      this.isNullOrWhitespace(cipher.login.username) &&\n      this.isNullOrWhitespace(cipher.login.password) &&\n      (cipher.login.uris == null || cipher.login.uris.length === 0)\n    ) {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    }\n  }\n\n  protected processFullName(cipher: CipherView, fullName: string) {\n    if (this.isNullOrWhitespace(fullName)) {\n      return;\n    }\n\n    const nameParts = fullName.split(\" \");\n    if (nameParts.length > 0) {\n      cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n    }\n    if (nameParts.length === 2) {\n      cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n    } else if (nameParts.length >= 3) {\n      cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n      cipher.identity.lastName = nameParts.slice(2, nameParts.length).join(\" \");\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AscendoCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 2) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const val: string = value[i + 2];\n          const field: string = value[i + 1];\n          if (this.isNullOrWhitespace(val) || this.isNullOrWhitespace(field)) {\n            continue;\n          }\n\n          const fieldLower = field.toLowerCase();\n          if (cipher.login.password == null && this.passwordFieldNames.indexOf(fieldLower) > -1) {\n            cipher.login.password = this.getValueOrDefault(val);\n          } else if (\n            cipher.login.username == null &&\n            this.usernameFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.username = this.getValueOrDefault(val);\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n          } else {\n            this.processKvp(cipher, field, val);\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.login.uris = this.makeUriArray(value.web);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.username = this.getValueOrDefault(value.login);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.logins != null) {\n      results.logins.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.pwd);\n        cipher.login.username = this.getValueOrDefault(value.loginName);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.notes != null) {\n      results.notes.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.name = this.getValueOrDefault(value.label);\n        cipher.notes = this.getValueOrDefault(value.text);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.cards != null) {\n      results.cards.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Card;\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.card.cardholderName = this.getValueOrDefault(value.holderName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        if (value.expirationDate != null) {\n          if (value.expirationDate.month != null) {\n            cipher.card.expMonth = value.expirationDate.month + \"\";\n          }\n          if (value.expirationDate.year != null) {\n            cipher.card.expYear = value.expirationDate.year + \"\";\n          }\n        }\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AviraCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.name,\n        this.getValueOrDefault(this.nameFromUrl(value.website), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.website);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (\n        this.isNullOrWhitespace(value.username) &&\n        !this.isNullOrWhitespace(value.secondary_username)\n      ) {\n        cipher.login.username = value.secondary_username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.notes = this.getValueOrDefault(value.secondary_username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlackBerryCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.grouping === \"list\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.favorite = value.fav === \"1\";\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.extra);\n      if (value.grouping !== \"note\") {\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ChromeCsvImporter extends BaseImporter implements Importer {\n  private androidPatternRegex = new RegExp(\"^android:\\\\/\\\\/.*(?<=@)(.*)(?=\\\\/)\");\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      let name = value.name;\n      if (!name && this.androidPatternRegex.test(value.url)) {\n        name = value.url.match(this.androidPatternRegex)[1];\n      }\n      cipher.name = this.getValueOrDefault(name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\nimport { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.organization && !this.isNullOrWhitespace(value.collections)) {\n        const collections = (value.collections as string).split(\",\");\n        collections.forEach((col) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === col) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = col;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization) {\n        this.processFolder(result, value.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.favorite =\n        !this.organization && this.getValueOrDefault(value.favorite, \"0\") !== \"0\" ? true : false;\n      cipher.type = CipherType.Login;\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      try {\n        cipher.reprompt = parseInt(\n          this.getValueOrDefault(value.reprompt, CipherRepromptType.None.toString()),\n          10\n        );\n      } catch (e) {\n        // eslint-disable-next-line\n        console.error(\"Unable to parse reprompt value\", e);\n        cipher.reprompt = CipherRepromptType.None;\n      }\n\n      if (!this.isNullOrWhitespace(value.fields)) {\n        const fields = this.splitNewLine(value.fields);\n        for (let i = 0; i < fields.length; i++) {\n          if (this.isNullOrWhitespace(fields[i])) {\n            continue;\n          }\n\n          const delimPosition = fields[i].lastIndexOf(\": \");\n          if (delimPosition === -1) {\n            continue;\n          }\n\n          if (cipher.fields == null) {\n            cipher.fields = [];\n          }\n\n          const field = new FieldView();\n          field.name = fields[i].substr(0, delimPosition);\n          field.value = null;\n          field.type = FieldType.Text;\n          if (fields[i].length > delimPosition + 2) {\n            field.value = fields[i].substr(delimPosition + 2);\n          }\n          cipher.fields.push(field);\n        }\n      }\n\n      const valueType = value.type != null ? value.type.toLowerCase() : null;\n      switch (valueType) {\n        case \"note\":\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote = new SecureNoteView();\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default: {\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.totp = this.getValueOrDefault(value.login_totp || value.totp);\n          cipher.login.username = this.getValueOrDefault(value.login_username || value.username);\n          cipher.login.password = this.getValueOrDefault(value.login_password || value.password);\n          const uris = this.parseSingleRowCsv(value.login_uri || value.uri);\n          cipher.login.uris = this.makeUriArray(uris);\n          break;\n        }\n      }\n\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import {\n  CipherWithIdExport,\n  CollectionWithIdExport,\n  FolderWithIdExport,\n} from \"@bitwarden/common/models/export\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenJsonImporter extends BaseImporter implements Importer {\n  private results: any;\n  private result: ImportResult;\n\n  protected constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService\n  ) {\n    super();\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    this.results = JSON.parse(data);\n    if (this.results == null || this.results.items == null) {\n      this.result.success = false;\n      return this.result;\n    }\n\n    if (this.results.encrypted) {\n      await this.parseEncrypted();\n    } else {\n      this.parseDecrypted();\n    }\n\n    return this.result;\n  }\n\n  private async parseEncrypted() {\n    if (this.results.encKeyValidation_DO_NOT_EDIT != null) {\n      const orgKey = await this.cryptoService.getOrgKey(this.organizationId);\n      const encKeyValidation = new EncString(this.results.encKeyValidation_DO_NOT_EDIT);\n      const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n        encKeyValidation,\n        orgKey\n      );\n      if (encKeyValidationDecrypt === null) {\n        this.result.success = false;\n        this.result.errorMessage = this.i18nService.t(\"importEncKeyError\");\n        return;\n      }\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    if (this.organization && this.results.collections != null) {\n      for (const c of this.results.collections as CollectionWithIdExport[]) {\n        const collection = CollectionWithIdExport.toDomain(c);\n        if (collection != null) {\n          collection.organizationId = this.organizationId;\n          const view = await collection.decrypt();\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(view);\n        }\n      }\n    } else if (!this.organization && this.results.folders != null) {\n      for (const f of this.results.folders as FolderWithIdExport[]) {\n        const folder = FolderWithIdExport.toDomain(f);\n        if (folder != null) {\n          const view = await folder.decrypt();\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(view);\n        }\n      }\n    }\n\n    for (const c of this.results.items as CipherWithIdExport[]) {\n      const cipher = CipherWithIdExport.toDomain(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = this.organizationId;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      const view = await cipher.decrypt();\n      this.cleanupCipher(view);\n      this.result.ciphers.push(view);\n    }\n\n    this.result.success = true;\n  }\n\n  private parseDecrypted() {\n    const groupingsMap = new Map<string, number>();\n    if (this.organization && this.results.collections != null) {\n      this.results.collections.forEach((c: CollectionWithIdExport) => {\n        const collection = CollectionWithIdExport.toView(c);\n        if (collection != null) {\n          collection.organizationId = null;\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(collection);\n        }\n      });\n    } else if (!this.organization && this.results.folders != null) {\n      this.results.folders.forEach((f: FolderWithIdExport) => {\n        const folder = FolderWithIdExport.toView(f);\n        if (folder != null) {\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(folder);\n        }\n      });\n    }\n\n    this.results.items.forEach((c: CipherWithIdExport) => {\n      const cipher = CipherWithIdExport.toView(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = null;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n  }\n}\n","import { KdfConfig } from \"@bitwarden/common/auth/models/domain/kdf-config\";\nimport { KdfType } from \"@bitwarden/common/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { BitwardenPasswordProtectedFileFormat } from \"@bitwarden/exporter/vault-export/bitwarden-password-protected-types\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { Importer } from \"../importer\";\n\nimport { BitwardenJsonImporter } from \"./bitwarden-json-importer\";\nexport class BitwardenPasswordProtectedImporter extends BitwardenJsonImporter implements Importer {\n  private key: SymmetricCryptoKey;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    private promptForPassword_callback: () => Promise<string>\n  ) {\n    super(cryptoService, i18nService);\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const parsedData: BitwardenPasswordProtectedFileFormat = JSON.parse(data);\n\n    if (!parsedData) {\n      result.success = false;\n      return result;\n    }\n\n    // File is unencrypted\n    if (!parsedData?.encrypted) {\n      return await super.parse(data);\n    }\n\n    // File is account-encrypted\n    if (!parsedData?.passwordProtected) {\n      return await super.parse(data);\n    }\n\n    if (this.cannotParseFile(parsedData)) {\n      result.success = false;\n      return result;\n    }\n\n    // File is password-protected\n    const password = await this.promptForPassword_callback();\n    if (!(await this.checkPassword(parsedData, password))) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"invalidFilePassword\");\n      return result;\n    }\n\n    const encData = new EncString(parsedData.data);\n    const clearTextData = await this.cryptoService.decryptToUtf8(encData, this.key);\n    return await super.parse(clearTextData);\n  }\n\n  private async checkPassword(\n    jdoc: BitwardenPasswordProtectedFileFormat,\n    password: string\n  ): Promise<boolean> {\n    this.key = await this.cryptoService.makePinKey(\n      password,\n      jdoc.salt,\n      jdoc.kdfType,\n      new KdfConfig(jdoc.kdfIterations, jdoc.kdfMemory, jdoc.kdfParallelism)\n    );\n\n    const encKeyValidation = new EncString(jdoc.encKeyValidation_DO_NOT_EDIT);\n\n    const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n      encKeyValidation,\n      this.key\n    );\n    if (encKeyValidationDecrypt === null) {\n      return false;\n    }\n    return true;\n  }\n\n  private cannotParseFile(jdoc: BitwardenPasswordProtectedFileFormat): boolean {\n    return (\n      !jdoc ||\n      !jdoc.encrypted ||\n      !jdoc.passwordProtected ||\n      !jdoc.salt ||\n      !jdoc.kdfIterations ||\n      typeof jdoc.kdfIterations !== \"number\" ||\n      jdoc.kdfType == null ||\n      KdfType[jdoc.kdfType] == null ||\n      !jdoc.encKeyValidation_DO_NOT_EDIT ||\n      !jdoc.data\n    );\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlurCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.label === \"null\") {\n        value.label = null;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.label,\n        this.getValueOrDefault(this.nameFromUrl(value.domain), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.domain);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (this.isNullOrWhitespace(value.email) && !this.isNullOrWhitespace(value.username)) {\n        cipher.login.username = value.username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.email);\n        cipher.notes = this.getValueOrDefault(value.username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst OfficialProps = [\"!group_id\", \"!group_name\", \"title\", \"username\", \"password\", \"URL\", \"id\"];\n\nexport class ButtercupCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value[\"!group_name\"]));\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      let processingCustomFields = false;\n      for (const prop in value) {\n        // eslint-disable-next-line\n        if (value.hasOwnProperty(prop)) {\n          if (!processingCustomFields && OfficialProps.indexOf(prop) === -1) {\n            processingCustomFields = true;\n          }\n          if (processingCustomFields) {\n            this.processKvp(cipher, prop, value[prop]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ClipperzHtmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const textarea = doc.querySelector(\"textarea\");\n    if (textarea == null || this.isNullOrWhitespace(textarea.textContent)) {\n      result.errorMessage = \"Missing textarea.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const entries = JSON.parse(textarea.textContent);\n    entries.forEach((entry: any) => {\n      const cipher = this.initLoginCipher();\n      if (!this.isNullOrWhitespace(entry.label)) {\n        cipher.name = entry.label.split(\" \")[0];\n      }\n      if (entry.data != null && !this.isNullOrWhitespace(entry.data.notes)) {\n        cipher.notes = entry.data.notes.split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (entry.currentVersion != null && entry.currentVersion.fields != null) {\n        for (const property in entry.currentVersion.fields) {\n          // eslint-disable-next-line\n          if (!entry.currentVersion.fields.hasOwnProperty(property)) {\n            continue;\n          }\n\n          const field = entry.currentVersion.fields[property];\n          const actionType = field.actionType != null ? field.actionType.toLowerCase() : null;\n          switch (actionType) {\n            case \"password\":\n              cipher.login.password = this.getValueOrDefault(field.value);\n              break;\n            case \"email\":\n            case \"username\":\n            case \"user\":\n            case \"name\":\n              cipher.login.username = this.getValueOrDefault(field.value);\n              break;\n            case \"url\":\n              cipher.login.uris = this.makeUriArray(field.value);\n              break;\n            default: {\n              const labelLower = field.label != null ? field.label.toLowerCase() : null;\n              if (\n                cipher.login.password == null &&\n                this.passwordFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.password = this.getValueOrDefault(field.value);\n              } else if (\n                cipher.login.username == null &&\n                this.usernameFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.username = this.getValueOrDefault(field.value);\n              } else if (\n                (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n                this.uriFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.uris = this.makeUriArray(field.value);\n              } else {\n                this.processKvp(cipher, field.label, field.value);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class CodebookCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value.Category));\n\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite) === \"True\";\n      cipher.name = this.getValueOrDefault(value.Entry, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.login.username = this.getValueOrDefault(value.Username, value.Email);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.totp = this.getValueOrDefault(value.TOTP);\n      cipher.login.uris = this.makeUriArray(value.Website);\n\n      if (!this.isNullOrWhitespace(value.Username)) {\n        this.processKvp(cipher, \"Email\", value.Email);\n      }\n      this.processKvp(cipher, \"Phone\", value.Phone);\n      this.processKvp(cipher, \"PIN\", value.PIN);\n      this.processKvp(cipher, \"Account\", value.Account);\n      this.processKvp(cipher, \"Date\", value.Date);\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CredentialsRecord,\n  IdRecord,\n  PaymentsRecord,\n  PersonalInformationRecord,\n  SecureNoteRecord,\n} from \"./types/dashlane-csv-types\";\n\nconst _mappedCredentialsColumns = new Set([\n  \"title\",\n  \"note\",\n  \"username\",\n  \"password\",\n  \"url\",\n  \"otpSecret\",\n  \"category\",\n]);\n\nconst _mappedPersonalInfoAsIdentityColumns = new Set([\n  \"type\",\n  \"title\",\n  \"first_name\",\n  \"middle_name\",\n  \"last_name\",\n  \"login\",\n  \"email\",\n  \"phone_number\",\n  \"address\",\n  \"country\",\n  \"state\",\n  \"city\",\n  \"zip\",\n  // Skip item_name as we already have set a combined name\n  \"item_name\",\n]);\n\nconst _mappedSecureNoteColumns = new Set([\"title\", \"note\"]);\n\nexport class DashlaneCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results[0].type != null && results[0].title != null) {\n      const personalRecords = results as PersonalInformationRecord[];\n\n      // If personalRecords has only one \"name\" then create an Identity-Cipher\n      if (personalRecords.filter((x) => x.type === \"name\").length === 1) {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        results.forEach((row) => {\n          this.parsePersonalInformationRecordAsIdentity(cipher, row);\n        });\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n        result.success = true;\n        return Promise.resolve(result);\n      }\n    }\n\n    results.forEach((row) => {\n      const cipher = this.initLoginCipher();\n\n      const rowKeys = Object.keys(row);\n      if (rowKeys[0] === \"username\") {\n        this.processFolder(result, row.category);\n        this.parseCredentialsRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"account_name\") {\n        this.parsePaymentRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"number\") {\n        this.parseIdRecord(cipher, row);\n      }\n\n      if ((rowKeys[0] === \"type\") != null && rowKeys[1] === \"title\") {\n        this.parsePersonalInformationRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"title\" && rowKeys[1] === \"note\") {\n        this.parseSecureNoteRecords(cipher, row);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  parseCredentialsRecord(cipher: CipherView, row: CredentialsRecord) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    cipher.name = row.title;\n    cipher.notes = row.note;\n    cipher.login.username = row.username;\n    cipher.login.password = row.password;\n    cipher.login.totp = row.otpSecret;\n    cipher.login.uris = this.makeUriArray(row.url);\n\n    this.importUnmappedFields(cipher, row, _mappedCredentialsColumns);\n  }\n\n  parsePaymentRecord(cipher: CipherView, row: PaymentsRecord) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n\n    cipher.name = row.account_name;\n    let mappedValues: string[] = [];\n    switch (row.type) {\n      case \"credit_card\":\n        cipher.card.cardholderName = row.account_name;\n        cipher.card.number = row.cc_number;\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = row.code;\n        this.setCardExpiration(cipher, `${row.expiration_month}/${row.expiration_year}`);\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\n          \"account_name\",\n          \"account_holder\",\n          \"cc_number\",\n          \"code\",\n          \"expiration_month\",\n          \"expiration_year\",\n        ];\n        break;\n      case \"bank\":\n        cipher.card.cardholderName = row.account_holder;\n        cipher.card.number = row.account_number;\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\"account_name\", \"account_holder\", \"account_number\"];\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parseIdRecord(cipher: CipherView, row: IdRecord) {\n    cipher.type = CipherType.Identity;\n    cipher.identity = new IdentityView();\n\n    const mappedValues: string[] = [\"name\", \"number\"];\n    switch (row.type) {\n      case \"card\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        break;\n      case \"passport\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.passportNumber = row.number;\n        break;\n      case \"license\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        cipher.identity.state = row.state;\n\n        mappedValues.push(\"state\");\n        break;\n      case \"social_security\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.ssn = row.number;\n        break;\n      case \"tax_number\":\n        cipher.name = row.type;\n        cipher.identity.licenseNumber = row.number;\n        break;\n\n      default:\n        break;\n    }\n\n    // If you add more mapped fields please extend this\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parsePersonalInformationRecord(cipher: CipherView, row: PersonalInformationRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    if (row.type === \"name\") {\n      cipher.name = `${row.title} ${row.first_name} ${row.middle_name} ${row.last_name}`\n        .replace(\"  \", \" \")\n        .trim();\n    } else {\n      cipher.name = row.item_name;\n    }\n\n    const dataRow = row as any;\n    Object.keys(row).forEach((key) => {\n      this.processKvp(cipher, key, dataRow[key]);\n    });\n  }\n\n  parsePersonalInformationRecordAsIdentity(cipher: CipherView, row: PersonalInformationRecord) {\n    switch (row.type) {\n      case \"name\":\n        this.processFullName(cipher, `${row.first_name} ${row.middle_name} ${row.last_name}`);\n        cipher.identity.title = row.title;\n        cipher.name = cipher.identity.fullName;\n\n        cipher.identity.username = row.login;\n        break;\n      case \"email\":\n        cipher.identity.email = row.email;\n        break;\n      case \"number\":\n        cipher.identity.phone = row.phone_number;\n        break;\n      case \"address\":\n        cipher.identity.address1 = row.address;\n        cipher.identity.city = row.city;\n        cipher.identity.postalCode = row.zip;\n        cipher.identity.state = row.state;\n        cipher.identity.country = row.country;\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, _mappedPersonalInfoAsIdentityColumns);\n  }\n\n  parseSecureNoteRecords(cipher: CipherView, row: SecureNoteRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = row.title;\n    cipher.notes = row.note;\n\n    this.importUnmappedFields(cipher, row, _mappedSecureNoteColumns);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nconst HandledResults = new Set([\n  \"ADDRESS\",\n  \"AUTHENTIFIANT\",\n  \"BANKSTATEMENT\",\n  \"IDCARD\",\n  \"IDENTITY\",\n  \"PAYMENTMEANS_CREDITCARD\",\n  \"PAYMENTMEAN_PAYPAL\",\n  \"EMAIL\",\n]);\n\nexport class DashlaneJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    if (results.ADDRESS != null) {\n      this.processAddress(results.ADDRESS);\n    }\n    if (results.AUTHENTIFIANT != null) {\n      this.processAuth(results.AUTHENTIFIANT);\n    }\n    if (results.BANKSTATEMENT != null) {\n      this.processNote(results.BANKSTATEMENT, \"BankAccountName\");\n    }\n    if (results.IDCARD != null) {\n      this.processNote(results.IDCARD, \"Fullname\");\n    }\n    if (results.PAYMENTMEANS_CREDITCARD != null) {\n      this.processCard(results.PAYMENTMEANS_CREDITCARD);\n    }\n    if (results.IDENTITY != null) {\n      this.processIdentity(results.IDENTITY);\n    }\n\n    for (const key in results) {\n      // eslint-disable-next-line\n      if (results.hasOwnProperty(key) && !HandledResults.has(key)) {\n        this.processNote(results[key], null, \"Generic Note\");\n      }\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processAuth(results: any[]) {\n    results.forEach((credential: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(credential.title);\n\n      cipher.login.username = this.getValueOrDefault(\n        credential.login,\n        this.getValueOrDefault(credential.secondaryLogin)\n      );\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.domain);\n      cipher.notes += this.getValueOrDefault(credential.note, \"\");\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processIdentity(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.fullName, \"\");\n      const nameParts = cipher.name.split(\" \");\n      if (nameParts.length > 0) {\n        cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n      }\n      if (nameParts.length === 2) {\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n      } else if (nameParts.length === 3) {\n        cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[2]);\n      }\n      cipher.identity.username = this.getValueOrDefault(obj.pseudo);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processAddress(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.addressName);\n      cipher.identity.address1 = this.getValueOrDefault(obj.addressFull);\n      cipher.identity.city = this.getValueOrDefault(obj.city);\n      cipher.identity.state = this.getValueOrDefault(obj.state);\n      cipher.identity.postalCode = this.getValueOrDefault(obj.zipcode);\n      cipher.identity.country = this.getValueOrDefault(obj.country);\n      if (cipher.identity.country != null) {\n        cipher.identity.country = cipher.identity.country.toUpperCase();\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processCard(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.card = new CardView();\n      cipher.type = CipherType.Card;\n      cipher.name = this.getValueOrDefault(obj.bank);\n      cipher.card.number = this.getValueOrDefault(obj.cardNumber);\n      cipher.card.brand = this.getCardBrand(cipher.card.number);\n      cipher.card.cardholderName = this.getValueOrDefault(obj.owner);\n      if (!this.isNullOrWhitespace(cipher.card.brand)) {\n        if (this.isNullOrWhitespace(cipher.name)) {\n          cipher.name = cipher.card.brand;\n        } else {\n          cipher.name += \" - \" + cipher.card.brand;\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processNote(results: any[], nameProperty: string, name: string = null) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.secureNote = new SecureNoteView();\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote.type = SecureNoteType.Generic;\n      if (name != null) {\n        cipher.name = name;\n      } else {\n        cipher.name = this.getValueOrDefault(obj[nameProperty]);\n      }\n      for (const key in obj) {\n        // eslint-disable-next-line\n        if (obj.hasOwnProperty(key) && key !== nameProperty) {\n          this.processKvp(cipher, key, obj[key].toString());\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class EncryptrCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Label, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      const text = this.getValueOrDefault(value.Text);\n      if (!this.isNullOrWhitespace(text)) {\n        if (this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = text;\n        } else {\n          cipher.notes += \"\\n\\n\" + text;\n        }\n      }\n\n      const type = value[\"Entry Type\"];\n      if (type === \"Password\") {\n        cipher.login.username = this.getValueOrDefault(value.Username);\n        cipher.login.password = this.getValueOrDefault(value.Password);\n        cipher.login.uris = this.makeUriArray(value[\"Site URL\"]);\n      } else if (type === \"Credit Card\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value[\"Name on card\"]);\n        cipher.card.number = this.getValueOrDefault(value[\"Card Number\"]);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.CVV);\n        const expiry = this.getValueOrDefault(value.Expiry);\n        if (!this.isNullOrWhitespace(expiry)) {\n          const expParts = expiry.split(\"/\");\n          if (expParts.length > 1) {\n            cipher.card.expMonth = parseInt(expParts[0], null).toString();\n            cipher.card.expYear = (2000 + parseInt(expParts[1], null)).toString();\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class EnpassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let firstRow = true;\n    results.forEach((value) => {\n      if (value.length < 2 || (firstRow && (value[0] === \"Title\" || value[0] === \"title\"))) {\n        firstRow = false;\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (\n        value.length === 2 ||\n        (!this.containsField(value, \"username\") &&\n          !this.containsField(value, \"password\") &&\n          !this.containsField(value, \"email\") &&\n          !this.containsField(value, \"url\"))\n      ) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      }\n\n      if (\n        this.containsField(value, \"cardholder\") &&\n        this.containsField(value, \"number\") &&\n        this.containsField(value, \"expiry date\")\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      }\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const fieldValue: string = value[i + 2];\n          if (this.isNullOrWhitespace(fieldValue)) {\n            continue;\n          }\n\n          const fieldName: string = value[i + 1];\n          const fieldNameLower = fieldName.toLowerCase();\n\n          if (cipher.type === CipherType.Login) {\n            if (\n              fieldNameLower === \"url\" &&\n              (cipher.login.uris == null || cipher.login.uris.length === 0)\n            ) {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              continue;\n            } else if (\n              (fieldNameLower === \"username\" || fieldNameLower === \"email\") &&\n              this.isNullOrWhitespace(cipher.login.username)\n            ) {\n              cipher.login.username = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"password\" &&\n              this.isNullOrWhitespace(cipher.login.password)\n            ) {\n              cipher.login.password = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n              cipher.login.totp = fieldValue;\n              continue;\n            }\n          } else if (cipher.type === CipherType.Card) {\n            if (\n              fieldNameLower === \"cardholder\" &&\n              this.isNullOrWhitespace(cipher.card.cardholderName)\n            ) {\n              cipher.card.cardholderName = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"number\" && this.isNullOrWhitespace(cipher.card.number)) {\n              cipher.card.number = fieldValue;\n              cipher.card.brand = this.getCardBrand(fieldValue);\n              continue;\n            } else if (fieldNameLower === \"cvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n              cipher.card.code = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"expiry date\" &&\n              this.isNullOrWhitespace(cipher.card.expMonth) &&\n              this.isNullOrWhitespace(cipher.card.expYear)\n            ) {\n              if (this.setCardExpiration(cipher, fieldValue)) {\n                continue;\n              }\n            } else if (fieldNameLower === \"type\") {\n              // Skip since brand was determined from number above\n              continue;\n            }\n          }\n\n          this.processKvp(cipher, fieldName, fieldValue);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private containsField(fields: any[], name: string) {\n    if (fields == null || name == null) {\n      return false;\n    }\n    return (\n      fields.filter((f) => !this.isNullOrWhitespace(f) && f.toLowerCase() === name.toLowerCase())\n        .length > 0\n    );\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { EnpassJsonFile, EnpassFolder, EnpassField } from \"./types/enpass-json-type\";\n\ntype EnpassFolderTreeItem = EnpassFolder & { children: EnpassFolderTreeItem[] };\nconst androidUrlRegex = new RegExp(\"androidapp://.*==@\", \"g\");\n\nexport class EnpassJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: EnpassJsonFile = JSON.parse(data);\n    if (results == null || results.items == null || results.items.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    const foldersIndexMap = new Map<string, number>();\n    const folderTree = this.buildFolderTree(results.folders);\n    this.flattenFolderTree(null, folderTree, foldersMap);\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((item) => {\n      if (item.folders != null && item.folders.length > 0 && foldersIndexMap.has(item.folders[0])) {\n        result.folderRelationships.push([\n          result.ciphers.length,\n          foldersIndexMap.get(item.folders[0]),\n        ]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(item.title);\n      cipher.favorite = item.favorite > 0;\n\n      if (item.template_type != null && item.fields != null && item.fields.length > 0) {\n        if (\n          item.template_type.indexOf(\"login.\") === 0 ||\n          item.template_type.indexOf(\"password.\") === 0\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else if (item.template_type.indexOf(\"creditcard.\") === 0) {\n          this.processCard(cipher, item.fields);\n        } else if (\n          item.template_type.indexOf(\"identity.\") < 0 &&\n          item.fields.some((f) => f.type === \"password\" && !this.isNullOrWhitespace(f.value))\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else {\n          this.processNote(cipher, item.fields);\n        }\n      }\n\n      cipher.notes += \"\\n\" + this.getValueOrDefault(item.note, \"\");\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private processLogin(cipher: CipherView, fields: EnpassField[]) {\n    const urls: string[] = [];\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n\n      if (\n        (field.type === \"username\" || field.type === \"email\") &&\n        this.isNullOrWhitespace(cipher.login.username)\n      ) {\n        cipher.login.username = field.value;\n      } else if (field.type === \"password\" && this.isNullOrWhitespace(cipher.login.password)) {\n        cipher.login.password = field.value;\n      } else if (field.type === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n        cipher.login.totp = field.value;\n      } else if (field.type === \"url\") {\n        urls.push(field.value);\n      } else if (field.type === \".Android#\") {\n        let cleanedValue = field.value.startsWith(\"androidapp://\")\n          ? field.value\n          : \"androidapp://\" + field.value;\n        cleanedValue = cleanedValue.replace(\"android://\", \"\");\n        cleanedValue = cleanedValue.replace(androidUrlRegex, \"androidapp://\");\n        urls.push(cleanedValue);\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n    cipher.login.uris = this.makeUriArray(urls);\n  }\n\n  private processCard(cipher: CipherView, fields: EnpassField[]) {\n    cipher.card = new CardView();\n    cipher.type = CipherType.Card;\n    fields.forEach((field) => {\n      if (\n        this.isNullOrWhitespace(field.value) ||\n        field.type === \"section\" ||\n        field.type === \"ccType\"\n      ) {\n        return;\n      }\n\n      if (field.type === \"ccName\" && this.isNullOrWhitespace(cipher.card.cardholderName)) {\n        cipher.card.cardholderName = field.value;\n      } else if (field.type === \"ccNumber\" && this.isNullOrWhitespace(cipher.card.number)) {\n        cipher.card.number = field.value;\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n      } else if (field.type === \"ccCvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n        cipher.card.code = field.value;\n      } else if (field.type === \"ccExpiry\" && this.isNullOrWhitespace(cipher.card.expYear)) {\n        if (!this.setCardExpiration(cipher, field.value)) {\n          this.processKvp(\n            cipher,\n            field.label,\n            field.value,\n            field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n          );\n        }\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n  }\n\n  private processNote(cipher: CipherView, fields: EnpassField[]) {\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n      this.processKvp(\n        cipher,\n        field.label,\n        field.value,\n        field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n      );\n    });\n  }\n\n  private buildFolderTree(folders: EnpassFolder[]): EnpassFolderTreeItem[] {\n    if (folders == null) {\n      return [];\n    }\n    const folderTree: EnpassFolderTreeItem[] = [];\n    const map = new Map<string, EnpassFolderTreeItem>([]);\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      map.set(obj.uuid, obj);\n      obj.children = [];\n    });\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      if (obj.parent_uuid != null && obj.parent_uuid !== \"\" && map.has(obj.parent_uuid)) {\n        map.get(obj.parent_uuid).children.push(obj);\n      } else {\n        folderTree.push(obj);\n      }\n    });\n    return folderTree;\n  }\n\n  private flattenFolderTree(\n    titlePrefix: string,\n    tree: EnpassFolderTreeItem[],\n    map: Map<string, string>\n  ) {\n    if (tree == null) {\n      return;\n    }\n    tree.forEach((f) => {\n      if (f.title != null && f.title.trim() !== \"\") {\n        let title = f.title.trim();\n        if (titlePrefix != null && titlePrefix.trim() !== \"\") {\n          title = titlePrefix + \"/\" + title;\n        }\n        map.set(f.uuid, title);\n        if (f.children != null && f.children.length !== 0) {\n          this.flattenFolderTree(title, f.children, map);\n        }\n      }\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class FirefoxCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results\n      .filter((value) => {\n        return value.url !== \"chrome://FirefoxAccounts\";\n      })\n      .forEach((value) => {\n        const cipher = this.initLoginCipher();\n        const url = this.getValueOrDefault(value.url, this.getValueOrDefault(value.hostname));\n        cipher.name = this.getValueOrDefault(this.nameFromUrl(url), \"--\");\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.uris = this.makeUriArray(url);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export interface FskFile {\n  data: Data;\n}\n\nexport interface Data {\n  [key: string]: FskEntry;\n}\n\nexport enum FskEntryTypesEnum {\n  Login = 1,\n  CreditCard = 2,\n}\n\nexport interface FskEntry {\n  color: string;\n  creditCvv: string;\n  creditExpiry: string;\n  creditNumber: string;\n  favorite: number; // UNIX timestamp\n  notes: string;\n  password: string;\n  passwordList: PasswordList[];\n  passwordModifiedDate: number; // UNIX timestamp\n  rev: string | number;\n  service: string;\n  style: string;\n  type: FskEntryTypesEnum;\n  url: string;\n  username: string;\n  createdDate: number; // UNIX timestamp\n  modifiedDate: number; // UNIX timestamp\n}\n\nexport interface PasswordList {\n  changedate: string;\n  password: string;\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { FskEntry, FskEntryTypesEnum, FskFile } from \"./fsecure-fsk-types\";\n\nexport class FSecureFskImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: FskFile = JSON.parse(data);\n    if (results == null || results.data == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const key in results.data) {\n      // eslint-disable-next-line\n      if (!results.data.hasOwnProperty(key)) {\n        continue;\n      }\n\n      const value = results.data[key];\n      const cipher = this.parseEntry(value);\n      result.ciphers.push(cipher);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseEntry(entry: FskEntry): CipherView {\n    const cipher = this.initLoginCipher();\n    cipher.name = this.getValueOrDefault(entry.service);\n    cipher.notes = this.getValueOrDefault(entry.notes);\n    cipher.favorite = entry.favorite > 0;\n\n    switch (entry.type) {\n      case FskEntryTypesEnum.Login:\n        this.handleLoginEntry(entry, cipher);\n        break;\n      case FskEntryTypesEnum.CreditCard:\n        this.handleCreditCardEntry(entry, cipher);\n        break;\n      default:\n        return;\n        break;\n    }\n\n    this.convertToNoteIfNeeded(cipher);\n    this.cleanupCipher(cipher);\n    return cipher;\n  }\n\n  private handleLoginEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.login.username = this.getValueOrDefault(entry.username);\n    cipher.login.password = this.getValueOrDefault(entry.password);\n    cipher.login.uris = this.makeUriArray(entry.url);\n  }\n\n  private handleCreditCardEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n    cipher.card.cardholderName = this.getValueOrDefault(entry.username);\n    cipher.card.number = this.getValueOrDefault(entry.creditNumber);\n    cipher.card.brand = this.getCardBrand(cipher.card.number);\n    cipher.card.code = this.getValueOrDefault(entry.creditCvv);\n    if (!this.isNullOrWhitespace(entry.creditExpiry)) {\n      if (!this.setCardExpiration(cipher, entry.creditExpiry)) {\n        this.processKvp(cipher, \"Expiration\", entry.creditExpiry);\n      }\n    }\n    if (!this.isNullOrWhitespace(entry.password)) {\n      this.processKvp(cipher, \"PIN\", entry.password);\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class GnomeJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || Object.keys(results).length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const keyRing in results) {\n      if (\n        !results.hasOwnProperty(keyRing) || // eslint-disable-line\n        this.isNullOrWhitespace(keyRing) ||\n        results[keyRing].length === 0\n      ) {\n        continue;\n      }\n\n      results[keyRing].forEach((value: any) => {\n        if (\n          this.isNullOrWhitespace(value.display_name) ||\n          value.display_name.indexOf(\"http\") !== 0\n        ) {\n          return;\n        }\n\n        this.processFolder(result, keyRing);\n        const cipher = this.initLoginCipher();\n        cipher.name = value.display_name.replace(\"http://\", \"\").replace(\"https://\", \"\");\n        if (cipher.name.length > 30) {\n          cipher.name = cipher.name.substring(0, 30);\n        }\n        cipher.login.password = this.getValueOrDefault(value.secret);\n        cipher.login.uris = this.makeUriArray(value.display_name);\n\n        if (value.attributes != null) {\n          cipher.login.username =\n            value.attributes != null\n              ? this.getValueOrDefault(value.attributes.username_value)\n              : null;\n          for (const attr in value.attributes) {\n            if (\n              !value.attributes.hasOwnProperty(attr) || // eslint-disable-line\n              attr === \"username_value\" ||\n              attr === \"xdg:schema\"\n            ) {\n              continue;\n            }\n            this.processKvp(cipher, attr, value.attributes[attr]);\n          }\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst NotesHeader = \"Notes\\n\\n\";\nconst ApplicationsHeader = \"Applications\\n\\n\";\nconst WebsitesHeader = \"Websites\\n\\n\";\nconst Delimiter = \"\\n---\\n\";\n\nexport class KasperskyTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n\n    let notesData: string;\n    let applicationsData: string;\n    let websitesData: string;\n    let workingData = this.splitNewLine(data).join(\"\\n\");\n\n    if (workingData.indexOf(NotesHeader) !== -1) {\n      const parts = workingData.split(NotesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        notesData = parts[1];\n      }\n    }\n    if (workingData.indexOf(ApplicationsHeader) !== -1) {\n      const parts = workingData.split(ApplicationsHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        applicationsData = parts[1];\n      }\n    }\n    if (workingData.indexOf(WebsitesHeader) === 0) {\n      const parts = workingData.split(WebsitesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        websitesData = parts[1];\n      }\n    }\n\n    const notes = this.parseDataCategory(notesData);\n    const applications = this.parseDataCategory(applicationsData);\n    const websites = this.parseDataCategory(websitesData);\n\n    notes.forEach((n) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(n.get(\"Name\"));\n      cipher.notes = this.getValueOrDefault(n.get(\"Text\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    websites.concat(applications).forEach((w) => {\n      const cipher = this.initLoginCipher();\n      const nameKey = w.has(\"Website name\") ? \"Website name\" : \"Application\";\n      cipher.name = this.getValueOrDefault(w.get(nameKey), \"\");\n      if (!this.isNullOrWhitespace(w.get(\"Login name\"))) {\n        if (!this.isNullOrWhitespace(cipher.name)) {\n          cipher.name += \": \";\n        }\n        cipher.name += w.get(\"Login name\");\n      }\n      cipher.notes = this.getValueOrDefault(w.get(\"Comment\"));\n      if (w.has(\"Website URL\")) {\n        cipher.login.uris = this.makeUriArray(w.get(\"Website URL\"));\n      }\n      cipher.login.username = this.getValueOrDefault(w.get(\"Login\"));\n      cipher.login.password = this.getValueOrDefault(w.get(\"Password\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseDataCategory(data: string): Map<string, string>[] {\n    if (this.isNullOrWhitespace(data) || data.indexOf(Delimiter) === -1) {\n      return [];\n    }\n    const items: Map<string, string>[] = [];\n    data.split(Delimiter).forEach((p) => {\n      if (p.indexOf(\"\\n\") === -1) {\n        return;\n      }\n      const item = new Map<string, string>();\n      let itemComment: string;\n      let itemCommentKey: string;\n      p.split(\"\\n\").forEach((l) => {\n        if (itemComment != null) {\n          itemComment += \"\\n\" + l;\n          return;\n        }\n        const colonIndex = l.indexOf(\":\");\n        let key: string;\n        let val: string;\n        if (colonIndex === -1) {\n          return;\n        } else {\n          key = l.substring(0, colonIndex);\n          if (l.length > colonIndex + 1) {\n            val = l.substring(colonIndex + 2);\n          }\n        }\n        if (key != null) {\n          item.set(key, val);\n        }\n        if (key === \"Comment\" || key === \"Text\") {\n          itemComment = val;\n          itemCommentKey = key;\n        }\n      });\n      if (itemComment != null && itemCommentKey != null) {\n        item.set(itemCommentKey, itemComment);\n      }\n      if (item.size === 0) {\n        return;\n      }\n      items.push(item);\n    });\n    return items;\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePass2XmlImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    //Note: The doc.querySelector(\"KeePassFile > Root > Group\") no longers works on node and we have to breakdown the query by nodes\n    const KeePassFileNode = doc.querySelector(\"KeePassFile\");\n\n    if (KeePassFileNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const RootNode = KeePassFileNode.querySelector(\"Root\");\n    if (RootNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const rootGroup = RootNode.querySelector(\"Group\");\n    if (rootGroup == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root > Group` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    this.traverse(rootGroup, true, \"\");\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  traverse(node: Element, isRootNode: boolean, groupPrefixName: string) {\n    const folderIndex = this.result.folders.length;\n    let groupName = groupPrefixName;\n\n    if (!isRootNode) {\n      if (groupName !== \"\") {\n        groupName += \"/\";\n      }\n      const nameEl = this.querySelectorDirectChild(node, \"Name\");\n      groupName += nameEl == null ? \"-\" : nameEl.textContent;\n      const folder = new FolderView();\n      folder.name = groupName;\n      this.result.folders.push(folder);\n    }\n\n    this.querySelectorAllDirectChild(node, \"Entry\").forEach((entry) => {\n      const cipherIndex = this.result.ciphers.length;\n\n      const cipher = this.initLoginCipher();\n      this.querySelectorAllDirectChild(entry, \"String\").forEach((entryString) => {\n        const valueEl = this.querySelectorDirectChild(entryString, \"Value\");\n        const value = valueEl != null ? valueEl.textContent : null;\n        if (this.isNullOrWhitespace(value)) {\n          return;\n        }\n        const keyEl = this.querySelectorDirectChild(entryString, \"Key\");\n        const key = keyEl != null ? keyEl.textContent : null;\n\n        if (key === \"URL\") {\n          cipher.login.uris = this.makeUriArray(value);\n        } else if (key === \"UserName\") {\n          cipher.login.username = value;\n        } else if (key === \"Password\") {\n          cipher.login.password = value;\n        } else if (key === \"otp\") {\n          cipher.login.totp = value.replace(\"key=\", \"\");\n        } else if (key === \"Title\") {\n          cipher.name = value;\n        } else if (key === \"Notes\") {\n          cipher.notes += value + \"\\n\";\n        } else {\n          let type = FieldType.Text;\n          const attrs = valueEl.attributes as any;\n          if (\n            attrs.length > 0 &&\n            attrs.ProtectInMemory != null &&\n            attrs.ProtectInMemory.value === \"True\"\n          ) {\n            type = FieldType.Hidden;\n          }\n          this.processKvp(cipher, key, value, type);\n        }\n      });\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n\n      if (!isRootNode) {\n        this.result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    this.querySelectorAllDirectChild(node, \"Group\").forEach((group) => {\n      this.traverse(group, false, groupName);\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePassXCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(value.Title)) {\n        return;\n      }\n\n      value.Group =\n        !this.isNullOrWhitespace(value.Group) && value.Group.startsWith(\"Root/\")\n          ? value.Group.replace(\"Root/\", \"\")\n          : value.Group;\n      const groupName = !this.isNullOrWhitespace(value.Group) ? value.Group : null;\n      this.processFolder(result, groupName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class KeeperCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 6) {\n        return;\n      }\n\n      this.processFolder(result, value[0]);\n      const cipher = this.initLoginCipher();\n\n      const notes = this.getValueOrDefault(value[5]);\n      if (notes) {\n        cipher.notes = `${notes}\\n`;\n      }\n\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[4]);\n\n      if (value.length > 7) {\n        // we have some custom fields.\n        for (let i = 7; i < value.length; i = i + 2) {\n          if (value[i] == \"TFC:Keeper\") {\n            cipher.login.totp = value[i + 1];\n          } else {\n            this.processKvp(cipher, value[i], value[i + 1]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LastPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipherIndex = result.ciphers.length;\n      let folderIndex = result.folders.length;\n      let grouping = value.grouping;\n      if (grouping != null) {\n        // eslint-disable-next-line\n        grouping = grouping.replace(/\\\\/g, \"/\").replace(/[\\x00-\\x1F\\x7F-\\x9F]/g, \"\");\n      }\n      const hasFolder = this.getValueOrDefault(grouping, \"(none)\") !== \"(none)\";\n      let addFolder = hasFolder;\n\n      if (hasFolder) {\n        for (let i = 0; i < result.folders.length; i++) {\n          if (result.folders[i].name === grouping) {\n            addFolder = false;\n            folderIndex = i;\n            break;\n          }\n        }\n      }\n\n      const cipher = this.buildBaseCipher(value);\n      if (cipher.type === CipherType.Login) {\n        cipher.notes = this.getValueOrDefault(value.extra);\n        cipher.login = new LoginView();\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.totp);\n      } else if (cipher.type === CipherType.SecureNote) {\n        this.parseSecureNote(value, cipher);\n      } else if (cipher.type === CipherType.Card) {\n        cipher.card = this.parseCard(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n      } else if (cipher.type === CipherType.Identity) {\n        cipher.identity = this.parseIdentity(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n        if (!this.isNullOrWhitespace(value.ccnum)) {\n          // there is a card on this identity too\n          const cardCipher = this.buildBaseCipher(value);\n          cardCipher.identity = null;\n          cardCipher.type = CipherType.Card;\n          cardCipher.card = this.parseCard(value);\n          result.ciphers.push(cardCipher);\n        }\n      }\n\n      result.ciphers.push(cipher);\n\n      if (addFolder) {\n        const f = new FolderView();\n        f.name = grouping;\n        result.folders.push(f);\n      }\n      if (hasFolder) {\n        result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private buildBaseCipher(value: any) {\n    const cipher = new CipherView();\n    // eslint-disable-next-line\n    if (value.hasOwnProperty(\"profilename\") && value.hasOwnProperty(\"profilelanguage\")) {\n      // form fill\n      cipher.favorite = false;\n      cipher.name = this.getValueOrDefault(value.profilename, \"--\");\n      cipher.type = CipherType.Card;\n\n      if (\n        !this.isNullOrWhitespace(value.title) ||\n        !this.isNullOrWhitespace(value.firstname) ||\n        !this.isNullOrWhitespace(value.lastname) ||\n        !this.isNullOrWhitespace(value.address1) ||\n        !this.isNullOrWhitespace(value.phone) ||\n        !this.isNullOrWhitespace(value.username) ||\n        !this.isNullOrWhitespace(value.email)\n      ) {\n        cipher.type = CipherType.Identity;\n      }\n    } else {\n      // site or secure note\n      cipher.favorite = !this.organization && this.getValueOrDefault(value.fav, \"0\") === \"1\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.type = value.url === \"http://sn\" ? CipherType.SecureNote : CipherType.Login;\n    }\n    return cipher;\n  }\n\n  private parseCard(value: any): CardView {\n    const card = new CardView();\n    card.cardholderName = this.getValueOrDefault(value.ccname);\n    card.number = this.getValueOrDefault(value.ccnum);\n    card.code = this.getValueOrDefault(value.cccsc);\n    card.brand = this.getCardBrand(value.ccnum);\n\n    if (!this.isNullOrWhitespace(value.ccexp) && value.ccexp.indexOf(\"-\") > -1) {\n      const ccexpParts = (value.ccexp as string).split(\"-\");\n      if (ccexpParts.length > 1) {\n        card.expYear = ccexpParts[0];\n        card.expMonth = ccexpParts[1];\n        if (card.expMonth.length === 2 && card.expMonth[0] === \"0\") {\n          card.expMonth = card.expMonth[1];\n        }\n      }\n    }\n\n    return card;\n  }\n\n  private parseIdentity(value: any): IdentityView {\n    const identity = new IdentityView();\n    identity.title = this.getValueOrDefault(value.title);\n    identity.firstName = this.getValueOrDefault(value.firstname);\n    identity.middleName = this.getValueOrDefault(value.middlename);\n    identity.lastName = this.getValueOrDefault(value.lastname);\n    identity.username = this.getValueOrDefault(value.username);\n    identity.company = this.getValueOrDefault(value.company);\n    identity.ssn = this.getValueOrDefault(value.ssn);\n    identity.address1 = this.getValueOrDefault(value.address1);\n    identity.address2 = this.getValueOrDefault(value.address2);\n    identity.address3 = this.getValueOrDefault(value.address3);\n    identity.city = this.getValueOrDefault(value.city);\n    identity.state = this.getValueOrDefault(value.state);\n    identity.postalCode = this.getValueOrDefault(value.zip);\n    identity.country = this.getValueOrDefault(value.country);\n    identity.email = this.getValueOrDefault(value.email);\n    identity.phone = this.getValueOrDefault(value.phone);\n\n    if (!this.isNullOrWhitespace(identity.title)) {\n      identity.title = identity.title.charAt(0).toUpperCase() + identity.title.slice(1);\n    }\n\n    return identity;\n  }\n\n  private parseSecureNote(value: any, cipher: CipherView) {\n    const extraParts = this.splitNewLine(value.extra);\n    let processedNote = false;\n\n    if (extraParts.length) {\n      const typeParts = extraParts[0].split(\":\");\n      if (\n        typeParts.length > 1 &&\n        typeParts[0] === \"NoteType\" &&\n        (typeParts[1] === \"Credit Card\" || typeParts[1] === \"Address\")\n      ) {\n        if (typeParts[1] === \"Credit Card\") {\n          const mappedData = this.parseSecureNoteMapping<CardView>(cipher, extraParts, {\n            Number: \"number\",\n            \"Name on Card\": \"cardholderName\",\n            \"Security Code\": \"code\",\n            // LP provides date in a format like 'June,2020'\n            // Store in expMonth, then parse and modify\n            \"Expiration Date\": \"expMonth\",\n          });\n\n          if (this.isNullOrWhitespace(mappedData.expMonth) || mappedData.expMonth === \",\") {\n            // No expiration data\n            mappedData.expMonth = undefined;\n          } else {\n            const [monthString, year] = mappedData.expMonth.split(\",\");\n            // Parse month name into number\n            if (!this.isNullOrWhitespace(monthString)) {\n              const month = new Date(Date.parse(monthString.trim() + \" 1, 2012\")).getMonth() + 1;\n              if (isNaN(month)) {\n                mappedData.expMonth = undefined;\n              } else {\n                mappedData.expMonth = month.toString();\n              }\n            } else {\n              mappedData.expMonth = undefined;\n            }\n            if (!this.isNullOrWhitespace(year)) {\n              mappedData.expYear = year;\n            }\n          }\n\n          cipher.type = CipherType.Card;\n          cipher.card = mappedData;\n        } else if (typeParts[1] === \"Address\") {\n          const mappedData = this.parseSecureNoteMapping<IdentityView>(cipher, extraParts, {\n            Title: \"title\",\n            \"First Name\": \"firstName\",\n            \"Last Name\": \"lastName\",\n            \"Middle Name\": \"middleName\",\n            Company: \"company\",\n            \"Address 1\": \"address1\",\n            \"Address 2\": \"address2\",\n            \"Address 3\": \"address3\",\n            \"City / Town\": \"city\",\n            State: \"state\",\n            \"Zip / Postal Code\": \"postalCode\",\n            Country: \"country\",\n            \"Email Address\": \"email\",\n            Username: \"username\",\n          });\n          cipher.type = CipherType.Identity;\n          cipher.identity = mappedData;\n        }\n        processedNote = true;\n      }\n    }\n\n    if (!processedNote) {\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n      cipher.notes = this.getValueOrDefault(value.extra);\n    }\n  }\n\n  private parseSecureNoteMapping<T>(cipher: CipherView, extraParts: string[], map: any): T {\n    const dataObj: any = {};\n\n    let processingNotes = false;\n    extraParts.forEach((extraPart) => {\n      let key: string = null;\n      let val: string = null;\n      if (!processingNotes) {\n        if (this.isNullOrWhitespace(extraPart)) {\n          return;\n        }\n        const colonIndex = extraPart.indexOf(\":\");\n        if (colonIndex === -1) {\n          key = extraPart;\n        } else {\n          key = extraPart.substring(0, colonIndex);\n          if (extraPart.length > colonIndex) {\n            val = extraPart.substring(colonIndex + 1);\n          }\n        }\n        if (this.isNullOrWhitespace(key) || this.isNullOrWhitespace(val) || key === \"NoteType\") {\n          return;\n        }\n      }\n\n      if (processingNotes) {\n        cipher.notes += \"\\n\" + extraPart;\n      } else if (key === \"Notes\") {\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes += \"\\n\" + val;\n        } else {\n          cipher.notes = val;\n        }\n        processingNotes = true;\n        // eslint-disable-next-line\n      } else if (map.hasOwnProperty(key)) {\n        dataObj[map[key]] = val;\n      } else {\n        this.processKvp(cipher, key, val);\n      }\n    });\n\n    return dataObj;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LogMeOnceCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 4) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[1]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MeldiumCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.DisplayName, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.login.username = this.getValueOrDefault(value.UserName);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MSecureCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      const folderName =\n        this.getValueOrDefault(value[0], \"Unassigned\") !== \"Unassigned\" ? value[0] : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[2], \"--\");\n\n      if (value[1] === \"Web Logins\" || value[1] === \"Login\") {\n        cipher.login.uris = this.makeUriArray(value[4]);\n        cipher.login.username = this.getValueOrDefault(value[5]);\n        cipher.login.password = this.getValueOrDefault(value[6]);\n        cipher.notes = !this.isNullOrWhitespace(value[3]) ? value[3].split(\"\\\\n\").join(\"\\n\") : null;\n      } else if (value.length > 3) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        for (let i = 3; i < value.length; i++) {\n          if (!this.isNullOrWhitespace(value[i])) {\n            cipher.notes += value[i] + \"\\n\";\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(value[1]) && cipher.type !== CipherType.Login) {\n        cipher.name = value[1] + \": \" + cipher.name;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst mappedBaseColumns = [\"nickname\", \"additionalInfo\"];\nconst _mappedUserAccountColumns = new Set(\n  mappedBaseColumns.concat([\"url\", \"username\", \"password\", \"twofaSecret\"])\n);\nconst _mappedCreditCardColumns = new Set(\n  mappedBaseColumns.concat([\"cardNumber\", \"cardName\", \"exp_month\", \"exp_year\", \"cvv\"])\n);\n\nconst _mappedIdentityColumns = new Set(\n  mappedBaseColumns.concat([\n    \"title\",\n    \"firstName\",\n    \"middleName\",\n    \"lastName\",\n    \"email\",\n    \"firstAddressLine\",\n    \"secondAddressLine\",\n    \"city\",\n    \"country\",\n    \"zipCode\",\n  ])\n);\n\nconst _mappedIdCardColumns = new Set(mappedBaseColumns.concat([\"idName\", \"idNumber\", \"idCountry\"]));\n\nconst _mappedTwoFaColumns = new Set(mappedBaseColumns.concat([\"authToken\"]));\n\nconst _mappedUserNoteColumns = new Set(mappedBaseColumns.concat([\"content\"]));\n\nexport class MykiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.nickname, \"--\");\n      cipher.notes = this.getValueOrDefault(value.additionalInfo);\n\n      if (value.url !== undefined) {\n        // Accounts\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.twofaSecret);\n\n        this.importUnmappedFields(cipher, value, _mappedUserAccountColumns);\n      } else if (value.authToken !== undefined) {\n        // TwoFA\n        cipher.login.totp = this.getValueOrDefault(value.authToken);\n\n        this.importUnmappedFields(cipher, value, _mappedTwoFaColumns);\n      } else if (value.cardNumber !== undefined) {\n        // Cards\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.expMonth = this.getValueOrDefault(value.exp_month);\n        cipher.card.expYear = this.getValueOrDefault(value.exp_year);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n\n        this.importUnmappedFields(cipher, value, _mappedCreditCardColumns);\n      } else if (value.firstName !== undefined) {\n        // Identities\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        cipher.identity.title = this.getValueOrDefault(value.title);\n        cipher.identity.firstName = this.getValueOrDefault(value.firstName);\n        cipher.identity.middleName = this.getValueOrDefault(value.middleName);\n        cipher.identity.lastName = this.getValueOrDefault(value.lastName);\n        cipher.identity.phone = this.getValueOrDefault(value.number);\n        cipher.identity.email = this.getValueOrDefault(value.email);\n        cipher.identity.address1 = this.getValueOrDefault(value.firstAddressLine);\n        cipher.identity.address2 = this.getValueOrDefault(value.secondAddressLine);\n        cipher.identity.city = this.getValueOrDefault(value.city);\n        cipher.identity.country = this.getValueOrDefault(value.country);\n        cipher.identity.postalCode = this.getValueOrDefault(value.zipCode);\n\n        this.importUnmappedFields(cipher, value, _mappedIdentityColumns);\n      } else if (value.idType !== undefined) {\n        // IdCards\n\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        this.processFullName(cipher, value.idName);\n        cipher.identity.country = this.getValueOrDefault(value.idCountry);\n\n        switch (value.idType) {\n          // case \"Driver's License\":\n          // case \"ID Card\":\n          // case \"Outdoor License\":\n          // case \"Software License\":\n          // case \"Tax Number\":\n          // case \"Bank Account\":\n          // case \"Insurance Card\":\n          // case \"Health Card\":\n          // case \"Membership\":\n          // case \"Database\":\n          // case \"Reward Program\":\n          // case \"Tour Visa\":\n          case \"Passport\":\n            cipher.identity.passportNumber = value.idNumber;\n            break;\n          case \"Social Security\":\n            cipher.identity.ssn = value.idNumber;\n            break;\n          default:\n            cipher.identity.licenseNumber = value.idNumber;\n            break;\n        }\n\n        this.importUnmappedFields(cipher, value, _mappedIdCardColumns);\n      } else if (value.content !== undefined) {\n        // Notes\n        cipher.secureNote = new SecureNoteView();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.notes = this.getValueOrDefault(value.content);\n\n        this.importUnmappedFields(cipher, value, _mappedUserNoteColumns);\n      } else {\n        return;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\ntype nodePassCsvParsed = {\n  name: string;\n  url: string;\n  username: string;\n  password: string;\n  note: string;\n  cardholdername: string;\n  cardnumber: string;\n  cvc: string;\n  expirydate: string;\n  zipcode: string;\n  folder: string;\n  full_name: string;\n  phone_number: string;\n  email: string;\n  address1: string;\n  address2: string;\n  city: string;\n  country: string;\n  state: string;\n};\n\nexport class NordPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: nodePassCsvParsed[] = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((record) => {\n      const recordType = this.evaluateType(record);\n      if (recordType === undefined) {\n        return;\n      }\n\n      if (!this.organization) {\n        this.processFolder(result, record.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.name = this.getValueOrDefault(record.name, \"--\");\n      cipher.notes = this.getValueOrDefault(record.note);\n\n      switch (recordType) {\n        case CipherType.Login:\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.username = this.getValueOrDefault(record.username);\n          cipher.login.password = this.getValueOrDefault(record.password);\n          cipher.login.uris = this.makeUriArray(record.url);\n          break;\n        case CipherType.Card:\n          cipher.type = CipherType.Card;\n          cipher.card.cardholderName = this.getValueOrDefault(record.cardholdername);\n          cipher.card.number = this.getValueOrDefault(record.cardnumber);\n          cipher.card.code = this.getValueOrDefault(record.cvc);\n          cipher.card.brand = this.getCardBrand(cipher.card.number);\n          this.setCardExpiration(cipher, record.expirydate);\n          break;\n\n        case CipherType.Identity:\n          cipher.type = CipherType.Identity;\n\n          this.processFullName(cipher, this.getValueOrDefault(record.full_name));\n          cipher.identity.address1 = this.getValueOrDefault(record.address1);\n          cipher.identity.address2 = this.getValueOrDefault(record.address2);\n          cipher.identity.city = this.getValueOrDefault(record.city);\n          cipher.identity.state = this.getValueOrDefault(record.state);\n          cipher.identity.postalCode = this.getValueOrDefault(record.zipcode);\n          cipher.identity.country = this.getValueOrDefault(record.country);\n          if (cipher.identity.country != null) {\n            cipher.identity.country = cipher.identity.country.toUpperCase();\n          }\n          cipher.identity.email = this.getValueOrDefault(record.email);\n          cipher.identity.phone = this.getValueOrDefault(record.phone_number);\n          break;\n        case CipherType.SecureNote:\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default:\n          break;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private evaluateType(record: nodePassCsvParsed): CipherType {\n    if (!this.isNullOrWhitespace(record.username)) {\n      return CipherType.Login;\n    }\n\n    if (!this.isNullOrWhitespace(record.cardnumber)) {\n      return CipherType.Card;\n    }\n\n    if (!this.isNullOrWhitespace(record.full_name)) {\n      return CipherType.Identity;\n    }\n\n    if (!this.isNullOrWhitespace(record.note)) {\n      return CipherType.SecureNote;\n    }\n\n    return undefined;\n  }\n}\n","export interface ExportData {\n  accounts?: AccountsEntity[] | null;\n}\nexport interface AccountsEntity {\n  attrs: AccountAttributes;\n  vaults?: VaultsEntity[] | null;\n}\nexport interface AccountAttributes {\n  accountName: string;\n  name: string;\n  avatar: string;\n  email: string;\n  uuid: string;\n  domain: string;\n}\nexport interface VaultsEntity {\n  attrs: VaultAttributes;\n  items?: Item[] | null;\n}\nexport interface VaultAttributes {\n  uuid: string;\n  desc: string;\n  avatar: string;\n  name: string;\n  type: string;\n}\n\nexport enum CategoryEnum {\n  Login = \"001\",\n  CreditCard = \"002\",\n  SecureNote = \"003\",\n  Identity = \"004\",\n  Password = \"005\",\n  Document = \"006\",\n  SoftwareLicense = \"100\",\n  BankAccount = \"101\",\n  Database = \"102\",\n  DriversLicense = \"103\",\n  OutdoorLicense = \"104\",\n  Membership = \"105\",\n  Passport = \"106\",\n  RewardsProgram = \"107\",\n  SocialSecurityNumber = \"108\",\n  WirelessRouter = \"109\",\n  Server = \"110\",\n  EmailAccount = \"111\",\n  API_Credential = \"112\",\n  MedicalRecord = \"113\",\n}\n\nexport interface Item {\n  uuid: string;\n  favIndex: number;\n  createdAt: number;\n  updatedAt: number;\n  trashed?: boolean;\n  categoryUuid: string;\n  details: Details;\n  overview: Overview;\n}\nexport interface Details {\n  loginFields?: (LoginFieldsEntity | null)[] | null;\n  notesPlain?: string | null;\n  sections?: (SectionsEntity | null)[] | null;\n  passwordHistory?: (PasswordHistoryEntity | null)[] | null;\n  documentAttributes?: DocumentAttributes | null;\n  password?: string | null;\n}\n\nexport enum LoginFieldTypeEnum {\n  TextOrHtml = \"T\",\n  EmailAddress = \"E\",\n  URL = \"U\",\n  Number = \"N\",\n  Password = \"P\",\n  TextArea = \"A\",\n  PhoneNumber = \"T\",\n  CheckBox = \"C\",\n}\nexport interface LoginFieldsEntity {\n  value: string;\n  id: string;\n  name: string;\n  fieldType: LoginFieldTypeEnum | string;\n  designation?: string | null;\n}\nexport interface SectionsEntity {\n  title: string;\n  name?: string | null;\n  fields?: FieldsEntity[] | null;\n}\nexport interface FieldsEntity {\n  title: string;\n  id: string;\n  value: Value;\n  indexAtSource: number;\n  guarded: boolean;\n  multiline: boolean;\n  dontGenerate: boolean;\n  placeholder?: string;\n  inputTraits: InputTraits;\n  clipboardFilter?: string | null;\n}\nexport interface Value {\n  totp?: string | null;\n  date?: number | null;\n  string?: string | null;\n  concealed?: string | null;\n  email?: Email | null;\n  phone?: string | null;\n  menu?: string | null;\n  gender?: string | null;\n  monthYear?: number | null;\n  url?: string | null;\n  address?: Address | null;\n  creditCardType?: string | null;\n  creditCardNumber?: string | null;\n  reference?: string | null;\n}\n\nexport interface Email {\n  email_address: string;\n  provider: string;\n}\n\nexport interface Address {\n  street: string;\n  city: string;\n  country: string;\n  zip: string;\n  state: string;\n}\nexport interface InputTraits {\n  keyboard: string;\n  correction: string;\n  capitalization: string;\n}\nexport interface PasswordHistoryEntity {\n  value: string;\n  time: number;\n}\nexport interface DocumentAttributes {\n  fileName: string;\n  documentId: string;\n  decryptedSize: number;\n}\nexport interface Overview {\n  subtitle: string;\n  title: string;\n  url: string;\n  urls?: UrlsEntity[] | null;\n  ps?: number | null;\n  pbe?: number | null;\n  pgrng?: boolean | null;\n  tags?: string[] | null;\n}\nexport interface UrlsEntity {\n  label: string;\n  url: string;\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class OnePassword1PifImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    data.split(this.newLineRegex).forEach((line) => {\n      if (this.isNullOrWhitespace(line) || line[0] !== \"{\") {\n        return;\n      }\n      const item = JSON.parse(line);\n      if (item.trashed === true) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n\n      if (this.isNullOrWhitespace(item.hmac)) {\n        this.processStandardItem(item, cipher);\n      } else {\n        this.processWinOpVaultItem(item, cipher);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processWinOpVaultItem(item: any, cipher: CipherView) {\n    if (item.overview != null) {\n      cipher.name = this.getValueOrDefault(item.overview.title);\n      if (item.overview.URLs != null) {\n        const urls: string[] = [];\n        item.overview.URLs.forEach((url: any) => {\n          if (!this.isNullOrWhitespace(url.u)) {\n            urls.push(url.u);\n          }\n        });\n        cipher.login.uris = this.makeUriArray(urls);\n      }\n    }\n\n    if (item.details != null) {\n      if (item.details.passwordHistory != null) {\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n      }\n      if (\n        !this.isNullOrWhitespace(item.details.ccnum) ||\n        !this.isNullOrWhitespace(item.details.cvv)\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      } else if (\n        !this.isNullOrWhitespace(item.details.firstname) ||\n        !this.isNullOrWhitespace(item.details.address1)\n      ) {\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n      }\n      if (cipher.type === CipherType.Login && !this.isNullOrWhitespace(item.details.password)) {\n        cipher.login.password = item.details.password;\n      }\n      if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n        cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (item.details.fields != null) {\n        this.parseFields(item.details.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.details.sections != null) {\n        item.details.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private processStandardItem(item: any, cipher: CipherView) {\n    cipher.favorite = item.openContents && item.openContents.faveIndex ? true : false;\n    cipher.name = this.getValueOrDefault(item.title);\n\n    if (item.typeName === \"securenotes.SecureNote\") {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    } else if (item.typeName === \"wallet.financial.CreditCard\") {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    } else if (item.typeName === \"identities.Identity\") {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    } else {\n      cipher.login.uris = this.makeUriArray(item.location);\n    }\n\n    if (item.secureContents != null) {\n      if (item.secureContents.passwordHistory != null) {\n        this.parsePasswordHistory(item.secureContents.passwordHistory, cipher);\n      }\n      if (!this.isNullOrWhitespace(item.secureContents.notesPlain)) {\n        cipher.notes = item.secureContents.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (cipher.type === CipherType.Login) {\n        if (!this.isNullOrWhitespace(item.secureContents.password)) {\n          cipher.login.password = item.secureContents.password;\n        }\n        if (item.secureContents.URLs != null) {\n          const urls: string[] = [];\n          item.secureContents.URLs.forEach((u: any) => {\n            if (!this.isNullOrWhitespace(u.url)) {\n              urls.push(u.url);\n            }\n          });\n          if (urls.length > 0) {\n            cipher.login.uris = this.makeUriArray(urls);\n          }\n        }\n      }\n      if (item.secureContents.fields != null) {\n        this.parseFields(item.secureContents.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.secureContents.sections != null) {\n        item.secureContents.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private parsePasswordHistory(items: any[], cipher: CipherView) {\n    const maxSize = items.length > 5 ? 5 : items.length;\n    cipher.passwordHistory = items\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n\n  private parseFields(\n    fields: any[],\n    cipher: CipherView,\n    designationKey: string,\n    valueKey: string,\n    nameKey: string\n  ) {\n    fields.forEach((field: any) => {\n      if (field[valueKey] == null || field[valueKey].toString().trim() === \"\") {\n        return;\n      }\n\n      // TODO: when date FieldType exists, store this as a date field type instead of formatted Text if k is 'date'\n      const fieldValue =\n        field.k === \"date\"\n          ? new Date(field[valueKey] * 1000).toUTCString()\n          : field[valueKey].toString();\n      const fieldDesignation =\n        field[designationKey] != null ? field[designationKey].toString() : null;\n\n      if (cipher.type === CipherType.Login) {\n        if (this.isNullOrWhitespace(cipher.login.username) && fieldDesignation === \"username\") {\n          cipher.login.username = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.password) &&\n          fieldDesignation === \"password\"\n        ) {\n          cipher.login.password = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.totp) &&\n          fieldDesignation != null &&\n          fieldDesignation.startsWith(\"TOTP_\")\n        ) {\n          cipher.login.totp = fieldValue;\n          return;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.isNullOrWhitespace(cipher.card.number) && fieldDesignation === \"ccnum\") {\n          cipher.card.number = fieldValue;\n          cipher.card.brand = this.getCardBrand(fieldValue);\n          return;\n        } else if (this.isNullOrWhitespace(cipher.card.code) && fieldDesignation === \"cvv\") {\n          cipher.card.code = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.cardholderName) &&\n          fieldDesignation === \"cardholder\"\n        ) {\n          cipher.card.cardholderName = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.expiration) &&\n          fieldDesignation === \"expiry\" &&\n          fieldValue.length === 6\n        ) {\n          cipher.card.expMonth = (fieldValue as string).substr(4, 2);\n          if (cipher.card.expMonth[0] === \"0\") {\n            cipher.card.expMonth = cipher.card.expMonth.substr(1, 1);\n          }\n          cipher.card.expYear = (fieldValue as string).substr(0, 4);\n          return;\n        } else if (fieldDesignation === \"type\") {\n          // Skip since brand was determined from number above\n          return;\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        const identity = cipher.identity;\n        if (this.isNullOrWhitespace(identity.firstName) && fieldDesignation === \"firstname\") {\n          identity.firstName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.lastName) && fieldDesignation === \"lastname\") {\n          identity.lastName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.middleName) && fieldDesignation === \"initial\") {\n          identity.middleName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.phone) && fieldDesignation === \"defphone\") {\n          identity.phone = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.company) && fieldDesignation === \"company\") {\n          identity.company = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.email) && fieldDesignation === \"email\") {\n          identity.email = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.username) && fieldDesignation === \"username\") {\n          identity.username = fieldValue;\n          return;\n        } else if (fieldDesignation === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip } = field[valueKey];\n          identity.address1 = this.getValueOrDefault(street);\n          identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            identity.country = country.toUpperCase();\n          }\n          identity.postalCode = this.getValueOrDefault(zip);\n          return;\n        }\n      }\n\n      const fieldName = this.isNullOrWhitespace(field[nameKey]) ? \"no_name\" : field[nameKey];\n      if (\n        fieldName === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      const fieldType = field.k === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CategoryEnum,\n  Details,\n  ExportData,\n  FieldsEntity,\n  Item,\n  LoginFieldTypeEnum,\n  Overview,\n  PasswordHistoryEntity,\n  SectionsEntity,\n  UrlsEntity,\n  Value,\n  VaultsEntity,\n} from \"./types/onepassword-1pux-importer-types\";\n\nexport class OnePassword1PuxImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const exportData: ExportData = JSON.parse(data);\n\n    const account = exportData.accounts[0];\n    // TODO Add handling of multiple vaults\n    // const personalVaults = account.vaults[0].filter((v) => v.attrs.type === VaultAttributeTypeEnum.Personal);\n    account.vaults.forEach((vault: VaultsEntity) => {\n      vault.items.forEach((item: Item) => {\n        if (item.trashed === true) {\n          return;\n        }\n\n        const cipher = this.initLoginCipher();\n\n        const category = item.categoryUuid as CategoryEnum;\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.Password:\n          case CategoryEnum.WirelessRouter:\n          case CategoryEnum.Server:\n          case CategoryEnum.API_Credential:\n            cipher.type = CipherType.Login;\n            cipher.login = new LoginView();\n            break;\n          case CategoryEnum.CreditCard:\n          case CategoryEnum.BankAccount:\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            break;\n          case CategoryEnum.SecureNote:\n          case CategoryEnum.SoftwareLicense:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.MedicalRecord:\n            // case CategoryEnum.Document:\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case CategoryEnum.Identity:\n          case CategoryEnum.DriversLicense:\n          case CategoryEnum.OutdoorLicense:\n          case CategoryEnum.Membership:\n          case CategoryEnum.Passport:\n          case CategoryEnum.RewardsProgram:\n          case CategoryEnum.SocialSecurityNumber:\n            cipher.type = CipherType.Identity;\n            cipher.identity = new IdentityView();\n            break;\n          default:\n            break;\n        }\n\n        cipher.favorite = item.favIndex === 1 ? true : false;\n\n        this.processOverview(item.overview, cipher);\n\n        this.processLoginFields(item, cipher);\n\n        this.processDetails(category, item.details, cipher);\n\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n\n        this.processSections(category, item.details.sections, cipher);\n\n        if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n          cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        this.result.ciphers.push(cipher);\n      });\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processOverview(overview: Overview, cipher: CipherView) {\n    if (overview == null) {\n      return;\n    }\n\n    cipher.name = this.getValueOrDefault(overview.title);\n\n    if (overview.urls != null) {\n      const urls: string[] = [];\n      overview.urls.forEach((url: UrlsEntity) => {\n        if (!this.isNullOrWhitespace(url.url)) {\n          urls.push(url.url);\n        }\n      });\n      cipher.login.uris = this.makeUriArray(urls);\n    }\n\n    if (overview.tags != null && overview.tags.length > 0) {\n      const folderName = this.capitalize(overview.tags[0]);\n      this.processFolder(this.result, folderName);\n    }\n  }\n\n  private capitalize(inputString: string): string {\n    return inputString.trim().replace(/\\w\\S*/g, (w) => w.replace(/^\\w/, (c) => c.toUpperCase()));\n  }\n\n  private processLoginFields(item: Item, cipher: CipherView) {\n    if (item.details == null) {\n      return;\n    }\n\n    if (item.details.loginFields == null || item.details.loginFields.length === 0) {\n      return;\n    }\n\n    item.details.loginFields.forEach((loginField) => {\n      if (loginField.designation === \"username\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.username = loginField.value;\n        return;\n      }\n\n      if (loginField.designation === \"password\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.password = loginField.value;\n        return;\n      }\n\n      let fieldValue = loginField.value;\n      let fieldType: FieldType = FieldType.Text;\n      switch (loginField.fieldType) {\n        case LoginFieldTypeEnum.Password:\n          fieldType = FieldType.Hidden;\n          break;\n        case LoginFieldTypeEnum.CheckBox:\n          fieldValue = loginField.value !== \"\" ? \"true\" : \"false\";\n          fieldType = FieldType.Boolean;\n          break;\n        default:\n          break;\n      }\n      this.processKvp(cipher, loginField.name, fieldValue, fieldType);\n    });\n  }\n\n  private processDetails(category: CategoryEnum, details: Details, cipher: CipherView) {\n    if (category !== CategoryEnum.Password) {\n      return;\n    }\n\n    if (details == null) {\n      return;\n    }\n    cipher.login.password = details.password;\n  }\n\n  private processSections(category: CategoryEnum, sections: SectionsEntity[], cipher: CipherView) {\n    if (sections == null || sections.length === 0) {\n      return;\n    }\n\n    sections.forEach((section: SectionsEntity) => {\n      if (section.fields == null) {\n        return;\n      }\n\n      this.parseSectionFields(category, section.fields, cipher);\n    });\n  }\n\n  private parseSectionFields(category: CategoryEnum, fields: FieldsEntity[], cipher: CipherView) {\n    fields.forEach((field: FieldsEntity) => {\n      const valueKey = Object.keys(field.value)[0];\n      const anyField = field as any;\n\n      if (\n        anyField.value == null ||\n        anyField.value[valueKey] == null ||\n        anyField.value[valueKey] === \"\"\n      ) {\n        return;\n      }\n\n      const fieldName = this.getFieldName(field.id, field.title);\n      const fieldValue = this.extractValue(field.value, valueKey);\n\n      if (cipher.type === CipherType.Login) {\n        if (this.fillLogin(field, fieldValue, cipher)) {\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.WirelessRouter:\n            break;\n\n          case CategoryEnum.Server:\n            if (this.isNullOrWhitespace(cipher.login.uri) && field.id === \"url\") {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              return;\n            }\n            break;\n\n          case CategoryEnum.API_Credential:\n            if (this.fillApiCredentials(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.fillCreditCard(field, fieldValue, cipher)) {\n          return;\n        }\n\n        if (category === CategoryEnum.BankAccount) {\n          if (this.fillBankAccount(field, fieldValue, cipher)) {\n            return;\n          }\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        if (this.fillIdentity(field, fieldValue, cipher, valueKey)) {\n          return;\n        }\n        if (valueKey === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip, state } = field.value.address;\n          cipher.identity.address1 = this.getValueOrDefault(street);\n          cipher.identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            cipher.identity.country = country.toUpperCase();\n          }\n          cipher.identity.postalCode = this.getValueOrDefault(zip);\n          cipher.identity.state = this.getValueOrDefault(state);\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Identity:\n            break;\n          case CategoryEnum.DriversLicense:\n            if (this.fillDriversLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.OutdoorLicense:\n            if (this.fillOutdoorLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Membership:\n            if (this.fillMembership(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Passport:\n            if (this.fillPassport(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.RewardsProgram:\n            if (this.fillRewardsProgram(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.SocialSecurityNumber:\n            if (this.fillSSN(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (valueKey === \"email\") {\n        // fieldValue is an object casted into a string, so access the plain value instead\n        const { email_address, provider } = field.value.email;\n        this.processKvp(cipher, fieldName, email_address, FieldType.Text);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return;\n      }\n\n      // Do not include a password field if it's already in the history\n      if (\n        field.title === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      // TODO ?? If one of the fields is marked as guarded, then activate Password-Reprompt for the entire item\n      if (field.guarded && cipher.reprompt === CipherRepromptType.None) {\n        cipher.reprompt = CipherRepromptType.Password;\n      }\n\n      const fieldType = valueKey === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n\n  private getFieldName(id: string, title: string): string {\n    if (this.isNullOrWhitespace(title)) {\n      return id;\n    }\n\n    // Naive approach of checking if the fields id is usable\n    if (id.length > 25 && RegExp(/[0-9]{2}[A-Z]{2}/, \"i\").test(id)) {\n      return title;\n    }\n    return id;\n  }\n\n  private extractValue(value: Value, valueKey: string): string {\n    if (valueKey === \"date\") {\n      return new Date(value.date * 1000).toUTCString();\n    }\n\n    if (valueKey === \"monthYear\") {\n      return value.monthYear.toString();\n    }\n\n    return (value as any)[valueKey];\n  }\n\n  private fillLogin(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.username) && fieldName === \"username\") {\n      cipher.login.username = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"password\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (\n      this.isNullOrWhitespace(cipher.login.totp) &&\n      field.id != null &&\n      field.id.startsWith(\"TOTP_\")\n    ) {\n      cipher.login.totp = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillApiCredentials(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"credential\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.uri) && fieldName === \"hostname\") {\n      cipher.login.uris = this.makeUriArray(fieldValue);\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillCreditCard(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.number) && field.id === \"ccnum\") {\n      cipher.card.number = fieldValue;\n      cipher.card.brand = this.getCardBrand(fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.code) && field.id === \"cvv\") {\n      cipher.card.code = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"cardholder\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.expiration) && field.id === \"expiry\") {\n      const monthYear: string = fieldValue.toString().trim();\n      cipher.card.expMonth = monthYear.substring(4, 6);\n      if (cipher.card.expMonth[0] === \"0\") {\n        cipher.card.expMonth = cipher.card.expMonth.substring(1, 2);\n      }\n      cipher.card.expYear = monthYear.substring(0, 4);\n      return true;\n    }\n\n    if (field.id === \"type\") {\n      // Skip since brand was determined from number above\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillBankAccount(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"owner\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillIdentity(\n    field: FieldsEntity,\n    fieldValue: string,\n    cipher: CipherView,\n    valueKey: string\n  ): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"firstname\") {\n      cipher.identity.firstName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.lastName) && field.id === \"lastname\") {\n      cipher.identity.lastName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.middleName) && field.id === \"initial\") {\n      cipher.identity.middleName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"defphone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.email)) {\n      if (valueKey === \"email\") {\n        const { email_address, provider } = field.value.email;\n        cipher.identity.email = this.getValueOrDefault(email_address);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return true;\n      }\n\n      if (field.id === \"email\") {\n        cipher.identity.email = fieldValue;\n        return true;\n      }\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.username) && field.id === \"username\") {\n      cipher.identity.username = fieldValue;\n      return true;\n    }\n    return false;\n  }\n\n  private fillDriversLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.address1) && field.id === \"address\") {\n      cipher.identity.address1 = fieldValue;\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.licenseNumber) && field.id === \"number\") {\n      cipher.identity.licenseNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillOutdoorLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillMembership(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"org_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"phone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillPassport(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO Iso\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"issuing_country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.passportNumber) && field.id === \"number\") {\n      cipher.identity.passportNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillRewardsProgram(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillSSN(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.ssn) && field.id === \"number\") {\n      cipher.identity.ssn = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private parsePasswordHistory(historyItems: PasswordHistoryEntity[], cipher: CipherView) {\n    if (historyItems == null || historyItems.length === 0) {\n      return;\n    }\n\n    const maxSize = historyItems.length > 5 ? 5 : historyItems.length;\n    cipher.passwordHistory = historyItems\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nexport class CipherImportContext {\n  lowerProperty: string;\n  constructor(public importRecord: any, public property: string, public cipher: CipherView) {\n    this.lowerProperty = property.toLowerCase();\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\n\nexport const IgnoredProperties = [\n  \"ainfo\",\n  \"autosubmit\",\n  \"notesplain\",\n  \"ps\",\n  \"scope\",\n  \"tags\",\n  \"title\",\n  \"uuid\",\n  \"notes\",\n];\n\nexport abstract class OnePasswordCsvImporter extends BaseImporter implements Importer {\n  protected loginPropertyParsers = [\n    this.setLoginUsername,\n    this.setLoginPassword,\n    this.setLoginUris,\n  ];\n  protected creditCardPropertyParsers = [\n    this.setCreditCardNumber,\n    this.setCreditCardVerification,\n    this.setCreditCardCardholderName,\n    this.setCreditCardExpiry,\n  ];\n  protected identityPropertyParsers = [\n    this.setIdentityFirstName,\n    this.setIdentityInitial,\n    this.setIdentityLastName,\n    this.setIdentityUserName,\n    this.setIdentityEmail,\n    this.setIdentityPhone,\n    this.setIdentityCompany,\n  ];\n\n  abstract setCipherType(value: any, cipher: CipherView): void;\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true, {\n      quoteChar: '\"',\n      escapeChar: \"\\\\\",\n    });\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(this.getProp(value, \"title\"))) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.getProp(value, \"title\"), \"--\");\n\n      this.setNotes(value, cipher);\n\n      this.setCipherType(value, cipher);\n\n      let altUsername: string = null;\n      for (const property in value) {\n        // eslint-disable-next-line\n        if (!value.hasOwnProperty(property) || this.isNullOrWhitespace(value[property])) {\n          continue;\n        }\n\n        const context = new CipherImportContext(value, property, cipher);\n        if (cipher.type === CipherType.Login && this.setKnownLoginValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Card && this.setKnownCreditCardValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Identity && this.setKnownIdentityValue(context)) {\n          continue;\n        }\n\n        altUsername = this.setUnknownValue(context, altUsername);\n      }\n\n      if (\n        cipher.type === CipherType.Login &&\n        !this.isNullOrWhitespace(altUsername) &&\n        this.isNullOrWhitespace(cipher.login.username) &&\n        altUsername.indexOf(\"://\") === -1\n      ) {\n        cipher.login.username = altUsername;\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  protected getProp(obj: any, name: string): any {\n    const lowerObj = Object.entries(obj).reduce((agg: any, entry: [string, any]) => {\n      agg[entry[0].toLowerCase()] = entry[1];\n      return agg;\n    }, {});\n    return lowerObj[name.toLowerCase()];\n  }\n\n  protected getPropByRegexp(obj: any, regexp: RegExp): any {\n    const matchingKeys = Object.keys(obj).reduce((agg: string[], key: string) => {\n      if (key.match(regexp)) {\n        agg.push(key);\n      }\n      return agg;\n    }, []);\n    if (matchingKeys.length === 0) {\n      return null;\n    } else {\n      return obj[matchingKeys[0]];\n    }\n  }\n\n  protected getPropIncluding(obj: any, name: string): any {\n    const includesMap = Object.keys(obj).reduce((agg: string[], entry: string) => {\n      if (entry.toLowerCase().includes(name.toLowerCase())) {\n        agg.push(entry);\n      }\n      return agg;\n    }, []);\n    if (includesMap.length === 0) {\n      return null;\n    } else {\n      return obj[includesMap[0]];\n    }\n  }\n\n  protected setNotes(importRecord: any, cipher: CipherView) {\n    cipher.notes =\n      this.getValueOrDefault(this.getProp(importRecord, \"notesPlain\"), \"\") +\n      \"\\n\" +\n      this.getValueOrDefault(this.getProp(importRecord, \"notes\"), \"\") +\n      \"\\n\";\n    cipher.notes.trim();\n  }\n\n  protected setKnownLoginValue(context: CipherImportContext): boolean {\n    return this.loginPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownCreditCardValue(context: CipherImportContext): boolean {\n    return this.creditCardPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownIdentityValue(context: CipherImportContext): boolean {\n    return this.identityPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setUnknownValue(context: CipherImportContext, altUsername: string): string {\n    if (\n      IgnoredProperties.indexOf(context.lowerProperty) === -1 &&\n      !context.lowerProperty.startsWith(\"section:\") &&\n      !context.lowerProperty.startsWith(\"section \")\n    ) {\n      if (altUsername == null && context.lowerProperty === \"email\") {\n        return context.importRecord[context.property];\n      } else if (\n        context.lowerProperty === \"created date\" ||\n        context.lowerProperty === \"modified date\"\n      ) {\n        const readableDate = new Date(\n          parseInt(context.importRecord[context.property], 10) * 1000\n        ).toUTCString();\n        this.processKvp(context.cipher, \"1Password \" + context.property, readableDate);\n        return null;\n      }\n      if (\n        context.lowerProperty.includes(\"password\") ||\n        context.lowerProperty.includes(\"key\") ||\n        context.lowerProperty.includes(\"secret\")\n      ) {\n        this.processKvp(\n          context.cipher,\n          context.property,\n          context.importRecord[context.property],\n          FieldType.Hidden\n        );\n      } else {\n        this.processKvp(context.cipher, context.property, context.importRecord[context.property]);\n      }\n    }\n    return null;\n  }\n\n  protected setIdentityFirstName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.firstName) &&\n      context.lowerProperty.includes(\"first name\")\n    ) {\n      context.cipher.identity.firstName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityInitial(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.middleName) &&\n      context.lowerProperty.includes(\"initial\")\n    ) {\n      context.cipher.identity.middleName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityLastName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.lastName) &&\n      context.lowerProperty.includes(\"last name\")\n    ) {\n      context.cipher.identity.lastName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityUserName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.username) &&\n      context.lowerProperty.includes(\"username\")\n    ) {\n      context.cipher.identity.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityCompany(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.company) &&\n      context.lowerProperty.includes(\"company\")\n    ) {\n      context.cipher.identity.company = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityPhone(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.phone) &&\n      context.lowerProperty.includes(\"default phone\")\n    ) {\n      context.cipher.identity.phone = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityEmail(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.email) &&\n      context.lowerProperty.includes(\"email\")\n    ) {\n      context.cipher.identity.email = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardNumber(context: CipherImportContext): boolean {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.number) &&\n      context.lowerProperty.includes(\"number\")\n    ) {\n      context.cipher.card.number = context.importRecord[context.property];\n      context.cipher.card.brand = this.getCardBrand(context.cipher.card.number);\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardVerification(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.code) &&\n      context.lowerProperty.includes(\"verification number\")\n    ) {\n      context.cipher.card.code = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardCardholderName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.cardholderName) &&\n      context.lowerProperty.includes(\"cardholder name\")\n    ) {\n      context.cipher.card.cardholderName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\") &&\n      context.importRecord[context.property].length === 7\n    ) {\n      context.cipher.card.expMonth = (context.importRecord[context.property] as string).substr(\n        0,\n        2\n      );\n      if (context.cipher.card.expMonth[0] === \"0\") {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = (context.importRecord[context.property] as string).substr(3, 4);\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginPassword(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.password) &&\n      context.lowerProperty === \"password\"\n    ) {\n      context.cipher.login.password = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUsername(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.username) &&\n      context.lowerProperty === \"username\"\n    ) {\n      context.cipher.login.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUris(context: CipherImportContext) {\n    if (\n      (context.cipher.login.uris == null || context.cipher.login.uris.length === 0) &&\n      context.lowerProperty === \"urls\"\n    ) {\n      const urls = context.importRecord[context.property].split(this.newLineRegex);\n      context.cipher.login.uris = this.makeUriArray(urls);\n      return true;\n    } else if (context.lowerProperty === \"url\") {\n      if (context.cipher.login.uris == null) {\n        context.cipher.login.uris = [];\n      }\n      context.cipher.login.uris.concat(this.makeUriArray(context.importRecord[context.property]));\n      return true;\n    }\n    return false;\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { IgnoredProperties, OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordMacCsvImporter extends OnePasswordCsvImporter implements Importer {\n  setCipherType(value: any, cipher: CipherView) {\n    const onePassType = this.getValueOrDefault(this.getProp(value, \"type\"), \"Login\");\n    switch (onePassType) {\n      case \"Credit Card\":\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Identity\":\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Login\":\n      case \"Secure Note\":\n        IgnoredProperties.push(\"type\");\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\nimport { OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordWinCsvImporter extends OnePasswordCsvImporter implements Importer {\n  constructor() {\n    super();\n    this.identityPropertyParsers.push(this.setIdentityAddress);\n  }\n\n  setCipherType(value: any, cipher: CipherView) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: number/i)) &&\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: expiry date/i))\n    ) {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    }\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: first name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: initial/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: last name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /internet \\d+: email/i))\n    ) {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    }\n  }\n\n  setIdentityAddress(context: CipherImportContext) {\n    if (context.lowerProperty.match(/address \\d+: address/i)) {\n      this.processKvp(context.cipher, \"address\", context.importRecord[context.property]);\n      return true;\n    }\n    return false;\n  }\n\n  setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\")\n    ) {\n      const expSplit = (context.importRecord[context.property] as string).split(\"/\");\n      context.cipher.card.expMonth = expSplit[0];\n      if (context.cipher.card.expMonth[0] === \"0\" && context.cipher.card.expMonth.length === 2) {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = expSplit[2].length > 4 ? expSplit[2].substr(0, 4) : expSplit[2];\n      return true;\n    }\n    return false;\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PadlockCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let headers: string[] = null;\n    results.forEach((value) => {\n      if (headers == null) {\n        headers = value.map((v: string) => v);\n        return;\n      }\n\n      if (value.length < 2 || value.length !== headers.length) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value[1])) {\n        if (this.organization) {\n          const tags = (value[1] as string).split(\",\");\n          tags.forEach((tag) => {\n            tag = tag.trim();\n            let addCollection = true;\n            let collectionIndex = result.collections.length;\n\n            for (let i = 0; i < result.collections.length; i++) {\n              if (result.collections[i].name === tag) {\n                addCollection = false;\n                collectionIndex = i;\n                break;\n              }\n            }\n\n            if (addCollection) {\n              const collection = new CollectionView();\n              collection.name = tag;\n              result.collections.push(collection);\n            }\n\n            result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n          });\n        } else {\n          const tags = (value[1] as string).split(\",\");\n          const tag = tags.length > 0 ? tags[0].trim() : null;\n          this.processFolder(result, tag);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      for (let i = 2; i < value.length; i++) {\n        const header = headers[i].trim().toLowerCase();\n        if (this.isNullOrWhitespace(value[i]) || this.isNullOrWhitespace(header)) {\n          continue;\n        }\n\n        if (this.usernameFieldNames.indexOf(header) > -1) {\n          cipher.login.username = value[i];\n        } else if (this.passwordFieldNames.indexOf(header) > -1) {\n          cipher.login.password = value[i];\n        } else if (this.uriFieldNames.indexOf(header) > -1) {\n          cipher.login.uris = this.makeUriArray(value[i]);\n        } else {\n          this.processKvp(cipher, headers[i], value[i]);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassKeepCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValue(\"category\", value));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValue(\"description\", value);\n      cipher.name = this.getValueOrDefault(this.getValue(\"title\", value), \"--\");\n      cipher.login.username = this.getValue(\"username\", value);\n      cipher.login.password = this.getValue(\"password\", value);\n      cipher.login.uris = this.makeUriArray(this.getValue(\"site\", value));\n      this.processKvp(cipher, \"Password 2\", this.getValue(\"password2\", value));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private getValue(key: string, value: any) {\n    return this.getValueOrDefault(value[key], this.getValueOrDefault(value[\" \" + key]));\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { PasskyJsonExport } from \"./passky-json-types\";\n\nexport class PasskyJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const passkyExport: PasskyJsonExport = JSON.parse(data);\n    if (\n      passkyExport == null ||\n      passkyExport.passwords == null ||\n      passkyExport.passwords.length === 0\n    ) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (passkyExport.encrypted == true) {\n      result.success = false;\n      result.errorMessage = \"Unable to import an encrypted passky backup.\";\n      return Promise.resolve(result);\n    }\n\n    passkyExport.passwords.forEach((record) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = record.website;\n      cipher.login.username = record.username;\n      cipher.login.password = record.password;\n\n      cipher.login.uris = this.makeUriArray(record.website);\n      cipher.notes = record.message;\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassmanJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((credential: any) => {\n      if (credential.tags != null && credential.tags.length > 0) {\n        const folderName = credential.tags[0].text;\n        this.processFolder(result, folderName);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = credential.label;\n\n      cipher.login.username = this.getValueOrDefault(credential.username);\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.url);\n      cipher.notes += this.getValueOrDefault(credential.description, \"\");\n      if (credential.otp != null) {\n        cipher.login.totp = this.getValueOrDefault(credential.otp.secret);\n      }\n\n      if (credential.custom_fields != null) {\n        credential.custom_fields.forEach((customField: any) => {\n          switch (customField.field_type) {\n            case \"text\":\n            case \"password\":\n              this.processKvp(cipher, customField.label, customField.value);\n              break;\n          }\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasspackCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const tagsJson = !this.isNullOrWhitespace(value.Tags) ? JSON.parse(value.Tags) : null;\n      const tags: string[] =\n        tagsJson != null && tagsJson.tags != null && tagsJson.tags.length > 0\n          ? tagsJson.tags\n              .map((tagJson: string) => {\n                try {\n                  const t = JSON.parse(tagJson);\n                  return this.getValueOrDefault(t.tag);\n                } catch {\n                  // Ignore error\n                }\n                return null;\n              })\n              .filter((t: string) => !this.isNullOrWhitespace(t))\n          : null;\n\n      if (this.organization && tags != null && tags.length > 0) {\n        tags.forEach((tag) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === tag) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = tag;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization && tags != null && tags.length > 0) {\n        this.processFolder(result, tags[0]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes, \"\");\n      cipher.notes += \"\\n\\n\" + this.getValueOrDefault(value[\"Shared Notes\"], \"\") + \"\\n\";\n      cipher.name = this.getValueOrDefault(value[\"Entry Name\"], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User ID\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n        value.__parsed_extra.forEach((extra: string) => {\n          if (!this.isNullOrWhitespace(extra)) {\n            cipher.notes += \"\\n\" + extra;\n          }\n        });\n      }\n\n      const fieldsJson = !this.isNullOrWhitespace(value[\"Extra Fields\"])\n        ? JSON.parse(value[\"Extra Fields\"])\n        : null;\n      const fields =\n        fieldsJson != null && fieldsJson.extraFields != null && fieldsJson.extraFields.length > 0\n          ? fieldsJson.extraFields.map((fieldJson: string) => {\n              try {\n                return JSON.parse(fieldJson);\n              } catch {\n                // Ignore error\n              }\n              return null;\n            })\n          : null;\n      if (fields != null) {\n        fields.forEach((f: any) => {\n          if (f != null) {\n            this.processKvp(cipher, f.name, f.data);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordAgentCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let newVersion = true;\n    results.forEach((value) => {\n      if (value.length !== 5 && value.length < 9) {\n        return;\n      }\n      const altFormat = value.length === 10 && value[0] === \"0\";\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[altFormat ? 1 : 0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[altFormat ? 2 : 1]);\n      cipher.login.password = this.getValueOrDefault(value[altFormat ? 3 : 2]);\n      if (value.length === 5) {\n        newVersion = false;\n        cipher.notes = this.getValueOrDefault(value[4]);\n        cipher.login.uris = this.makeUriArray(value[3]);\n      } else {\n        const folder = this.getValueOrDefault(value[altFormat ? 9 : 8], \"(None)\");\n        let folderName = folder !== \"(None)\" ? folder.split(\"\\\\\").join(\"/\") : null;\n        if (folderName != null) {\n          folderName = folder.split(\" > \").join(\"/\");\n          folderName = folder.split(\">\").join(\"/\");\n        }\n        this.processFolder(result, folderName);\n        cipher.notes = this.getValueOrDefault(value[altFormat ? 5 : 3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (newVersion && this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordBossJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.items == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    results.folders.forEach((value: any) => {\n      foldersMap.set(value.id, value.name);\n    });\n    const foldersIndexMap = new Map<string, number>();\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((value: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.login.uris = this.makeUriArray(value.login_url);\n\n      if (value.folder != null && foldersIndexMap.has(value.folder)) {\n        result.folderRelationships.push([result.ciphers.length, foldersIndexMap.get(value.folder)]);\n      }\n\n      if (value.identifiers == null) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value.identifiers.notes)) {\n        cipher.notes = value.identifiers.notes.split(\"\\\\r\\\\n\").join(\"\\n\").split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (value.type === \"CreditCard\") {\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n      }\n\n      for (const property in value.identifiers) {\n        // eslint-disable-next-line\n        if (!value.identifiers.hasOwnProperty(property)) {\n          continue;\n        }\n        const valObj = value.identifiers[property];\n        const val = valObj != null ? valObj.toString() : null;\n        if (\n          this.isNullOrWhitespace(val) ||\n          property === \"notes\" ||\n          property === \"ignoreItemInSecurityScore\"\n        ) {\n          continue;\n        }\n\n        if (property === \"custom_fields\") {\n          valObj.forEach((cf: any) => {\n            this.processKvp(cipher, cf.name, cf.value);\n          });\n          continue;\n        }\n\n        if (cipher.type === CipherType.Card) {\n          if (property === \"cardNumber\") {\n            cipher.card.number = val;\n            cipher.card.brand = this.getCardBrand(val);\n            continue;\n          } else if (property === \"nameOnCard\") {\n            cipher.card.cardholderName = val;\n            continue;\n          } else if (property === \"security_code\") {\n            cipher.card.code = val;\n            continue;\n          } else if (property === \"expires\") {\n            try {\n              const expDate = new Date(val);\n              cipher.card.expYear = expDate.getFullYear().toString();\n              cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n            } catch {\n              // Ignore error\n            }\n            continue;\n          } else if (property === \"cardType\") {\n            continue;\n          }\n        } else {\n          if (\n            (property === \"username\" || property === \"email\") &&\n            this.isNullOrWhitespace(cipher.login.username)\n          ) {\n            cipher.login.username = val;\n            continue;\n          } else if (property === \"password\") {\n            cipher.login.password = val;\n            continue;\n          } else if (property === \"totp\") {\n            cipher.login.totp = val;\n            continue;\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(property) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n            continue;\n          }\n        }\n\n        this.processKvp(cipher, property, val);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordDragonXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const records = doc.querySelectorAll(\"PasswordManager > record\");\n    Array.from(records).forEach((record) => {\n      const category = this.querySelectorDirectChild(record, \"Category\");\n      const categoryText =\n        category != null &&\n        !this.isNullOrWhitespace(category.textContent) &&\n        category.textContent !== \"Unfiled\"\n          ? category.textContent\n          : null;\n      this.processFolder(result, categoryText);\n\n      const accountName = this.querySelectorDirectChild(record, \"Account-Name\");\n      const userId = this.querySelectorDirectChild(record, \"User-Id\");\n      const password = this.querySelectorDirectChild(record, \"Password\");\n      const url = this.querySelectorDirectChild(record, \"URL\");\n      const notes = this.querySelectorDirectChild(record, \"Notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name =\n        accountName != null ? this.getValueOrDefault(accountName.textContent, \"--\") : \"--\";\n      cipher.notes = notes != null ? this.getValueOrDefault(notes.textContent) : \"\";\n      cipher.login.username = userId != null ? this.getValueOrDefault(userId.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      const attributes: string[] = [];\n      for (let i = 1; i <= 10; i++) {\n        attributes.push(\"Attribute-\" + i);\n      }\n\n      this.querySelectorAllDirectChild(record, attributes.join(\",\")).forEach((attr) => {\n        if (this.isNullOrWhitespace(attr.textContent) || attr.textContent === \"null\") {\n          return;\n        }\n        this.processKvp(cipher, attr.tagName, attr.textContent);\n      });\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordSafeXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const passwordSafe = doc.querySelector(\"passwordsafe\");\n    if (passwordSafe == null) {\n      result.errorMessage = \"Missing `passwordsafe` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const notesDelimiter = passwordSafe.getAttribute(\"delimiter\");\n    const entries = doc.querySelectorAll(\"passwordsafe > entry\");\n    Array.from(entries).forEach((entry) => {\n      const group = this.querySelectorDirectChild(entry, \"group\");\n      const groupText =\n        group != null && !this.isNullOrWhitespace(group.textContent)\n          ? group.textContent.split(\".\").join(\"/\")\n          : null;\n      this.processFolder(result, groupText);\n\n      const title = this.querySelectorDirectChild(entry, \"title\");\n      const username = this.querySelectorDirectChild(entry, \"username\");\n      const email = this.querySelectorDirectChild(entry, \"email\");\n      const password = this.querySelectorDirectChild(entry, \"password\");\n      const url = this.querySelectorDirectChild(entry, \"url\");\n      const notes = this.querySelectorDirectChild(entry, \"notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name = title != null ? this.getValueOrDefault(title.textContent, \"--\") : \"--\";\n      cipher.notes =\n        notes != null\n          ? this.getValueOrDefault(notes.textContent, \"\").split(notesDelimiter).join(\"\\n\")\n          : null;\n      cipher.login.username =\n        username != null ? this.getValueOrDefault(username.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      if (this.isNullOrWhitespace(cipher.login.username) && email != null) {\n        cipher.login.username = this.getValueOrDefault(email.textContent);\n      } else if (email != null && !this.isNullOrWhitespace(email.textContent)) {\n        cipher.notes = this.isNullOrWhitespace(cipher.notes)\n          ? \"Email: \" + email.textContent\n          : cipher.notes + \"\\n\" + \"Email: \" + email.textContent;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordWalletTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 1) {\n        return;\n      }\n      if (value.length > 5) {\n        this.processFolder(result, value[5]);\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      if (value.length > 4) {\n        cipher.notes = this.getValueOrDefault(value[4], \"\").split(\"¬\").join(\"\\n\");\n      }\n      if (value.length > 2) {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n      }\n      if (value.length > 3) {\n        cipher.login.password = this.getValueOrDefault(value[3]);\n      }\n      if (value.length > 1) {\n        cipher.login.uris = this.makeUriArray(value[1]);\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  AppPasswordEntry,\n  BookmarkEntry,\n  EnvironmentVariablesEntry,\n  FoldersEntity,\n  GPGEntry,\n  NotesEntry,\n  PsonoItemTypes,\n  PsonoJsonExport,\n  TOTPEntry,\n  WebsitePasswordEntry,\n} from \"./psono-json-types\";\n\nexport class PsonoJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const psonoExport: PsonoJsonExport = JSON.parse(data);\n    if (psonoExport == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    this.parseFolders(result, psonoExport.folders);\n    this.handleItemParsing(result, psonoExport.items);\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFolders(result: ImportResult, folders: FoldersEntity[]) {\n    if (folders == null || folders.length === 0) {\n      return;\n    }\n\n    folders.forEach((folder) => {\n      if (folder.items == null || folder.items.length == 0) {\n        return;\n      }\n\n      this.processFolder(result, folder.name);\n\n      this.handleItemParsing(result, folder.items);\n    });\n  }\n\n  private handleItemParsing(result: ImportResult, items?: PsonoItemTypes[]) {\n    if (items == null || items.length === 0) {\n      return;\n    }\n\n    items.forEach((record) => {\n      const cipher = this.parsePsonoItem(record);\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n  }\n\n  private parsePsonoItem(item: PsonoItemTypes): CipherView {\n    const cipher = this.initLoginCipher();\n\n    switch (item.type) {\n      case \"website_password\":\n        this.parseWebsiteLogins(item, cipher);\n        break;\n      case \"application_password\":\n        this.parseApplicationPasswords(item, cipher);\n        break;\n      case \"environment_variables\":\n        this.parseEnvironmentVariables(item, cipher);\n        break;\n      case \"totp\":\n        this.parseTOTP(item, cipher);\n        break;\n      case \"bookmark\":\n        this.parseBookmarks(item, cipher);\n        break;\n      // Skipping this until we can save GPG into notes/custom fields\n      // case \"mail_gpg_own_key\":\n      //   this.parseGPG(item, cipher);\n      //   break;\n      case \"note\":\n        this.parseNotes(item, cipher);\n        break;\n      default:\n        break;\n    }\n\n    return cipher;\n  }\n\n  readonly WEBSITE_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"website_password_title\",\n    \"website_password_notes\",\n    \"website_password_username\",\n    \"website_password_password\",\n    \"website_password_url\",\n    \"autosubmit\",\n    \"website_password_auto_submit\",\n    \"urlfilter\",\n    \"website_password_url_filter\",\n  ]);\n  private parseWebsiteLogins(entry: WebsitePasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"website_password\") {\n      return;\n    }\n\n    cipher.name = entry.website_password_title;\n    cipher.notes = entry.website_password_notes;\n\n    cipher.login.username = entry.website_password_username;\n    cipher.login.password = entry.website_password_password;\n\n    cipher.login.uris = this.makeUriArray(entry.website_password_url);\n\n    this.processKvp(\n      cipher,\n      \"website_password_auto_submit\",\n      entry.website_password_auto_submit.toString(),\n      FieldType.Boolean\n    );\n\n    this.processKvp(cipher, \"website_password_url_filter\", entry.website_password_url_filter);\n\n    this.importUnmappedFields(cipher, entry, this.WEBSITE_mappedValues);\n  }\n\n  readonly APP_PWD_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"application_password_title\",\n    \"application_password_notes\",\n    \"application_password_username\",\n    \"application_password_password\",\n  ]);\n  private parseApplicationPasswords(entry: AppPasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"application_password\") {\n      return;\n    }\n\n    cipher.name = entry.application_password_title;\n    cipher.notes = entry.application_password_notes;\n\n    cipher.login.username = entry.application_password_username;\n    cipher.login.password = entry.application_password_password;\n\n    this.importUnmappedFields(cipher, entry, this.APP_PWD_mappedValues);\n  }\n\n  readonly BOOKMARK_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"bookmark_title\",\n    \"bookmark_notes\",\n    \"bookmark_url\",\n  ]);\n  private parseBookmarks(entry: BookmarkEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"bookmark\") {\n      return;\n    }\n\n    cipher.name = entry.bookmark_title;\n    cipher.notes = entry.bookmark_notes;\n\n    cipher.login.uris = this.makeUriArray(entry.bookmark_url);\n\n    this.importUnmappedFields(cipher, entry, this.BOOKMARK_mappedValues);\n  }\n\n  readonly NOTES_mappedValues = new Set([\"type\", \"name\", \"note_title\", \"note_notes\"]);\n  private parseNotes(entry: NotesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"note\") {\n      return;\n    }\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.note_title;\n    cipher.notes = entry.note_notes;\n\n    this.importUnmappedFields(cipher, entry, this.NOTES_mappedValues);\n  }\n\n  readonly TOTP_mappedValues = new Set([\"type\", \"name\", \"totp_title\", \"totp_notes\", \"totp_code\"]);\n  private parseTOTP(entry: TOTPEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"totp\") {\n      return;\n    }\n\n    cipher.name = entry.totp_title;\n    cipher.notes = entry.totp_notes;\n\n    cipher.login.totp = entry.totp_code;\n\n    this.importUnmappedFields(cipher, entry, this.TOTP_mappedValues);\n  }\n\n  readonly ENV_VARIABLES_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"environment_variables_title\",\n    \"environment_variables_notes\",\n    \"environment_variables_variables\",\n  ]);\n  private parseEnvironmentVariables(entry: EnvironmentVariablesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"environment_variables\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.environment_variables_title;\n    cipher.notes = entry.environment_variables_notes;\n\n    entry.environment_variables_variables.forEach((KvPair) => {\n      this.processKvp(cipher, KvPair.key, KvPair.value);\n    });\n\n    this.importUnmappedFields(cipher, entry, this.ENV_VARIABLES_mappedValues);\n  }\n\n  readonly GPG_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"mail_gpg_own_key_title\",\n    \"mail_gpg_own_key_public\",\n    \"mail_gpg_own_key_name\",\n    \"mail_gpg_own_key_email\",\n    \"mail_gpg_own_key_private\",\n  ]);\n  private parseGPG(entry: GPGEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"mail_gpg_own_key\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.mail_gpg_own_key_title;\n    cipher.notes = entry.mail_gpg_own_key_public;\n\n    this.processKvp(cipher, \"mail_gpg_own_key_name\", entry.mail_gpg_own_key_name);\n    this.processKvp(cipher, \"mail_gpg_own_key_email\", entry.mail_gpg_own_key_email);\n    this.processKvp(\n      cipher,\n      \"mail_gpg_own_key_private\",\n      entry.mail_gpg_own_key_private,\n      FieldType.Hidden\n    );\n\n    this.importUnmappedFields(cipher, entry, this.GPG_mappedValues);\n  }\n\n  private importUnmappedFields(\n    cipher: CipherView,\n    entry: PsonoItemTypes,\n    mappedValues: Set<string>\n  ) {\n    const unmappedFields = Object.keys(entry).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = entry as any;\n      this.processKvp(cipher, key, item[key].toString());\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RememBearCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.trash === \"true\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.notes);\n      if (value.type === \"LoginItem\") {\n        cipher.login.uris = this.makeUriArray(value.website);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      } else if (value.type === \"CreditCardItem\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.verification);\n\n        try {\n          const expMonth = this.getValueOrDefault(value.expiryMonth);\n          if (expMonth != null) {\n            const expMonthNumber = parseInt(expMonth, null);\n            if (expMonthNumber != null && expMonthNumber >= 1 && expMonthNumber <= 12) {\n              cipher.card.expMonth = expMonthNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n        try {\n          const expYear = this.getValueOrDefault(value.expiryYear);\n          if (expYear != null) {\n            const expYearNumber = parseInt(expYear, null);\n            if (expYearNumber != null) {\n              cipher.card.expYear = expYearNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n\n        const pin = this.getValueOrDefault(value.pin);\n        if (pin != null) {\n          this.processKvp(cipher, \"PIN\", pin);\n        }\n        const zip = this.getValueOrDefault(value.zipCode);\n        if (zip != null) {\n          this.processKvp(cipher, \"Zip Code\", zip);\n        }\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RoboFormCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let i = 1;\n    results.forEach((value) => {\n      const folder =\n        !this.isNullOrWhitespace(value.Folder) && value.Folder.startsWith(\"/\")\n          ? value.Folder.replace(\"/\", \"\")\n          : value.Folder;\n      const folderName = !this.isNullOrWhitespace(folder) ? folder : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Login);\n      cipher.login.password = this.getValueOrDefault(value.Pwd);\n      cipher.login.uris = this.makeUriArray(value.Url);\n\n      if (!this.isNullOrWhitespace(value.Rf_fields)) {\n        let fields: string[] = [value.Rf_fields];\n        if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n          fields = fields.concat(value.__parsed_extra);\n        }\n        fields.forEach((field: string) => {\n          const parts = field.split(\":\");\n          if (parts.length < 3) {\n            return;\n          }\n          const key = parts[0] === \"-no-name-\" ? null : parts[0];\n          const val = parts.length === 4 && parts[2] === \"rck\" ? parts[1] : parts[2];\n          this.processKvp(cipher, key, val);\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n\n      if (\n        i === results.length &&\n        cipher.name === \"--\" &&\n        this.isNullOrWhitespace(cipher.login.password)\n      ) {\n        return;\n      }\n\n      result.ciphers.push(cipher);\n      i++;\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafariCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url ?? value.URL);\n      cipher.login.totp = this.getValueOrDefault(value.OTPAuth);\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafeInCloudXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const db = doc.querySelector(\"database\");\n    if (db == null) {\n      result.errorMessage = \"Missing `database` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, number>();\n\n    Array.from(doc.querySelectorAll(\"database > label\")).forEach((labelEl) => {\n      const name = labelEl.getAttribute(\"name\");\n      const id = labelEl.getAttribute(\"id\");\n      if (!this.isNullOrWhitespace(name) && !this.isNullOrWhitespace(id)) {\n        foldersMap.set(id, result.folders.length);\n        const folder = new FolderView();\n        folder.name = name;\n        result.folders.push(folder);\n      }\n    });\n\n    Array.from(doc.querySelectorAll(\"database > card\")).forEach((cardEl) => {\n      if (cardEl.getAttribute(\"template\") === \"true\" || cardEl.getAttribute(\"deleted\") === \"true\") {\n        return;\n      }\n\n      const labelIdEl = this.querySelectorDirectChild(cardEl, \"label_id\");\n      if (labelIdEl != null) {\n        const labelId = labelIdEl.textContent;\n        if (!this.isNullOrWhitespace(labelId) && foldersMap.has(labelId)) {\n          result.folderRelationships.push([result.ciphers.length, foldersMap.get(labelId)]);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(cardEl.getAttribute(\"title\"), \"--\");\n\n      if (cardEl.getAttribute(\"star\") === \"true\") {\n        cipher.favorite = true;\n      }\n\n      const cardType = cardEl.getAttribute(\"type\");\n      if (cardType === \"note\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      } else {\n        Array.from(this.querySelectorAllDirectChild(cardEl, \"field\")).forEach((fieldEl) => {\n          const text = fieldEl.textContent;\n          if (this.isNullOrWhitespace(text)) {\n            return;\n          }\n          const name = fieldEl.getAttribute(\"name\");\n          const fieldType = this.getValueOrDefault(fieldEl.getAttribute(\"type\"), \"\").toLowerCase();\n          if (fieldType === \"login\") {\n            cipher.login.username = text;\n          } else if (fieldType === \"password\" || fieldType === \"secret\") {\n            // safeInCloud allows for more than one password. we just insert them here and find the one used as password later\n            this.processKvp(cipher, name, text, FieldType.Hidden);\n          } else if (fieldType === \"one_time_password\") {\n            cipher.login.totp = text;\n          } else if (fieldType === \"notes\") {\n            cipher.notes += text + \"\\n\";\n          } else if (fieldType === \"weblogin\" || fieldType === \"website\") {\n            cipher.login.uris = this.makeUriArray(text);\n          } else {\n            this.processKvp(cipher, name, text);\n          }\n        });\n      }\n\n      Array.from(this.querySelectorAllDirectChild(cardEl, \"notes\")).forEach((notesEl) => {\n        cipher.notes += notesEl.textContent + \"\\n\";\n      });\n\n      this.setPassword(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  // Choose a password from all passwords. Take one that has password in its name, or the first one if there is no such entry\n  // if its name is password, we can safely remove it form the fields. otherwise, it would maybe be best to keep it as a hidden field\n  setPassword(cipher: CipherView) {\n    const candidates = cipher.fields.filter((field) => field.type === FieldType.Hidden);\n    if (!candidates.length) {\n      return;\n    }\n\n    let choice: FieldView;\n    for (const field of candidates) {\n      if (this.passwordFieldNames.includes(field.name.toLowerCase())) {\n        choice = field;\n        cipher.fields = cipher.fields.filter((f) => f !== choice);\n        break;\n      }\n    }\n\n    if (!choice) {\n      choice = candidates[0];\n    }\n\n    cipher.login.password = choice.value;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SaferPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.nameFromUrl(value.url), \"--\");\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SecureSafeCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title);\n      cipher.notes = this.getValueOrDefault(value.Comment);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SplashIdCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      this.processFolder(result, this.getValueOrDefault(value[value.length - 1]));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 2], \"\");\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n\n      if (value[0] === \"Web Logins\" || value[0] === \"Servers\" || value[0] === \"Email Accounts\") {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n        cipher.login.password = this.getValueOrDefault(value[3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n        this.parseFieldsToNotes(cipher, 5, value);\n      } else {\n        this.parseFieldsToNotes(cipher, 2, value);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFieldsToNotes(cipher: CipherView, startIndex: number, value: any) {\n    // last 3 rows do not get parsed\n    for (let i = startIndex; i < value.length - 3; i++) {\n      if (this.isNullOrWhitespace(value[i])) {\n        continue;\n      }\n      cipher.notes += value[i] + \"\\n\";\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class StickyPasswordXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const loginNodes = doc.querySelectorAll(\"root > Database > Logins > Login\");\n    Array.from(loginNodes).forEach((loginNode) => {\n      const accountId = loginNode.getAttribute(\"ID\");\n      if (this.isNullOrWhitespace(accountId)) {\n        return;\n      }\n\n      const usernameText = loginNode.getAttribute(\"Name\");\n      const passwordText = loginNode.getAttribute(\"Password\");\n      let titleText: string = null;\n      let linkText: string = null;\n      let notesText: string = null;\n      let groupId: string = null;\n      let groupText: string = null;\n\n      const accountLogin = doc.querySelector(\n        \"root > Database > Accounts > Account > \" +\n          'LoginLinks > Login[SourceLoginID=\"' +\n          accountId +\n          '\"]'\n      );\n      if (accountLogin != null) {\n        const account = accountLogin.parentElement.parentElement;\n        if (account != null) {\n          titleText = account.getAttribute(\"Name\");\n          linkText = account.getAttribute(\"Link\");\n          groupId = account.getAttribute(\"ParentID\");\n          notesText = account.getAttribute(\"Comments\");\n          if (!this.isNullOrWhitespace(notesText)) {\n            notesText = notesText.split(\"/n\").join(\"\\n\");\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(groupId)) {\n        groupText = this.buildGroupText(doc, groupId, \"\");\n        this.processFolder(result, groupText);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(titleText, \"--\");\n      cipher.notes = this.getValueOrDefault(notesText);\n      cipher.login.username = this.getValueOrDefault(usernameText);\n      cipher.login.password = this.getValueOrDefault(passwordText);\n      cipher.login.uris = this.makeUriArray(linkText);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  buildGroupText(doc: Document, groupId: string, groupText: string): string {\n    const group = doc.querySelector('root > Database > Groups > Group[ID=\"' + groupId + '\"]');\n    if (group == null) {\n      return groupText;\n    }\n    if (!this.isNullOrWhitespace(groupText)) {\n      groupText = \"/\" + groupText;\n    }\n    groupText = group.getAttribute(\"Name\") + groupText;\n    return this.buildGroupText(doc, group.getAttribute(\"ParentID\"), groupText);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst PropertiesToIgnore = [\n  \"kind\",\n  \"autologin\",\n  \"favorite\",\n  \"hexcolor\",\n  \"protectedwithpassword\",\n  \"subdomainonly\",\n  \"type\",\n  \"tk_export_version\",\n  \"note\",\n  \"title\",\n  \"document_content\",\n];\n\nexport class TrueKeyCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.favorite, \"\").toLowerCase() === \"true\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.notes = this.getValueOrDefault(value.memo, \"\");\n      cipher.login.username = this.getValueOrDefault(value.login);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n\n      if (value.kind !== \"login\") {\n        cipher.name = this.getValueOrDefault(value.title, \"--\");\n        cipher.notes = this.getValueOrDefault(value.note, \"\");\n      }\n\n      if (value.kind === \"cc\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        if (!this.isNullOrWhitespace(value.expiryDate)) {\n          try {\n            const expDate = new Date(value.expiryDate);\n            cipher.card.expYear = expDate.getFullYear().toString();\n            cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n          } catch {\n            // Ignore error\n          }\n        }\n      } else if (value.kind !== \"login\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = this.getValueOrDefault(value.document_content, \"\");\n        }\n        for (const property in value) {\n          if (\n            value.hasOwnProperty(property) && // eslint-disable-line\n            PropertiesToIgnore.indexOf(property.toLowerCase()) < 0 &&\n            !this.isNullOrWhitespace(value[property])\n          ) {\n            this.processKvp(cipher, property, value[property]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class UpmCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length !== 5) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.notes = this.getValueOrDefault(value[4]);\n      cipher.login.username = this.getValueOrDefault(value[1]);\n      cipher.login.password = this.getValueOrDefault(value[2]);\n      cipher.login.uris = this.makeUriArray(value[3]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class YotiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User name\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ZohoVaultCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (\n        this.isNullOrWhitespace(value[\"Password Name\"]) &&\n        this.isNullOrWhitespace(value[\"Secret Name\"])\n      ) {\n        return;\n      }\n      this.processFolder(result, this.getValueOrDefault(value.ChamberName));\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite, \"0\") === \"1\";\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(\n        value[\"Password Name\"],\n        this.getValueOrDefault(value[\"Secret Name\"], \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(\n        this.getValueOrDefault(value[\"Password URL\"], this.getValueOrDefault(value[\"Secret URL\"]))\n      );\n      this.parseData(cipher, value.SecretData);\n      this.parseData(cipher, value.CustomData);\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseData(cipher: CipherView, data: string) {\n    if (this.isNullOrWhitespace(data)) {\n      return;\n    }\n    const dataLines = this.splitNewLine(data);\n    dataLines.forEach((line) => {\n      const delimPosition = line.indexOf(\":\");\n      if (delimPosition < 0) {\n        return;\n      }\n      const field = line.substring(0, delimPosition);\n      const value = line.length > delimPosition ? line.substring(delimPosition + 1) : null;\n      if (\n        this.isNullOrWhitespace(field) ||\n        this.isNullOrWhitespace(value) ||\n        field === \"SecretType\"\n      ) {\n        return;\n      }\n      const fieldLower = field.toLowerCase();\n      if (cipher.login.username == null && this.usernameFieldNames.indexOf(fieldLower) > -1) {\n        cipher.login.username = value;\n      } else if (\n        cipher.login.password == null &&\n        this.passwordFieldNames.indexOf(fieldLower) > -1\n      ) {\n        cipher.login.password = value;\n      } else {\n        this.processKvp(cipher, field, value);\n      }\n    });\n  }\n}\n","export interface ImportOption {\n  id: string;\n  name: string;\n}\n\nexport const featuredImportOptions = [\n  { id: \"bitwardenjson\", name: \"Bitwarden (json)\" },\n  { id: \"bitwardencsv\", name: \"Bitwarden (csv)\" },\n  { id: \"chromecsv\", name: \"Chrome (csv)\" },\n  { id: \"dashlanecsv\", name: \"Dashlane (csv)\" },\n  { id: \"firefoxcsv\", name: \"Firefox (csv)\" },\n  { id: \"keepass2xml\", name: \"KeePass 2 (xml)\" },\n  { id: \"lastpasscsv\", name: \"LastPass (csv)\" },\n  { id: \"safaricsv\", name: \"Safari and macOS (csv)\" },\n  { id: \"1password1pux\", name: \"1Password (1pux)\" },\n] as const;\n\nexport const regularImportOptions = [\n  { id: \"keepassxcsv\", name: \"KeePassX (csv)\" },\n  { id: \"1password1pif\", name: \"1Password (1pif)\" },\n  { id: \"1passwordwincsv\", name: \"1Password 6 and 7 Windows (csv)\" },\n  { id: \"1passwordmaccsv\", name: \"1Password 6 and 7 Mac (csv)\" },\n  { id: \"dashlanejson\", name: \"Dashlane (json)\" },\n  { id: \"roboformcsv\", name: \"RoboForm (csv)\" },\n  { id: \"keepercsv\", name: \"Keeper (csv)\" },\n  // Temporarily remove this option for the Feb release\n  // { id: \"keeperjson\", name: \"Keeper (json)\" },\n  { id: \"enpasscsv\", name: \"Enpass (csv)\" },\n  { id: \"enpassjson\", name: \"Enpass (json)\" },\n  { id: \"safeincloudxml\", name: \"SafeInCloud (xml)\" },\n  { id: \"pwsafexml\", name: \"Password Safe (xml)\" },\n  { id: \"stickypasswordxml\", name: \"Sticky Password (xml)\" },\n  { id: \"msecurecsv\", name: \"mSecure (csv)\" },\n  { id: \"truekeycsv\", name: \"True Key (csv)\" },\n  { id: \"passwordbossjson\", name: \"Password Boss (json)\" },\n  { id: \"zohovaultcsv\", name: \"Zoho Vault (csv)\" },\n  { id: \"splashidcsv\", name: \"SplashID (csv)\" },\n  { id: \"passworddragonxml\", name: \"Password Dragon (xml)\" },\n  { id: \"padlockcsv\", name: \"Padlock (csv)\" },\n  { id: \"passboltcsv\", name: \"Passbolt (csv)\" },\n  { id: \"clipperzhtml\", name: \"Clipperz (html)\" },\n  { id: \"aviracsv\", name: \"Avira (csv)\" },\n  { id: \"saferpasscsv\", name: \"SaferPass (csv)\" },\n  { id: \"upmcsv\", name: \"Universal Password Manager (csv)\" },\n  { id: \"ascendocsv\", name: \"Ascendo DataVault (csv)\" },\n  { id: \"meldiumcsv\", name: \"Meldium (csv)\" },\n  { id: \"passkeepcsv\", name: \"PassKeep (csv)\" },\n  { id: \"operacsv\", name: \"Opera (csv)\" },\n  { id: \"vivaldicsv\", name: \"Vivaldi (csv)\" },\n  { id: \"gnomejson\", name: \"GNOME Passwords and Keys/Seahorse (json)\" },\n  { id: \"blurcsv\", name: \"Blur (csv)\" },\n  { id: \"passwordagentcsv\", name: \"Password Agent (csv)\" },\n  { id: \"passpackcsv\", name: \"Passpack (csv)\" },\n  { id: \"passmanjson\", name: \"Passman (json)\" },\n  { id: \"avastcsv\", name: \"Avast Passwords (csv)\" },\n  { id: \"avastjson\", name: \"Avast Passwords (json)\" },\n  { id: \"fsecurefsk\", name: \"F-Secure KEY (fsk)\" },\n  { id: \"kasperskytxt\", name: \"Kaspersky Password Manager (txt)\" },\n  { id: \"remembearcsv\", name: \"RememBear (csv)\" },\n  { id: \"passwordwallettxt\", name: \"PasswordWallet (txt)\" },\n  { id: \"mykicsv\", name: \"Myki (csv)\" },\n  { id: \"securesafecsv\", name: \"SecureSafe (csv)\" },\n  { id: \"logmeoncecsv\", name: \"LogMeOnce (csv)\" },\n  { id: \"blackberrycsv\", name: \"BlackBerry Password Keeper (csv)\" },\n  { id: \"buttercupcsv\", name: \"Buttercup (csv)\" },\n  { id: \"codebookcsv\", name: \"Codebook (csv)\" },\n  { id: \"encryptrcsv\", name: \"Encryptr (csv)\" },\n  { id: \"yoticsv\", name: \"Yoti (csv)\" },\n  { id: \"nordpasscsv\", name: \"Nordpass (csv)\" },\n  { id: \"psonojson\", name: \"Psono (json)\" },\n  { id: \"passkyjson\", name: \"Passky (json)\" },\n] as const;\n\nexport type ImportType =\n  | (typeof featuredImportOptions)[number][\"id\"]\n  | (typeof regularImportOptions)[number][\"id\"];\n","import { CollectionService } from \"@bitwarden/common/admin-console/abstractions/collection.service\";\nimport { CollectionWithIdRequest } from \"@bitwarden/common/admin-console/models/request/collection-with-id.request\";\nimport { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\nimport { KvpRequest } from \"@bitwarden/common/models/request/kvp.request\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherRequest } from \"@bitwarden/common/vault/models/request/cipher.request\";\nimport { FolderWithIdRequest } from \"@bitwarden/common/vault/models/request/folder-with-id.request\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport {\n  AscendoCsvImporter,\n  AvastCsvImporter,\n  AvastJsonImporter,\n  AviraCsvImporter,\n  BitwardenCsvImporter,\n  BitwardenPasswordProtectedImporter,\n  BlackBerryCsvImporter,\n  BlurCsvImporter,\n  ButtercupCsvImporter,\n  ChromeCsvImporter,\n  ClipperzHtmlImporter,\n  CodebookCsvImporter,\n  DashlaneCsvImporter,\n  DashlaneJsonImporter,\n  EncryptrCsvImporter,\n  EnpassCsvImporter,\n  EnpassJsonImporter,\n  FirefoxCsvImporter,\n  FSecureFskImporter,\n  GnomeJsonImporter,\n  KasperskyTxtImporter,\n  KeePass2XmlImporter,\n  KeePassXCsvImporter,\n  KeeperCsvImporter,\n  // KeeperJsonImporter,\n  LastPassCsvImporter,\n  LogMeOnceCsvImporter,\n  MSecureCsvImporter,\n  MeldiumCsvImporter,\n  MykiCsvImporter,\n  NordPassCsvImporter,\n  OnePassword1PifImporter,\n  OnePassword1PuxImporter,\n  OnePasswordMacCsvImporter,\n  OnePasswordWinCsvImporter,\n  PadlockCsvImporter,\n  PassKeepCsvImporter,\n  PasskyJsonImporter,\n  PassmanJsonImporter,\n  PasspackCsvImporter,\n  PasswordAgentCsvImporter,\n  PasswordBossJsonImporter,\n  PasswordDragonXmlImporter,\n  PasswordSafeXmlImporter,\n  PasswordWalletTxtImporter,\n  PsonoJsonImporter,\n  RememBearCsvImporter,\n  RoboFormCsvImporter,\n  SafariCsvImporter,\n  SafeInCloudXmlImporter,\n  SaferPassCsvImporter,\n  SecureSafeCsvImporter,\n  SplashIdCsvImporter,\n  StickyPasswordXmlImporter,\n  TrueKeyCsvImporter,\n  UpmCsvImporter,\n  YotiCsvImporter,\n  ZohoVaultCsvImporter,\n} from \"../importers\";\nimport { Importer } from \"../importers/importer\";\nimport {\n  featuredImportOptions,\n  ImportOption,\n  ImportType,\n  regularImportOptions,\n} from \"../models/import-options\";\nimport { ImportResult } from \"../models/import-result\";\nimport { ImportApiServiceAbstraction } from \"../services/import-api.service.abstraction\";\nimport { ImportServiceAbstraction } from \"../services/import.service.abstraction\";\n\nexport class ImportService implements ImportServiceAbstraction {\n  featuredImportOptions = featuredImportOptions as readonly ImportOption[];\n\n  regularImportOptions = regularImportOptions as readonly ImportOption[];\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private importApiService: ImportApiServiceAbstraction,\n    private i18nService: I18nService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService\n  ) {}\n\n  getImportOptions(): ImportOption[] {\n    return this.featuredImportOptions.concat(this.regularImportOptions);\n  }\n\n  async import(\n    importer: Importer,\n    fileContents: string,\n    organizationId: string = null\n  ): Promise<ImportResult> {\n    const importResult = await importer.parse(fileContents);\n    if (!importResult.success) {\n      if (!Utils.isNullOrWhitespace(importResult.errorMessage)) {\n        throw new Error(importResult.errorMessage);\n      }\n      throw new Error(this.i18nService.t(\"importFormatError\"));\n    }\n\n    if (importResult.folders.length === 0 && importResult.ciphers.length === 0) {\n      throw new Error(this.i18nService.t(\"importNothingError\"));\n    }\n\n    if (importResult.ciphers.length > 0) {\n      const halfway = Math.floor(importResult.ciphers.length / 2);\n      const last = importResult.ciphers.length - 1;\n\n      if (\n        this.badData(importResult.ciphers[0]) &&\n        this.badData(importResult.ciphers[halfway]) &&\n        this.badData(importResult.ciphers[last])\n      ) {\n        throw new Error(this.i18nService.t(\"importFormatError\"));\n      }\n    }\n\n    try {\n      if (organizationId != null) {\n        await this.handleOrganizationalImport(importResult, organizationId);\n      } else {\n        await this.handleIndividualImport(importResult);\n      }\n    } catch (error) {\n      const errorResponse = new ErrorResponse(error, 400);\n      throw this.handleServerError(errorResponse, importResult);\n    }\n    return importResult;\n  }\n\n  getImporter(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>,\n    organizationId: string = null\n  ): Importer {\n    if (promptForPassword_callback == null) {\n      return null;\n    }\n\n    const importer = this.getImporterInstance(format, promptForPassword_callback);\n    if (importer == null) {\n      return null;\n    }\n    importer.organizationId = organizationId;\n    return importer;\n  }\n\n  private getImporterInstance(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>\n  ) {\n    if (format == null) {\n      return null;\n    }\n\n    switch (format) {\n      case \"bitwardencsv\":\n        return new BitwardenCsvImporter();\n      case \"bitwardenjson\":\n      case \"bitwardenpasswordprotected\":\n        return new BitwardenPasswordProtectedImporter(\n          this.cryptoService,\n          this.i18nService,\n          promptForPassword_callback\n        );\n      case \"lastpasscsv\":\n      case \"passboltcsv\":\n        return new LastPassCsvImporter();\n      case \"keepassxcsv\":\n        return new KeePassXCsvImporter();\n      case \"aviracsv\":\n        return new AviraCsvImporter();\n      case \"blurcsv\":\n        return new BlurCsvImporter();\n      case \"safeincloudxml\":\n        return new SafeInCloudXmlImporter();\n      case \"padlockcsv\":\n        return new PadlockCsvImporter();\n      case \"keepass2xml\":\n        return new KeePass2XmlImporter();\n      case \"chromecsv\":\n      case \"operacsv\":\n      case \"vivaldicsv\":\n        return new ChromeCsvImporter();\n      case \"firefoxcsv\":\n        return new FirefoxCsvImporter();\n      case \"upmcsv\":\n        return new UpmCsvImporter();\n      case \"saferpasscsv\":\n        return new SaferPassCsvImporter();\n      case \"safaricsv\":\n        return new SafariCsvImporter();\n      case \"meldiumcsv\":\n        return new MeldiumCsvImporter();\n      case \"1password1pif\":\n        return new OnePassword1PifImporter();\n      case \"1password1pux\":\n        return new OnePassword1PuxImporter();\n      case \"1passwordwincsv\":\n        return new OnePasswordWinCsvImporter();\n      case \"1passwordmaccsv\":\n        return new OnePasswordMacCsvImporter();\n      case \"keepercsv\":\n        return new KeeperCsvImporter();\n      // case \"keeperjson\":\n      //   return new KeeperJsonImporter();\n      case \"passworddragonxml\":\n        return new PasswordDragonXmlImporter();\n      case \"enpasscsv\":\n        return new EnpassCsvImporter();\n      case \"enpassjson\":\n        return new EnpassJsonImporter();\n      case \"pwsafexml\":\n        return new PasswordSafeXmlImporter();\n      case \"dashlanecsv\":\n        return new DashlaneCsvImporter();\n      case \"dashlanejson\":\n        return new DashlaneJsonImporter();\n      case \"msecurecsv\":\n        return new MSecureCsvImporter();\n      case \"stickypasswordxml\":\n        return new StickyPasswordXmlImporter();\n      case \"truekeycsv\":\n        return new TrueKeyCsvImporter();\n      case \"clipperzhtml\":\n        return new ClipperzHtmlImporter();\n      case \"roboformcsv\":\n        return new RoboFormCsvImporter();\n      case \"ascendocsv\":\n        return new AscendoCsvImporter();\n      case \"passwordbossjson\":\n        return new PasswordBossJsonImporter();\n      case \"zohovaultcsv\":\n        return new ZohoVaultCsvImporter();\n      case \"splashidcsv\":\n        return new SplashIdCsvImporter();\n      case \"passkeepcsv\":\n        return new PassKeepCsvImporter();\n      case \"gnomejson\":\n        return new GnomeJsonImporter();\n      case \"passwordagentcsv\":\n        return new PasswordAgentCsvImporter();\n      case \"passpackcsv\":\n        return new PasspackCsvImporter();\n      case \"passmanjson\":\n        return new PassmanJsonImporter();\n      case \"avastcsv\":\n        return new AvastCsvImporter();\n      case \"avastjson\":\n        return new AvastJsonImporter();\n      case \"fsecurefsk\":\n        return new FSecureFskImporter();\n      case \"kasperskytxt\":\n        return new KasperskyTxtImporter();\n      case \"remembearcsv\":\n        return new RememBearCsvImporter();\n      case \"passwordwallettxt\":\n        return new PasswordWalletTxtImporter();\n      case \"mykicsv\":\n        return new MykiCsvImporter();\n      case \"securesafecsv\":\n        return new SecureSafeCsvImporter();\n      case \"logmeoncecsv\":\n        return new LogMeOnceCsvImporter();\n      case \"blackberrycsv\":\n        return new BlackBerryCsvImporter();\n      case \"buttercupcsv\":\n        return new ButtercupCsvImporter();\n      case \"codebookcsv\":\n        return new CodebookCsvImporter();\n      case \"encryptrcsv\":\n        return new EncryptrCsvImporter();\n      case \"yoticsv\":\n        return new YotiCsvImporter();\n      case \"nordpasscsv\":\n        return new NordPassCsvImporter();\n      case \"psonojson\":\n        return new PsonoJsonImporter();\n      case \"passkyjson\":\n        return new PasskyJsonImporter();\n      default:\n        return null;\n    }\n  }\n\n  private async handleIndividualImport(importResult: ImportResult) {\n    const request = new ImportCiphersRequest();\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.folders != null) {\n      for (let i = 0; i < importResult.folders.length; i++) {\n        const f = await this.folderService.encrypt(importResult.folders[i]);\n        request.folders.push(new FolderWithIdRequest(f));\n      }\n    }\n    if (importResult.folderRelationships != null) {\n      importResult.folderRelationships.forEach((r) =>\n        request.folderRelationships.push(new KvpRequest(r[0], r[1]))\n      );\n    }\n    return await this.importApiService.postImportCiphers(request);\n  }\n\n  private async handleOrganizationalImport(importResult: ImportResult, organizationId: string) {\n    const request = new ImportOrganizationCiphersRequest();\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      importResult.ciphers[i].organizationId = organizationId;\n      const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.collections != null) {\n      for (let i = 0; i < importResult.collections.length; i++) {\n        importResult.collections[i].organizationId = organizationId;\n        const c = await this.collectionService.encrypt(importResult.collections[i]);\n        request.collections.push(new CollectionWithIdRequest(c));\n      }\n    }\n    if (importResult.collectionRelationships != null) {\n      importResult.collectionRelationships.forEach((r) =>\n        request.collectionRelationships.push(new KvpRequest(r[0], r[1]))\n      );\n    }\n    return await this.importApiService.postImportOrganizationCiphers(organizationId, request);\n  }\n\n  private badData(c: CipherView) {\n    return (\n      (c.name == null || c.name === \"--\") &&\n      c.type === CipherType.Login &&\n      c.login != null &&\n      Utils.isNullOrWhitespace(c.login.password)\n    );\n  }\n\n  private handleServerError(errorResponse: ErrorResponse, importResult: ImportResult): Error {\n    if (errorResponse.validationErrors == null) {\n      return new Error(errorResponse.message);\n    }\n\n    let errorMessage = \"\";\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const i = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Ciphers\":\n          item = importResult.ciphers[i];\n          itemType = CipherType[item.type];\n          break;\n        case \"Folders\":\n          item = importResult.folders[i];\n          itemType = \"Folder\";\n          break;\n        case \"Collections\":\n          item = importResult.collections[i];\n          itemType = \"Collection\";\n          break;\n        default:\n          return;\n      }\n\n      if (index > 0) {\n        errorMessage += \"\\n\\n\";\n      }\n\n      if (itemType !== \"Folder\" && itemType !== \"Collection\") {\n        errorMessage += \"[\" + (i + 1) + \"] \";\n      }\n\n      errorMessage += \"[\" + itemType + '] \"' + item.name + '\": ' + value;\n    });\n\n    return new Error(errorMessage);\n  }\n}\n"],"names":["disabledByPolicy","this","_disabledByPolicy","constructor","cryptoService","i18nService","platformUtilsService","exportService","eventCollectionService","policyService","win","logService","userVerificationService","formBuilder","fileDownloadService","dialogService","onSaved","exportForm","group","format","secret","filePassword","required","confirmFilePassword","fileEncryptionType","AccountEncrypted","formatOptions","name","value","destroy$","Subject","ngOnInit","policyAppliesToActiveUser$","DisablePersonalVaultExport","pipe","takeUntil","subscribe","policyAppliesToActiveUser","disable","merge","get","valueChanges","startWith","adjustValidators","ngOnDestroy","next","encryptedFormat","doExport","formPromise","getExportData","data","downloadFile","saved","collectEvent","setValue","clearValidators","e","error","submit","showToast","t","warningDialog","verifyUser","message","openSimpleDialog","title","key","content","acceptButtonText","type","WARNING","emit","FileEncrypted","getPasswordProtectedExport","getExport","getFileName","prefix","extension","collect","User_ClientExportedVault","reset","controls","enable","csv","fileName","download","blobData","blobOptions","ExportComponent","modalService","super","window","encryptedExportType","isFileEncryptedExport","markAllAsTouched","valid","confirmDescription","isAccountEncryptedExport","ref","open","allowMultipleModals","confirmButtonText","modalTitle","onClosedPromise","ImportSuccessDialogComponent","dialogRef","dataSource","buildResultList","logins","cards","identities","secureNotes","ciphers","map","c","Login","Card","SecureNote","Identity","list","push","icon","count","folders","length","collections","FilePasswordPromptComponent","modalRef","markAsTouched","close","cancel","ImportComponent","importService","router","syncService","loading","organizationId","_importBlockedByPolicy","importBlockedByPolicy","onSuccessfulImport","navigate","setImportOptions","PersonalOwnership","importer","getImporter","getFilePassword","files","document","getElementById","fileContents","getFileContents","result","import","fullSync","getFormatInstructionTitle","results","featuredImportOptions","concat","importOptions","filter","o","id","regularImportOptions","sort","a","b","collator","compare","localeCompare","setSelectedFile","event","fileInputEl","target","fileSelected","heightAuto","buttonsStyling","iconHtml","input","inputValue","inputAttributes","readonly","titleText","text","showConfirmButton","onOpen","popupEl","querySelector","scrollTo","file","extract1PuxContent","Promise","resolve","reject","reader","FileReader","readAsText","onload","evt","pre","DOMParser","parseFromString","textContent","onerror","loadAsync","then","zip","async","complete","BoxRowDirective","elRef","el","nativeElement","formEls","Array","from","querySelectorAll","forEach","formEl","addEventListener","classList","add","remove","onClick","contains","tagName","toLowerCase","inputEl","click","focus","ExportScopeCalloutComponent","organizationService","stateService","show","hasOrganizations","scopeConfig","description","scopeIdentifier","getEmail","ImportApiServiceAbstraction","ImportApiService","apiService","postImportCiphers","request","send","postImportOrganizationCiphers","ImportServiceAbstraction","CollectionWithIdRequest","collection","ImportCiphersRequest","folderRelationships","ImportOrganizationCiphersRequest","collectionRelationships","KvpRequest","success","newLineRegex","passwordFieldNames","usernameFieldNames","notesFieldNames","uriFieldNames","parseCsvOptions","encoding","skipEmptyLines","organization","parseXml","doc","parseCsv","header","options","parseOptions","Object","assign","splitNewLine","join","trim","errors","row","warning","parseSingleRowCsv","rowData","isNullOrWhitespace","parsedRow","makeUriArray","uri","loginUri","fixUri","match","returnArr","u","indexOf","substring","nameFromUrl","url","hostname","getHostname","startsWith","replace","str","getValueOrDefault","defaultValue","split","getCardBrand","cardNum","re","RegExp","test","setCardExpiration","cipher","expiration","expiryRegex","expiryMatch","card","expMonth","groups","month","year","expYear","moveFoldersToCollections","r","f","querySelectorDirectChild","parentEl","query","els","querySelectorAllDirectChild","parentNode","initLoginCipher","favorite","notes","fields","login","cleanupCipher","processKvp","Text","search","field","processFolder","folderName","folderIndex","addFolder","i","convertToNoteIfNeeded","username","password","uris","secureNote","Generic","processFullName","fullName","nameParts","identity","firstName","lastName","middleName","slice","AscendoCsvImporter","parse","val","fieldLower","AvastCsvImporter","web","AvastJsonImporter","JSON","custName","note","pwd","loginName","label","cardholderName","holderName","number","cardNumber","code","cvv","brand","expirationDate","AviraCsvImporter","website","secondary_username","BlackBerryCsvImporter","grouping","fav","extra","ChromeCsvImporter","androidPatternRegex","BitwardenCsvImporter","col","addCollection","collectionIndex","folder","reprompt","parseInt","None","toString","console","delimPosition","lastIndexOf","substr","totp","login_totp","login_username","login_password","login_uri","BitwardenJsonImporter","items","encrypted","parseEncrypted","parseDecrypted","encKeyValidation_DO_NOT_EDIT","orgKey","getOrgKey","encKeyValidation","decryptToUtf8","errorMessage","groupingsMap","Map","toDomain","view","decrypt","set","collectionIds","passwordHistory","folderId","has","cId","toView","BitwardenPasswordProtectedImporter","promptForPassword_callback","parsedData","passwordProtected","cannotParseFile","checkPassword","encData","clearTextData","jdoc","makePinKey","salt","kdfType","kdfIterations","kdfMemory","kdfParallelism","BlurCsvImporter","domain","email","OfficialProps","ButtercupCsvImporter","URL","processingCustomFields","prop","hasOwnProperty","ClipperzHtmlImporter","textarea","entry","currentVersion","property","actionType","labelLower","CodebookCsvImporter","Category","Favorite","Entry","Note","Username","Email","Password","TOTP","Website","Phone","PIN","Account","Date","_mappedCredentialsColumns","Set","_mappedPersonalInfoAsIdentityColumns","_mappedSecureNoteColumns","DashlaneCsvImporter","x","parsePersonalInformationRecordAsIdentity","rowKeys","keys","category","parseCredentialsRecord","parsePaymentRecord","parseIdRecord","parsePersonalInformationRecord","parseSecureNoteRecords","otpSecret","importUnmappedFields","account_name","mappedValues","cc_number","expiration_month","expiration_year","account_holder","account_number","licenseNumber","passportNumber","state","ssn","first_name","middle_name","last_name","item_name","dataRow","phone","phone_number","address1","address","city","postalCode","country","item","HandledResults","DashlaneJsonImporter","ADDRESS","processAddress","AUTHENTIFIANT","processAuth","BANKSTATEMENT","processNote","IDCARD","PAYMENTMEANS_CREDITCARD","processCard","IDENTITY","processIdentity","credential","secondaryLogin","obj","pseudo","addressName","addressFull","zipcode","toUpperCase","bank","owner","nameProperty","EncryptrCsvImporter","Label","Notes","CVV","expiry","Expiry","expParts","EnpassCsvImporter","firstRow","containsField","fieldValue","fieldName","fieldNameLower","androidUrlRegex","EnpassJsonImporter","foldersMap","foldersIndexMap","folderTree","buildFolderTree","flattenFolderTree","template_type","processLogin","some","urls","cleanedValue","sensitive","Hidden","uuid","children","parent_uuid","titlePrefix","tree","FirefoxCsvImporter","FskEntryTypesEnum","FSecureFskImporter","parseEntry","service","handleLoginEntry","CreditCard","handleCreditCardEntry","creditNumber","creditCvv","creditExpiry","GnomeJsonImporter","keyRing","display_name","attributes","username_value","attr","NotesHeader","ApplicationsHeader","WebsitesHeader","Delimiter","KasperskyTxtImporter","notesData","applicationsData","websitesData","workingData","parts","parseDataCategory","applications","websites","n","w","nameKey","p","itemComment","itemCommentKey","l","colonIndex","size","KeePass2XmlImporter","KeePassFileNode","RootNode","rootGroup","traverse","node","isRootNode","groupPrefixName","groupName","nameEl","cipherIndex","entryString","valueEl","keyEl","attrs","ProtectInMemory","KeePassXCsvImporter","Title","Group","KeeperCsvImporter","LastPassCsvImporter","hasFolder","buildBaseCipher","parseSecureNote","parseCard","parseIdentity","ccnum","cardCipher","profilename","firstname","lastname","ccname","cccsc","ccexp","ccexpParts","middlename","company","address2","address3","charAt","extraParts","processedNote","typeParts","mappedData","parseSecureNoteMapping","Number","undefined","monthString","getMonth","isNaN","Company","State","Country","dataObj","processingNotes","extraPart","LogMeOnceCsvImporter","MeldiumCsvImporter","DisplayName","UserName","Url","MSecureCsvImporter","mappedBaseColumns","_mappedUserAccountColumns","_mappedCreditCardColumns","_mappedIdentityColumns","_mappedIdCardColumns","_mappedTwoFaColumns","_mappedUserNoteColumns","MykiCsvImporter","nickname","additionalInfo","twofaSecret","authToken","cardName","exp_month","exp_year","firstAddressLine","secondAddressLine","zipCode","idType","idName","idCountry","idNumber","NordPassCsvImporter","record","recordType","evaluateType","cardholdername","cardnumber","cvc","expirydate","full_name","CategoryEnum","LoginFieldTypeEnum","OnePassword1PifImporter","line","trashed","hmac","processStandardItem","processWinOpVaultItem","overview","URLs","details","parsePasswordHistory","notesPlain","parseFields","sections","section","openContents","faveIndex","typeName","location","secureContents","maxSize","h","time","ph","lastUsedDate","designationKey","valueKey","k","toUTCString","fieldDesignation","street","fieldType","OnePassword1PuxImporter","accounts","vaults","vault","categoryUuid","Database","WirelessRouter","Server","API_Credential","BankAccount","SoftwareLicense","EmailAccount","MedicalRecord","DriversLicense","OutdoorLicense","Membership","Passport","RewardsProgram","SocialSecurityNumber","favIndex","processOverview","processLoginFields","processDetails","processSections","tags","capitalize","inputString","loginFields","loginField","designation","CheckBox","Boolean","parseSectionFields","anyField","getFieldName","extractValue","fillLogin","fillApiCredentials","fillCreditCard","fillBankAccount","fillIdentity","fillDriversLicense","fillOutdoorLicense","fillMembership","fillPassport","fillRewardsProgram","fillSSN","email_address","provider","guarded","date","monthYear","historyItems","CipherImportContext","importRecord","lowerProperty","IgnoredProperties","OnePasswordCsvImporter","loginPropertyParsers","setLoginUsername","setLoginPassword","setLoginUris","creditCardPropertyParsers","setCreditCardNumber","setCreditCardVerification","setCreditCardCardholderName","setCreditCardExpiry","identityPropertyParsers","setIdentityFirstName","setIdentityInitial","setIdentityLastName","setIdentityUserName","setIdentityEmail","setIdentityPhone","setIdentityCompany","quoteChar","escapeChar","getProp","setNotes","setCipherType","altUsername","context","setKnownLoginValue","setKnownCreditCardValue","setKnownIdentityValue","setUnknownValue","entries","reduce","agg","getPropByRegexp","regexp","matchingKeys","getPropIncluding","includesMap","includes","func","bind","readableDate","OnePasswordMacCsvImporter","OnePasswordWinCsvImporter","setIdentityAddress","expSplit","PadlockCsvImporter","headers","v","tag","PassKeepCsvImporter","getValue","PasskyJsonImporter","passkyExport","passwords","PassmanJsonImporter","otp","custom_fields","customField","field_type","PasspackCsvImporter","tagsJson","Tags","tagJson","__parsed_extra","fieldsJson","extraFields","fieldJson","PasswordAgentCsvImporter","newVersion","altFormat","PasswordBossJsonImporter","login_url","identifiers","valObj","expDate","getFullYear","cf","PasswordDragonXmlImporter","records","categoryText","accountName","userId","PasswordSafeXmlImporter","passwordSafe","notesDelimiter","getAttribute","groupText","PasswordWalletTxtImporter","PsonoJsonImporter","WEBSITE_mappedValues","APP_PWD_mappedValues","BOOKMARK_mappedValues","NOTES_mappedValues","TOTP_mappedValues","ENV_VARIABLES_mappedValues","GPG_mappedValues","psonoExport","parseFolders","handleItemParsing","parsePsonoItem","parseWebsiteLogins","parseApplicationPasswords","parseEnvironmentVariables","parseTOTP","parseBookmarks","parseNotes","website_password_title","website_password_notes","website_password_username","website_password_password","website_password_url","website_password_auto_submit","website_password_url_filter","application_password_title","application_password_notes","application_password_username","application_password_password","bookmark_title","bookmark_notes","bookmark_url","note_title","note_notes","totp_title","totp_notes","totp_code","environment_variables_title","environment_variables_notes","environment_variables_variables","KvPair","parseGPG","mail_gpg_own_key_title","mail_gpg_own_key_public","mail_gpg_own_key_name","mail_gpg_own_key_email","mail_gpg_own_key_private","RememBearCsvImporter","trash","cardholder","verification","expiryMonth","expMonthNumber","expiryYear","expYearNumber","pin","RoboFormCsvImporter","Folder","Name","Pwd","Rf_fields","SafariCsvImporter","OTPAuth","SafeInCloudXmlImporter","labelEl","cardEl","labelIdEl","labelId","fieldEl","notesEl","setPassword","candidates","choice","SaferPassCsvImporter","SecureSafeCsvImporter","Comment","SplashIdCsvImporter","parseFieldsToNotes","startIndex","StickyPasswordXmlImporter","loginNodes","loginNode","accountId","usernameText","passwordText","linkText","notesText","groupId","accountLogin","account","parentElement","buildGroupText","PropertiesToIgnore","TrueKeyCsvImporter","memo","kind","expiryDate","document_content","UpmCsvImporter","YotiCsvImporter","ZohoVaultCsvImporter","ChamberName","parseData","SecretData","CustomData","ImportService","cipherService","folderService","importApiService","collectionService","getImportOptions","importResult","Error","halfway","Math","floor","last","badData","handleOrganizationalImport","handleIndividualImport","errorResponse","handleServerError","getImporterInstance","encrypt","validationErrors","index","itemType"],"sourceRoot":""}