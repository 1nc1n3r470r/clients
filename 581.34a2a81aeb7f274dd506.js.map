{"version":3,"file":"581.34a2a81aeb7f274dd506.js","mappings":"woBAmBO,MAAM,EAMGA,uBACZ,OAAOC,KAAKC,iBACd,CAkBAC,YACYC,EACAC,EACAC,EACAC,EACAC,EACFC,EACEC,EACFC,EACAC,EACAC,EACEC,EACAC,GAXA,KAAAX,cAAAA,EACA,KAAAC,YAAAA,EACA,KAAAC,qBAAAA,EACA,KAAAC,cAAAA,EACA,KAAAC,uBAAAA,EACF,KAAAC,cAAAA,EACE,KAAAC,IAAAA,EACF,KAAAC,WAAAA,EACA,KAAAC,wBAAAA,EACA,KAAAC,YAAAA,EACE,KAAAC,oBAAAA,EACA,KAAAC,cAAAA,EArCF,KAAAC,QAAU,IAAI,MAGhB,KAAAd,mBAAoB,EAM5B,KAAAe,WAAahB,KAAKY,YAAYK,MAAM,CAClCC,OAAQ,CAAC,QACTC,OAAQ,CAAC,IACTC,aAAc,CAAC,GAAI,eACnBC,oBAAqB,CAAC,GAAI,eAC1BC,mBAAoB,CAAC,yBAGvB,KAAAC,cAAgB,CACd,CAAEC,KAAM,QAASC,MAAO,QACxB,CAAED,KAAM,OAAQC,MAAO,OACvB,CAAED,KAAM,oBAAqBC,MAAO,mBAG9B,KAAAC,SAAW,IAAIC,EAAA,CAepB,CAEGC,W,yCACJ5B,KAAKQ,cACFqB,2BAA2B,iCAC3BC,MAAK,EAAAC,EAAA,GAAU/B,KAAK0B,WACpBM,WAAWC,IACVjC,KAAKC,kBAAoBgC,EACrBjC,KAAKD,kBACPC,KAAKgB,WAAWkB,S,KAItB,EAAAC,EAAA,GACEnC,KAAKgB,WAAWoB,IAAI,UAAUC,aAC9BrC,KAAKgB,WAAWoB,IAAI,sBAAsBC,cAEzCP,MAAK,EAAAC,EAAA,GAAU/B,KAAK0B,WACpBI,MAAK,EAAAQ,EAAA,GAAU,IACfN,WAAU,IAAMhC,KAAKuC,oBAC1B,G,CAEAC,cACExC,KAAK0B,SAASe,MAChB,CAEIC,sBACF,MAAuB,mBAAhB1C,KAAKkB,MACd,CAEgByB,W,yCACd,IACE3C,KAAK4C,YAAc5C,KAAK6C,gBACxB,MAAMC,QAAa9C,KAAK4C,YACxB5C,KAAK+C,aAAaD,GAClB9C,KAAKgD,cACChD,KAAKiD,eACXjD,KAAKgB,WAAWoB,IAAI,UAAUc,SAAS,IACvClD,KAAKgB,WAAWmC,iB,CAChB,MAAOC,GACPpD,KAAKU,WAAW2C,MAAMD,E,CAE1B,G,CAEME,S,yCACJ,GAAItD,KAAKD,iBAMP,YALAC,KAAKK,qBAAqBkD,UACxB,QACA,KACAvD,KAAKI,YAAYoD,EAAE,sCAMvB,WAD8BxD,KAAKyD,iBAEjC,OAEF,MAAMtC,EAASnB,KAAKgB,WAAWoB,IAAI,UAAUX,MAE7C,UACQzB,KAAKW,wBAAwB+C,WAAWvC,E,CAC9C,MAAOiC,GAEP,YADApD,KAAKK,qBAAqBkD,UAAU,QAASvD,KAAKI,YAAYoD,EAAE,iBAAkBJ,EAAEO,Q,CAItF3D,KAAK2C,UACP,G,CAEMc,gB,yCACJ,OAAIzD,KAAK0C,sBACM1C,KAAKc,cAAc8C,iBAAiB,CAC/CC,MAAO,CAAEC,IAAK,sBACdC,QACE/D,KAAKI,YAAYoD,EAAE,2BACnB,IACAxD,KAAKI,YAAYoD,EAAE,+BACrBQ,iBAAkB,CAAEF,IAAK,eACzBG,KAAM,qBAGKjE,KAAKc,cAAc8C,iBAAiB,CAC/CC,MAAO,CAAEC,IAAK,sBACdC,QAAS,CAAED,IAAK,qBAChBE,iBAAkB,CAAEF,IAAK,eACzBG,KAAM,cAGZ,G,CAEUjB,QACRhD,KAAKe,QAAQmD,MACf,CAEUrB,gBACR,MACkB,mBAAhB7C,KAAKkB,QACLlB,KAAKsB,qBAAuB,mBAErBtB,KAAKM,cAAc6D,2BAA2BnE,KAAKoB,cAEnDpB,KAAKM,cAAc8D,UAAUpE,KAAKkB,OAAQ,KAErD,CAEUmD,YAAYC,GACpB,IAAIC,EAAYvE,KAAKkB,OASrB,MARoB,mBAAhBlB,KAAKkB,SAELoD,EADY,MAAVA,EACO,YAEA,aAAeA,EAE1BC,EAAY,QAEPvE,KAAKM,cAAc+D,YAAYC,EAAQC,EAChD,CAEgBtB,e,+CACRjD,KAAKO,uBAAuBiE,QAAQ,8BAC5C,G,CAEItD,aACF,OAAOlB,KAAKgB,WAAWoB,IAAI,UAAUX,KACvC,CAEIL,mBACF,OAAOpB,KAAKgB,WAAWoB,IAAI,gBAAgBX,KAC7C,CAEIJ,0BACF,OAAOrB,KAAKgB,WAAWoB,IAAI,uBAAuBX,KACpD,CAEIH,yBACF,OAAOtB,KAAKgB,WAAWoB,IAAI,sBAAsBX,KACnD,CAEAc,mBACEvC,KAAKgB,WAAWoB,IAAI,uBAAuBqC,QAC3CzE,KAAKgB,WAAWoB,IAAI,gBAAgBqC,QAEhCzE,KAAK0C,iBAAmB1C,KAAKsB,oBAAsB,oBACrDtB,KAAKgB,WAAW0D,SAAStD,aAAauD,SACtC3E,KAAKgB,WAAW0D,SAASrD,oBAAoBsD,WAE7C3E,KAAKgB,WAAW0D,SAAStD,aAAac,UACtClC,KAAKgB,WAAW0D,SAASrD,oBAAoBa,UAEjD,CAEQa,aAAa6B,GACnB,MAAMC,EAAW7E,KAAKqE,cACtBrE,KAAKa,oBAAoBiE,SAAS,CAChCD,SAAUA,EACVE,SAAUH,EACVI,YAAa,CAAEf,KAAM,eAEzB,E,iCAtMW,GAAe,4I,mBAAf,EAAe,8B,wdCN1B,0B,gBACE,S,gBACF,S,MAF0B,gDACxB,+E,yBAEF,uC,sBACE,wC,2BASM,qBAA0D,SAAY,S,yBAA9B,uBAAkB,sB,0CA6D5D,SACE,kDACE,+CAAW,S,gBAA2B,QACtC,8CAOA,gDAKE,mGACD,QACD,gDAAU,U,iBAAwC,QACpD,iCACA,oDACE,iDAAW,U,iBAAkC,QAC7C,gDAOA,iDAKE,mGACD,QACH,iCACF,8B,0BAlCe,0CAaT,6CAEQ,wDAGC,kDAaT,4C,2BAvFR,SACE,wCACE,4CACE,S,gBACF,QAEA,4CACE,0CACE,kDASF,mCACA,2CACE,kDACE,U,iBACF,QACF,mCACF,iCAEA,8CACE,U,iBACF,QAEA,8CACE,2CACE,kDASF,mCACA,2CACE,kDAA2E,U,iBAEzE,QACJ,mCACF,iCAEA,8CACE,U,iBACF,QACF,+BACA,sCAEA,6DAqCF,8B,sBAxFM,gFAUI,+DAA8C,yEAO9C,yFAMJ,kGAUI,4DAA2C,sEAM8B,iDAO7E,kGAKW,gF,gFArFvB,oBAEE,6DAAY,QAAAX,SAAQ,IAKpB,iCACE,gCAAI,S,gBAA0B,QAChC,wBAEA,kDAGA,8DAKA,qCACE,qCACE,gDACE,+CAA2C,U,iBAAyB,QACpE,4CACE,qDACF,+BACF,6BACF,2BACF,yBACA,mCACE,sCACE,yDA6FA,6CAME,wC,iBACA,wCAAM,U,iBAA4B,QACpC,6BACF,2BACF,yBACF,sB,oCApIE,oCAA4B,0BAKtB,0CAGgE,0CAKnE,2CAM8C,0CAEnB,0CAOX,oDAgGb,yDAA6C,0CAGT,+CAC9B,4C,EC9GP,MAAM2B,UAAwB,EAKnC/E,YACEC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAE,EACAC,EACAC,EACAC,EACQqE,EACRpE,GAEAqE,MACEhF,EACAC,EACAC,EACAC,EACAC,EACAC,EACA4E,OACA1E,EACAC,EACAC,EACAC,EACAC,GAfM,KAAAoE,aAAAA,EAdV,KAAAG,oBAAsB,IA+BtB,CAEM/B,S,yCACJ,GAAItD,KAAKsF,uBAAyBtF,KAAKoB,cAAgBpB,KAAKqB,oBAM1D,YALArB,KAAKK,qBAAqBkD,UACxB,QACAvD,KAAKI,YAAYoD,EAAE,iBACnBxD,KAAKI,YAAYoD,EAAE,iDAMvB,GADAxD,KAAKgB,WAAWuE,oBACXvF,KAAKgB,WAAWwE,MACnB,OAGF,GAAIxF,KAAKD,iBAMP,YALAC,KAAKK,qBAAqBkD,UACxB,QACA,KACAvD,KAAKI,YAAYoD,EAAE,6CAKIxD,KAAK0D,eAKhC1D,KAAK2C,UACP,G,CAEUK,QACRmC,MAAMnC,QACNhD,KAAKK,qBAAqBkD,UAAU,UAAW,KAAMvD,KAAKI,YAAYoD,EAAE,iBAC1E,CAEQE,aACN,IAAI+B,EAAqB,oBACrBzF,KAAKsF,sBACPG,EAAqB,iCACZzF,KAAK0F,2BACdD,EAAqB,2BAGvB,MAAME,EAAM3F,KAAKkF,aAAaU,KAAK,KAAiC,CAClEC,qBAAqB,EACrB/C,KAAM,CACJ2C,mBAAoBA,EACpBK,kBAAmB,cACnBC,WAAY,wBAIhB,GAAW,MAAPJ,EAIJ,OAAOA,EAAIK,iBACb,CAEIV,4BACF,MACkB,mBAAhBtF,KAAKkB,QACLlB,KAAKsB,qBAAuB,kBAEhC,CAEIoE,+BACF,MACkB,mBAAhB1F,KAAKkB,QACLlB,KAAKsB,qBAAuB,qBAEhC,E,iCA5GW2D,GAAe,yI,mBAAfA,EAAe,0sDDtB5B,cACA,wCAwIA,e,MAnIG,oC,qbEQK,gBACE,wCACE,0CACA,S,gBACF,QACA,wCAAY,SAAa,QAC3B,gC,yBAJO,4CACH,kEAEU,uB,2BALd,6C,iBAOF,qB,yBAP2B,sC,ECC1B,MAAMgB,EAGX/F,YAAmBgG,EAAkDpD,GAAlD,KAAAoD,UAAAA,EAAkD,KAAApD,KAAAA,EAF3D,KAAAqD,WAAa,IAAI,GAE+D,CAE1FvE,WACmB,MAAb5B,KAAK8C,OACP9C,KAAKmG,WAAWrD,KAAO9C,KAAKoG,kBAEhC,CAEQA,kBACN,IAAIC,EAAS,EACTC,EAAQ,EACRC,EAAa,EACbC,EAAc,EAClBxG,KAAK8C,KAAK2D,QAAQC,KAAKC,IACrB,OAAQA,EAAE1C,MACR,KAAK,UACHoC,IACA,MACF,KAAK,SACHC,IACA,MACF,KAAK,eACHE,IACA,MACF,KAAK,aACHD,I,IAON,MAAMK,EAAqB,GAuB3B,OAtBIP,EAAS,GACXO,EAAKC,KAAK,CAAEC,KAAM,QAAS7C,KAAM,YAAa8C,MAAOV,IAEnDC,EAAQ,GACVM,EAAKC,KAAK,CAAEC,KAAM,cAAe7C,KAAM,WAAY8C,MAAOT,IAExDC,EAAa,GACfK,EAAKC,KAAK,CAAEC,KAAM,UAAW7C,KAAM,eAAgB8C,MAAOR,IAExDC,EAAc,GAChBI,EAAKC,KAAK,CAAEC,KAAM,cAAe7C,KAAM,iBAAkB8C,MAAOP,IAE9DxG,KAAK8C,KAAKkE,QAAQC,OAAS,GAC7BL,EAAKC,KAAK,CAAEC,KAAM,SAAU7C,KAAM,UAAW8C,MAAO/G,KAAK8C,KAAKkE,QAAQC,SAEpEjH,KAAK8C,KAAKoE,YAAYD,OAAS,GACjCL,EAAKC,KAAK,CACRC,KAAM,aACN7C,KAAM,cACN8C,MAAO/G,KAAK8C,KAAKoE,YAAYD,SAG1BL,CACT,E,iCA3DWX,GAA4B,kBAGU,MAAW,E,mBAHjDA,EAA4B,sWDhBzC,sBACE,kCACE,S,gBACF,QAEA,mCACE,kCAAM,S,iBAAoE,QAC1E,2CACE,iCACE,sCACE,0CAAY,U,iBAAmB,QAC/B,0CAAY,U,iBAAoB,QAClC,+BACF,6BACA,qDASF,2BACF,yBAEA,+BACE,wCACE,U,iBACF,QACF,yBACF,uBACA,gB,MA9BI,2DAIM,+EACK,0CAGO,oCACA,qCAiBhB,uD,6LEpBC,MAAMkB,EAGXjH,YAAoBkH,GAAA,KAAAA,SAAAA,EAFpB,KAAAhG,aAAe,IAAI,KAAY,GAAI,cAEM,CAEzCkC,SACEtD,KAAKoB,aAAaiG,gBACbrH,KAAKoB,aAAaoE,OAIvBxF,KAAKoH,SAASE,MAAMtH,KAAKoB,aAAaK,MACxC,CAEA8F,SACEvH,KAAKoH,SAASE,MAAM,KACtB,E,iCAhBWH,GAA2B,a,mBAA3BA,EAA2B,u9BCPxC,cACA,+B,gBAME,iCACE,sCAAY,oCAAY,EAAA7D,QAAQ,IAC9B,sCACE,wCACE,U,uCACF,QACA,yCAGE,U,iBACA,6BACE,iDAAW,U,iBAAkC,QAC7C,+CAQA,gDACF,iCACF,+BACA,0CAGE,+CACE,4CAAM,U,iBAAyB,QACjC,iCACA,+CAAuD,iCAAS,EAAAiE,QAAQ,IACtE,4CAAM,U,iBAAqB,QAC7B,iCACF,+BACF,6BACF,2BACF,yBACF,uBACA,gB,MAvCE,kEAMQ,2FAKA,oFAEa,mDAKT,6CAWI,2CAGA,sC,yfCnClB,0BACE,S,gBACF,S,MADE,gF,0BAeQ,qBAAiE,SAAY,S,yBAA7B,sBAAiB,sB,2BAG/D,qBAAyD,SAAY,S,yBAA7B,sBAAiB,sB,2BAF3D,SACE,+CACA,oDACF,iC,qBADwB,yC,wBAO9B,SACE,yEACA,gBACE,kEAA4C,QAEhD,0B,uBACA,SACE,yEACA,gBACE,sEAAgD,QAEpD,0B,uBACA,SACE,6IAEF,Q,uBACA,SACE,4HAEF,Q,wBACA,SACE,yKAEF,Q,wBACA,SACE,2IAEF,Q,wBACA,SACE,gMAEF,Q,wBACA,SACE,kJAEF,Q,wBACA,SACE,mJAEF,Q,wBACA,SACE,4MAEF,Q,wBACA,SACE,yKAEF,Q,wBACA,SACE,iQAGF,Q,wBAWE,gBACE,8FACF,Q,2BALF,SAGE,8CAGA,yEACA,gBACE,oEAA8C,QAElD,2B,sBAPS,6C,yBAQT,SACE,yEACA,gBACE,qEAA+C,QAChD,mBACH,Q,wBACA,SACE,yEACA,gBACE,oEAA8C,QAC/C,mBACH,Q,wBACA,SAQE,yEACA,gBACE,uEAAiD,QAClD,mBACH,Q,wBACA,SACE,oPAGF,Q,wBACA,SACE,4TAIF,Q,wBACA,SACE,+LAEF,Q,wBACA,SACE,uJAEF,Q,wBACA,SACE,yQAGF,Q,wBACA,SACE,oLAEF,Q,wBACA,SACE,4IAEF,Q,wBACA,SACE,yMAEF,Q,wBACA,SACE,mNAEF,Q,wBACA,SACE,yQAGF,Q,wBACA,SACE,oYAIF,Q,wBACA,SACE,uSAGF,Q,wBACA,SACE,0OAGF,Q,wBACA,SACE,+KAEF,Q,wBACA,SACE,kVAIA,gBAAM,2BAAe,QAAO,mBAC9B,Q,wBACA,SACE,yMAEF,Q,wBACA,SACE,qLAEF,Q,wBACA,SACE,yGACA,gBACG,uCAA2B,QAE9B,qDAAiC,gBAAM,wBAAY,QAAO,2CAC1D,gBAAM,0CAA8B,QAAQ,8BAC5C,iBAAM,yEAA4D,QAAO,gDAC/D,iBAAM,8BAAiB,QAAQ,2CAC3C,Q,wBACA,SACE,kRAGF,Q,wBACA,SACE,kKAEF,Q,wBACA,SACE,4SAGF,Q,wBACA,SACE,qNAEF,Q,wBACA,SACE,uNAEF,Q,wBACA,SACE,0MAEF,Q,wBACA,SACE,2OAGF,Q,wBACA,SACE,wNAGF,Q,wBACA,SACE,4NAGF,Q,wBACA,SACE,4PAGF,Q,wBACA,SACE,oGACF,Q,wBACA,SACE,6JAEF,Q,wBACA,SACE,yOAGF,Q,wBACA,SACE,0KAEF,Q,wBACA,SACE,2KAEF,Q,wBACA,SACE,uRAGF,Q,wBACA,SACE,wIAEF,Q,wBACA,SACE,uMAEF,Q,wBACA,SACE,yKAEF,Q,2BA7QF,0BACE,mDAMA,mDAMA,mDAIA,mDAIA,qDAIA,sDAIA,sDAIA,sDAIA,sDAIA,sDAIA,sDAIA,sDAKA,mBAOA,sDAWA,sDAMA,sDAMA,sDAaA,sDAKA,sDAMA,sDAIA,sDAIA,sDAKA,sDAIA,sDAIA,sDAIA,sDAIA,sDAKA,sDAMA,sDAKA,sDAKA,sDAIA,sDAOA,sDAIA,sDAIA,uDAUA,sDAKA,sDAIA,sDAKA,sDAIA,sDAIA,sDAIA,sDAKA,sDAKA,sDAKA,sDAKA,sDAGA,sDAIA,sDAKA,sDAIA,sDAIA,wDAKA,wDAIA,wDAIA,wDAIF,2B,qBA9QyB,6CACR,6EAMA,gDAMA,gDAIA,6CAIA,4CAIA,mDAIA,+CAIA,gDAIA,2CAIA,iDAIA,+CAIA,8CAaZ,8FAUY,+CAMA,8CAOZ,0IAYY,sDAKA,8CAMA,+CAIA,8CAIA,gDAKA,iDAIA,+CAIA,sDAIA,+CAIA,iDAKA,gDAMA,gDAKA,+CAKA,qDAIA,iDAOA,gDAIA,gDAIA,8CAUA,qDAKA,gDAIA,gDAKA,6CAIA,8CAIA,+CAIA,iDAKA,iDAKA,sDAKA,4CAKA,kDAGA,iDAIA,kDAKA,iDAIA,gDAIA,gDAKA,4CAIA,8CAIA,8C,yCC1QZ,MAAMC,GAaXtH,YACYE,EACAqH,EACAC,EACArH,EACAG,EACFE,EACEwE,EACAyC,EACA7G,GARA,KAAAV,YAAAA,EACA,KAAAqH,cAAAA,EACA,KAAAC,OAAAA,EACA,KAAArH,qBAAAA,EACA,KAAAG,cAAAA,EACF,KAAAE,WAAAA,EACE,KAAAwE,aAAAA,EACA,KAAAyC,YAAAA,EACA,KAAA7G,cAAAA,EAnBZ,KAAAI,OAAqB,KAGrB,KAAA0G,SAAU,EAEA,KAAAC,eAAyB,KACzB,KAAAnG,SAAW,IAAIC,EAAA,EAEjB,KAAAmG,wBAAyB,CAY9B,CAEWC,4BACZ,OAAO/H,KAAK8H,sBACd,CAKgBE,qB,+CACRhI,KAAK0H,OAAOO,SAAS,CAAC,SAC9B,G,CAEArG,WACE5B,KAAKkI,mBAELlI,KAAKQ,cACFqB,2BAA2B,wBAC3BC,MAAK,EAAAC,EAAA,GAAU/B,KAAK0B,WACpBM,WAAWC,IACVjC,KAAK8H,uBAAyB7F,CAAyB,GAE7D,CAEMqB,S,yCACJ,GAAItD,KAAK+H,sBAMP,YALA/H,KAAKK,qBAAqBkD,UACxB,QACA,KACAvD,KAAKI,YAAYoD,EAAE,2CAKvBxD,KAAK4H,SAAU,EAEf,MAIMO,EAAWnI,KAAKyH,cAAcW,YAClCpI,KAAKkB,QAL4B,IAAY,EAAD,gCAC5C,aAAalB,KAAKqI,iBACpB,KAKErI,KAAK6H,gBAEP,GAAiB,OAAbM,EAOF,OANAnI,KAAKK,qBAAqBkD,UACxB,QACAvD,KAAKI,YAAYoD,EAAE,iBACnBxD,KAAKI,YAAYoD,EAAE,sBAErBxD,KAAK4H,SAAU,GAIjB,MACMU,EADSC,SAASC,eAAe,QAClBF,MACrB,KACY,MAATA,GAAkC,IAAjBA,EAAMrB,QACF,MAArBjH,KAAKyI,cAA8C,KAAtBzI,KAAKyI,cAQnC,OANAzI,KAAKK,qBAAqBkD,UACxB,QACAvD,KAAKI,YAAYoD,EAAE,iBACnBxD,KAAKI,YAAYoD,EAAE,oBAErBxD,KAAK4H,SAAU,GAIjB,IAAIa,EAAezI,KAAKyI,aACxB,GAAa,MAATH,GAAiBA,EAAMrB,OAAS,EAClC,IACE,MAAMlD,QAAgB/D,KAAK0I,gBAAgBJ,EAAM,IAClC,MAAXvE,IACF0E,EAAe1E,E,CAEjB,MAAOX,GACPpD,KAAKU,WAAW2C,MAAMD,E,CAI1B,GAAoB,MAAhBqF,GAAyC,KAAjBA,EAO1B,OANAzI,KAAKK,qBAAqBkD,UACxB,QACAvD,KAAKI,YAAYoD,EAAE,iBACnBxD,KAAKI,YAAYoD,EAAE,oBAErBxD,KAAK4H,SAAU,GAIjB,IACE,MAAMe,QAAe3I,KAAKyH,cAAcmB,OAAOT,EAAUM,EAAczI,KAAK6H,gBAG5E7H,KAAKc,cAAc8E,KAA4BK,EAA8B,CAC3EnD,KAAM6F,IAGR3I,KAAK2H,YAAYkB,UAAS,SACpB7I,KAAKgI,oB,CACX,MAAO5E,GACPpD,KAAKqD,MAAMD,GACXpD,KAAKU,WAAW2C,MAAMD,E,CAGxBpD,KAAK4H,SAAU,CACjB,G,CAEAkB,4BACE,GAAmB,MAAf9I,KAAKkB,OACP,OAAO,KAGT,MAAM6H,EAAU/I,KAAKgJ,sBAClBC,OAAOjJ,KAAKkJ,eACZC,QAAQC,GAAMA,EAAEC,KAAOrJ,KAAKkB,SAC/B,OAAI6H,EAAQ9B,OAAS,EACZjH,KAAKI,YAAYoD,EAAE,kBAAmBuF,EAAQ,GAAGvH,MAEnD,IACT,CAEU0G,mBACRlI,KAAKgJ,sBAAwB,CAC3B,CACEK,GAAI,KACJ7H,KAAM,MAAQxB,KAAKI,YAAYoD,EAAE,UAAY,UAE5CxD,KAAKyH,cAAcuB,uBAExBhJ,KAAKkJ,cAAgB,IAAIlJ,KAAKyH,cAAc6B,sBAAsBC,MAAK,CAACC,EAAGC,IAC3D,MAAVD,EAAEhI,MAA0B,MAAViI,EAAEjI,MACd,EAEI,MAAVgI,EAAEhI,MAA0B,MAAViI,EAAEjI,KACf,EAEK,MAAVgI,EAAEhI,MAA0B,MAAViI,EAAEjI,KACf,EAGFxB,KAAKI,YAAYsJ,SACpB1J,KAAKI,YAAYsJ,SAASC,QAAQH,EAAEhI,KAAMiI,EAAEjI,MAC5CgI,EAAEhI,KAAKoI,cAAcH,EAAEjI,OAE/B,CAEAqI,gBAAgBC,GACd,MAAMC,EAAgCD,EAAME,OAC5ChK,KAAKiK,aAAeF,EAAYzB,MAAMrB,OAAS,EAAI8C,EAAYzB,MAAM,GAAK,IAC5E,CAEcjF,MAAMA,G,+CACZ,SAAU,CACd6G,YAAY,EACZC,gBAAgB,EAChBrD,KAAM,QACNsD,SAAU,6DACVC,MAAO,WACPC,WAAYjH,EAAMM,QAClB4G,gBAAiB,CACfC,SAAU,QAEZC,UAAWzK,KAAKI,YAAYoD,EAAE,eAC9BkH,KAAM1K,KAAKI,YAAYoD,EAAE,mBACzBmH,mBAAmB,EACnB7E,kBAAmB9F,KAAKI,YAAYoD,EAAE,MACtCoH,OAASC,IACPA,EAAQC,cAAc,mBAAmBC,SAAS,EAAG,EAAE,GAG7D,G,CAEQrC,gBAAgBsC,GACtB,MAAoB,kBAAhBhL,KAAKkB,OACAlB,KAAKiL,mBAAmBD,GAG1B,IAAIE,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,WAAWP,EAAM,SACxBK,EAAOG,OAAUC,IACf,GAAoB,gBAAhBzL,KAAKkB,QAA0C,cAAd8J,EAAK/G,KAAsB,CAC9D,MAEMyH,GAFS,IAAIC,WACAC,gBAAiBH,EAAIzB,OAAerB,OAAQ,aAC/CmC,cAAc,OAC9B,OAAW,MAAPY,OACFP,EAAQO,EAAIG,kBAGdT,G,CAIFD,EAASM,EAAIzB,OAAerB,OAAO,EAErC0C,EAAOS,QAAU,KACfV,GAAQ,CACT,GAEL,CAEQH,mBAAmBD,GACzB,OAAO,IAAI,GACRe,UAAUf,GACVgB,MAAMC,GACEA,EAAIjB,KAAK,eAAekB,MAAM,YAEtCF,MACC,SAAiBjI,GACf,OAAOA,CACT,IACA,SAAeX,GACb,MAAO,EACT,GAEN,CAEMiF,kB,yCACJ,MAAM1C,EAAM3F,KAAKkF,aAAaU,KAAKuB,EAA6B,CAC9DtB,qBAAqB,IAGvB,OAAW,MAAPF,EACK,WAGIA,EAAIK,iBACnB,G,CAEAxD,cACExC,KAAK0B,SAASe,OACdzC,KAAK0B,SAASyK,UAChB,E,kCAlQW3E,IAAe,wG,oBAAfA,GAAe,4kD,gBD5B5B,iBACE,8BAAI,S,gBAAyB,QAC/B,sBACA,6CAGA,kCAAY,oCAAY,EAAAlE,QAAQ,IAC9B,mCACE,qCACE,uCACE,2CAAkB,U,iBAA8B,QAChD,4CAGE,wDAKA,oDACA,2DAIF,+BACF,6BACF,2BACF,yBACA,sDA+QA,mCACE,qCACE,uCACE,4CAAkB,U,iBAAkC,QACpD,sCACA,0CACE,+CAGE,4DAAS,gBAAoB,IAG7B,U,iBACF,QACA,U,iBACF,QACA,+CAME,mCAAU,EAAAuG,gBAAA,EAAuB,IANnC,QAUF,6BACF,2BACF,yBACA,mCACE,wCAA0B,U,iBAAsC,QAChE,2CAIE,8DAED,QACH,yBACA,uCAME,oC,iBACA,oCAAM,U,iBAAyB,QACjC,yBACF,uBACA,c,OA3VM,yCAEoB,+CAOA,sDAIhB,mCAAoB,oCAKE,kDACP,+DAQ6C,gCAkR5C,yDAOd,mDAEA,0EAEF,2GAUA,mDAMoB,uDAKxB,yCAA0B,oCAO5B,8DAA6C,gDAGT,+CAC9B,0C,uJEpVH,MAAMuC,EAIXlM,YAAYmM,GAHZ,KAAAC,GAAkB,KAIhBtM,KAAKsM,GAAKD,EAAME,aAClB,CAEA3K,WACE5B,KAAKwM,QAAUC,MAAMC,KACnB1M,KAAKsM,GAAGK,iBAAiB,iDAE3B3M,KAAKwM,QAAQI,SAASC,IACpBA,EAAOC,iBACL,SACA,KACE9M,KAAKsM,GAAGS,UAAUC,IAAI,SAAS,IAEjC,GAGFH,EAAOC,iBACL,QACA,KACE9M,KAAKsM,GAAGS,UAAUE,OAAO,SAAS,IAEpC,EACD,GAEL,CAEmCC,QAAQpD,GACzC,MAAME,EAASF,EAAME,OACrB,IACEA,IAAWhK,KAAKsM,IACftC,EAAO+C,UAAUI,SAAS,aAC1BnD,EAAO+C,UAAUI,SAAS,kBAKzBnN,KAAKwM,QAAQvF,OAAS,EAAG,CAC3B,MAAM4F,EAAS7M,KAAKwM,QAAQ,GAC5B,GAAqC,UAAjCK,EAAOO,QAAQC,cAA2B,CAC5C,MAAMC,EAAUT,EAChB,GAAoB,MAAhBS,EAAQrJ,MAA+C,aAA/BqJ,EAAQrJ,KAAKoJ,cAEvC,YADAC,EAAQC,O,CAIZV,EAAOW,O,CAEX,E,iCApDWpB,GAAe,e,mBAAfA,EAAe,gE,kCAAf,YAAe,G,2aCL5B,SACE,yC,gBACE,S,gBACF,QACF,uB,qBAH2B,+CAAAvI,QACvB,kG,ECOG,MAAM4J,EAUXvN,YACYwN,EACAC,GADA,KAAAD,oBAAAA,EACA,KAAAC,aAAAA,EAXH,KAAA9F,eAAyB,KAElC,KAAA+F,MAAO,CAUJ,CAEGhM,W,yCACC5B,KAAK0N,oBAAoBG,qBAG9B7N,KAAK8N,YACoB,MAAvB9N,KAAK6H,eACD,CACEhE,MAAO,kCACPkK,YAAa,wCACbC,gBAAiBhO,KAAK0N,oBAAoBtL,IAAIpC,KAAK6H,gBAAgBrG,MAErE,CACEqC,MAAO,8BACPkK,YAAa,oCACbC,sBAAuBhO,KAAK2N,aAAaM,YAEjDjO,KAAK4N,MAAO,EACd,G,mCAhCWH,GAA2B,yB,mBAA3BA,EAA2B,4KDTxC,gCAKA,e,KALe,oB,+GEGR,MAAeS,G,0SCGf,MAAMC,EACXjO,YAAoBkO,GAAA,KAAAA,WAAAA,CAAyB,CAEvCC,kBAAkBC,G,yCACtB,aAAatO,KAAKoO,WAAWG,KAAK,OAAQ,kBAAmBD,GAAS,GAAM,EAC9E,G,CAEME,8BACJ3G,EACAyG,G,yCAEA,aAAatO,KAAKoO,WAAWG,KAC3B,OACA,+CAAiD1G,EACjDyG,GACA,GACA,EAEJ,G,ECpBK,MAAeG,G,eCDf,MAAMC,UAAgC,IAG3CxO,YAAYyO,GACQ,MAAdA,IAGJxJ,MAAMwJ,GACN3O,KAAKqJ,GAAKsF,EAAWtF,GACvB,E,eCPK,MAAMuF,EAAb,cACE,KAAAnI,QAA2B,GAC3B,KAAAO,QAAiC,GACjC,KAAA6H,oBAAoD,EACtD,ECJO,MAAMC,EAAb,cACE,KAAArI,QAA2B,GAC3B,KAAAS,YAAyC,GACzC,KAAA6H,wBAAwD,EAC1D,ECTO,MAAMC,EAIX9O,YAAY4D,EAASrC,GACnBzB,KAAK8D,IAAMA,EACX9D,KAAKyB,MAAQA,CACf,E,gDCHK,MAAM,EAAb,cACE,KAAAwN,SAAU,EAEV,KAAAxI,QAAwB,GACxB,KAAAO,QAAwB,GACxB,KAAA6H,oBAA0C,GAC1C,KAAA3H,YAAgC,GAChC,KAAA6H,wBAA8C,EAChD,E,kHCKO,MAAe,EAAtB,cACE,KAAAlH,eAAyB,KAEf,KAAAnH,WAAyB,IAAI,KAAkB,GAE/C,KAAAwO,aAAe,iBAEf,KAAAC,mBAAqB,CAC7B,WACA,YACA,aACA,cACA,OACA,OACA,YACA,WACA,SACA,cACA,YACA,MACA,UACA,WACA,YACA,aACA,UACA,aACA,MACA,MACA,KACA,QACA,SACA,IACA,SACA,UACA,cACA,QAGA,YAGQ,KAAAC,mBAAqB,CAC7B,OACA,OACA,YACA,WACA,aACA,QACA,SACA,KACA,SACA,UACA,QACA,iBACA,SACA,OACA,UACA,WACA,MACA,cACA,aACA,YACA,QACA,YACA,SACA,WAGA,MACA,gBAGQ,KAAAC,gBAAkB,CAC1B,OACA,QACA,UACA,WACA,OACA,cACA,YACA,WACA,YACA,WACA,OAGA,aAGQ,KAAAC,cAA0B,CAClC,MACA,aACA,YACA,OACA,OACA,WACA,YACA,SACA,UACA,YACA,OACA,MACA,UACA,WACA,OACA,WACA,MAGA,MACA,WAGQ,KAAAC,gBAAkB,CAC1BC,SAAU,QACVC,gBAAgB,EA6UpB,CA1UgBC,mBACZ,OAA8B,MAAvB1P,KAAK6H,cACd,CAEU8H,SAAS7M,GACjB,MACM8M,GADS,IAAIjE,WACAC,gBAAgB9I,EAAM,mBACzC,OAAc,MAAP8M,GAAmD,MAApCA,EAAI9E,cAAc,eAAyB8E,EAAM,IACzE,CAEUC,SAAS/M,EAAcgN,EAAiBC,EAAe,CAAC,GAChE,MAAMC,EAAyCC,OAAOC,OACpD,CAAEJ,OAAQA,GACV9P,KAAKuP,gBACLQ,GAEFjN,EAAO9C,KAAKmQ,aAAarN,GAAMsN,KAAK,MAAMC,OAC1C,MAAM1H,EAAS,QAAW7F,EAAMkN,GAQhC,OAPqB,MAAjBrH,EAAO2H,QAAkB3H,EAAO2H,OAAOrJ,OAAS,GAClD0B,EAAO2H,OAAO1D,SAASxJ,IACR,MAATA,EAAEmN,KACJvQ,KAAKU,WAAW8P,QAAQ,qBAAuBpN,EAAEmN,IAAM,KAAOnN,EAAEO,Q,IAI/DgF,EAAO7F,MAAQ6F,EAAO7F,KAAKmE,OAAS,EAAI0B,EAAO7F,KAAO,IAC/D,CAEU2N,kBAAkBC,GAC1B,GAAI1Q,KAAK2Q,mBAAmBD,GAC1B,OAAO,KAET,MAAME,EAAY5Q,KAAK6P,SAASa,GAAS,GACzC,OAAiB,MAAbE,GAAqBA,EAAU3J,OAAS,GAAK2J,EAAU,GAAG3J,OAAS,EAC9D2J,EAAU,GAEZ,IACT,CAEUC,aAAaC,GACrB,GAAW,MAAPA,EACF,OAAO,KAGT,GAAmB,iBAARA,EAAkB,CAC3B,MAAMC,EAAW,IAAI,IAErB,OADAA,EAASD,IAAM9Q,KAAKgR,OAAOF,GACvB9Q,KAAK2Q,mBAAmBI,EAASD,KAC5B,MAETC,EAASE,MAAQ,KACV,CAACF,G,CAGV,GAAID,EAAI7J,OAAS,EAAG,CAClB,MAAMiK,EAA4B,GAUlC,OATAJ,EAAIlE,SAASuE,IACX,MAAMJ,EAAW,IAAI,IACrBA,EAASD,IAAM9Q,KAAKgR,OAAOG,GACvBnR,KAAK2Q,mBAAmBI,EAASD,OAGrCC,EAASE,MAAQ,KACjBC,EAAUrK,KAAKkK,GAAS,IAEE,IAArBG,EAAUjK,OAAe,KAAOiK,C,CAGzC,OAAO,IACT,CAEUF,OAAOF,GACf,OAAW,MAAPA,EACK,OAGmB,KAD5BA,EAAMA,EAAIT,QACFe,QAAQ,QAAiBN,EAAIM,QAAQ,MAAQ,IACnDN,EAAM,UAAYA,GAEhBA,EAAI7J,OAAS,IACR6J,EAAIO,UAAU,EAAG,KAEnBP,EACT,CAEUQ,YAAYC,GACpB,MAAMC,EAAW,gBAAkBD,GACnC,OAAIvR,KAAK2Q,mBAAmBa,GACnB,KAEFA,EAASC,WAAW,QAAUD,EAASE,QAAQ,OAAQ,IAAMF,CACtE,CAEUb,mBAAmBgB,GAC3B,OAAO,uBAAyBA,EAClC,CAEUC,kBAAkBD,EAAaE,EAAuB,MAC9D,OAAI7R,KAAK2Q,mBAAmBgB,GACnBE,EAEFF,CACT,CAEUxB,aAAawB,GACrB,OAAOA,EAAIG,MAAM9R,KAAKkP,aACxB,CAGU6C,aAAaC,GACrB,GAAIhS,KAAK2Q,mBAAmBqB,GAC1B,OAAO,KAIT,IAAIC,EAAK,IAAIC,OAAO,MACpB,OAAyB,MAArBF,EAAQf,MAAMgB,GACT,OAMP,sGAAsGE,KACpGH,GAGK,cAITC,EAAK,IAAIC,OAAO,UACS,MAArBF,EAAQf,MAAMgB,GACT,QAITA,EAAK,IAAIC,OACP,iFAEuB,MAArBF,EAAQf,MAAMgB,GACT,YAITA,EAAK,IAAIC,OAAO,OACS,MAArBF,EAAQf,MAAMgB,GACT,eAITA,EAAK,IAAIC,OAAO,YACS,MAArBF,EAAQf,MAAMgB,GACT,eAITA,EAAK,IAAIC,OAAO,yBACS,MAArBF,EAAQf,MAAMgB,GACT,OAITA,EAAK,IAAIC,OAAO,qCACS,MAArBF,EAAQf,MAAMgB,GACT,OAGF,UACT,CAEUG,kBAAkBC,EAAoBC,GAC9C,GAAItS,KAAK2Q,mBAAmB2B,GAC1B,OAAO,EAGTA,EAAaA,EAAWZ,QAAQ,MAAO,IAEvC,MAEMa,EAAc,IAAIL,OAAO,+DAEzBM,EAAcF,EAAWrB,MAAMsB,GAErC,IAAKC,EACH,OAAO,EAGTH,EAAOI,KAAKC,SAAWF,EAAYG,OAAOC,MAC1C,MAAMC,EAAeL,EAAYG,OAAOE,KAExC,OADAR,EAAOI,KAAKK,QAA0B,IAAhBD,EAAK5L,OAAe,KAAO4L,EAAOA,GACjD,CACT,CAEUE,yBAAyBpK,GACjCA,EAAOkG,oBAAoBjC,SAASoG,GAAMrK,EAAOoG,wBAAwBlI,KAAKmM,KAC9ErK,EAAOzB,YAAcyB,EAAO3B,QAAQN,KAAKuM,IACvC,MAAMtE,EAAa,IAAI,IAGvB,OAFAA,EAAWnN,KAAOyR,EAAEzR,KACpBmN,EAAWtF,GAAK4J,EAAE5J,GACXsF,CAAU,IAEnBhG,EAAOkG,oBAAsB,GAC7BlG,EAAO3B,QAAU,EACnB,CAEUkM,yBAAyBC,EAAmBC,GACpD,MAAMC,EAAMrT,KAAKsT,4BAA4BH,EAAUC,GACvD,OAAsB,IAAfC,EAAIpM,OAAe,KAAOoM,EAAI,EACvC,CAEUC,4BAA4BH,EAAmBC,GACvD,OAAO3G,MAAMC,KAAKyG,EAASxG,iBAAiByG,IAAQjK,QAAQmD,GAAOA,EAAGiH,aAAeJ,GACvF,CAEUK,kBACR,MAAMnB,EAAS,IAAI,IAMnB,OALAA,EAAOoB,UAAW,EAClBpB,EAAOqB,MAAQ,GACfrB,EAAOsB,OAAS,GAChBtB,EAAOuB,MAAQ,IAAI,IACnBvB,EAAOpO,KAAO,UACPoO,CACT,CAEUwB,cAAcxB,GACR,MAAVA,IAGAA,EAAOpO,OAAS,YAClBoO,EAAOuB,MAAQ,MAEb5T,KAAK2Q,mBAAmB0B,EAAO7Q,QACjC6Q,EAAO7Q,KAAO,MAEZxB,KAAK2Q,mBAAmB0B,EAAOqB,OACjCrB,EAAOqB,MAAQ,KAEfrB,EAAOqB,MAAQrB,EAAOqB,MAAMrD,OAET,MAAjBgC,EAAOsB,QAA2C,IAAzBtB,EAAOsB,OAAO1M,SACzCoL,EAAOsB,OAAS,MAEpB,CAEUG,WACRzB,EACAvO,EACArC,EACAwC,EAAkB,WAElB,IAAIjE,KAAK2Q,mBAAmBlP,GAM5B,GAHIzB,KAAK2Q,mBAAmB7M,KAC1BA,EAAM,IAEJrC,EAAMwF,OAAS,KAAOxF,EAAM4O,OAAO0D,OAAO/T,KAAKkP,eAAiB,EAC9C,MAAhBmD,EAAOqB,QACTrB,EAAOqB,MAAQ,IAEjBrB,EAAOqB,OAAS5P,EAAM,KAAO9D,KAAKmQ,aAAa1O,GAAO2O,KAAK,MAAQ,SAC9D,CACgB,MAAjBiC,EAAOsB,SACTtB,EAAOsB,OAAS,IAElB,MAAMK,EAAQ,IAAI,IAClBA,EAAM/P,KAAOA,EACb+P,EAAMxS,KAAOsC,EACbkQ,EAAMvS,MAAQA,EACd4Q,EAAOsB,OAAO9M,KAAKmN,E,CAEvB,CAEUC,cAActL,EAAsBuL,GAC5C,GAAIlU,KAAK2Q,mBAAmBuD,GAC1B,OAGF,IAAIC,EAAcxL,EAAO3B,QAAQC,OAEjCiN,EAAaA,EAAWxC,QAAQ,KAAM,KACtC,IAAI0C,GAAY,EAEhB,IAAK,IAAIC,EAAI,EAAGA,EAAI1L,EAAO3B,QAAQC,OAAQoN,IACzC,GAAI1L,EAAO3B,QAAQqN,GAAG7S,OAAS0S,EAAY,CACzCE,GAAY,EACZD,EAAcE,EACd,K,CAIJ,GAAID,EAAW,CACb,MAAMnB,EAAI,IAAI,IACdA,EAAEzR,KAAO0S,EACTvL,EAAO3B,QAAQH,KAAKoM,E,CAGtBtK,EAAOkG,oBAAoBhI,KAAK,CAAC8B,EAAOlC,QAAQQ,OAAQkN,GAC1D,CAEUG,sBAAsBjC,GAE5BA,EAAOpO,OAAS,WAChBjE,KAAK2Q,mBAAmB0B,EAAOuB,MAAMW,WACrCvU,KAAK2Q,mBAAmB0B,EAAOuB,MAAMY,YACf,MAArBnC,EAAOuB,MAAMa,MAA6C,IAA7BpC,EAAOuB,MAAMa,KAAKxN,UAEhDoL,EAAOpO,KAAO,eACdoO,EAAOqC,WAAa,IAAI,IACxBrC,EAAOqC,WAAWzQ,KAAO,aAE7B,CAEU0Q,gBAAgBtC,EAAoBuC,GAC5C,GAAI5U,KAAK2Q,mBAAmBiE,GAC1B,OAGF,MAAMC,EAAYD,EAAS9C,MAAM,KAC7B+C,EAAU5N,OAAS,IACrBoL,EAAOyC,SAASC,UAAY/U,KAAK4R,kBAAkBiD,EAAU,KAEtC,IAArBA,EAAU5N,OACZoL,EAAOyC,SAASE,SAAWhV,KAAK4R,kBAAkBiD,EAAU,IACnDA,EAAU5N,QAAU,IAC7BoL,EAAOyC,SAASG,WAAajV,KAAK4R,kBAAkBiD,EAAU,IAC9DxC,EAAOyC,SAASE,SAAWH,EAAUK,MAAM,EAAGL,EAAU5N,QAAQmJ,KAAK,KAEzE,EC3cK,MAAM+E,UAA2B,EACtCC,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,GAAIA,EAAMwF,OAAS,EACjB,OAGF,MAAMoL,EAASrS,KAAKwT,kBAIpB,GAHAnB,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMA,EAAMwF,OAAS,IAC3DoL,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAM,GAAI,MAE3CA,EAAMwF,OAAS,GAAKxF,EAAMwF,OAAS,GAAM,EAC3C,IAAK,IAAIoN,EAAI,EAAGA,EAAI5S,EAAMwF,OAAS,EAAGoN,GAAK,EAAG,CAC5C,MAAMgB,EAAc5T,EAAM4S,EAAI,GACxBL,EAAgBvS,EAAM4S,EAAI,GAChC,GAAIrU,KAAK2Q,mBAAmB0E,IAAQrV,KAAK2Q,mBAAmBqD,GAC1D,SAGF,MAAMsB,EAAatB,EAAM3G,cACI,MAAzBgF,EAAOuB,MAAMY,UAAoBxU,KAAKmP,mBAAmBiC,QAAQkE,IAAe,EAClFjD,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkByD,GAEtB,MAAzBhD,EAAOuB,MAAMW,UACbvU,KAAKoP,mBAAmBgC,QAAQkE,IAAe,EAE/CjD,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkByD,IAEzB,MAArBhD,EAAOuB,MAAMa,MAA6C,IAA7BpC,EAAOuB,MAAMa,KAAKxN,SAChDjH,KAAKsP,cAAc8B,QAAQkE,IAAe,EAE1CjD,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAawE,GAEtCrV,KAAK8T,WAAWzB,EAAQ2B,EAAOqB,E,CAKrCrV,KAAKsU,sBAAsBjC,GAC3BrS,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECrDK,MAAM4M,UAAyB,EACpCH,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,MAAM4Q,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAMD,MAC3C6Q,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAM+T,KAC5CnD,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAM+S,UACrDnC,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAMmS,OACrD5T,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,EClBK,MAAM8M,UAA0B,EACrCL,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU2M,KAAKN,MAAMtS,GAC3B,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGH,MAAlBI,EAAQ1C,QACV0C,EAAQ1C,OAAOuG,SAASnL,IACtB,MAAM4Q,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAMkU,UAC3CtD,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMmU,MAC5CvD,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAM8P,KAC5Cc,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAMoU,KACrDxD,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAMqU,WACrD9V,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAIV,MAAjBtJ,EAAQ2K,OACV3K,EAAQ2K,MAAM9G,SAASnL,IACrB,MAAM4Q,EAASrS,KAAKwT,kBACpBnB,EAAOpO,KAAO,eACdoO,EAAOqC,WAAWzQ,KAAO,aACzBoO,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAMsU,OAC3C1D,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMiJ,MAC5C1K,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAIV,MAAjBtJ,EAAQzC,OACVyC,EAAQzC,MAAMsG,SAASnL,IACrB,MAAM4Q,EAASrS,KAAKwT,kBACpBnB,EAAOpO,KAAO,SACdoO,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAMkU,UAC3CtD,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMmU,MAC5CvD,EAAOI,KAAKuD,eAAiBhW,KAAK4R,kBAAkBnQ,EAAMwU,YAC1D5D,EAAOI,KAAKyD,OAASlW,KAAK4R,kBAAkBnQ,EAAM0U,YAClD9D,EAAOI,KAAK2D,KAAOpW,KAAK4R,kBAAkBnQ,EAAM4U,KAChDhE,EAAOI,KAAK6D,MAAQtW,KAAK+R,aAAaM,EAAOI,KAAKyD,QACtB,MAAxBzU,EAAM8U,iBAC0B,MAA9B9U,EAAM8U,eAAe3D,QACvBP,EAAOI,KAAKC,SAAWjR,EAAM8U,eAAe3D,MAAQ,IAErB,MAA7BnR,EAAM8U,eAAe1D,OACvBR,EAAOI,KAAKK,QAAUrR,EAAM8U,eAAe1D,KAAO,KAGtD7S,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAI/B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,EC7DK,MAAM6N,UAAyB,EACpCpB,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,MAAM4Q,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOxB,KAAK4R,kBACjBnQ,EAAMD,KACNxB,KAAK4R,kBAAkB5R,KAAKsR,YAAY7P,EAAMgV,SAAU,OAE1DpE,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAMgV,SAC5CpE,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAM+S,UAGnDxU,KAAK2Q,mBAAmBlP,EAAM8S,YAC7BvU,KAAK2Q,mBAAmBlP,EAAMiV,oBAE/BrE,EAAOuB,MAAMW,SAAW9S,EAAMiV,oBAE9BrE,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAM8S,UACrDlC,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMiV,qBAG9C1W,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,EClCK,MAAMgO,UAA8B,EACzCvB,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,GAAuB,SAAnBA,EAAMmV,SACR,OAEF,MAAMvE,EAASrS,KAAKwT,kBACpBnB,EAAOoB,SAAyB,MAAdhS,EAAMoV,IACxBxE,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAMD,MAC3C6Q,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMqV,OACrB,SAAnBrV,EAAMmV,WACRvE,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAM8P,KAC5Cc,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAM+S,UACrDnC,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAM8S,WAEvDvU,KAAKsU,sBAAsBjC,GAC3BrS,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,EC7BK,MAAMoO,UAA0B,EAAvC,c,oBACU,KAAAC,oBAAsB,IAAI9E,OAAO,qCA2B3C,CAzBEkD,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,MAAM4Q,EAASrS,KAAKwT,kBACpB,IAAIhS,EAAOC,EAAMD,MACZA,GAAQxB,KAAKgX,oBAAoB7E,KAAK1Q,EAAM8P,OAC/C/P,EAAOC,EAAM8P,IAAIN,MAAMjR,KAAKgX,qBAAqB,IAEnD3E,EAAO7Q,KAAOxB,KAAK4R,kBAAkBpQ,EAAM,MAC3C6Q,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAM8S,UACrDlC,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAM+S,UACrDnC,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAM8P,KAC5CvR,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,E,eCnBK,MAAMsO,UAA6B,EACxC7B,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,GAAIzB,KAAK0P,eAAiB1P,KAAK2Q,mBAAmBlP,EAAMyF,aAAc,CAC/CzF,EAAMyF,YAAuB4K,MAAM,KAC5ClF,SAASsK,IACnB,IAAIC,GAAgB,EAChBC,EAAkBzO,EAAOzB,YAAYD,OAEzC,IAAK,IAAIoN,EAAI,EAAGA,EAAI1L,EAAOzB,YAAYD,OAAQoN,IAC7C,GAAI1L,EAAOzB,YAAYmN,GAAG7S,OAAS0V,EAAK,CACtCC,GAAgB,EAChBC,EAAkB/C,EAClB,K,CAIJ,GAAI8C,EAAe,CACjB,MAAMxI,EAAa,IAAI,IACvBA,EAAWnN,KAAO0V,EAClBvO,EAAOzB,YAAYL,KAAK8H,E,CAG1BhG,EAAOoG,wBAAwBlI,KAAK,CAAC8B,EAAOlC,QAAQQ,OAAQmQ,GAAiB,G,MAErEpX,KAAK0P,cACf1P,KAAKiU,cAActL,EAAQlH,EAAM4V,QAGnC,MAAMhF,EAAS,IAAI,IACnBA,EAAOoB,UACJzT,KAAK0P,cAAgE,MAAhD1P,KAAK4R,kBAAkBnQ,EAAMgS,SAAU,KAC/DpB,EAAOpO,KAAO,UACdoO,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMiS,OAC5CrB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAMD,KAAM,MACjD,IACE6Q,EAAOiF,SAAWC,SAChBvX,KAAK4R,kBAAkBnQ,EAAM6V,SAAU,qBACvC,G,CAEF,MAAOlU,GAEPoU,QAAQnU,MAAM,iCAAkCD,GAChDiP,EAAOiF,SAAW,Q,CAGpB,IAAKtX,KAAK2Q,mBAAmBlP,EAAMkS,QAAS,CAC1C,MAAMA,EAAS3T,KAAKmQ,aAAa1O,EAAMkS,QACvC,IAAK,IAAIU,EAAI,EAAGA,EAAIV,EAAO1M,OAAQoN,IAAK,CACtC,GAAIrU,KAAK2Q,mBAAmBgD,EAAOU,IACjC,SAGF,MAAMoD,EAAgB9D,EAAOU,GAAGqD,YAAY,MAC5C,IAAuB,IAAnBD,EACF,SAGmB,MAAjBpF,EAAOsB,SACTtB,EAAOsB,OAAS,IAGlB,MAAMK,EAAQ,IAAI,IAClBA,EAAMxS,KAAOmS,EAAOU,GAAGsD,OAAO,EAAGF,GACjCzD,EAAMvS,MAAQ,KACduS,EAAM/P,KAAO,UACT0P,EAAOU,GAAGpN,OAASwQ,EAAgB,IACrCzD,EAAMvS,MAAQkS,EAAOU,GAAGsD,OAAOF,EAAgB,IAEjDpF,EAAOsB,OAAO9M,KAAKmN,E,EAKvB,OADgC,MAAdvS,EAAMwC,KAAexC,EAAMwC,KAAKoJ,cAAgB,MAEhE,IAAK,OACHgF,EAAOpO,KAAO,eACdoO,EAAOqC,WAAa,IAAI,IACxBrC,EAAOqC,WAAWzQ,KAAO,aACzB,MACF,QAAS,CACPoO,EAAOpO,KAAO,UACdoO,EAAOuB,MAAQ,IAAI,IACnBvB,EAAOuB,MAAMgE,KAAO5X,KAAK4R,kBAAkBnQ,EAAMoW,YAAcpW,EAAMmW,MACrEvF,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAMqW,gBAAkBrW,EAAM8S,UAC7ElC,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAMsW,gBAAkBtW,EAAM+S,UAC7E,MAAMC,EAAOzU,KAAKyQ,kBAAkBhP,EAAMuW,WAAavW,EAAMqP,KAC7DuB,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAa4D,GACtC,K,EAIJ9L,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,E,gUCxGK,MAAMsP,UAA8B,EAIzC,YACY9X,EACAC,GAEV+E,QAHU,KAAAhF,cAAAA,EACA,KAAAC,YAAAA,CAGZ,CAEMgV,MAAMtS,G,yCAGV,OAFA9C,KAAK2I,OAAS,IAAI,EAClB3I,KAAK+I,QAAU2M,KAAKN,MAAMtS,GACN,MAAhB9C,KAAK+I,SAAyC,MAAtB/I,KAAK+I,QAAQmP,OACvClY,KAAK2I,OAAOsG,SAAU,EACfjP,KAAK2I,SAGV3I,KAAK+I,QAAQoP,gBACTnY,KAAKoY,iBAEXpY,KAAKqY,iBAGArY,KAAK2I,OACd,G,CAEcyP,iB,yCACZ,GAAiD,MAA7CpY,KAAK+I,QAAQuP,6BAAsC,CACrD,MAAMC,QAAevY,KAAKG,cAAcqY,UAAUxY,KAAK6H,gBACjD4Q,EAAmB,IAAI,IAAUzY,KAAK+I,QAAQuP,8BAKpD,GAAgC,cAJMtY,KAAKG,cAAcuY,cACvDD,EACAF,IAKA,OAFAvY,KAAK2I,OAAOsG,SAAU,OACtBjP,KAAK2I,OAAOgQ,aAAe3Y,KAAKI,YAAYoD,EAAE,qB,CAKlD,MAAMoV,EAAe,IAAIC,IAEzB,GAAI7Y,KAAK0P,cAA4C,MAA5B1P,KAAK+I,QAAQ7B,YACpC,IAAK,MAAMP,KAAK3G,KAAK+I,QAAQ7B,YAAyC,CACpE,MAAMyH,EAAa,cAAgChI,GACnD,GAAkB,MAAdgI,EAAoB,CACtBA,EAAW9G,eAAiB7H,KAAK6H,eACjC,MAAMiR,QAAanK,EAAWoK,UAC9BH,EAAaI,IAAIrS,EAAE0C,GAAIrJ,KAAK2I,OAAOzB,YAAYD,QAC/CjH,KAAK2I,OAAOzB,YAAYL,KAAKiS,E,OAG5B,IAAK9Y,KAAK0P,cAAwC,MAAxB1P,KAAK+I,QAAQ/B,QAC5C,IAAK,MAAMiM,KAAKjT,KAAK+I,QAAQ/B,QAAiC,CAC5D,MAAMqQ,EAAS,cAA4BpE,GAC3C,GAAc,MAAVoE,EAAgB,CAClB,MAAMyB,QAAazB,EAAO0B,UAC1BH,EAAaI,IAAI/F,EAAE5J,GAAIrJ,KAAK2I,OAAO3B,QAAQC,QAC3CjH,KAAK2I,OAAO3B,QAAQH,KAAKiS,E,EAK/B,IAAK,MAAMnS,KAAK3G,KAAK+I,QAAQmP,MAA+B,CAC1D,MAAM7F,EAAS,cAA4B1L,GAE3C0L,EAAOhJ,GAAK,KACZgJ,EAAOxK,eAAiB7H,KAAK6H,eAC7BwK,EAAO4G,cAAgB,KAGO,MAA1B5G,EAAO6G,iBAA2B7G,EAAO6G,gBAAgBjS,OAAS,IACpEoL,EAAO6G,gBAAkB7G,EAAO6G,gBAAgBhE,MAAM,EAAG,KAGtDlV,KAAK0P,cAA8B,MAAd/I,EAAEwS,UAAoBP,EAAaQ,IAAIzS,EAAEwS,UACjEnZ,KAAK2I,OAAOkG,oBAAoBhI,KAAK,CACnC7G,KAAK2I,OAAOlC,QAAQQ,OACpB2R,EAAaxW,IAAIuE,EAAEwS,YAEZnZ,KAAK0P,cAAmC,MAAnB/I,EAAEsS,eAChCtS,EAAEsS,cAAcrM,SAASyM,IACnBT,EAAaQ,IAAIC,IACnBrZ,KAAK2I,OAAOoG,wBAAwBlI,KAAK,CACvC7G,KAAK2I,OAAOlC,QAAQQ,OACpB2R,EAAaxW,IAAIiX,I,IAMzB,MAAMP,QAAazG,EAAO0G,UAC1B/Y,KAAK6T,cAAciF,GACnB9Y,KAAK2I,OAAOlC,QAAQI,KAAKiS,E,CAG3B9Y,KAAK2I,OAAOsG,SAAU,CACxB,G,CAEQoJ,iBACN,MAAMO,EAAe,IAAIC,IACrB7Y,KAAK0P,cAA4C,MAA5B1P,KAAK+I,QAAQ7B,YACpClH,KAAK+I,QAAQ7B,YAAY0F,SAASjG,IAChC,MAAMgI,EAAa,YAA8BhI,GAC/B,MAAdgI,IACFA,EAAW9G,eAAiB,KAC5B+Q,EAAaI,IAAIrS,EAAE0C,GAAIrJ,KAAK2I,OAAOzB,YAAYD,QAC/CjH,KAAK2I,OAAOzB,YAAYL,KAAK8H,G,IAGvB3O,KAAK0P,cAAwC,MAAxB1P,KAAK+I,QAAQ/B,SAC5ChH,KAAK+I,QAAQ/B,QAAQ4F,SAASqG,IAC5B,MAAMoE,EAAS,YAA0BpE,GAC3B,MAAVoE,IACFuB,EAAaI,IAAI/F,EAAE5J,GAAIrJ,KAAK2I,OAAO3B,QAAQC,QAC3CjH,KAAK2I,OAAO3B,QAAQH,KAAKwQ,G,IAK/BrX,KAAK+I,QAAQmP,MAAMtL,SAASjG,IAC1B,MAAM0L,EAAS,YAA0B1L,GAEzC0L,EAAOhJ,GAAK,KACZgJ,EAAOxK,eAAiB,KACxBwK,EAAO4G,cAAgB,KAGO,MAA1B5G,EAAO6G,iBAA2B7G,EAAO6G,gBAAgBjS,OAAS,IACpEoL,EAAO6G,gBAAkB7G,EAAO6G,gBAAgBhE,MAAM,EAAG,KAGtDlV,KAAK0P,cAA8B,MAAd/I,EAAEwS,UAAoBP,EAAaQ,IAAIzS,EAAEwS,UACjEnZ,KAAK2I,OAAOkG,oBAAoBhI,KAAK,CACnC7G,KAAK2I,OAAOlC,QAAQQ,OACpB2R,EAAaxW,IAAIuE,EAAEwS,YAEZnZ,KAAK0P,cAAmC,MAAnB/I,EAAEsS,eAChCtS,EAAEsS,cAAcrM,SAASyM,IACnBT,EAAaQ,IAAIC,IACnBrZ,KAAK2I,OAAOoG,wBAAwBlI,KAAK,CACvC7G,KAAK2I,OAAOlC,QAAQQ,OACpB2R,EAAaxW,IAAIiX,I,IAMzBrZ,KAAK6T,cAAcxB,GACnBrS,KAAK2I,OAAOlC,QAAQI,KAAKwL,EAAO,IAGlCrS,KAAK2I,OAAOsG,SAAU,CACxB,E,qTC7JK,MAAMqK,UAA2CrB,EAGtD/X,YACEC,EACAC,EACQmZ,GAERpU,MAAMhF,EAAeC,GAFb,KAAAmZ,2BAAAA,CAGV,CAEMnE,MAAMtS,G,mGACV,MAAM6F,EAAS,IAAI,EACb6Q,EAAmD9D,KAAKN,MAAMtS,GAEpE,IAAK0W,EAEH,OADA7Q,EAAOsG,SAAU,EACVtG,EAIT,KAAK6Q,aAAU,EAAVA,EAAYrB,WACf,aAAa,EAAM/C,MAAK,UAACtS,GAI3B,KAAK0W,aAAU,EAAVA,EAAYC,mBACf,aAAa,EAAMrE,MAAK,UAACtS,GAG3B,GAAI9C,KAAK0Z,gBAAgBF,GAEvB,OADA7Q,EAAOsG,SAAU,EACVtG,EAIT,MAAM6L,QAAiBxU,KAAKuZ,6BAC5B,WAAYvZ,KAAK2Z,cAAcH,EAAYhF,IAGzC,OAFA7L,EAAOsG,SAAU,EACjBtG,EAAOgQ,aAAe3Y,KAAKI,YAAYoD,EAAE,uBAClCmF,EAGT,MAAMiR,EAAU,IAAI,IAAUJ,EAAW1W,MACnC+W,QAAsB7Z,KAAKG,cAAcuY,cAAckB,EAAS5Z,KAAK8D,KAC3E,aAAa,EAAMsR,MAAK,UAACyE,EAC3B,G,CAEcF,cACZG,EACAtF,G,yCAEAxU,KAAK8D,UAAY9D,KAAKG,cAAc4Z,WAClCvF,EACAsF,EAAKE,KACLF,EAAKG,QACL,IAAI,IAAUH,EAAKI,cAAeJ,EAAKK,UAAWL,EAAKM,iBAGzD,MAAM3B,EAAmB,IAAI,IAAUqB,EAAKxB,8BAM5C,OAAgC,cAJMtY,KAAKG,cAAcuY,cACvDD,EACAzY,KAAK8D,KAMT,G,CAEQ4V,gBAAgBI,GACtB,QACGA,GACAA,EAAK3B,WACL2B,EAAKL,mBACLK,EAAKE,MACLF,EAAKI,eACwB,iBAAvBJ,EAAKI,eACI,MAAhBJ,EAAKG,SACoB,MAAzB,KAAQH,EAAKG,UACZH,EAAKxB,8BACLwB,EAAKhX,KAEV,EC3FK,MAAMuX,UAAwB,EACnCjF,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACK,SAAhBA,EAAMsU,QACRtU,EAAMsU,MAAQ,MAEhB,MAAM1D,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOxB,KAAK4R,kBACjBnQ,EAAMsU,MACN/V,KAAK4R,kBAAkB5R,KAAKsR,YAAY7P,EAAM6Y,QAAS,OAEzDjI,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAM6Y,QAC5CjI,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAM+S,UAEjDxU,KAAK2Q,mBAAmBlP,EAAM8Y,SAAWva,KAAK2Q,mBAAmBlP,EAAM8S,UACzElC,EAAOuB,MAAMW,SAAW9S,EAAM8S,UAE9BlC,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAM8Y,OACrDlI,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAM8S,WAG9CvU,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,EClCF,MAAM6R,EAAgB,CAAC,YAAa,cAAe,QAAS,WAAY,WAAY,MAAO,MAEpF,MAAMC,UAA6B,EACxCrF,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACfzB,KAAKiU,cAActL,EAAQ3I,KAAK4R,kBAAkBnQ,EAAM,iBAExD,MAAM4Q,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAMoC,MAAO,MAClDwO,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAM8S,UACrDlC,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAM+S,UACrDnC,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAMiZ,KAE5C,IAAIC,GAAyB,EAC7B,IAAK,MAAMC,KAAQnZ,EAEbA,EAAMoZ,eAAeD,KAClBD,IAA2D,IAAjCH,EAAcpJ,QAAQwJ,KACnDD,GAAyB,GAEvBA,GACF3a,KAAK8T,WAAWzB,EAAQuI,EAAMnZ,EAAMmZ,KAK1C5a,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAGzBrS,KAAK0P,cACP1P,KAAK+S,yBAAyBpK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,EC3CK,MAAMmS,UAA6B,EACxC1F,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbiH,EAAM5P,KAAK2P,SAAS7M,GAC1B,GAAW,MAAP8M,EAEF,OADAjH,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,MAAMoS,EAAWnL,EAAI9E,cAAc,YACnC,GAAgB,MAAZiQ,GAAoB/a,KAAK2Q,mBAAmBoK,EAASlP,aAGvD,OAFAlD,EAAOgQ,aAAe,oBACtBhQ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAmEzB,OAhEgB+M,KAAKN,MAAM2F,EAASlP,aAC5Be,SAASoO,IACf,MAAM3I,EAASrS,KAAKwT,kBAQpB,GAPKxT,KAAK2Q,mBAAmBqK,EAAMjF,SACjC1D,EAAO7Q,KAAOwZ,EAAMjF,MAAMjE,MAAM,MAAM,IAEtB,MAAdkJ,EAAMlY,MAAiB9C,KAAK2Q,mBAAmBqK,EAAMlY,KAAK4Q,SAC5DrB,EAAOqB,MAAQsH,EAAMlY,KAAK4Q,MAAM5B,MAAM,OAAO1B,KAAK,OAGxB,MAAxB4K,EAAMC,gBAAyD,MAA/BD,EAAMC,eAAetH,OACvD,IAAK,MAAMuH,KAAYF,EAAMC,eAAetH,OAAQ,CAElD,IAAKqH,EAAMC,eAAetH,OAAOkH,eAAeK,GAC9C,SAGF,MAAMlH,EAAQgH,EAAMC,eAAetH,OAAOuH,GAE1C,OADuC,MAApBlH,EAAMmH,WAAqBnH,EAAMmH,WAAW9N,cAAgB,MAE7E,IAAK,WACHgF,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBoC,EAAMvS,OACrD,MACF,IAAK,QACL,IAAK,WACL,IAAK,OACL,IAAK,OACH4Q,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBoC,EAAMvS,OACrD,MACF,IAAK,MACH4Q,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAamD,EAAMvS,OAC5C,MACF,QAAS,CACP,MAAM2Z,EAA4B,MAAfpH,EAAM+B,MAAgB/B,EAAM+B,MAAM1I,cAAgB,KAE1C,MAAzBgF,EAAOuB,MAAMY,UACbxU,KAAKmP,mBAAmBiC,QAAQgK,IAAe,EAE/C/I,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBoC,EAAMvS,OAE5B,MAAzB4Q,EAAOuB,MAAMW,UACbvU,KAAKoP,mBAAmBgC,QAAQgK,IAAe,EAE/C/I,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBoC,EAAMvS,QAE/B,MAArB4Q,EAAOuB,MAAMa,MAA6C,IAA7BpC,EAAOuB,MAAMa,KAAKxN,SAChDjH,KAAKsP,cAAc8B,QAAQgK,IAAe,EAE1C/I,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAamD,EAAMvS,OAE5CzB,KAAK8T,WAAWzB,EAAQ2B,EAAM+B,MAAO/B,EAAMvS,OAE7C,K,GAMRzB,KAAKsU,sBAAsBjC,GAC3BrS,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,ECjFK,MAAM0S,UAA4B,EACvCjG,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACfzB,KAAKiU,cAActL,EAAQ3I,KAAK4R,kBAAkBnQ,EAAM6Z,WAExD,MAAMjJ,EAASrS,KAAKwT,kBACpBnB,EAAOoB,SAAsD,SAA3CzT,KAAK4R,kBAAkBnQ,EAAM8Z,UAC/ClJ,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAM+Z,MAAO,MAClDnJ,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMga,MAC5CpJ,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAMia,SAAUja,EAAMka,OACrEtJ,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAMma,UACrDvJ,EAAOuB,MAAMgE,KAAO5X,KAAK4R,kBAAkBnQ,EAAMoa,MACjDxJ,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAMqa,SAEvC9b,KAAK2Q,mBAAmBlP,EAAMia,WACjC1b,KAAK8T,WAAWzB,EAAQ,QAAS5Q,EAAMka,OAEzC3b,KAAK8T,WAAWzB,EAAQ,QAAS5Q,EAAMsa,OACvC/b,KAAK8T,WAAWzB,EAAQ,MAAO5Q,EAAMua,KACrChc,KAAK8T,WAAWzB,EAAQ,UAAW5Q,EAAMwa,SACzCjc,KAAK8T,WAAWzB,EAAQ,OAAQ5Q,EAAMya,MAEtClc,KAAKsU,sBAAsBjC,GAC3BrS,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAGzBrS,KAAK0P,cACP1P,KAAK+S,yBAAyBpK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,E,0BC1BF,MAAMwT,EAA4B,IAAIC,IAAI,CACxC,QACA,OACA,WACA,WACA,MACA,YACA,aAGIC,EAAuC,IAAID,IAAI,CACnD,OACA,QACA,aACA,cACA,YACA,QACA,QACA,eACA,UACA,UACA,QACA,OACA,MAEA,cAGIE,EAA2B,IAAIF,IAAI,CAAC,QAAS,SAE5C,MAAMG,WAA4B,EACvCnH,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,GAAe,MAAXiG,EAEF,OADAJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,GAAuB,MAAnBI,EAAQ,GAAG9E,MAAoC,MAApB8E,EAAQ,GAAGlF,MAAe,CAIvD,GAAgE,IAHxCkF,EAGJI,QAAQqT,GAAiB,SAAXA,EAAEvY,OAAiBgD,OAAc,CACjE,MAAMoL,EAASrS,KAAKwT,kBASpB,OARAnB,EAAOpO,KAAO,aACdoO,EAAOyC,SAAW,IAAI,IACtB/L,EAAQ6D,SAAS2D,IACfvQ,KAAKyc,yCAAyCpK,EAAQ9B,EAAI,IAE5DvQ,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,GACpB1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,E,EAuC3B,OAnCAI,EAAQ6D,SAAS2D,IACf,MAAM8B,EAASrS,KAAKwT,kBAEdkJ,EAAUzM,OAAO0M,KAAKpM,GACT,aAAfmM,EAAQ,KACV1c,KAAKiU,cAActL,EAAQ4H,EAAIqM,UAC/B5c,KAAK6c,uBAAuBxK,EAAQ9B,IAGnB,SAAfmM,EAAQ,IAAgC,iBAAfA,EAAQ,IACnC1c,KAAK8c,mBAAmBzK,EAAQ9B,GAGf,SAAfmM,EAAQ,IAAgC,WAAfA,EAAQ,IACnC1c,KAAK+c,cAAc1K,EAAQ9B,GAGT,SAAfmM,EAAQ,IAAkB,MAAuB,UAAfA,EAAQ,IAC7C1c,KAAKgd,+BAA+B3K,EAAQ9B,GAG3B,UAAfmM,EAAQ,IAAiC,SAAfA,EAAQ,IACpC1c,KAAKid,uBAAuB5K,EAAQ9B,GAGtCvQ,KAAKsU,sBAAsBjC,GAC3BrS,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAGzBrS,KAAK0P,cACP1P,KAAK+S,yBAAyBpK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,CAEAkU,uBAAuBxK,EAAoB9B,GACzC8B,EAAOpO,KAAO,UACdoO,EAAOuB,MAAQ,IAAI,IAEnBvB,EAAO7Q,KAAO+O,EAAI1M,MAClBwO,EAAOqB,MAAQnD,EAAIqF,KACnBvD,EAAOuB,MAAMW,SAAWhE,EAAIgE,SAC5BlC,EAAOuB,MAAMY,SAAWjE,EAAIiE,SAC5BnC,EAAOuB,MAAMgE,KAAOrH,EAAI2M,UACxB7K,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAaN,EAAIgB,KAE1CvR,KAAKmd,qBAAqB9K,EAAQ9B,EAAK4L,EACzC,CAEAW,mBAAmBzK,EAAoB9B,GACrC8B,EAAOpO,KAAO,SACdoO,EAAOI,KAAO,IAAI,IAElBJ,EAAO7Q,KAAO+O,EAAI6M,aAClB,IAAIC,EAAyB,GAC7B,OAAQ9M,EAAItM,MACV,IAAK,cACHoO,EAAOI,KAAKuD,eAAiBzF,EAAI6M,aACjC/K,EAAOI,KAAKyD,OAAS3F,EAAI+M,UACzBjL,EAAOI,KAAK6D,MAAQtW,KAAK+R,aAAaM,EAAOI,KAAKyD,QAClD7D,EAAOI,KAAK2D,KAAO7F,EAAI6F,KACvBpW,KAAKoS,kBAAkBC,EAAQ,GAAG9B,EAAIgN,oBAAoBhN,EAAIiN,mBAG9DH,EAAe,CACb,eACA,iBACA,YACA,OACA,mBACA,mBAEF,MACF,IAAK,OACHhL,EAAOI,KAAKuD,eAAiBzF,EAAIkN,eACjCpL,EAAOI,KAAKyD,OAAS3F,EAAImN,eAGzBL,EAAe,CAAC,eAAgB,iBAAkB,kBAMtDrd,KAAKmd,qBAAqB9K,EAAQ9B,EAAK,IAAI6L,IAAIiB,GACjD,CAEAN,cAAc1K,EAAoB9B,GAChC8B,EAAOpO,KAAO,aACdoO,EAAOyC,SAAW,IAAI,IAEtB,MAAMuI,EAAyB,CAAC,OAAQ,UACxC,OAAQ9M,EAAItM,MACV,IAAK,OACHoO,EAAO7Q,KAAO,GAAG+O,EAAI/O,QAAQ+O,EAAItM,OACjCjE,KAAK2U,gBAAgBtC,EAAQ9B,EAAI/O,MACjC6Q,EAAOyC,SAAS6I,cAAgBpN,EAAI2F,OACpC,MACF,IAAK,WACH7D,EAAO7Q,KAAO,GAAG+O,EAAI/O,QAAQ+O,EAAItM,OACjCjE,KAAK2U,gBAAgBtC,EAAQ9B,EAAI/O,MACjC6Q,EAAOyC,SAAS8I,eAAiBrN,EAAI2F,OACrC,MACF,IAAK,UACH7D,EAAO7Q,KAAO,GAAG+O,EAAI/O,QAAQ+O,EAAItM,OACjCjE,KAAK2U,gBAAgBtC,EAAQ9B,EAAI/O,MACjC6Q,EAAOyC,SAAS6I,cAAgBpN,EAAI2F,OACpC7D,EAAOyC,SAAS+I,MAAQtN,EAAIsN,MAE5BR,EAAaxW,KAAK,SAClB,MACF,IAAK,kBACHwL,EAAO7Q,KAAO,GAAG+O,EAAI/O,QAAQ+O,EAAItM,OACjCjE,KAAK2U,gBAAgBtC,EAAQ9B,EAAI/O,MACjC6Q,EAAOyC,SAASgJ,IAAMvN,EAAI2F,OAC1B,MACF,IAAK,aACH7D,EAAO7Q,KAAO+O,EAAItM,KAClBoO,EAAOyC,SAAS6I,cAAgBpN,EAAI2F,OAQxClW,KAAKmd,qBAAqB9K,EAAQ9B,EAAK,IAAI6L,IAAIiB,GACjD,CAEAL,+BAA+B3K,EAAoB9B,GACjD8B,EAAOpO,KAAO,eACdoO,EAAOqC,WAAWzQ,KAAO,aACR,SAAbsM,EAAItM,KACNoO,EAAO7Q,KAAO,GAAG+O,EAAI1M,SAAS0M,EAAIwN,cAAcxN,EAAIyN,eAAezN,EAAI0N,YACpEvM,QAAQ,KAAM,KACdrB,OAEHgC,EAAO7Q,KAAO+O,EAAI2N,UAGpB,MAAMC,EAAU5N,EAChBN,OAAO0M,KAAKpM,GAAK3D,SAAS9I,IACxB9D,KAAK8T,WAAWzB,EAAQvO,EAAKqa,EAAQra,GAAK,GAE9C,CAEA2Y,yCAAyCpK,EAAoB9B,GAC3D,OAAQA,EAAItM,MACV,IAAK,OACHjE,KAAK2U,gBAAgBtC,EAAQ,GAAG9B,EAAIwN,cAAcxN,EAAIyN,eAAezN,EAAI0N,aACzE5L,EAAOyC,SAASjR,MAAQ0M,EAAI1M,MAC5BwO,EAAO7Q,KAAO6Q,EAAOyC,SAASF,SAE9BvC,EAAOyC,SAASP,SAAWhE,EAAIqD,MAC/B,MACF,IAAK,QACHvB,EAAOyC,SAASyF,MAAQhK,EAAIgK,MAC5B,MACF,IAAK,SACHlI,EAAOyC,SAASsJ,MAAQ7N,EAAI8N,aAC5B,MACF,IAAK,UACHhM,EAAOyC,SAASwJ,SAAW/N,EAAIgO,QAC/BlM,EAAOyC,SAAS0J,KAAOjO,EAAIiO,KAC3BnM,EAAOyC,SAAS2J,WAAalO,EAAItE,IACjCoG,EAAOyC,SAAS+I,MAAQtN,EAAIsN,MAC5BxL,EAAOyC,SAAS4J,QAAUnO,EAAImO,QAMlC1e,KAAKmd,qBAAqB9K,EAAQ9B,EAAK8L,EACzC,CAEAY,uBAAuB5K,EAAoB9B,GACzC8B,EAAOpO,KAAO,eACdoO,EAAOqC,WAAWzQ,KAAO,aACzBoO,EAAO7Q,KAAO+O,EAAI1M,MAClBwO,EAAOqB,MAAQnD,EAAIqF,KAEnB5V,KAAKmd,qBAAqB9K,EAAQ9B,EAAK+L,EACzC,CAEAa,qBAAqB9K,EAAoB9B,EAAU8M,GAC1BpN,OAAO0M,KAAKpM,GAAKpH,QAAQqT,IAAOa,EAAajE,IAAIoD,KACzD5P,SAAS9I,IACtB,MAAM6a,EAAOpO,EACbvQ,KAAK8T,WAAWzB,EAAQvO,EAAK6a,EAAK7a,GAAK,GAE3C,EClQF,MAAM8a,GAAiB,IAAIxC,IAAI,CAC7B,UACA,gBACA,gBACA,SACA,WACA,0BACA,qBACA,UAGK,MAAMyC,WAA6B,EAGxCzJ,MAAMtS,GACJ9C,KAAK2I,OAAS,IAAI,EAClB,MAAMI,EAAU2M,KAAKN,MAAMtS,GAC3B,GAAe,MAAXiG,GAAsC,IAAnBA,EAAQ9B,OAE7B,OADAjH,KAAK2I,OAAOsG,SAAU,EACf/D,QAAQC,QAAQnL,KAAK2I,QAGP,MAAnBI,EAAQ+V,SACV9e,KAAK+e,eAAehW,EAAQ+V,SAED,MAAzB/V,EAAQiW,eACVhf,KAAKif,YAAYlW,EAAQiW,eAEE,MAAzBjW,EAAQmW,eACVlf,KAAKmf,YAAYpW,EAAQmW,cAAe,mBAEpB,MAAlBnW,EAAQqW,QACVpf,KAAKmf,YAAYpW,EAAQqW,OAAQ,YAEI,MAAnCrW,EAAQsW,yBACVrf,KAAKsf,YAAYvW,EAAQsW,yBAEH,MAApBtW,EAAQwW,UACVvf,KAAKwf,gBAAgBzW,EAAQwW,UAG/B,IAAK,MAAMzb,KAAOiF,EAEZA,EAAQ8R,eAAe/W,KAAS8a,GAAexF,IAAItV,IACrD9D,KAAKmf,YAAYpW,EAAQjF,GAAM,KAAM,gBAKzC,OADA9D,KAAK2I,OAAOsG,SAAU,EACf/D,QAAQC,QAAQnL,KAAK2I,OAC9B,CAEQsW,YAAYlW,GAClBA,EAAQ6D,SAAS6S,IACf,MAAMpN,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkB6N,EAAW5b,OAEhDwO,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAC3B6N,EAAW7L,MACX5T,KAAK4R,kBAAkB6N,EAAWC,iBAEhC1f,KAAK2Q,mBAAmB0B,EAAOuB,MAAMW,UACvClC,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkB6N,EAAWlF,OAChDva,KAAK2Q,mBAAmB8O,EAAWlF,SAC7ClI,EAAOqB,MAAQ,UAAY+L,EAAWlF,MAAQ,MAGhDlI,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkB6N,EAAWjL,UAC1DnC,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAa4O,EAAWnF,QACjDjI,EAAOqB,OAAS1T,KAAK4R,kBAAkB6N,EAAW7J,KAAM,IAExD5V,KAAKsU,sBAAsBjC,GAC3BrS,KAAK6T,cAAcxB,GACnBrS,KAAK2I,OAAOlC,QAAQI,KAAKwL,EAAO,GAEpC,CAEQmN,gBAAgBzW,GACtBA,EAAQ6D,SAAS+S,IACf,MAAMtN,EAAS,IAAI,IACnBA,EAAOyC,SAAW,IAAI,IACtBzC,EAAOpO,KAAO,aACdoO,EAAO7Q,KAAOxB,KAAK4R,kBAAkB+N,EAAI/K,SAAU,IACnD,MAAMC,EAAYxC,EAAO7Q,KAAKsQ,MAAM,KAChC+C,EAAU5N,OAAS,IACrBoL,EAAOyC,SAASC,UAAY/U,KAAK4R,kBAAkBiD,EAAU,KAEtC,IAArBA,EAAU5N,OACZoL,EAAOyC,SAASE,SAAWhV,KAAK4R,kBAAkBiD,EAAU,IAC9B,IAArBA,EAAU5N,SACnBoL,EAAOyC,SAASG,WAAajV,KAAK4R,kBAAkBiD,EAAU,IAC9DxC,EAAOyC,SAASE,SAAWhV,KAAK4R,kBAAkBiD,EAAU,KAE9DxC,EAAOyC,SAASP,SAAWvU,KAAK4R,kBAAkB+N,EAAIC,QACtD5f,KAAK6T,cAAcxB,GACnBrS,KAAK2I,OAAOlC,QAAQI,KAAKwL,EAAO,GAEpC,CAEQ0M,eAAehW,GACrBA,EAAQ6D,SAAS+S,IACf,MAAMtN,EAAS,IAAI,IACnBA,EAAOyC,SAAW,IAAI,IACtBzC,EAAOpO,KAAO,aACdoO,EAAO7Q,KAAOxB,KAAK4R,kBAAkB+N,EAAIE,aACzCxN,EAAOyC,SAASwJ,SAAWte,KAAK4R,kBAAkB+N,EAAIG,aACtDzN,EAAOyC,SAAS0J,KAAOxe,KAAK4R,kBAAkB+N,EAAInB,MAClDnM,EAAOyC,SAAS+I,MAAQ7d,KAAK4R,kBAAkB+N,EAAI9B,OACnDxL,EAAOyC,SAAS2J,WAAaze,KAAK4R,kBAAkB+N,EAAII,SACxD1N,EAAOyC,SAAS4J,QAAU1e,KAAK4R,kBAAkB+N,EAAIjB,SACtB,MAA3BrM,EAAOyC,SAAS4J,UAClBrM,EAAOyC,SAAS4J,QAAUrM,EAAOyC,SAAS4J,QAAQsB,eAEpDhgB,KAAK6T,cAAcxB,GACnBrS,KAAK2I,OAAOlC,QAAQI,KAAKwL,EAAO,GAEpC,CAEQiN,YAAYvW,GAClBA,EAAQ6D,SAAS+S,IACf,MAAMtN,EAAS,IAAI,IACnBA,EAAOI,KAAO,IAAI,IAClBJ,EAAOpO,KAAO,SACdoO,EAAO7Q,KAAOxB,KAAK4R,kBAAkB+N,EAAIM,MACzC5N,EAAOI,KAAKyD,OAASlW,KAAK4R,kBAAkB+N,EAAIxJ,YAChD9D,EAAOI,KAAK6D,MAAQtW,KAAK+R,aAAaM,EAAOI,KAAKyD,QAClD7D,EAAOI,KAAKuD,eAAiBhW,KAAK4R,kBAAkB+N,EAAIO,OACnDlgB,KAAK2Q,mBAAmB0B,EAAOI,KAAK6D,SACnCtW,KAAK2Q,mBAAmB0B,EAAO7Q,MACjC6Q,EAAO7Q,KAAO6Q,EAAOI,KAAK6D,MAE1BjE,EAAO7Q,MAAQ,MAAQ6Q,EAAOI,KAAK6D,OAGvCtW,KAAK6T,cAAcxB,GACnBrS,KAAK2I,OAAOlC,QAAQI,KAAKwL,EAAO,GAEpC,CAEQ8M,YAAYpW,EAAgBoX,EAAsB3e,EAAe,MACvEuH,EAAQ6D,SAAS+S,IACf,MAAMtN,EAAS,IAAI,IACnBA,EAAOqC,WAAa,IAAI,IACxBrC,EAAOpO,KAAO,eACdoO,EAAOqC,WAAWzQ,KAAO,aAEvBoO,EAAO7Q,KADG,MAARA,EACYA,EAEAxB,KAAK4R,kBAAkB+N,EAAIQ,IAE3C,IAAK,MAAMrc,KAAO6b,EAEZA,EAAI9E,eAAe/W,IAAQA,IAAQqc,GACrCngB,KAAK8T,WAAWzB,EAAQvO,EAAK6b,EAAI7b,GAAKsc,YAG1CpgB,KAAK6T,cAAcxB,GACnBrS,KAAK2I,OAAOlC,QAAQI,KAAKwL,EAAO,GAEpC,EClKK,MAAMgO,WAA4B,EACvCjL,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,MAAM4Q,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAM6e,MAAO,MAClDjO,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAM8e,OAC5C,MAAM7V,EAAO1K,KAAK4R,kBAAkBnQ,EAAM+e,MACrCxgB,KAAK2Q,mBAAmBjG,KACvB1K,KAAK2Q,mBAAmB0B,EAAOqB,OACjCrB,EAAOqB,MAAQhJ,EAEf2H,EAAOqB,OAAS,OAAShJ,GAI7B,MAAMzG,EAAOxC,EAAM,cACnB,GAAa,aAATwC,EACFoO,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAMia,UACrDrJ,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAMma,UACrDvJ,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAM,kBACvC,GAAa,gBAATwC,EAAwB,CACjCoO,EAAOpO,KAAO,SACdoO,EAAOI,KAAO,IAAI,IAClBJ,EAAOI,KAAKuD,eAAiBhW,KAAK4R,kBAAkBnQ,EAAM,iBAC1D4Q,EAAOI,KAAKyD,OAASlW,KAAK4R,kBAAkBnQ,EAAM,gBAClD4Q,EAAOI,KAAK6D,MAAQtW,KAAK+R,aAAaM,EAAOI,KAAKyD,QAClD7D,EAAOI,KAAK2D,KAAOpW,KAAK4R,kBAAkBnQ,EAAMgf,KAChD,MAAMC,EAAS1gB,KAAK4R,kBAAkBnQ,EAAMkf,QAC5C,IAAK3gB,KAAK2Q,mBAAmB+P,GAAS,CACpC,MAAME,EAAWF,EAAO5O,MAAM,KAC1B8O,EAAS3Z,OAAS,IACpBoL,EAAOI,KAAKC,SAAW6E,SAASqJ,EAAS,GAAI,MAAMR,WACnD/N,EAAOI,KAAKK,SAAW,IAAOyE,SAASqJ,EAAS,GAAI,OAAOR,W,EAKjEpgB,KAAKsU,sBAAsBjC,GAC3BrS,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,EClDK,MAAMkY,WAA0B,EACrCzL,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,GAAe,MAAXiG,EAEF,OADAJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,IAAImY,GAAW,EAsGf,OArGA/X,EAAQ6D,SAASnL,IACf,GAAIA,EAAMwF,OAAS,GAAM6Z,IAA0B,UAAbrf,EAAM,IAA+B,UAAbA,EAAM,IAElE,YADAqf,GAAW,GAIb,MAAMzO,EAASrS,KAAKwT,kBAyBpB,GAxBAnB,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMA,EAAMwF,OAAS,IAC3DoL,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAM,GAAI,MAG5B,IAAjBA,EAAMwF,SACJjH,KAAK+gB,cAActf,EAAO,aACzBzB,KAAK+gB,cAActf,EAAO,aAC1BzB,KAAK+gB,cAActf,EAAO,UAC1BzB,KAAK+gB,cAActf,EAAO,UAE7B4Q,EAAOpO,KAAO,eACdoO,EAAOqC,WAAa,IAAI,IACxBrC,EAAOqC,WAAWzQ,KAAO,cAIzBjE,KAAK+gB,cAActf,EAAO,eAC1BzB,KAAK+gB,cAActf,EAAO,WAC1BzB,KAAK+gB,cAActf,EAAO,iBAE1B4Q,EAAOpO,KAAO,SACdoO,EAAOI,KAAO,IAAI,KAGhBhR,EAAMwF,OAAS,GAAKxF,EAAMwF,OAAS,GAAM,EAC3C,IAAK,IAAIoN,EAAI,EAAGA,EAAI5S,EAAMwF,OAAS,EAAGoN,GAAK,EAAG,CAC5C,MAAM2M,EAAqBvf,EAAM4S,EAAI,GACrC,GAAIrU,KAAK2Q,mBAAmBqQ,GAC1B,SAGF,MAAMC,EAAoBxf,EAAM4S,EAAI,GAC9B6M,EAAiBD,EAAU5T,cAEjC,GAAIgF,EAAOpO,OAAS,UAAkB,CACpC,GACqB,QAAnBid,IACsB,MAArB7O,EAAOuB,MAAMa,MAA6C,IAA7BpC,EAAOuB,MAAMa,KAAKxN,QAChD,CACAoL,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAamQ,GACtC,Q,CACK,IACe,aAAnBE,GAAoD,UAAnBA,IAClClhB,KAAK2Q,mBAAmB0B,EAAOuB,MAAMW,UACrC,CACAlC,EAAOuB,MAAMW,SAAWyM,EACxB,Q,CACK,GACc,aAAnBE,GACAlhB,KAAK2Q,mBAAmB0B,EAAOuB,MAAMY,UACrC,CACAnC,EAAOuB,MAAMY,SAAWwM,EACxB,Q,CACK,GAAuB,SAAnBE,GAA6BlhB,KAAK2Q,mBAAmB0B,EAAOuB,MAAMgE,MAAO,CAClFvF,EAAOuB,MAAMgE,KAAOoJ,EACpB,Q,OAEG,GAAI3O,EAAOpO,OAAS,SAAiB,CAC1C,GACqB,eAAnBid,GACAlhB,KAAK2Q,mBAAmB0B,EAAOI,KAAKuD,gBACpC,CACA3D,EAAOI,KAAKuD,eAAiBgL,EAC7B,Q,CACK,GAAuB,WAAnBE,GAA+BlhB,KAAK2Q,mBAAmB0B,EAAOI,KAAKyD,QAAS,CACrF7D,EAAOI,KAAKyD,OAAS8K,EACrB3O,EAAOI,KAAK6D,MAAQtW,KAAK+R,aAAaiP,GACtC,Q,CACK,GAAuB,QAAnBE,GAA4BlhB,KAAK2Q,mBAAmB0B,EAAOI,KAAK2D,MAAO,CAChF/D,EAAOI,KAAK2D,KAAO4K,EACnB,Q,CACK,GACc,gBAAnBE,GACAlhB,KAAK2Q,mBAAmB0B,EAAOI,KAAKC,WACpC1S,KAAK2Q,mBAAmB0B,EAAOI,KAAKK,UAEpC,GAAI9S,KAAKoS,kBAAkBC,EAAQ2O,GACjC,cAEG,GAAuB,SAAnBE,EAET,Q,CAIJlhB,KAAK8T,WAAWzB,EAAQ4O,EAAWD,E,CAIvChhB,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,CAEQoY,cAAcpN,EAAenS,GACnC,OAAc,MAAVmS,GAA0B,MAARnS,GAIpBmS,EAAOxK,QAAQ8J,IAAOjT,KAAK2Q,mBAAmBsC,IAAMA,EAAE5F,gBAAkB7L,EAAK6L,gBAC1EpG,OAAS,CAEhB,ECtHF,MAAMka,GAAkB,IAAIjP,OAAO,qBAAsB,KAElD,MAAMkP,WAA2B,EACtChM,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAA0B2M,KAAKN,MAAMtS,GAC3C,GAAe,MAAXiG,GAAoC,MAAjBA,EAAQmP,OAA0C,IAAzBnP,EAAQmP,MAAMjR,OAE5D,OADA0B,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,MAAM0Y,EAAa,IAAIxI,IACjByI,EAAkB,IAAIzI,IACtB0I,EAAavhB,KAAKwhB,gBAAgBzY,EAAQ/B,SA8ChD,OA7CAhH,KAAKyhB,kBAAkB,KAAMF,EAAYF,GACzCA,EAAWzU,SAAQ,CAACyI,EAAKvR,KACvBwd,EAAgBtI,IAAIlV,EAAK6E,EAAO3B,QAAQC,QACxC,MAAMgM,EAAI,IAAI,IACdA,EAAEzR,KAAO6T,EACT1M,EAAO3B,QAAQH,KAAKoM,EAAE,IAGxBlK,EAAQmP,MAAMtL,SAAS+R,IACD,MAAhBA,EAAK3X,SAAmB2X,EAAK3X,QAAQC,OAAS,GAAKqa,EAAgBlI,IAAIuF,EAAK3X,QAAQ,KACtF2B,EAAOkG,oBAAoBhI,KAAK,CAC9B8B,EAAOlC,QAAQQ,OACfqa,EAAgBlf,IAAIuc,EAAK3X,QAAQ,MAIrC,MAAMqL,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkB+M,EAAK9a,OAC1CwO,EAAOoB,SAAWkL,EAAKlL,SAAW,EAER,MAAtBkL,EAAK+C,eAAwC,MAAf/C,EAAKhL,QAAkBgL,EAAKhL,OAAO1M,OAAS,IAEjC,IAAzC0X,EAAK+C,cAActQ,QAAQ,WACiB,IAA5CuN,EAAK+C,cAActQ,QAAQ,aAE3BpR,KAAK2hB,aAAatP,EAAQsM,EAAKhL,QACwB,IAA9CgL,EAAK+C,cAActQ,QAAQ,eACpCpR,KAAKsf,YAAYjN,EAAQsM,EAAKhL,QAE9BgL,EAAK+C,cAActQ,QAAQ,aAAe,GAC1CuN,EAAKhL,OAAOiO,MAAM3O,GAAiB,aAAXA,EAAEhP,OAAwBjE,KAAK2Q,mBAAmBsC,EAAExR,SAE5EzB,KAAK2hB,aAAatP,EAAQsM,EAAKhL,QAE/B3T,KAAKmf,YAAY9M,EAAQsM,EAAKhL,SAIlCtB,EAAOqB,OAAS,KAAO1T,KAAK4R,kBAAkB+M,EAAK/I,KAAM,IACzD5V,KAAKsU,sBAAsBjC,GAC3BrS,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,CAEQgZ,aAAatP,EAAoBsB,GACvC,MAAMkO,EAAiB,GACvBlO,EAAO/G,SAASoH,IACd,IAAIhU,KAAK2Q,mBAAmBqD,EAAMvS,QAAyB,YAAfuS,EAAM/P,KAIlD,GACkB,aAAf+P,EAAM/P,MAAsC,UAAf+P,EAAM/P,OACpCjE,KAAK2Q,mBAAmB0B,EAAOuB,MAAMW,UAGhC,GAAmB,aAAfP,EAAM/P,MAAuBjE,KAAK2Q,mBAAmB0B,EAAOuB,MAAMY,UAC3EnC,EAAOuB,MAAMY,SAAWR,EAAMvS,WACzB,GAAmB,SAAfuS,EAAM/P,MAAmBjE,KAAK2Q,mBAAmB0B,EAAOuB,MAAMgE,MACvEvF,EAAOuB,MAAMgE,KAAO5D,EAAMvS,WACrB,GAAmB,QAAfuS,EAAM/P,KACf4d,EAAKhb,KAAKmN,EAAMvS,YACX,GAAmB,cAAfuS,EAAM/P,KAAsB,CACrC,IAAI6d,EAAe9N,EAAMvS,MAAMgQ,WAAW,iBACtCuC,EAAMvS,MACN,gBAAkBuS,EAAMvS,MAC5BqgB,EAAeA,EAAapQ,QAAQ,aAAc,IAClDoQ,EAAeA,EAAapQ,QAAQyP,GAAiB,iBACrDU,EAAKhb,KAAKib,E,MAEV9hB,KAAK8T,WACHzB,EACA2B,EAAM+B,MACN/B,EAAMvS,MACc,IAApBuS,EAAM+N,UAAkB,YAAmB,gBAnB7C1P,EAAOuB,MAAMW,SAAWP,EAAMvS,K,IAuBlC4Q,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAagR,EACxC,CAEQvC,YAAYjN,EAAoBsB,GACtCtB,EAAOI,KAAO,IAAI,IAClBJ,EAAOpO,KAAO,SACd0P,EAAO/G,SAASoH,IAEZhU,KAAK2Q,mBAAmBqD,EAAMvS,QACf,YAAfuS,EAAM/P,MACS,WAAf+P,EAAM/P,OAKW,WAAf+P,EAAM/P,MAAqBjE,KAAK2Q,mBAAmB0B,EAAOI,KAAKuD,gBACjE3D,EAAOI,KAAKuD,eAAiBhC,EAAMvS,MACX,aAAfuS,EAAM/P,MAAuBjE,KAAK2Q,mBAAmB0B,EAAOI,KAAKyD,SAC1E7D,EAAOI,KAAKyD,OAASlC,EAAMvS,MAC3B4Q,EAAOI,KAAK6D,MAAQtW,KAAK+R,aAAaM,EAAOI,KAAKyD,SAC1B,UAAflC,EAAM/P,MAAoBjE,KAAK2Q,mBAAmB0B,EAAOI,KAAK2D,MACvE/D,EAAOI,KAAK2D,KAAOpC,EAAMvS,MACD,aAAfuS,EAAM/P,MAAuBjE,KAAK2Q,mBAAmB0B,EAAOI,KAAKK,UACrE9S,KAAKoS,kBAAkBC,EAAQ2B,EAAMvS,QAS1CzB,KAAK8T,WACHzB,EACA2B,EAAM+B,MACN/B,EAAMvS,MACc,IAApBuS,EAAM+N,UAAkB,YAAmB,W,GAInD,CAEQ5C,YAAY9M,EAAoBsB,GACtCA,EAAO/G,SAASoH,IACVhU,KAAK2Q,mBAAmBqD,EAAMvS,QAAyB,YAAfuS,EAAM/P,MAGlDjE,KAAK8T,WACHzB,EACA2B,EAAM+B,MACN/B,EAAMvS,MACc,IAApBuS,EAAM+N,UAAkB,YAAmB,UAC5C,GAEL,CAEQP,gBAAgBxa,GACtB,GAAe,MAAXA,EACF,MAAO,GAET,MAAMua,EAAqC,GACrC7a,EAAM,IAAImS,IAAkC,IAYlD,OAXA7R,EAAQ4F,SAAS+S,IACfjZ,EAAIsS,IAAI2G,EAAIqC,KAAMrC,GAClBA,EAAIsC,SAAW,EAAE,IAEnBjb,EAAQ4F,SAAS+S,IACQ,MAAnBA,EAAIuC,aAA2C,KAApBvC,EAAIuC,aAAsBxb,EAAI0S,IAAIuG,EAAIuC,aACnExb,EAAItE,IAAIud,EAAIuC,aAAaD,SAASpb,KAAK8Y,GAEvC4B,EAAW1a,KAAK8Y,E,IAGb4B,CACT,CAEQE,kBACNU,EACAC,EACA1b,GAEY,MAAR0b,GAGJA,EAAKxV,SAASqG,IACZ,GAAe,MAAXA,EAAEpP,OAAoC,KAAnBoP,EAAEpP,MAAMwM,OAAe,CAC5C,IAAIxM,EAAQoP,EAAEpP,MAAMwM,OACD,MAAf8R,GAA8C,KAAvBA,EAAY9R,SACrCxM,EAAQse,EAAc,IAAMte,GAE9B6C,EAAIsS,IAAI/F,EAAE+O,KAAMne,GACE,MAAdoP,EAAEgP,UAA0C,IAAtBhP,EAAEgP,SAAShb,QACnCjH,KAAKyhB,kBAAkB5d,EAAOoP,EAAEgP,SAAUvb,E,IAIlD,ECxMK,MAAM2b,WAA2B,EACtCjN,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EACGI,QAAQ1H,GACc,6BAAdA,EAAM8P,MAEd3E,SAASnL,IACR,MAAM4Q,EAASrS,KAAKwT,kBACdjC,EAAMvR,KAAK4R,kBAAkBnQ,EAAM8P,IAAKvR,KAAK4R,kBAAkBnQ,EAAM+P,WAC3Ea,EAAO7Q,KAAOxB,KAAK4R,kBAAkB5R,KAAKsR,YAAYC,GAAM,MAC5Dc,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAM8S,UACrDlC,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAM+S,UACrDnC,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAaU,GACtCvR,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG/B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECvBF,IAAY2Z,IAAZ,SAAYA,GACV,qBACA,8BACD,CAHD,CAAYA,KAAAA,GAAiB,KCEtB,MAAMC,WAA2B,EACtCnN,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAmB2M,KAAKN,MAAMtS,GACpC,GAAe,MAAXiG,GAAmC,MAAhBA,EAAQjG,KAE7B,OADA6F,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,IAAK,MAAM7E,KAAOiF,EAAQjG,KAAM,CAE9B,IAAKiG,EAAQjG,KAAK+X,eAAe/W,GAC/B,SAGF,MAAMrC,EAAQsH,EAAQjG,KAAKgB,GACrBuO,EAASrS,KAAKwiB,WAAW/gB,GAC/BkH,EAAOlC,QAAQI,KAAKwL,E,CAItB,OADA1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,CAEQ6Z,WAAWxH,GACjB,MAAM3I,EAASrS,KAAKwT,kBAKpB,OAJAnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBoJ,EAAMyH,SAC3CpQ,EAAOqB,MAAQ1T,KAAK4R,kBAAkBoJ,EAAMtH,OAC5CrB,EAAOoB,SAAWuH,EAAMvH,SAAW,EAE3BuH,EAAM/W,MACZ,KAAKqe,GAAkBI,MACrB1iB,KAAK2iB,iBAAiB3H,EAAO3I,GAC7B,MACF,KAAKiQ,GAAkBM,WACrB5iB,KAAK6iB,sBAAsB7H,EAAO3I,GAClC,MACF,QACE,OAMJ,OAFArS,KAAKsU,sBAAsBjC,GAC3BrS,KAAK6T,cAAcxB,GACZA,CACT,CAEQsQ,iBAAiB3H,EAAiB3I,GACxCA,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBoJ,EAAMzG,UACrDlC,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBoJ,EAAMxG,UACrDnC,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAamK,EAAMzJ,IAC9C,CAEQsR,sBAAsB7H,EAAiB3I,GAC7CA,EAAOpO,KAAO,SACdoO,EAAOI,KAAO,IAAI,IAClBJ,EAAOI,KAAKuD,eAAiBhW,KAAK4R,kBAAkBoJ,EAAMzG,UAC1DlC,EAAOI,KAAKyD,OAASlW,KAAK4R,kBAAkBoJ,EAAM8H,cAClDzQ,EAAOI,KAAK6D,MAAQtW,KAAK+R,aAAaM,EAAOI,KAAKyD,QAClD7D,EAAOI,KAAK2D,KAAOpW,KAAK4R,kBAAkBoJ,EAAM+H,WAC3C/iB,KAAK2Q,mBAAmBqK,EAAMgI,eAC5BhjB,KAAKoS,kBAAkBC,EAAQ2I,EAAMgI,eACxChjB,KAAK8T,WAAWzB,EAAQ,aAAc2I,EAAMgI,cAG3ChjB,KAAK2Q,mBAAmBqK,EAAMxG,WACjCxU,KAAK8T,WAAWzB,EAAQ,MAAO2I,EAAMxG,SAEzC,ECzEK,MAAMyO,WAA0B,EACrC7N,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU2M,KAAKN,MAAMtS,GAC3B,GAAe,MAAXiG,GAAmD,IAAhCkH,OAAO0M,KAAK5T,GAAS9B,OAE1C,OADA0B,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,IAAK,MAAMua,KAAWna,EAEjBA,EAAQ8R,eAAeqI,KACxBljB,KAAK2Q,mBAAmBuS,IACI,IAA5Bna,EAAQma,GAASjc,QAKnB8B,EAAQma,GAAStW,SAASnL,IACxB,GACEzB,KAAK2Q,mBAAmBlP,EAAM0hB,eACS,IAAvC1hB,EAAM0hB,aAAa/R,QAAQ,QAE3B,OAGFpR,KAAKiU,cAActL,EAAQua,GAC3B,MAAM7Q,EAASrS,KAAKwT,kBAQpB,GAPAnB,EAAO7Q,KAAOC,EAAM0hB,aAAazR,QAAQ,UAAW,IAAIA,QAAQ,WAAY,IACxEW,EAAO7Q,KAAKyF,OAAS,KACvBoL,EAAO7Q,KAAO6Q,EAAO7Q,KAAK6P,UAAU,EAAG,KAEzCgB,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAMN,QACrDkR,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAM0hB,cAEpB,MAApB1hB,EAAM2hB,WAAoB,CAC5B/Q,EAAOuB,MAAMW,SACS,MAApB9S,EAAM2hB,WACFpjB,KAAK4R,kBAAkBnQ,EAAM2hB,WAAWC,gBACxC,KACN,IAAK,MAAMC,KAAQ7hB,EAAM2hB,WAEpB3hB,EAAM2hB,WAAWvI,eAAeyI,IACxB,mBAATA,GACS,eAATA,GAIFtjB,KAAK8T,WAAWzB,EAAQiR,EAAM7hB,EAAM2hB,WAAWE,G,CAInDtjB,KAAKsU,sBAAsBjC,GAC3BrS,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAS/B,OALIrS,KAAK0P,cACP1P,KAAK+S,yBAAyBpK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,EChEF,MAAM4a,GAAc,YACdC,GAAqB,mBACrBC,GAAiB,eACjBC,GAAY,UAEX,MAAMC,WAA6B,EACxCvO,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EAEnB,IAAIib,EACAC,EACAC,EACAC,EAAc/jB,KAAKmQ,aAAarN,GAAMsN,KAAK,MAE/C,IAA0C,IAAtC2T,EAAY3S,QAAQmS,IAAqB,CAC3C,MAAMS,EAAQD,EAAYjS,MAAMyR,IAC5BS,EAAM/c,OAAS,IACjB8c,EAAcC,EAAM,GACpBJ,EAAYI,EAAM,G,CAGtB,IAAiD,IAA7CD,EAAY3S,QAAQoS,IAA4B,CAClD,MAAMQ,EAAQD,EAAYjS,MAAM0R,IAC5BQ,EAAM/c,OAAS,IACjB8c,EAAcC,EAAM,GACpBH,EAAmBG,EAAM,G,CAG7B,GAA4C,IAAxCD,EAAY3S,QAAQqS,IAAuB,CAC7C,MAAMO,EAAQD,EAAYjS,MAAM2R,IAC5BO,EAAM/c,OAAS,IACjB8c,EAAcC,EAAM,GACpBF,EAAeE,EAAM,G,CAIzB,MAAMtQ,EAAQ1T,KAAKikB,kBAAkBL,GAC/BM,EAAelkB,KAAKikB,kBAAkBJ,GACtCM,EAAWnkB,KAAKikB,kBAAkBH,GA+BxC,OA7BApQ,EAAM9G,SAASwX,IACb,MAAM/R,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBwS,EAAEhiB,IAAI,SAC3CiQ,EAAOqB,MAAQ1T,KAAK4R,kBAAkBwS,EAAEhiB,IAAI,SAC5CpC,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B8R,EAASlb,OAAOib,GAActX,SAASyX,IACrC,MAAMhS,EAASrS,KAAKwT,kBACd8Q,EAAUD,EAAEjL,IAAI,gBAAkB,eAAiB,cACzD/G,EAAO7Q,KAAOxB,KAAK4R,kBAAkByS,EAAEjiB,IAAIkiB,GAAU,IAChDtkB,KAAK2Q,mBAAmB0T,EAAEjiB,IAAI,iBAC5BpC,KAAK2Q,mBAAmB0B,EAAO7Q,QAClC6Q,EAAO7Q,MAAQ,MAEjB6Q,EAAO7Q,MAAQ6iB,EAAEjiB,IAAI,eAEvBiQ,EAAOqB,MAAQ1T,KAAK4R,kBAAkByS,EAAEjiB,IAAI,YACxCiiB,EAAEjL,IAAI,iBACR/G,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAawT,EAAEjiB,IAAI,iBAE9CiQ,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkByS,EAAEjiB,IAAI,UACrDiQ,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkByS,EAAEjiB,IAAI,aACrDpC,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,CAEQsb,kBAAkBnhB,GACxB,GAAI9C,KAAK2Q,mBAAmB7N,KAAsC,IAA7BA,EAAKsO,QAAQsS,IAChD,MAAO,GAET,MAAMxL,EAA+B,GAwCrC,OAvCApV,EAAKgP,MAAM4R,IAAW9W,SAAS2X,IAC7B,IAAyB,IAArBA,EAAEnT,QAAQ,MACZ,OAEF,MAAMuN,EAAO,IAAI9F,IACjB,IAAI2L,EACAC,EACJF,EAAEzS,MAAM,MAAMlF,SAAS8X,IACrB,GAAmB,MAAfF,EAEF,YADAA,GAAe,KAAOE,GAGxB,MAAMC,EAAaD,EAAEtT,QAAQ,KAC7B,IAAItN,EACAuR,GACgB,IAAhBsP,IAGF7gB,EAAM4gB,EAAErT,UAAU,EAAGsT,GACjBD,EAAEzd,OAAS0d,EAAa,IAC1BtP,EAAMqP,EAAErT,UAAUsT,EAAa,IAGxB,MAAP7gB,GACF6a,EAAK3F,IAAIlV,EAAKuR,GAEJ,YAARvR,GAA6B,SAARA,IACvB0gB,EAAcnP,EACdoP,EAAiB3gB,G,IAGF,MAAf0gB,GAAyC,MAAlBC,GACzB9F,EAAK3F,IAAIyL,EAAgBD,GAET,IAAd7F,EAAKiG,MAGT1M,EAAMrR,KAAK8X,EAAK,IAEXzG,CACT,EClHK,MAAM2M,WAA4B,EAAzC,c,oBACE,KAAAlc,OAAS,IAAI,CA4Gf,CA1GEyM,MAAMtS,GACJ,MAAM8M,EAAM5P,KAAK2P,SAAS7M,GAC1B,GAAW,MAAP8M,EAEF,OADA5P,KAAK2I,OAAOsG,SAAU,EACf/D,QAAQC,QAAQnL,KAAK2I,QAI9B,MAAMmc,EAAkBlV,EAAI9E,cAAc,eAE1C,GAAuB,MAAnBga,EAGF,OAFA9kB,KAAK2I,OAAOgQ,aAAe,8BAC3B3Y,KAAK2I,OAAOsG,SAAU,EACf/D,QAAQC,QAAQnL,KAAK2I,QAG9B,MAAMoc,EAAWD,EAAgBha,cAAc,QAC/C,GAAgB,MAAZia,EAGF,OAFA/kB,KAAK2I,OAAOgQ,aAAe,qCAC3B3Y,KAAK2I,OAAOsG,SAAU,EACf/D,QAAQC,QAAQnL,KAAK2I,QAG9B,MAAMqc,EAAYD,EAASja,cAAc,SACzC,OAAiB,MAAbka,GACFhlB,KAAK2I,OAAOgQ,aAAe,6CAC3B3Y,KAAK2I,OAAOsG,SAAU,EACf/D,QAAQC,QAAQnL,KAAK2I,UAG9B3I,KAAKilB,SAASD,GAAW,EAAM,IAE3BhlB,KAAK0P,cACP1P,KAAK+S,yBAAyB/S,KAAK2I,QAGrC3I,KAAK2I,OAAOsG,SAAU,EACf/D,QAAQC,QAAQnL,KAAK2I,QAC9B,CAEAsc,SAASC,EAAeC,EAAqBC,GAC3C,MAAMjR,EAAcnU,KAAK2I,OAAO3B,QAAQC,OACxC,IAAIoe,EAAYD,EAEhB,IAAKD,EAAY,CACG,KAAdE,IACFA,GAAa,KAEf,MAAMC,EAAStlB,KAAKkT,yBAAyBgS,EAAM,QACnDG,GAAuB,MAAVC,EAAiB,IAAMA,EAAOzZ,YAC3C,MAAMwL,EAAS,IAAI,IACnBA,EAAO7V,KAAO6jB,EACdrlB,KAAK2I,OAAO3B,QAAQH,KAAKwQ,E,CAG3BrX,KAAKsT,4BAA4B4R,EAAM,SAAStY,SAASoO,IACvD,MAAMuK,EAAcvlB,KAAK2I,OAAOlC,QAAQQ,OAElCoL,EAASrS,KAAKwT,kBACpBxT,KAAKsT,4BAA4B0H,EAAO,UAAUpO,SAAS4Y,IACzD,MAAMC,EAAUzlB,KAAKkT,yBAAyBsS,EAAa,SACrD/jB,EAAmB,MAAXgkB,EAAkBA,EAAQ5Z,YAAc,KACtD,GAAI7L,KAAK2Q,mBAAmBlP,GAC1B,OAEF,MAAMikB,EAAQ1lB,KAAKkT,yBAAyBsS,EAAa,OACnD1hB,EAAe,MAAT4hB,EAAgBA,EAAM7Z,YAAc,KAEhD,GAAY,QAAR/H,EACFuO,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,QACjC,GAAY,aAARqC,EACTuO,EAAOuB,MAAMW,SAAW9S,OACnB,GAAY,aAARqC,EACTuO,EAAOuB,MAAMY,SAAW/S,OACnB,GAAY,QAARqC,EACTuO,EAAOuB,MAAMgE,KAAOnW,EAAMiQ,QAAQ,OAAQ,SACrC,GAAY,UAAR5N,EACTuO,EAAO7Q,KAAOC,OACT,GAAY,UAARqC,EACTuO,EAAOqB,OAASjS,EAAQ,SACnB,CACL,IAAIwC,EAAO,UACX,MAAM0hB,EAAQF,EAAQrC,WAEpBuC,EAAM1e,OAAS,GACU,MAAzB0e,EAAMC,iBAC0B,SAAhCD,EAAMC,gBAAgBnkB,QAEtBwC,EAAO,aAETjE,KAAK8T,WAAWzB,EAAQvO,EAAKrC,EAAOwC,E,KAIxCjE,KAAK6T,cAAcxB,GACnBrS,KAAK2I,OAAOlC,QAAQI,KAAKwL,GAEpB8S,GACHnlB,KAAK2I,OAAOkG,oBAAoBhI,KAAK,CAAC0e,EAAapR,G,IAIvDnU,KAAKsT,4BAA4B4R,EAAM,SAAStY,SAAS3L,IACvDjB,KAAKilB,SAAShkB,GAAO,EAAOokB,EAAU,GAE1C,EC/GK,MAAMQ,WAA4B,EACvCzQ,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,GAAIzB,KAAK2Q,mBAAmBlP,EAAMqkB,OAChC,OAGFrkB,EAAMskB,OACH/lB,KAAK2Q,mBAAmBlP,EAAMskB,QAAUtkB,EAAMskB,MAAMtU,WAAW,SAC5DhQ,EAAMskB,MAAMrU,QAAQ,QAAS,IAC7BjQ,EAAMskB,MACZ,MAAMV,EAAarlB,KAAK2Q,mBAAmBlP,EAAMskB,OAAuB,KAAdtkB,EAAMskB,MAChE/lB,KAAKiU,cAActL,EAAQ0c,GAE3B,MAAMhT,EAASrS,KAAKwT,kBACpBnB,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAM8e,OAC5ClO,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAMqkB,MAAO,MAClDzT,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAMia,UACrDrJ,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAMma,UACrDvJ,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAMiZ,KAC5C1a,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAGzBrS,KAAK0P,cACP1P,KAAK+S,yBAAyBpK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECtCK,MAAMqd,WAA0B,EACrC5Q,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,GAAIA,EAAMwF,OAAS,EACjB,OAGFjH,KAAKiU,cAActL,EAAQlH,EAAM,IACjC,MAAM4Q,EAASrS,KAAKwT,kBAEdE,EAAQ1T,KAAK4R,kBAAkBnQ,EAAM,IAU3C,GATIiS,IACFrB,EAAOqB,MAAQ,GAAGA,OAGpBrB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAM,GAAI,MAC/C4Q,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAM,IACrD4Q,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAM,IACrD4Q,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAM,IAExCA,EAAMwF,OAAS,EAEjB,IAAK,IAAIoN,EAAI,EAAGA,EAAI5S,EAAMwF,OAAQoN,GAAQ,EACxB,cAAZ5S,EAAM4S,GACRhC,EAAOuB,MAAMgE,KAAOnW,EAAM4S,EAAI,GAE9BrU,KAAK8T,WAAWzB,EAAQ5Q,EAAM4S,GAAI5S,EAAM4S,EAAI,IAKlDrU,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAGzBrS,KAAK0P,cACP1P,KAAK+S,yBAAyBpK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECtCK,MAAMsd,WAA4B,EACvC7Q,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,MAAM8jB,EAAc5c,EAAOlC,QAAQQ,OACnC,IAAIkN,EAAcxL,EAAO3B,QAAQC,OAC7B2P,EAAWnV,EAAMmV,SACL,MAAZA,IAEFA,EAAWA,EAASlF,QAAQ,MAAO,KAAKA,QAAQ,wBAAyB,KAE3E,MAAMwU,EAA2D,WAA/ClmB,KAAK4R,kBAAkBgF,EAAU,UACnD,IAAIxC,EAAY8R,EAEhB,GAAIA,EACF,IAAK,IAAI7R,EAAI,EAAGA,EAAI1L,EAAO3B,QAAQC,OAAQoN,IACzC,GAAI1L,EAAO3B,QAAQqN,GAAG7S,OAASoV,EAAU,CACvCxC,GAAY,EACZD,EAAcE,EACd,K,CAKN,MAAMhC,EAASrS,KAAKmmB,gBAAgB1kB,GACpC,GAAI4Q,EAAOpO,OAAS,UAClBoO,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMqV,OAC5CzE,EAAOuB,MAAQ,IAAI,IACnBvB,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAM8P,KAC5Cc,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAM8S,UACrDlC,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAM+S,UACrDnC,EAAOuB,MAAMgE,KAAO5X,KAAK4R,kBAAkBnQ,EAAMmW,WAC5C,GAAIvF,EAAOpO,OAAS,eACzBjE,KAAKomB,gBAAgB3kB,EAAO4Q,QACvB,GAAIA,EAAOpO,OAAS,SACzBoO,EAAOI,KAAOzS,KAAKqmB,UAAU5kB,GAC7B4Q,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMiS,YACvC,GAAIrB,EAAOpO,OAAS,eACzBoO,EAAOyC,SAAW9U,KAAKsmB,cAAc7kB,GACrC4Q,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMiS,QACvC1T,KAAK2Q,mBAAmBlP,EAAM8kB,QAAQ,CAEzC,MAAMC,EAAaxmB,KAAKmmB,gBAAgB1kB,GACxC+kB,EAAW1R,SAAW,KACtB0R,EAAWviB,KAAO,SAClBuiB,EAAW/T,KAAOzS,KAAKqmB,UAAU5kB,GACjCkH,EAAOlC,QAAQI,KAAK2f,E,CAMxB,GAFA7d,EAAOlC,QAAQI,KAAKwL,GAEhB+B,EAAW,CACb,MAAMnB,EAAI,IAAI,IACdA,EAAEzR,KAAOoV,EACTjO,EAAO3B,QAAQH,KAAKoM,E,CAElBiT,GACFvd,EAAOkG,oBAAoBhI,KAAK,CAAC0e,EAAapR,G,IAI9CnU,KAAK0P,cACP1P,KAAK+S,yBAAyBpK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,CAEQwd,gBAAgB1kB,GACtB,MAAM4Q,EAAS,IAAI,IAyBnB,OAvBI5Q,EAAMoZ,eAAe,gBAAkBpZ,EAAMoZ,eAAe,oBAE9DxI,EAAOoB,UAAW,EAClBpB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAMglB,YAAa,MACxDpU,EAAOpO,KAAO,SAGXjE,KAAK2Q,mBAAmBlP,EAAMoC,QAC9B7D,KAAK2Q,mBAAmBlP,EAAMilB,YAC9B1mB,KAAK2Q,mBAAmBlP,EAAMklB,WAC9B3mB,KAAK2Q,mBAAmBlP,EAAM6c,WAC9Bte,KAAK2Q,mBAAmBlP,EAAM2c,QAC9Bpe,KAAK2Q,mBAAmBlP,EAAM8S,WAC9BvU,KAAK2Q,mBAAmBlP,EAAM8Y,SAE/BlI,EAAOpO,KAAO,gBAIhBoO,EAAOoB,UAAYzT,KAAK0P,cAA2D,MAA3C1P,KAAK4R,kBAAkBnQ,EAAMoV,IAAK,KAC1ExE,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAMD,KAAM,MACjD6Q,EAAOpO,KAAqB,cAAdxC,EAAM8P,IAAsB,eAAwB,WAE7Dc,CACT,CAEQgU,UAAU5kB,GAChB,MAAMgR,EAAO,IAAI,IAMjB,GALAA,EAAKuD,eAAiBhW,KAAK4R,kBAAkBnQ,EAAMmlB,QACnDnU,EAAKyD,OAASlW,KAAK4R,kBAAkBnQ,EAAM8kB,OAC3C9T,EAAK2D,KAAOpW,KAAK4R,kBAAkBnQ,EAAMolB,OACzCpU,EAAK6D,MAAQtW,KAAK+R,aAAatQ,EAAM8kB,QAEhCvmB,KAAK2Q,mBAAmBlP,EAAMqlB,QAAUrlB,EAAMqlB,MAAM1V,QAAQ,MAAQ,EAAG,CAC1E,MAAM2V,EAActlB,EAAMqlB,MAAiBhV,MAAM,KAC7CiV,EAAW9f,OAAS,IACtBwL,EAAKK,QAAUiU,EAAW,GAC1BtU,EAAKC,SAAWqU,EAAW,GACE,IAAzBtU,EAAKC,SAASzL,QAAqC,MAArBwL,EAAKC,SAAS,KAC9CD,EAAKC,SAAWD,EAAKC,SAAS,I,CAKpC,OAAOD,CACT,CAEQ6T,cAAc7kB,GACpB,MAAMqT,EAAW,IAAI,IAsBrB,OArBAA,EAASjR,MAAQ7D,KAAK4R,kBAAkBnQ,EAAMoC,OAC9CiR,EAASC,UAAY/U,KAAK4R,kBAAkBnQ,EAAMilB,WAClD5R,EAASG,WAAajV,KAAK4R,kBAAkBnQ,EAAMulB,YACnDlS,EAASE,SAAWhV,KAAK4R,kBAAkBnQ,EAAMklB,UACjD7R,EAASP,SAAWvU,KAAK4R,kBAAkBnQ,EAAM8S,UACjDO,EAASmS,QAAUjnB,KAAK4R,kBAAkBnQ,EAAMwlB,SAChDnS,EAASgJ,IAAM9d,KAAK4R,kBAAkBnQ,EAAMqc,KAC5ChJ,EAASwJ,SAAWte,KAAK4R,kBAAkBnQ,EAAM6c,UACjDxJ,EAASoS,SAAWlnB,KAAK4R,kBAAkBnQ,EAAMylB,UACjDpS,EAASqS,SAAWnnB,KAAK4R,kBAAkBnQ,EAAM0lB,UACjDrS,EAAS0J,KAAOxe,KAAK4R,kBAAkBnQ,EAAM+c,MAC7C1J,EAAS+I,MAAQ7d,KAAK4R,kBAAkBnQ,EAAMoc,OAC9C/I,EAAS2J,WAAaze,KAAK4R,kBAAkBnQ,EAAMwK,KACnD6I,EAAS4J,QAAU1e,KAAK4R,kBAAkBnQ,EAAMid,SAChD5J,EAASyF,MAAQva,KAAK4R,kBAAkBnQ,EAAM8Y,OAC9CzF,EAASsJ,MAAQpe,KAAK4R,kBAAkBnQ,EAAM2c,OAEzCpe,KAAK2Q,mBAAmBmE,EAASjR,SACpCiR,EAASjR,MAAQiR,EAASjR,MAAMujB,OAAO,GAAGpH,cAAgBlL,EAASjR,MAAMqR,MAAM,IAG1EJ,CACT,CAEQsR,gBAAgB3kB,EAAY4Q,GAClC,MAAMgV,EAAarnB,KAAKmQ,aAAa1O,EAAMqV,OAC3C,IAAIwQ,GAAgB,EAEpB,GAAID,EAAWpgB,OAAQ,CACrB,MAAMsgB,EAAYF,EAAW,GAAGvV,MAAM,KACtC,GACEyV,EAAUtgB,OAAS,GACF,aAAjBsgB,EAAU,KACQ,gBAAjBA,EAAU,IAAyC,YAAjBA,EAAU,IAC7C,CACA,GAAqB,gBAAjBA,EAAU,GAAsB,CAClC,MAAMC,EAAaxnB,KAAKynB,uBAAiCpV,EAAQgV,EAAY,CAC3EK,OAAQ,SACR,eAAgB,iBAChB,gBAAiB,OAGjB,kBAAmB,aAGrB,GAAI1nB,KAAK2Q,mBAAmB6W,EAAW9U,WAAqC,MAAxB8U,EAAW9U,SAE7D8U,EAAW9U,cAAWiV,MACjB,CACL,MAAOC,EAAa/U,GAAQ2U,EAAW9U,SAASZ,MAAM,KAEtD,GAAK9R,KAAK2Q,mBAAmBiX,GAQ3BJ,EAAW9U,cAAWiV,MARmB,CACzC,MAAM/U,EAAQ,IAAIsJ,KAAKA,KAAK9G,MAAMwS,EAAYvX,OAAS,aAAawX,WAAa,EAC7EC,MAAMlV,GACR4U,EAAW9U,cAAWiV,EAEtBH,EAAW9U,SAAWE,EAAMwN,U,CAK3BpgB,KAAK2Q,mBAAmBkC,KAC3B2U,EAAW1U,QAAUD,E,CAIzBR,EAAOpO,KAAO,SACdoO,EAAOI,KAAO+U,C,MACT,GAAqB,YAAjBD,EAAU,GAAkB,CACrC,MAAMC,EAAaxnB,KAAKynB,uBAAqCpV,EAAQgV,EAAY,CAC/EvB,MAAO,QACP,aAAc,YACd,YAAa,WACb,cAAe,aACfiC,QAAS,UACT,YAAa,WACb,YAAa,WACb,YAAa,WACb,cAAe,OACfC,MAAO,QACP,oBAAqB,aACrBC,QAAS,UACT,gBAAiB,QACjBvM,SAAU,aAEZrJ,EAAOpO,KAAO,aACdoO,EAAOyC,SAAW0S,C,CAEpBF,GAAgB,C,EAIfA,IACHjV,EAAOqC,WAAa,IAAI,IACxBrC,EAAOqC,WAAWzQ,KAAO,aACzBoO,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMqV,OAEhD,CAEQ2Q,uBAA0BpV,EAAoBgV,EAAsB3gB,GAC1E,MAAMwhB,EAAe,CAAC,EAEtB,IAAIC,GAAkB,EAuCtB,OAtCAd,EAAWza,SAASwb,IAClB,IAAItkB,EAAc,KACduR,EAAc,KAClB,IAAK8S,EAAiB,CACpB,GAAInoB,KAAK2Q,mBAAmByX,GAC1B,OAEF,MAAMzD,EAAayD,EAAUhX,QAAQ,KASrC,IARoB,IAAhBuT,EACF7gB,EAAMskB,GAENtkB,EAAMskB,EAAU/W,UAAU,EAAGsT,GACzByD,EAAUnhB,OAAS0d,IACrBtP,EAAM+S,EAAU/W,UAAUsT,EAAa,KAGvC3kB,KAAK2Q,mBAAmB7M,IAAQ9D,KAAK2Q,mBAAmB0E,IAAgB,aAARvR,EAClE,M,CAIAqkB,EACF9V,EAAOqB,OAAS,KAAO0U,EACN,UAARtkB,GACJ9D,KAAK2Q,mBAAmB0B,EAAOqB,OAGlCrB,EAAOqB,MAAQ2B,EAFfhD,EAAOqB,OAAS,KAAO2B,EAIzB8S,GAAkB,GAETzhB,EAAImU,eAAe/W,GAC5BokB,EAAQxhB,EAAI5C,IAAQuR,EAEpBrV,KAAK8T,WAAWzB,EAAQvO,EAAKuR,E,IAI1B6S,CACT,ECvRK,MAAMG,WAA6B,EACxCjT,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,GAAIA,EAAMwF,OAAS,EACjB,OAEF,MAAMoL,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAM,GAAI,MAC/C4Q,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAM,IACrD4Q,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAM,IACrD4Q,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAM,IAC5CzB,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECxBK,MAAM2f,WAA2B,EACtClT,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,MAAM4Q,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAM8mB,YAAa,MACxDlW,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAM8e,OAC5ClO,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAM+mB,UACrDnW,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAMma,UACrDvJ,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAMgnB,KAC5CzoB,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,EClBK,MAAM+f,WAA2B,EACtCtT,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,GAAIA,EAAMwF,OAAS,EACjB,OAGF,MAAMiN,EAC+C,eAAnDlU,KAAK4R,kBAAkBnQ,EAAM,GAAI,cAAiCA,EAAM,GAAK,KAC/EzB,KAAKiU,cAActL,EAAQuL,GAE3B,MAAM7B,EAASrS,KAAKwT,kBAGpB,GAFAnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAM,GAAI,MAE9B,eAAbA,EAAM,IAAoC,UAAbA,EAAM,GACrC4Q,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAM,IAC5C4Q,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAM,IACrD4Q,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAM,IACrD4Q,EAAOqB,MAAS1T,KAAK2Q,mBAAmBlP,EAAM,IAAyC,KAAnCA,EAAM,GAAGqQ,MAAM,OAAO1B,KAAK,WAC1E,GAAI3O,EAAMwF,OAAS,EAAG,CAC3BoL,EAAOpO,KAAO,eACdoO,EAAOqC,WAAa,IAAI,IACxBrC,EAAOqC,WAAWzQ,KAAO,aACzB,IAAK,IAAIoQ,EAAI,EAAGA,EAAI5S,EAAMwF,OAAQoN,IAC3BrU,KAAK2Q,mBAAmBlP,EAAM4S,MACjChC,EAAOqB,OAASjS,EAAM4S,GAAK,K,CAK5BrU,KAAK2Q,mBAAmBlP,EAAM,KAAO4Q,EAAOpO,OAAS,YACxDoO,EAAO7Q,KAAOC,EAAM,GAAK,KAAO4Q,EAAO7Q,MAGzCxB,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAGzBrS,KAAK0P,cACP1P,KAAK+S,yBAAyBpK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,EChDF,MAAMggB,GAAoB,CAAC,WAAY,kBACjCC,GAA4B,IAAIxM,IACpCuM,GAAkB1f,OAAO,CAAC,MAAO,WAAY,WAAY,iBAErD4f,GAA2B,IAAIzM,IACnCuM,GAAkB1f,OAAO,CAAC,aAAc,WAAY,YAAa,WAAY,SAGzE6f,GAAyB,IAAI1M,IACjCuM,GAAkB1f,OAAO,CACvB,QACA,YACA,aACA,WACA,QACA,mBACA,oBACA,OACA,UACA,aAIE8f,GAAuB,IAAI3M,IAAIuM,GAAkB1f,OAAO,CAAC,SAAU,WAAY,eAE/E+f,GAAsB,IAAI5M,IAAIuM,GAAkB1f,OAAO,CAAC,eAExDggB,GAAyB,IAAI7M,IAAIuM,GAAkB1f,OAAO,CAAC,aAE1D,MAAMigB,WAAwB,EACnC9T,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,MAAM4Q,EAASrS,KAAKwT,kBAIpB,GAHAnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAM0nB,SAAU,MACrD9W,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAM2nB,qBAE1BzB,IAAdlmB,EAAM8P,IAERc,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAM8P,KAC5Cc,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAM8S,UACrDlC,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAM+S,UACrDnC,EAAOuB,MAAMgE,KAAO5X,KAAK4R,kBAAkBnQ,EAAM4nB,aAEjDrpB,KAAKmd,qBAAqB9K,EAAQ5Q,EAAOmnB,SACpC,QAAwBjB,IAApBlmB,EAAM6nB,UAEfjX,EAAOuB,MAAMgE,KAAO5X,KAAK4R,kBAAkBnQ,EAAM6nB,WAEjDtpB,KAAKmd,qBAAqB9K,EAAQ5Q,EAAOunB,SACpC,QAAyBrB,IAArBlmB,EAAM0U,WAEf9D,EAAOI,KAAO,IAAI,IAClBJ,EAAOpO,KAAO,SACdoO,EAAOI,KAAKuD,eAAiBhW,KAAK4R,kBAAkBnQ,EAAM8nB,UAC1DlX,EAAOI,KAAKyD,OAASlW,KAAK4R,kBAAkBnQ,EAAM0U,YAClD9D,EAAOI,KAAK6D,MAAQtW,KAAK+R,aAAaM,EAAOI,KAAKyD,QAClD7D,EAAOI,KAAKC,SAAW1S,KAAK4R,kBAAkBnQ,EAAM+nB,WACpDnX,EAAOI,KAAKK,QAAU9S,KAAK4R,kBAAkBnQ,EAAMgoB,UACnDpX,EAAOI,KAAK2D,KAAOpW,KAAK4R,kBAAkBnQ,EAAM4U,KAEhDrW,KAAKmd,qBAAqB9K,EAAQ5Q,EAAOonB,SACpC,QAAwBlB,IAApBlmB,EAAMsT,UAEf1C,EAAOyC,SAAW,IAAI,IACtBzC,EAAOpO,KAAO,aACdoO,EAAOyC,SAASjR,MAAQ7D,KAAK4R,kBAAkBnQ,EAAMoC,OACrDwO,EAAOyC,SAASC,UAAY/U,KAAK4R,kBAAkBnQ,EAAMsT,WACzD1C,EAAOyC,SAASG,WAAajV,KAAK4R,kBAAkBnQ,EAAMwT,YAC1D5C,EAAOyC,SAASE,SAAWhV,KAAK4R,kBAAkBnQ,EAAMuT,UACxD3C,EAAOyC,SAASsJ,MAAQpe,KAAK4R,kBAAkBnQ,EAAMyU,QACrD7D,EAAOyC,SAASyF,MAAQva,KAAK4R,kBAAkBnQ,EAAM8Y,OACrDlI,EAAOyC,SAASwJ,SAAWte,KAAK4R,kBAAkBnQ,EAAMioB,kBACxDrX,EAAOyC,SAASoS,SAAWlnB,KAAK4R,kBAAkBnQ,EAAMkoB,mBACxDtX,EAAOyC,SAAS0J,KAAOxe,KAAK4R,kBAAkBnQ,EAAM+c,MACpDnM,EAAOyC,SAAS4J,QAAU1e,KAAK4R,kBAAkBnQ,EAAMid,SACvDrM,EAAOyC,SAAS2J,WAAaze,KAAK4R,kBAAkBnQ,EAAMmoB,SAE1D5pB,KAAKmd,qBAAqB9K,EAAQ5Q,EAAOqnB,SACpC,QAAqBnB,IAAjBlmB,EAAMooB,OAAsB,CAQrC,OALAxX,EAAOyC,SAAW,IAAI,IACtBzC,EAAOpO,KAAO,aACdjE,KAAK2U,gBAAgBtC,EAAQ5Q,EAAMqoB,QACnCzX,EAAOyC,SAAS4J,QAAU1e,KAAK4R,kBAAkBnQ,EAAMsoB,WAE/CtoB,EAAMooB,QAaZ,IAAK,WACHxX,EAAOyC,SAAS8I,eAAiBnc,EAAMuoB,SACvC,MACF,IAAK,kBACH3X,EAAOyC,SAASgJ,IAAMrc,EAAMuoB,SAC5B,MACF,QACE3X,EAAOyC,SAAS6I,cAAgBlc,EAAMuoB,SAI1ChqB,KAAKmd,qBAAqB9K,EAAQ5Q,EAAOsnB,G,KACpC,SAAsBpB,IAAlBlmB,EAAMsC,QASf,OAPAsO,EAAOqC,WAAa,IAAI,IACxBrC,EAAOpO,KAAO,eACdoO,EAAOqC,WAAWzQ,KAAO,aACzBoO,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMsC,SAE5C/D,KAAKmd,qBAAqB9K,EAAQ5Q,EAAOwnB,G,CAK3CjpB,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,CAEAwU,qBAAqB9K,EAAoB9B,EAAU8M,GAC1BpN,OAAO0M,KAAKpM,GAAKpH,QAAQqT,IAAOa,EAAajE,IAAIoD,KACzD5P,SAAS9I,IACtB,MAAM6a,EAAOpO,EACbvQ,KAAK8T,WAAWzB,EAAQvO,EAAK6a,EAAK7a,GAAK,GAE3C,EC5HK,MAAMmmB,WAA4B,EACvC7U,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAA+B/I,KAAK6P,SAAS/M,GAAM,GACzD,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASsd,IACf,MAAMC,EAAanqB,KAAKoqB,aAAaF,GACrC,QAAmBvC,IAAfwC,EACF,OAGGnqB,KAAK0P,cACR1P,KAAKiU,cAActL,EAAQuhB,EAAO7S,QAGpC,MAAMhF,EAAS,IAAI,IAInB,OAHAA,EAAO7Q,KAAOxB,KAAK4R,kBAAkBsY,EAAO1oB,KAAM,MAClD6Q,EAAOqB,MAAQ1T,KAAK4R,kBAAkBsY,EAAOtU,MAErCuU,GACN,KAAK,UACH9X,EAAOpO,KAAO,UACdoO,EAAOuB,MAAQ,IAAI,IACnBvB,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBsY,EAAO3V,UACtDlC,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBsY,EAAO1V,UACtDnC,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAaqZ,EAAO3Y,KAC7C,MACF,KAAK,SACHc,EAAOpO,KAAO,SACdoO,EAAOI,KAAKuD,eAAiBhW,KAAK4R,kBAAkBsY,EAAOG,gBAC3DhY,EAAOI,KAAKyD,OAASlW,KAAK4R,kBAAkBsY,EAAOI,YACnDjY,EAAOI,KAAK2D,KAAOpW,KAAK4R,kBAAkBsY,EAAOK,KACjDlY,EAAOI,KAAK6D,MAAQtW,KAAK+R,aAAaM,EAAOI,KAAKyD,QAClDlW,KAAKoS,kBAAkBC,EAAQ6X,EAAOM,YACtC,MAEF,KAAK,aACHnY,EAAOpO,KAAO,aAEdjE,KAAK2U,gBAAgBtC,EAAQrS,KAAK4R,kBAAkBsY,EAAOO,YAC3DpY,EAAOyC,SAASwJ,SAAWte,KAAK4R,kBAAkBsY,EAAO5L,UACzDjM,EAAOyC,SAASoS,SAAWlnB,KAAK4R,kBAAkBsY,EAAOhD,UACzD7U,EAAOyC,SAAS0J,KAAOxe,KAAK4R,kBAAkBsY,EAAO1L,MACrDnM,EAAOyC,SAAS+I,MAAQ7d,KAAK4R,kBAAkBsY,EAAOrM,OACtDxL,EAAOyC,SAAS2J,WAAaze,KAAK4R,kBAAkBsY,EAAOnK,SAC3D1N,EAAOyC,SAAS4J,QAAU1e,KAAK4R,kBAAkBsY,EAAOxL,SACzB,MAA3BrM,EAAOyC,SAAS4J,UAClBrM,EAAOyC,SAAS4J,QAAUrM,EAAOyC,SAAS4J,QAAQsB,eAEpD3N,EAAOyC,SAASyF,MAAQva,KAAK4R,kBAAkBsY,EAAO3P,OACtDlI,EAAOyC,SAASsJ,MAAQpe,KAAK4R,kBAAkBsY,EAAO7L,cACtD,MACF,KAAK,eACHhM,EAAOpO,KAAO,eACdoO,EAAOqC,WAAWzQ,KAAO,aAM7BjE,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAGzBrS,KAAK0P,cACP1P,KAAK+S,yBAAyBpK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,CAEQyhB,aAAaF,GACnB,OAAKlqB,KAAK2Q,mBAAmBuZ,EAAO3V,UAI/BvU,KAAK2Q,mBAAmBuZ,EAAOI,YAI/BtqB,KAAK2Q,mBAAmBuZ,EAAOO,WAI/BzqB,KAAK2Q,mBAAmBuZ,EAAOtU,WAApC,EACS,eAJA,aAJA,SAJA,SAgBX,E,ICnGU8U,GA0CAC,G,YCzDL,MAAMC,WAAgC,EAA7C,c,oBACE,KAAAjiB,OAAS,IAAI,CAsQf,CApQEyM,MAAMtS,GAuBJ,OAtBAA,EAAKgP,MAAM9R,KAAKkP,cAActC,SAASie,IACrC,GAAI7qB,KAAK2Q,mBAAmBka,IAAqB,MAAZA,EAAK,GACxC,OAEF,MAAMlM,EAAOjJ,KAAKN,MAAMyV,GACxB,IAAqB,IAAjBlM,EAAKmM,QACP,OAEF,MAAMzY,EAASrS,KAAKwT,kBAEhBxT,KAAK2Q,mBAAmBgO,EAAKoM,MAC/B/qB,KAAKgrB,oBAAoBrM,EAAMtM,GAE/BrS,KAAKirB,sBAAsBtM,EAAMtM,GAGnCrS,KAAKsU,sBAAsBjC,GAC3BrS,KAAK6T,cAAcxB,GACnBrS,KAAK2I,OAAOlC,QAAQI,KAAKwL,EAAO,IAGlCrS,KAAK2I,OAAOsG,SAAU,EACf/D,QAAQC,QAAQnL,KAAK2I,OAC9B,CAEQsiB,sBAAsBtM,EAAWtM,GACvC,GAAqB,MAAjBsM,EAAKuM,WACP7Y,EAAO7Q,KAAOxB,KAAK4R,kBAAkB+M,EAAKuM,SAASrnB,OACzB,MAAtB8a,EAAKuM,SAASC,MAAc,CAC9B,MAAMtJ,EAAiB,GACvBlD,EAAKuM,SAASC,KAAKve,SAAS2E,IACrBvR,KAAK2Q,mBAAmBY,EAAIJ,IAC/B0Q,EAAKhb,KAAK0K,EAAIJ,E,IAGlBkB,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAagR,E,CAItB,MAAhBlD,EAAKyM,UAC6B,MAAhCzM,EAAKyM,QAAQlS,iBACflZ,KAAKqrB,qBAAqB1M,EAAKyM,QAAQlS,gBAAiB7G,GAGvDrS,KAAK2Q,mBAAmBgO,EAAKyM,QAAQ7E,QACrCvmB,KAAK2Q,mBAAmBgO,EAAKyM,QAAQ/U,KAKrCrW,KAAK2Q,mBAAmBgO,EAAKyM,QAAQ1E,YACrC1mB,KAAK2Q,mBAAmBgO,EAAKyM,QAAQ9M,YAEtCjM,EAAOpO,KAAO,aACdoO,EAAOyC,SAAW,IAAI,MAPtBzC,EAAOpO,KAAO,SACdoO,EAAOI,KAAO,IAAI,KAQhBJ,EAAOpO,OAAS,WAAqBjE,KAAK2Q,mBAAmBgO,EAAKyM,QAAQ5W,YAC5EnC,EAAOuB,MAAMY,SAAWmK,EAAKyM,QAAQ5W,UAElCxU,KAAK2Q,mBAAmBgO,EAAKyM,QAAQE,cACxCjZ,EAAOqB,MAAQiL,EAAKyM,QAAQE,WAAWxZ,MAAM9R,KAAKkP,cAAckB,KAAK,MAAQ,MAEpD,MAAvBuO,EAAKyM,QAAQzX,QACf3T,KAAKurB,YAAY5M,EAAKyM,QAAQzX,OAAQtB,EAAQ,cAAe,QAAS,QAE3C,MAAzBsM,EAAKyM,QAAQI,UACf7M,EAAKyM,QAAQI,SAAS5e,SAAS6e,IACP,MAAlBA,EAAQ9X,QACV3T,KAAKurB,YAAYE,EAAQ9X,OAAQtB,EAAQ,IAAK,IAAK,I,IAK7D,CAEQ2Y,oBAAoBrM,EAAWtM,GAkBrC,GAjBAA,EAAOoB,YAAWkL,EAAK+M,eAAgB/M,EAAK+M,aAAaC,WACzDtZ,EAAO7Q,KAAOxB,KAAK4R,kBAAkB+M,EAAK9a,OAEpB,2BAAlB8a,EAAKiN,UACPvZ,EAAOpO,KAAO,eACdoO,EAAOqC,WAAa,IAAI,IACxBrC,EAAOqC,WAAWzQ,KAAO,cACE,gCAAlB0a,EAAKiN,UACdvZ,EAAOpO,KAAO,SACdoO,EAAOI,KAAO,IAAI,KACS,wBAAlBkM,EAAKiN,UACdvZ,EAAOpO,KAAO,aACdoO,EAAOyC,SAAW,IAAI,KAEtBzC,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAa8N,EAAKkN,UAGlB,MAAvBlN,EAAKmN,eAAwB,CAO/B,GAN2C,MAAvCnN,EAAKmN,eAAe5S,iBACtBlZ,KAAKqrB,qBAAqB1M,EAAKmN,eAAe5S,gBAAiB7G,GAE5DrS,KAAK2Q,mBAAmBgO,EAAKmN,eAAeR,cAC/CjZ,EAAOqB,MAAQiL,EAAKmN,eAAeR,WAAWxZ,MAAM9R,KAAKkP,cAAckB,KAAK,MAAQ,MAElFiC,EAAOpO,OAAS,YACbjE,KAAK2Q,mBAAmBgO,EAAKmN,eAAetX,YAC/CnC,EAAOuB,MAAMY,SAAWmK,EAAKmN,eAAetX,UAEd,MAA5BmK,EAAKmN,eAAeX,MAAc,CACpC,MAAMtJ,EAAiB,GACvBlD,EAAKmN,eAAeX,KAAKve,SAASuE,IAC3BnR,KAAK2Q,mBAAmBQ,EAAEI,MAC7BsQ,EAAKhb,KAAKsK,EAAEI,I,IAGZsQ,EAAK5a,OAAS,IAChBoL,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAagR,G,CAIV,MAA9BlD,EAAKmN,eAAenY,QACtB3T,KAAKurB,YAAY5M,EAAKmN,eAAenY,OAAQtB,EAAQ,cAAe,QAAS,QAE3C,MAAhCsM,EAAKmN,eAAeN,UACtB7M,EAAKmN,eAAeN,SAAS5e,SAAS6e,IACd,MAAlBA,EAAQ9X,QACV3T,KAAKurB,YAAYE,EAAQ9X,OAAQtB,EAAQ,IAAK,IAAK,I,IAK7D,CAEQgZ,qBAAqBnT,EAAc7F,GACzC,MAAM0Z,EAAU7T,EAAMjR,OAAS,EAAI,EAAIiR,EAAMjR,OAC7CoL,EAAO6G,gBAAkBhB,EACtB/O,QAAQ6iB,IAAYhsB,KAAK2Q,mBAAmBqb,EAAEvqB,QAAoB,MAAVuqB,EAAEC,OAC1D1iB,MAAK,CAACC,EAAGC,IAAMA,EAAEwiB,KAAOziB,EAAEyiB,OAC1B/W,MAAM,EAAG6W,GACTrlB,KAAKslB,IACJ,MAAME,EAAK,IAAI,KAGf,OAFAA,EAAG1X,SAAWwX,EAAEvqB,MAChByqB,EAAGC,aAAe,IAAIjQ,MAAM,GAAK8P,EAAEC,MAAMhlB,QAAU,GAAK+kB,EAAEC,KAAgB,IAATD,EAAEC,MAC5DC,CAAE,GAEf,CAEQX,YACN5X,EACAtB,EACA+Z,EACAC,EACA/H,GAEA3Q,EAAO/G,SAASoH,IACd,GAAuB,MAAnBA,EAAMqY,IAA2D,KAAtCrY,EAAMqY,GAAUjM,WAAW/P,OACxD,OAIF,MAAM2Q,EACQ,SAAZhN,EAAMsY,EACF,IAAIpQ,KAAuB,IAAlBlI,EAAMqY,IAAkBE,cACjCvY,EAAMqY,GAAUjM,WAChBoM,EACqB,MAAzBxY,EAAMoY,GAA0BpY,EAAMoY,GAAgBhM,WAAa,KAErE,GAAI/N,EAAOpO,OAAS,UAAkB,CACpC,GAAIjE,KAAK2Q,mBAAmB0B,EAAOuB,MAAMW,WAAkC,aAArBiY,EAEpD,YADAna,EAAOuB,MAAMW,SAAWyM,GAEnB,GACLhhB,KAAK2Q,mBAAmB0B,EAAOuB,MAAMY,WAChB,aAArBgY,EAGA,YADAna,EAAOuB,MAAMY,SAAWwM,GAEnB,GACLhhB,KAAK2Q,mBAAmB0B,EAAOuB,MAAMgE,OACjB,MAApB4U,GACAA,EAAiB/a,WAAW,SAG5B,YADAY,EAAOuB,MAAMgE,KAAOoJ,E,MAGjB,GAAI3O,EAAOpO,OAAS,SAAiB,CAC1C,GAAIjE,KAAK2Q,mBAAmB0B,EAAOI,KAAKyD,SAAgC,UAArBsW,EAGjD,OAFAna,EAAOI,KAAKyD,OAAS8K,OACrB3O,EAAOI,KAAK6D,MAAQtW,KAAK+R,aAAaiP,IAEjC,GAAIhhB,KAAK2Q,mBAAmB0B,EAAOI,KAAK2D,OAA8B,QAArBoW,EAEtD,YADAna,EAAOI,KAAK2D,KAAO4K,GAEd,GACLhhB,KAAK2Q,mBAAmB0B,EAAOI,KAAKuD,iBACf,eAArBwW,EAGA,YADAna,EAAOI,KAAKuD,eAAiBgL,GAExB,GACLhhB,KAAK2Q,mBAAmB0B,EAAOI,KAAKH,aACf,WAArBka,GACsB,IAAtBxL,EAAW/Z,OAOX,OALAoL,EAAOI,KAAKC,SAAYsO,EAAsBrJ,OAAO,EAAG,GACxB,MAA5BtF,EAAOI,KAAKC,SAAS,KACvBL,EAAOI,KAAKC,SAAWL,EAAOI,KAAKC,SAASiF,OAAO,EAAG,SAExDtF,EAAOI,KAAKK,QAAWkO,EAAsBrJ,OAAO,EAAG,IAElD,GAAyB,SAArB6U,EAET,M,MAEG,GAAIna,EAAOpO,OAAS,aAAqB,CAC9C,MAAM6Q,EAAWzC,EAAOyC,SACxB,GAAI9U,KAAK2Q,mBAAmBmE,EAASC,YAAmC,cAArByX,EAEjD,YADA1X,EAASC,UAAYiM,GAEhB,GAAIhhB,KAAK2Q,mBAAmBmE,EAASE,WAAkC,aAArBwX,EAEvD,YADA1X,EAASE,SAAWgM,GAEf,GAAIhhB,KAAK2Q,mBAAmBmE,EAASG,aAAoC,YAArBuX,EAEzD,YADA1X,EAASG,WAAa+L,GAEjB,GAAIhhB,KAAK2Q,mBAAmBmE,EAASsJ,QAA+B,aAArBoO,EAEpD,YADA1X,EAASsJ,MAAQ4C,GAEZ,GAAIhhB,KAAK2Q,mBAAmBmE,EAASmS,UAAiC,YAArBuF,EAEtD,YADA1X,EAASmS,QAAUjG,GAEd,GAAIhhB,KAAK2Q,mBAAmBmE,EAASyF,QAA+B,UAArBiS,EAEpD,YADA1X,EAASyF,MAAQyG,GAEZ,GAAIhhB,KAAK2Q,mBAAmBmE,EAASP,WAAkC,aAArBiY,EAEvD,YADA1X,EAASP,SAAWyM,GAEf,GAAyB,YAArBwL,EAAgC,CAEzC,MAAM,OAAEC,EAAM,KAAEjO,EAAI,QAAEE,EAAO,IAAEzS,GAAQ+H,EAAMqY,GAO7C,OANAvX,EAASwJ,SAAWte,KAAK4R,kBAAkB6a,GAC3C3X,EAAS0J,KAAOxe,KAAK4R,kBAAkB4M,GAClCxe,KAAK2Q,mBAAmB+N,KAC3B5J,EAAS4J,QAAUA,EAAQsB,oBAE7BlL,EAAS2J,WAAaze,KAAK4R,kBAAkB3F,G,EAKjD,MAAMgV,EAAYjhB,KAAK2Q,mBAAmBqD,EAAMsQ,IAAY,UAAYtQ,EAAMsQ,GAC9E,GACgB,aAAdrD,GAC0B,MAA1B5O,EAAO6G,iBACP7G,EAAO6G,gBAAgB0I,MAAMoK,GAAMA,EAAExX,WAAawM,IAElD,OAGF,MAAM0L,EAAwB,cAAZ1Y,EAAMsY,EAAoB,YAAmB,UAC/DtsB,KAAK8T,WAAWzB,EAAQ4O,EAAWD,EAAY0L,EAAU,GAE7D,GDvPF,SAAYhC,GACV,cACA,mBACA,mBACA,iBACA,iBACA,iBACA,wBACA,oBACA,iBACA,uBACA,uBACA,mBACA,iBACA,uBACA,6BACA,uBACA,eACA,qBACA,uBACA,qBACD,CArBD,CAAYA,KAAAA,GAAY,KA0CxB,SAAYC,GACV,iBACA,mBACA,UACA,aACA,eACA,eACA,kBACA,cACD,CATD,CAAYA,KAAAA,GAAkB,KExCvB,MAAMgC,WAAgC,EAA7C,c,oBACE,KAAAhkB,OAAS,IAAI,CA8lBf,CA5lBEyM,MAAMtS,GAgFJ,OA/E+B4S,KAAKN,MAAMtS,GAEf8pB,SAAS,GAG5BC,OAAOjgB,SAASkgB,IACtBA,EAAM5U,MAAMtL,SAAS+R,IACnB,IAAqB,IAAjBA,EAAKmM,QACP,OAGF,MAAMzY,EAASrS,KAAKwT,kBAEdoJ,EAAW+B,EAAKoO,aACtB,OAAQnQ,GACN,KAAK8N,GAAahI,MAClB,KAAKgI,GAAasC,SAClB,KAAKtC,GAAa9O,SAClB,KAAK8O,GAAauC,eAClB,KAAKvC,GAAawC,OAClB,KAAKxC,GAAayC,eAChB9a,EAAOpO,KAAO,UACdoO,EAAOuB,MAAQ,IAAI,IACnB,MACF,KAAK8W,GAAa9H,WAClB,KAAK8H,GAAa0C,YAChB/a,EAAOpO,KAAO,SACdoO,EAAOI,KAAO,IAAI,IAClB,MACF,KAAKiY,GAAa2C,WAClB,KAAK3C,GAAa4C,gBAClB,KAAK5C,GAAa6C,aAClB,KAAK7C,GAAa8C,cAEhBnb,EAAOpO,KAAO,eACdoO,EAAOqC,WAAa,IAAI,IACxBrC,EAAOqC,WAAWzQ,KAAO,aACzB,MACF,KAAKymB,GAAa+C,SAClB,KAAK/C,GAAagD,eAClB,KAAKhD,GAAaiD,eAClB,KAAKjD,GAAakD,WAClB,KAAKlD,GAAamD,SAClB,KAAKnD,GAAaoD,eAClB,KAAKpD,GAAaqD,qBAChB1b,EAAOpO,KAAO,aACdoO,EAAOyC,SAAW,IAAI,IAM1BzC,EAAOoB,SAA6B,IAAlBkL,EAAKqP,SAEvBhuB,KAAKiuB,gBAAgBtP,EAAKuM,SAAU7Y,GAEpCrS,KAAKkuB,mBAAmBvP,EAAMtM,GAE9BrS,KAAKmuB,eAAevR,EAAU+B,EAAKyM,QAAS/Y,GAE5CrS,KAAKqrB,qBAAqB1M,EAAKyM,QAAQlS,gBAAiB7G,GAExDrS,KAAKouB,gBAAgBxR,EAAU+B,EAAKyM,QAAQI,SAAUnZ,GAEjDrS,KAAK2Q,mBAAmBgO,EAAKyM,QAAQE,cACxCjZ,EAAOqB,MAAQiL,EAAKyM,QAAQE,WAAWxZ,MAAM9R,KAAKkP,cAAckB,KAAK,MAAQ,MAG/EpQ,KAAKsU,sBAAsBjC,GAC3BrS,KAAK6T,cAAcxB,GACnBrS,KAAK2I,OAAOlC,QAAQI,KAAKwL,EAAO,GAChC,IAGArS,KAAK0P,cACP1P,KAAK+S,yBAAyB/S,KAAK2I,QAGrC3I,KAAK2I,OAAOsG,SAAU,EACf/D,QAAQC,QAAQnL,KAAK2I,OAC9B,CAEQslB,gBAAgB/C,EAAoB7Y,GAC1C,GAAgB,MAAZ6Y,EAAJ,CAMA,GAFA7Y,EAAO7Q,KAAOxB,KAAK4R,kBAAkBsZ,EAASrnB,OAEzB,MAAjBqnB,EAASrJ,KAAc,CACzB,MAAMA,EAAiB,GACvBqJ,EAASrJ,KAAKjV,SAAS2E,IAChBvR,KAAK2Q,mBAAmBY,EAAIA,MAC/BsQ,EAAKhb,KAAK0K,EAAIA,I,IAGlBc,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAagR,E,CAGxC,GAAqB,MAAjBqJ,EAASmD,MAAgBnD,EAASmD,KAAKpnB,OAAS,EAAG,CACrD,MAAMiN,EAAalU,KAAKsuB,WAAWpD,EAASmD,KAAK,IACjDruB,KAAKiU,cAAcjU,KAAK2I,OAAQuL,E,EAEpC,CAEQoa,WAAWC,GACjB,OAAOA,EAAYle,OAAOqB,QAAQ,UAAW2S,GAAMA,EAAE3S,QAAQ,OAAQ/K,GAAMA,EAAEqZ,iBAC/E,CAEQkO,mBAAmBvP,EAAYtM,GACjB,MAAhBsM,EAAKyM,SAIuB,MAA5BzM,EAAKyM,QAAQoD,aAA2D,IAApC7P,EAAKyM,QAAQoD,YAAYvnB,QAIjE0X,EAAKyM,QAAQoD,YAAY5hB,SAAS6hB,IAChC,GAA+B,aAA3BA,EAAWC,aAAmD,KAArBD,EAAWhtB,MAGtD,OAFA4Q,EAAOpO,KAAO,eACdoO,EAAOuB,MAAMW,SAAWka,EAAWhtB,OAIrC,GAA+B,aAA3BgtB,EAAWC,aAAmD,KAArBD,EAAWhtB,MAGtD,OAFA4Q,EAAOpO,KAAO,eACdoO,EAAOuB,MAAMY,SAAWia,EAAWhtB,OAIrC,IAAIuf,EAAayN,EAAWhtB,MACxBirB,EAAuB,UAC3B,OAAQ+B,EAAW/B,WACjB,KAAK/B,GAAmB/O,SACtB8Q,EAAY,YACZ,MACF,KAAK/B,GAAmBgE,SACtB3N,EAAkC,KAArByN,EAAWhtB,MAAe,OAAS,QAChDirB,EAAY,aAKhB1sB,KAAK8T,WAAWzB,EAAQoc,EAAWjtB,KAAMwf,EAAY0L,EAAU,GAEnE,CAEQyB,eAAevR,EAAwBwO,EAAkB/Y,GAC3DuK,IAAa8N,GAAa9O,UAIf,MAAXwP,IAGJ/Y,EAAOuB,MAAMY,SAAW4W,EAAQ5W,SAClC,CAEQ4Z,gBAAgBxR,EAAwB4O,EAA4BnZ,GAC1D,MAAZmZ,GAAwC,IAApBA,EAASvkB,QAIjCukB,EAAS5e,SAAS6e,IACM,MAAlBA,EAAQ9X,QAIZ3T,KAAK4uB,mBAAmBhS,EAAU6O,EAAQ9X,OAAQtB,EAAO,GAE7D,CAEQuc,mBAAmBhS,EAAwBjJ,EAAwBtB,GACzEsB,EAAO/G,SAASoH,IACd,MAAMqY,EAAWpc,OAAO0M,KAAK3I,EAAMvS,OAAO,GACpCotB,EAAW7a,EAEjB,GACoB,MAAlB6a,EAASptB,OACmB,MAA5BotB,EAASptB,MAAM4qB,IACc,KAA7BwC,EAASptB,MAAM4qB,GAEf,OAGF,MAAMpL,EAAYjhB,KAAK8uB,aAAa9a,EAAM3K,GAAI2K,EAAMnQ,OAC9Cmd,EAAahhB,KAAK+uB,aAAa/a,EAAMvS,MAAO4qB,GAElD,GAAIha,EAAOpO,OAAS,UAAkB,CACpC,GAAIjE,KAAKgvB,UAAUhb,EAAOgN,EAAY3O,GACpC,OAGF,OAAQuK,GACN,KAAK8N,GAAahI,MAClB,KAAKgI,GAAasC,SAClB,KAAKtC,GAAa6C,aAClB,KAAK7C,GAAauC,eAChB,MAEF,KAAKvC,GAAawC,OAChB,GAAIltB,KAAK2Q,mBAAmB0B,EAAOuB,MAAM9C,MAAqB,QAAbkD,EAAM3K,GAErD,YADAgJ,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAamQ,IAGxC,MAEF,KAAK0J,GAAayC,eAChB,GAAIntB,KAAKivB,mBAAmBjb,EAAOgN,EAAY3O,GAC7C,O,MAMD,GAAIA,EAAOpO,OAAS,SAAiB,CAC1C,GAAIjE,KAAKkvB,eAAelb,EAAOgN,EAAY3O,GACzC,OAGF,GAAIuK,IAAa8N,GAAa0C,aACxBptB,KAAKmvB,gBAAgBnb,EAAOgN,EAAY3O,GAC1C,M,MAGC,GAAIA,EAAOpO,OAAS,aAAqB,CAC9C,GAAIjE,KAAKovB,aAAapb,EAAOgN,EAAY3O,EAAQga,GAC/C,OAEF,GAAiB,YAAbA,EAAwB,CAE1B,MAAM,OAAEI,EAAM,KAAEjO,EAAI,QAAEE,EAAO,IAAEzS,EAAG,MAAE4R,GAAU7J,EAAMvS,MAAM8c,QAQ1D,OAPAlM,EAAOyC,SAASwJ,SAAWte,KAAK4R,kBAAkB6a,GAClDpa,EAAOyC,SAAS0J,KAAOxe,KAAK4R,kBAAkB4M,GACzCxe,KAAK2Q,mBAAmB+N,KAC3BrM,EAAOyC,SAAS4J,QAAUA,EAAQsB,eAEpC3N,EAAOyC,SAAS2J,WAAaze,KAAK4R,kBAAkB3F,QACpDoG,EAAOyC,SAAS+I,MAAQ7d,KAAK4R,kBAAkBiM,G,CAIjD,OAAQjB,GACN,KAAK8N,GAAa+C,SAChB,MACF,KAAK/C,GAAagD,eAChB,GAAI1tB,KAAKqvB,mBAAmBrb,EAAOgN,EAAY3O,GAC7C,OAEF,MACF,KAAKqY,GAAaiD,eAChB,GAAI3tB,KAAKsvB,mBAAmBtb,EAAOgN,EAAY3O,GAC7C,OAEF,MACF,KAAKqY,GAAakD,WAChB,GAAI5tB,KAAKuvB,eAAevb,EAAOgN,EAAY3O,GACzC,OAEF,MACF,KAAKqY,GAAamD,SAChB,GAAI7tB,KAAKwvB,aAAaxb,EAAOgN,EAAY3O,GACvC,OAEF,MACF,KAAKqY,GAAaoD,eAChB,GAAI9tB,KAAKyvB,mBAAmBzb,EAAOgN,EAAY3O,GAC7C,OAEF,MACF,KAAKqY,GAAaqD,qBAChB,GAAI/tB,KAAK0vB,QAAQ1b,EAAOgN,EAAY3O,GAClC,O,CAQR,GAAiB,UAAbga,EAAsB,CAExB,MAAM,cAAEsD,EAAa,SAAEC,GAAa5b,EAAMvS,MAAM8Y,MAGhD,OAFAva,KAAK8T,WAAWzB,EAAQ4O,EAAW0O,EAAe,gBAClD3vB,KAAK8T,WAAWzB,EAAQ,WAAYud,EAAU,U,CAKhD,GACkB,aAAhB5b,EAAMnQ,OACoB,MAA1BwO,EAAO6G,iBACP7G,EAAO6G,gBAAgB0I,MAAMoK,GAAMA,EAAExX,WAAawM,IAElD,OAIEhN,EAAM6b,SAAWxd,EAAOiF,WAAa,WACvCjF,EAAOiF,SAAW,cAGpB,MAAMoV,EAAyB,cAAbL,EAA2B,YAAmB,UAChErsB,KAAK8T,WAAWzB,EAAQ4O,EAAWD,EAAY0L,EAAU,GAE7D,CAEQoC,aAAazlB,EAAYxF,GAC/B,OAAI7D,KAAK2Q,mBAAmB9M,GACnBwF,EAILA,EAAGpC,OAAS,IAAMiL,OAAO,mBAAoB,KAAKC,KAAK9I,GAClDxF,EAEFwF,CACT,CAEQ0lB,aAAattB,EAAc4qB,GACjC,MAAiB,SAAbA,EACK,IAAInQ,KAAkB,IAAbza,EAAMquB,MAAavD,cAGpB,cAAbF,EACK5qB,EAAMsuB,UAAU3P,WAGjB3e,EAAc4qB,EACxB,CAEQ2C,UAAUhb,EAAqBgN,EAAoB3O,GACzD,MAAM4O,EAAYjhB,KAAK8uB,aAAa9a,EAAM3K,GAAI2K,EAAMnQ,OAEpD,OAAI7D,KAAK2Q,mBAAmB0B,EAAOuB,MAAMW,WAA2B,aAAd0M,GACpD5O,EAAOuB,MAAMW,SAAWyM,GACjB,GAGLhhB,KAAK2Q,mBAAmB0B,EAAOuB,MAAMY,WAA2B,aAAdyM,GACpD5O,EAAOuB,MAAMY,SAAWwM,GACjB,MAIPhhB,KAAK2Q,mBAAmB0B,EAAOuB,MAAMgE,OACzB,MAAZ5D,EAAM3K,KACN2K,EAAM3K,GAAGoI,WAAW,YAEpBY,EAAOuB,MAAMgE,KAAOoJ,GACb,EAIX,CAEQiO,mBAAmBjb,EAAqBgN,EAAoB3O,GAClE,MAAM4O,EAAYjhB,KAAK8uB,aAAa9a,EAAM3K,GAAI2K,EAAMnQ,OAEpD,OAAI7D,KAAK2Q,mBAAmB0B,EAAOuB,MAAMY,WAA2B,eAAdyM,GACpD5O,EAAOuB,MAAMY,SAAWwM,GACjB,MAGLhhB,KAAK2Q,mBAAmB0B,EAAOuB,MAAM9C,MAAsB,aAAdmQ,KAC/C5O,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAamQ,IAC/B,EAIX,CAEQkO,eAAelb,EAAqBgN,EAAoB3O,GAC9D,GAAIrS,KAAK2Q,mBAAmB0B,EAAOI,KAAKyD,SAAwB,UAAblC,EAAM3K,GAGvD,OAFAgJ,EAAOI,KAAKyD,OAAS8K,EACrB3O,EAAOI,KAAK6D,MAAQtW,KAAK+R,aAAaiP,IAC/B,EAGT,GAAIhhB,KAAK2Q,mBAAmB0B,EAAOI,KAAK2D,OAAsB,QAAbpC,EAAM3K,GAErD,OADAgJ,EAAOI,KAAK2D,KAAO4K,GACZ,EAGT,GAAIhhB,KAAK2Q,mBAAmB0B,EAAOI,KAAKuD,iBAAgC,eAAbhC,EAAM3K,GAE/D,OADAgJ,EAAOI,KAAKuD,eAAiBgL,GACtB,EAGT,GAAIhhB,KAAK2Q,mBAAmB0B,EAAOI,KAAKH,aAA4B,WAAb0B,EAAM3K,GAAiB,CAC5E,MAAM0mB,EAAoB/O,EAAWZ,WAAW/P,OAMhD,OALAgC,EAAOI,KAAKC,SAAWqd,EAAU1e,UAAU,EAAG,GACd,MAA5BgB,EAAOI,KAAKC,SAAS,KACvBL,EAAOI,KAAKC,SAAWL,EAAOI,KAAKC,SAASrB,UAAU,EAAG,IAE3DgB,EAAOI,KAAKK,QAAUid,EAAU1e,UAAU,EAAG,IACtC,C,CAGT,MAAiB,SAAb2C,EAAM3K,EAMZ,CAEQ8lB,gBAAgBnb,EAAqBgN,EAAoB3O,GAC/D,SAAIrS,KAAK2Q,mBAAmB0B,EAAOI,KAAKuD,iBAAgC,UAAbhC,EAAM3K,MAC/DgJ,EAAOI,KAAKuD,eAAiBgL,GACtB,EAIX,CAEQoO,aACNpb,EACAgN,EACA3O,EACAga,GAEA,GAAIrsB,KAAK2Q,mBAAmB0B,EAAOyC,SAASC,YAA2B,cAAbf,EAAM3K,GAE9D,OADAgJ,EAAOyC,SAASC,UAAYiM,GACrB,EAGT,GAAIhhB,KAAK2Q,mBAAmB0B,EAAOyC,SAASE,WAA0B,aAAbhB,EAAM3K,GAE7D,OADAgJ,EAAOyC,SAASE,SAAWgM,GACpB,EAGT,GAAIhhB,KAAK2Q,mBAAmB0B,EAAOyC,SAASG,aAA4B,YAAbjB,EAAM3K,GAE/D,OADAgJ,EAAOyC,SAASG,WAAa+L,GACtB,EAGT,GAAIhhB,KAAK2Q,mBAAmB0B,EAAOyC,SAASsJ,QAAuB,aAAbpK,EAAM3K,GAE1D,OADAgJ,EAAOyC,SAASsJ,MAAQ4C,GACjB,EAGT,GAAIhhB,KAAK2Q,mBAAmB0B,EAAOyC,SAASmS,UAAyB,YAAbjT,EAAM3K,GAE5D,OADAgJ,EAAOyC,SAASmS,QAAUjG,GACnB,EAGT,GAAIhhB,KAAK2Q,mBAAmB0B,EAAOyC,SAASyF,OAAQ,CAClD,GAAiB,UAAb8R,EAAsB,CACxB,MAAM,cAAEsD,EAAa,SAAEC,GAAa5b,EAAMvS,MAAM8Y,MAGhD,OAFAlI,EAAOyC,SAASyF,MAAQva,KAAK4R,kBAAkB+d,GAC/C3vB,KAAK8T,WAAWzB,EAAQ,WAAYud,EAAU,YACvC,C,CAGT,GAAiB,UAAb5b,EAAM3K,GAER,OADAgJ,EAAOyC,SAASyF,MAAQyG,GACjB,C,CAIX,SAAIhhB,KAAK2Q,mBAAmB0B,EAAOyC,SAASP,WAA0B,aAAbP,EAAM3K,MAC7DgJ,EAAOyC,SAASP,SAAWyM,GACpB,EAGX,CAEQqO,mBAAmBrb,EAAqBgN,EAAoB3O,GAClE,OAAIrS,KAAK2Q,mBAAmB0B,EAAOyC,SAASC,YAA2B,aAAbf,EAAM3K,IAC9DrJ,KAAK2U,gBAAgBtC,EAAQ2O,IACtB,GAGLhhB,KAAK2Q,mBAAmB0B,EAAOyC,SAASwJ,WAA0B,YAAbtK,EAAM3K,IAC7DgJ,EAAOyC,SAASwJ,SAAW0C,GACpB,GAILhhB,KAAK2Q,mBAAmB0B,EAAOyC,SAAS4J,UAAyB,YAAb1K,EAAM3K,IAC5DgJ,EAAOyC,SAAS4J,QAAUsC,GACnB,GAGLhhB,KAAK2Q,mBAAmB0B,EAAOyC,SAAS+I,QAAuB,UAAb7J,EAAM3K,IAC1DgJ,EAAOyC,SAAS+I,MAAQmD,GACjB,MAGLhhB,KAAK2Q,mBAAmB0B,EAAOyC,SAAS6I,gBAA+B,WAAb3J,EAAM3K,MAClEgJ,EAAOyC,SAAS6I,cAAgBqD,GACzB,EAIX,CAEQsO,mBAAmBtb,EAAqBgN,EAAoB3O,GAClE,OAAIrS,KAAK2Q,mBAAmB0B,EAAOyC,SAASC,YAA2B,SAAbf,EAAM3K,IAC9DrJ,KAAK2U,gBAAgBtC,EAAQ2O,IACtB,GAILhhB,KAAK2Q,mBAAmB0B,EAAOyC,SAAS4J,UAAyB,YAAb1K,EAAM3K,IAC5DgJ,EAAOyC,SAAS4J,QAAUsC,GACnB,MAGLhhB,KAAK2Q,mBAAmB0B,EAAOyC,SAAS+I,QAAuB,UAAb7J,EAAM3K,MAC1DgJ,EAAOyC,SAAS+I,MAAQmD,GACjB,EAIX,CAEQuO,eAAevb,EAAqBgN,EAAoB3O,GAC9D,OAAIrS,KAAK2Q,mBAAmB0B,EAAOyC,SAASC,YAA2B,gBAAbf,EAAM3K,IAC9DrJ,KAAK2U,gBAAgBtC,EAAQ2O,IACtB,GAGLhhB,KAAK2Q,mBAAmB0B,EAAOyC,SAASmS,UAAyB,aAAbjT,EAAM3K,IAC5DgJ,EAAOyC,SAASmS,QAAUjG,GACnB,MAGLhhB,KAAK2Q,mBAAmB0B,EAAOyC,SAASsJ,QAAuB,UAAbpK,EAAM3K,MAC1DgJ,EAAOyC,SAASsJ,MAAQ4C,GACjB,EAIX,CAEQwO,aAAaxb,EAAqBgN,EAAoB3O,GAC5D,OAAIrS,KAAK2Q,mBAAmB0B,EAAOyC,SAASC,YAA2B,aAAbf,EAAM3K,IAC9DrJ,KAAK2U,gBAAgBtC,EAAQ2O,IACtB,GAILhhB,KAAK2Q,mBAAmB0B,EAAOyC,SAAS4J,UAAyB,oBAAb1K,EAAM3K,IAC5DgJ,EAAOyC,SAAS4J,QAAUsC,GACnB,MAGLhhB,KAAK2Q,mBAAmB0B,EAAOyC,SAAS8I,iBAAgC,WAAb5J,EAAM3K,MACnEgJ,EAAOyC,SAAS8I,eAAiBoD,GAC1B,EAIX,CAEQyO,mBAAmBzb,EAAqBgN,EAAoB3O,GAClE,OAAIrS,KAAK2Q,mBAAmB0B,EAAOyC,SAASC,YAA2B,gBAAbf,EAAM3K,IAC9DrJ,KAAK2U,gBAAgBtC,EAAQ2O,IACtB,MAGLhhB,KAAK2Q,mBAAmB0B,EAAOyC,SAASmS,UAAyB,iBAAbjT,EAAM3K,MAC5DgJ,EAAOyC,SAASmS,QAAUjG,GACnB,EAIX,CAEQ0O,QAAQ1b,EAAqBgN,EAAoB3O,GACvD,OAAIrS,KAAK2Q,mBAAmB0B,EAAOyC,SAASC,YAA2B,SAAbf,EAAM3K,IAC9DrJ,KAAK2U,gBAAgBtC,EAAQ2O,IACtB,MAGLhhB,KAAK2Q,mBAAmB0B,EAAOyC,SAASgJ,MAAqB,WAAb9J,EAAM3K,MACxDgJ,EAAOyC,SAASgJ,IAAMkD,GACf,EAIX,CAEQqK,qBAAqB2E,EAAuC3d,GAClE,GAAoB,MAAhB2d,GAAgD,IAAxBA,EAAa/oB,OACvC,OAGF,MAAM8kB,EAAUiE,EAAa/oB,OAAS,EAAI,EAAI+oB,EAAa/oB,OAC3DoL,EAAO6G,gBAAkB8W,EACtB7mB,QAAQ6iB,IAAYhsB,KAAK2Q,mBAAmBqb,EAAEvqB,QAAoB,MAAVuqB,EAAEC,OAC1D1iB,MAAK,CAACC,EAAGC,IAAMA,EAAEwiB,KAAOziB,EAAEyiB,OAC1B/W,MAAM,EAAG6W,GACTrlB,KAAKslB,IACJ,MAAME,EAAK,IAAI,KAGf,OAFAA,EAAG1X,SAAWwX,EAAEvqB,MAChByqB,EAAGC,aAAe,IAAIjQ,MAAM,GAAK8P,EAAEC,MAAMhlB,QAAU,GAAK+kB,EAAEC,KAAgB,IAATD,EAAEC,MAC5DC,CAAE,GAEf,ECznBK,MAAM+D,GAEX/vB,YAAmBgwB,EAA0BhV,EAAyB7I,GAAnD,KAAA6d,aAAAA,EAA0B,KAAAhV,SAAAA,EAAyB,KAAA7I,OAAAA,EACpErS,KAAKmwB,cAAgBjV,EAAS7N,aAChC,ECIK,MAAM+iB,GAAoB,CAC/B,QACA,aACA,aACA,KACA,QACA,OACA,QACA,OACA,SAGK,MAAeC,WAA+B,EAArD,c,oBACY,KAAAC,qBAAuB,CAC/BtwB,KAAKuwB,iBACLvwB,KAAKwwB,iBACLxwB,KAAKywB,cAEG,KAAAC,0BAA4B,CACpC1wB,KAAK2wB,oBACL3wB,KAAK4wB,0BACL5wB,KAAK6wB,4BACL7wB,KAAK8wB,qBAEG,KAAAC,wBAA0B,CAClC/wB,KAAKgxB,qBACLhxB,KAAKixB,mBACLjxB,KAAKkxB,oBACLlxB,KAAKmxB,oBACLnxB,KAAKoxB,iBACLpxB,KAAKqxB,iBACLrxB,KAAKsxB,mBAsVT,CAjVElc,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,EAAM,CACxCyuB,UAAW,IACXC,WAAY,OAEd,OAAe,MAAXzoB,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,GAAIzB,KAAK2Q,mBAAmB3Q,KAAKyxB,QAAQhwB,EAAO,UAC9C,OAGF,MAAM4Q,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkB5R,KAAKyxB,QAAQhwB,EAAO,SAAU,MAEnEzB,KAAK0xB,SAASjwB,EAAO4Q,GAErBrS,KAAK2xB,cAAclwB,EAAO4Q,GAE1B,IAAIuf,EAAsB,KAC1B,IAAK,MAAM1W,KAAYzZ,EAAO,CAE5B,IAAKA,EAAMoZ,eAAeK,IAAalb,KAAK2Q,mBAAmBlP,EAAMyZ,IACnE,SAGF,MAAM2W,EAAU,IAAI5B,GAAoBxuB,EAAOyZ,EAAU7I,GACrDA,EAAOpO,OAAS,WAAoBjE,KAAK8xB,mBAAmBD,KAErDxf,EAAOpO,OAAS,UAAmBjE,KAAK+xB,wBAAwBF,IAEhExf,EAAOpO,OAAS,cAAuBjE,KAAKgyB,sBAAsBH,KAI7ED,EAAc5xB,KAAKiyB,gBAAgBJ,EAASD,I,CAI5Cvf,EAAOpO,OAAS,YACfjE,KAAK2Q,mBAAmBihB,IACzB5xB,KAAK2Q,mBAAmB0B,EAAOuB,MAAMW,YACL,IAAhCqd,EAAYxgB,QAAQ,SAEpBiB,EAAOuB,MAAMW,SAAWqd,GAG1B5xB,KAAKsU,sBAAsBjC,GAC3BrS,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,CAEU8oB,QAAQ9R,EAAUne,GAK1B,OAJiByO,OAAOiiB,QAAQvS,GAAKwS,QAAO,CAACC,EAAUpX,KACrDoX,EAAIpX,EAAM,GAAG3N,eAAiB2N,EAAM,GAC7BoX,IACN,CAAC,GACY5wB,EAAK6L,cACvB,CAEUglB,gBAAgB1S,EAAU2S,GAClC,MAAMC,EAAetiB,OAAO0M,KAAKgD,GAAKwS,QAAO,CAACC,EAAetuB,KACvDA,EAAImN,MAAMqhB,IACZF,EAAIvrB,KAAK/C,GAEJsuB,IACN,IACH,OAA4B,IAAxBG,EAAatrB,OACR,KAEA0Y,EAAI4S,EAAa,GAE5B,CAEUC,iBAAiB7S,EAAUne,GACnC,MAAMixB,EAAcxiB,OAAO0M,KAAKgD,GAAKwS,QAAO,CAACC,EAAepX,KACtDA,EAAM3N,cAAcqlB,SAASlxB,EAAK6L,gBACpC+kB,EAAIvrB,KAAKmU,GAEJoX,IACN,IACH,OAA2B,IAAvBK,EAAYxrB,OACP,KAEA0Y,EAAI8S,EAAY,GAE3B,CAEUf,SAASxB,EAAmB7d,GACpCA,EAAOqB,MACL1T,KAAK4R,kBAAkB5R,KAAKyxB,QAAQvB,EAAc,cAAe,IACjE,KACAlwB,KAAK4R,kBAAkB5R,KAAKyxB,QAAQvB,EAAc,SAAU,IAC5D,KACF7d,EAAOqB,MAAMrD,MACf,CAEUyhB,mBAAmBD,GAC3B,OAAO7xB,KAAKswB,qBAAqB6B,QAAO,CAACC,EAAcO,KAChDP,IACHA,EAAMO,EAAKC,KAAK5yB,KAAV2yB,CAAgBd,IAEjBO,KACN,EACL,CAEUL,wBAAwBF,GAChC,OAAO7xB,KAAK0wB,0BAA0ByB,QAAO,CAACC,EAAcO,KACrDP,IACHA,EAAMO,EAAKC,KAAK5yB,KAAV2yB,CAAgBd,IAEjBO,KACN,EACL,CAEUJ,sBAAsBH,GAC9B,OAAO7xB,KAAK+wB,wBAAwBoB,QAAO,CAACC,EAAcO,KACnDP,IACHA,EAAMO,EAAKC,KAAK5yB,KAAV2yB,CAAgBd,IAEjBO,KACN,EACL,CAEUH,gBAAgBJ,EAA8BD,GACtD,IACwD,IAAtDxB,GAAkBhf,QAAQygB,EAAQ1B,iBACjC0B,EAAQ1B,cAAc1e,WAAW,cACjCogB,EAAQ1B,cAAc1e,WAAW,YAClC,CACA,GAAmB,MAAfmgB,GAAiD,UAA1BC,EAAQ1B,cACjC,OAAO0B,EAAQ3B,aAAa2B,EAAQ3W,UAC/B,GACqB,iBAA1B2W,EAAQ1B,eACkB,kBAA1B0B,EAAQ1B,cACR,CACA,MAAM0C,EAAe,IAAI3W,KACgC,IAAvD3E,SAASsa,EAAQ3B,aAAa2B,EAAQ3W,UAAW,KACjDqR,cAEF,OADAvsB,KAAK8T,WAAW+d,EAAQxf,OAAQ,aAAewf,EAAQ3W,SAAU2X,GAC1D,I,CAGPhB,EAAQ1B,cAAcuC,SAAS,aAC/Bb,EAAQ1B,cAAcuC,SAAS,QAC/Bb,EAAQ1B,cAAcuC,SAAS,UAE/B1yB,KAAK8T,WACH+d,EAAQxf,OACRwf,EAAQ3W,SACR2W,EAAQ3B,aAAa2B,EAAQ3W,UAC7B,aAGFlb,KAAK8T,WAAW+d,EAAQxf,OAAQwf,EAAQ3W,SAAU2W,EAAQ3B,aAAa2B,EAAQ3W,U,CAGnF,OAAO,IACT,CAEU8V,qBAAqBa,GAC7B,SACE7xB,KAAK2Q,mBAAmBkhB,EAAQxf,OAAOyC,SAASC,aAChD8c,EAAQ1B,cAAcuC,SAAS,iBAE/Bb,EAAQxf,OAAOyC,SAASC,UAAY8c,EAAQ3B,aAAa2B,EAAQ3W,WAC1D,EAGX,CAEU+V,mBAAmBY,GAC3B,SACE7xB,KAAK2Q,mBAAmBkhB,EAAQxf,OAAOyC,SAASG,cAChD4c,EAAQ1B,cAAcuC,SAAS,cAE/Bb,EAAQxf,OAAOyC,SAASG,WAAa4c,EAAQ3B,aAAa2B,EAAQ3W,WAC3D,EAGX,CAEUgW,oBAAoBW,GAC5B,SACE7xB,KAAK2Q,mBAAmBkhB,EAAQxf,OAAOyC,SAASE,YAChD6c,EAAQ1B,cAAcuC,SAAS,gBAE/Bb,EAAQxf,OAAOyC,SAASE,SAAW6c,EAAQ3B,aAAa2B,EAAQ3W,WACzD,EAGX,CAEUiW,oBAAoBU,GAC5B,SACE7xB,KAAK2Q,mBAAmBkhB,EAAQxf,OAAOyC,SAASP,YAChDsd,EAAQ1B,cAAcuC,SAAS,eAE/Bb,EAAQxf,OAAOyC,SAASP,SAAWsd,EAAQ3B,aAAa2B,EAAQ3W,WACzD,EAGX,CAEUoW,mBAAmBO,GAC3B,SACE7xB,KAAK2Q,mBAAmBkhB,EAAQxf,OAAOyC,SAASmS,WAChD4K,EAAQ1B,cAAcuC,SAAS,cAE/Bb,EAAQxf,OAAOyC,SAASmS,QAAU4K,EAAQ3B,aAAa2B,EAAQ3W,WACxD,EAGX,CAEUmW,iBAAiBQ,GACzB,SACE7xB,KAAK2Q,mBAAmBkhB,EAAQxf,OAAOyC,SAASsJ,SAChDyT,EAAQ1B,cAAcuC,SAAS,oBAE/Bb,EAAQxf,OAAOyC,SAASsJ,MAAQyT,EAAQ3B,aAAa2B,EAAQ3W,WACtD,EAGX,CAEUkW,iBAAiBS,GACzB,SACE7xB,KAAK2Q,mBAAmBkhB,EAAQxf,OAAOyC,SAASyF,SAChDsX,EAAQ1B,cAAcuC,SAAS,YAE/Bb,EAAQxf,OAAOyC,SAASyF,MAAQsX,EAAQ3B,aAAa2B,EAAQ3W,WACtD,EAGX,CAEUyV,oBAAoBkB,GAC5B,SACE7xB,KAAK2Q,mBAAmBkhB,EAAQxf,OAAOI,KAAKyD,UAC5C2b,EAAQ1B,cAAcuC,SAAS,aAE/Bb,EAAQxf,OAAOI,KAAKyD,OAAS2b,EAAQ3B,aAAa2B,EAAQ3W,UAC1D2W,EAAQxf,OAAOI,KAAK6D,MAAQtW,KAAK+R,aAAa8f,EAAQxf,OAAOI,KAAKyD,SAC3D,EAGX,CAEU0a,0BAA0BiB,GAClC,SACE7xB,KAAK2Q,mBAAmBkhB,EAAQxf,OAAOI,KAAK2D,QAC5Cyb,EAAQ1B,cAAcuC,SAAS,0BAE/Bb,EAAQxf,OAAOI,KAAK2D,KAAOyb,EAAQ3B,aAAa2B,EAAQ3W,WACjD,EAGX,CAEU2V,4BAA4BgB,GACpC,SACE7xB,KAAK2Q,mBAAmBkhB,EAAQxf,OAAOI,KAAKuD,kBAC5C6b,EAAQ1B,cAAcuC,SAAS,sBAE/Bb,EAAQxf,OAAOI,KAAKuD,eAAiB6b,EAAQ3B,aAAa2B,EAAQ3W,WAC3D,EAGX,CAEU4V,oBAAoBe,GAC5B,SACE7xB,KAAK2Q,mBAAmBkhB,EAAQxf,OAAOI,KAAKH,cAC5Cuf,EAAQ1B,cAAcuC,SAAS,gBACmB,IAAlDb,EAAQ3B,aAAa2B,EAAQ3W,UAAUjU,UAEvC4qB,EAAQxf,OAAOI,KAAKC,SAAYmf,EAAQ3B,aAAa2B,EAAQ3W,UAAqBvD,OAChF,EACA,GAEsC,MAApCka,EAAQxf,OAAOI,KAAKC,SAAS,KAC/Bmf,EAAQxf,OAAOI,KAAKC,SAAWmf,EAAQxf,OAAOI,KAAKC,SAASiF,OAAO,EAAG,IAExEka,EAAQxf,OAAOI,KAAKK,QAAW+e,EAAQ3B,aAAa2B,EAAQ3W,UAAqBvD,OAAO,EAAG,IACpF,EAGX,CAEU6Y,iBAAiBqB,GACzB,SACE7xB,KAAK2Q,mBAAmBkhB,EAAQxf,OAAOuB,MAAMY,WACnB,aAA1Bqd,EAAQ1B,iBAER0B,EAAQxf,OAAOuB,MAAMY,SAAWqd,EAAQ3B,aAAa2B,EAAQ3W,WACtD,EAGX,CAEUqV,iBAAiBsB,GACzB,SACE7xB,KAAK2Q,mBAAmBkhB,EAAQxf,OAAOuB,MAAMW,WACnB,aAA1Bsd,EAAQ1B,iBAER0B,EAAQxf,OAAOuB,MAAMW,SAAWsd,EAAQ3B,aAAa2B,EAAQ3W,WACtD,EAGX,CAEUuV,aAAaoB,GACrB,IACgC,MAA7BA,EAAQxf,OAAOuB,MAAMa,MAAqD,IAArCod,EAAQxf,OAAOuB,MAAMa,KAAKxN,SACtC,SAA1B4qB,EAAQ1B,cACR,CACA,MAAMtO,EAAOgQ,EAAQ3B,aAAa2B,EAAQ3W,UAAUpJ,MAAM9R,KAAKkP,cAE/D,OADA2iB,EAAQxf,OAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAagR,IACvC,C,CACF,MAA8B,QAA1BgQ,EAAQ1B,gBACgB,MAA7B0B,EAAQxf,OAAOuB,MAAMa,OACvBod,EAAQxf,OAAOuB,MAAMa,KAAO,IAE9Bod,EAAQxf,OAAOuB,MAAMa,KAAKxL,OAAOjJ,KAAK6Q,aAAaghB,EAAQ3B,aAAa2B,EAAQ3W,aACzE,EAGX,ECrXK,MAAM4X,WAAkCzC,GAC7CsB,cAAclwB,EAAY4Q,GAExB,OADoBrS,KAAK4R,kBAAkB5R,KAAKyxB,QAAQhwB,EAAO,QAAS,UAEtE,IAAK,cACH4Q,EAAOpO,KAAO,SACdoO,EAAOI,KAAO,IAAI,IAClB2d,GAAkBvpB,KAAK,QACvB,MACF,IAAK,WACHwL,EAAOpO,KAAO,aACdoO,EAAOyC,SAAW,IAAI,IACtBsb,GAAkBvpB,KAAK,QACvB,MACF,IAAK,QACL,IAAK,cACHupB,GAAkBvpB,KAAK,QAK7B,ECnBK,MAAMksB,WAAkC1C,GAC7CnwB,cACEiF,QACAnF,KAAK+wB,wBAAwBlqB,KAAK7G,KAAKgzB,mBACzC,CAEArB,cAAclwB,EAAY4Q,GACxBA,EAAOpO,KAAO,UACdoO,EAAOuB,MAAQ,IAAI,IAGhB5T,KAAK2Q,mBAAmB3Q,KAAKqyB,gBAAgB5wB,EAAO,kBACpDzB,KAAK2Q,mBAAmB3Q,KAAKqyB,gBAAgB5wB,EAAO,wBAErD4Q,EAAOpO,KAAO,SACdoO,EAAOI,KAAO,IAAI,KAIjBzS,KAAK2Q,mBAAmB3Q,KAAKqyB,gBAAgB5wB,EAAO,2BACpDzB,KAAK2Q,mBAAmB3Q,KAAKqyB,gBAAgB5wB,EAAO,wBACpDzB,KAAK2Q,mBAAmB3Q,KAAKqyB,gBAAgB5wB,EAAO,0BACpDzB,KAAK2Q,mBAAmB3Q,KAAKqyB,gBAAgB5wB,EAAO,2BAErD4Q,EAAOpO,KAAO,aACdoO,EAAOyC,SAAW,IAAI,IAE1B,CAEAke,mBAAmBnB,GACjB,QAAIA,EAAQ1B,cAAclf,MAAM,2BAC9BjR,KAAK8T,WAAW+d,EAAQxf,OAAQ,UAAWwf,EAAQ3B,aAAa2B,EAAQ3W,YACjE,EAGX,CAEA4V,oBAAoBe,GAClB,GACE7xB,KAAK2Q,mBAAmBkhB,EAAQxf,OAAOI,KAAKH,aAC5Cuf,EAAQ1B,cAAcuC,SAAS,eAC/B,CACA,MAAMO,EAAYpB,EAAQ3B,aAAa2B,EAAQ3W,UAAqBpJ,MAAM,KAM1E,OALA+f,EAAQxf,OAAOI,KAAKC,SAAWugB,EAAS,GACA,MAApCpB,EAAQxf,OAAOI,KAAKC,SAAS,IAAsD,IAAxCmf,EAAQxf,OAAOI,KAAKC,SAASzL,SAC1E4qB,EAAQxf,OAAOI,KAAKC,SAAWmf,EAAQxf,OAAOI,KAAKC,SAASiF,OAAO,EAAG,IAExEka,EAAQxf,OAAOI,KAAKK,QAAUmgB,EAAS,GAAGhsB,OAAS,EAAIgsB,EAAS,GAAGtb,OAAO,EAAG,GAAKsb,EAAS,IACpF,C,CAET,OAAO,CACT,ECvDK,MAAMC,WAA2B,EACtC9d,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,GAAe,MAAXiG,EAEF,OADAJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,IAAIwqB,EAAoB,KAmExB,OAlEApqB,EAAQ6D,SAASnL,IACf,GAAe,MAAX0xB,EAEF,YADAA,EAAU1xB,EAAMiF,KAAK0sB,GAAcA,KAIrC,GAAI3xB,EAAMwF,OAAS,GAAKxF,EAAMwF,SAAWksB,EAAQlsB,OAC/C,OAGF,IAAKjH,KAAK2Q,mBAAmBlP,EAAM,IACjC,GAAIzB,KAAK0P,aAAc,CACPjO,EAAM,GAAcqQ,MAAM,KACnClF,SAASymB,IACZA,EAAMA,EAAIhjB,OACV,IAAI8G,GAAgB,EAChBC,EAAkBzO,EAAOzB,YAAYD,OAEzC,IAAK,IAAIoN,EAAI,EAAGA,EAAI1L,EAAOzB,YAAYD,OAAQoN,IAC7C,GAAI1L,EAAOzB,YAAYmN,GAAG7S,OAAS6xB,EAAK,CACtClc,GAAgB,EAChBC,EAAkB/C,EAClB,K,CAIJ,GAAI8C,EAAe,CACjB,MAAMxI,EAAa,IAAI,IACvBA,EAAWnN,KAAO6xB,EAClB1qB,EAAOzB,YAAYL,KAAK8H,E,CAG1BhG,EAAOoG,wBAAwBlI,KAAK,CAAC8B,EAAOlC,QAAQQ,OAAQmQ,GAAiB,G,KAE1E,CACL,MAAMiX,EAAQ5sB,EAAM,GAAcqQ,MAAM,KAClCuhB,EAAMhF,EAAKpnB,OAAS,EAAIonB,EAAK,GAAGhe,OAAS,KAC/CrQ,KAAKiU,cAActL,EAAQ0qB,E,CAI/B,MAAMhhB,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAM,GAAI,MAE/C,IAAK,IAAI4S,EAAI,EAAGA,EAAI5S,EAAMwF,OAAQoN,IAAK,CACrC,MAAMvE,EAASqjB,EAAQ9e,GAAGhE,OAAOhD,cAC7BrN,KAAK2Q,mBAAmBlP,EAAM4S,KAAOrU,KAAK2Q,mBAAmBb,KAI7D9P,KAAKoP,mBAAmBgC,QAAQtB,IAAW,EAC7CuC,EAAOuB,MAAMW,SAAW9S,EAAM4S,GACrBrU,KAAKmP,mBAAmBiC,QAAQtB,IAAW,EACpDuC,EAAOuB,MAAMY,SAAW/S,EAAM4S,GACrBrU,KAAKsP,cAAc8B,QAAQtB,IAAW,EAC/CuC,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAM4S,IAE5CrU,KAAK8T,WAAWzB,EAAQ8gB,EAAQ9e,GAAI5S,EAAM4S,I,CAI9CrU,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,EC/EK,MAAM2qB,WAA4B,EACvCle,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACfzB,KAAKiU,cAActL,EAAQ3I,KAAKuzB,SAAS,WAAY9xB,IACrD,MAAM4Q,EAASrS,KAAKwT,kBACpBnB,EAAOqB,MAAQ1T,KAAKuzB,SAAS,cAAe9xB,GAC5C4Q,EAAO7Q,KAAOxB,KAAK4R,kBAAkB5R,KAAKuzB,SAAS,QAAS9xB,GAAQ,MACpE4Q,EAAOuB,MAAMW,SAAWvU,KAAKuzB,SAAS,WAAY9xB,GAClD4Q,EAAOuB,MAAMY,SAAWxU,KAAKuzB,SAAS,WAAY9xB,GAClD4Q,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAa7Q,KAAKuzB,SAAS,OAAQ9xB,IAC5DzB,KAAK8T,WAAWzB,EAAQ,aAAcrS,KAAKuzB,SAAS,YAAa9xB,IACjEzB,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAGzBrS,KAAK0P,cACP1P,KAAK+S,yBAAyBpK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,CAEQ4qB,SAASzvB,EAAarC,GAC5B,OAAOzB,KAAK4R,kBAAkBnQ,EAAMqC,GAAM9D,KAAK4R,kBAAkBnQ,EAAM,IAAMqC,IAC/E,EC/BK,MAAM0vB,WAA2B,EACtCpe,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACb8qB,EAAiC/d,KAAKN,MAAMtS,GAClD,OACkB,MAAhB2wB,GAC0B,MAA1BA,EAAaC,WACqB,IAAlCD,EAAaC,UAAUzsB,QAEvB0B,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,IAGK,GAA1B8qB,EAAatb,WACfxP,EAAOsG,SAAU,EACjBtG,EAAOgQ,aAAe,+CACfzN,QAAQC,QAAQxC,KAGzB8qB,EAAaC,UAAU9mB,SAASsd,IAC9B,MAAM7X,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAO0oB,EAAOzT,QACrBpE,EAAOuB,MAAMW,SAAW2V,EAAO3V,SAC/BlC,EAAOuB,MAAMY,SAAW0V,EAAO1V,SAE/BnC,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAaqZ,EAAOzT,SAC7CpE,EAAOqB,MAAQwW,EAAOvmB,QAEtB3D,KAAKsU,sBAAsBjC,GAC3BrS,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECpCK,MAAMgrB,WAA4B,EACvCve,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU2M,KAAKN,MAAMtS,GAC3B,OAAe,MAAXiG,GAAsC,IAAnBA,EAAQ9B,QAC7B0B,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAAS6S,IACf,GAAuB,MAAnBA,EAAW4O,MAAgB5O,EAAW4O,KAAKpnB,OAAS,EAAG,CACzD,MAAMiN,EAAauL,EAAW4O,KAAK,GAAG3jB,KACtC1K,KAAKiU,cAActL,EAAQuL,E,CAG7B,MAAM7B,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOie,EAAW1J,MAEzB1D,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkB6N,EAAWlL,UACtDvU,KAAK2Q,mBAAmB0B,EAAOuB,MAAMW,UACvClC,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkB6N,EAAWlF,OAChDva,KAAK2Q,mBAAmB8O,EAAWlF,SAC7ClI,EAAOqB,MAAQ,UAAY+L,EAAWlF,MAAQ,MAGhDlI,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkB6N,EAAWjL,UAC1DnC,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAa4O,EAAWlO,KACjDc,EAAOqB,OAAS1T,KAAK4R,kBAAkB6N,EAAW1R,YAAa,IACzC,MAAlB0R,EAAWmU,MACbvhB,EAAOuB,MAAMgE,KAAO5X,KAAK4R,kBAAkB6N,EAAWmU,IAAIzyB,SAG5B,MAA5Bse,EAAWoU,eACbpU,EAAWoU,cAAcjnB,SAASknB,IAChC,OAAQA,EAAYC,YAClB,IAAK,OACL,IAAK,WACH/zB,KAAK8T,WAAWzB,EAAQyhB,EAAY/d,MAAO+d,EAAYryB,O,IAM/DzB,KAAKsU,sBAAsBjC,GAC3BrS,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAGzBrS,KAAK0P,cACP1P,KAAK+S,yBAAyBpK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECpDK,MAAMqrB,WAA4B,EACvC5e,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,MAAMwyB,EAAYj0B,KAAK2Q,mBAAmBlP,EAAMyyB,MAAiC,KAAzBxe,KAAKN,MAAM3T,EAAMyyB,MACnE7F,EACQ,MAAZ4F,GAAqC,MAAjBA,EAAS5F,MAAgB4F,EAAS5F,KAAKpnB,OAAS,EAChEgtB,EAAS5F,KACN3nB,KAAKytB,IACJ,IACE,MAAM3wB,EAAIkS,KAAKN,MAAM+e,GACrB,OAAOn0B,KAAK4R,kBAAkBpO,EAAE6vB,I,CAChC,S,CAGF,OAAO,IAAI,IAEZlqB,QAAQ3F,IAAexD,KAAK2Q,mBAAmBnN,KAClD,KAEFxD,KAAK0P,cAAwB,MAAR2e,GAAgBA,EAAKpnB,OAAS,EACrDonB,EAAKzhB,SAASymB,IACZ,IAAIlc,GAAgB,EAChBC,EAAkBzO,EAAOzB,YAAYD,OAEzC,IAAK,IAAIoN,EAAI,EAAGA,EAAI1L,EAAOzB,YAAYD,OAAQoN,IAC7C,GAAI1L,EAAOzB,YAAYmN,GAAG7S,OAAS6xB,EAAK,CACtClc,GAAgB,EAChBC,EAAkB/C,EAClB,K,CAIJ,GAAI8C,EAAe,CACjB,MAAMxI,EAAa,IAAI,IACvBA,EAAWnN,KAAO6xB,EAClB1qB,EAAOzB,YAAYL,KAAK8H,E,CAG1BhG,EAAOoG,wBAAwBlI,KAAK,CAAC8B,EAAOlC,QAAQQ,OAAQmQ,GAAiB,KAErEpX,KAAK0P,cAAwB,MAAR2e,GAAgBA,EAAKpnB,OAAS,GAC7DjH,KAAKiU,cAActL,EAAQ0lB,EAAK,IAGlC,MAAMhc,EAASrS,KAAKwT,kBACpBnB,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAM8e,MAAO,IACnDlO,EAAOqB,OAAS,OAAS1T,KAAK4R,kBAAkBnQ,EAAM,gBAAiB,IAAM,KAC7E4Q,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAM,cAAe,MAC1D4Q,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAM,YACrD4Q,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAMma,UACrDvJ,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAMiZ,KAEhB,MAAxBjZ,EAAM2yB,gBAA0B3yB,EAAM2yB,eAAentB,OAAS,GAChExF,EAAM2yB,eAAexnB,SAASkK,IACvB9W,KAAK2Q,mBAAmBmG,KAC3BzE,EAAOqB,OAAS,KAAOoD,E,IAK7B,MAAMud,EAAcr0B,KAAK2Q,mBAAmBlP,EAAM,iBAE9C,KADAiU,KAAKN,MAAM3T,EAAM,iBAEfkS,EACU,MAAd0gB,GAAgD,MAA1BA,EAAWC,aAAuBD,EAAWC,YAAYrtB,OAAS,EACpFotB,EAAWC,YAAY5tB,KAAK6tB,IAC1B,IACE,OAAO7e,KAAKN,MAAMmf,E,CAClB,S,CAGF,OAAO,IAAI,IAEb,KACQ,MAAV5gB,GACFA,EAAO/G,SAASqG,IACL,MAALA,GACFjT,KAAK8T,WAAWzB,EAAQY,EAAEzR,KAAMyR,EAAEnQ,K,IAKxC9C,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECjGK,MAAM6rB,WAAiC,EAC5Cpf,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,GAAe,MAAXiG,EAEF,OADAJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,IAAI8rB,GAAa,EAmCjB,OAlCA1rB,EAAQ6D,SAASnL,IACf,GAAqB,IAAjBA,EAAMwF,QAAgBxF,EAAMwF,OAAS,EACvC,OAEF,MAAMytB,EAA6B,KAAjBjzB,EAAMwF,QAA8B,MAAbxF,EAAM,GACzC4Q,EAASrS,KAAKwT,kBAIpB,GAHAnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAMizB,EAAY,EAAI,GAAI,MAC/DriB,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAMizB,EAAY,EAAI,IACrEriB,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAMizB,EAAY,EAAI,IAChD,IAAjBjzB,EAAMwF,OACRwtB,GAAa,EACbpiB,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAM,IAC5C4Q,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAM,QACvC,CACL,MAAM4V,EAASrX,KAAK4R,kBAAkBnQ,EAAMizB,EAAY,EAAI,GAAI,UAChE,IAAIxgB,EAAwB,WAAXmD,EAAsBA,EAAOvF,MAAM,MAAM1B,KAAK,KAAO,KACpD,MAAd8D,IACFA,EAAamD,EAAOvF,MAAM,OAAO1B,KAAK,KACtC8D,EAAamD,EAAOvF,MAAM,KAAK1B,KAAK,MAEtCpQ,KAAKiU,cAActL,EAAQuL,GAC3B7B,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMizB,EAAY,EAAI,IAC5DriB,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAM,G,CAE9CzB,KAAKsU,sBAAsBjC,GAC3BrS,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAGzBoiB,GAAcz0B,KAAK0P,cACrB1P,KAAK+S,yBAAyBpK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,ECzCK,MAAMgsB,WAAiC,EAC5Cvf,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU2M,KAAKN,MAAMtS,GAC3B,GAAe,MAAXiG,GAAoC,MAAjBA,EAAQmP,MAE7B,OADAvP,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,MAAM0Y,EAAa,IAAIxI,IACvB9P,EAAQ/B,QAAQ4F,SAASnL,IACvB4f,EAAWrI,IAAIvX,EAAM4H,GAAI5H,EAAMD,KAAK,IAEtC,MAAM8f,EAAkB,IAAIzI,IA0G5B,OAzGAwI,EAAWzU,SAAQ,CAACyI,EAAKvR,KACvBwd,EAAgBtI,IAAIlV,EAAK6E,EAAO3B,QAAQC,QACxC,MAAMgM,EAAI,IAAI,IACdA,EAAEzR,KAAO6T,EACT1M,EAAO3B,QAAQH,KAAKoM,EAAE,IAGxBlK,EAAQmP,MAAMtL,SAASnL,IACrB,MAAM4Q,EAASrS,KAAKwT,kBAQpB,GAPAnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAMD,KAAM,MACjD6Q,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAMmzB,WAExB,MAAhBnzB,EAAM4V,QAAkBiK,EAAgBlI,IAAI3X,EAAM4V,SACpD1O,EAAOkG,oBAAoBhI,KAAK,CAAC8B,EAAOlC,QAAQQ,OAAQqa,EAAgBlf,IAAIX,EAAM4V,UAG3D,MAArB5V,EAAMozB,YAAV,CAIK70B,KAAK2Q,mBAAmBlP,EAAMozB,YAAYnhB,SAC7CrB,EAAOqB,MAAQjS,EAAMozB,YAAYnhB,MAAM5B,MAAM,UAAU1B,KAAK,MAAM0B,MAAM,OAAO1B,KAAK,OAGnE,eAAf3O,EAAMwC,OACRoO,EAAOI,KAAO,IAAI,IAClBJ,EAAOpO,KAAO,UAGhB,IAAK,MAAMiX,KAAYzZ,EAAMozB,YAAa,CAExC,IAAKpzB,EAAMozB,YAAYha,eAAeK,GACpC,SAEF,MAAM4Z,EAASrzB,EAAMozB,YAAY3Z,GAC3B7F,EAAgB,MAAVyf,EAAiBA,EAAO1U,WAAa,KACjD,IACEpgB,KAAK2Q,mBAAmB0E,IACX,UAAb6F,GACa,8BAAbA,EAKF,GAAiB,kBAAbA,EAAJ,CAOA,GAAI7I,EAAOpO,OAAS,SAAiB,CACnC,GAAiB,eAAbiX,EAA2B,CAC7B7I,EAAOI,KAAKyD,OAASb,EACrBhD,EAAOI,KAAK6D,MAAQtW,KAAK+R,aAAasD,GACtC,Q,CACK,GAAiB,eAAb6F,EAA2B,CACpC7I,EAAOI,KAAKuD,eAAiBX,EAC7B,Q,CACK,GAAiB,kBAAb6F,EAA8B,CACvC7I,EAAOI,KAAK2D,KAAOf,EACnB,Q,CACK,GAAiB,YAAb6F,EAAwB,CACjC,IACE,MAAM6Z,EAAU,IAAI7Y,KAAK7G,GACzBhD,EAAOI,KAAKK,QAAUiiB,EAAQC,cAAc5U,WAC5C/N,EAAOI,KAAKC,UAAYqiB,EAAQlN,WAAa,GAAGzH,U,CAChD,S,CAGF,Q,CACK,GAAiB,aAAblF,EACT,Q,KAEG,CACL,IACgB,aAAbA,GAAwC,UAAbA,IAC5Blb,KAAK2Q,mBAAmB0B,EAAOuB,MAAMW,UACrC,CACAlC,EAAOuB,MAAMW,SAAWc,EACxB,Q,CACK,GAAiB,aAAb6F,EAAyB,CAClC7I,EAAOuB,MAAMY,SAAWa,EACxB,Q,CACK,GAAiB,SAAb6F,EAAqB,CAC9B7I,EAAOuB,MAAMgE,KAAOvC,EACpB,Q,CACK,IACiB,MAArBhD,EAAOuB,MAAMa,MAA6C,IAA7BpC,EAAOuB,MAAMa,KAAKxN,SAChDjH,KAAKsP,cAAc8B,QAAQ8J,IAAa,EACxC,CACA7I,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAawE,GACtC,Q,EAIJrV,KAAK8T,WAAWzB,EAAQ6I,EAAU7F,E,MAnDhCyf,EAAOloB,SAASqoB,IACdj1B,KAAK8T,WAAWzB,EAAQ4iB,EAAGzzB,KAAMyzB,EAAGxzB,MAAM,G,CAqDhDzB,KAAKsU,sBAAsBjC,GAC3BrS,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,E,CAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,EC5HK,MAAMusB,WAAkC,EAC7C9f,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbiH,EAAM5P,KAAK2P,SAAS7M,GAC1B,GAAW,MAAP8M,EAEF,OADAjH,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,MAAMwsB,EAAUvlB,EAAIjD,iBAAiB,4BA8CrC,OA7CAF,MAAMC,KAAKyoB,GAASvoB,SAASsd,IAC3B,MAAMtN,EAAW5c,KAAKkT,yBAAyBgX,EAAQ,YACjDkL,EACQ,MAAZxY,GACC5c,KAAK2Q,mBAAmBiM,EAAS/Q,cACT,YAAzB+Q,EAAS/Q,YAEL,KADA+Q,EAAS/Q,YAEf7L,KAAKiU,cAActL,EAAQysB,GAE3B,MAAMC,EAAcr1B,KAAKkT,yBAAyBgX,EAAQ,gBACpDoL,EAASt1B,KAAKkT,yBAAyBgX,EAAQ,WAC/C1V,EAAWxU,KAAKkT,yBAAyBgX,EAAQ,YACjD3Y,EAAMvR,KAAKkT,yBAAyBgX,EAAQ,OAC5CxW,EAAQ1T,KAAKkT,yBAAyBgX,EAAQ,SAC9C7X,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KACU,MAAf6zB,EAAsBr1B,KAAK4R,kBAAkByjB,EAAYxpB,YAAa,MAAQ,KAChFwG,EAAOqB,MAAiB,MAATA,EAAgB1T,KAAK4R,kBAAkB8B,EAAM7H,aAAe,GAC3EwG,EAAOuB,MAAMW,SAAqB,MAAV+gB,EAAiBt1B,KAAK4R,kBAAkB0jB,EAAOzpB,aAAe,KACtFwG,EAAOuB,MAAMY,SACC,MAAZA,EAAmBxU,KAAK4R,kBAAkB4C,EAAS3I,aAAe,KACpEwG,EAAOuB,MAAMa,KAAc,MAAPlD,EAAcvR,KAAK6Q,aAAaU,EAAI1F,aAAe,KAEvE,MAAMuX,EAAuB,GAC7B,IAAK,IAAI/O,EAAI,EAAGA,GAAK,GAAIA,IACvB+O,EAAWvc,KAAK,aAAewN,GAGjCrU,KAAKsT,4BAA4B4W,EAAQ9G,EAAWhT,KAAK,MAAMxD,SAAS0W,IAClEtjB,KAAK2Q,mBAAmB2S,EAAKzX,cAAqC,SAArByX,EAAKzX,aAGtD7L,KAAK8T,WAAWzB,EAAQiR,EAAKlW,QAASkW,EAAKzX,YAAY,IAGzD7L,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAGzBrS,KAAK0P,cACP1P,KAAK+S,yBAAyBpK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,ECxDK,MAAM4sB,WAAgC,EAC3CngB,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbiH,EAAM5P,KAAK2P,SAAS7M,GAC1B,GAAW,MAAP8M,EAEF,OADAjH,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,MAAM6sB,EAAe5lB,EAAI9E,cAAc,gBACvC,GAAoB,MAAhB0qB,EAGF,OAFA7sB,EAAOgQ,aAAe,+BACtBhQ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,MAAM8sB,EAAiBD,EAAaE,aAAa,aAC3CxD,EAAUtiB,EAAIjD,iBAAiB,wBA4CrC,OA3CAF,MAAMC,KAAKwlB,GAAStlB,SAASoO,IAC3B,MAAM/Z,EAAQjB,KAAKkT,yBAAyB8H,EAAO,SAC7C2a,EACK,MAAT10B,GAAkBjB,KAAK2Q,mBAAmB1P,EAAM4K,aAE5C,KADA5K,EAAM4K,YAAYiG,MAAM,KAAK1B,KAAK,KAExCpQ,KAAKiU,cAActL,EAAQgtB,GAE3B,MAAM9xB,EAAQ7D,KAAKkT,yBAAyB8H,EAAO,SAC7CzG,EAAWvU,KAAKkT,yBAAyB8H,EAAO,YAChDT,EAAQva,KAAKkT,yBAAyB8H,EAAO,SAC7CxG,EAAWxU,KAAKkT,yBAAyB8H,EAAO,YAChDzJ,EAAMvR,KAAKkT,yBAAyB8H,EAAO,OAC3CtH,EAAQ1T,KAAKkT,yBAAyB8H,EAAO,SAC7C3I,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAgB,MAATqC,EAAgB7D,KAAK4R,kBAAkB/N,EAAMgI,YAAa,MAAQ,KAChFwG,EAAOqB,MACI,MAATA,EACI1T,KAAK4R,kBAAkB8B,EAAM7H,YAAa,IAAIiG,MAAM2jB,GAAgBrlB,KAAK,MACzE,KACNiC,EAAOuB,MAAMW,SACC,MAAZA,EAAmBvU,KAAK4R,kBAAkB2C,EAAS1I,aAAe,KACpEwG,EAAOuB,MAAMY,SACC,MAAZA,EAAmBxU,KAAK4R,kBAAkB4C,EAAS3I,aAAe,KACpEwG,EAAOuB,MAAMa,KAAc,MAAPlD,EAAcvR,KAAK6Q,aAAaU,EAAI1F,aAAe,KAEnE7L,KAAK2Q,mBAAmB0B,EAAOuB,MAAMW,WAAsB,MAATgG,EACpDlI,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkB2I,EAAM1O,aACnC,MAAT0O,GAAkBva,KAAK2Q,mBAAmB4J,EAAM1O,eACzDwG,EAAOqB,MAAQ1T,KAAK2Q,mBAAmB0B,EAAOqB,OAC1C,UAAY6G,EAAM1O,YAClBwG,EAAOqB,MAAPrB,YAAkCkI,EAAM1O,aAG9C7L,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAGzBrS,KAAK0P,cACP1P,KAAK+S,yBAAyBpK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,EC9DK,MAAMitB,WAAkC,EAC7CxgB,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,GAAIA,EAAMwF,OAAS,EACjB,OAEExF,EAAMwF,OAAS,GACjBjH,KAAKiU,cAActL,EAAQlH,EAAM,IAEnC,MAAM4Q,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAM,GAAI,MAC3CA,EAAMwF,OAAS,IACjBoL,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAM,GAAI,IAAIqQ,MAAM,KAAK1B,KAAK,OAElE3O,EAAMwF,OAAS,IACjBoL,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAM,KAEnDA,EAAMwF,OAAS,IACjBoL,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAM,KAEnDA,EAAMwF,OAAS,IACjBoL,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAM,KAE9CzB,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAGzBrS,KAAK0P,cACP1P,KAAK+S,yBAAyBpK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECvBK,MAAMktB,WAA0B,EAAvC,c,oBAkFW,KAAAC,qBAAuB,IAAI1Z,IAAI,CACtC,OACA,OACA,yBACA,yBACA,4BACA,4BACA,uBACA,aACA,+BACA,YACA,gCA2BO,KAAA2Z,qBAAuB,IAAI3Z,IAAI,CACtC,OACA,OACA,6BACA,6BACA,gCACA,kCAgBO,KAAA4Z,sBAAwB,IAAI5Z,IAAI,CACvC,OACA,OACA,iBACA,iBACA,iBAeO,KAAA6Z,mBAAqB,IAAI7Z,IAAI,CAAC,OAAQ,OAAQ,aAAc,eAc5D,KAAA8Z,kBAAoB,IAAI9Z,IAAI,CAAC,OAAQ,OAAQ,aAAc,aAAc,cAczE,KAAA+Z,2BAA6B,IAAI/Z,IAAI,CAC5C,OACA,OACA,8BACA,8BACA,oCAoBO,KAAAga,iBAAmB,IAAIha,IAAI,CAClC,OACA,OACA,yBACA,0BACA,wBACA,yBACA,4BAoCJ,CAjQEhH,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACb0tB,EAA+B3gB,KAAKN,MAAMtS,GAChD,OAAmB,MAAfuzB,GACF1tB,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzB3I,KAAKs2B,aAAa3tB,EAAQ0tB,EAAYrvB,SACtChH,KAAKu2B,kBAAkB5tB,EAAQ0tB,EAAYne,OAEvClY,KAAK0P,cACP1P,KAAK+S,yBAAyBpK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,CAEQ2tB,aAAa3tB,EAAsB3B,GAC1B,MAAXA,GAAsC,IAAnBA,EAAQC,QAI/BD,EAAQ4F,SAASyK,IACK,MAAhBA,EAAOa,OAAwC,GAAvBb,EAAOa,MAAMjR,SAIzCjH,KAAKiU,cAActL,EAAQ0O,EAAO7V,MAElCxB,KAAKu2B,kBAAkB5tB,EAAQ0O,EAAOa,OAAM,GAEhD,CAEQqe,kBAAkB5tB,EAAsBuP,GACjC,MAATA,GAAkC,IAAjBA,EAAMjR,QAI3BiR,EAAMtL,SAASsd,IACb,MAAM7X,EAASrS,KAAKw2B,eAAetM,GAEnClqB,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,GAE/B,CAEQmkB,eAAe7X,GACrB,MAAMtM,EAASrS,KAAKwT,kBAEpB,OAAQmL,EAAK1a,MACX,IAAK,mBACHjE,KAAKy2B,mBAAmB9X,EAAMtM,GAC9B,MACF,IAAK,uBACHrS,KAAK02B,0BAA0B/X,EAAMtM,GACrC,MACF,IAAK,wBACHrS,KAAK22B,0BAA0BhY,EAAMtM,GACrC,MACF,IAAK,OACHrS,KAAK42B,UAAUjY,EAAMtM,GACrB,MACF,IAAK,WACHrS,KAAK62B,eAAelY,EAAMtM,GAC1B,MAKF,IAAK,OACHrS,KAAK82B,WAAWnY,EAAMtM,GAM1B,OAAOA,CACT,CAeQokB,mBAAmBzb,EAA6B3I,GACzC,MAAT2I,GAA+B,oBAAdA,EAAM/W,OAI3BoO,EAAO7Q,KAAOwZ,EAAM+b,uBACpB1kB,EAAOqB,MAAQsH,EAAMgc,uBAErB3kB,EAAOuB,MAAMW,SAAWyG,EAAMic,0BAC9B5kB,EAAOuB,MAAMY,SAAWwG,EAAMkc,0BAE9B7kB,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAamK,EAAMmc,sBAE5Cn3B,KAAK8T,WACHzB,EACA,+BACA2I,EAAMoc,6BAA6BhX,WACnC,cAGFpgB,KAAK8T,WAAWzB,EAAQ,8BAA+B2I,EAAMqc,6BAE7Dr3B,KAAKmd,qBAAqB9K,EAAQ2I,EAAOhb,KAAK81B,sBAChD,CAUQY,0BAA0B1b,EAAyB3I,GAC5C,MAAT2I,GAA+B,wBAAdA,EAAM/W,OAI3BoO,EAAO7Q,KAAOwZ,EAAMsc,2BACpBjlB,EAAOqB,MAAQsH,EAAMuc,2BAErBllB,EAAOuB,MAAMW,SAAWyG,EAAMwc,8BAC9BnlB,EAAOuB,MAAMY,SAAWwG,EAAMyc,8BAE9Bz3B,KAAKmd,qBAAqB9K,EAAQ2I,EAAOhb,KAAK+1B,sBAChD,CASQc,eAAe7b,EAAsB3I,GAC9B,MAAT2I,GAA+B,YAAdA,EAAM/W,OAI3BoO,EAAO7Q,KAAOwZ,EAAM0c,eACpBrlB,EAAOqB,MAAQsH,EAAM2c,eAErBtlB,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAamK,EAAM4c,cAE5C53B,KAAKmd,qBAAqB9K,EAAQ2I,EAAOhb,KAAKg2B,uBAChD,CAGQc,WAAW9b,EAAmB3I,GACvB,MAAT2I,GAA+B,QAAdA,EAAM/W,OAG3BoO,EAAOpO,KAAO,eACdoO,EAAOqC,WAAa,IAAI,IACxBrC,EAAOqC,WAAWzQ,KAAO,aACzBoO,EAAO7Q,KAAOwZ,EAAM6c,WACpBxlB,EAAOqB,MAAQsH,EAAM8c,WAErB93B,KAAKmd,qBAAqB9K,EAAQ2I,EAAOhb,KAAKi2B,oBAChD,CAGQW,UAAU5b,EAAkB3I,GACrB,MAAT2I,GAA+B,QAAdA,EAAM/W,OAI3BoO,EAAO7Q,KAAOwZ,EAAM+c,WACpB1lB,EAAOqB,MAAQsH,EAAMgd,WAErB3lB,EAAOuB,MAAMgE,KAAOoD,EAAMid,UAE1Bj4B,KAAKmd,qBAAqB9K,EAAQ2I,EAAOhb,KAAKk2B,mBAChD,CASQS,0BAA0B3b,EAAkC3I,GACrD,MAAT2I,GAA+B,yBAAdA,EAAM/W,OAI3BoO,EAAOpO,KAAO,eACdoO,EAAOqC,WAAa,IAAI,IACxBrC,EAAOqC,WAAWzQ,KAAO,aACzBoO,EAAO7Q,KAAOwZ,EAAMkd,4BACpB7lB,EAAOqB,MAAQsH,EAAMmd,4BAErBnd,EAAMod,gCAAgCxrB,SAASyrB,IAC7Cr4B,KAAK8T,WAAWzB,EAAQgmB,EAAOv0B,IAAKu0B,EAAO52B,MAAM,IAGnDzB,KAAKmd,qBAAqB9K,EAAQ2I,EAAOhb,KAAKm2B,4BAChD,CAWQmC,SAAStd,EAAiB3I,GACnB,MAAT2I,GAA+B,oBAAdA,EAAM/W,OAI3BoO,EAAOpO,KAAO,eACdoO,EAAOqC,WAAa,IAAI,IACxBrC,EAAOqC,WAAWzQ,KAAO,aACzBoO,EAAO7Q,KAAOwZ,EAAMud,uBACpBlmB,EAAOqB,MAAQsH,EAAMwd,wBAErBx4B,KAAK8T,WAAWzB,EAAQ,wBAAyB2I,EAAMyd,uBACvDz4B,KAAK8T,WAAWzB,EAAQ,yBAA0B2I,EAAM0d,wBACxD14B,KAAK8T,WACHzB,EACA,2BACA2I,EAAM2d,yBACN,aAGF34B,KAAKmd,qBAAqB9K,EAAQ2I,EAAOhb,KAAKo2B,kBAChD,CAEQjZ,qBACN9K,EACA2I,EACAqC,GAEuBpN,OAAO0M,KAAK3B,GAAO7R,QAAQqT,IAAOa,EAAajE,IAAIoD,KAC3D5P,SAAS9I,IACtB,MAAM6a,EAAO3D,EACbhb,KAAK8T,WAAWzB,EAAQvO,EAAK6a,EAAK7a,GAAKsc,WAAW,GAEtD,EC/QK,MAAMwY,WAA6B,EACxCxjB,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,GAAoB,SAAhBA,EAAMo3B,MACR,OAEF,MAAMxmB,EAASrS,KAAKwT,kBAGpB,GAFAnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAMD,MAC3C6Q,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMiS,OACzB,cAAfjS,EAAMwC,KACRoO,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAMgV,SAC5CpE,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAM+S,UACrDnC,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAM8S,eAChD,GAAmB,mBAAf9S,EAAMwC,KAA2B,CAC1CoO,EAAOpO,KAAO,SACdoO,EAAOI,KAAO,IAAI,IAClBJ,EAAOI,KAAKuD,eAAiBhW,KAAK4R,kBAAkBnQ,EAAMq3B,YAC1DzmB,EAAOI,KAAKyD,OAASlW,KAAK4R,kBAAkBnQ,EAAMyU,QAClD7D,EAAOI,KAAK6D,MAAQtW,KAAK+R,aAAaM,EAAOI,KAAKyD,QAClD7D,EAAOI,KAAK2D,KAAOpW,KAAK4R,kBAAkBnQ,EAAMs3B,cAEhD,IACE,MAAMrmB,EAAW1S,KAAK4R,kBAAkBnQ,EAAMu3B,aAC9C,GAAgB,MAAZtmB,EAAkB,CACpB,MAAMumB,EAAiB1hB,SAAS7E,EAAU,MACpB,MAAlBumB,GAA0BA,GAAkB,GAAKA,GAAkB,KACrE5mB,EAAOI,KAAKC,SAAWumB,EAAe7Y,W,EAG1C,S,CAGF,IACE,MAAMtN,EAAU9S,KAAK4R,kBAAkBnQ,EAAMy3B,YAC7C,GAAe,MAAXpmB,EAAiB,CACnB,MAAMqmB,EAAgB5hB,SAASzE,EAAS,MACnB,MAAjBqmB,IACF9mB,EAAOI,KAAKK,QAAUqmB,EAAc/Y,W,EAGxC,S,CAIF,MAAMgZ,EAAMp5B,KAAK4R,kBAAkBnQ,EAAM23B,KAC9B,MAAPA,GACFp5B,KAAK8T,WAAWzB,EAAQ,MAAO+mB,GAEjC,MAAMntB,EAAMjM,KAAK4R,kBAAkBnQ,EAAMmoB,SAC9B,MAAP3d,GACFjM,KAAK8T,WAAWzB,EAAQ,WAAYpG,E,CAGxCjM,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECrEK,MAAM0wB,WAA4B,EACvCjkB,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,GAAe,MAAXiG,EAEF,OADAJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,IAAI0L,EAAI,EAoDR,OAnDAtL,EAAQ6D,SAASnL,IACf,MAAM4V,GACHrX,KAAK2Q,mBAAmBlP,EAAM63B,SAAW73B,EAAM63B,OAAO7nB,WAAW,KAC9DhQ,EAAM63B,OAAO5nB,QAAQ,IAAK,IAC1BjQ,EAAM63B,OACNplB,EAAclU,KAAK2Q,mBAAmB0G,GAAmB,KAATA,EACtDrX,KAAKiU,cAActL,EAAQuL,GAE3B,MAAM7B,EAASrS,KAAKwT,kBAOpB,GANAnB,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMga,MAC5CpJ,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAM83B,KAAM,MACjDlnB,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAMihB,OACrDrQ,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAM+3B,KACrDnnB,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAMgnB,MAEvCzoB,KAAK2Q,mBAAmBlP,EAAMg4B,WAAY,CAC7C,IAAI9lB,EAAmB,CAAClS,EAAMg4B,WACF,MAAxBh4B,EAAM2yB,gBAA0B3yB,EAAM2yB,eAAentB,OAAS,IAChE0M,EAASA,EAAO1K,OAAOxH,EAAM2yB,iBAE/BzgB,EAAO/G,SAASoH,IACd,MAAMgQ,EAAQhQ,EAAMlC,MAAM,KAC1B,GAAIkS,EAAM/c,OAAS,EACjB,OAEF,MAAMnD,EAAmB,cAAbkgB,EAAM,GAAqB,KAAOA,EAAM,GAC9C3O,EAAuB,IAAjB2O,EAAM/c,QAA6B,QAAb+c,EAAM,GAAeA,EAAM,GAAKA,EAAM,GACxEhkB,KAAK8T,WAAWzB,EAAQvO,EAAKuR,EAAI,G,CAIrCrV,KAAKsU,sBAAsBjC,GAC3BrS,KAAK6T,cAAcxB,GAGjBgC,IAAMtL,EAAQ9B,QACE,OAAhBoL,EAAO7Q,MACPxB,KAAK2Q,mBAAmB0B,EAAOuB,MAAMY,YAKvC7L,EAAOlC,QAAQI,KAAKwL,GACpBgC,IAAG,IAGDrU,KAAK0P,cACP1P,KAAK+S,yBAAyBpK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,EC9DK,MAAM+wB,WAA0B,EACrCtkB,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,I,MACf,MAAM4Q,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAMqkB,MAAO,MAClDzT,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAMia,UACrDrJ,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAMma,UACrDvJ,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAsB,QAAT,EAAApP,EAAMgnB,WAAG,QAAIhnB,EAAMiZ,KACzDrI,EAAOuB,MAAMgE,KAAO5X,KAAK4R,kBAAkBnQ,EAAMk4B,SACjDtnB,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAM8e,OAC5CvgB,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,EChBK,MAAMixB,WAA+B,EAC1CxkB,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbiH,EAAM5P,KAAK2P,SAAS7M,GAC1B,GAAW,MAAP8M,EAEF,OADAjH,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAIzB,GAAU,MADCiH,EAAI9E,cAAc,YAI3B,OAFAnC,EAAOgQ,aAAe,2BACtBhQ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,MAAM0Y,EAAa,IAAIxI,IA6EvB,OA3EApM,MAAMC,KAAKkD,EAAIjD,iBAAiB,qBAAqBC,SAASitB,IAC5D,MAAMr4B,EAAOq4B,EAAQnE,aAAa,QAC5BrsB,EAAKwwB,EAAQnE,aAAa,MAChC,IAAK11B,KAAK2Q,mBAAmBnP,KAAUxB,KAAK2Q,mBAAmBtH,GAAK,CAClEgY,EAAWrI,IAAI3P,EAAIV,EAAO3B,QAAQC,QAClC,MAAMoQ,EAAS,IAAI,IACnBA,EAAO7V,KAAOA,EACdmH,EAAO3B,QAAQH,KAAKwQ,E,KAIxB5K,MAAMC,KAAKkD,EAAIjD,iBAAiB,oBAAoBC,SAASktB,IAC3D,GAAwC,SAApCA,EAAOpE,aAAa,aAA6D,SAAnCoE,EAAOpE,aAAa,WACpE,OAGF,MAAMqE,EAAY/5B,KAAKkT,yBAAyB4mB,EAAQ,YACxD,GAAiB,MAAbC,EAAmB,CACrB,MAAMC,EAAUD,EAAUluB,aACrB7L,KAAK2Q,mBAAmBqpB,IAAY3Y,EAAWjI,IAAI4gB,IACtDrxB,EAAOkG,oBAAoBhI,KAAK,CAAC8B,EAAOlC,QAAQQ,OAAQoa,EAAWjf,IAAI43B,I,CAI3E,MAAM3nB,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBkoB,EAAOpE,aAAa,SAAU,MAE/B,SAAhCoE,EAAOpE,aAAa,UACtBrjB,EAAOoB,UAAW,GAIH,SADAqmB,EAAOpE,aAAa,SAEnCrjB,EAAOpO,KAAO,eACdoO,EAAOqC,WAAa,IAAI,IACxBrC,EAAOqC,WAAWzQ,KAAO,cAEzBwI,MAAMC,KAAK1M,KAAKsT,4BAA4BwmB,EAAQ,UAAUltB,SAASqtB,IACrE,MAAMvvB,EAAOuvB,EAAQpuB,YACrB,GAAI7L,KAAK2Q,mBAAmBjG,GAC1B,OAEF,MAAMlJ,EAAOy4B,EAAQvE,aAAa,QAC5BhJ,EAAY1sB,KAAK4R,kBAAkBqoB,EAAQvE,aAAa,QAAS,IAAIroB,cACzD,UAAdqf,EACFra,EAAOuB,MAAMW,SAAW7J,EACD,aAAdgiB,GAA0C,WAAdA,EAErC1sB,KAAK8T,WAAWzB,EAAQ7Q,EAAMkJ,EAAM,aACb,sBAAdgiB,EACTra,EAAOuB,MAAMgE,KAAOlN,EACG,UAAdgiB,EACTra,EAAOqB,OAAShJ,EAAO,KACA,aAAdgiB,GAA0C,YAAdA,EACrCra,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAanG,GAEtC1K,KAAK8T,WAAWzB,EAAQ7Q,EAAMkJ,E,IAKpC+B,MAAMC,KAAK1M,KAAKsT,4BAA4BwmB,EAAQ,UAAUltB,SAASstB,IACrE7nB,EAAOqB,OAASwmB,EAAQruB,YAAc,IAAI,IAG5C7L,KAAKm6B,YAAY9nB,GACjBrS,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAGzBrS,KAAK0P,cACP1P,KAAK+S,yBAAyBpK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,CAIAwxB,YAAY9nB,GACV,MAAM+nB,EAAa/nB,EAAOsB,OAAOxK,QAAQ6K,GAAUA,EAAM/P,OAAS,cAClE,IAAKm2B,EAAWnzB,OACd,OAGF,IAAIozB,EACJ,IAAK,MAAMrmB,KAASomB,EAClB,GAAIp6B,KAAKmP,mBAAmBujB,SAAS1e,EAAMxS,KAAK6L,eAAgB,CAC9DgtB,EAASrmB,EACT3B,EAAOsB,OAAStB,EAAOsB,OAAOxK,QAAQ8J,GAAMA,IAAMonB,IAClD,K,CAICA,IACHA,EAASD,EAAW,IAGtB/nB,EAAOuB,MAAMY,SAAW6lB,EAAO54B,KACjC,EC7HK,MAAM64B,WAA6B,EACxCllB,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,MAAM4Q,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkB5R,KAAKsR,YAAY7P,EAAM8P,KAAM,MAClEc,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMiS,OAC5CrB,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAM8S,UACrDlC,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAM+S,UACrDnC,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAM8P,KAC5CvR,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECtBK,MAAM4xB,WAA8B,EACzCnlB,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,MAAM4Q,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAMqkB,OAC3CzT,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAM+4B,SAC5CnoB,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAMgnB,KAC5CpW,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAMma,UACrDvJ,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAMia,UACrD1b,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECpBK,MAAM8xB,WAA4B,EACvCrlB,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,GAAIA,EAAMwF,OAAS,EACjB,OAGFjH,KAAKiU,cAActL,EAAQ3I,KAAK4R,kBAAkBnQ,EAAMA,EAAMwF,OAAS,KACvE,MAAMoL,EAASrS,KAAKwT,kBACpBnB,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMA,EAAMwF,OAAS,GAAI,IAC/DoL,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAM,GAAI,MAE9B,eAAbA,EAAM,IAAoC,YAAbA,EAAM,IAAiC,mBAAbA,EAAM,IAC/D4Q,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAM,IACrD4Q,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAM,IACrD4Q,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAM,IAC5CzB,KAAK06B,mBAAmBroB,EAAQ,EAAG5Q,IAEnCzB,KAAK06B,mBAAmBroB,EAAQ,EAAG5Q,GAGrCzB,KAAKsU,sBAAsBjC,GAC3BrS,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAGzBrS,KAAK0P,cACP1P,KAAK+S,yBAAyBpK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,CAEQ+xB,mBAAmBroB,EAAoBsoB,EAAoBl5B,GAEjE,IAAK,IAAI4S,EAAIsmB,EAAYtmB,EAAI5S,EAAMwF,OAAS,EAAGoN,IACzCrU,KAAK2Q,mBAAmBlP,EAAM4S,MAGlChC,EAAOqB,OAASjS,EAAM4S,GAAK,KAE/B,ECnDK,MAAMumB,WAAkC,EAC7CxlB,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbiH,EAAM5P,KAAK2P,SAAS7M,GAC1B,GAAW,MAAP8M,EAEF,OADAjH,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GAGzB,MAAMkyB,EAAajrB,EAAIjD,iBAAiB,oCAsDxC,OArDAF,MAAMC,KAAKmuB,GAAYjuB,SAASkuB,IAC9B,MAAMC,EAAYD,EAAUpF,aAAa,MACzC,GAAI11B,KAAK2Q,mBAAmBoqB,GAC1B,OAGF,MAAMC,EAAeF,EAAUpF,aAAa,QACtCuF,EAAeH,EAAUpF,aAAa,YAC5C,IAAIjrB,EAAoB,KACpBywB,EAAmB,KACnBC,EAAoB,KACpBC,EAAkB,KAClBzF,EAAoB,KAExB,MAAM0F,EAAezrB,EAAI9E,cACvB,4EAEEiwB,EACA,MAEJ,GAAoB,MAAhBM,EAAsB,CACxB,MAAMC,EAAUD,EAAaE,cAAcA,cAC5B,MAAXD,IACF7wB,EAAY6wB,EAAQ5F,aAAa,QACjCwF,EAAWI,EAAQ5F,aAAa,QAChC0F,EAAUE,EAAQ5F,aAAa,YAC/ByF,EAAYG,EAAQ5F,aAAa,YAC5B11B,KAAK2Q,mBAAmBwqB,KAC3BA,EAAYA,EAAUrpB,MAAM,MAAM1B,KAAK,O,CAKxCpQ,KAAK2Q,mBAAmByqB,KAC3BzF,EAAY31B,KAAKw7B,eAAe5rB,EAAKwrB,EAAS,IAC9Cp7B,KAAKiU,cAActL,EAAQgtB,IAG7B,MAAMtjB,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnH,EAAW,MAChD4H,EAAOqB,MAAQ1T,KAAK4R,kBAAkBupB,GACtC9oB,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBopB,GAC/C3oB,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBqpB,GAC/C5oB,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAaqqB,GACtCl7B,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAGzBrS,KAAK0P,cACP1P,KAAK+S,yBAAyBpK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,EACzB,CAEA6yB,eAAe5rB,EAAewrB,EAAiBzF,GAC7C,MAAM10B,EAAQ2O,EAAI9E,cAAc,wCAA0CswB,EAAU,MACpF,OAAa,MAATn6B,EACK00B,GAEJ31B,KAAK2Q,mBAAmBglB,KAC3BA,EAAY,IAAMA,GAEpBA,EAAY10B,EAAMy0B,aAAa,QAAUC,EAClC31B,KAAKw7B,eAAe5rB,EAAK3O,EAAMy0B,aAAa,YAAaC,GAClE,ECvEF,MAAM8F,GAAqB,CACzB,OACA,YACA,WACA,WACA,wBACA,gBACA,OACA,oBACA,OACA,QACA,oBAGK,MAAMC,WAA2B,EACtCtmB,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,MAAM4Q,EAASrS,KAAKwT,kBAapB,GAZAnB,EAAOoB,SAAwE,SAA7DzT,KAAK4R,kBAAkBnQ,EAAMgS,SAAU,IAAIpG,cAC7DgF,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAMD,KAAM,MACjD6Q,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMk6B,KAAM,IAClDtpB,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAMmS,OACrDvB,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAM+S,UACrDnC,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAM8P,KAEzB,UAAf9P,EAAMm6B,OACRvpB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAMoC,MAAO,MAClDwO,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMmU,KAAM,KAGjC,OAAfnU,EAAMm6B,MAMR,GALAvpB,EAAOpO,KAAO,SACdoO,EAAOI,KAAO,IAAI,IAClBJ,EAAOI,KAAKuD,eAAiBhW,KAAK4R,kBAAkBnQ,EAAMq3B,YAC1DzmB,EAAOI,KAAKyD,OAASlW,KAAK4R,kBAAkBnQ,EAAMyU,QAClD7D,EAAOI,KAAK6D,MAAQtW,KAAK+R,aAAaM,EAAOI,KAAKyD,SAC7ClW,KAAK2Q,mBAAmBlP,EAAMo6B,YACjC,IACE,MAAM9G,EAAU,IAAI7Y,KAAKza,EAAMo6B,YAC/BxpB,EAAOI,KAAKK,QAAUiiB,EAAQC,cAAc5U,WAC5C/N,EAAOI,KAAKC,UAAYqiB,EAAQlN,WAAa,GAAGzH,U,CAChD,S,OAIC,GAAmB,UAAf3e,EAAMm6B,KAAkB,CACjCvpB,EAAOpO,KAAO,eACdoO,EAAOqC,WAAa,IAAI,IACxBrC,EAAOqC,WAAWzQ,KAAO,aACpBjE,KAAK2Q,mBAAmB0B,EAAOqB,SAClCrB,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAMq6B,iBAAkB,KAEhE,IAAK,MAAM5gB,KAAYzZ,EAEnBA,EAAMoZ,eAAeK,IACrBugB,GAAmBrqB,QAAQ8J,EAAS7N,eAAiB,IACpDrN,KAAK2Q,mBAAmBlP,EAAMyZ,KAE/Blb,KAAK8T,WAAWzB,EAAQ6I,EAAUzZ,EAAMyZ,G,CAK9Clb,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECjFK,MAAMozB,WAAuB,EAClC3mB,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,GAAqB,IAAjBA,EAAMwF,OACR,OAEF,MAAMoL,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAM,GAAI,MAC/C4Q,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAM,IAC5C4Q,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAM,IACrD4Q,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAM,IACrD4Q,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAM,IAC5CzB,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECzBK,MAAMqzB,WAAwB,EACnC5mB,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,MAAM4Q,EAASrS,KAAKwT,kBACpBnB,EAAO7Q,KAAOxB,KAAK4R,kBAAkBnQ,EAAM83B,KAAM,MACjDlnB,EAAOuB,MAAMW,SAAWvU,KAAK4R,kBAAkBnQ,EAAM,cACrD4Q,EAAOuB,MAAMY,SAAWxU,KAAK4R,kBAAkBnQ,EAAMma,UACrDvJ,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aAAapP,EAAMiZ,KAC5C1a,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAG7B1J,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,ECnBK,MAAMszB,WAA6B,EACxC7mB,MAAMtS,GACJ,MAAM6F,EAAS,IAAI,EACbI,EAAU/I,KAAK6P,SAAS/M,GAAM,GACpC,OAAe,MAAXiG,GACFJ,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,KAGzBI,EAAQ6D,SAASnL,IACf,GACEzB,KAAK2Q,mBAAmBlP,EAAM,mBAC9BzB,KAAK2Q,mBAAmBlP,EAAM,gBAE9B,OAEFzB,KAAKiU,cAActL,EAAQ3I,KAAK4R,kBAAkBnQ,EAAMy6B,cACxD,MAAM7pB,EAASrS,KAAKwT,kBACpBnB,EAAOoB,SAA2D,MAAhDzT,KAAK4R,kBAAkBnQ,EAAM8Z,SAAU,KACzDlJ,EAAOqB,MAAQ1T,KAAK4R,kBAAkBnQ,EAAM8e,OAC5ClO,EAAO7Q,KAAOxB,KAAK4R,kBACjBnQ,EAAM,iBACNzB,KAAK4R,kBAAkBnQ,EAAM,eAAgB,OAE/C4Q,EAAOuB,MAAMa,KAAOzU,KAAK6Q,aACvB7Q,KAAK4R,kBAAkBnQ,EAAM,gBAAiBzB,KAAK4R,kBAAkBnQ,EAAM,iBAE7EzB,KAAKm8B,UAAU9pB,EAAQ5Q,EAAM26B,YAC7Bp8B,KAAKm8B,UAAU9pB,EAAQ5Q,EAAM46B,YAC7Br8B,KAAKsU,sBAAsBjC,GAC3BrS,KAAK6T,cAAcxB,GACnB1J,EAAOlC,QAAQI,KAAKwL,EAAO,IAGzBrS,KAAK0P,cACP1P,KAAK+S,yBAAyBpK,GAGhCA,EAAOsG,SAAU,EACV/D,QAAQC,QAAQxC,GACzB,CAEQwzB,UAAU9pB,EAAoBvP,GACpC,GAAI9C,KAAK2Q,mBAAmB7N,GAC1B,OAEgB9C,KAAKmQ,aAAarN,GAC1B8J,SAASie,IACjB,MAAMpT,EAAgBoT,EAAKzZ,QAAQ,KACnC,GAAIqG,EAAgB,EAClB,OAEF,MAAMzD,EAAQ6W,EAAKxZ,UAAU,EAAGoG,GAC1BhW,EAAQopB,EAAK5jB,OAASwQ,EAAgBoT,EAAKxZ,UAAUoG,EAAgB,GAAK,KAChF,GACEzX,KAAK2Q,mBAAmBqD,IACxBhU,KAAK2Q,mBAAmBlP,IACd,eAAVuS,EAEA,OAEF,MAAMsB,EAAatB,EAAM3G,cACI,MAAzBgF,EAAOuB,MAAMW,UAAoBvU,KAAKoP,mBAAmBgC,QAAQkE,IAAe,EAClFjD,EAAOuB,MAAMW,SAAW9S,EAEC,MAAzB4Q,EAAOuB,MAAMY,UACbxU,KAAKmP,mBAAmBiC,QAAQkE,IAAe,EAE/CjD,EAAOuB,MAAMY,SAAW/S,EAExBzB,KAAK8T,WAAWzB,EAAQ2B,EAAOvS,E,GAGrC,EC3EK,MAAMuH,GAAwB,CACnC,CAAEK,GAAI,gBAAiB7H,KAAM,oBAC7B,CAAE6H,GAAI,eAAgB7H,KAAM,mBAC5B,CAAE6H,GAAI,YAAa7H,KAAM,gBACzB,CAAE6H,GAAI,cAAe7H,KAAM,kBAC3B,CAAE6H,GAAI,aAAc7H,KAAM,iBAC1B,CAAE6H,GAAI,cAAe7H,KAAM,mBAC3B,CAAE6H,GAAI,cAAe7H,KAAM,kBAC3B,CAAE6H,GAAI,YAAa7H,KAAM,0BACzB,CAAE6H,GAAI,gBAAiB7H,KAAM,qBAGlB8H,GAAuB,CAClC,CAAED,GAAI,cAAe7H,KAAM,kBAC3B,CAAE6H,GAAI,gBAAiB7H,KAAM,oBAC7B,CAAE6H,GAAI,kBAAmB7H,KAAM,mCAC/B,CAAE6H,GAAI,kBAAmB7H,KAAM,+BAC/B,CAAE6H,GAAI,eAAgB7H,KAAM,mBAC5B,CAAE6H,GAAI,cAAe7H,KAAM,kBAC3B,CAAE6H,GAAI,YAAa7H,KAAM,gBAGzB,CAAE6H,GAAI,YAAa7H,KAAM,gBACzB,CAAE6H,GAAI,aAAc7H,KAAM,iBAC1B,CAAE6H,GAAI,iBAAkB7H,KAAM,qBAC9B,CAAE6H,GAAI,YAAa7H,KAAM,uBACzB,CAAE6H,GAAI,oBAAqB7H,KAAM,yBACjC,CAAE6H,GAAI,aAAc7H,KAAM,iBAC1B,CAAE6H,GAAI,aAAc7H,KAAM,kBAC1B,CAAE6H,GAAI,mBAAoB7H,KAAM,wBAChC,CAAE6H,GAAI,eAAgB7H,KAAM,oBAC5B,CAAE6H,GAAI,cAAe7H,KAAM,kBAC3B,CAAE6H,GAAI,oBAAqB7H,KAAM,yBACjC,CAAE6H,GAAI,aAAc7H,KAAM,iBAC1B,CAAE6H,GAAI,cAAe7H,KAAM,kBAC3B,CAAE6H,GAAI,eAAgB7H,KAAM,mBAC5B,CAAE6H,GAAI,WAAY7H,KAAM,eACxB,CAAE6H,GAAI,eAAgB7H,KAAM,mBAC5B,CAAE6H,GAAI,SAAU7H,KAAM,oCACtB,CAAE6H,GAAI,aAAc7H,KAAM,2BAC1B,CAAE6H,GAAI,aAAc7H,KAAM,iBAC1B,CAAE6H,GAAI,cAAe7H,KAAM,kBAC3B,CAAE6H,GAAI,WAAY7H,KAAM,eACxB,CAAE6H,GAAI,aAAc7H,KAAM,iBAC1B,CAAE6H,GAAI,YAAa7H,KAAM,4CACzB,CAAE6H,GAAI,UAAW7H,KAAM,cACvB,CAAE6H,GAAI,mBAAoB7H,KAAM,wBAChC,CAAE6H,GAAI,cAAe7H,KAAM,kBAC3B,CAAE6H,GAAI,cAAe7H,KAAM,kBAC3B,CAAE6H,GAAI,WAAY7H,KAAM,yBACxB,CAAE6H,GAAI,YAAa7H,KAAM,0BACzB,CAAE6H,GAAI,aAAc7H,KAAM,sBAC1B,CAAE6H,GAAI,eAAgB7H,KAAM,oCAC5B,CAAE6H,GAAI,eAAgB7H,KAAM,mBAC5B,CAAE6H,GAAI,oBAAqB7H,KAAM,wBACjC,CAAE6H,GAAI,UAAW7H,KAAM,cACvB,CAAE6H,GAAI,gBAAiB7H,KAAM,oBAC7B,CAAE6H,GAAI,eAAgB7H,KAAM,mBAC5B,CAAE6H,GAAI,gBAAiB7H,KAAM,oCAC7B,CAAE6H,GAAI,eAAgB7H,KAAM,mBAC5B,CAAE6H,GAAI,cAAe7H,KAAM,kBAC3B,CAAE6H,GAAI,cAAe7H,KAAM,kBAC3B,CAAE6H,GAAI,UAAW7H,KAAM,cACvB,CAAE6H,GAAI,cAAe7H,KAAM,kBAC3B,CAAE6H,GAAI,YAAa7H,KAAM,gBACzB,CAAE6H,GAAI,aAAc7H,KAAM,kB,2SCiBrB,MAAM86B,GAKXp8B,YACUq8B,EACAC,EACAC,EACAr8B,EACAs8B,EACAv8B,GALA,KAAAo8B,cAAAA,EACA,KAAAC,cAAAA,EACA,KAAAC,iBAAAA,EACA,KAAAr8B,YAAAA,EACA,KAAAs8B,kBAAAA,EACA,KAAAv8B,cAAAA,EAVV,KAAA6I,sBAAwBA,GAExB,KAAAM,qBAAuBA,EASpB,CAEHqzB,mBACE,OAAO38B,KAAKgJ,sBAAsBC,OAAOjJ,KAAKsJ,qBAChD,CAEMV,OACJT,EACAM,EACAZ,EAAyB,M,0CAEzB,MAAM+0B,QAAqBz0B,EAASiN,MAAM3M,GAC1C,IAAKm0B,EAAa3tB,QAAS,CACzB,IAAK,uBAAyB2tB,EAAajkB,cACzC,MAAM,IAAIkkB,MAAMD,EAAajkB,cAE/B,MAAM,IAAIkkB,MAAM78B,KAAKI,YAAYoD,EAAE,qB,CAGrC,GAAoC,IAAhCo5B,EAAa51B,QAAQC,QAAgD,IAAhC21B,EAAan2B,QAAQQ,OAC5D,MAAM,IAAI41B,MAAM78B,KAAKI,YAAYoD,EAAE,uBAGrC,GAAIo5B,EAAan2B,QAAQQ,OAAS,EAAG,CACnC,MAAM61B,EAAUC,KAAKC,MAAMJ,EAAan2B,QAAQQ,OAAS,GACnDg2B,EAAOL,EAAan2B,QAAQQ,OAAS,EAE3C,GACEjH,KAAKk9B,QAAQN,EAAan2B,QAAQ,KAClCzG,KAAKk9B,QAAQN,EAAan2B,QAAQq2B,KAClC98B,KAAKk9B,QAAQN,EAAan2B,QAAQw2B,IAElC,MAAM,IAAIJ,MAAM78B,KAAKI,YAAYoD,EAAE,qB,CAIvC,IACwB,MAAlBqE,QACI7H,KAAKm9B,2BAA2BP,EAAc/0B,SAE9C7H,KAAKo9B,uBAAuBR,E,CAEpC,MAAOv5B,GACP,MAAMg6B,EAAgB,IAAI,IAAch6B,EAAO,KAC/C,MAAMrD,KAAKs9B,kBAAkBD,EAAeT,E,CAE9C,OAAOA,CACT,G,CAEAx0B,YACElH,EACAqY,EACA1R,EAAyB,MAEzB,GAAkC,MAA9B0R,EACF,OAAO,KAGT,MAAMpR,EAAWnI,KAAKu9B,oBAAoBr8B,EAAQqY,GAClD,OAAgB,MAAZpR,EACK,MAETA,EAASN,eAAiBA,EACnBM,EACT,CAEQo1B,oBACNr8B,EACAqY,GAEA,GAAc,MAAVrY,EACF,OAAO,KAGT,OAAQA,GACN,IAAK,eACH,OAAO,IAAI+V,EACb,IAAK,gBACL,IAAK,6BACH,OAAO,IAAIqC,EACTtZ,KAAKG,cACLH,KAAKI,YACLmZ,GAEJ,IAAK,cACL,IAAK,cACH,OAAO,IAAI0M,GACb,IAAK,cACH,OAAO,IAAIJ,GACb,IAAK,WACH,OAAO,IAAIrP,EACb,IAAK,UACH,OAAO,IAAI6D,EACb,IAAK,iBACH,OAAO,IAAIuf,GACb,IAAK,aACH,OAAO,IAAI1G,GACb,IAAK,cACH,OAAO,IAAIrO,GACb,IAAK,YACL,IAAK,WACL,IAAK,aACH,OAAO,IAAI9N,EACb,IAAK,aACH,OAAO,IAAIsL,GACb,IAAK,SACH,OAAO,IAAI0Z,GACb,IAAK,eACH,OAAO,IAAIzB,GACb,IAAK,YACH,OAAO,IAAIZ,GACb,IAAK,aACH,OAAO,IAAIpR,GACb,IAAK,gBACH,OAAO,IAAIsC,GACb,IAAK,gBACH,OAAO,IAAI+B,GACb,IAAK,kBACH,OAAO,IAAIoG,GACb,IAAK,kBACH,OAAO,IAAID,GACb,IAAK,YACH,OAAO,IAAI9M,GAGb,IAAK,oBACH,OAAO,IAAIkP,GACb,IAAK,YACH,OAAO,IAAIrU,GACb,IAAK,aACH,OAAO,IAAIO,GACb,IAAK,YACH,OAAO,IAAImU,GACb,IAAK,cACH,OAAO,IAAIhZ,GACb,IAAK,eACH,OAAO,IAAIsC,GACb,IAAK,aACH,OAAO,IAAI6J,GACb,IAAK,oBACH,OAAO,IAAIkS,GACb,IAAK,aACH,OAAO,IAAIc,GACb,IAAK,eACH,OAAO,IAAI5gB,EACb,IAAK,cACH,OAAO,IAAIue,GACb,IAAK,aACH,OAAO,IAAIlkB,EACb,IAAK,mBACH,OAAO,IAAIwf,GACb,IAAK,eACH,OAAO,IAAIsH,GACb,IAAK,cACH,OAAO,IAAIxB,GACb,IAAK,cACH,OAAO,IAAInH,GACb,IAAK,YACH,OAAO,IAAIrQ,GACb,IAAK,mBACH,OAAO,IAAIuR,GACb,IAAK,cACH,OAAO,IAAIR,GACb,IAAK,cACH,OAAO,IAAIL,GACb,IAAK,WACH,OAAO,IAAIpe,EACb,IAAK,YACH,OAAO,IAAIE,EACb,IAAK,aACH,OAAO,IAAI8M,GACb,IAAK,eACH,OAAO,IAAIoB,GACb,IAAK,eACH,OAAO,IAAIiV,GACb,IAAK,oBACH,OAAO,IAAIhD,GACb,IAAK,UACH,OAAO,IAAI1M,GACb,IAAK,gBACH,OAAO,IAAIqR,GACb,IAAK,eACH,OAAO,IAAIlS,GACb,IAAK,gBACH,OAAO,IAAI1R,EACb,IAAK,eACH,OAAO,IAAI8D,EACb,IAAK,cACH,OAAO,IAAIY,EACb,IAAK,cACH,OAAO,IAAIgF,GACb,IAAK,UACH,OAAO,IAAI2b,GACb,IAAK,cACH,OAAO,IAAI/R,GACb,IAAK,YACH,OAAO,IAAI4L,GACb,IAAK,aACH,OAAO,IAAIrC,GACb,QACE,OAAO,KAEb,CAEc4J,uBAAuBR,G,0CACnC,MAAMtuB,EAAU,IAAIM,EACpB,IAAK,IAAIyF,EAAI,EAAGA,EAAIuoB,EAAan2B,QAAQQ,OAAQoN,IAAK,CACpD,MAAM1N,QAAU3G,KAAKu8B,cAAciB,QAAQZ,EAAan2B,QAAQ4N,IAChE/F,EAAQ7H,QAAQI,KAAK,IAAI,IAAcF,G,CAEzC,GAA4B,MAAxBi2B,EAAa51B,QACf,IAAK,IAAIqN,EAAI,EAAGA,EAAIuoB,EAAa51B,QAAQC,OAAQoN,IAAK,CACpD,MAAMpB,QAAUjT,KAAKw8B,cAAcgB,QAAQZ,EAAa51B,QAAQqN,IAChE/F,EAAQtH,QAAQH,KAAK,IAAI,IAAoBoM,G,CAQjD,OALwC,MAApC2pB,EAAa/tB,qBACf+tB,EAAa/tB,oBAAoBjC,SAASoG,GACxC1E,EAAQO,oBAAoBhI,KAAK,IAAImI,EAAWgE,EAAE,GAAIA,EAAE,aAG/ChT,KAAKy8B,iBAAiBpuB,kBAAkBC,EACvD,G,CAEc6uB,2BAA2BP,EAA4B/0B,G,0CACnE,MAAMyG,EAAU,IAAIQ,EACpB,IAAK,IAAIuF,EAAI,EAAGA,EAAIuoB,EAAan2B,QAAQQ,OAAQoN,IAAK,CACpDuoB,EAAan2B,QAAQ4N,GAAGxM,eAAiBA,EACzC,MAAMlB,QAAU3G,KAAKu8B,cAAciB,QAAQZ,EAAan2B,QAAQ4N,IAChE/F,EAAQ7H,QAAQI,KAAK,IAAI,IAAcF,G,CAEzC,GAAgC,MAA5Bi2B,EAAa11B,YACf,IAAK,IAAImN,EAAI,EAAGA,EAAIuoB,EAAa11B,YAAYD,OAAQoN,IAAK,CACxDuoB,EAAa11B,YAAYmN,GAAGxM,eAAiBA,EAC7C,MAAMlB,QAAU3G,KAAK08B,kBAAkBc,QAAQZ,EAAa11B,YAAYmN,IACxE/F,EAAQpH,YAAYL,KAAK,IAAI6H,EAAwB/H,G,CAQzD,OAL4C,MAAxCi2B,EAAa7tB,yBACf6tB,EAAa7tB,wBAAwBnC,SAASoG,GAC5C1E,EAAQS,wBAAwBlI,KAAK,IAAImI,EAAWgE,EAAE,GAAIA,EAAE,aAGnDhT,KAAKy8B,iBAAiBjuB,8BAA8B3G,EAAgByG,EACnF,G,CAEQ4uB,QAAQv2B,GACd,OACa,MAAVA,EAAEnF,MAA2B,OAAXmF,EAAEnF,OACrBmF,EAAE1C,OAAS,WACA,MAAX0C,EAAEiN,OACF,uBAAyBjN,EAAEiN,MAAMY,SAErC,CAEQ8oB,kBAAkBD,EAA8BT,GACtD,GAAsC,MAAlCS,EAAcI,iBAChB,OAAO,IAAIZ,MAAMQ,EAAc15B,SAGjC,IAAIgV,EAAe,GAmCnB,OAjCA1I,OAAOiiB,QAAQmL,EAAcI,kBAAkB7wB,SAAQ,EAAE9I,EAAKrC,GAAQi8B,KACpE,IAAI/e,EACAgf,EACJ,MAAMtpB,EAAIqT,OAAO5jB,EAAImN,MAAM,UAAU,IAErC,OAAQnN,EAAImN,MAAM,QAAQ,IACxB,IAAK,UACH0N,EAAOie,EAAan2B,QAAQ4N,GAC5BspB,EAAW,IAAWhf,EAAK1a,MAC3B,MACF,IAAK,UACH0a,EAAOie,EAAa51B,QAAQqN,GAC5BspB,EAAW,SACX,MACF,IAAK,cACHhf,EAAOie,EAAa11B,YAAYmN,GAChCspB,EAAW,aACX,MACF,QACE,OAGAD,EAAQ,IACV/kB,GAAgB,QAGD,WAAbglB,GAAsC,eAAbA,IAC3BhlB,GAAgB,KAAOtE,EAAI,GAAK,MAGlCsE,GAAgB,IAAMglB,EAAW,MAAQhf,EAAKnd,KAAO,MAAQC,CAAK,IAG7D,IAAIo7B,MAAMlkB,EACnB,E","sources":["webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/import-success-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/import-success-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/file-password-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/file-password-prompt.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/directives/box-row.directive.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export-scope-callout.component.html","webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export-scope-callout.component.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import-api.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import-api.service.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/common/src/admin-console/models/request/collection-with-id.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-organization-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/kvp.request.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-result.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/base-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/ascendo-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avast/avast-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avast/avast-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avira-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/blackberry-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/chrome-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-password-protected-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/blur-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/buttercup-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/clipperz-html-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/codebook-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/dashlane/dashlane-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/dashlane/dashlane-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/encryptr-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/enpass/enpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/enpass/enpass-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/firefox-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/fsecure/fsecure-fsk-types.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/fsecure/fsecure-fsk-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/gnome-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/kaspersky-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keepass2-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keepassx-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keeper/keeper-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/logmeonce-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/meldium-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/msecure-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/myki-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/nordpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/types/onepassword-1pux-importer-types.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-1pif-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-1pux-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/cipher-import-context.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-mac-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-win-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/padlock-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passkeep-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passky/passky-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passman-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passpack-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordagent-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordboss-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passworddragon-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordsafe-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordwallet-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/psono/psono-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/remembear-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/roboform-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/safari-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/safeincloud-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/saferpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/securesafe-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/splashid-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/stickypassword-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/truekey-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/upm-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/yoti-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/zohovault-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-options.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import.service.ts"],"sourcesContent":["import { Directive, EventEmitter, OnDestroy, OnInit, Output } from \"@angular/core\";\nimport { UntypedFormBuilder, Validators } from \"@angular/forms\";\nimport { merge, startWith, Subject, takeUntil } from \"rxjs\";\n\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { EncryptedExportType, EventType } from \"@bitwarden/common/enums\";\nimport { VaultExportServiceAbstraction } from \"@bitwarden/exporter/vault-export\";\n\nimport { DialogServiceAbstraction, SimpleDialogType } from \"../../../services/dialog\";\n\n@Directive()\nexport class ExportComponent implements OnInit, OnDestroy {\n  @Output() onSaved = new EventEmitter();\n\n  formPromise: Promise<string>;\n  private _disabledByPolicy = false;\n\n  protected get disabledByPolicy(): boolean {\n    return this._disabledByPolicy;\n  }\n\n  exportForm = this.formBuilder.group({\n    format: [\"json\"],\n    secret: [\"\"],\n    filePassword: [\"\", Validators.required],\n    confirmFilePassword: [\"\", Validators.required],\n    fileEncryptionType: [EncryptedExportType.AccountEncrypted],\n  });\n\n  formatOptions = [\n    { name: \".json\", value: \"json\" },\n    { name: \".csv\", value: \"csv\" },\n    { name: \".json (Encrypted)\", value: \"encrypted_json\" },\n  ];\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected exportService: VaultExportServiceAbstraction,\n    protected eventCollectionService: EventCollectionService,\n    private policyService: PolicyService,\n    protected win: Window,\n    private logService: LogService,\n    private userVerificationService: UserVerificationService,\n    private formBuilder: UntypedFormBuilder,\n    protected fileDownloadService: FileDownloadService,\n    protected dialogService: DialogServiceAbstraction\n  ) {}\n\n  async ngOnInit() {\n    this.policyService\n      .policyAppliesToActiveUser$(PolicyType.DisablePersonalVaultExport)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((policyAppliesToActiveUser) => {\n        this._disabledByPolicy = policyAppliesToActiveUser;\n        if (this.disabledByPolicy) {\n          this.exportForm.disable();\n        }\n      });\n\n    merge(\n      this.exportForm.get(\"format\").valueChanges,\n      this.exportForm.get(\"fileEncryptionType\").valueChanges\n    )\n      .pipe(takeUntil(this.destroy$))\n      .pipe(startWith(0))\n      .subscribe(() => this.adjustValidators());\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n  }\n\n  get encryptedFormat() {\n    return this.format === \"encrypted_json\";\n  }\n\n  protected async doExport() {\n    try {\n      this.formPromise = this.getExportData();\n      const data = await this.formPromise;\n      this.downloadFile(data);\n      this.saved();\n      await this.collectEvent();\n      this.exportForm.get(\"secret\").setValue(\"\");\n      this.exportForm.clearValidators();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async submit() {\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const acceptedWarning = await this.warningDialog();\n    if (!acceptedWarning) {\n      return;\n    }\n    const secret = this.exportForm.get(\"secret\").value;\n\n    try {\n      await this.userVerificationService.verifyUser(secret);\n    } catch (e) {\n      this.platformUtilsService.showToast(\"error\", this.i18nService.t(\"errorOccurred\"), e.message);\n      return;\n    }\n\n    this.doExport();\n  }\n\n  async warningDialog() {\n    if (this.encryptedFormat) {\n      return await this.dialogService.openSimpleDialog({\n        title: { key: \"confirmVaultExport\" },\n        content:\n          this.i18nService.t(\"encExportKeyWarningDesc\") +\n          \" \" +\n          this.i18nService.t(\"encExportAccountWarningDesc\"),\n        acceptButtonText: { key: \"exportVault\" },\n        type: SimpleDialogType.WARNING,\n      });\n    } else {\n      return await this.dialogService.openSimpleDialog({\n        title: { key: \"confirmVaultExport\" },\n        content: { key: \"exportWarningDesc\" },\n        acceptButtonText: { key: \"exportVault\" },\n        type: SimpleDialogType.WARNING,\n      });\n    }\n  }\n\n  protected saved() {\n    this.onSaved.emit();\n  }\n\n  protected getExportData() {\n    if (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    ) {\n      return this.exportService.getPasswordProtectedExport(this.filePassword);\n    } else {\n      return this.exportService.getExport(this.format, null);\n    }\n  }\n\n  protected getFileName(prefix?: string) {\n    let extension = this.format;\n    if (this.format === \"encrypted_json\") {\n      if (prefix == null) {\n        prefix = \"encrypted\";\n      } else {\n        prefix = \"encrypted_\" + prefix;\n      }\n      extension = \"json\";\n    }\n    return this.exportService.getFileName(prefix, extension);\n  }\n\n  protected async collectEvent(): Promise<void> {\n    await this.eventCollectionService.collect(EventType.User_ClientExportedVault);\n  }\n\n  get format() {\n    return this.exportForm.get(\"format\").value;\n  }\n\n  get filePassword() {\n    return this.exportForm.get(\"filePassword\").value;\n  }\n\n  get confirmFilePassword() {\n    return this.exportForm.get(\"confirmFilePassword\").value;\n  }\n\n  get fileEncryptionType() {\n    return this.exportForm.get(\"fileEncryptionType\").value;\n  }\n\n  adjustValidators() {\n    this.exportForm.get(\"confirmFilePassword\").reset();\n    this.exportForm.get(\"filePassword\").reset();\n\n    if (this.encryptedFormat && this.fileEncryptionType == EncryptedExportType.FileEncrypted) {\n      this.exportForm.controls.filePassword.enable();\n      this.exportForm.controls.confirmFilePassword.enable();\n    } else {\n      this.exportForm.controls.filePassword.disable();\n      this.exportForm.controls.confirmFilePassword.disable();\n    }\n  }\n\n  private downloadFile(csv: string): void {\n    const fileName = this.getFileName();\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: csv,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable tailwindcss/no-custom-classname -->\n<form\n  #form\n  (ngSubmit)=\"submit()\"\n  [appApiAction]=\"formPromise\"\n  [formGroup]=\"exportForm\"\n  *ngIf=\"exportForm\"\n>\n  <div class=\"page-header\">\n    <h1>{{ \"exportVault\" | i18n }}</h1>\n  </div>\n\n  <app-callout type=\"error\" title=\"{{ 'vaultExportDisabled' | i18n }}\" *ngIf=\"disabledByPolicy\">\n    {{ \"personalVaultExportPolicyInEffect\" | i18n }}\n  </app-callout>\n  <app-export-scope-callout\n    [organizationId]=\"organizationId\"\n    *ngIf=\"!disabledByPolicy\"\n  ></app-export-scope-callout>\n\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <bit-form-field>\n        <bit-label class=\"tw-text-lg\" for=\"format\">{{ \"fileFormat\" | i18n }}</bit-label>\n        <select bitInput name=\"format\" formControlName=\"format\">\n          <option *ngFor=\"let f of formatOptions\" [value]=\"f.value\">{{ f.name }}</option>\n        </select>\n      </bit-form-field>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"form-group col-6\">\n      <ng-container *ngIf=\"format === 'encrypted_json'\">\n        <div role=\"radiogroup\" aria-labelledby=\"exportTypeHeading\">\n          <label id=\"exportTypeHeading\" class=\"tw-semi-bold tw-text-lg\">\n            {{ \"exportTypeHeading\" | i18n }}\n          </label>\n\n          <div appBoxRow name=\"FileTypeOptions\" class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"AccountEncrypted\"\n                [value]=\"encryptedExportType.AccountEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.AccountEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"AccountEncrypted\">\n                {{ \"accountRestricted\" | i18n }}\n              </label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 pb-2 tw-text-sm\">\n            {{ \"accountRestrictedOptionDescription\" | i18n }}\n          </div>\n\n          <div class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"FileEncrypted\"\n                [value]=\"encryptedExportType.FileEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.FileEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"FileEncrypted\">{{\n                \"passwordProtected\" | i18n\n              }}</label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 tw-text-sm\">\n            {{ \"passwordProtectedOptionDescription\" | i18n }}\n          </div>\n        </div>\n        <br />\n\n        <ng-container *ngIf=\"fileEncryptionType == encryptedExportType.FileEncrypted\">\n          <bit-form-field>\n            <bit-label>{{ \"filePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"filePassword\"\n              formControlName=\"filePassword\"\n              name=\"password\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n            <bit-hint>{{ \"exportPasswordDescription\" | i18n }}</bit-hint>\n          </bit-form-field>\n          <bit-form-field>\n            <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"confirmFilePassword\"\n              formControlName=\"confirmFilePassword\"\n              name=\"confirmFilePassword\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n          </bit-form-field>\n        </ng-container>\n      </ng-container>\n\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary btn-submit\"\n        [disabled]=\"form.loading || disabledByPolicy\"\n        [ngClass]=\"{ manual: disabledByPolicy }\"\n      >\n        <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n        <span>{{ \"confirmFormat\" | i18n }}</span>\n      </button>\n    </div>\n  </div>\n</form>\n","import { Component } from \"@angular/core\";\nimport { UntypedFormBuilder } from \"@angular/forms\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { ExportComponent as BaseExportComponent } from \"@bitwarden/angular/tools/export/components/export.component\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { EncryptedExportType } from \"@bitwarden/common/enums\";\nimport { VaultExportServiceAbstraction } from \"@bitwarden/exporter/vault-export\";\n\nimport { UserVerificationPromptComponent } from \"../../shared/components/user-verification\";\n\n@Component({\n  selector: \"app-export\",\n  templateUrl: \"export.component.html\",\n})\nexport class ExportComponent extends BaseExportComponent {\n  organizationId: string;\n  encryptedExportType = EncryptedExportType;\n  protected showFilePassword: boolean;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    platformUtilsService: PlatformUtilsService,\n    exportService: VaultExportServiceAbstraction,\n    eventCollectionService: EventCollectionService,\n    policyService: PolicyService,\n    logService: LogService,\n    userVerificationService: UserVerificationService,\n    formBuilder: UntypedFormBuilder,\n    fileDownloadService: FileDownloadService,\n    private modalService: ModalService,\n    dialogService: DialogServiceAbstraction\n  ) {\n    super(\n      cryptoService,\n      i18nService,\n      platformUtilsService,\n      exportService,\n      eventCollectionService,\n      policyService,\n      window,\n      logService,\n      userVerificationService,\n      formBuilder,\n      fileDownloadService,\n      dialogService\n    );\n  }\n\n  async submit() {\n    if (this.isFileEncryptedExport && this.filePassword != this.confirmFilePassword) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"filePasswordAndConfirmFilePasswordDoNotMatch\")\n      );\n      return;\n    }\n\n    this.exportForm.markAllAsTouched();\n    if (!this.exportForm.valid) {\n      return;\n    }\n\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    this.doExport();\n  }\n\n  protected saved() {\n    super.saved();\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"exportSuccess\"));\n  }\n\n  private verifyUser() {\n    let confirmDescription = \"exportWarningDesc\";\n    if (this.isFileEncryptedExport) {\n      confirmDescription = \"fileEncryptedExportWarningDesc\";\n    } else if (this.isAccountEncryptedExport) {\n      confirmDescription = \"encExportKeyWarningDesc\";\n    }\n\n    const ref = this.modalService.open(UserVerificationPromptComponent, {\n      allowMultipleModals: true,\n      data: {\n        confirmDescription: confirmDescription,\n        confirmButtonText: \"exportVault\",\n        modalTitle: \"confirmVaultExport\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return ref.onClosedPromise();\n  }\n\n  get isFileEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    );\n  }\n\n  get isAccountEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.AccountEncrypted\n    );\n  }\n}\n","<bit-dialog>\n  <span bitDialogTitle>\n    {{ \"importSuccess\" | i18n }}\n  </span>\n\n  <div bitDialogContent>\n    <span>{{ \"importSuccessNumberOfItems\" | i18n : this.data.ciphers.length }}</span>\n    <bit-table [dataSource]=\"dataSource\">\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"type\" | i18n }}</th>\n          <th bitCell>{{ \"total\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body let-rows$>\n        <tr bitRow *ngFor=\"let r of rows$ | async\">\n          <td bitCell>\n            <i class=\"bwi bwi-fw bwi-{{ r.icon }}\" aria-hidden=\"true\"></i>\n            {{ r.type | i18n }}\n          </td>\n          <td bitCell>{{ r.count }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </div>\n\n  <ng-container bitDialogFooter>\n    <button bitButton bitDialogClose buttonType=\"primary\" type=\"button\">\n      {{ \"ok\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { TableDataSource } from \"@bitwarden/components\";\nimport { ImportResult } from \"@bitwarden/importer\";\n\nexport interface ResultList {\n  icon: string;\n  type: string;\n  count: number;\n}\n\n@Component({\n  templateUrl: \"./import-success-dialog.component.html\",\n})\nexport class ImportSuccessDialogComponent implements OnInit {\n  protected dataSource = new TableDataSource<ResultList>();\n\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) public data: ImportResult) {}\n\n  ngOnInit(): void {\n    if (this.data != null) {\n      this.dataSource.data = this.buildResultList();\n    }\n  }\n\n  private buildResultList(): ResultList[] {\n    let logins = 0;\n    let cards = 0;\n    let identities = 0;\n    let secureNotes = 0;\n    this.data.ciphers.map((c) => {\n      switch (c.type) {\n        case CipherType.Login:\n          logins++;\n          break;\n        case CipherType.Card:\n          cards++;\n          break;\n        case CipherType.SecureNote:\n          secureNotes++;\n          break;\n        case CipherType.Identity:\n          identities++;\n          break;\n        default:\n          break;\n      }\n    });\n\n    const list: ResultList[] = [];\n    if (logins > 0) {\n      list.push({ icon: \"globe\", type: \"typeLogin\", count: logins });\n    }\n    if (cards > 0) {\n      list.push({ icon: \"credit-card\", type: \"typeCard\", count: cards });\n    }\n    if (identities > 0) {\n      list.push({ icon: \"id-card\", type: \"typeIdentity\", count: identities });\n    }\n    if (secureNotes > 0) {\n      list.push({ icon: \"sticky-note\", type: \"typeSecureNote\", count: secureNotes });\n    }\n    if (this.data.folders.length > 0) {\n      list.push({ icon: \"folder\", type: \"folders\", count: this.data.folders.length });\n    }\n    if (this.data.collections.length > 0) {\n      list.push({\n        icon: \"collection\",\n        type: \"collections\",\n        count: this.data.collections.length,\n      });\n    }\n    return list;\n  }\n}\n","import { Component } from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\n\nimport { ModalRef } from \"@bitwarden/angular/components/modal/modal.ref\";\n\n@Component({\n  templateUrl: \"file-password-prompt.component.html\",\n})\nexport class FilePasswordPromptComponent {\n  filePassword = new FormControl(\"\", Validators.required);\n\n  constructor(private modalRef: ModalRef) {}\n\n  submit() {\n    this.filePassword.markAsTouched();\n    if (!this.filePassword.valid) {\n      return;\n    }\n\n    this.modalRef.close(this.filePassword.value);\n  }\n\n  cancel() {\n    this.modalRef.close(null);\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable tailwindcss/no-custom-classname -->\n<div\n  class=\"modal fade\"\n  role=\"dialog\"\n  aria-modal=\"true\"\n  [attr.aria-labelledby]=\"'confirmVaultImport' | i18n\"\n>\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form #form (ngSubmit)=\"submit()\">\n      <div class=\"form-group modal-content\">\n        <h2 class=\"tw-my-6 tw-ml-3.5 tw-font-semibold\" id=\"confirmVaultImport\">\n          {{ \"confirmVaultImport\" | i18n | uppercase }}\n        </h2>\n        <div\n          class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-px-3.5 tw-pt-3.5\"\n        >\n          {{ \"confirmVaultImportDesc\" | i18n }}\n          <bit-form-field class=\"tw-pt-3.5\">\n            <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              name=\"filePassword\"\n              [formControl]=\"filePassword\"\n              appAutofocus\n              appInputVerbatim\n            />\n            <button type=\"button\" bitSuffix bitIconButton bitPasswordInputToggle></button>\n          </bit-form-field>\n        </div>\n        <div\n          class=\"tw-flex tw-w-full tw-flex-wrap tw-items-center tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-px-3.5 tw-pb-3.5 tw-pt-4\"\n        >\n          <button bitButton buttonType=\"primary\" class=\"tw-mr-2\" type=\"submit\" appBlurClick>\n            <span>{{ \"importData\" | i18n }}</span>\n          </button>\n          <button bitButton buttonType=\"secondary\" type=\"button\" (click)=\"cancel()\">\n            <span>{{ \"cancel\" | i18n }}</span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n","<div class=\"page-header\">\n  <h1>{{ \"importData\" | i18n }}</h1>\n</div>\n<app-callout type=\"info\" *ngIf=\"importBlockedByPolicy\">\n  {{ \"personalOwnershipPolicyInEffectImports\" | i18n }}\n</app-callout>\n<form #form (ngSubmit)=\"submit()\" ngNativeValidate>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"form-group\">\n        <label for=\"type\">1. {{ \"selectFormat\" | i18n }}</label>\n        <select\n          id=\"type\"\n          name=\"Format\"\n          [(ngModel)]=\"format\"\n          class=\"form-control\"\n          [disabled]=\"importBlockedByPolicy\"\n          required\n        >\n          <option *ngFor=\"let o of featuredImportOptions\" [ngValue]=\"o.id\">{{ o.name }}</option>\n          <ng-container *ngIf=\"importOptions && importOptions.length\">\n            <option value=\"-\" disabled></option>\n            <option *ngFor=\"let o of importOptions\" [ngValue]=\"o.id\">{{ o.name }}</option>\n          </ng-container>\n        </select>\n      </div>\n    </div>\n  </div>\n  <app-callout type=\"info\" title=\"{{ getFormatInstructionTitle() }}\" *ngIf=\"format\">\n    <ng-container *ngIf=\"format === 'bitwardencsv' || format === 'bitwardenjson'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/export-your-data/\">\n        https://bitwarden.com/help/export-your-data/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'lastpasscsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-lastpass/\">\n        https://bitwarden.com/help/import-from-lastpass/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepassxcsv'\">\n      Using the KeePassX desktop application, navigate to \"Database\" &rarr; \"Export to CSV file\" and\n      save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'aviracsv'\">\n      In the Avira web vault, go to \"Settings\" &rarr; \"My Data\" &rarr; \"Export data\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blurcsv'\">\n      In the Blur web vault, click your username at the top and go to \"Settings\" &rarr; \"Export\n      Data\", then click \"Export CSV\" for your \"Accounts\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safeincloudxml'\">\n      Using the SaveInCloud desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As XML\"\n      and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'padlockcsv'\">\n      Using the Padlock desktop application, click the hamburger icon in the top left corner and\n      navigate to \"Settings\" &rarr; \"Export\" button and save the file \"As CSV\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepass2xml'\">\n      Using the KeePass 2 desktop application, navigate to \"File\" &rarr; \"Export\" and select the\n      \"KeePass XML (2.x)\" option.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'upmcsv'\">\n      Using the Universal Password Manager desktop application, navigate to \"Database\" &rarr;\n      \"Export\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'saferpasscsv'\">\n      Using the SaferPass browser extension, click the hamburger icon in the top left corner and\n      navigate to \"Settings\". Click the \"Export accounts\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'meldiumcsv'\">\n      Using the Meldium web vault, navigate to \"Settings\". Locate the \"Export data\" function and\n      click \"Show me my data\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepercsv'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .csv File\" option. Click\n      \"Export\" to save the CSV file.\n    </ng-container>\n    <!--\n    <ng-container *ngIf=\"format === 'keeperjson'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .json File\" option. Click\n      \"Export\" to save the JSON file.\n    </ng-container>\n    -->\n    <ng-container\n      *ngIf=\"format === 'chromecsv' || format === 'operacsv' || format === 'vivaldicsv'\"\n    >\n      <span *ngIf=\"format !== 'chromecsv'\">\n        The process is exactly the same as importing from Google Chrome.\n      </span>\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-chrome/\">\n        https://bitwarden.com/help/import-from-chrome/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'firefoxcsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-firefox/\">\n        https://bitwarden.com/help/import-from-firefox/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safaricsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-safari/\">\n        https://bitwarden.com/help/import-from-safari/</a\n      >.\n    </ng-container>\n    <ng-container\n      *ngIf=\"\n        format === '1password1pux' ||\n        format === '1password1pif' ||\n        format === '1passwordwincsv' ||\n        format === '1passwordmaccsv'\n      \"\n    >\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-1password/\">\n        https://bitwarden.com/help/import-from-1password/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passworddragonxml'\">\n      Using the Password Dragon desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"To\n      XML\". In the dialog that pops up select \"All Rows\" and check all fields. Click the \"Export\"\n      button and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpasscsv'\">\n      Using the Enpass desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As CSV\".\n      Select \"OK\" to the warning alert and save the CSV file. Note that the importer only supports\n      files exported while Enpass is set to the English language, so adjust your settings\n      accordingly.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpassjson'\">\n      Using the Enpass 6 desktop application, click the menu button and navigate to \"File\" &rarr;\n      \"Export\". Select the \".json\" file format option and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'pwsafexml'\">\n      Using the Password Safe desktop application, navigate to \"File\" &rarr; \"Export To\" &rarr; \"XML\n      format...\" and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanecsv'\">\n      Log in to Dashlane, click on \"My Account\" &rarr; \"Settings\" &rarr; \"Export file\" and select\n      \"Export as a CSV file\". This will download a zip archive containing various CSV files. Unzip\n      the archive and import each CSV file individually.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanejson'\">\n      Dashlane no longer supports the JSON format. Only use this if you have an existing JSON for\n      import. Use the CSV importer when creating new exports.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'msecurecsv'\">\n      Using the mSecure desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"CSV File...\"\n      and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'stickypasswordxml'\">\n      Using the Sticky Password desktop application, navigate to \"Menu\" (top right) &rarr; \"Export\"\n      &rarr; \"Export all\". Select the unencrypted format XML option and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'truekeycsv'\">\n      Using the True Key desktop application, click the gear icon (top right) and then navigate to\n      \"App Settings\". Click the \"Export\" button, enter your password and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'clipperzhtml'\">\n      Log into the Clipperz web application (clipperz.is/app). Click the hamburger menu icon in the\n      top right to expand the navigation bar. Navigate to \"Data\" &rarr; \"Export\". Click the\n      \"download HTML+JSON\" button to save the HTML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'roboformcsv'\">\n      Using the RoboForm Editor desktop application, navigate to \"RoboForm\" (top left) &rarr;\n      \"Options\" &rarr; \"Account &amp; Data\" and click the \"Export\" button. Select all of your data,\n      change the \"Format\" to \"CSV file\" and then click the \"Export\" button to save the CSV file.\n      Note: RoboForm only allows you to export Logins. Other items will not be exported.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passboltcsv'\">\n      Log into the Passbolt web vault and navigate to the \"Passwords\" listing. Select all of the\n      passwords you would like to export and click the \"Export\" button at the top of the listing.\n      Choose the \"csv (lastpass)\" export format and click the \"Export\" button.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'ascendocsv'\">\n      Using the Ascendo DataVault desktop application, navigate to \"Tools\" &rarr; \"Export\". In the\n      dialog that pops up, select the \"All Items (DVX, CSV)\" option. Click the \"Ok\" button to save\n      the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordbossjson'\">\n      Using the Password Boss desktop application, navigate to \"File\" &rarr; \"Export data\" &rarr;\n      \"Password Boss JSON - not encrypted\" and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'zohovaultcsv'\">\n      Log into the Zoho web vault (vault.zoho.com). Navigate to \"Tools\" &rarr; \"Export Secrets\".\n      Select \"All Secrets\" and click the \"Zoho Vault Format CSV\" button. Highlight and copy the data\n      from the textarea. Open a text editor like Notepad and paste the data. Save the data from the\n      text editor as\n      <code>zoho_export.csv</code>.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'splashidcsv'\">\n      Using the SplashID Safe desktop application, click on the SplashID blue lock logo in the top\n      right corner. Navigate to \"Export\" &rarr; \"Export as CSV\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkeepcsv'\">\n      Using the PassKeep mobile app, navigate to \"Backup/Restore\". Locate the \"CSV Backup/Restore\"\n      section and click \"Backup to CSV\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'gnomejson'\">\n      Make sure you have python-keyring and python-gnomekeyring installed. Save the\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bit.ly/2GpOMTg\"\n        >GNOME Keyring Import/Export</a\n      >\n      python script to your desktop as <code>pw_helper.py</code>. Open terminal and run\n      <code>chmod +rx Desktop/pw_helper.py</code> and then\n      <code>python Desktop/pw_helper.py export Desktop/my_passwords.json</code>. Then upload the\n      resulting <code>my_passwords.json</code> file here to Bitwarden.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordagentcsv'\">\n      Using the Password Agent desktop application navigate to \"File\" &rarr; \"Export\", select the\n      \"Fields to export\" button and check all of the fields, change the \"Output format\" to \"CSV\",\n      and then click the \"Start\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passpackcsv'\">\n      Log into the Passpack website vault and navigate to \"Settings\" &rarr; \"Export\", then click the\n      \"Download\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passmanjson'\">\n      Open your Passman vault and click on \"Settings\" in the bottom left corner. In the \"Settings\"\n      window switch to the \"Export credentials\" tab and choose \"JSON\" as the export type. Enter your\n      vault's passphrase and click the \"Export\" button to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastcsv'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to CSV file\" option to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastjson'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to JSON file\" option to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'fsecurefsk'\">\n      Open the F-Secure KEY desktop application and navigate to \"Settings\" &rarr; \"Export\n      Passwords\". Select the \"Export\" button, enter your master password, and save the FSK file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'kasperskytxt'\">\n      Open the Kaspersky Password Manager desktop application and navigate to \"Settings\" &rarr;\n      \"Import/Export\". Locate the \"Export to text file\" section and select the \"Export\" button to\n      save the TXT file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'remembearcsv'\">\n      Open the RememBear desktop application and navigate to \"Settings\" &rarr; \"Account\" &rarr;\n      \"Export\". Enter your master password and select the \"Export Anyway\" button to save the CSV\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordwallettxt'\">\n      Open the PasswordWallet desktop application and navigate to \"File\" &rarr; \"Export\" &rarr;\n      \"Visible entries to text file\". Enter your password and select the \"Ok\" button to save the TXT\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'mykicsv'\">\n      Open the Myki desktop browser extension and navigate to \"Advanced\" &rarr; \"Export Accounts\"\n      and then scan the QR code with your mobile device. Various CSV files will then be saved to\n      your computer's downloads folder.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'securesafecsv'\">\n      Export your SecureSafe password safe to a CSV file with a comma delimiter.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'logmeoncecsv'\">\n      Open the LogMeOnce browser extension, then navigate to \"Open Menu\" &rarr; \"Export To\" and\n      select \"CSV File\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blackberrycsv'\">\n      Open the BlackBerry Password Keeper application, then navigate to \"Settings\" &rarr;\n      \"Import/Export\". Select \"Export Passwords\" and follow the instructions on screen to save the\n      unencrypted CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'buttercupcsv'\">\n      Open the Buttercup desktop application and unlock your vault. Right click on your vault's icon\n      and select \"Export\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'codebookcsv'\">\n      Open the Codebook desktop application and log in. Navigate to \"File\" &rarr; \"Export all\", then\n      click \"Yes\" on the dialog and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'encryptrcsv'\">\n      Open the newest version of the Encryptr desktop application and allow all of your data to\n      sync. Once syncing of your data is complete, the download icon in the top right corner will\n      turn pink. Click the download icon and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'yoticsv'\">\n      From the Yoti browser extension, click on \"Settings\", then \"Export Saved Logins\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'psonojson'\">\n      Log in to the Psono web vault, click on the \"Signed in as\"-dropdown, select \"Others\". Go to\n      the \"Export\"-tab and select the json type export and then click on Export.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkyjson'\">\n      Log in to \"https://vault.passky.org\" &rarr; \"Import & Export\" &rarr; \"Export\" in the Passky\n      section. (\"Backup\" is unsupported as it is encrypted).\n    </ng-container>\n  </app-callout>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"form-group\">\n        <label for=\"file\">2. {{ \"selectImportFile\" | i18n }}</label>\n        <br />\n        <div class=\"file-selector\">\n          <button\n            type=\"button\"\n            class=\"btn btn-outline-primary\"\n            (click)=\"fileSelector.click()\"\n            [disabled]=\"importBlockedByPolicy\"\n          >\n            {{ \"chooseFile\" | i18n }}\n          </button>\n          {{ this.fileSelected ? this.fileSelected.name : (\"noFileChosen\" | i18n) }}\n        </div>\n        <input\n          #fileSelector\n          type=\"file\"\n          id=\"file\"\n          class=\"form-control-file\"\n          name=\"file\"\n          (change)=\"setSelectedFile($event)\"\n          hidden\n          [disabled]=\"importBlockedByPolicy\"\n        />\n      </div>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"fileContents\">{{ \"orCopyPasteFileContents\" | i18n }}</label>\n    <textarea\n      id=\"fileContents\"\n      class=\"form-control\"\n      name=\"FileContents\"\n      [(ngModel)]=\"fileContents\"\n      [disabled]=\"importBlockedByPolicy\"\n    ></textarea>\n  </div>\n  <button\n    type=\"submit\"\n    class=\"btn btn-primary btn-submit\"\n    [disabled]=\"loading || importBlockedByPolicy\"\n    [ngClass]=\"{ manual: importBlockedByPolicy }\"\n  >\n    <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n    <span>{{ \"importData\" | i18n }}</span>\n  </button>\n</form>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport * as JSZip from \"jszip\";\nimport { Subject } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport Swal, { SweetAlertIcon } from \"sweetalert2\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport {\n  ImportOption,\n  ImportResult,\n  ImportServiceAbstraction,\n  ImportType,\n} from \"@bitwarden/importer\";\n\nimport { FilePasswordPromptComponent, ImportSuccessDialogComponent } from \"./dialog\";\n\n@Component({\n  selector: \"app-import\",\n  templateUrl: \"import.component.html\",\n})\nexport class ImportComponent implements OnInit, OnDestroy {\n  featuredImportOptions: ImportOption[];\n  importOptions: ImportOption[];\n  format: ImportType = null;\n  fileContents: string;\n  fileSelected: File;\n  loading = false;\n\n  protected organizationId: string = null;\n  protected destroy$ = new Subject<void>();\n\n  private _importBlockedByPolicy = false;\n\n  constructor(\n    protected i18nService: I18nService,\n    protected importService: ImportServiceAbstraction,\n    protected router: Router,\n    protected platformUtilsService: PlatformUtilsService,\n    protected policyService: PolicyService,\n    private logService: LogService,\n    protected modalService: ModalService,\n    protected syncService: SyncService,\n    protected dialogService: DialogServiceAbstraction\n  ) {}\n\n  protected get importBlockedByPolicy(): boolean {\n    return this._importBlockedByPolicy;\n  }\n\n  /**\n   * Callback that is called after a successful import.\n   */\n  protected async onSuccessfulImport(): Promise<void> {\n    await this.router.navigate([\"vault\"]);\n  }\n\n  ngOnInit() {\n    this.setImportOptions();\n\n    this.policyService\n      .policyAppliesToActiveUser$(PolicyType.PersonalOwnership)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((policyAppliesToActiveUser) => {\n        this._importBlockedByPolicy = policyAppliesToActiveUser;\n      });\n  }\n\n  async submit() {\n    if (this.importBlockedByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalOwnershipPolicyInEffectImports\")\n      );\n      return;\n    }\n\n    this.loading = true;\n\n    const promptForPassword_callback = async () => {\n      return await this.getFilePassword();\n    };\n\n    const importer = this.importService.getImporter(\n      this.format,\n      promptForPassword_callback,\n      this.organizationId\n    );\n    if (importer === null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFormat\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    const fileEl = document.getElementById(\"file\") as HTMLInputElement;\n    const files = fileEl.files;\n    if (\n      (files == null || files.length === 0) &&\n      (this.fileContents == null || this.fileContents === \"\")\n    ) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    let fileContents = this.fileContents;\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    try {\n      const result = await this.importService.import(importer, fileContents, this.organizationId);\n\n      //No errors, display success message\n      this.dialogService.open<unknown, ImportResult>(ImportSuccessDialogComponent, {\n        data: result,\n      });\n\n      this.syncService.fullSync(true);\n      await this.onSuccessfulImport();\n    } catch (e) {\n      this.error(e);\n      this.logService.error(e);\n    }\n\n    this.loading = false;\n  }\n\n  getFormatInstructionTitle() {\n    if (this.format == null) {\n      return null;\n    }\n\n    const results = this.featuredImportOptions\n      .concat(this.importOptions)\n      .filter((o) => o.id === this.format);\n    if (results.length > 0) {\n      return this.i18nService.t(\"instructionsFor\", results[0].name);\n    }\n    return null;\n  }\n\n  protected setImportOptions() {\n    this.featuredImportOptions = [\n      {\n        id: null,\n        name: \"-- \" + this.i18nService.t(\"select\") + \" --\",\n      },\n      ...this.importService.featuredImportOptions,\n    ];\n    this.importOptions = [...this.importService.regularImportOptions].sort((a, b) => {\n      if (a.name == null && b.name != null) {\n        return -1;\n      }\n      if (a.name != null && b.name == null) {\n        return 1;\n      }\n      if (a.name == null && b.name == null) {\n        return 0;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(a.name, b.name)\n        : a.name.localeCompare(b.name);\n    });\n  }\n\n  setSelectedFile(event: Event) {\n    const fileInputEl = <HTMLInputElement>event.target;\n    this.fileSelected = fileInputEl.files.length > 0 ? fileInputEl.files[0] : null;\n  }\n\n  private async error(error: Error) {\n    await Swal.fire({\n      heightAuto: false,\n      buttonsStyling: false,\n      icon: \"error\" as SweetAlertIcon,\n      iconHtml: `<i class=\"swal-custom-icon bwi bwi-error text-danger\"></i>`,\n      input: \"textarea\",\n      inputValue: error.message,\n      inputAttributes: {\n        readonly: \"true\",\n      },\n      titleText: this.i18nService.t(\"importError\"),\n      text: this.i18nService.t(\"importErrorDesc\"),\n      showConfirmButton: true,\n      confirmButtonText: this.i18nService.t(\"ok\"),\n      onOpen: (popupEl) => {\n        popupEl.querySelector(\".swal2-textarea\").scrollTo(0, 0);\n      },\n    });\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    if (this.format === \"1password1pux\") {\n      return this.extract1PuxContent(file);\n    }\n\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        if (this.format === \"lastpasscsv\" && file.type === \"text/html\") {\n          const parser = new DOMParser();\n          const doc = parser.parseFromString((evt.target as any).result, \"text/html\");\n          const pre = doc.querySelector(\"pre\");\n          if (pre != null) {\n            resolve(pre.textContent);\n            return;\n          }\n          reject();\n          return;\n        }\n\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private extract1PuxContent(file: File): Promise<string> {\n    return new JSZip()\n      .loadAsync(file)\n      .then((zip) => {\n        return zip.file(\"export.data\").async(\"string\");\n      })\n      .then(\n        function success(content) {\n          return content;\n        },\n        function error(e) {\n          return \"\";\n        }\n      );\n  }\n\n  async getFilePassword(): Promise<string> {\n    const ref = this.modalService.open(FilePasswordPromptComponent, {\n      allowMultipleModals: true,\n    });\n\n    if (ref == null) {\n      return null;\n    }\n\n    return await ref.onClosedPromise();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from \"@angular/core\";\n\n@Directive({\n  selector: \"[appBoxRow]\",\n})\nexport class BoxRowDirective implements OnInit {\n  el: HTMLElement = null;\n  formEls: Element[];\n\n  constructor(elRef: ElementRef) {\n    this.el = elRef.nativeElement;\n  }\n\n  ngOnInit(): void {\n    this.formEls = Array.from(\n      this.el.querySelectorAll('input:not([type=\"hidden\"]), select, textarea')\n    );\n    this.formEls.forEach((formEl) => {\n      formEl.addEventListener(\n        \"focus\",\n        () => {\n          this.el.classList.add(\"active\");\n        },\n        false\n      );\n\n      formEl.addEventListener(\n        \"blur\",\n        () => {\n          this.el.classList.remove(\"active\");\n        },\n        false\n      );\n    });\n  }\n\n  @HostListener(\"click\", [\"$event\"]) onClick(event: Event) {\n    const target = event.target as HTMLElement;\n    if (\n      target !== this.el &&\n      !target.classList.contains(\"progress\") &&\n      !target.classList.contains(\"progress-bar\")\n    ) {\n      return;\n    }\n\n    if (this.formEls.length > 0) {\n      const formEl = this.formEls[0] as HTMLElement;\n      if (formEl.tagName.toLowerCase() === \"input\") {\n        const inputEl = formEl as HTMLInputElement;\n        if (inputEl.type != null && inputEl.type.toLowerCase() === \"checkbox\") {\n          inputEl.click();\n          return;\n        }\n      }\n      formEl.focus();\n    }\n  }\n}\n","<ng-container *ngIf=\"show\">\n  <app-callout type=\"info\" title=\"{{ scopeConfig.title | i18n }}\">\n    {{ scopeConfig.description | i18n : scopeConfig.scopeIdentifier }}\n  </app-callout>\n</ng-container>\n","import { Component, Input, OnInit } from \"@angular/core\";\n\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\n\n@Component({\n  selector: \"app-export-scope-callout\",\n  templateUrl: \"export-scope-callout.component.html\",\n})\nexport class ExportScopeCalloutComponent implements OnInit {\n  @Input() organizationId: string = null;\n\n  show = false;\n  scopeConfig: {\n    title: string;\n    description: string;\n    scopeIdentifier: string;\n  };\n\n  constructor(\n    protected organizationService: OrganizationService,\n    protected stateService: StateService\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    if (!this.organizationService.hasOrganizations()) {\n      return;\n    }\n    this.scopeConfig =\n      this.organizationId != null\n        ? {\n            title: \"exportingOrganizationVaultTitle\",\n            description: \"exportingOrganizationVaultDescription\",\n            scopeIdentifier: this.organizationService.get(this.organizationId).name,\n          }\n        : {\n            title: \"exportingPersonalVaultTitle\",\n            description: \"exportingPersonalVaultDescription\",\n            scopeIdentifier: await this.stateService.getEmail(),\n          };\n    this.show = true;\n  }\n}\n","import { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nexport abstract class ImportApiServiceAbstraction {\n  postImportCiphers: (request: ImportCiphersRequest) => Promise<any>;\n  postImportOrganizationCiphers: (\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ) => Promise<any>;\n}\n","import { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nimport { ImportApiServiceAbstraction } from \"./import-api.service.abstraction\";\n\nexport class ImportApiService implements ImportApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  async postImportCiphers(request: ImportCiphersRequest): Promise<any> {\n    return await this.apiService.send(\"POST\", \"/ciphers/import\", request, true, false);\n  }\n\n  async postImportOrganizationCiphers(\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ): Promise<any> {\n    return await this.apiService.send(\n      \"POST\",\n      \"/ciphers/import-organization?organizationId=\" + organizationId,\n      request,\n      true,\n      false\n    );\n  }\n}\n","import { Importer } from \"../importers/importer\";\nimport { ImportOption, ImportType } from \"../models/import-options\";\nimport { ImportResult } from \"../models/import-result\";\n\nexport abstract class ImportServiceAbstraction {\n  featuredImportOptions: readonly ImportOption[];\n  regularImportOptions: readonly ImportOption[];\n  getImportOptions: () => ImportOption[];\n  import: (\n    importer: Importer,\n    fileContents: string,\n    organizationId?: string\n  ) => Promise<ImportResult>;\n  getImporter: (\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>,\n    organizationId: string\n  ) => Importer;\n}\n","import { Collection } from \"../domain/collection\";\nimport { CollectionRequest } from \"../request/collection.request\";\n\nexport class CollectionWithIdRequest extends CollectionRequest {\n  id: string;\n\n  constructor(collection?: Collection) {\n    if (collection == null) {\n      return;\n    }\n    super(collection);\n    this.id = collection.id;\n  }\n}\n","import { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { FolderWithIdRequest } from \"../../vault/models/request/folder-with-id.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  folders: FolderWithIdRequest[] = [];\n  folderRelationships: KvpRequest<number, number>[] = [];\n}\n","import { CollectionWithIdRequest } from \"../../admin-console/models/request/collection-with-id.request\";\nimport { CipherRequest } from \"../../vault/models/request/cipher.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportOrganizationCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  collections: CollectionWithIdRequest[] = [];\n  collectionRelationships: KvpRequest<number, number>[] = [];\n}\n","export class KvpRequest<TK, TV> {\n  key: TK;\n  value: TV;\n\n  constructor(key: TK, value: TV) {\n    this.key = key;\n    this.value = value;\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nexport class ImportResult {\n  success = false;\n  errorMessage: string;\n  ciphers: CipherView[] = [];\n  folders: FolderView[] = [];\n  folderRelationships: [number, number][] = [];\n  collections: CollectionView[] = [];\n  collectionRelationships: [number, number][] = [];\n}\n","import * as papa from \"papaparse\";\n\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\nimport { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { ConsoleLogService } from \"@bitwarden/common/services/consoleLog.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { LoginUriView } from \"@bitwarden/common/vault/models/view/login-uri.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nexport abstract class BaseImporter {\n  organizationId: string = null;\n\n  protected logService: LogService = new ConsoleLogService(false);\n\n  protected newLineRegex = /(?:\\r\\n|\\r|\\n)/;\n\n  protected passwordFieldNames = [\n    \"password\",\n    \"pass word\",\n    \"passphrase\",\n    \"pass phrase\",\n    \"pass\",\n    \"code\",\n    \"code word\",\n    \"codeword\",\n    \"secret\",\n    \"secret word\",\n    \"personpwd\",\n    \"key\",\n    \"keyword\",\n    \"key word\",\n    \"keyphrase\",\n    \"key phrase\",\n    \"form_pw\",\n    \"wppassword\",\n    \"pin\",\n    \"pwd\",\n    \"pw\",\n    \"pword\",\n    \"passwd\",\n    \"p\",\n    \"serial\",\n    \"serial#\",\n    \"license key\",\n    \"reg #\",\n\n    // Non-English names\n    \"passwort\",\n  ];\n\n  protected usernameFieldNames = [\n    \"user\",\n    \"name\",\n    \"user name\",\n    \"username\",\n    \"login name\",\n    \"email\",\n    \"e-mail\",\n    \"id\",\n    \"userid\",\n    \"user id\",\n    \"login\",\n    \"form_loginname\",\n    \"wpname\",\n    \"mail\",\n    \"loginid\",\n    \"login id\",\n    \"log\",\n    \"personlogin\",\n    \"first name\",\n    \"last name\",\n    \"card#\",\n    \"account #\",\n    \"member\",\n    \"member #\",\n\n    // Non-English names\n    \"nom\",\n    \"benutzername\",\n  ];\n\n  protected notesFieldNames = [\n    \"note\",\n    \"notes\",\n    \"comment\",\n    \"comments\",\n    \"memo\",\n    \"description\",\n    \"free form\",\n    \"freeform\",\n    \"free text\",\n    \"freetext\",\n    \"free\",\n\n    // Non-English names\n    \"kommentar\",\n  ];\n\n  protected uriFieldNames: string[] = [\n    \"url\",\n    \"hyper link\",\n    \"hyperlink\",\n    \"link\",\n    \"host\",\n    \"hostname\",\n    \"host name\",\n    \"server\",\n    \"address\",\n    \"hyper ref\",\n    \"href\",\n    \"web\",\n    \"website\",\n    \"web site\",\n    \"site\",\n    \"web-site\",\n    \"uri\",\n\n    // Non-English names\n    \"ort\",\n    \"adresse\",\n  ];\n\n  protected parseCsvOptions = {\n    encoding: \"UTF-8\",\n    skipEmptyLines: false,\n  };\n\n  protected get organization() {\n    return this.organizationId != null;\n  }\n\n  protected parseXml(data: string): Document {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(data, \"application/xml\");\n    return doc != null && doc.querySelector(\"parsererror\") == null ? doc : null;\n  }\n\n  protected parseCsv(data: string, header: boolean, options: any = {}): any[] {\n    const parseOptions: papa.ParseConfig<string> = Object.assign(\n      { header: header },\n      this.parseCsvOptions,\n      options\n    );\n    data = this.splitNewLine(data).join(\"\\n\").trim();\n    const result = papa.parse(data, parseOptions);\n    if (result.errors != null && result.errors.length > 0) {\n      result.errors.forEach((e) => {\n        if (e.row != null) {\n          this.logService.warning(\"Error parsing row \" + e.row + \": \" + e.message);\n        }\n      });\n    }\n    return result.data && result.data.length > 0 ? result.data : null;\n  }\n\n  protected parseSingleRowCsv(rowData: string) {\n    if (this.isNullOrWhitespace(rowData)) {\n      return null;\n    }\n    const parsedRow = this.parseCsv(rowData, false);\n    if (parsedRow != null && parsedRow.length > 0 && parsedRow[0].length > 0) {\n      return parsedRow[0];\n    }\n    return null;\n  }\n\n  protected makeUriArray(uri: string | string[]): LoginUriView[] {\n    if (uri == null) {\n      return null;\n    }\n\n    if (typeof uri === \"string\") {\n      const loginUri = new LoginUriView();\n      loginUri.uri = this.fixUri(uri);\n      if (this.isNullOrWhitespace(loginUri.uri)) {\n        return null;\n      }\n      loginUri.match = null;\n      return [loginUri];\n    }\n\n    if (uri.length > 0) {\n      const returnArr: LoginUriView[] = [];\n      uri.forEach((u) => {\n        const loginUri = new LoginUriView();\n        loginUri.uri = this.fixUri(u);\n        if (this.isNullOrWhitespace(loginUri.uri)) {\n          return;\n        }\n        loginUri.match = null;\n        returnArr.push(loginUri);\n      });\n      return returnArr.length === 0 ? null : returnArr;\n    }\n\n    return null;\n  }\n\n  protected fixUri(uri: string) {\n    if (uri == null) {\n      return null;\n    }\n    uri = uri.trim();\n    if (uri.indexOf(\"://\") === -1 && uri.indexOf(\".\") >= 0) {\n      uri = \"http://\" + uri;\n    }\n    if (uri.length > 1000) {\n      return uri.substring(0, 1000);\n    }\n    return uri;\n  }\n\n  protected nameFromUrl(url: string) {\n    const hostname = Utils.getHostname(url);\n    if (this.isNullOrWhitespace(hostname)) {\n      return null;\n    }\n    return hostname.startsWith(\"www.\") ? hostname.replace(\"www.\", \"\") : hostname;\n  }\n\n  protected isNullOrWhitespace(str: string): boolean {\n    return Utils.isNullOrWhitespace(str);\n  }\n\n  protected getValueOrDefault(str: string, defaultValue: string = null): string {\n    if (this.isNullOrWhitespace(str)) {\n      return defaultValue;\n    }\n    return str;\n  }\n\n  protected splitNewLine(str: string): string[] {\n    return str.split(this.newLineRegex);\n  }\n\n  // ref https://stackoverflow.com/a/5911300\n  protected getCardBrand(cardNum: string) {\n    if (this.isNullOrWhitespace(cardNum)) {\n      return null;\n    }\n\n    // Visa\n    let re = new RegExp(\"^4\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    // Mastercard\n    // Updated for Mastercard 2017 BINs expansion\n    if (\n      /^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$/.test(\n        cardNum\n      )\n    ) {\n      return \"Mastercard\";\n    }\n\n    // AMEX\n    re = new RegExp(\"^3[47]\");\n    if (cardNum.match(re) != null) {\n      return \"Amex\";\n    }\n\n    // Discover\n    re = new RegExp(\n      \"^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)\"\n    );\n    if (cardNum.match(re) != null) {\n      return \"Discover\";\n    }\n\n    // Diners\n    re = new RegExp(\"^36\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // Diners - Carte Blanche\n    re = new RegExp(\"^30[0-5]\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // JCB\n    re = new RegExp(\"^35(2[89]|[3-8][0-9])\");\n    if (cardNum.match(re) != null) {\n      return \"JCB\";\n    }\n\n    // Visa Electron\n    re = new RegExp(\"^(4026|417500|4508|4844|491(3|7))\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    return null;\n  }\n\n  protected setCardExpiration(cipher: CipherView, expiration: string): boolean {\n    if (this.isNullOrWhitespace(expiration)) {\n      return false;\n    }\n\n    expiration = expiration.replace(/\\s/g, \"\");\n\n    const monthRegex = \"0?(?<month>[1-9]|1[0-2])\";\n    const yearRegex = \"(?<year>(?:[1-2][0-9])?[0-9]{2})\";\n    const expiryRegex = new RegExp(`^${monthRegex}/${yearRegex}$`);\n\n    const expiryMatch = expiration.match(expiryRegex);\n\n    if (!expiryMatch) {\n      return false;\n    }\n\n    cipher.card.expMonth = expiryMatch.groups.month;\n    const year: string = expiryMatch.groups.year;\n    cipher.card.expYear = year.length === 2 ? \"20\" + year : year;\n    return true;\n  }\n\n  protected moveFoldersToCollections(result: ImportResult) {\n    result.folderRelationships.forEach((r) => result.collectionRelationships.push(r));\n    result.collections = result.folders.map((f) => {\n      const collection = new CollectionView();\n      collection.name = f.name;\n      collection.id = f.id;\n      return collection;\n    });\n    result.folderRelationships = [];\n    result.folders = [];\n  }\n\n  protected querySelectorDirectChild(parentEl: Element, query: string) {\n    const els = this.querySelectorAllDirectChild(parentEl, query);\n    return els.length === 0 ? null : els[0];\n  }\n\n  protected querySelectorAllDirectChild(parentEl: Element, query: string) {\n    return Array.from(parentEl.querySelectorAll(query)).filter((el) => el.parentNode === parentEl);\n  }\n\n  protected initLoginCipher() {\n    const cipher = new CipherView();\n    cipher.favorite = false;\n    cipher.notes = \"\";\n    cipher.fields = [];\n    cipher.login = new LoginView();\n    cipher.type = CipherType.Login;\n    return cipher;\n  }\n\n  protected cleanupCipher(cipher: CipherView) {\n    if (cipher == null) {\n      return;\n    }\n    if (cipher.type !== CipherType.Login) {\n      cipher.login = null;\n    }\n    if (this.isNullOrWhitespace(cipher.name)) {\n      cipher.name = \"--\";\n    }\n    if (this.isNullOrWhitespace(cipher.notes)) {\n      cipher.notes = null;\n    } else {\n      cipher.notes = cipher.notes.trim();\n    }\n    if (cipher.fields != null && cipher.fields.length === 0) {\n      cipher.fields = null;\n    }\n  }\n\n  protected processKvp(\n    cipher: CipherView,\n    key: string,\n    value: string,\n    type: FieldType = FieldType.Text\n  ) {\n    if (this.isNullOrWhitespace(value)) {\n      return;\n    }\n    if (this.isNullOrWhitespace(key)) {\n      key = \"\";\n    }\n    if (value.length > 200 || value.trim().search(this.newLineRegex) > -1) {\n      if (cipher.notes == null) {\n        cipher.notes = \"\";\n      }\n      cipher.notes += key + \": \" + this.splitNewLine(value).join(\"\\n\") + \"\\n\";\n    } else {\n      if (cipher.fields == null) {\n        cipher.fields = [];\n      }\n      const field = new FieldView();\n      field.type = type;\n      field.name = key;\n      field.value = value;\n      cipher.fields.push(field);\n    }\n  }\n\n  protected processFolder(result: ImportResult, folderName: string) {\n    if (this.isNullOrWhitespace(folderName)) {\n      return;\n    }\n\n    let folderIndex = result.folders.length;\n    // Replace backslashes with forward slashes, ensuring we create sub-folders\n    folderName = folderName.replace(\"\\\\\", \"/\");\n    let addFolder = true;\n\n    for (let i = 0; i < result.folders.length; i++) {\n      if (result.folders[i].name === folderName) {\n        addFolder = false;\n        folderIndex = i;\n        break;\n      }\n    }\n\n    if (addFolder) {\n      const f = new FolderView();\n      f.name = folderName;\n      result.folders.push(f);\n    }\n\n    result.folderRelationships.push([result.ciphers.length, folderIndex]);\n  }\n\n  protected convertToNoteIfNeeded(cipher: CipherView) {\n    if (\n      cipher.type === CipherType.Login &&\n      this.isNullOrWhitespace(cipher.login.username) &&\n      this.isNullOrWhitespace(cipher.login.password) &&\n      (cipher.login.uris == null || cipher.login.uris.length === 0)\n    ) {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    }\n  }\n\n  protected processFullName(cipher: CipherView, fullName: string) {\n    if (this.isNullOrWhitespace(fullName)) {\n      return;\n    }\n\n    const nameParts = fullName.split(\" \");\n    if (nameParts.length > 0) {\n      cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n    }\n    if (nameParts.length === 2) {\n      cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n    } else if (nameParts.length >= 3) {\n      cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n      cipher.identity.lastName = nameParts.slice(2, nameParts.length).join(\" \");\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AscendoCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 2) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const val: string = value[i + 2];\n          const field: string = value[i + 1];\n          if (this.isNullOrWhitespace(val) || this.isNullOrWhitespace(field)) {\n            continue;\n          }\n\n          const fieldLower = field.toLowerCase();\n          if (cipher.login.password == null && this.passwordFieldNames.indexOf(fieldLower) > -1) {\n            cipher.login.password = this.getValueOrDefault(val);\n          } else if (\n            cipher.login.username == null &&\n            this.usernameFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.username = this.getValueOrDefault(val);\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n          } else {\n            this.processKvp(cipher, field, val);\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.login.uris = this.makeUriArray(value.web);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.username = this.getValueOrDefault(value.login);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.logins != null) {\n      results.logins.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.pwd);\n        cipher.login.username = this.getValueOrDefault(value.loginName);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.notes != null) {\n      results.notes.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.name = this.getValueOrDefault(value.label);\n        cipher.notes = this.getValueOrDefault(value.text);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.cards != null) {\n      results.cards.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Card;\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.card.cardholderName = this.getValueOrDefault(value.holderName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        if (value.expirationDate != null) {\n          if (value.expirationDate.month != null) {\n            cipher.card.expMonth = value.expirationDate.month + \"\";\n          }\n          if (value.expirationDate.year != null) {\n            cipher.card.expYear = value.expirationDate.year + \"\";\n          }\n        }\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AviraCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.name,\n        this.getValueOrDefault(this.nameFromUrl(value.website), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.website);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (\n        this.isNullOrWhitespace(value.username) &&\n        !this.isNullOrWhitespace(value.secondary_username)\n      ) {\n        cipher.login.username = value.secondary_username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.notes = this.getValueOrDefault(value.secondary_username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlackBerryCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.grouping === \"list\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.favorite = value.fav === \"1\";\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.extra);\n      if (value.grouping !== \"note\") {\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ChromeCsvImporter extends BaseImporter implements Importer {\n  private androidPatternRegex = new RegExp(\"^android:\\\\/\\\\/.*(?<=@)(.*)(?=\\\\/)\");\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      let name = value.name;\n      if (!name && this.androidPatternRegex.test(value.url)) {\n        name = value.url.match(this.androidPatternRegex)[1];\n      }\n      cipher.name = this.getValueOrDefault(name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\nimport { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.organization && !this.isNullOrWhitespace(value.collections)) {\n        const collections = (value.collections as string).split(\",\");\n        collections.forEach((col) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === col) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = col;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization) {\n        this.processFolder(result, value.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.favorite =\n        !this.organization && this.getValueOrDefault(value.favorite, \"0\") !== \"0\" ? true : false;\n      cipher.type = CipherType.Login;\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      try {\n        cipher.reprompt = parseInt(\n          this.getValueOrDefault(value.reprompt, CipherRepromptType.None.toString()),\n          10\n        );\n      } catch (e) {\n        // eslint-disable-next-line\n        console.error(\"Unable to parse reprompt value\", e);\n        cipher.reprompt = CipherRepromptType.None;\n      }\n\n      if (!this.isNullOrWhitespace(value.fields)) {\n        const fields = this.splitNewLine(value.fields);\n        for (let i = 0; i < fields.length; i++) {\n          if (this.isNullOrWhitespace(fields[i])) {\n            continue;\n          }\n\n          const delimPosition = fields[i].lastIndexOf(\": \");\n          if (delimPosition === -1) {\n            continue;\n          }\n\n          if (cipher.fields == null) {\n            cipher.fields = [];\n          }\n\n          const field = new FieldView();\n          field.name = fields[i].substr(0, delimPosition);\n          field.value = null;\n          field.type = FieldType.Text;\n          if (fields[i].length > delimPosition + 2) {\n            field.value = fields[i].substr(delimPosition + 2);\n          }\n          cipher.fields.push(field);\n        }\n      }\n\n      const valueType = value.type != null ? value.type.toLowerCase() : null;\n      switch (valueType) {\n        case \"note\":\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote = new SecureNoteView();\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default: {\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.totp = this.getValueOrDefault(value.login_totp || value.totp);\n          cipher.login.username = this.getValueOrDefault(value.login_username || value.username);\n          cipher.login.password = this.getValueOrDefault(value.login_password || value.password);\n          const uris = this.parseSingleRowCsv(value.login_uri || value.uri);\n          cipher.login.uris = this.makeUriArray(uris);\n          break;\n        }\n      }\n\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport {\n  CipherWithIdExport,\n  CollectionWithIdExport,\n  FolderWithIdExport,\n} from \"@bitwarden/common/models/export\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenJsonImporter extends BaseImporter implements Importer {\n  private results: any;\n  private result: ImportResult;\n\n  protected constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService\n  ) {\n    super();\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    this.results = JSON.parse(data);\n    if (this.results == null || this.results.items == null) {\n      this.result.success = false;\n      return this.result;\n    }\n\n    if (this.results.encrypted) {\n      await this.parseEncrypted();\n    } else {\n      this.parseDecrypted();\n    }\n\n    return this.result;\n  }\n\n  private async parseEncrypted() {\n    if (this.results.encKeyValidation_DO_NOT_EDIT != null) {\n      const orgKey = await this.cryptoService.getOrgKey(this.organizationId);\n      const encKeyValidation = new EncString(this.results.encKeyValidation_DO_NOT_EDIT);\n      const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n        encKeyValidation,\n        orgKey\n      );\n      if (encKeyValidationDecrypt === null) {\n        this.result.success = false;\n        this.result.errorMessage = this.i18nService.t(\"importEncKeyError\");\n        return;\n      }\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    if (this.organization && this.results.collections != null) {\n      for (const c of this.results.collections as CollectionWithIdExport[]) {\n        const collection = CollectionWithIdExport.toDomain(c);\n        if (collection != null) {\n          collection.organizationId = this.organizationId;\n          const view = await collection.decrypt();\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(view);\n        }\n      }\n    } else if (!this.organization && this.results.folders != null) {\n      for (const f of this.results.folders as FolderWithIdExport[]) {\n        const folder = FolderWithIdExport.toDomain(f);\n        if (folder != null) {\n          const view = await folder.decrypt();\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(view);\n        }\n      }\n    }\n\n    for (const c of this.results.items as CipherWithIdExport[]) {\n      const cipher = CipherWithIdExport.toDomain(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = this.organizationId;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      const view = await cipher.decrypt();\n      this.cleanupCipher(view);\n      this.result.ciphers.push(view);\n    }\n\n    this.result.success = true;\n  }\n\n  private parseDecrypted() {\n    const groupingsMap = new Map<string, number>();\n    if (this.organization && this.results.collections != null) {\n      this.results.collections.forEach((c: CollectionWithIdExport) => {\n        const collection = CollectionWithIdExport.toView(c);\n        if (collection != null) {\n          collection.organizationId = null;\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(collection);\n        }\n      });\n    } else if (!this.organization && this.results.folders != null) {\n      this.results.folders.forEach((f: FolderWithIdExport) => {\n        const folder = FolderWithIdExport.toView(f);\n        if (folder != null) {\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(folder);\n        }\n      });\n    }\n\n    this.results.items.forEach((c: CipherWithIdExport) => {\n      const cipher = CipherWithIdExport.toView(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = null;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n  }\n}\n","import { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { KdfConfig } from \"@bitwarden/common/auth/models/domain/kdf-config\";\nimport { KdfType } from \"@bitwarden/common/enums\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\nimport { BitwardenPasswordProtectedFileFormat } from \"@bitwarden/exporter/vault-export/bitwarden-password-protected-types\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { Importer } from \"../importer\";\n\nimport { BitwardenJsonImporter } from \"./bitwarden-json-importer\";\nexport class BitwardenPasswordProtectedImporter extends BitwardenJsonImporter implements Importer {\n  private key: SymmetricCryptoKey;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    private promptForPassword_callback: () => Promise<string>\n  ) {\n    super(cryptoService, i18nService);\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const parsedData: BitwardenPasswordProtectedFileFormat = JSON.parse(data);\n\n    if (!parsedData) {\n      result.success = false;\n      return result;\n    }\n\n    // File is unencrypted\n    if (!parsedData?.encrypted) {\n      return await super.parse(data);\n    }\n\n    // File is account-encrypted\n    if (!parsedData?.passwordProtected) {\n      return await super.parse(data);\n    }\n\n    if (this.cannotParseFile(parsedData)) {\n      result.success = false;\n      return result;\n    }\n\n    // File is password-protected\n    const password = await this.promptForPassword_callback();\n    if (!(await this.checkPassword(parsedData, password))) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"invalidFilePassword\");\n      return result;\n    }\n\n    const encData = new EncString(parsedData.data);\n    const clearTextData = await this.cryptoService.decryptToUtf8(encData, this.key);\n    return await super.parse(clearTextData);\n  }\n\n  private async checkPassword(\n    jdoc: BitwardenPasswordProtectedFileFormat,\n    password: string\n  ): Promise<boolean> {\n    this.key = await this.cryptoService.makePinKey(\n      password,\n      jdoc.salt,\n      jdoc.kdfType,\n      new KdfConfig(jdoc.kdfIterations, jdoc.kdfMemory, jdoc.kdfParallelism)\n    );\n\n    const encKeyValidation = new EncString(jdoc.encKeyValidation_DO_NOT_EDIT);\n\n    const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n      encKeyValidation,\n      this.key\n    );\n    if (encKeyValidationDecrypt === null) {\n      return false;\n    }\n    return true;\n  }\n\n  private cannotParseFile(jdoc: BitwardenPasswordProtectedFileFormat): boolean {\n    return (\n      !jdoc ||\n      !jdoc.encrypted ||\n      !jdoc.passwordProtected ||\n      !jdoc.salt ||\n      !jdoc.kdfIterations ||\n      typeof jdoc.kdfIterations !== \"number\" ||\n      jdoc.kdfType == null ||\n      KdfType[jdoc.kdfType] == null ||\n      !jdoc.encKeyValidation_DO_NOT_EDIT ||\n      !jdoc.data\n    );\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlurCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.label === \"null\") {\n        value.label = null;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.label,\n        this.getValueOrDefault(this.nameFromUrl(value.domain), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.domain);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (this.isNullOrWhitespace(value.email) && !this.isNullOrWhitespace(value.username)) {\n        cipher.login.username = value.username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.email);\n        cipher.notes = this.getValueOrDefault(value.username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst OfficialProps = [\"!group_id\", \"!group_name\", \"title\", \"username\", \"password\", \"URL\", \"id\"];\n\nexport class ButtercupCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value[\"!group_name\"]));\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      let processingCustomFields = false;\n      for (const prop in value) {\n        // eslint-disable-next-line\n        if (value.hasOwnProperty(prop)) {\n          if (!processingCustomFields && OfficialProps.indexOf(prop) === -1) {\n            processingCustomFields = true;\n          }\n          if (processingCustomFields) {\n            this.processKvp(cipher, prop, value[prop]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ClipperzHtmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const textarea = doc.querySelector(\"textarea\");\n    if (textarea == null || this.isNullOrWhitespace(textarea.textContent)) {\n      result.errorMessage = \"Missing textarea.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const entries = JSON.parse(textarea.textContent);\n    entries.forEach((entry: any) => {\n      const cipher = this.initLoginCipher();\n      if (!this.isNullOrWhitespace(entry.label)) {\n        cipher.name = entry.label.split(\" \")[0];\n      }\n      if (entry.data != null && !this.isNullOrWhitespace(entry.data.notes)) {\n        cipher.notes = entry.data.notes.split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (entry.currentVersion != null && entry.currentVersion.fields != null) {\n        for (const property in entry.currentVersion.fields) {\n          // eslint-disable-next-line\n          if (!entry.currentVersion.fields.hasOwnProperty(property)) {\n            continue;\n          }\n\n          const field = entry.currentVersion.fields[property];\n          const actionType = field.actionType != null ? field.actionType.toLowerCase() : null;\n          switch (actionType) {\n            case \"password\":\n              cipher.login.password = this.getValueOrDefault(field.value);\n              break;\n            case \"email\":\n            case \"username\":\n            case \"user\":\n            case \"name\":\n              cipher.login.username = this.getValueOrDefault(field.value);\n              break;\n            case \"url\":\n              cipher.login.uris = this.makeUriArray(field.value);\n              break;\n            default: {\n              const labelLower = field.label != null ? field.label.toLowerCase() : null;\n              if (\n                cipher.login.password == null &&\n                this.passwordFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.password = this.getValueOrDefault(field.value);\n              } else if (\n                cipher.login.username == null &&\n                this.usernameFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.username = this.getValueOrDefault(field.value);\n              } else if (\n                (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n                this.uriFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.uris = this.makeUriArray(field.value);\n              } else {\n                this.processKvp(cipher, field.label, field.value);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class CodebookCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value.Category));\n\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite) === \"True\";\n      cipher.name = this.getValueOrDefault(value.Entry, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.login.username = this.getValueOrDefault(value.Username, value.Email);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.totp = this.getValueOrDefault(value.TOTP);\n      cipher.login.uris = this.makeUriArray(value.Website);\n\n      if (!this.isNullOrWhitespace(value.Username)) {\n        this.processKvp(cipher, \"Email\", value.Email);\n      }\n      this.processKvp(cipher, \"Phone\", value.Phone);\n      this.processKvp(cipher, \"PIN\", value.PIN);\n      this.processKvp(cipher, \"Account\", value.Account);\n      this.processKvp(cipher, \"Date\", value.Date);\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CredentialsRecord,\n  IdRecord,\n  PaymentsRecord,\n  PersonalInformationRecord,\n  SecureNoteRecord,\n} from \"./types/dashlane-csv-types\";\n\nconst _mappedCredentialsColumns = new Set([\n  \"title\",\n  \"note\",\n  \"username\",\n  \"password\",\n  \"url\",\n  \"otpSecret\",\n  \"category\",\n]);\n\nconst _mappedPersonalInfoAsIdentityColumns = new Set([\n  \"type\",\n  \"title\",\n  \"first_name\",\n  \"middle_name\",\n  \"last_name\",\n  \"login\",\n  \"email\",\n  \"phone_number\",\n  \"address\",\n  \"country\",\n  \"state\",\n  \"city\",\n  \"zip\",\n  // Skip item_name as we already have set a combined name\n  \"item_name\",\n]);\n\nconst _mappedSecureNoteColumns = new Set([\"title\", \"note\"]);\n\nexport class DashlaneCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results[0].type != null && results[0].title != null) {\n      const personalRecords = results as PersonalInformationRecord[];\n\n      // If personalRecords has only one \"name\" then create an Identity-Cipher\n      if (personalRecords.filter((x) => x.type === \"name\").length === 1) {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        results.forEach((row) => {\n          this.parsePersonalInformationRecordAsIdentity(cipher, row);\n        });\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n        result.success = true;\n        return Promise.resolve(result);\n      }\n    }\n\n    results.forEach((row) => {\n      const cipher = this.initLoginCipher();\n\n      const rowKeys = Object.keys(row);\n      if (rowKeys[0] === \"username\") {\n        this.processFolder(result, row.category);\n        this.parseCredentialsRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"account_name\") {\n        this.parsePaymentRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"number\") {\n        this.parseIdRecord(cipher, row);\n      }\n\n      if ((rowKeys[0] === \"type\") != null && rowKeys[1] === \"title\") {\n        this.parsePersonalInformationRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"title\" && rowKeys[1] === \"note\") {\n        this.parseSecureNoteRecords(cipher, row);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  parseCredentialsRecord(cipher: CipherView, row: CredentialsRecord) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    cipher.name = row.title;\n    cipher.notes = row.note;\n    cipher.login.username = row.username;\n    cipher.login.password = row.password;\n    cipher.login.totp = row.otpSecret;\n    cipher.login.uris = this.makeUriArray(row.url);\n\n    this.importUnmappedFields(cipher, row, _mappedCredentialsColumns);\n  }\n\n  parsePaymentRecord(cipher: CipherView, row: PaymentsRecord) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n\n    cipher.name = row.account_name;\n    let mappedValues: string[] = [];\n    switch (row.type) {\n      case \"credit_card\":\n        cipher.card.cardholderName = row.account_name;\n        cipher.card.number = row.cc_number;\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = row.code;\n        this.setCardExpiration(cipher, `${row.expiration_month}/${row.expiration_year}`);\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\n          \"account_name\",\n          \"account_holder\",\n          \"cc_number\",\n          \"code\",\n          \"expiration_month\",\n          \"expiration_year\",\n        ];\n        break;\n      case \"bank\":\n        cipher.card.cardholderName = row.account_holder;\n        cipher.card.number = row.account_number;\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\"account_name\", \"account_holder\", \"account_number\"];\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parseIdRecord(cipher: CipherView, row: IdRecord) {\n    cipher.type = CipherType.Identity;\n    cipher.identity = new IdentityView();\n\n    const mappedValues: string[] = [\"name\", \"number\"];\n    switch (row.type) {\n      case \"card\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        break;\n      case \"passport\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.passportNumber = row.number;\n        break;\n      case \"license\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        cipher.identity.state = row.state;\n\n        mappedValues.push(\"state\");\n        break;\n      case \"social_security\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.ssn = row.number;\n        break;\n      case \"tax_number\":\n        cipher.name = row.type;\n        cipher.identity.licenseNumber = row.number;\n        break;\n\n      default:\n        break;\n    }\n\n    // If you add more mapped fields please extend this\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parsePersonalInformationRecord(cipher: CipherView, row: PersonalInformationRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    if (row.type === \"name\") {\n      cipher.name = `${row.title} ${row.first_name} ${row.middle_name} ${row.last_name}`\n        .replace(\"  \", \" \")\n        .trim();\n    } else {\n      cipher.name = row.item_name;\n    }\n\n    const dataRow = row as any;\n    Object.keys(row).forEach((key) => {\n      this.processKvp(cipher, key, dataRow[key]);\n    });\n  }\n\n  parsePersonalInformationRecordAsIdentity(cipher: CipherView, row: PersonalInformationRecord) {\n    switch (row.type) {\n      case \"name\":\n        this.processFullName(cipher, `${row.first_name} ${row.middle_name} ${row.last_name}`);\n        cipher.identity.title = row.title;\n        cipher.name = cipher.identity.fullName;\n\n        cipher.identity.username = row.login;\n        break;\n      case \"email\":\n        cipher.identity.email = row.email;\n        break;\n      case \"number\":\n        cipher.identity.phone = row.phone_number;\n        break;\n      case \"address\":\n        cipher.identity.address1 = row.address;\n        cipher.identity.city = row.city;\n        cipher.identity.postalCode = row.zip;\n        cipher.identity.state = row.state;\n        cipher.identity.country = row.country;\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, _mappedPersonalInfoAsIdentityColumns);\n  }\n\n  parseSecureNoteRecords(cipher: CipherView, row: SecureNoteRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = row.title;\n    cipher.notes = row.note;\n\n    this.importUnmappedFields(cipher, row, _mappedSecureNoteColumns);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nconst HandledResults = new Set([\n  \"ADDRESS\",\n  \"AUTHENTIFIANT\",\n  \"BANKSTATEMENT\",\n  \"IDCARD\",\n  \"IDENTITY\",\n  \"PAYMENTMEANS_CREDITCARD\",\n  \"PAYMENTMEAN_PAYPAL\",\n  \"EMAIL\",\n]);\n\nexport class DashlaneJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    if (results.ADDRESS != null) {\n      this.processAddress(results.ADDRESS);\n    }\n    if (results.AUTHENTIFIANT != null) {\n      this.processAuth(results.AUTHENTIFIANT);\n    }\n    if (results.BANKSTATEMENT != null) {\n      this.processNote(results.BANKSTATEMENT, \"BankAccountName\");\n    }\n    if (results.IDCARD != null) {\n      this.processNote(results.IDCARD, \"Fullname\");\n    }\n    if (results.PAYMENTMEANS_CREDITCARD != null) {\n      this.processCard(results.PAYMENTMEANS_CREDITCARD);\n    }\n    if (results.IDENTITY != null) {\n      this.processIdentity(results.IDENTITY);\n    }\n\n    for (const key in results) {\n      // eslint-disable-next-line\n      if (results.hasOwnProperty(key) && !HandledResults.has(key)) {\n        this.processNote(results[key], null, \"Generic Note\");\n      }\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processAuth(results: any[]) {\n    results.forEach((credential: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(credential.title);\n\n      cipher.login.username = this.getValueOrDefault(\n        credential.login,\n        this.getValueOrDefault(credential.secondaryLogin)\n      );\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.domain);\n      cipher.notes += this.getValueOrDefault(credential.note, \"\");\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processIdentity(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.fullName, \"\");\n      const nameParts = cipher.name.split(\" \");\n      if (nameParts.length > 0) {\n        cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n      }\n      if (nameParts.length === 2) {\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n      } else if (nameParts.length === 3) {\n        cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[2]);\n      }\n      cipher.identity.username = this.getValueOrDefault(obj.pseudo);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processAddress(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.addressName);\n      cipher.identity.address1 = this.getValueOrDefault(obj.addressFull);\n      cipher.identity.city = this.getValueOrDefault(obj.city);\n      cipher.identity.state = this.getValueOrDefault(obj.state);\n      cipher.identity.postalCode = this.getValueOrDefault(obj.zipcode);\n      cipher.identity.country = this.getValueOrDefault(obj.country);\n      if (cipher.identity.country != null) {\n        cipher.identity.country = cipher.identity.country.toUpperCase();\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processCard(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.card = new CardView();\n      cipher.type = CipherType.Card;\n      cipher.name = this.getValueOrDefault(obj.bank);\n      cipher.card.number = this.getValueOrDefault(obj.cardNumber);\n      cipher.card.brand = this.getCardBrand(cipher.card.number);\n      cipher.card.cardholderName = this.getValueOrDefault(obj.owner);\n      if (!this.isNullOrWhitespace(cipher.card.brand)) {\n        if (this.isNullOrWhitespace(cipher.name)) {\n          cipher.name = cipher.card.brand;\n        } else {\n          cipher.name += \" - \" + cipher.card.brand;\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processNote(results: any[], nameProperty: string, name: string = null) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.secureNote = new SecureNoteView();\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote.type = SecureNoteType.Generic;\n      if (name != null) {\n        cipher.name = name;\n      } else {\n        cipher.name = this.getValueOrDefault(obj[nameProperty]);\n      }\n      for (const key in obj) {\n        // eslint-disable-next-line\n        if (obj.hasOwnProperty(key) && key !== nameProperty) {\n          this.processKvp(cipher, key, obj[key].toString());\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class EncryptrCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Label, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      const text = this.getValueOrDefault(value.Text);\n      if (!this.isNullOrWhitespace(text)) {\n        if (this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = text;\n        } else {\n          cipher.notes += \"\\n\\n\" + text;\n        }\n      }\n\n      const type = value[\"Entry Type\"];\n      if (type === \"Password\") {\n        cipher.login.username = this.getValueOrDefault(value.Username);\n        cipher.login.password = this.getValueOrDefault(value.Password);\n        cipher.login.uris = this.makeUriArray(value[\"Site URL\"]);\n      } else if (type === \"Credit Card\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value[\"Name on card\"]);\n        cipher.card.number = this.getValueOrDefault(value[\"Card Number\"]);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.CVV);\n        const expiry = this.getValueOrDefault(value.Expiry);\n        if (!this.isNullOrWhitespace(expiry)) {\n          const expParts = expiry.split(\"/\");\n          if (expParts.length > 1) {\n            cipher.card.expMonth = parseInt(expParts[0], null).toString();\n            cipher.card.expYear = (2000 + parseInt(expParts[1], null)).toString();\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class EnpassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let firstRow = true;\n    results.forEach((value) => {\n      if (value.length < 2 || (firstRow && (value[0] === \"Title\" || value[0] === \"title\"))) {\n        firstRow = false;\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (\n        value.length === 2 ||\n        (!this.containsField(value, \"username\") &&\n          !this.containsField(value, \"password\") &&\n          !this.containsField(value, \"email\") &&\n          !this.containsField(value, \"url\"))\n      ) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      }\n\n      if (\n        this.containsField(value, \"cardholder\") &&\n        this.containsField(value, \"number\") &&\n        this.containsField(value, \"expiry date\")\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      }\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const fieldValue: string = value[i + 2];\n          if (this.isNullOrWhitespace(fieldValue)) {\n            continue;\n          }\n\n          const fieldName: string = value[i + 1];\n          const fieldNameLower = fieldName.toLowerCase();\n\n          if (cipher.type === CipherType.Login) {\n            if (\n              fieldNameLower === \"url\" &&\n              (cipher.login.uris == null || cipher.login.uris.length === 0)\n            ) {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              continue;\n            } else if (\n              (fieldNameLower === \"username\" || fieldNameLower === \"email\") &&\n              this.isNullOrWhitespace(cipher.login.username)\n            ) {\n              cipher.login.username = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"password\" &&\n              this.isNullOrWhitespace(cipher.login.password)\n            ) {\n              cipher.login.password = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n              cipher.login.totp = fieldValue;\n              continue;\n            }\n          } else if (cipher.type === CipherType.Card) {\n            if (\n              fieldNameLower === \"cardholder\" &&\n              this.isNullOrWhitespace(cipher.card.cardholderName)\n            ) {\n              cipher.card.cardholderName = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"number\" && this.isNullOrWhitespace(cipher.card.number)) {\n              cipher.card.number = fieldValue;\n              cipher.card.brand = this.getCardBrand(fieldValue);\n              continue;\n            } else if (fieldNameLower === \"cvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n              cipher.card.code = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"expiry date\" &&\n              this.isNullOrWhitespace(cipher.card.expMonth) &&\n              this.isNullOrWhitespace(cipher.card.expYear)\n            ) {\n              if (this.setCardExpiration(cipher, fieldValue)) {\n                continue;\n              }\n            } else if (fieldNameLower === \"type\") {\n              // Skip since brand was determined from number above\n              continue;\n            }\n          }\n\n          this.processKvp(cipher, fieldName, fieldValue);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private containsField(fields: any[], name: string) {\n    if (fields == null || name == null) {\n      return false;\n    }\n    return (\n      fields.filter((f) => !this.isNullOrWhitespace(f) && f.toLowerCase() === name.toLowerCase())\n        .length > 0\n    );\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { EnpassJsonFile, EnpassFolder, EnpassField } from \"./types/enpass-json-type\";\n\ntype EnpassFolderTreeItem = EnpassFolder & { children: EnpassFolderTreeItem[] };\nconst androidUrlRegex = new RegExp(\"androidapp://.*==@\", \"g\");\n\nexport class EnpassJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: EnpassJsonFile = JSON.parse(data);\n    if (results == null || results.items == null || results.items.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    const foldersIndexMap = new Map<string, number>();\n    const folderTree = this.buildFolderTree(results.folders);\n    this.flattenFolderTree(null, folderTree, foldersMap);\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((item) => {\n      if (item.folders != null && item.folders.length > 0 && foldersIndexMap.has(item.folders[0])) {\n        result.folderRelationships.push([\n          result.ciphers.length,\n          foldersIndexMap.get(item.folders[0]),\n        ]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(item.title);\n      cipher.favorite = item.favorite > 0;\n\n      if (item.template_type != null && item.fields != null && item.fields.length > 0) {\n        if (\n          item.template_type.indexOf(\"login.\") === 0 ||\n          item.template_type.indexOf(\"password.\") === 0\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else if (item.template_type.indexOf(\"creditcard.\") === 0) {\n          this.processCard(cipher, item.fields);\n        } else if (\n          item.template_type.indexOf(\"identity.\") < 0 &&\n          item.fields.some((f) => f.type === \"password\" && !this.isNullOrWhitespace(f.value))\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else {\n          this.processNote(cipher, item.fields);\n        }\n      }\n\n      cipher.notes += \"\\n\" + this.getValueOrDefault(item.note, \"\");\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private processLogin(cipher: CipherView, fields: EnpassField[]) {\n    const urls: string[] = [];\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n\n      if (\n        (field.type === \"username\" || field.type === \"email\") &&\n        this.isNullOrWhitespace(cipher.login.username)\n      ) {\n        cipher.login.username = field.value;\n      } else if (field.type === \"password\" && this.isNullOrWhitespace(cipher.login.password)) {\n        cipher.login.password = field.value;\n      } else if (field.type === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n        cipher.login.totp = field.value;\n      } else if (field.type === \"url\") {\n        urls.push(field.value);\n      } else if (field.type === \".Android#\") {\n        let cleanedValue = field.value.startsWith(\"androidapp://\")\n          ? field.value\n          : \"androidapp://\" + field.value;\n        cleanedValue = cleanedValue.replace(\"android://\", \"\");\n        cleanedValue = cleanedValue.replace(androidUrlRegex, \"androidapp://\");\n        urls.push(cleanedValue);\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n    cipher.login.uris = this.makeUriArray(urls);\n  }\n\n  private processCard(cipher: CipherView, fields: EnpassField[]) {\n    cipher.card = new CardView();\n    cipher.type = CipherType.Card;\n    fields.forEach((field) => {\n      if (\n        this.isNullOrWhitespace(field.value) ||\n        field.type === \"section\" ||\n        field.type === \"ccType\"\n      ) {\n        return;\n      }\n\n      if (field.type === \"ccName\" && this.isNullOrWhitespace(cipher.card.cardholderName)) {\n        cipher.card.cardholderName = field.value;\n      } else if (field.type === \"ccNumber\" && this.isNullOrWhitespace(cipher.card.number)) {\n        cipher.card.number = field.value;\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n      } else if (field.type === \"ccCvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n        cipher.card.code = field.value;\n      } else if (field.type === \"ccExpiry\" && this.isNullOrWhitespace(cipher.card.expYear)) {\n        if (!this.setCardExpiration(cipher, field.value)) {\n          this.processKvp(\n            cipher,\n            field.label,\n            field.value,\n            field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n          );\n        }\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n  }\n\n  private processNote(cipher: CipherView, fields: EnpassField[]) {\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n      this.processKvp(\n        cipher,\n        field.label,\n        field.value,\n        field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n      );\n    });\n  }\n\n  private buildFolderTree(folders: EnpassFolder[]): EnpassFolderTreeItem[] {\n    if (folders == null) {\n      return [];\n    }\n    const folderTree: EnpassFolderTreeItem[] = [];\n    const map = new Map<string, EnpassFolderTreeItem>([]);\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      map.set(obj.uuid, obj);\n      obj.children = [];\n    });\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      if (obj.parent_uuid != null && obj.parent_uuid !== \"\" && map.has(obj.parent_uuid)) {\n        map.get(obj.parent_uuid).children.push(obj);\n      } else {\n        folderTree.push(obj);\n      }\n    });\n    return folderTree;\n  }\n\n  private flattenFolderTree(\n    titlePrefix: string,\n    tree: EnpassFolderTreeItem[],\n    map: Map<string, string>\n  ) {\n    if (tree == null) {\n      return;\n    }\n    tree.forEach((f) => {\n      if (f.title != null && f.title.trim() !== \"\") {\n        let title = f.title.trim();\n        if (titlePrefix != null && titlePrefix.trim() !== \"\") {\n          title = titlePrefix + \"/\" + title;\n        }\n        map.set(f.uuid, title);\n        if (f.children != null && f.children.length !== 0) {\n          this.flattenFolderTree(title, f.children, map);\n        }\n      }\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class FirefoxCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results\n      .filter((value) => {\n        return value.url !== \"chrome://FirefoxAccounts\";\n      })\n      .forEach((value) => {\n        const cipher = this.initLoginCipher();\n        const url = this.getValueOrDefault(value.url, this.getValueOrDefault(value.hostname));\n        cipher.name = this.getValueOrDefault(this.nameFromUrl(url), \"--\");\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.uris = this.makeUriArray(url);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export interface FskFile {\n  data: Data;\n}\n\nexport interface Data {\n  [key: string]: FskEntry;\n}\n\nexport enum FskEntryTypesEnum {\n  Login = 1,\n  CreditCard = 2,\n}\n\nexport interface FskEntry {\n  color: string;\n  creditCvv: string;\n  creditExpiry: string;\n  creditNumber: string;\n  favorite: number; // UNIX timestamp\n  notes: string;\n  password: string;\n  passwordList: PasswordList[];\n  passwordModifiedDate: number; // UNIX timestamp\n  rev: string | number;\n  service: string;\n  style: string;\n  type: FskEntryTypesEnum;\n  url: string;\n  username: string;\n  createdDate: number; // UNIX timestamp\n  modifiedDate: number; // UNIX timestamp\n}\n\nexport interface PasswordList {\n  changedate: string;\n  password: string;\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { FskEntry, FskEntryTypesEnum, FskFile } from \"./fsecure-fsk-types\";\n\nexport class FSecureFskImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: FskFile = JSON.parse(data);\n    if (results == null || results.data == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const key in results.data) {\n      // eslint-disable-next-line\n      if (!results.data.hasOwnProperty(key)) {\n        continue;\n      }\n\n      const value = results.data[key];\n      const cipher = this.parseEntry(value);\n      result.ciphers.push(cipher);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseEntry(entry: FskEntry): CipherView {\n    const cipher = this.initLoginCipher();\n    cipher.name = this.getValueOrDefault(entry.service);\n    cipher.notes = this.getValueOrDefault(entry.notes);\n    cipher.favorite = entry.favorite > 0;\n\n    switch (entry.type) {\n      case FskEntryTypesEnum.Login:\n        this.handleLoginEntry(entry, cipher);\n        break;\n      case FskEntryTypesEnum.CreditCard:\n        this.handleCreditCardEntry(entry, cipher);\n        break;\n      default:\n        return;\n        break;\n    }\n\n    this.convertToNoteIfNeeded(cipher);\n    this.cleanupCipher(cipher);\n    return cipher;\n  }\n\n  private handleLoginEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.login.username = this.getValueOrDefault(entry.username);\n    cipher.login.password = this.getValueOrDefault(entry.password);\n    cipher.login.uris = this.makeUriArray(entry.url);\n  }\n\n  private handleCreditCardEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n    cipher.card.cardholderName = this.getValueOrDefault(entry.username);\n    cipher.card.number = this.getValueOrDefault(entry.creditNumber);\n    cipher.card.brand = this.getCardBrand(cipher.card.number);\n    cipher.card.code = this.getValueOrDefault(entry.creditCvv);\n    if (!this.isNullOrWhitespace(entry.creditExpiry)) {\n      if (!this.setCardExpiration(cipher, entry.creditExpiry)) {\n        this.processKvp(cipher, \"Expiration\", entry.creditExpiry);\n      }\n    }\n    if (!this.isNullOrWhitespace(entry.password)) {\n      this.processKvp(cipher, \"PIN\", entry.password);\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class GnomeJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || Object.keys(results).length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const keyRing in results) {\n      if (\n        !results.hasOwnProperty(keyRing) || // eslint-disable-line\n        this.isNullOrWhitespace(keyRing) ||\n        results[keyRing].length === 0\n      ) {\n        continue;\n      }\n\n      results[keyRing].forEach((value: any) => {\n        if (\n          this.isNullOrWhitespace(value.display_name) ||\n          value.display_name.indexOf(\"http\") !== 0\n        ) {\n          return;\n        }\n\n        this.processFolder(result, keyRing);\n        const cipher = this.initLoginCipher();\n        cipher.name = value.display_name.replace(\"http://\", \"\").replace(\"https://\", \"\");\n        if (cipher.name.length > 30) {\n          cipher.name = cipher.name.substring(0, 30);\n        }\n        cipher.login.password = this.getValueOrDefault(value.secret);\n        cipher.login.uris = this.makeUriArray(value.display_name);\n\n        if (value.attributes != null) {\n          cipher.login.username =\n            value.attributes != null\n              ? this.getValueOrDefault(value.attributes.username_value)\n              : null;\n          for (const attr in value.attributes) {\n            if (\n              !value.attributes.hasOwnProperty(attr) || // eslint-disable-line\n              attr === \"username_value\" ||\n              attr === \"xdg:schema\"\n            ) {\n              continue;\n            }\n            this.processKvp(cipher, attr, value.attributes[attr]);\n          }\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst NotesHeader = \"Notes\\n\\n\";\nconst ApplicationsHeader = \"Applications\\n\\n\";\nconst WebsitesHeader = \"Websites\\n\\n\";\nconst Delimiter = \"\\n---\\n\";\n\nexport class KasperskyTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n\n    let notesData: string;\n    let applicationsData: string;\n    let websitesData: string;\n    let workingData = this.splitNewLine(data).join(\"\\n\");\n\n    if (workingData.indexOf(NotesHeader) !== -1) {\n      const parts = workingData.split(NotesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        notesData = parts[1];\n      }\n    }\n    if (workingData.indexOf(ApplicationsHeader) !== -1) {\n      const parts = workingData.split(ApplicationsHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        applicationsData = parts[1];\n      }\n    }\n    if (workingData.indexOf(WebsitesHeader) === 0) {\n      const parts = workingData.split(WebsitesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        websitesData = parts[1];\n      }\n    }\n\n    const notes = this.parseDataCategory(notesData);\n    const applications = this.parseDataCategory(applicationsData);\n    const websites = this.parseDataCategory(websitesData);\n\n    notes.forEach((n) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(n.get(\"Name\"));\n      cipher.notes = this.getValueOrDefault(n.get(\"Text\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    websites.concat(applications).forEach((w) => {\n      const cipher = this.initLoginCipher();\n      const nameKey = w.has(\"Website name\") ? \"Website name\" : \"Application\";\n      cipher.name = this.getValueOrDefault(w.get(nameKey), \"\");\n      if (!this.isNullOrWhitespace(w.get(\"Login name\"))) {\n        if (!this.isNullOrWhitespace(cipher.name)) {\n          cipher.name += \": \";\n        }\n        cipher.name += w.get(\"Login name\");\n      }\n      cipher.notes = this.getValueOrDefault(w.get(\"Comment\"));\n      if (w.has(\"Website URL\")) {\n        cipher.login.uris = this.makeUriArray(w.get(\"Website URL\"));\n      }\n      cipher.login.username = this.getValueOrDefault(w.get(\"Login\"));\n      cipher.login.password = this.getValueOrDefault(w.get(\"Password\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseDataCategory(data: string): Map<string, string>[] {\n    if (this.isNullOrWhitespace(data) || data.indexOf(Delimiter) === -1) {\n      return [];\n    }\n    const items: Map<string, string>[] = [];\n    data.split(Delimiter).forEach((p) => {\n      if (p.indexOf(\"\\n\") === -1) {\n        return;\n      }\n      const item = new Map<string, string>();\n      let itemComment: string;\n      let itemCommentKey: string;\n      p.split(\"\\n\").forEach((l) => {\n        if (itemComment != null) {\n          itemComment += \"\\n\" + l;\n          return;\n        }\n        const colonIndex = l.indexOf(\":\");\n        let key: string;\n        let val: string;\n        if (colonIndex === -1) {\n          return;\n        } else {\n          key = l.substring(0, colonIndex);\n          if (l.length > colonIndex + 1) {\n            val = l.substring(colonIndex + 2);\n          }\n        }\n        if (key != null) {\n          item.set(key, val);\n        }\n        if (key === \"Comment\" || key === \"Text\") {\n          itemComment = val;\n          itemCommentKey = key;\n        }\n      });\n      if (itemComment != null && itemCommentKey != null) {\n        item.set(itemCommentKey, itemComment);\n      }\n      if (item.size === 0) {\n        return;\n      }\n      items.push(item);\n    });\n    return items;\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePass2XmlImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    //Note: The doc.querySelector(\"KeePassFile > Root > Group\") no longers works on node and we have to breakdown the query by nodes\n    const KeePassFileNode = doc.querySelector(\"KeePassFile\");\n\n    if (KeePassFileNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const RootNode = KeePassFileNode.querySelector(\"Root\");\n    if (RootNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const rootGroup = RootNode.querySelector(\"Group\");\n    if (rootGroup == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root > Group` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    this.traverse(rootGroup, true, \"\");\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  traverse(node: Element, isRootNode: boolean, groupPrefixName: string) {\n    const folderIndex = this.result.folders.length;\n    let groupName = groupPrefixName;\n\n    if (!isRootNode) {\n      if (groupName !== \"\") {\n        groupName += \"/\";\n      }\n      const nameEl = this.querySelectorDirectChild(node, \"Name\");\n      groupName += nameEl == null ? \"-\" : nameEl.textContent;\n      const folder = new FolderView();\n      folder.name = groupName;\n      this.result.folders.push(folder);\n    }\n\n    this.querySelectorAllDirectChild(node, \"Entry\").forEach((entry) => {\n      const cipherIndex = this.result.ciphers.length;\n\n      const cipher = this.initLoginCipher();\n      this.querySelectorAllDirectChild(entry, \"String\").forEach((entryString) => {\n        const valueEl = this.querySelectorDirectChild(entryString, \"Value\");\n        const value = valueEl != null ? valueEl.textContent : null;\n        if (this.isNullOrWhitespace(value)) {\n          return;\n        }\n        const keyEl = this.querySelectorDirectChild(entryString, \"Key\");\n        const key = keyEl != null ? keyEl.textContent : null;\n\n        if (key === \"URL\") {\n          cipher.login.uris = this.makeUriArray(value);\n        } else if (key === \"UserName\") {\n          cipher.login.username = value;\n        } else if (key === \"Password\") {\n          cipher.login.password = value;\n        } else if (key === \"otp\") {\n          cipher.login.totp = value.replace(\"key=\", \"\");\n        } else if (key === \"Title\") {\n          cipher.name = value;\n        } else if (key === \"Notes\") {\n          cipher.notes += value + \"\\n\";\n        } else {\n          let type = FieldType.Text;\n          const attrs = valueEl.attributes as any;\n          if (\n            attrs.length > 0 &&\n            attrs.ProtectInMemory != null &&\n            attrs.ProtectInMemory.value === \"True\"\n          ) {\n            type = FieldType.Hidden;\n          }\n          this.processKvp(cipher, key, value, type);\n        }\n      });\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n\n      if (!isRootNode) {\n        this.result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    this.querySelectorAllDirectChild(node, \"Group\").forEach((group) => {\n      this.traverse(group, false, groupName);\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePassXCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(value.Title)) {\n        return;\n      }\n\n      value.Group =\n        !this.isNullOrWhitespace(value.Group) && value.Group.startsWith(\"Root/\")\n          ? value.Group.replace(\"Root/\", \"\")\n          : value.Group;\n      const groupName = !this.isNullOrWhitespace(value.Group) ? value.Group : null;\n      this.processFolder(result, groupName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class KeeperCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 6) {\n        return;\n      }\n\n      this.processFolder(result, value[0]);\n      const cipher = this.initLoginCipher();\n\n      const notes = this.getValueOrDefault(value[5]);\n      if (notes) {\n        cipher.notes = `${notes}\\n`;\n      }\n\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[4]);\n\n      if (value.length > 7) {\n        // we have some custom fields.\n        for (let i = 7; i < value.length; i = i + 2) {\n          if (value[i] == \"TFC:Keeper\") {\n            cipher.login.totp = value[i + 1];\n          } else {\n            this.processKvp(cipher, value[i], value[i + 1]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LastPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipherIndex = result.ciphers.length;\n      let folderIndex = result.folders.length;\n      let grouping = value.grouping;\n      if (grouping != null) {\n        // eslint-disable-next-line\n        grouping = grouping.replace(/\\\\/g, \"/\").replace(/[\\x00-\\x1F\\x7F-\\x9F]/g, \"\");\n      }\n      const hasFolder = this.getValueOrDefault(grouping, \"(none)\") !== \"(none)\";\n      let addFolder = hasFolder;\n\n      if (hasFolder) {\n        for (let i = 0; i < result.folders.length; i++) {\n          if (result.folders[i].name === grouping) {\n            addFolder = false;\n            folderIndex = i;\n            break;\n          }\n        }\n      }\n\n      const cipher = this.buildBaseCipher(value);\n      if (cipher.type === CipherType.Login) {\n        cipher.notes = this.getValueOrDefault(value.extra);\n        cipher.login = new LoginView();\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.totp);\n      } else if (cipher.type === CipherType.SecureNote) {\n        this.parseSecureNote(value, cipher);\n      } else if (cipher.type === CipherType.Card) {\n        cipher.card = this.parseCard(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n      } else if (cipher.type === CipherType.Identity) {\n        cipher.identity = this.parseIdentity(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n        if (!this.isNullOrWhitespace(value.ccnum)) {\n          // there is a card on this identity too\n          const cardCipher = this.buildBaseCipher(value);\n          cardCipher.identity = null;\n          cardCipher.type = CipherType.Card;\n          cardCipher.card = this.parseCard(value);\n          result.ciphers.push(cardCipher);\n        }\n      }\n\n      result.ciphers.push(cipher);\n\n      if (addFolder) {\n        const f = new FolderView();\n        f.name = grouping;\n        result.folders.push(f);\n      }\n      if (hasFolder) {\n        result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private buildBaseCipher(value: any) {\n    const cipher = new CipherView();\n    // eslint-disable-next-line\n    if (value.hasOwnProperty(\"profilename\") && value.hasOwnProperty(\"profilelanguage\")) {\n      // form fill\n      cipher.favorite = false;\n      cipher.name = this.getValueOrDefault(value.profilename, \"--\");\n      cipher.type = CipherType.Card;\n\n      if (\n        !this.isNullOrWhitespace(value.title) ||\n        !this.isNullOrWhitespace(value.firstname) ||\n        !this.isNullOrWhitespace(value.lastname) ||\n        !this.isNullOrWhitespace(value.address1) ||\n        !this.isNullOrWhitespace(value.phone) ||\n        !this.isNullOrWhitespace(value.username) ||\n        !this.isNullOrWhitespace(value.email)\n      ) {\n        cipher.type = CipherType.Identity;\n      }\n    } else {\n      // site or secure note\n      cipher.favorite = !this.organization && this.getValueOrDefault(value.fav, \"0\") === \"1\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.type = value.url === \"http://sn\" ? CipherType.SecureNote : CipherType.Login;\n    }\n    return cipher;\n  }\n\n  private parseCard(value: any): CardView {\n    const card = new CardView();\n    card.cardholderName = this.getValueOrDefault(value.ccname);\n    card.number = this.getValueOrDefault(value.ccnum);\n    card.code = this.getValueOrDefault(value.cccsc);\n    card.brand = this.getCardBrand(value.ccnum);\n\n    if (!this.isNullOrWhitespace(value.ccexp) && value.ccexp.indexOf(\"-\") > -1) {\n      const ccexpParts = (value.ccexp as string).split(\"-\");\n      if (ccexpParts.length > 1) {\n        card.expYear = ccexpParts[0];\n        card.expMonth = ccexpParts[1];\n        if (card.expMonth.length === 2 && card.expMonth[0] === \"0\") {\n          card.expMonth = card.expMonth[1];\n        }\n      }\n    }\n\n    return card;\n  }\n\n  private parseIdentity(value: any): IdentityView {\n    const identity = new IdentityView();\n    identity.title = this.getValueOrDefault(value.title);\n    identity.firstName = this.getValueOrDefault(value.firstname);\n    identity.middleName = this.getValueOrDefault(value.middlename);\n    identity.lastName = this.getValueOrDefault(value.lastname);\n    identity.username = this.getValueOrDefault(value.username);\n    identity.company = this.getValueOrDefault(value.company);\n    identity.ssn = this.getValueOrDefault(value.ssn);\n    identity.address1 = this.getValueOrDefault(value.address1);\n    identity.address2 = this.getValueOrDefault(value.address2);\n    identity.address3 = this.getValueOrDefault(value.address3);\n    identity.city = this.getValueOrDefault(value.city);\n    identity.state = this.getValueOrDefault(value.state);\n    identity.postalCode = this.getValueOrDefault(value.zip);\n    identity.country = this.getValueOrDefault(value.country);\n    identity.email = this.getValueOrDefault(value.email);\n    identity.phone = this.getValueOrDefault(value.phone);\n\n    if (!this.isNullOrWhitespace(identity.title)) {\n      identity.title = identity.title.charAt(0).toUpperCase() + identity.title.slice(1);\n    }\n\n    return identity;\n  }\n\n  private parseSecureNote(value: any, cipher: CipherView) {\n    const extraParts = this.splitNewLine(value.extra);\n    let processedNote = false;\n\n    if (extraParts.length) {\n      const typeParts = extraParts[0].split(\":\");\n      if (\n        typeParts.length > 1 &&\n        typeParts[0] === \"NoteType\" &&\n        (typeParts[1] === \"Credit Card\" || typeParts[1] === \"Address\")\n      ) {\n        if (typeParts[1] === \"Credit Card\") {\n          const mappedData = this.parseSecureNoteMapping<CardView>(cipher, extraParts, {\n            Number: \"number\",\n            \"Name on Card\": \"cardholderName\",\n            \"Security Code\": \"code\",\n            // LP provides date in a format like 'June,2020'\n            // Store in expMonth, then parse and modify\n            \"Expiration Date\": \"expMonth\",\n          });\n\n          if (this.isNullOrWhitespace(mappedData.expMonth) || mappedData.expMonth === \",\") {\n            // No expiration data\n            mappedData.expMonth = undefined;\n          } else {\n            const [monthString, year] = mappedData.expMonth.split(\",\");\n            // Parse month name into number\n            if (!this.isNullOrWhitespace(monthString)) {\n              const month = new Date(Date.parse(monthString.trim() + \" 1, 2012\")).getMonth() + 1;\n              if (isNaN(month)) {\n                mappedData.expMonth = undefined;\n              } else {\n                mappedData.expMonth = month.toString();\n              }\n            } else {\n              mappedData.expMonth = undefined;\n            }\n            if (!this.isNullOrWhitespace(year)) {\n              mappedData.expYear = year;\n            }\n          }\n\n          cipher.type = CipherType.Card;\n          cipher.card = mappedData;\n        } else if (typeParts[1] === \"Address\") {\n          const mappedData = this.parseSecureNoteMapping<IdentityView>(cipher, extraParts, {\n            Title: \"title\",\n            \"First Name\": \"firstName\",\n            \"Last Name\": \"lastName\",\n            \"Middle Name\": \"middleName\",\n            Company: \"company\",\n            \"Address 1\": \"address1\",\n            \"Address 2\": \"address2\",\n            \"Address 3\": \"address3\",\n            \"City / Town\": \"city\",\n            State: \"state\",\n            \"Zip / Postal Code\": \"postalCode\",\n            Country: \"country\",\n            \"Email Address\": \"email\",\n            Username: \"username\",\n          });\n          cipher.type = CipherType.Identity;\n          cipher.identity = mappedData;\n        }\n        processedNote = true;\n      }\n    }\n\n    if (!processedNote) {\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n      cipher.notes = this.getValueOrDefault(value.extra);\n    }\n  }\n\n  private parseSecureNoteMapping<T>(cipher: CipherView, extraParts: string[], map: any): T {\n    const dataObj: any = {};\n\n    let processingNotes = false;\n    extraParts.forEach((extraPart) => {\n      let key: string = null;\n      let val: string = null;\n      if (!processingNotes) {\n        if (this.isNullOrWhitespace(extraPart)) {\n          return;\n        }\n        const colonIndex = extraPart.indexOf(\":\");\n        if (colonIndex === -1) {\n          key = extraPart;\n        } else {\n          key = extraPart.substring(0, colonIndex);\n          if (extraPart.length > colonIndex) {\n            val = extraPart.substring(colonIndex + 1);\n          }\n        }\n        if (this.isNullOrWhitespace(key) || this.isNullOrWhitespace(val) || key === \"NoteType\") {\n          return;\n        }\n      }\n\n      if (processingNotes) {\n        cipher.notes += \"\\n\" + extraPart;\n      } else if (key === \"Notes\") {\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes += \"\\n\" + val;\n        } else {\n          cipher.notes = val;\n        }\n        processingNotes = true;\n        // eslint-disable-next-line\n      } else if (map.hasOwnProperty(key)) {\n        dataObj[map[key]] = val;\n      } else {\n        this.processKvp(cipher, key, val);\n      }\n    });\n\n    return dataObj;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LogMeOnceCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 4) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[1]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MeldiumCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.DisplayName, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.login.username = this.getValueOrDefault(value.UserName);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MSecureCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      const folderName =\n        this.getValueOrDefault(value[0], \"Unassigned\") !== \"Unassigned\" ? value[0] : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[2], \"--\");\n\n      if (value[1] === \"Web Logins\" || value[1] === \"Login\") {\n        cipher.login.uris = this.makeUriArray(value[4]);\n        cipher.login.username = this.getValueOrDefault(value[5]);\n        cipher.login.password = this.getValueOrDefault(value[6]);\n        cipher.notes = !this.isNullOrWhitespace(value[3]) ? value[3].split(\"\\\\n\").join(\"\\n\") : null;\n      } else if (value.length > 3) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        for (let i = 3; i < value.length; i++) {\n          if (!this.isNullOrWhitespace(value[i])) {\n            cipher.notes += value[i] + \"\\n\";\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(value[1]) && cipher.type !== CipherType.Login) {\n        cipher.name = value[1] + \": \" + cipher.name;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst mappedBaseColumns = [\"nickname\", \"additionalInfo\"];\nconst _mappedUserAccountColumns = new Set(\n  mappedBaseColumns.concat([\"url\", \"username\", \"password\", \"twofaSecret\"])\n);\nconst _mappedCreditCardColumns = new Set(\n  mappedBaseColumns.concat([\"cardNumber\", \"cardName\", \"exp_month\", \"exp_year\", \"cvv\"])\n);\n\nconst _mappedIdentityColumns = new Set(\n  mappedBaseColumns.concat([\n    \"title\",\n    \"firstName\",\n    \"middleName\",\n    \"lastName\",\n    \"email\",\n    \"firstAddressLine\",\n    \"secondAddressLine\",\n    \"city\",\n    \"country\",\n    \"zipCode\",\n  ])\n);\n\nconst _mappedIdCardColumns = new Set(mappedBaseColumns.concat([\"idName\", \"idNumber\", \"idCountry\"]));\n\nconst _mappedTwoFaColumns = new Set(mappedBaseColumns.concat([\"authToken\"]));\n\nconst _mappedUserNoteColumns = new Set(mappedBaseColumns.concat([\"content\"]));\n\nexport class MykiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.nickname, \"--\");\n      cipher.notes = this.getValueOrDefault(value.additionalInfo);\n\n      if (value.url !== undefined) {\n        // Accounts\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.twofaSecret);\n\n        this.importUnmappedFields(cipher, value, _mappedUserAccountColumns);\n      } else if (value.authToken !== undefined) {\n        // TwoFA\n        cipher.login.totp = this.getValueOrDefault(value.authToken);\n\n        this.importUnmappedFields(cipher, value, _mappedTwoFaColumns);\n      } else if (value.cardNumber !== undefined) {\n        // Cards\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.expMonth = this.getValueOrDefault(value.exp_month);\n        cipher.card.expYear = this.getValueOrDefault(value.exp_year);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n\n        this.importUnmappedFields(cipher, value, _mappedCreditCardColumns);\n      } else if (value.firstName !== undefined) {\n        // Identities\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        cipher.identity.title = this.getValueOrDefault(value.title);\n        cipher.identity.firstName = this.getValueOrDefault(value.firstName);\n        cipher.identity.middleName = this.getValueOrDefault(value.middleName);\n        cipher.identity.lastName = this.getValueOrDefault(value.lastName);\n        cipher.identity.phone = this.getValueOrDefault(value.number);\n        cipher.identity.email = this.getValueOrDefault(value.email);\n        cipher.identity.address1 = this.getValueOrDefault(value.firstAddressLine);\n        cipher.identity.address2 = this.getValueOrDefault(value.secondAddressLine);\n        cipher.identity.city = this.getValueOrDefault(value.city);\n        cipher.identity.country = this.getValueOrDefault(value.country);\n        cipher.identity.postalCode = this.getValueOrDefault(value.zipCode);\n\n        this.importUnmappedFields(cipher, value, _mappedIdentityColumns);\n      } else if (value.idType !== undefined) {\n        // IdCards\n\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        this.processFullName(cipher, value.idName);\n        cipher.identity.country = this.getValueOrDefault(value.idCountry);\n\n        switch (value.idType) {\n          // case \"Driver's License\":\n          // case \"ID Card\":\n          // case \"Outdoor License\":\n          // case \"Software License\":\n          // case \"Tax Number\":\n          // case \"Bank Account\":\n          // case \"Insurance Card\":\n          // case \"Health Card\":\n          // case \"Membership\":\n          // case \"Database\":\n          // case \"Reward Program\":\n          // case \"Tour Visa\":\n          case \"Passport\":\n            cipher.identity.passportNumber = value.idNumber;\n            break;\n          case \"Social Security\":\n            cipher.identity.ssn = value.idNumber;\n            break;\n          default:\n            cipher.identity.licenseNumber = value.idNumber;\n            break;\n        }\n\n        this.importUnmappedFields(cipher, value, _mappedIdCardColumns);\n      } else if (value.content !== undefined) {\n        // Notes\n        cipher.secureNote = new SecureNoteView();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.notes = this.getValueOrDefault(value.content);\n\n        this.importUnmappedFields(cipher, value, _mappedUserNoteColumns);\n      } else {\n        return;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\ntype nodePassCsvParsed = {\n  name: string;\n  url: string;\n  username: string;\n  password: string;\n  note: string;\n  cardholdername: string;\n  cardnumber: string;\n  cvc: string;\n  expirydate: string;\n  zipcode: string;\n  folder: string;\n  full_name: string;\n  phone_number: string;\n  email: string;\n  address1: string;\n  address2: string;\n  city: string;\n  country: string;\n  state: string;\n};\n\nexport class NordPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: nodePassCsvParsed[] = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((record) => {\n      const recordType = this.evaluateType(record);\n      if (recordType === undefined) {\n        return;\n      }\n\n      if (!this.organization) {\n        this.processFolder(result, record.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.name = this.getValueOrDefault(record.name, \"--\");\n      cipher.notes = this.getValueOrDefault(record.note);\n\n      switch (recordType) {\n        case CipherType.Login:\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.username = this.getValueOrDefault(record.username);\n          cipher.login.password = this.getValueOrDefault(record.password);\n          cipher.login.uris = this.makeUriArray(record.url);\n          break;\n        case CipherType.Card:\n          cipher.type = CipherType.Card;\n          cipher.card.cardholderName = this.getValueOrDefault(record.cardholdername);\n          cipher.card.number = this.getValueOrDefault(record.cardnumber);\n          cipher.card.code = this.getValueOrDefault(record.cvc);\n          cipher.card.brand = this.getCardBrand(cipher.card.number);\n          this.setCardExpiration(cipher, record.expirydate);\n          break;\n\n        case CipherType.Identity:\n          cipher.type = CipherType.Identity;\n\n          this.processFullName(cipher, this.getValueOrDefault(record.full_name));\n          cipher.identity.address1 = this.getValueOrDefault(record.address1);\n          cipher.identity.address2 = this.getValueOrDefault(record.address2);\n          cipher.identity.city = this.getValueOrDefault(record.city);\n          cipher.identity.state = this.getValueOrDefault(record.state);\n          cipher.identity.postalCode = this.getValueOrDefault(record.zipcode);\n          cipher.identity.country = this.getValueOrDefault(record.country);\n          if (cipher.identity.country != null) {\n            cipher.identity.country = cipher.identity.country.toUpperCase();\n          }\n          cipher.identity.email = this.getValueOrDefault(record.email);\n          cipher.identity.phone = this.getValueOrDefault(record.phone_number);\n          break;\n        case CipherType.SecureNote:\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default:\n          break;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private evaluateType(record: nodePassCsvParsed): CipherType {\n    if (!this.isNullOrWhitespace(record.username)) {\n      return CipherType.Login;\n    }\n\n    if (!this.isNullOrWhitespace(record.cardnumber)) {\n      return CipherType.Card;\n    }\n\n    if (!this.isNullOrWhitespace(record.full_name)) {\n      return CipherType.Identity;\n    }\n\n    if (!this.isNullOrWhitespace(record.note)) {\n      return CipherType.SecureNote;\n    }\n\n    return undefined;\n  }\n}\n","export interface ExportData {\n  accounts?: AccountsEntity[] | null;\n}\nexport interface AccountsEntity {\n  attrs: AccountAttributes;\n  vaults?: VaultsEntity[] | null;\n}\nexport interface AccountAttributes {\n  accountName: string;\n  name: string;\n  avatar: string;\n  email: string;\n  uuid: string;\n  domain: string;\n}\nexport interface VaultsEntity {\n  attrs: VaultAttributes;\n  items?: Item[] | null;\n}\nexport interface VaultAttributes {\n  uuid: string;\n  desc: string;\n  avatar: string;\n  name: string;\n  type: string;\n}\n\nexport enum CategoryEnum {\n  Login = \"001\",\n  CreditCard = \"002\",\n  SecureNote = \"003\",\n  Identity = \"004\",\n  Password = \"005\",\n  Document = \"006\",\n  SoftwareLicense = \"100\",\n  BankAccount = \"101\",\n  Database = \"102\",\n  DriversLicense = \"103\",\n  OutdoorLicense = \"104\",\n  Membership = \"105\",\n  Passport = \"106\",\n  RewardsProgram = \"107\",\n  SocialSecurityNumber = \"108\",\n  WirelessRouter = \"109\",\n  Server = \"110\",\n  EmailAccount = \"111\",\n  API_Credential = \"112\",\n  MedicalRecord = \"113\",\n}\n\nexport interface Item {\n  uuid: string;\n  favIndex: number;\n  createdAt: number;\n  updatedAt: number;\n  trashed?: boolean;\n  categoryUuid: string;\n  details: Details;\n  overview: Overview;\n}\nexport interface Details {\n  loginFields?: (LoginFieldsEntity | null)[] | null;\n  notesPlain?: string | null;\n  sections?: (SectionsEntity | null)[] | null;\n  passwordHistory?: (PasswordHistoryEntity | null)[] | null;\n  documentAttributes?: DocumentAttributes | null;\n  password?: string | null;\n}\n\nexport enum LoginFieldTypeEnum {\n  TextOrHtml = \"T\",\n  EmailAddress = \"E\",\n  URL = \"U\",\n  Number = \"N\",\n  Password = \"P\",\n  TextArea = \"A\",\n  PhoneNumber = \"T\",\n  CheckBox = \"C\",\n}\nexport interface LoginFieldsEntity {\n  value: string;\n  id: string;\n  name: string;\n  fieldType: LoginFieldTypeEnum | string;\n  designation?: string | null;\n}\nexport interface SectionsEntity {\n  title: string;\n  name?: string | null;\n  fields?: FieldsEntity[] | null;\n}\nexport interface FieldsEntity {\n  title: string;\n  id: string;\n  value: Value;\n  indexAtSource: number;\n  guarded: boolean;\n  multiline: boolean;\n  dontGenerate: boolean;\n  placeholder?: string;\n  inputTraits: InputTraits;\n  clipboardFilter?: string | null;\n}\nexport interface Value {\n  totp?: string | null;\n  date?: number | null;\n  string?: string | null;\n  concealed?: string | null;\n  email?: Email | null;\n  phone?: string | null;\n  menu?: string | null;\n  gender?: string | null;\n  monthYear?: number | null;\n  url?: string | null;\n  address?: Address | null;\n  creditCardType?: string | null;\n  creditCardNumber?: string | null;\n  reference?: string | null;\n}\n\nexport interface Email {\n  email_address: string;\n  provider: string;\n}\n\nexport interface Address {\n  street: string;\n  city: string;\n  country: string;\n  zip: string;\n  state: string;\n}\nexport interface InputTraits {\n  keyboard: string;\n  correction: string;\n  capitalization: string;\n}\nexport interface PasswordHistoryEntity {\n  value: string;\n  time: number;\n}\nexport interface DocumentAttributes {\n  fileName: string;\n  documentId: string;\n  decryptedSize: number;\n}\nexport interface Overview {\n  subtitle: string;\n  title: string;\n  url: string;\n  urls?: UrlsEntity[] | null;\n  ps?: number | null;\n  pbe?: number | null;\n  pgrng?: boolean | null;\n  tags?: string[] | null;\n}\nexport interface UrlsEntity {\n  label: string;\n  url: string;\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class OnePassword1PifImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    data.split(this.newLineRegex).forEach((line) => {\n      if (this.isNullOrWhitespace(line) || line[0] !== \"{\") {\n        return;\n      }\n      const item = JSON.parse(line);\n      if (item.trashed === true) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n\n      if (this.isNullOrWhitespace(item.hmac)) {\n        this.processStandardItem(item, cipher);\n      } else {\n        this.processWinOpVaultItem(item, cipher);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processWinOpVaultItem(item: any, cipher: CipherView) {\n    if (item.overview != null) {\n      cipher.name = this.getValueOrDefault(item.overview.title);\n      if (item.overview.URLs != null) {\n        const urls: string[] = [];\n        item.overview.URLs.forEach((url: any) => {\n          if (!this.isNullOrWhitespace(url.u)) {\n            urls.push(url.u);\n          }\n        });\n        cipher.login.uris = this.makeUriArray(urls);\n      }\n    }\n\n    if (item.details != null) {\n      if (item.details.passwordHistory != null) {\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n      }\n      if (\n        !this.isNullOrWhitespace(item.details.ccnum) ||\n        !this.isNullOrWhitespace(item.details.cvv)\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      } else if (\n        !this.isNullOrWhitespace(item.details.firstname) ||\n        !this.isNullOrWhitespace(item.details.address1)\n      ) {\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n      }\n      if (cipher.type === CipherType.Login && !this.isNullOrWhitespace(item.details.password)) {\n        cipher.login.password = item.details.password;\n      }\n      if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n        cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (item.details.fields != null) {\n        this.parseFields(item.details.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.details.sections != null) {\n        item.details.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private processStandardItem(item: any, cipher: CipherView) {\n    cipher.favorite = item.openContents && item.openContents.faveIndex ? true : false;\n    cipher.name = this.getValueOrDefault(item.title);\n\n    if (item.typeName === \"securenotes.SecureNote\") {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    } else if (item.typeName === \"wallet.financial.CreditCard\") {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    } else if (item.typeName === \"identities.Identity\") {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    } else {\n      cipher.login.uris = this.makeUriArray(item.location);\n    }\n\n    if (item.secureContents != null) {\n      if (item.secureContents.passwordHistory != null) {\n        this.parsePasswordHistory(item.secureContents.passwordHistory, cipher);\n      }\n      if (!this.isNullOrWhitespace(item.secureContents.notesPlain)) {\n        cipher.notes = item.secureContents.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (cipher.type === CipherType.Login) {\n        if (!this.isNullOrWhitespace(item.secureContents.password)) {\n          cipher.login.password = item.secureContents.password;\n        }\n        if (item.secureContents.URLs != null) {\n          const urls: string[] = [];\n          item.secureContents.URLs.forEach((u: any) => {\n            if (!this.isNullOrWhitespace(u.url)) {\n              urls.push(u.url);\n            }\n          });\n          if (urls.length > 0) {\n            cipher.login.uris = this.makeUriArray(urls);\n          }\n        }\n      }\n      if (item.secureContents.fields != null) {\n        this.parseFields(item.secureContents.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.secureContents.sections != null) {\n        item.secureContents.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private parsePasswordHistory(items: any[], cipher: CipherView) {\n    const maxSize = items.length > 5 ? 5 : items.length;\n    cipher.passwordHistory = items\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n\n  private parseFields(\n    fields: any[],\n    cipher: CipherView,\n    designationKey: string,\n    valueKey: string,\n    nameKey: string\n  ) {\n    fields.forEach((field: any) => {\n      if (field[valueKey] == null || field[valueKey].toString().trim() === \"\") {\n        return;\n      }\n\n      // TODO: when date FieldType exists, store this as a date field type instead of formatted Text if k is 'date'\n      const fieldValue =\n        field.k === \"date\"\n          ? new Date(field[valueKey] * 1000).toUTCString()\n          : field[valueKey].toString();\n      const fieldDesignation =\n        field[designationKey] != null ? field[designationKey].toString() : null;\n\n      if (cipher.type === CipherType.Login) {\n        if (this.isNullOrWhitespace(cipher.login.username) && fieldDesignation === \"username\") {\n          cipher.login.username = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.password) &&\n          fieldDesignation === \"password\"\n        ) {\n          cipher.login.password = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.totp) &&\n          fieldDesignation != null &&\n          fieldDesignation.startsWith(\"TOTP_\")\n        ) {\n          cipher.login.totp = fieldValue;\n          return;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.isNullOrWhitespace(cipher.card.number) && fieldDesignation === \"ccnum\") {\n          cipher.card.number = fieldValue;\n          cipher.card.brand = this.getCardBrand(fieldValue);\n          return;\n        } else if (this.isNullOrWhitespace(cipher.card.code) && fieldDesignation === \"cvv\") {\n          cipher.card.code = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.cardholderName) &&\n          fieldDesignation === \"cardholder\"\n        ) {\n          cipher.card.cardholderName = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.expiration) &&\n          fieldDesignation === \"expiry\" &&\n          fieldValue.length === 6\n        ) {\n          cipher.card.expMonth = (fieldValue as string).substr(4, 2);\n          if (cipher.card.expMonth[0] === \"0\") {\n            cipher.card.expMonth = cipher.card.expMonth.substr(1, 1);\n          }\n          cipher.card.expYear = (fieldValue as string).substr(0, 4);\n          return;\n        } else if (fieldDesignation === \"type\") {\n          // Skip since brand was determined from number above\n          return;\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        const identity = cipher.identity;\n        if (this.isNullOrWhitespace(identity.firstName) && fieldDesignation === \"firstname\") {\n          identity.firstName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.lastName) && fieldDesignation === \"lastname\") {\n          identity.lastName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.middleName) && fieldDesignation === \"initial\") {\n          identity.middleName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.phone) && fieldDesignation === \"defphone\") {\n          identity.phone = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.company) && fieldDesignation === \"company\") {\n          identity.company = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.email) && fieldDesignation === \"email\") {\n          identity.email = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.username) && fieldDesignation === \"username\") {\n          identity.username = fieldValue;\n          return;\n        } else if (fieldDesignation === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip } = field[valueKey];\n          identity.address1 = this.getValueOrDefault(street);\n          identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            identity.country = country.toUpperCase();\n          }\n          identity.postalCode = this.getValueOrDefault(zip);\n          return;\n        }\n      }\n\n      const fieldName = this.isNullOrWhitespace(field[nameKey]) ? \"no_name\" : field[nameKey];\n      if (\n        fieldName === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      const fieldType = field.k === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CategoryEnum,\n  Details,\n  ExportData,\n  FieldsEntity,\n  Item,\n  LoginFieldTypeEnum,\n  Overview,\n  PasswordHistoryEntity,\n  SectionsEntity,\n  UrlsEntity,\n  Value,\n  VaultsEntity,\n} from \"./types/onepassword-1pux-importer-types\";\n\nexport class OnePassword1PuxImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const exportData: ExportData = JSON.parse(data);\n\n    const account = exportData.accounts[0];\n    // TODO Add handling of multiple vaults\n    // const personalVaults = account.vaults[0].filter((v) => v.attrs.type === VaultAttributeTypeEnum.Personal);\n    account.vaults.forEach((vault: VaultsEntity) => {\n      vault.items.forEach((item: Item) => {\n        if (item.trashed === true) {\n          return;\n        }\n\n        const cipher = this.initLoginCipher();\n\n        const category = item.categoryUuid as CategoryEnum;\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.Password:\n          case CategoryEnum.WirelessRouter:\n          case CategoryEnum.Server:\n          case CategoryEnum.API_Credential:\n            cipher.type = CipherType.Login;\n            cipher.login = new LoginView();\n            break;\n          case CategoryEnum.CreditCard:\n          case CategoryEnum.BankAccount:\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            break;\n          case CategoryEnum.SecureNote:\n          case CategoryEnum.SoftwareLicense:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.MedicalRecord:\n            // case CategoryEnum.Document:\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case CategoryEnum.Identity:\n          case CategoryEnum.DriversLicense:\n          case CategoryEnum.OutdoorLicense:\n          case CategoryEnum.Membership:\n          case CategoryEnum.Passport:\n          case CategoryEnum.RewardsProgram:\n          case CategoryEnum.SocialSecurityNumber:\n            cipher.type = CipherType.Identity;\n            cipher.identity = new IdentityView();\n            break;\n          default:\n            break;\n        }\n\n        cipher.favorite = item.favIndex === 1 ? true : false;\n\n        this.processOverview(item.overview, cipher);\n\n        this.processLoginFields(item, cipher);\n\n        this.processDetails(category, item.details, cipher);\n\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n\n        this.processSections(category, item.details.sections, cipher);\n\n        if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n          cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        this.result.ciphers.push(cipher);\n      });\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processOverview(overview: Overview, cipher: CipherView) {\n    if (overview == null) {\n      return;\n    }\n\n    cipher.name = this.getValueOrDefault(overview.title);\n\n    if (overview.urls != null) {\n      const urls: string[] = [];\n      overview.urls.forEach((url: UrlsEntity) => {\n        if (!this.isNullOrWhitespace(url.url)) {\n          urls.push(url.url);\n        }\n      });\n      cipher.login.uris = this.makeUriArray(urls);\n    }\n\n    if (overview.tags != null && overview.tags.length > 0) {\n      const folderName = this.capitalize(overview.tags[0]);\n      this.processFolder(this.result, folderName);\n    }\n  }\n\n  private capitalize(inputString: string): string {\n    return inputString.trim().replace(/\\w\\S*/g, (w) => w.replace(/^\\w/, (c) => c.toUpperCase()));\n  }\n\n  private processLoginFields(item: Item, cipher: CipherView) {\n    if (item.details == null) {\n      return;\n    }\n\n    if (item.details.loginFields == null || item.details.loginFields.length === 0) {\n      return;\n    }\n\n    item.details.loginFields.forEach((loginField) => {\n      if (loginField.designation === \"username\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.username = loginField.value;\n        return;\n      }\n\n      if (loginField.designation === \"password\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.password = loginField.value;\n        return;\n      }\n\n      let fieldValue = loginField.value;\n      let fieldType: FieldType = FieldType.Text;\n      switch (loginField.fieldType) {\n        case LoginFieldTypeEnum.Password:\n          fieldType = FieldType.Hidden;\n          break;\n        case LoginFieldTypeEnum.CheckBox:\n          fieldValue = loginField.value !== \"\" ? \"true\" : \"false\";\n          fieldType = FieldType.Boolean;\n          break;\n        default:\n          break;\n      }\n      this.processKvp(cipher, loginField.name, fieldValue, fieldType);\n    });\n  }\n\n  private processDetails(category: CategoryEnum, details: Details, cipher: CipherView) {\n    if (category !== CategoryEnum.Password) {\n      return;\n    }\n\n    if (details == null) {\n      return;\n    }\n    cipher.login.password = details.password;\n  }\n\n  private processSections(category: CategoryEnum, sections: SectionsEntity[], cipher: CipherView) {\n    if (sections == null || sections.length === 0) {\n      return;\n    }\n\n    sections.forEach((section: SectionsEntity) => {\n      if (section.fields == null) {\n        return;\n      }\n\n      this.parseSectionFields(category, section.fields, cipher);\n    });\n  }\n\n  private parseSectionFields(category: CategoryEnum, fields: FieldsEntity[], cipher: CipherView) {\n    fields.forEach((field: FieldsEntity) => {\n      const valueKey = Object.keys(field.value)[0];\n      const anyField = field as any;\n\n      if (\n        anyField.value == null ||\n        anyField.value[valueKey] == null ||\n        anyField.value[valueKey] === \"\"\n      ) {\n        return;\n      }\n\n      const fieldName = this.getFieldName(field.id, field.title);\n      const fieldValue = this.extractValue(field.value, valueKey);\n\n      if (cipher.type === CipherType.Login) {\n        if (this.fillLogin(field, fieldValue, cipher)) {\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.WirelessRouter:\n            break;\n\n          case CategoryEnum.Server:\n            if (this.isNullOrWhitespace(cipher.login.uri) && field.id === \"url\") {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              return;\n            }\n            break;\n\n          case CategoryEnum.API_Credential:\n            if (this.fillApiCredentials(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.fillCreditCard(field, fieldValue, cipher)) {\n          return;\n        }\n\n        if (category === CategoryEnum.BankAccount) {\n          if (this.fillBankAccount(field, fieldValue, cipher)) {\n            return;\n          }\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        if (this.fillIdentity(field, fieldValue, cipher, valueKey)) {\n          return;\n        }\n        if (valueKey === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip, state } = field.value.address;\n          cipher.identity.address1 = this.getValueOrDefault(street);\n          cipher.identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            cipher.identity.country = country.toUpperCase();\n          }\n          cipher.identity.postalCode = this.getValueOrDefault(zip);\n          cipher.identity.state = this.getValueOrDefault(state);\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Identity:\n            break;\n          case CategoryEnum.DriversLicense:\n            if (this.fillDriversLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.OutdoorLicense:\n            if (this.fillOutdoorLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Membership:\n            if (this.fillMembership(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Passport:\n            if (this.fillPassport(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.RewardsProgram:\n            if (this.fillRewardsProgram(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.SocialSecurityNumber:\n            if (this.fillSSN(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (valueKey === \"email\") {\n        // fieldValue is an object casted into a string, so access the plain value instead\n        const { email_address, provider } = field.value.email;\n        this.processKvp(cipher, fieldName, email_address, FieldType.Text);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return;\n      }\n\n      // Do not include a password field if it's already in the history\n      if (\n        field.title === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      // TODO ?? If one of the fields is marked as guarded, then activate Password-Reprompt for the entire item\n      if (field.guarded && cipher.reprompt === CipherRepromptType.None) {\n        cipher.reprompt = CipherRepromptType.Password;\n      }\n\n      const fieldType = valueKey === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n\n  private getFieldName(id: string, title: string): string {\n    if (this.isNullOrWhitespace(title)) {\n      return id;\n    }\n\n    // Naive approach of checking if the fields id is usable\n    if (id.length > 25 && RegExp(/[0-9]{2}[A-Z]{2}/, \"i\").test(id)) {\n      return title;\n    }\n    return id;\n  }\n\n  private extractValue(value: Value, valueKey: string): string {\n    if (valueKey === \"date\") {\n      return new Date(value.date * 1000).toUTCString();\n    }\n\n    if (valueKey === \"monthYear\") {\n      return value.monthYear.toString();\n    }\n\n    return (value as any)[valueKey];\n  }\n\n  private fillLogin(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.username) && fieldName === \"username\") {\n      cipher.login.username = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"password\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (\n      this.isNullOrWhitespace(cipher.login.totp) &&\n      field.id != null &&\n      field.id.startsWith(\"TOTP_\")\n    ) {\n      cipher.login.totp = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillApiCredentials(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"credential\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.uri) && fieldName === \"hostname\") {\n      cipher.login.uris = this.makeUriArray(fieldValue);\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillCreditCard(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.number) && field.id === \"ccnum\") {\n      cipher.card.number = fieldValue;\n      cipher.card.brand = this.getCardBrand(fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.code) && field.id === \"cvv\") {\n      cipher.card.code = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"cardholder\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.expiration) && field.id === \"expiry\") {\n      const monthYear: string = fieldValue.toString().trim();\n      cipher.card.expMonth = monthYear.substring(4, 6);\n      if (cipher.card.expMonth[0] === \"0\") {\n        cipher.card.expMonth = cipher.card.expMonth.substring(1, 2);\n      }\n      cipher.card.expYear = monthYear.substring(0, 4);\n      return true;\n    }\n\n    if (field.id === \"type\") {\n      // Skip since brand was determined from number above\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillBankAccount(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"owner\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillIdentity(\n    field: FieldsEntity,\n    fieldValue: string,\n    cipher: CipherView,\n    valueKey: string\n  ): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"firstname\") {\n      cipher.identity.firstName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.lastName) && field.id === \"lastname\") {\n      cipher.identity.lastName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.middleName) && field.id === \"initial\") {\n      cipher.identity.middleName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"defphone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.email)) {\n      if (valueKey === \"email\") {\n        const { email_address, provider } = field.value.email;\n        cipher.identity.email = this.getValueOrDefault(email_address);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return true;\n      }\n\n      if (field.id === \"email\") {\n        cipher.identity.email = fieldValue;\n        return true;\n      }\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.username) && field.id === \"username\") {\n      cipher.identity.username = fieldValue;\n      return true;\n    }\n    return false;\n  }\n\n  private fillDriversLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.address1) && field.id === \"address\") {\n      cipher.identity.address1 = fieldValue;\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.licenseNumber) && field.id === \"number\") {\n      cipher.identity.licenseNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillOutdoorLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillMembership(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"org_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"phone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillPassport(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO Iso\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"issuing_country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.passportNumber) && field.id === \"number\") {\n      cipher.identity.passportNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillRewardsProgram(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillSSN(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.ssn) && field.id === \"number\") {\n      cipher.identity.ssn = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private parsePasswordHistory(historyItems: PasswordHistoryEntity[], cipher: CipherView) {\n    if (historyItems == null || historyItems.length === 0) {\n      return;\n    }\n\n    const maxSize = historyItems.length > 5 ? 5 : historyItems.length;\n    cipher.passwordHistory = historyItems\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nexport class CipherImportContext {\n  lowerProperty: string;\n  constructor(public importRecord: any, public property: string, public cipher: CipherView) {\n    this.lowerProperty = property.toLowerCase();\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\n\nexport const IgnoredProperties = [\n  \"ainfo\",\n  \"autosubmit\",\n  \"notesplain\",\n  \"ps\",\n  \"scope\",\n  \"tags\",\n  \"title\",\n  \"uuid\",\n  \"notes\",\n];\n\nexport abstract class OnePasswordCsvImporter extends BaseImporter implements Importer {\n  protected loginPropertyParsers = [\n    this.setLoginUsername,\n    this.setLoginPassword,\n    this.setLoginUris,\n  ];\n  protected creditCardPropertyParsers = [\n    this.setCreditCardNumber,\n    this.setCreditCardVerification,\n    this.setCreditCardCardholderName,\n    this.setCreditCardExpiry,\n  ];\n  protected identityPropertyParsers = [\n    this.setIdentityFirstName,\n    this.setIdentityInitial,\n    this.setIdentityLastName,\n    this.setIdentityUserName,\n    this.setIdentityEmail,\n    this.setIdentityPhone,\n    this.setIdentityCompany,\n  ];\n\n  abstract setCipherType(value: any, cipher: CipherView): void;\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true, {\n      quoteChar: '\"',\n      escapeChar: \"\\\\\",\n    });\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(this.getProp(value, \"title\"))) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.getProp(value, \"title\"), \"--\");\n\n      this.setNotes(value, cipher);\n\n      this.setCipherType(value, cipher);\n\n      let altUsername: string = null;\n      for (const property in value) {\n        // eslint-disable-next-line\n        if (!value.hasOwnProperty(property) || this.isNullOrWhitespace(value[property])) {\n          continue;\n        }\n\n        const context = new CipherImportContext(value, property, cipher);\n        if (cipher.type === CipherType.Login && this.setKnownLoginValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Card && this.setKnownCreditCardValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Identity && this.setKnownIdentityValue(context)) {\n          continue;\n        }\n\n        altUsername = this.setUnknownValue(context, altUsername);\n      }\n\n      if (\n        cipher.type === CipherType.Login &&\n        !this.isNullOrWhitespace(altUsername) &&\n        this.isNullOrWhitespace(cipher.login.username) &&\n        altUsername.indexOf(\"://\") === -1\n      ) {\n        cipher.login.username = altUsername;\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  protected getProp(obj: any, name: string): any {\n    const lowerObj = Object.entries(obj).reduce((agg: any, entry: [string, any]) => {\n      agg[entry[0].toLowerCase()] = entry[1];\n      return agg;\n    }, {});\n    return lowerObj[name.toLowerCase()];\n  }\n\n  protected getPropByRegexp(obj: any, regexp: RegExp): any {\n    const matchingKeys = Object.keys(obj).reduce((agg: string[], key: string) => {\n      if (key.match(regexp)) {\n        agg.push(key);\n      }\n      return agg;\n    }, []);\n    if (matchingKeys.length === 0) {\n      return null;\n    } else {\n      return obj[matchingKeys[0]];\n    }\n  }\n\n  protected getPropIncluding(obj: any, name: string): any {\n    const includesMap = Object.keys(obj).reduce((agg: string[], entry: string) => {\n      if (entry.toLowerCase().includes(name.toLowerCase())) {\n        agg.push(entry);\n      }\n      return agg;\n    }, []);\n    if (includesMap.length === 0) {\n      return null;\n    } else {\n      return obj[includesMap[0]];\n    }\n  }\n\n  protected setNotes(importRecord: any, cipher: CipherView) {\n    cipher.notes =\n      this.getValueOrDefault(this.getProp(importRecord, \"notesPlain\"), \"\") +\n      \"\\n\" +\n      this.getValueOrDefault(this.getProp(importRecord, \"notes\"), \"\") +\n      \"\\n\";\n    cipher.notes.trim();\n  }\n\n  protected setKnownLoginValue(context: CipherImportContext): boolean {\n    return this.loginPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownCreditCardValue(context: CipherImportContext): boolean {\n    return this.creditCardPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownIdentityValue(context: CipherImportContext): boolean {\n    return this.identityPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setUnknownValue(context: CipherImportContext, altUsername: string): string {\n    if (\n      IgnoredProperties.indexOf(context.lowerProperty) === -1 &&\n      !context.lowerProperty.startsWith(\"section:\") &&\n      !context.lowerProperty.startsWith(\"section \")\n    ) {\n      if (altUsername == null && context.lowerProperty === \"email\") {\n        return context.importRecord[context.property];\n      } else if (\n        context.lowerProperty === \"created date\" ||\n        context.lowerProperty === \"modified date\"\n      ) {\n        const readableDate = new Date(\n          parseInt(context.importRecord[context.property], 10) * 1000\n        ).toUTCString();\n        this.processKvp(context.cipher, \"1Password \" + context.property, readableDate);\n        return null;\n      }\n      if (\n        context.lowerProperty.includes(\"password\") ||\n        context.lowerProperty.includes(\"key\") ||\n        context.lowerProperty.includes(\"secret\")\n      ) {\n        this.processKvp(\n          context.cipher,\n          context.property,\n          context.importRecord[context.property],\n          FieldType.Hidden\n        );\n      } else {\n        this.processKvp(context.cipher, context.property, context.importRecord[context.property]);\n      }\n    }\n    return null;\n  }\n\n  protected setIdentityFirstName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.firstName) &&\n      context.lowerProperty.includes(\"first name\")\n    ) {\n      context.cipher.identity.firstName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityInitial(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.middleName) &&\n      context.lowerProperty.includes(\"initial\")\n    ) {\n      context.cipher.identity.middleName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityLastName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.lastName) &&\n      context.lowerProperty.includes(\"last name\")\n    ) {\n      context.cipher.identity.lastName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityUserName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.username) &&\n      context.lowerProperty.includes(\"username\")\n    ) {\n      context.cipher.identity.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityCompany(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.company) &&\n      context.lowerProperty.includes(\"company\")\n    ) {\n      context.cipher.identity.company = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityPhone(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.phone) &&\n      context.lowerProperty.includes(\"default phone\")\n    ) {\n      context.cipher.identity.phone = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityEmail(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.email) &&\n      context.lowerProperty.includes(\"email\")\n    ) {\n      context.cipher.identity.email = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardNumber(context: CipherImportContext): boolean {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.number) &&\n      context.lowerProperty.includes(\"number\")\n    ) {\n      context.cipher.card.number = context.importRecord[context.property];\n      context.cipher.card.brand = this.getCardBrand(context.cipher.card.number);\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardVerification(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.code) &&\n      context.lowerProperty.includes(\"verification number\")\n    ) {\n      context.cipher.card.code = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardCardholderName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.cardholderName) &&\n      context.lowerProperty.includes(\"cardholder name\")\n    ) {\n      context.cipher.card.cardholderName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\") &&\n      context.importRecord[context.property].length === 7\n    ) {\n      context.cipher.card.expMonth = (context.importRecord[context.property] as string).substr(\n        0,\n        2\n      );\n      if (context.cipher.card.expMonth[0] === \"0\") {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = (context.importRecord[context.property] as string).substr(3, 4);\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginPassword(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.password) &&\n      context.lowerProperty === \"password\"\n    ) {\n      context.cipher.login.password = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUsername(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.username) &&\n      context.lowerProperty === \"username\"\n    ) {\n      context.cipher.login.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUris(context: CipherImportContext) {\n    if (\n      (context.cipher.login.uris == null || context.cipher.login.uris.length === 0) &&\n      context.lowerProperty === \"urls\"\n    ) {\n      const urls = context.importRecord[context.property].split(this.newLineRegex);\n      context.cipher.login.uris = this.makeUriArray(urls);\n      return true;\n    } else if (context.lowerProperty === \"url\") {\n      if (context.cipher.login.uris == null) {\n        context.cipher.login.uris = [];\n      }\n      context.cipher.login.uris.concat(this.makeUriArray(context.importRecord[context.property]));\n      return true;\n    }\n    return false;\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { IgnoredProperties, OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordMacCsvImporter extends OnePasswordCsvImporter implements Importer {\n  setCipherType(value: any, cipher: CipherView) {\n    const onePassType = this.getValueOrDefault(this.getProp(value, \"type\"), \"Login\");\n    switch (onePassType) {\n      case \"Credit Card\":\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Identity\":\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Login\":\n      case \"Secure Note\":\n        IgnoredProperties.push(\"type\");\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\nimport { OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordWinCsvImporter extends OnePasswordCsvImporter implements Importer {\n  constructor() {\n    super();\n    this.identityPropertyParsers.push(this.setIdentityAddress);\n  }\n\n  setCipherType(value: any, cipher: CipherView) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: number/i)) &&\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: expiry date/i))\n    ) {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    }\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: first name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: initial/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: last name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /internet \\d+: email/i))\n    ) {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    }\n  }\n\n  setIdentityAddress(context: CipherImportContext) {\n    if (context.lowerProperty.match(/address \\d+: address/i)) {\n      this.processKvp(context.cipher, \"address\", context.importRecord[context.property]);\n      return true;\n    }\n    return false;\n  }\n\n  setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\")\n    ) {\n      const expSplit = (context.importRecord[context.property] as string).split(\"/\");\n      context.cipher.card.expMonth = expSplit[0];\n      if (context.cipher.card.expMonth[0] === \"0\" && context.cipher.card.expMonth.length === 2) {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = expSplit[2].length > 4 ? expSplit[2].substr(0, 4) : expSplit[2];\n      return true;\n    }\n    return false;\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PadlockCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let headers: string[] = null;\n    results.forEach((value) => {\n      if (headers == null) {\n        headers = value.map((v: string) => v);\n        return;\n      }\n\n      if (value.length < 2 || value.length !== headers.length) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value[1])) {\n        if (this.organization) {\n          const tags = (value[1] as string).split(\",\");\n          tags.forEach((tag) => {\n            tag = tag.trim();\n            let addCollection = true;\n            let collectionIndex = result.collections.length;\n\n            for (let i = 0; i < result.collections.length; i++) {\n              if (result.collections[i].name === tag) {\n                addCollection = false;\n                collectionIndex = i;\n                break;\n              }\n            }\n\n            if (addCollection) {\n              const collection = new CollectionView();\n              collection.name = tag;\n              result.collections.push(collection);\n            }\n\n            result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n          });\n        } else {\n          const tags = (value[1] as string).split(\",\");\n          const tag = tags.length > 0 ? tags[0].trim() : null;\n          this.processFolder(result, tag);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      for (let i = 2; i < value.length; i++) {\n        const header = headers[i].trim().toLowerCase();\n        if (this.isNullOrWhitespace(value[i]) || this.isNullOrWhitespace(header)) {\n          continue;\n        }\n\n        if (this.usernameFieldNames.indexOf(header) > -1) {\n          cipher.login.username = value[i];\n        } else if (this.passwordFieldNames.indexOf(header) > -1) {\n          cipher.login.password = value[i];\n        } else if (this.uriFieldNames.indexOf(header) > -1) {\n          cipher.login.uris = this.makeUriArray(value[i]);\n        } else {\n          this.processKvp(cipher, headers[i], value[i]);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassKeepCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValue(\"category\", value));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValue(\"description\", value);\n      cipher.name = this.getValueOrDefault(this.getValue(\"title\", value), \"--\");\n      cipher.login.username = this.getValue(\"username\", value);\n      cipher.login.password = this.getValue(\"password\", value);\n      cipher.login.uris = this.makeUriArray(this.getValue(\"site\", value));\n      this.processKvp(cipher, \"Password 2\", this.getValue(\"password2\", value));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private getValue(key: string, value: any) {\n    return this.getValueOrDefault(value[key], this.getValueOrDefault(value[\" \" + key]));\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { PasskyJsonExport } from \"./passky-json-types\";\n\nexport class PasskyJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const passkyExport: PasskyJsonExport = JSON.parse(data);\n    if (\n      passkyExport == null ||\n      passkyExport.passwords == null ||\n      passkyExport.passwords.length === 0\n    ) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (passkyExport.encrypted == true) {\n      result.success = false;\n      result.errorMessage = \"Unable to import an encrypted passky backup.\";\n      return Promise.resolve(result);\n    }\n\n    passkyExport.passwords.forEach((record) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = record.website;\n      cipher.login.username = record.username;\n      cipher.login.password = record.password;\n\n      cipher.login.uris = this.makeUriArray(record.website);\n      cipher.notes = record.message;\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassmanJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((credential: any) => {\n      if (credential.tags != null && credential.tags.length > 0) {\n        const folderName = credential.tags[0].text;\n        this.processFolder(result, folderName);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = credential.label;\n\n      cipher.login.username = this.getValueOrDefault(credential.username);\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.url);\n      cipher.notes += this.getValueOrDefault(credential.description, \"\");\n      if (credential.otp != null) {\n        cipher.login.totp = this.getValueOrDefault(credential.otp.secret);\n      }\n\n      if (credential.custom_fields != null) {\n        credential.custom_fields.forEach((customField: any) => {\n          switch (customField.field_type) {\n            case \"text\":\n            case \"password\":\n              this.processKvp(cipher, customField.label, customField.value);\n              break;\n          }\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasspackCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const tagsJson = !this.isNullOrWhitespace(value.Tags) ? JSON.parse(value.Tags) : null;\n      const tags: string[] =\n        tagsJson != null && tagsJson.tags != null && tagsJson.tags.length > 0\n          ? tagsJson.tags\n              .map((tagJson: string) => {\n                try {\n                  const t = JSON.parse(tagJson);\n                  return this.getValueOrDefault(t.tag);\n                } catch {\n                  // Ignore error\n                }\n                return null;\n              })\n              .filter((t: string) => !this.isNullOrWhitespace(t))\n          : null;\n\n      if (this.organization && tags != null && tags.length > 0) {\n        tags.forEach((tag) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === tag) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = tag;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization && tags != null && tags.length > 0) {\n        this.processFolder(result, tags[0]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes, \"\");\n      cipher.notes += \"\\n\\n\" + this.getValueOrDefault(value[\"Shared Notes\"], \"\") + \"\\n\";\n      cipher.name = this.getValueOrDefault(value[\"Entry Name\"], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User ID\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n        value.__parsed_extra.forEach((extra: string) => {\n          if (!this.isNullOrWhitespace(extra)) {\n            cipher.notes += \"\\n\" + extra;\n          }\n        });\n      }\n\n      const fieldsJson = !this.isNullOrWhitespace(value[\"Extra Fields\"])\n        ? JSON.parse(value[\"Extra Fields\"])\n        : null;\n      const fields =\n        fieldsJson != null && fieldsJson.extraFields != null && fieldsJson.extraFields.length > 0\n          ? fieldsJson.extraFields.map((fieldJson: string) => {\n              try {\n                return JSON.parse(fieldJson);\n              } catch {\n                // Ignore error\n              }\n              return null;\n            })\n          : null;\n      if (fields != null) {\n        fields.forEach((f: any) => {\n          if (f != null) {\n            this.processKvp(cipher, f.name, f.data);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordAgentCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let newVersion = true;\n    results.forEach((value) => {\n      if (value.length !== 5 && value.length < 9) {\n        return;\n      }\n      const altFormat = value.length === 10 && value[0] === \"0\";\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[altFormat ? 1 : 0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[altFormat ? 2 : 1]);\n      cipher.login.password = this.getValueOrDefault(value[altFormat ? 3 : 2]);\n      if (value.length === 5) {\n        newVersion = false;\n        cipher.notes = this.getValueOrDefault(value[4]);\n        cipher.login.uris = this.makeUriArray(value[3]);\n      } else {\n        const folder = this.getValueOrDefault(value[altFormat ? 9 : 8], \"(None)\");\n        let folderName = folder !== \"(None)\" ? folder.split(\"\\\\\").join(\"/\") : null;\n        if (folderName != null) {\n          folderName = folder.split(\" > \").join(\"/\");\n          folderName = folder.split(\">\").join(\"/\");\n        }\n        this.processFolder(result, folderName);\n        cipher.notes = this.getValueOrDefault(value[altFormat ? 5 : 3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (newVersion && this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordBossJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.items == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    results.folders.forEach((value: any) => {\n      foldersMap.set(value.id, value.name);\n    });\n    const foldersIndexMap = new Map<string, number>();\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((value: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.login.uris = this.makeUriArray(value.login_url);\n\n      if (value.folder != null && foldersIndexMap.has(value.folder)) {\n        result.folderRelationships.push([result.ciphers.length, foldersIndexMap.get(value.folder)]);\n      }\n\n      if (value.identifiers == null) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value.identifiers.notes)) {\n        cipher.notes = value.identifiers.notes.split(\"\\\\r\\\\n\").join(\"\\n\").split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (value.type === \"CreditCard\") {\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n      }\n\n      for (const property in value.identifiers) {\n        // eslint-disable-next-line\n        if (!value.identifiers.hasOwnProperty(property)) {\n          continue;\n        }\n        const valObj = value.identifiers[property];\n        const val = valObj != null ? valObj.toString() : null;\n        if (\n          this.isNullOrWhitespace(val) ||\n          property === \"notes\" ||\n          property === \"ignoreItemInSecurityScore\"\n        ) {\n          continue;\n        }\n\n        if (property === \"custom_fields\") {\n          valObj.forEach((cf: any) => {\n            this.processKvp(cipher, cf.name, cf.value);\n          });\n          continue;\n        }\n\n        if (cipher.type === CipherType.Card) {\n          if (property === \"cardNumber\") {\n            cipher.card.number = val;\n            cipher.card.brand = this.getCardBrand(val);\n            continue;\n          } else if (property === \"nameOnCard\") {\n            cipher.card.cardholderName = val;\n            continue;\n          } else if (property === \"security_code\") {\n            cipher.card.code = val;\n            continue;\n          } else if (property === \"expires\") {\n            try {\n              const expDate = new Date(val);\n              cipher.card.expYear = expDate.getFullYear().toString();\n              cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n            } catch {\n              // Ignore error\n            }\n            continue;\n          } else if (property === \"cardType\") {\n            continue;\n          }\n        } else {\n          if (\n            (property === \"username\" || property === \"email\") &&\n            this.isNullOrWhitespace(cipher.login.username)\n          ) {\n            cipher.login.username = val;\n            continue;\n          } else if (property === \"password\") {\n            cipher.login.password = val;\n            continue;\n          } else if (property === \"totp\") {\n            cipher.login.totp = val;\n            continue;\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(property) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n            continue;\n          }\n        }\n\n        this.processKvp(cipher, property, val);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordDragonXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const records = doc.querySelectorAll(\"PasswordManager > record\");\n    Array.from(records).forEach((record) => {\n      const category = this.querySelectorDirectChild(record, \"Category\");\n      const categoryText =\n        category != null &&\n        !this.isNullOrWhitespace(category.textContent) &&\n        category.textContent !== \"Unfiled\"\n          ? category.textContent\n          : null;\n      this.processFolder(result, categoryText);\n\n      const accountName = this.querySelectorDirectChild(record, \"Account-Name\");\n      const userId = this.querySelectorDirectChild(record, \"User-Id\");\n      const password = this.querySelectorDirectChild(record, \"Password\");\n      const url = this.querySelectorDirectChild(record, \"URL\");\n      const notes = this.querySelectorDirectChild(record, \"Notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name =\n        accountName != null ? this.getValueOrDefault(accountName.textContent, \"--\") : \"--\";\n      cipher.notes = notes != null ? this.getValueOrDefault(notes.textContent) : \"\";\n      cipher.login.username = userId != null ? this.getValueOrDefault(userId.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      const attributes: string[] = [];\n      for (let i = 1; i <= 10; i++) {\n        attributes.push(\"Attribute-\" + i);\n      }\n\n      this.querySelectorAllDirectChild(record, attributes.join(\",\")).forEach((attr) => {\n        if (this.isNullOrWhitespace(attr.textContent) || attr.textContent === \"null\") {\n          return;\n        }\n        this.processKvp(cipher, attr.tagName, attr.textContent);\n      });\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordSafeXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const passwordSafe = doc.querySelector(\"passwordsafe\");\n    if (passwordSafe == null) {\n      result.errorMessage = \"Missing `passwordsafe` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const notesDelimiter = passwordSafe.getAttribute(\"delimiter\");\n    const entries = doc.querySelectorAll(\"passwordsafe > entry\");\n    Array.from(entries).forEach((entry) => {\n      const group = this.querySelectorDirectChild(entry, \"group\");\n      const groupText =\n        group != null && !this.isNullOrWhitespace(group.textContent)\n          ? group.textContent.split(\".\").join(\"/\")\n          : null;\n      this.processFolder(result, groupText);\n\n      const title = this.querySelectorDirectChild(entry, \"title\");\n      const username = this.querySelectorDirectChild(entry, \"username\");\n      const email = this.querySelectorDirectChild(entry, \"email\");\n      const password = this.querySelectorDirectChild(entry, \"password\");\n      const url = this.querySelectorDirectChild(entry, \"url\");\n      const notes = this.querySelectorDirectChild(entry, \"notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name = title != null ? this.getValueOrDefault(title.textContent, \"--\") : \"--\";\n      cipher.notes =\n        notes != null\n          ? this.getValueOrDefault(notes.textContent, \"\").split(notesDelimiter).join(\"\\n\")\n          : null;\n      cipher.login.username =\n        username != null ? this.getValueOrDefault(username.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      if (this.isNullOrWhitespace(cipher.login.username) && email != null) {\n        cipher.login.username = this.getValueOrDefault(email.textContent);\n      } else if (email != null && !this.isNullOrWhitespace(email.textContent)) {\n        cipher.notes = this.isNullOrWhitespace(cipher.notes)\n          ? \"Email: \" + email.textContent\n          : cipher.notes + \"\\n\" + \"Email: \" + email.textContent;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordWalletTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 1) {\n        return;\n      }\n      if (value.length > 5) {\n        this.processFolder(result, value[5]);\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      if (value.length > 4) {\n        cipher.notes = this.getValueOrDefault(value[4], \"\").split(\"¬\").join(\"\\n\");\n      }\n      if (value.length > 2) {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n      }\n      if (value.length > 3) {\n        cipher.login.password = this.getValueOrDefault(value[3]);\n      }\n      if (value.length > 1) {\n        cipher.login.uris = this.makeUriArray(value[1]);\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  AppPasswordEntry,\n  BookmarkEntry,\n  EnvironmentVariablesEntry,\n  FoldersEntity,\n  GPGEntry,\n  NotesEntry,\n  PsonoItemTypes,\n  PsonoJsonExport,\n  TOTPEntry,\n  WebsitePasswordEntry,\n} from \"./psono-json-types\";\n\nexport class PsonoJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const psonoExport: PsonoJsonExport = JSON.parse(data);\n    if (psonoExport == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    this.parseFolders(result, psonoExport.folders);\n    this.handleItemParsing(result, psonoExport.items);\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFolders(result: ImportResult, folders: FoldersEntity[]) {\n    if (folders == null || folders.length === 0) {\n      return;\n    }\n\n    folders.forEach((folder) => {\n      if (folder.items == null || folder.items.length == 0) {\n        return;\n      }\n\n      this.processFolder(result, folder.name);\n\n      this.handleItemParsing(result, folder.items);\n    });\n  }\n\n  private handleItemParsing(result: ImportResult, items?: PsonoItemTypes[]) {\n    if (items == null || items.length === 0) {\n      return;\n    }\n\n    items.forEach((record) => {\n      const cipher = this.parsePsonoItem(record);\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n  }\n\n  private parsePsonoItem(item: PsonoItemTypes): CipherView {\n    const cipher = this.initLoginCipher();\n\n    switch (item.type) {\n      case \"website_password\":\n        this.parseWebsiteLogins(item, cipher);\n        break;\n      case \"application_password\":\n        this.parseApplicationPasswords(item, cipher);\n        break;\n      case \"environment_variables\":\n        this.parseEnvironmentVariables(item, cipher);\n        break;\n      case \"totp\":\n        this.parseTOTP(item, cipher);\n        break;\n      case \"bookmark\":\n        this.parseBookmarks(item, cipher);\n        break;\n      // Skipping this until we can save GPG into notes/custom fields\n      // case \"mail_gpg_own_key\":\n      //   this.parseGPG(item, cipher);\n      //   break;\n      case \"note\":\n        this.parseNotes(item, cipher);\n        break;\n      default:\n        break;\n    }\n\n    return cipher;\n  }\n\n  readonly WEBSITE_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"website_password_title\",\n    \"website_password_notes\",\n    \"website_password_username\",\n    \"website_password_password\",\n    \"website_password_url\",\n    \"autosubmit\",\n    \"website_password_auto_submit\",\n    \"urlfilter\",\n    \"website_password_url_filter\",\n  ]);\n  private parseWebsiteLogins(entry: WebsitePasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"website_password\") {\n      return;\n    }\n\n    cipher.name = entry.website_password_title;\n    cipher.notes = entry.website_password_notes;\n\n    cipher.login.username = entry.website_password_username;\n    cipher.login.password = entry.website_password_password;\n\n    cipher.login.uris = this.makeUriArray(entry.website_password_url);\n\n    this.processKvp(\n      cipher,\n      \"website_password_auto_submit\",\n      entry.website_password_auto_submit.toString(),\n      FieldType.Boolean\n    );\n\n    this.processKvp(cipher, \"website_password_url_filter\", entry.website_password_url_filter);\n\n    this.importUnmappedFields(cipher, entry, this.WEBSITE_mappedValues);\n  }\n\n  readonly APP_PWD_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"application_password_title\",\n    \"application_password_notes\",\n    \"application_password_username\",\n    \"application_password_password\",\n  ]);\n  private parseApplicationPasswords(entry: AppPasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"application_password\") {\n      return;\n    }\n\n    cipher.name = entry.application_password_title;\n    cipher.notes = entry.application_password_notes;\n\n    cipher.login.username = entry.application_password_username;\n    cipher.login.password = entry.application_password_password;\n\n    this.importUnmappedFields(cipher, entry, this.APP_PWD_mappedValues);\n  }\n\n  readonly BOOKMARK_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"bookmark_title\",\n    \"bookmark_notes\",\n    \"bookmark_url\",\n  ]);\n  private parseBookmarks(entry: BookmarkEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"bookmark\") {\n      return;\n    }\n\n    cipher.name = entry.bookmark_title;\n    cipher.notes = entry.bookmark_notes;\n\n    cipher.login.uris = this.makeUriArray(entry.bookmark_url);\n\n    this.importUnmappedFields(cipher, entry, this.BOOKMARK_mappedValues);\n  }\n\n  readonly NOTES_mappedValues = new Set([\"type\", \"name\", \"note_title\", \"note_notes\"]);\n  private parseNotes(entry: NotesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"note\") {\n      return;\n    }\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.note_title;\n    cipher.notes = entry.note_notes;\n\n    this.importUnmappedFields(cipher, entry, this.NOTES_mappedValues);\n  }\n\n  readonly TOTP_mappedValues = new Set([\"type\", \"name\", \"totp_title\", \"totp_notes\", \"totp_code\"]);\n  private parseTOTP(entry: TOTPEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"totp\") {\n      return;\n    }\n\n    cipher.name = entry.totp_title;\n    cipher.notes = entry.totp_notes;\n\n    cipher.login.totp = entry.totp_code;\n\n    this.importUnmappedFields(cipher, entry, this.TOTP_mappedValues);\n  }\n\n  readonly ENV_VARIABLES_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"environment_variables_title\",\n    \"environment_variables_notes\",\n    \"environment_variables_variables\",\n  ]);\n  private parseEnvironmentVariables(entry: EnvironmentVariablesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"environment_variables\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.environment_variables_title;\n    cipher.notes = entry.environment_variables_notes;\n\n    entry.environment_variables_variables.forEach((KvPair) => {\n      this.processKvp(cipher, KvPair.key, KvPair.value);\n    });\n\n    this.importUnmappedFields(cipher, entry, this.ENV_VARIABLES_mappedValues);\n  }\n\n  readonly GPG_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"mail_gpg_own_key_title\",\n    \"mail_gpg_own_key_public\",\n    \"mail_gpg_own_key_name\",\n    \"mail_gpg_own_key_email\",\n    \"mail_gpg_own_key_private\",\n  ]);\n  private parseGPG(entry: GPGEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"mail_gpg_own_key\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.mail_gpg_own_key_title;\n    cipher.notes = entry.mail_gpg_own_key_public;\n\n    this.processKvp(cipher, \"mail_gpg_own_key_name\", entry.mail_gpg_own_key_name);\n    this.processKvp(cipher, \"mail_gpg_own_key_email\", entry.mail_gpg_own_key_email);\n    this.processKvp(\n      cipher,\n      \"mail_gpg_own_key_private\",\n      entry.mail_gpg_own_key_private,\n      FieldType.Hidden\n    );\n\n    this.importUnmappedFields(cipher, entry, this.GPG_mappedValues);\n  }\n\n  private importUnmappedFields(\n    cipher: CipherView,\n    entry: PsonoItemTypes,\n    mappedValues: Set<string>\n  ) {\n    const unmappedFields = Object.keys(entry).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = entry as any;\n      this.processKvp(cipher, key, item[key].toString());\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RememBearCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.trash === \"true\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.notes);\n      if (value.type === \"LoginItem\") {\n        cipher.login.uris = this.makeUriArray(value.website);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      } else if (value.type === \"CreditCardItem\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.verification);\n\n        try {\n          const expMonth = this.getValueOrDefault(value.expiryMonth);\n          if (expMonth != null) {\n            const expMonthNumber = parseInt(expMonth, null);\n            if (expMonthNumber != null && expMonthNumber >= 1 && expMonthNumber <= 12) {\n              cipher.card.expMonth = expMonthNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n        try {\n          const expYear = this.getValueOrDefault(value.expiryYear);\n          if (expYear != null) {\n            const expYearNumber = parseInt(expYear, null);\n            if (expYearNumber != null) {\n              cipher.card.expYear = expYearNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n\n        const pin = this.getValueOrDefault(value.pin);\n        if (pin != null) {\n          this.processKvp(cipher, \"PIN\", pin);\n        }\n        const zip = this.getValueOrDefault(value.zipCode);\n        if (zip != null) {\n          this.processKvp(cipher, \"Zip Code\", zip);\n        }\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RoboFormCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let i = 1;\n    results.forEach((value) => {\n      const folder =\n        !this.isNullOrWhitespace(value.Folder) && value.Folder.startsWith(\"/\")\n          ? value.Folder.replace(\"/\", \"\")\n          : value.Folder;\n      const folderName = !this.isNullOrWhitespace(folder) ? folder : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Login);\n      cipher.login.password = this.getValueOrDefault(value.Pwd);\n      cipher.login.uris = this.makeUriArray(value.Url);\n\n      if (!this.isNullOrWhitespace(value.Rf_fields)) {\n        let fields: string[] = [value.Rf_fields];\n        if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n          fields = fields.concat(value.__parsed_extra);\n        }\n        fields.forEach((field: string) => {\n          const parts = field.split(\":\");\n          if (parts.length < 3) {\n            return;\n          }\n          const key = parts[0] === \"-no-name-\" ? null : parts[0];\n          const val = parts.length === 4 && parts[2] === \"rck\" ? parts[1] : parts[2];\n          this.processKvp(cipher, key, val);\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n\n      if (\n        i === results.length &&\n        cipher.name === \"--\" &&\n        this.isNullOrWhitespace(cipher.login.password)\n      ) {\n        return;\n      }\n\n      result.ciphers.push(cipher);\n      i++;\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafariCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url ?? value.URL);\n      cipher.login.totp = this.getValueOrDefault(value.OTPAuth);\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafeInCloudXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const db = doc.querySelector(\"database\");\n    if (db == null) {\n      result.errorMessage = \"Missing `database` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, number>();\n\n    Array.from(doc.querySelectorAll(\"database > label\")).forEach((labelEl) => {\n      const name = labelEl.getAttribute(\"name\");\n      const id = labelEl.getAttribute(\"id\");\n      if (!this.isNullOrWhitespace(name) && !this.isNullOrWhitespace(id)) {\n        foldersMap.set(id, result.folders.length);\n        const folder = new FolderView();\n        folder.name = name;\n        result.folders.push(folder);\n      }\n    });\n\n    Array.from(doc.querySelectorAll(\"database > card\")).forEach((cardEl) => {\n      if (cardEl.getAttribute(\"template\") === \"true\" || cardEl.getAttribute(\"deleted\") === \"true\") {\n        return;\n      }\n\n      const labelIdEl = this.querySelectorDirectChild(cardEl, \"label_id\");\n      if (labelIdEl != null) {\n        const labelId = labelIdEl.textContent;\n        if (!this.isNullOrWhitespace(labelId) && foldersMap.has(labelId)) {\n          result.folderRelationships.push([result.ciphers.length, foldersMap.get(labelId)]);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(cardEl.getAttribute(\"title\"), \"--\");\n\n      if (cardEl.getAttribute(\"star\") === \"true\") {\n        cipher.favorite = true;\n      }\n\n      const cardType = cardEl.getAttribute(\"type\");\n      if (cardType === \"note\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      } else {\n        Array.from(this.querySelectorAllDirectChild(cardEl, \"field\")).forEach((fieldEl) => {\n          const text = fieldEl.textContent;\n          if (this.isNullOrWhitespace(text)) {\n            return;\n          }\n          const name = fieldEl.getAttribute(\"name\");\n          const fieldType = this.getValueOrDefault(fieldEl.getAttribute(\"type\"), \"\").toLowerCase();\n          if (fieldType === \"login\") {\n            cipher.login.username = text;\n          } else if (fieldType === \"password\" || fieldType === \"secret\") {\n            // safeInCloud allows for more than one password. we just insert them here and find the one used as password later\n            this.processKvp(cipher, name, text, FieldType.Hidden);\n          } else if (fieldType === \"one_time_password\") {\n            cipher.login.totp = text;\n          } else if (fieldType === \"notes\") {\n            cipher.notes += text + \"\\n\";\n          } else if (fieldType === \"weblogin\" || fieldType === \"website\") {\n            cipher.login.uris = this.makeUriArray(text);\n          } else {\n            this.processKvp(cipher, name, text);\n          }\n        });\n      }\n\n      Array.from(this.querySelectorAllDirectChild(cardEl, \"notes\")).forEach((notesEl) => {\n        cipher.notes += notesEl.textContent + \"\\n\";\n      });\n\n      this.setPassword(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  // Choose a password from all passwords. Take one that has password in its name, or the first one if there is no such entry\n  // if its name is password, we can safely remove it form the fields. otherwise, it would maybe be best to keep it as a hidden field\n  setPassword(cipher: CipherView) {\n    const candidates = cipher.fields.filter((field) => field.type === FieldType.Hidden);\n    if (!candidates.length) {\n      return;\n    }\n\n    let choice: FieldView;\n    for (const field of candidates) {\n      if (this.passwordFieldNames.includes(field.name.toLowerCase())) {\n        choice = field;\n        cipher.fields = cipher.fields.filter((f) => f !== choice);\n        break;\n      }\n    }\n\n    if (!choice) {\n      choice = candidates[0];\n    }\n\n    cipher.login.password = choice.value;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SaferPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.nameFromUrl(value.url), \"--\");\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SecureSafeCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title);\n      cipher.notes = this.getValueOrDefault(value.Comment);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SplashIdCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      this.processFolder(result, this.getValueOrDefault(value[value.length - 1]));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 2], \"\");\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n\n      if (value[0] === \"Web Logins\" || value[0] === \"Servers\" || value[0] === \"Email Accounts\") {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n        cipher.login.password = this.getValueOrDefault(value[3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n        this.parseFieldsToNotes(cipher, 5, value);\n      } else {\n        this.parseFieldsToNotes(cipher, 2, value);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFieldsToNotes(cipher: CipherView, startIndex: number, value: any) {\n    // last 3 rows do not get parsed\n    for (let i = startIndex; i < value.length - 3; i++) {\n      if (this.isNullOrWhitespace(value[i])) {\n        continue;\n      }\n      cipher.notes += value[i] + \"\\n\";\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class StickyPasswordXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const loginNodes = doc.querySelectorAll(\"root > Database > Logins > Login\");\n    Array.from(loginNodes).forEach((loginNode) => {\n      const accountId = loginNode.getAttribute(\"ID\");\n      if (this.isNullOrWhitespace(accountId)) {\n        return;\n      }\n\n      const usernameText = loginNode.getAttribute(\"Name\");\n      const passwordText = loginNode.getAttribute(\"Password\");\n      let titleText: string = null;\n      let linkText: string = null;\n      let notesText: string = null;\n      let groupId: string = null;\n      let groupText: string = null;\n\n      const accountLogin = doc.querySelector(\n        \"root > Database > Accounts > Account > \" +\n          'LoginLinks > Login[SourceLoginID=\"' +\n          accountId +\n          '\"]'\n      );\n      if (accountLogin != null) {\n        const account = accountLogin.parentElement.parentElement;\n        if (account != null) {\n          titleText = account.getAttribute(\"Name\");\n          linkText = account.getAttribute(\"Link\");\n          groupId = account.getAttribute(\"ParentID\");\n          notesText = account.getAttribute(\"Comments\");\n          if (!this.isNullOrWhitespace(notesText)) {\n            notesText = notesText.split(\"/n\").join(\"\\n\");\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(groupId)) {\n        groupText = this.buildGroupText(doc, groupId, \"\");\n        this.processFolder(result, groupText);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(titleText, \"--\");\n      cipher.notes = this.getValueOrDefault(notesText);\n      cipher.login.username = this.getValueOrDefault(usernameText);\n      cipher.login.password = this.getValueOrDefault(passwordText);\n      cipher.login.uris = this.makeUriArray(linkText);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  buildGroupText(doc: Document, groupId: string, groupText: string): string {\n    const group = doc.querySelector('root > Database > Groups > Group[ID=\"' + groupId + '\"]');\n    if (group == null) {\n      return groupText;\n    }\n    if (!this.isNullOrWhitespace(groupText)) {\n      groupText = \"/\" + groupText;\n    }\n    groupText = group.getAttribute(\"Name\") + groupText;\n    return this.buildGroupText(doc, group.getAttribute(\"ParentID\"), groupText);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst PropertiesToIgnore = [\n  \"kind\",\n  \"autologin\",\n  \"favorite\",\n  \"hexcolor\",\n  \"protectedwithpassword\",\n  \"subdomainonly\",\n  \"type\",\n  \"tk_export_version\",\n  \"note\",\n  \"title\",\n  \"document_content\",\n];\n\nexport class TrueKeyCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.favorite, \"\").toLowerCase() === \"true\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.notes = this.getValueOrDefault(value.memo, \"\");\n      cipher.login.username = this.getValueOrDefault(value.login);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n\n      if (value.kind !== \"login\") {\n        cipher.name = this.getValueOrDefault(value.title, \"--\");\n        cipher.notes = this.getValueOrDefault(value.note, \"\");\n      }\n\n      if (value.kind === \"cc\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        if (!this.isNullOrWhitespace(value.expiryDate)) {\n          try {\n            const expDate = new Date(value.expiryDate);\n            cipher.card.expYear = expDate.getFullYear().toString();\n            cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n          } catch {\n            // Ignore error\n          }\n        }\n      } else if (value.kind !== \"login\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = this.getValueOrDefault(value.document_content, \"\");\n        }\n        for (const property in value) {\n          if (\n            value.hasOwnProperty(property) && // eslint-disable-line\n            PropertiesToIgnore.indexOf(property.toLowerCase()) < 0 &&\n            !this.isNullOrWhitespace(value[property])\n          ) {\n            this.processKvp(cipher, property, value[property]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class UpmCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length !== 5) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.notes = this.getValueOrDefault(value[4]);\n      cipher.login.username = this.getValueOrDefault(value[1]);\n      cipher.login.password = this.getValueOrDefault(value[2]);\n      cipher.login.uris = this.makeUriArray(value[3]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class YotiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User name\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ZohoVaultCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (\n        this.isNullOrWhitespace(value[\"Password Name\"]) &&\n        this.isNullOrWhitespace(value[\"Secret Name\"])\n      ) {\n        return;\n      }\n      this.processFolder(result, this.getValueOrDefault(value.ChamberName));\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite, \"0\") === \"1\";\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(\n        value[\"Password Name\"],\n        this.getValueOrDefault(value[\"Secret Name\"], \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(\n        this.getValueOrDefault(value[\"Password URL\"], this.getValueOrDefault(value[\"Secret URL\"]))\n      );\n      this.parseData(cipher, value.SecretData);\n      this.parseData(cipher, value.CustomData);\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseData(cipher: CipherView, data: string) {\n    if (this.isNullOrWhitespace(data)) {\n      return;\n    }\n    const dataLines = this.splitNewLine(data);\n    dataLines.forEach((line) => {\n      const delimPosition = line.indexOf(\":\");\n      if (delimPosition < 0) {\n        return;\n      }\n      const field = line.substring(0, delimPosition);\n      const value = line.length > delimPosition ? line.substring(delimPosition + 1) : null;\n      if (\n        this.isNullOrWhitespace(field) ||\n        this.isNullOrWhitespace(value) ||\n        field === \"SecretType\"\n      ) {\n        return;\n      }\n      const fieldLower = field.toLowerCase();\n      if (cipher.login.username == null && this.usernameFieldNames.indexOf(fieldLower) > -1) {\n        cipher.login.username = value;\n      } else if (\n        cipher.login.password == null &&\n        this.passwordFieldNames.indexOf(fieldLower) > -1\n      ) {\n        cipher.login.password = value;\n      } else {\n        this.processKvp(cipher, field, value);\n      }\n    });\n  }\n}\n","export interface ImportOption {\n  id: string;\n  name: string;\n}\n\nexport const featuredImportOptions = [\n  { id: \"bitwardenjson\", name: \"Bitwarden (json)\" },\n  { id: \"bitwardencsv\", name: \"Bitwarden (csv)\" },\n  { id: \"chromecsv\", name: \"Chrome (csv)\" },\n  { id: \"dashlanecsv\", name: \"Dashlane (csv)\" },\n  { id: \"firefoxcsv\", name: \"Firefox (csv)\" },\n  { id: \"keepass2xml\", name: \"KeePass 2 (xml)\" },\n  { id: \"lastpasscsv\", name: \"LastPass (csv)\" },\n  { id: \"safaricsv\", name: \"Safari and macOS (csv)\" },\n  { id: \"1password1pux\", name: \"1Password (1pux)\" },\n] as const;\n\nexport const regularImportOptions = [\n  { id: \"keepassxcsv\", name: \"KeePassX (csv)\" },\n  { id: \"1password1pif\", name: \"1Password (1pif)\" },\n  { id: \"1passwordwincsv\", name: \"1Password 6 and 7 Windows (csv)\" },\n  { id: \"1passwordmaccsv\", name: \"1Password 6 and 7 Mac (csv)\" },\n  { id: \"dashlanejson\", name: \"Dashlane (json)\" },\n  { id: \"roboformcsv\", name: \"RoboForm (csv)\" },\n  { id: \"keepercsv\", name: \"Keeper (csv)\" },\n  // Temporarily remove this option for the Feb release\n  // { id: \"keeperjson\", name: \"Keeper (json)\" },\n  { id: \"enpasscsv\", name: \"Enpass (csv)\" },\n  { id: \"enpassjson\", name: \"Enpass (json)\" },\n  { id: \"safeincloudxml\", name: \"SafeInCloud (xml)\" },\n  { id: \"pwsafexml\", name: \"Password Safe (xml)\" },\n  { id: \"stickypasswordxml\", name: \"Sticky Password (xml)\" },\n  { id: \"msecurecsv\", name: \"mSecure (csv)\" },\n  { id: \"truekeycsv\", name: \"True Key (csv)\" },\n  { id: \"passwordbossjson\", name: \"Password Boss (json)\" },\n  { id: \"zohovaultcsv\", name: \"Zoho Vault (csv)\" },\n  { id: \"splashidcsv\", name: \"SplashID (csv)\" },\n  { id: \"passworddragonxml\", name: \"Password Dragon (xml)\" },\n  { id: \"padlockcsv\", name: \"Padlock (csv)\" },\n  { id: \"passboltcsv\", name: \"Passbolt (csv)\" },\n  { id: \"clipperzhtml\", name: \"Clipperz (html)\" },\n  { id: \"aviracsv\", name: \"Avira (csv)\" },\n  { id: \"saferpasscsv\", name: \"SaferPass (csv)\" },\n  { id: \"upmcsv\", name: \"Universal Password Manager (csv)\" },\n  { id: \"ascendocsv\", name: \"Ascendo DataVault (csv)\" },\n  { id: \"meldiumcsv\", name: \"Meldium (csv)\" },\n  { id: \"passkeepcsv\", name: \"PassKeep (csv)\" },\n  { id: \"operacsv\", name: \"Opera (csv)\" },\n  { id: \"vivaldicsv\", name: \"Vivaldi (csv)\" },\n  { id: \"gnomejson\", name: \"GNOME Passwords and Keys/Seahorse (json)\" },\n  { id: \"blurcsv\", name: \"Blur (csv)\" },\n  { id: \"passwordagentcsv\", name: \"Password Agent (csv)\" },\n  { id: \"passpackcsv\", name: \"Passpack (csv)\" },\n  { id: \"passmanjson\", name: \"Passman (json)\" },\n  { id: \"avastcsv\", name: \"Avast Passwords (csv)\" },\n  { id: \"avastjson\", name: \"Avast Passwords (json)\" },\n  { id: \"fsecurefsk\", name: \"F-Secure KEY (fsk)\" },\n  { id: \"kasperskytxt\", name: \"Kaspersky Password Manager (txt)\" },\n  { id: \"remembearcsv\", name: \"RememBear (csv)\" },\n  { id: \"passwordwallettxt\", name: \"PasswordWallet (txt)\" },\n  { id: \"mykicsv\", name: \"Myki (csv)\" },\n  { id: \"securesafecsv\", name: \"SecureSafe (csv)\" },\n  { id: \"logmeoncecsv\", name: \"LogMeOnce (csv)\" },\n  { id: \"blackberrycsv\", name: \"BlackBerry Password Keeper (csv)\" },\n  { id: \"buttercupcsv\", name: \"Buttercup (csv)\" },\n  { id: \"codebookcsv\", name: \"Codebook (csv)\" },\n  { id: \"encryptrcsv\", name: \"Encryptr (csv)\" },\n  { id: \"yoticsv\", name: \"Yoti (csv)\" },\n  { id: \"nordpasscsv\", name: \"Nordpass (csv)\" },\n  { id: \"psonojson\", name: \"Psono (json)\" },\n  { id: \"passkyjson\", name: \"Passky (json)\" },\n] as const;\n\nexport type ImportType =\n  | (typeof featuredImportOptions)[number][\"id\"]\n  | (typeof regularImportOptions)[number][\"id\"];\n","import { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { CollectionService } from \"@bitwarden/common/admin-console/abstractions/collection.service\";\nimport { CollectionWithIdRequest } from \"@bitwarden/common/admin-console/models/request/collection-with-id.request\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\nimport { KvpRequest } from \"@bitwarden/common/models/request/kvp.request\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherRequest } from \"@bitwarden/common/vault/models/request/cipher.request\";\nimport { FolderWithIdRequest } from \"@bitwarden/common/vault/models/request/folder-with-id.request\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport {\n  AscendoCsvImporter,\n  AvastCsvImporter,\n  AvastJsonImporter,\n  AviraCsvImporter,\n  BitwardenCsvImporter,\n  BitwardenPasswordProtectedImporter,\n  BlackBerryCsvImporter,\n  BlurCsvImporter,\n  ButtercupCsvImporter,\n  ChromeCsvImporter,\n  ClipperzHtmlImporter,\n  CodebookCsvImporter,\n  DashlaneCsvImporter,\n  DashlaneJsonImporter,\n  EncryptrCsvImporter,\n  EnpassCsvImporter,\n  EnpassJsonImporter,\n  FirefoxCsvImporter,\n  FSecureFskImporter,\n  GnomeJsonImporter,\n  KasperskyTxtImporter,\n  KeePass2XmlImporter,\n  KeePassXCsvImporter,\n  KeeperCsvImporter,\n  // KeeperJsonImporter,\n  LastPassCsvImporter,\n  LogMeOnceCsvImporter,\n  MSecureCsvImporter,\n  MeldiumCsvImporter,\n  MykiCsvImporter,\n  NordPassCsvImporter,\n  OnePassword1PifImporter,\n  OnePassword1PuxImporter,\n  OnePasswordMacCsvImporter,\n  OnePasswordWinCsvImporter,\n  PadlockCsvImporter,\n  PassKeepCsvImporter,\n  PasskyJsonImporter,\n  PassmanJsonImporter,\n  PasspackCsvImporter,\n  PasswordAgentCsvImporter,\n  PasswordBossJsonImporter,\n  PasswordDragonXmlImporter,\n  PasswordSafeXmlImporter,\n  PasswordWalletTxtImporter,\n  PsonoJsonImporter,\n  RememBearCsvImporter,\n  RoboFormCsvImporter,\n  SafariCsvImporter,\n  SafeInCloudXmlImporter,\n  SaferPassCsvImporter,\n  SecureSafeCsvImporter,\n  SplashIdCsvImporter,\n  StickyPasswordXmlImporter,\n  TrueKeyCsvImporter,\n  UpmCsvImporter,\n  YotiCsvImporter,\n  ZohoVaultCsvImporter,\n} from \"../importers\";\nimport { Importer } from \"../importers/importer\";\nimport {\n  featuredImportOptions,\n  ImportOption,\n  ImportType,\n  regularImportOptions,\n} from \"../models/import-options\";\nimport { ImportResult } from \"../models/import-result\";\nimport { ImportApiServiceAbstraction } from \"../services/import-api.service.abstraction\";\nimport { ImportServiceAbstraction } from \"../services/import.service.abstraction\";\n\nexport class ImportService implements ImportServiceAbstraction {\n  featuredImportOptions = featuredImportOptions as readonly ImportOption[];\n\n  regularImportOptions = regularImportOptions as readonly ImportOption[];\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private importApiService: ImportApiServiceAbstraction,\n    private i18nService: I18nService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService\n  ) {}\n\n  getImportOptions(): ImportOption[] {\n    return this.featuredImportOptions.concat(this.regularImportOptions);\n  }\n\n  async import(\n    importer: Importer,\n    fileContents: string,\n    organizationId: string = null\n  ): Promise<ImportResult> {\n    const importResult = await importer.parse(fileContents);\n    if (!importResult.success) {\n      if (!Utils.isNullOrWhitespace(importResult.errorMessage)) {\n        throw new Error(importResult.errorMessage);\n      }\n      throw new Error(this.i18nService.t(\"importFormatError\"));\n    }\n\n    if (importResult.folders.length === 0 && importResult.ciphers.length === 0) {\n      throw new Error(this.i18nService.t(\"importNothingError\"));\n    }\n\n    if (importResult.ciphers.length > 0) {\n      const halfway = Math.floor(importResult.ciphers.length / 2);\n      const last = importResult.ciphers.length - 1;\n\n      if (\n        this.badData(importResult.ciphers[0]) &&\n        this.badData(importResult.ciphers[halfway]) &&\n        this.badData(importResult.ciphers[last])\n      ) {\n        throw new Error(this.i18nService.t(\"importFormatError\"));\n      }\n    }\n\n    try {\n      if (organizationId != null) {\n        await this.handleOrganizationalImport(importResult, organizationId);\n      } else {\n        await this.handleIndividualImport(importResult);\n      }\n    } catch (error) {\n      const errorResponse = new ErrorResponse(error, 400);\n      throw this.handleServerError(errorResponse, importResult);\n    }\n    return importResult;\n  }\n\n  getImporter(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>,\n    organizationId: string = null\n  ): Importer {\n    if (promptForPassword_callback == null) {\n      return null;\n    }\n\n    const importer = this.getImporterInstance(format, promptForPassword_callback);\n    if (importer == null) {\n      return null;\n    }\n    importer.organizationId = organizationId;\n    return importer;\n  }\n\n  private getImporterInstance(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>\n  ) {\n    if (format == null) {\n      return null;\n    }\n\n    switch (format) {\n      case \"bitwardencsv\":\n        return new BitwardenCsvImporter();\n      case \"bitwardenjson\":\n      case \"bitwardenpasswordprotected\":\n        return new BitwardenPasswordProtectedImporter(\n          this.cryptoService,\n          this.i18nService,\n          promptForPassword_callback\n        );\n      case \"lastpasscsv\":\n      case \"passboltcsv\":\n        return new LastPassCsvImporter();\n      case \"keepassxcsv\":\n        return new KeePassXCsvImporter();\n      case \"aviracsv\":\n        return new AviraCsvImporter();\n      case \"blurcsv\":\n        return new BlurCsvImporter();\n      case \"safeincloudxml\":\n        return new SafeInCloudXmlImporter();\n      case \"padlockcsv\":\n        return new PadlockCsvImporter();\n      case \"keepass2xml\":\n        return new KeePass2XmlImporter();\n      case \"chromecsv\":\n      case \"operacsv\":\n      case \"vivaldicsv\":\n        return new ChromeCsvImporter();\n      case \"firefoxcsv\":\n        return new FirefoxCsvImporter();\n      case \"upmcsv\":\n        return new UpmCsvImporter();\n      case \"saferpasscsv\":\n        return new SaferPassCsvImporter();\n      case \"safaricsv\":\n        return new SafariCsvImporter();\n      case \"meldiumcsv\":\n        return new MeldiumCsvImporter();\n      case \"1password1pif\":\n        return new OnePassword1PifImporter();\n      case \"1password1pux\":\n        return new OnePassword1PuxImporter();\n      case \"1passwordwincsv\":\n        return new OnePasswordWinCsvImporter();\n      case \"1passwordmaccsv\":\n        return new OnePasswordMacCsvImporter();\n      case \"keepercsv\":\n        return new KeeperCsvImporter();\n      // case \"keeperjson\":\n      //   return new KeeperJsonImporter();\n      case \"passworddragonxml\":\n        return new PasswordDragonXmlImporter();\n      case \"enpasscsv\":\n        return new EnpassCsvImporter();\n      case \"enpassjson\":\n        return new EnpassJsonImporter();\n      case \"pwsafexml\":\n        return new PasswordSafeXmlImporter();\n      case \"dashlanecsv\":\n        return new DashlaneCsvImporter();\n      case \"dashlanejson\":\n        return new DashlaneJsonImporter();\n      case \"msecurecsv\":\n        return new MSecureCsvImporter();\n      case \"stickypasswordxml\":\n        return new StickyPasswordXmlImporter();\n      case \"truekeycsv\":\n        return new TrueKeyCsvImporter();\n      case \"clipperzhtml\":\n        return new ClipperzHtmlImporter();\n      case \"roboformcsv\":\n        return new RoboFormCsvImporter();\n      case \"ascendocsv\":\n        return new AscendoCsvImporter();\n      case \"passwordbossjson\":\n        return new PasswordBossJsonImporter();\n      case \"zohovaultcsv\":\n        return new ZohoVaultCsvImporter();\n      case \"splashidcsv\":\n        return new SplashIdCsvImporter();\n      case \"passkeepcsv\":\n        return new PassKeepCsvImporter();\n      case \"gnomejson\":\n        return new GnomeJsonImporter();\n      case \"passwordagentcsv\":\n        return new PasswordAgentCsvImporter();\n      case \"passpackcsv\":\n        return new PasspackCsvImporter();\n      case \"passmanjson\":\n        return new PassmanJsonImporter();\n      case \"avastcsv\":\n        return new AvastCsvImporter();\n      case \"avastjson\":\n        return new AvastJsonImporter();\n      case \"fsecurefsk\":\n        return new FSecureFskImporter();\n      case \"kasperskytxt\":\n        return new KasperskyTxtImporter();\n      case \"remembearcsv\":\n        return new RememBearCsvImporter();\n      case \"passwordwallettxt\":\n        return new PasswordWalletTxtImporter();\n      case \"mykicsv\":\n        return new MykiCsvImporter();\n      case \"securesafecsv\":\n        return new SecureSafeCsvImporter();\n      case \"logmeoncecsv\":\n        return new LogMeOnceCsvImporter();\n      case \"blackberrycsv\":\n        return new BlackBerryCsvImporter();\n      case \"buttercupcsv\":\n        return new ButtercupCsvImporter();\n      case \"codebookcsv\":\n        return new CodebookCsvImporter();\n      case \"encryptrcsv\":\n        return new EncryptrCsvImporter();\n      case \"yoticsv\":\n        return new YotiCsvImporter();\n      case \"nordpasscsv\":\n        return new NordPassCsvImporter();\n      case \"psonojson\":\n        return new PsonoJsonImporter();\n      case \"passkyjson\":\n        return new PasskyJsonImporter();\n      default:\n        return null;\n    }\n  }\n\n  private async handleIndividualImport(importResult: ImportResult) {\n    const request = new ImportCiphersRequest();\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.folders != null) {\n      for (let i = 0; i < importResult.folders.length; i++) {\n        const f = await this.folderService.encrypt(importResult.folders[i]);\n        request.folders.push(new FolderWithIdRequest(f));\n      }\n    }\n    if (importResult.folderRelationships != null) {\n      importResult.folderRelationships.forEach((r) =>\n        request.folderRelationships.push(new KvpRequest(r[0], r[1]))\n      );\n    }\n    return await this.importApiService.postImportCiphers(request);\n  }\n\n  private async handleOrganizationalImport(importResult: ImportResult, organizationId: string) {\n    const request = new ImportOrganizationCiphersRequest();\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      importResult.ciphers[i].organizationId = organizationId;\n      const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.collections != null) {\n      for (let i = 0; i < importResult.collections.length; i++) {\n        importResult.collections[i].organizationId = organizationId;\n        const c = await this.collectionService.encrypt(importResult.collections[i]);\n        request.collections.push(new CollectionWithIdRequest(c));\n      }\n    }\n    if (importResult.collectionRelationships != null) {\n      importResult.collectionRelationships.forEach((r) =>\n        request.collectionRelationships.push(new KvpRequest(r[0], r[1]))\n      );\n    }\n    return await this.importApiService.postImportOrganizationCiphers(organizationId, request);\n  }\n\n  private badData(c: CipherView) {\n    return (\n      (c.name == null || c.name === \"--\") &&\n      c.type === CipherType.Login &&\n      c.login != null &&\n      Utils.isNullOrWhitespace(c.login.password)\n    );\n  }\n\n  private handleServerError(errorResponse: ErrorResponse, importResult: ImportResult): Error {\n    if (errorResponse.validationErrors == null) {\n      return new Error(errorResponse.message);\n    }\n\n    let errorMessage = \"\";\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const i = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Ciphers\":\n          item = importResult.ciphers[i];\n          itemType = CipherType[item.type];\n          break;\n        case \"Folders\":\n          item = importResult.folders[i];\n          itemType = \"Folder\";\n          break;\n        case \"Collections\":\n          item = importResult.collections[i];\n          itemType = \"Collection\";\n          break;\n        default:\n          return;\n      }\n\n      if (index > 0) {\n        errorMessage += \"\\n\\n\";\n      }\n\n      if (itemType !== \"Folder\" && itemType !== \"Collection\") {\n        errorMessage += \"[\" + (i + 1) + \"] \";\n      }\n\n      errorMessage += \"[\" + itemType + '] \"' + item.name + '\": ' + value;\n    });\n\n    return new Error(errorMessage);\n  }\n}\n"],"names":["disabledByPolicy","this","_disabledByPolicy","constructor","cryptoService","i18nService","platformUtilsService","exportService","eventCollectionService","policyService","win","logService","userVerificationService","formBuilder","fileDownloadService","dialogService","onSaved","exportForm","group","format","secret","filePassword","confirmFilePassword","fileEncryptionType","formatOptions","name","value","destroy$","Subject","ngOnInit","policyAppliesToActiveUser$","pipe","takeUntil","subscribe","policyAppliesToActiveUser","disable","merge","get","valueChanges","startWith","adjustValidators","ngOnDestroy","next","encryptedFormat","doExport","formPromise","getExportData","data","downloadFile","saved","collectEvent","setValue","clearValidators","e","error","submit","showToast","t","warningDialog","verifyUser","message","openSimpleDialog","title","key","content","acceptButtonText","type","emit","getPasswordProtectedExport","getExport","getFileName","prefix","extension","collect","reset","controls","enable","csv","fileName","download","blobData","blobOptions","ExportComponent","modalService","super","window","encryptedExportType","isFileEncryptedExport","markAllAsTouched","valid","confirmDescription","isAccountEncryptedExport","ref","open","allowMultipleModals","confirmButtonText","modalTitle","onClosedPromise","ImportSuccessDialogComponent","dialogRef","dataSource","buildResultList","logins","cards","identities","secureNotes","ciphers","map","c","list","push","icon","count","folders","length","collections","FilePasswordPromptComponent","modalRef","markAsTouched","close","cancel","ImportComponent","importService","router","syncService","loading","organizationId","_importBlockedByPolicy","importBlockedByPolicy","onSuccessfulImport","navigate","setImportOptions","importer","getImporter","getFilePassword","files","document","getElementById","fileContents","getFileContents","result","import","fullSync","getFormatInstructionTitle","results","featuredImportOptions","concat","importOptions","filter","o","id","regularImportOptions","sort","a","b","collator","compare","localeCompare","setSelectedFile","event","fileInputEl","target","fileSelected","heightAuto","buttonsStyling","iconHtml","input","inputValue","inputAttributes","readonly","titleText","text","showConfirmButton","onOpen","popupEl","querySelector","scrollTo","file","extract1PuxContent","Promise","resolve","reject","reader","FileReader","readAsText","onload","evt","pre","DOMParser","parseFromString","textContent","onerror","loadAsync","then","zip","async","complete","BoxRowDirective","elRef","el","nativeElement","formEls","Array","from","querySelectorAll","forEach","formEl","addEventListener","classList","add","remove","onClick","contains","tagName","toLowerCase","inputEl","click","focus","ExportScopeCalloutComponent","organizationService","stateService","show","hasOrganizations","scopeConfig","description","scopeIdentifier","getEmail","ImportApiServiceAbstraction","ImportApiService","apiService","postImportCiphers","request","send","postImportOrganizationCiphers","ImportServiceAbstraction","CollectionWithIdRequest","collection","ImportCiphersRequest","folderRelationships","ImportOrganizationCiphersRequest","collectionRelationships","KvpRequest","success","newLineRegex","passwordFieldNames","usernameFieldNames","notesFieldNames","uriFieldNames","parseCsvOptions","encoding","skipEmptyLines","organization","parseXml","doc","parseCsv","header","options","parseOptions","Object","assign","splitNewLine","join","trim","errors","row","warning","parseSingleRowCsv","rowData","isNullOrWhitespace","parsedRow","makeUriArray","uri","loginUri","fixUri","match","returnArr","u","indexOf","substring","nameFromUrl","url","hostname","startsWith","replace","str","getValueOrDefault","defaultValue","split","getCardBrand","cardNum","re","RegExp","test","setCardExpiration","cipher","expiration","expiryRegex","expiryMatch","card","expMonth","groups","month","year","expYear","moveFoldersToCollections","r","f","querySelectorDirectChild","parentEl","query","els","querySelectorAllDirectChild","parentNode","initLoginCipher","favorite","notes","fields","login","cleanupCipher","processKvp","search","field","processFolder","folderName","folderIndex","addFolder","i","convertToNoteIfNeeded","username","password","uris","secureNote","processFullName","fullName","nameParts","identity","firstName","lastName","middleName","slice","AscendoCsvImporter","parse","val","fieldLower","AvastCsvImporter","web","AvastJsonImporter","JSON","custName","note","pwd","loginName","label","cardholderName","holderName","number","cardNumber","code","cvv","brand","expirationDate","AviraCsvImporter","website","secondary_username","BlackBerryCsvImporter","grouping","fav","extra","ChromeCsvImporter","androidPatternRegex","BitwardenCsvImporter","col","addCollection","collectionIndex","folder","reprompt","parseInt","console","delimPosition","lastIndexOf","substr","totp","login_totp","login_username","login_password","login_uri","BitwardenJsonImporter","items","encrypted","parseEncrypted","parseDecrypted","encKeyValidation_DO_NOT_EDIT","orgKey","getOrgKey","encKeyValidation","decryptToUtf8","errorMessage","groupingsMap","Map","view","decrypt","set","collectionIds","passwordHistory","folderId","has","cId","BitwardenPasswordProtectedImporter","promptForPassword_callback","parsedData","passwordProtected","cannotParseFile","checkPassword","encData","clearTextData","jdoc","makePinKey","salt","kdfType","kdfIterations","kdfMemory","kdfParallelism","BlurCsvImporter","domain","email","OfficialProps","ButtercupCsvImporter","URL","processingCustomFields","prop","hasOwnProperty","ClipperzHtmlImporter","textarea","entry","currentVersion","property","actionType","labelLower","CodebookCsvImporter","Category","Favorite","Entry","Note","Username","Email","Password","TOTP","Website","Phone","PIN","Account","Date","_mappedCredentialsColumns","Set","_mappedPersonalInfoAsIdentityColumns","_mappedSecureNoteColumns","DashlaneCsvImporter","x","parsePersonalInformationRecordAsIdentity","rowKeys","keys","category","parseCredentialsRecord","parsePaymentRecord","parseIdRecord","parsePersonalInformationRecord","parseSecureNoteRecords","otpSecret","importUnmappedFields","account_name","mappedValues","cc_number","expiration_month","expiration_year","account_holder","account_number","licenseNumber","passportNumber","state","ssn","first_name","middle_name","last_name","item_name","dataRow","phone","phone_number","address1","address","city","postalCode","country","item","HandledResults","DashlaneJsonImporter","ADDRESS","processAddress","AUTHENTIFIANT","processAuth","BANKSTATEMENT","processNote","IDCARD","PAYMENTMEANS_CREDITCARD","processCard","IDENTITY","processIdentity","credential","secondaryLogin","obj","pseudo","addressName","addressFull","zipcode","toUpperCase","bank","owner","nameProperty","toString","EncryptrCsvImporter","Label","Notes","Text","CVV","expiry","Expiry","expParts","EnpassCsvImporter","firstRow","containsField","fieldValue","fieldName","fieldNameLower","androidUrlRegex","EnpassJsonImporter","foldersMap","foldersIndexMap","folderTree","buildFolderTree","flattenFolderTree","template_type","processLogin","some","urls","cleanedValue","sensitive","uuid","children","parent_uuid","titlePrefix","tree","FirefoxCsvImporter","FskEntryTypesEnum","FSecureFskImporter","parseEntry","service","Login","handleLoginEntry","CreditCard","handleCreditCardEntry","creditNumber","creditCvv","creditExpiry","GnomeJsonImporter","keyRing","display_name","attributes","username_value","attr","NotesHeader","ApplicationsHeader","WebsitesHeader","Delimiter","KasperskyTxtImporter","notesData","applicationsData","websitesData","workingData","parts","parseDataCategory","applications","websites","n","w","nameKey","p","itemComment","itemCommentKey","l","colonIndex","size","KeePass2XmlImporter","KeePassFileNode","RootNode","rootGroup","traverse","node","isRootNode","groupPrefixName","groupName","nameEl","cipherIndex","entryString","valueEl","keyEl","attrs","ProtectInMemory","KeePassXCsvImporter","Title","Group","KeeperCsvImporter","LastPassCsvImporter","hasFolder","buildBaseCipher","parseSecureNote","parseCard","parseIdentity","ccnum","cardCipher","profilename","firstname","lastname","ccname","cccsc","ccexp","ccexpParts","middlename","company","address2","address3","charAt","extraParts","processedNote","typeParts","mappedData","parseSecureNoteMapping","Number","undefined","monthString","getMonth","isNaN","Company","State","Country","dataObj","processingNotes","extraPart","LogMeOnceCsvImporter","MeldiumCsvImporter","DisplayName","UserName","Url","MSecureCsvImporter","mappedBaseColumns","_mappedUserAccountColumns","_mappedCreditCardColumns","_mappedIdentityColumns","_mappedIdCardColumns","_mappedTwoFaColumns","_mappedUserNoteColumns","MykiCsvImporter","nickname","additionalInfo","twofaSecret","authToken","cardName","exp_month","exp_year","firstAddressLine","secondAddressLine","zipCode","idType","idName","idCountry","idNumber","NordPassCsvImporter","record","recordType","evaluateType","cardholdername","cardnumber","cvc","expirydate","full_name","CategoryEnum","LoginFieldTypeEnum","OnePassword1PifImporter","line","trashed","hmac","processStandardItem","processWinOpVaultItem","overview","URLs","details","parsePasswordHistory","notesPlain","parseFields","sections","section","openContents","faveIndex","typeName","location","secureContents","maxSize","h","time","ph","lastUsedDate","designationKey","valueKey","k","toUTCString","fieldDesignation","street","fieldType","OnePassword1PuxImporter","accounts","vaults","vault","categoryUuid","Database","WirelessRouter","Server","API_Credential","BankAccount","SecureNote","SoftwareLicense","EmailAccount","MedicalRecord","Identity","DriversLicense","OutdoorLicense","Membership","Passport","RewardsProgram","SocialSecurityNumber","favIndex","processOverview","processLoginFields","processDetails","processSections","tags","capitalize","inputString","loginFields","loginField","designation","CheckBox","parseSectionFields","anyField","getFieldName","extractValue","fillLogin","fillApiCredentials","fillCreditCard","fillBankAccount","fillIdentity","fillDriversLicense","fillOutdoorLicense","fillMembership","fillPassport","fillRewardsProgram","fillSSN","email_address","provider","guarded","date","monthYear","historyItems","CipherImportContext","importRecord","lowerProperty","IgnoredProperties","OnePasswordCsvImporter","loginPropertyParsers","setLoginUsername","setLoginPassword","setLoginUris","creditCardPropertyParsers","setCreditCardNumber","setCreditCardVerification","setCreditCardCardholderName","setCreditCardExpiry","identityPropertyParsers","setIdentityFirstName","setIdentityInitial","setIdentityLastName","setIdentityUserName","setIdentityEmail","setIdentityPhone","setIdentityCompany","quoteChar","escapeChar","getProp","setNotes","setCipherType","altUsername","context","setKnownLoginValue","setKnownCreditCardValue","setKnownIdentityValue","setUnknownValue","entries","reduce","agg","getPropByRegexp","regexp","matchingKeys","getPropIncluding","includesMap","includes","func","bind","readableDate","OnePasswordMacCsvImporter","OnePasswordWinCsvImporter","setIdentityAddress","expSplit","PadlockCsvImporter","headers","v","tag","PassKeepCsvImporter","getValue","PasskyJsonImporter","passkyExport","passwords","PassmanJsonImporter","otp","custom_fields","customField","field_type","PasspackCsvImporter","tagsJson","Tags","tagJson","__parsed_extra","fieldsJson","extraFields","fieldJson","PasswordAgentCsvImporter","newVersion","altFormat","PasswordBossJsonImporter","login_url","identifiers","valObj","expDate","getFullYear","cf","PasswordDragonXmlImporter","records","categoryText","accountName","userId","PasswordSafeXmlImporter","passwordSafe","notesDelimiter","getAttribute","groupText","PasswordWalletTxtImporter","PsonoJsonImporter","WEBSITE_mappedValues","APP_PWD_mappedValues","BOOKMARK_mappedValues","NOTES_mappedValues","TOTP_mappedValues","ENV_VARIABLES_mappedValues","GPG_mappedValues","psonoExport","parseFolders","handleItemParsing","parsePsonoItem","parseWebsiteLogins","parseApplicationPasswords","parseEnvironmentVariables","parseTOTP","parseBookmarks","parseNotes","website_password_title","website_password_notes","website_password_username","website_password_password","website_password_url","website_password_auto_submit","website_password_url_filter","application_password_title","application_password_notes","application_password_username","application_password_password","bookmark_title","bookmark_notes","bookmark_url","note_title","note_notes","totp_title","totp_notes","totp_code","environment_variables_title","environment_variables_notes","environment_variables_variables","KvPair","parseGPG","mail_gpg_own_key_title","mail_gpg_own_key_public","mail_gpg_own_key_name","mail_gpg_own_key_email","mail_gpg_own_key_private","RememBearCsvImporter","trash","cardholder","verification","expiryMonth","expMonthNumber","expiryYear","expYearNumber","pin","RoboFormCsvImporter","Folder","Name","Pwd","Rf_fields","SafariCsvImporter","OTPAuth","SafeInCloudXmlImporter","labelEl","cardEl","labelIdEl","labelId","fieldEl","notesEl","setPassword","candidates","choice","SaferPassCsvImporter","SecureSafeCsvImporter","Comment","SplashIdCsvImporter","parseFieldsToNotes","startIndex","StickyPasswordXmlImporter","loginNodes","loginNode","accountId","usernameText","passwordText","linkText","notesText","groupId","accountLogin","account","parentElement","buildGroupText","PropertiesToIgnore","TrueKeyCsvImporter","memo","kind","expiryDate","document_content","UpmCsvImporter","YotiCsvImporter","ZohoVaultCsvImporter","ChamberName","parseData","SecretData","CustomData","ImportService","cipherService","folderService","importApiService","collectionService","getImportOptions","importResult","Error","halfway","Math","floor","last","badData","handleOrganizationalImport","handleIndividualImport","errorResponse","handleServerError","getImporterInstance","encrypt","validationErrors","index","itemType"],"sourceRoot":""}