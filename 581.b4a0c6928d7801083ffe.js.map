{"version":3,"file":"581.b4a0c6928d7801083ffe.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/import-success-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/import-success-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/file-password-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/file-password-prompt.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/directives/box-row.directive.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export-scope-callout.component.html","webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export-scope-callout.component.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import-api.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import-api.service.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-organization-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/kvp.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/request/collection-with-id.request.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-result.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/base-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/ascendo-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avast/avast-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avast/avast-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avira-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/blackberry-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/chrome-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-password-protected-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/blur-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/buttercup-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/clipperz-html-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/codebook-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/dashlane/dashlane-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/dashlane/dashlane-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/encryptr-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/enpass/enpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/enpass/enpass-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/firefox-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/fsecure/fsecure-fsk-types.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/fsecure/fsecure-fsk-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/gnome-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/kaspersky-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keepass2-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keepassx-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keeper/keeper-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/logmeonce-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/meldium-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/msecure-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/myki-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/nordpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/types/onepassword-1pux-importer-types.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-1pif-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-1pux-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/cipher-import-context.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-mac-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-win-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/padlock-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passkeep-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passky/passky-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passman-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passpack-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordagent-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordboss-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passworddragon-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordsafe-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordwallet-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/psono/psono-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/remembear-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/roboform-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/safari-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/safeincloud-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/saferpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/securesafe-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/splashid-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/stickypassword-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/truekey-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/upm-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/yoti-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/zohovault-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-options.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import.service.ts"],"sourcesContent":["import { Directive, EventEmitter, OnDestroy, OnInit, Output } from \"@angular/core\";\nimport { UntypedFormBuilder, Validators } from \"@angular/forms\";\nimport { merge, startWith, Subject, takeUntil } from \"rxjs\";\n\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { EncryptedExportType, EventType } from \"@bitwarden/common/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { VaultExportServiceAbstraction } from \"@bitwarden/exporter/vault-export\";\n\nimport { DialogServiceAbstraction, SimpleDialogType } from \"../../../services/dialog\";\n\n@Directive()\nexport class ExportComponent implements OnInit, OnDestroy {\n  @Output() onSaved = new EventEmitter();\n\n  formPromise: Promise<string>;\n  private _disabledByPolicy = false;\n\n  protected get disabledByPolicy(): boolean {\n    return this._disabledByPolicy;\n  }\n\n  exportForm = this.formBuilder.group({\n    format: [\"json\"],\n    secret: [\"\"],\n    filePassword: [\"\", Validators.required],\n    confirmFilePassword: [\"\", Validators.required],\n    fileEncryptionType: [EncryptedExportType.AccountEncrypted],\n  });\n\n  formatOptions = [\n    { name: \".json\", value: \"json\" },\n    { name: \".csv\", value: \"csv\" },\n    { name: \".json (Encrypted)\", value: \"encrypted_json\" },\n  ];\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected exportService: VaultExportServiceAbstraction,\n    protected eventCollectionService: EventCollectionService,\n    private policyService: PolicyService,\n    protected win: Window,\n    private logService: LogService,\n    private userVerificationService: UserVerificationService,\n    private formBuilder: UntypedFormBuilder,\n    protected fileDownloadService: FileDownloadService,\n    protected dialogService: DialogServiceAbstraction\n  ) {}\n\n  async ngOnInit() {\n    this.policyService\n      .policyAppliesToActiveUser$(PolicyType.DisablePersonalVaultExport)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((policyAppliesToActiveUser) => {\n        this._disabledByPolicy = policyAppliesToActiveUser;\n        if (this.disabledByPolicy) {\n          this.exportForm.disable();\n        }\n      });\n\n    merge(\n      this.exportForm.get(\"format\").valueChanges,\n      this.exportForm.get(\"fileEncryptionType\").valueChanges\n    )\n      .pipe(takeUntil(this.destroy$))\n      .pipe(startWith(0))\n      .subscribe(() => this.adjustValidators());\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n  }\n\n  get encryptedFormat() {\n    return this.format === \"encrypted_json\";\n  }\n\n  protected async doExport() {\n    try {\n      this.formPromise = this.getExportData();\n      const data = await this.formPromise;\n      this.downloadFile(data);\n      this.saved();\n      await this.collectEvent();\n      this.exportForm.get(\"secret\").setValue(\"\");\n      this.exportForm.clearValidators();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async submit() {\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const acceptedWarning = await this.warningDialog();\n    if (!acceptedWarning) {\n      return;\n    }\n    const secret = this.exportForm.get(\"secret\").value;\n\n    try {\n      await this.userVerificationService.verifyUser(secret);\n    } catch (e) {\n      this.platformUtilsService.showToast(\"error\", this.i18nService.t(\"errorOccurred\"), e.message);\n      return;\n    }\n\n    this.doExport();\n  }\n\n  async warningDialog() {\n    if (this.encryptedFormat) {\n      return await this.dialogService.openSimpleDialog({\n        title: { key: \"confirmVaultExport\" },\n        content:\n          this.i18nService.t(\"encExportKeyWarningDesc\") +\n          \" \" +\n          this.i18nService.t(\"encExportAccountWarningDesc\"),\n        acceptButtonText: { key: \"exportVault\" },\n        type: SimpleDialogType.WARNING,\n      });\n    } else {\n      return await this.dialogService.openSimpleDialog({\n        title: { key: \"confirmVaultExport\" },\n        content: { key: \"exportWarningDesc\" },\n        acceptButtonText: { key: \"exportVault\" },\n        type: SimpleDialogType.WARNING,\n      });\n    }\n  }\n\n  protected saved() {\n    this.onSaved.emit();\n  }\n\n  protected getExportData() {\n    if (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    ) {\n      return this.exportService.getPasswordProtectedExport(this.filePassword);\n    } else {\n      return this.exportService.getExport(this.format, null);\n    }\n  }\n\n  protected getFileName(prefix?: string) {\n    let extension = this.format;\n    if (this.format === \"encrypted_json\") {\n      if (prefix == null) {\n        prefix = \"encrypted\";\n      } else {\n        prefix = \"encrypted_\" + prefix;\n      }\n      extension = \"json\";\n    }\n    return this.exportService.getFileName(prefix, extension);\n  }\n\n  protected async collectEvent(): Promise<void> {\n    await this.eventCollectionService.collect(EventType.User_ClientExportedVault);\n  }\n\n  get format() {\n    return this.exportForm.get(\"format\").value;\n  }\n\n  get filePassword() {\n    return this.exportForm.get(\"filePassword\").value;\n  }\n\n  get confirmFilePassword() {\n    return this.exportForm.get(\"confirmFilePassword\").value;\n  }\n\n  get fileEncryptionType() {\n    return this.exportForm.get(\"fileEncryptionType\").value;\n  }\n\n  adjustValidators() {\n    this.exportForm.get(\"confirmFilePassword\").reset();\n    this.exportForm.get(\"filePassword\").reset();\n\n    if (this.encryptedFormat && this.fileEncryptionType == EncryptedExportType.FileEncrypted) {\n      this.exportForm.controls.filePassword.enable();\n      this.exportForm.controls.confirmFilePassword.enable();\n    } else {\n      this.exportForm.controls.filePassword.disable();\n      this.exportForm.controls.confirmFilePassword.disable();\n    }\n  }\n\n  private downloadFile(csv: string): void {\n    const fileName = this.getFileName();\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: csv,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable tailwindcss/no-custom-classname -->\n<form\n  #form\n  (ngSubmit)=\"submit()\"\n  [appApiAction]=\"formPromise\"\n  [formGroup]=\"exportForm\"\n  *ngIf=\"exportForm\"\n>\n  <div class=\"page-header\">\n    <h1>{{ \"exportVault\" | i18n }}</h1>\n  </div>\n\n  <app-callout type=\"error\" title=\"{{ 'vaultExportDisabled' | i18n }}\" *ngIf=\"disabledByPolicy\">\n    {{ \"personalVaultExportPolicyInEffect\" | i18n }}\n  </app-callout>\n  <app-export-scope-callout\n    [organizationId]=\"organizationId\"\n    *ngIf=\"!disabledByPolicy\"\n  ></app-export-scope-callout>\n\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <bit-form-field>\n        <bit-label class=\"tw-text-lg\" for=\"format\">{{ \"fileFormat\" | i18n }}</bit-label>\n        <select bitInput name=\"format\" formControlName=\"format\">\n          <option *ngFor=\"let f of formatOptions\" [value]=\"f.value\">{{ f.name }}</option>\n        </select>\n      </bit-form-field>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"form-group col-6\">\n      <ng-container *ngIf=\"format === 'encrypted_json'\">\n        <div role=\"radiogroup\" aria-labelledby=\"exportTypeHeading\">\n          <label id=\"exportTypeHeading\" class=\"tw-semi-bold tw-text-lg\">\n            {{ \"exportTypeHeading\" | i18n }}\n          </label>\n\n          <div appBoxRow name=\"FileTypeOptions\" class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"AccountEncrypted\"\n                [value]=\"encryptedExportType.AccountEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.AccountEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"AccountEncrypted\">\n                {{ \"accountRestricted\" | i18n }}\n              </label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 pb-2 tw-text-sm\">\n            {{ \"accountRestrictedOptionDescription\" | i18n }}\n          </div>\n\n          <div class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"FileEncrypted\"\n                [value]=\"encryptedExportType.FileEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.FileEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"FileEncrypted\">{{\n                \"passwordProtected\" | i18n\n              }}</label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 tw-text-sm\">\n            {{ \"passwordProtectedOptionDescription\" | i18n }}\n          </div>\n        </div>\n        <br />\n\n        <ng-container *ngIf=\"fileEncryptionType == encryptedExportType.FileEncrypted\">\n          <bit-form-field>\n            <bit-label>{{ \"filePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"filePassword\"\n              formControlName=\"filePassword\"\n              name=\"password\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n            <bit-hint>{{ \"exportPasswordDescription\" | i18n }}</bit-hint>\n          </bit-form-field>\n          <bit-form-field>\n            <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"confirmFilePassword\"\n              formControlName=\"confirmFilePassword\"\n              name=\"confirmFilePassword\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n          </bit-form-field>\n        </ng-container>\n      </ng-container>\n\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary btn-submit\"\n        [disabled]=\"form.loading || disabledByPolicy\"\n        [ngClass]=\"{ manual: disabledByPolicy }\"\n      >\n        <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n        <span>{{ \"confirmFormat\" | i18n }}</span>\n      </button>\n    </div>\n  </div>\n</form>\n","import { Component } from \"@angular/core\";\nimport { UntypedFormBuilder } from \"@angular/forms\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { ExportComponent as BaseExportComponent } from \"@bitwarden/angular/tools/export/components/export.component\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { EncryptedExportType } from \"@bitwarden/common/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { VaultExportServiceAbstraction } from \"@bitwarden/exporter/vault-export\";\n\nimport { openUserVerificationPrompt } from \"../../auth/shared/components/user-verification\";\n\n@Component({\n  selector: \"app-export\",\n  templateUrl: \"export.component.html\",\n})\nexport class ExportComponent extends BaseExportComponent {\n  organizationId: string;\n  encryptedExportType = EncryptedExportType;\n  protected showFilePassword: boolean;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    platformUtilsService: PlatformUtilsService,\n    exportService: VaultExportServiceAbstraction,\n    eventCollectionService: EventCollectionService,\n    policyService: PolicyService,\n    logService: LogService,\n    userVerificationService: UserVerificationService,\n    formBuilder: UntypedFormBuilder,\n    fileDownloadService: FileDownloadService,\n    dialogService: DialogServiceAbstraction\n  ) {\n    super(\n      cryptoService,\n      i18nService,\n      platformUtilsService,\n      exportService,\n      eventCollectionService,\n      policyService,\n      window,\n      logService,\n      userVerificationService,\n      formBuilder,\n      fileDownloadService,\n      dialogService\n    );\n  }\n\n  async submit() {\n    if (this.isFileEncryptedExport && this.filePassword != this.confirmFilePassword) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"filePasswordAndConfirmFilePasswordDoNotMatch\")\n      );\n      return;\n    }\n\n    this.exportForm.markAllAsTouched();\n    if (!this.exportForm.valid) {\n      return;\n    }\n\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    this.doExport();\n  }\n\n  protected saved() {\n    super.saved();\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"exportSuccess\"));\n  }\n\n  private verifyUser() {\n    let confirmDescription = \"exportWarningDesc\";\n    if (this.isFileEncryptedExport) {\n      confirmDescription = \"fileEncryptedExportWarningDesc\";\n    } else if (this.isAccountEncryptedExport) {\n      confirmDescription = \"encExportKeyWarningDesc\";\n    }\n\n    const ref = openUserVerificationPrompt(this.dialogService, {\n      data: {\n        confirmDescription: confirmDescription,\n        confirmButtonText: \"exportVault\",\n        modalTitle: \"confirmVaultExport\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return firstValueFrom(ref.closed);\n  }\n\n  get isFileEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    );\n  }\n\n  get isAccountEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.AccountEncrypted\n    );\n  }\n}\n","<bit-dialog>\n  <span bitDialogTitle>\n    {{ \"importSuccess\" | i18n }}\n  </span>\n\n  <div bitDialogContent>\n    <span>{{ \"importSuccessNumberOfItems\" | i18n : this.data.ciphers.length }}</span>\n    <bit-table [dataSource]=\"dataSource\">\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"type\" | i18n }}</th>\n          <th bitCell>{{ \"total\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body let-rows$>\n        <tr bitRow *ngFor=\"let r of rows$ | async\">\n          <td bitCell>\n            <i class=\"bwi bwi-fw bwi-{{ r.icon }}\" aria-hidden=\"true\"></i>\n            {{ r.type | i18n }}\n          </td>\n          <td bitCell>{{ r.count }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </div>\n\n  <ng-container bitDialogFooter>\n    <button bitButton bitDialogClose buttonType=\"primary\" type=\"button\">\n      {{ \"ok\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { TableDataSource } from \"@bitwarden/components\";\nimport { ImportResult } from \"@bitwarden/importer\";\n\nexport interface ResultList {\n  icon: string;\n  type: string;\n  count: number;\n}\n\n@Component({\n  templateUrl: \"./import-success-dialog.component.html\",\n})\nexport class ImportSuccessDialogComponent implements OnInit {\n  protected dataSource = new TableDataSource<ResultList>();\n\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) public data: ImportResult) {}\n\n  ngOnInit(): void {\n    if (this.data != null) {\n      this.dataSource.data = this.buildResultList();\n    }\n  }\n\n  private buildResultList(): ResultList[] {\n    let logins = 0;\n    let cards = 0;\n    let identities = 0;\n    let secureNotes = 0;\n    this.data.ciphers.map((c) => {\n      switch (c.type) {\n        case CipherType.Login:\n          logins++;\n          break;\n        case CipherType.Card:\n          cards++;\n          break;\n        case CipherType.SecureNote:\n          secureNotes++;\n          break;\n        case CipherType.Identity:\n          identities++;\n          break;\n        default:\n          break;\n      }\n    });\n\n    const list: ResultList[] = [];\n    if (logins > 0) {\n      list.push({ icon: \"globe\", type: \"typeLogin\", count: logins });\n    }\n    if (cards > 0) {\n      list.push({ icon: \"credit-card\", type: \"typeCard\", count: cards });\n    }\n    if (identities > 0) {\n      list.push({ icon: \"id-card\", type: \"typeIdentity\", count: identities });\n    }\n    if (secureNotes > 0) {\n      list.push({ icon: \"sticky-note\", type: \"typeSecureNote\", count: secureNotes });\n    }\n    if (this.data.folders.length > 0) {\n      list.push({ icon: \"folder\", type: \"folders\", count: this.data.folders.length });\n    }\n    if (this.data.collections.length > 0) {\n      list.push({\n        icon: \"collection\",\n        type: \"collections\",\n        count: this.data.collections.length,\n      });\n    }\n    return list;\n  }\n}\n","import { DialogRef } from \"@angular/cdk/dialog\";\nimport { Component } from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\n\n@Component({\n  templateUrl: \"file-password-prompt.component.html\",\n})\nexport class FilePasswordPromptComponent {\n  filePassword = new FormControl(\"\", Validators.required);\n\n  constructor(public dialogRef: DialogRef) {}\n\n  submit() {\n    this.filePassword.markAsTouched();\n    if (!this.filePassword.valid) {\n      return;\n    }\n    this.dialogRef.close(this.filePassword.value);\n  }\n}\n","<form (submit)=\"submit()\">\n  <bit-dialog>\n    <span bitDialogTitle>\n      {{ \"confirmVaultImport\" | i18n }}\n    </span>\n\n    <div bitDialogContent>\n      {{ \"confirmVaultImportDesc\" | i18n }}\n      <bit-form-field class=\"tw-mt-6\">\n        <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n        <input\n          bitInput\n          type=\"password\"\n          name=\"filePassword\"\n          [formControl]=\"filePassword\"\n          appAutofocus\n          appInputVerbatim\n        />\n        <button type=\"button\" bitSuffix bitIconButton bitPasswordInputToggle></button>\n      </bit-form-field>\n    </div>\n\n    <ng-container bitDialogFooter>\n      <button bitButton buttonType=\"primary\" type=\"submit\">\n        <span>{{ \"importData\" | i18n }}</span>\n      </button>\n      <button bitButton bitDialogClose buttonType=\"secondary\" type=\"button\">\n        <span>{{ \"cancel\" | i18n }}</span>\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","<h1 bitTypography=\"h1\">{{ \"importData\" | i18n }}</h1>\n\n<bit-callout type=\"info\" *ngIf=\"importBlockedByPolicy\">\n  {{ \"personalOwnershipPolicyInEffectImports\" | i18n }}\n</bit-callout>\n<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-form-field>\n    <bit-label\n      >{{ \"importDestination\" | i18n }}\n      <a\n        target=\"_blank\"\n        rel=\"noopener\"\n        appA11yTitle=\"{{ 'learnAboutImportOptions' | i18n }}\"\n        href=\"https://bitwarden.com/help/import-data/\"\n      >\n        <i class=\"bwi bwi-question-circle\" aria-hidden=\"true\"></i>\n      </a>\n    </bit-label>\n    <bit-select formControlName=\"vaultSelector\">\n      <bit-option\n        *ngIf=\"!importBlockedByPolicy\"\n        [label]=\"'myVault' | i18n\"\n        value=\"myVault\"\n        icon=\"bwi-user\"\n      />\n      <bit-option\n        *ngFor=\"let o of organizations$ | async\"\n        [value]=\"o.id\"\n        [label]=\"o.name\"\n        icon=\"bwi-business\"\n      />\n    </bit-select>\n  </bit-form-field>\n\n  <bit-form-field>\n    <bit-label>{{ organizationId ? (\"collection\" | i18n) : (\"folder\" | i18n) }}</bit-label>\n    <bit-select formControlName=\"targetSelector\">\n      <ng-container *ngIf=\"!organizationId\">\n        <bit-option [value]=\"null\" label=\"-- {{ 'selectImportFolder' | i18n }} --\" />\n        <bit-option\n          *ngFor=\"let f of folders$ | async\"\n          [value]=\"f.id\"\n          [label]=\"f.name\"\n          icon=\"bwi-folder\"\n        />\n      </ng-container>\n      <ng-container *ngIf=\"organizationId\">\n        <bit-option [value]=\"null\" label=\"-- {{ 'selectImportCollection' | i18n }} --\" />\n        <bit-option\n          *ngFor=\"let c of collections$ | async\"\n          [value]=\"c.id\"\n          [label]=\"c.name\"\n          icon=\"bwi-collection\"\n        />\n      </ng-container>\n    </bit-select>\n    <bit-hint>{{\n      \"importTargetHint\"\n        | i18n\n          : (organizationId ? (\"collection\" | i18n | lowercase) : (\"folder\" | i18n | lowercase))\n    }}</bit-hint>\n  </bit-form-field>\n\n  <bit-form-field class=\"tw-w-1/2\">\n    <bit-label>{{ \"fileFormat\" | i18n }}</bit-label>\n    <bit-select formControlName=\"format\">\n      <bit-option *ngFor=\"let o of featuredImportOptions\" [value]=\"o.id\" [label]=\"o.name\" />\n      <ng-container *ngIf=\"importOptions && importOptions.length\">\n        <bit-option value=\"-\" disabled />\n        <bit-option *ngFor=\"let o of importOptions\" [value]=\"o.id\" [label]=\"o.name\" />\n      </ng-container>\n    </bit-select>\n  </bit-form-field>\n  <bit-callout type=\"info\" title=\"{{ getFormatInstructionTitle() }}\" *ngIf=\"format\">\n    <ng-container *ngIf=\"format === 'bitwardencsv' || format === 'bitwardenjson'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/export-your-data/\">\n        https://bitwarden.com/help/export-your-data/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'lastpasscsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-lastpass/\">\n        https://bitwarden.com/help/import-from-lastpass/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepassxcsv'\">\n      Using the KeePassX desktop application, navigate to \"Database\" &rarr; \"Export to CSV file\" and\n      save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'aviracsv'\">\n      In the Avira web vault, go to \"Settings\" &rarr; \"My Data\" &rarr; \"Export data\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blurcsv'\">\n      In the Blur web vault, click your username at the top and go to \"Settings\" &rarr; \"Export\n      Data\", then click \"Export CSV\" for your \"Accounts\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safeincloudxml'\">\n      Using the SaveInCloud desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As XML\"\n      and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'padlockcsv'\">\n      Using the Padlock desktop application, click the hamburger icon in the top left corner and\n      navigate to \"Settings\" &rarr; \"Export\" button and save the file \"As CSV\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepass2xml'\">\n      Using the KeePass 2 desktop application, navigate to \"File\" &rarr; \"Export\" and select the\n      \"KeePass XML (2.x)\" option.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'upmcsv'\">\n      Using the Universal Password Manager desktop application, navigate to \"Database\" &rarr;\n      \"Export\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'saferpasscsv'\">\n      Using the SaferPass browser extension, click the hamburger icon in the top left corner and\n      navigate to \"Settings\". Click the \"Export accounts\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'meldiumcsv'\">\n      Using the Meldium web vault, navigate to \"Settings\". Locate the \"Export data\" function and\n      click \"Show me my data\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepercsv'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .csv File\" option. Click\n      \"Export\" to save the CSV file.\n    </ng-container>\n    <!--\n    <ng-container *ngIf=\"format === 'keeperjson'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .json File\" option. Click\n      \"Export\" to save the JSON file.\n    </ng-container>\n    -->\n    <ng-container\n      *ngIf=\"format === 'chromecsv' || format === 'operacsv' || format === 'vivaldicsv'\"\n    >\n      <span *ngIf=\"format !== 'chromecsv'\">\n        The process is exactly the same as importing from Google Chrome.\n      </span>\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-chrome/\">\n        https://bitwarden.com/help/import-from-chrome/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'firefoxcsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-firefox/\">\n        https://bitwarden.com/help/import-from-firefox/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safaricsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-safari/\">\n        https://bitwarden.com/help/import-from-safari/</a\n      >.\n    </ng-container>\n    <ng-container\n      *ngIf=\"\n        format === '1password1pux' ||\n        format === '1password1pif' ||\n        format === '1passwordwincsv' ||\n        format === '1passwordmaccsv'\n      \"\n    >\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-1password/\">\n        https://bitwarden.com/help/import-from-1password/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passworddragonxml'\">\n      Using the Password Dragon desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"To\n      XML\". In the dialog that pops up select \"All Rows\" and check all fields. Click the \"Export\"\n      button and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpasscsv'\">\n      Using the Enpass desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As CSV\".\n      Select \"OK\" to the warning alert and save the CSV file. Note that the importer only supports\n      files exported while Enpass is set to the English language, so adjust your settings\n      accordingly.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpassjson'\">\n      Using the Enpass 6 desktop application, click the menu button and navigate to \"File\" &rarr;\n      \"Export\". Select the \".json\" file format option and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'pwsafexml'\">\n      Using the Password Safe desktop application, navigate to \"File\" &rarr; \"Export To\" &rarr; \"XML\n      format...\" and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanecsv'\">\n      Log in to Dashlane, click on \"My Account\" &rarr; \"Settings\" &rarr; \"Export file\" and select\n      \"Export as a CSV file\". This will download a zip archive containing various CSV files. Unzip\n      the archive and import each CSV file individually.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanejson'\">\n      Dashlane no longer supports the JSON format. Only use this if you have an existing JSON for\n      import. Use the CSV importer when creating new exports.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'msecurecsv'\">\n      Using the mSecure desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"CSV File...\"\n      and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'stickypasswordxml'\">\n      Using the Sticky Password desktop application, navigate to \"Menu\" (top right) &rarr; \"Export\"\n      &rarr; \"Export all\". Select the unencrypted format XML option and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'truekeycsv'\">\n      Using the True Key desktop application, click the gear icon (top right) and then navigate to\n      \"App Settings\". Click the \"Export\" button, enter your password and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'clipperzhtml'\">\n      Log into the Clipperz web application (clipperz.is/app). Click the hamburger menu icon in the\n      top right to expand the navigation bar. Navigate to \"Data\" &rarr; \"Export\". Click the\n      \"download HTML+JSON\" button to save the HTML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'roboformcsv'\">\n      Using the RoboForm Editor desktop application, navigate to \"RoboForm\" (top left) &rarr;\n      \"Options\" &rarr; \"Account &amp; Data\" and click the \"Export\" button. Select all of your data,\n      change the \"Format\" to \"CSV file\" and then click the \"Export\" button to save the CSV file.\n      Note: RoboForm only allows you to export Logins. Other items will not be exported.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passboltcsv'\">\n      Log into the Passbolt web vault and navigate to the \"Passwords\" listing. Select all of the\n      passwords you would like to export and click the \"Export\" button at the top of the listing.\n      Choose the \"csv (lastpass)\" export format and click the \"Export\" button.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'ascendocsv'\">\n      Using the Ascendo DataVault desktop application, navigate to \"Tools\" &rarr; \"Export\". In the\n      dialog that pops up, select the \"All Items (DVX, CSV)\" option. Click the \"Ok\" button to save\n      the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordbossjson'\">\n      Using the Password Boss desktop application, navigate to \"File\" &rarr; \"Export data\" &rarr;\n      \"Password Boss JSON - not encrypted\" and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'zohovaultcsv'\">\n      Log into the Zoho web vault (vault.zoho.com). Navigate to \"Tools\" &rarr; \"Export Secrets\".\n      Select \"All Secrets\" and click the \"Zoho Vault Format CSV\" button. Highlight and copy the data\n      from the textarea. Open a text editor like Notepad and paste the data. Save the data from the\n      text editor as\n      <code>zoho_export.csv</code>.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'splashidcsv'\">\n      Using the SplashID Safe desktop application, click on the SplashID blue lock logo in the top\n      right corner. Navigate to \"Export\" &rarr; \"Export as CSV\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkeepcsv'\">\n      Using the PassKeep mobile app, navigate to \"Backup/Restore\". Locate the \"CSV Backup/Restore\"\n      section and click \"Backup to CSV\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'gnomejson'\">\n      Make sure you have python-keyring and python-gnomekeyring installed. Save the\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bit.ly/2GpOMTg\"\n        >GNOME Keyring Import/Export</a\n      >\n      python script to your desktop as <code>pw_helper.py</code>. Open terminal and run\n      <code>chmod +rx Desktop/pw_helper.py</code> and then\n      <code>python Desktop/pw_helper.py export Desktop/my_passwords.json</code>. Then upload the\n      resulting <code>my_passwords.json</code> file here to Bitwarden.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordagentcsv'\">\n      Using the Password Agent desktop application navigate to \"File\" &rarr; \"Export\", select the\n      \"Fields to export\" button and check all of the fields, change the \"Output format\" to \"CSV\",\n      and then click the \"Start\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passpackcsv'\">\n      Log into the Passpack website vault and navigate to \"Settings\" &rarr; \"Export\", then click the\n      \"Download\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passmanjson'\">\n      Open your Passman vault and click on \"Settings\" in the bottom left corner. In the \"Settings\"\n      window switch to the \"Export credentials\" tab and choose \"JSON\" as the export type. Enter your\n      vault's passphrase and click the \"Export\" button to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastcsv'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to CSV file\" option to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastjson'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to JSON file\" option to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'fsecurefsk'\">\n      Open the F-Secure KEY desktop application and navigate to \"Settings\" &rarr; \"Export\n      Passwords\". Select the \"Export\" button, enter your master password, and save the FSK file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'kasperskytxt'\">\n      Open the Kaspersky Password Manager desktop application and navigate to \"Settings\" &rarr;\n      \"Import/Export\". Locate the \"Export to text file\" section and select the \"Export\" button to\n      save the TXT file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'remembearcsv'\">\n      Open the RememBear desktop application and navigate to \"Settings\" &rarr; \"Account\" &rarr;\n      \"Export\". Enter your master password and select the \"Export Anyway\" button to save the CSV\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordwallettxt'\">\n      Open the PasswordWallet desktop application and navigate to \"File\" &rarr; \"Export\" &rarr;\n      \"Visible entries to text file\". Enter your password and select the \"Ok\" button to save the TXT\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'mykicsv'\">\n      Open the Myki desktop browser extension and navigate to \"Advanced\" &rarr; \"Export Accounts\"\n      and then scan the QR code with your mobile device. Various CSV files will then be saved to\n      your computer's downloads folder.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'securesafecsv'\">\n      Export your SecureSafe password safe to a CSV file with a comma delimiter.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'logmeoncecsv'\">\n      Open the LogMeOnce browser extension, then navigate to \"Open Menu\" &rarr; \"Export To\" and\n      select \"CSV File\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blackberrycsv'\">\n      Open the BlackBerry Password Keeper application, then navigate to \"Settings\" &rarr;\n      \"Import/Export\". Select \"Export Passwords\" and follow the instructions on screen to save the\n      unencrypted CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'buttercupcsv'\">\n      Open the Buttercup desktop application and unlock your vault. Right click on your vault's icon\n      and select \"Export\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'codebookcsv'\">\n      Open the Codebook desktop application and log in. Navigate to \"File\" &rarr; \"Export all\", then\n      click \"Yes\" on the dialog and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'encryptrcsv'\">\n      Open the newest version of the Encryptr desktop application and allow all of your data to\n      sync. Once syncing of your data is complete, the download icon in the top right corner will\n      turn pink. Click the download icon and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'yoticsv'\">\n      From the Yoti browser extension, click on \"Settings\", then \"Export Saved Logins\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'psonojson'\">\n      Log in to the Psono web vault, click on the \"Signed in as\"-dropdown, select \"Others\". Go to\n      the \"Export\"-tab and select the json type export and then click on Export.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkyjson'\">\n      Log in to \"https://vault.passky.org\" &rarr; \"Import & Export\" &rarr; \"Export\" in the Passky\n      section. (\"Backup\" is unsupported as it is encrypted).\n    </ng-container>\n  </bit-callout>\n  <bit-form-field>\n    <bit-label>{{ \"selectImportFile\" | i18n }}</bit-label>\n    <div class=\"file-selector\">\n      <button\n        bitButton\n        type=\"button\"\n        class=\"btn btn-outline-primary\"\n        (click)=\"fileSelector.click()\"\n      >\n        {{ \"chooseFile\" | i18n }}\n      </button>\n      {{ this.fileSelected ? this.fileSelected.name : (\"noFileChosen\" | i18n) }}\n    </div>\n    <input\n      bitInput\n      #fileSelector\n      type=\"file\"\n      id=\"file\"\n      class=\"form-control-file\"\n      name=\"file\"\n      formControlName=\"file\"\n      (change)=\"setSelectedFile($event)\"\n      hidden\n    />\n  </bit-form-field>\n  <bit-form-field>\n    <bit-label>{{ \"orCopyPasteFileContents\" | i18n }}</bit-label>\n    <textarea\n      id=\"fileContents\"\n      bitInput\n      name=\"FileContents\"\n      formControlName=\"fileContents\"\n    ></textarea>\n  </bit-form-field>\n  <button\n    bitButton\n    bitFormButton\n    type=\"submit\"\n    buttonType=\"primary\"\n    [disabled]=\"importBlockedByPolicy\"\n  >\n    {{ \"importData\" | i18n }}\n  </button>\n</form>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport * as JSZip from \"jszip\";\nimport { concat, Observable, Subject, lastValueFrom, combineLatest } from \"rxjs\";\nimport { map, takeUntil } from \"rxjs/operators\";\nimport Swal, { SweetAlertIcon } from \"sweetalert2\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport {\n  canAccessImportExport,\n  OrganizationService,\n} from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport {\n  ImportOption,\n  ImportResult,\n  ImportServiceAbstraction,\n  ImportType,\n} from \"@bitwarden/importer\";\n\nimport { FilePasswordPromptComponent, ImportSuccessDialogComponent } from \"./dialog\";\n\n@Component({\n  selector: \"app-import\",\n  templateUrl: \"import.component.html\",\n})\nexport class ImportComponent implements OnInit, OnDestroy {\n  featuredImportOptions: ImportOption[];\n  importOptions: ImportOption[];\n  format: ImportType = null;\n  fileSelected: File;\n\n  folders$: Observable<FolderView[]>;\n  collections$: Observable<CollectionView[]>;\n  organizations$: Observable<Organization[]>;\n\n  protected organizationId: string = null;\n  protected destroy$ = new Subject<void>();\n\n  private _importBlockedByPolicy = false;\n\n  formGroup = this.formBuilder.group({\n    vaultSelector: [\n      \"myVault\",\n      {\n        nonNullable: true,\n        validators: [Validators.required],\n      },\n    ],\n    targetSelector: [null],\n    format: [null as ImportType | null, [Validators.required]],\n    fileContents: [],\n    file: [],\n  });\n\n  constructor(\n    protected i18nService: I18nService,\n    protected importService: ImportServiceAbstraction,\n    protected router: Router,\n    protected platformUtilsService: PlatformUtilsService,\n    protected policyService: PolicyService,\n    private logService: LogService,\n    protected modalService: ModalService,\n    protected syncService: SyncService,\n    protected dialogService: DialogServiceAbstraction,\n    protected folderService: FolderService,\n    protected collectionService: CollectionService,\n    protected organizationService: OrganizationService,\n    protected formBuilder: FormBuilder\n  ) {}\n\n  protected get importBlockedByPolicy(): boolean {\n    return this._importBlockedByPolicy;\n  }\n\n  /**\n   * Callback that is called after a successful import.\n   */\n  protected async onSuccessfulImport(): Promise<void> {\n    await this.router.navigate([\"vault\"]);\n  }\n\n  ngOnInit() {\n    this.setImportOptions();\n\n    this.organizations$ = concat(\n      this.organizationService.memberOrganizations$.pipe(\n        canAccessImportExport(this.i18nService),\n        map((orgs) => orgs.sort(Utils.getSortFunction(this.i18nService, \"name\")))\n      )\n    );\n\n    combineLatest([\n      this.policyService.policyAppliesToActiveUser$(PolicyType.PersonalOwnership),\n      this.organizations$,\n    ])\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(([policyApplies, orgs]) => {\n        this._importBlockedByPolicy = policyApplies;\n        if (policyApplies && orgs.length == 0) {\n          this.formGroup.disable();\n        }\n      });\n\n    if (this.organizationId) {\n      this.formGroup.controls.vaultSelector.patchValue(this.organizationId);\n      this.formGroup.controls.vaultSelector.disable();\n\n      this.collections$ = Utils.asyncToObservable(() =>\n        this.collectionService\n          .getAllDecrypted()\n          .then((c) => c.filter((c2) => c2.organizationId === this.organizationId))\n      );\n    } else {\n      // Filter out the `no folder`-item from folderViews$\n      this.folders$ = this.folderService.folderViews$.pipe(\n        map((folders) => folders.filter((f) => f.id != null))\n      );\n      this.formGroup.controls.targetSelector.disable();\n\n      this.formGroup.controls.vaultSelector.valueChanges\n        .pipe(takeUntil(this.destroy$))\n        .subscribe((value) => {\n          this.organizationId = value != \"myVault\" ? value : undefined;\n          if (!this._importBlockedByPolicy) {\n            this.formGroup.controls.targetSelector.enable();\n          }\n          if (value) {\n            this.collections$ = Utils.asyncToObservable(() =>\n              this.collectionService\n                .getAllDecrypted()\n                .then((c) => c.filter((c2) => c2.organizationId === value))\n            );\n          }\n        });\n\n      this.formGroup.controls.vaultSelector.setValue(\"myVault\");\n    }\n    this.formGroup.controls.format.valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((value) => {\n        this.format = value;\n      });\n  }\n\n  submit = async () => {\n    if (this.formGroup.invalid) {\n      this.formGroup.markAllAsTouched();\n      return;\n    }\n\n    await this.performImport();\n  };\n\n  protected async performImport() {\n    if (this.importBlockedByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalOwnershipPolicyInEffectImports\")\n      );\n      return;\n    }\n\n    const promptForPassword_callback = async () => {\n      return await this.getFilePassword();\n    };\n\n    const importer = this.importService.getImporter(\n      this.format,\n      promptForPassword_callback,\n      this.organizationId\n    );\n\n    if (importer === null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFormat\")\n      );\n      return;\n    }\n\n    const fileEl = document.getElementById(\"file\") as HTMLInputElement;\n    const files = fileEl.files;\n    let fileContents = this.formGroup.controls.fileContents.value;\n    if ((files == null || files.length === 0) && (fileContents == null || fileContents === \"\")) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      return;\n    }\n\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      return;\n    }\n\n    if (this.organizationId) {\n      await this.organizationService.get(this.organizationId)?.isAdmin;\n    }\n\n    try {\n      const result = await this.importService.import(\n        importer,\n        fileContents,\n        this.organizationId,\n        this.formGroup.controls.targetSelector.value,\n        this.isUserAdmin(this.organizationId)\n      );\n\n      //No errors, display success message\n      this.dialogService.open<unknown, ImportResult>(ImportSuccessDialogComponent, {\n        data: result,\n      });\n\n      this.syncService.fullSync(true);\n      await this.onSuccessfulImport();\n    } catch (e) {\n      this.error(e);\n      this.logService.error(e);\n    }\n  }\n\n  private isUserAdmin(organizationId?: string): boolean {\n    if (!organizationId) {\n      return false;\n    }\n    return this.organizationService.get(this.organizationId)?.isAdmin;\n  }\n\n  getFormatInstructionTitle() {\n    if (this.format == null) {\n      return null;\n    }\n\n    const results = this.featuredImportOptions\n      .concat(this.importOptions)\n      .filter((o) => o.id === this.format);\n    if (results.length > 0) {\n      return this.i18nService.t(\"instructionsFor\", results[0].name);\n    }\n    return null;\n  }\n\n  protected setImportOptions() {\n    this.featuredImportOptions = [\n      {\n        id: null,\n        name: \"-- \" + this.i18nService.t(\"select\") + \" --\",\n      },\n      ...this.importService.featuredImportOptions,\n    ];\n    this.importOptions = [...this.importService.regularImportOptions].sort((a, b) => {\n      if (a.name == null && b.name != null) {\n        return -1;\n      }\n      if (a.name != null && b.name == null) {\n        return 1;\n      }\n      if (a.name == null && b.name == null) {\n        return 0;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(a.name, b.name)\n        : a.name.localeCompare(b.name);\n    });\n  }\n\n  setSelectedFile(event: Event) {\n    const fileInputEl = <HTMLInputElement>event.target;\n    this.fileSelected = fileInputEl.files.length > 0 ? fileInputEl.files[0] : null;\n  }\n\n  private async error(error: Error) {\n    await Swal.fire({\n      heightAuto: false,\n      buttonsStyling: false,\n      icon: \"error\" as SweetAlertIcon,\n      iconHtml: `<i class=\"swal-custom-icon bwi bwi-error text-danger\"></i>`,\n      input: \"textarea\",\n      inputValue: error.message,\n      inputAttributes: {\n        readonly: \"true\",\n      },\n      titleText: this.i18nService.t(\"importError\"),\n      text: this.i18nService.t(\"importErrorDesc\"),\n      showConfirmButton: true,\n      confirmButtonText: this.i18nService.t(\"ok\"),\n      onOpen: (popupEl) => {\n        popupEl.querySelector(\".swal2-textarea\").scrollTo(0, 0);\n      },\n    });\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    if (this.format === \"1password1pux\") {\n      return this.extract1PuxContent(file);\n    }\n\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        if (this.format === \"lastpasscsv\" && file.type === \"text/html\") {\n          const parser = new DOMParser();\n          const doc = parser.parseFromString((evt.target as any).result, \"text/html\");\n          const pre = doc.querySelector(\"pre\");\n          if (pre != null) {\n            resolve(pre.textContent);\n            return;\n          }\n          reject();\n          return;\n        }\n\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private extract1PuxContent(file: File): Promise<string> {\n    return new JSZip()\n      .loadAsync(file)\n      .then((zip) => {\n        return zip.file(\"export.data\").async(\"string\");\n      })\n      .then(\n        function success(content) {\n          return content;\n        },\n        function error(e) {\n          return \"\";\n        }\n      );\n  }\n\n  async getFilePassword(): Promise<string> {\n    const dialog = this.dialogService.open<string>(FilePasswordPromptComponent, {\n      ariaModal: true,\n    });\n\n    return await lastValueFrom(dialog.closed);\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from \"@angular/core\";\n\n@Directive({\n  selector: \"[appBoxRow]\",\n})\nexport class BoxRowDirective implements OnInit {\n  el: HTMLElement = null;\n  formEls: Element[];\n\n  constructor(elRef: ElementRef) {\n    this.el = elRef.nativeElement;\n  }\n\n  ngOnInit(): void {\n    this.formEls = Array.from(\n      this.el.querySelectorAll('input:not([type=\"hidden\"]), select, textarea')\n    );\n    this.formEls.forEach((formEl) => {\n      formEl.addEventListener(\n        \"focus\",\n        () => {\n          this.el.classList.add(\"active\");\n        },\n        false\n      );\n\n      formEl.addEventListener(\n        \"blur\",\n        () => {\n          this.el.classList.remove(\"active\");\n        },\n        false\n      );\n    });\n  }\n\n  @HostListener(\"click\", [\"$event\"]) onClick(event: Event) {\n    const target = event.target as HTMLElement;\n    if (\n      target !== this.el &&\n      !target.classList.contains(\"progress\") &&\n      !target.classList.contains(\"progress-bar\")\n    ) {\n      return;\n    }\n\n    if (this.formEls.length > 0) {\n      const formEl = this.formEls[0] as HTMLElement;\n      if (formEl.tagName.toLowerCase() === \"input\") {\n        const inputEl = formEl as HTMLInputElement;\n        if (inputEl.type != null && inputEl.type.toLowerCase() === \"checkbox\") {\n          inputEl.click();\n          return;\n        }\n      }\n      formEl.focus();\n    }\n  }\n}\n","<ng-container *ngIf=\"show\">\n  <app-callout type=\"info\" title=\"{{ scopeConfig.title | i18n }}\">\n    {{ scopeConfig.description | i18n : scopeConfig.scopeIdentifier }}\n  </app-callout>\n</ng-container>\n","import { Component, Input, OnInit } from \"@angular/core\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\n\n@Component({\n  selector: \"app-export-scope-callout\",\n  templateUrl: \"export-scope-callout.component.html\",\n})\nexport class ExportScopeCalloutComponent implements OnInit {\n  @Input() organizationId: string = null;\n\n  show = false;\n  scopeConfig: {\n    title: string;\n    description: string;\n    scopeIdentifier: string;\n  };\n\n  constructor(\n    protected organizationService: OrganizationService,\n    protected stateService: StateService\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    if (!this.organizationService.hasOrganizations()) {\n      return;\n    }\n    this.scopeConfig =\n      this.organizationId != null\n        ? {\n            title: \"exportingOrganizationVaultTitle\",\n            description: \"exportingOrganizationVaultDesc\",\n            scopeIdentifier: this.organizationService.get(this.organizationId).name,\n          }\n        : {\n            title: \"exportingPersonalVaultTitle\",\n            description: \"exportingPersonalVaultDescription\",\n            scopeIdentifier: await this.stateService.getEmail(),\n          };\n    this.show = true;\n  }\n}\n","import { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nexport abstract class ImportApiServiceAbstraction {\n  postImportCiphers: (request: ImportCiphersRequest) => Promise<any>;\n  postImportOrganizationCiphers: (\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ) => Promise<any>;\n}\n","import { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nimport { ImportApiServiceAbstraction } from \"./import-api.service.abstraction\";\n\nexport class ImportApiService implements ImportApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  async postImportCiphers(request: ImportCiphersRequest): Promise<any> {\n    return await this.apiService.send(\"POST\", \"/ciphers/import\", request, true, false);\n  }\n\n  async postImportOrganizationCiphers(\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ): Promise<any> {\n    return await this.apiService.send(\n      \"POST\",\n      \"/ciphers/import-organization?organizationId=\" + organizationId,\n      request,\n      true,\n      false\n    );\n  }\n}\n","import { Importer } from \"../importers/importer\";\nimport { ImportOption, ImportType } from \"../models/import-options\";\nimport { ImportResult } from \"../models/import-result\";\n\nexport abstract class ImportServiceAbstraction {\n  featuredImportOptions: readonly ImportOption[];\n  regularImportOptions: readonly ImportOption[];\n  getImportOptions: () => ImportOption[];\n  import: (\n    importer: Importer,\n    fileContents: string,\n    organizationId?: string,\n    selectedImportTarget?: string,\n    isUserAdmin?: boolean\n  ) => Promise<ImportResult>;\n  getImporter: (\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>,\n    organizationId: string\n  ) => Importer;\n}\n","import { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { FolderWithIdRequest } from \"../../vault/models/request/folder-with-id.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  folders: FolderWithIdRequest[] = [];\n  folderRelationships: KvpRequest<number, number>[] = [];\n}\n","import { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { CollectionWithIdRequest } from \"../../vault/models/request/collection-with-id.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportOrganizationCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  collections: CollectionWithIdRequest[] = [];\n  collectionRelationships: KvpRequest<number, number>[] = [];\n}\n","export class KvpRequest<TK, TV> {\n  key: TK;\n  value: TV;\n\n  constructor(key: TK, value: TV) {\n    this.key = key;\n    this.value = value;\n  }\n}\n","import { Collection } from \"../domain/collection\";\n\nimport { CollectionRequest } from \"./collection.request\";\n\nexport class CollectionWithIdRequest extends CollectionRequest {\n  id: string;\n\n  constructor(collection?: Collection) {\n    if (collection == null) {\n      return;\n    }\n    super(collection);\n    this.id = collection.id;\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nexport class ImportResult {\n  success = false;\n  errorMessage: string;\n  ciphers: CipherView[] = [];\n  folders: FolderView[] = [];\n  folderRelationships: [number, number][] = [];\n  collections: CollectionView[] = [];\n  collectionRelationships: [number, number][] = [];\n}\n","import * as papa from \"papaparse\";\n\nimport { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { ConsoleLogService } from \"@bitwarden/common/platform/services/console-log.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { LoginUriView } from \"@bitwarden/common/vault/models/view/login-uri.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nexport abstract class BaseImporter {\n  organizationId: string = null;\n\n  protected logService: LogService = new ConsoleLogService(false);\n\n  protected newLineRegex = /(?:\\r\\n|\\r|\\n)/;\n\n  protected passwordFieldNames = [\n    \"password\",\n    \"pass word\",\n    \"passphrase\",\n    \"pass phrase\",\n    \"pass\",\n    \"code\",\n    \"code word\",\n    \"codeword\",\n    \"secret\",\n    \"secret word\",\n    \"personpwd\",\n    \"key\",\n    \"keyword\",\n    \"key word\",\n    \"keyphrase\",\n    \"key phrase\",\n    \"form_pw\",\n    \"wppassword\",\n    \"pin\",\n    \"pwd\",\n    \"pw\",\n    \"pword\",\n    \"passwd\",\n    \"p\",\n    \"serial\",\n    \"serial#\",\n    \"license key\",\n    \"reg #\",\n\n    // Non-English names\n    \"passwort\",\n  ];\n\n  protected usernameFieldNames = [\n    \"user\",\n    \"name\",\n    \"user name\",\n    \"username\",\n    \"login name\",\n    \"email\",\n    \"e-mail\",\n    \"id\",\n    \"userid\",\n    \"user id\",\n    \"login\",\n    \"form_loginname\",\n    \"wpname\",\n    \"mail\",\n    \"loginid\",\n    \"login id\",\n    \"log\",\n    \"personlogin\",\n    \"first name\",\n    \"last name\",\n    \"card#\",\n    \"account #\",\n    \"member\",\n    \"member #\",\n\n    // Non-English names\n    \"nom\",\n    \"benutzername\",\n  ];\n\n  protected notesFieldNames = [\n    \"note\",\n    \"notes\",\n    \"comment\",\n    \"comments\",\n    \"memo\",\n    \"description\",\n    \"free form\",\n    \"freeform\",\n    \"free text\",\n    \"freetext\",\n    \"free\",\n\n    // Non-English names\n    \"kommentar\",\n  ];\n\n  protected uriFieldNames: string[] = [\n    \"url\",\n    \"hyper link\",\n    \"hyperlink\",\n    \"link\",\n    \"host\",\n    \"hostname\",\n    \"host name\",\n    \"server\",\n    \"address\",\n    \"hyper ref\",\n    \"href\",\n    \"web\",\n    \"website\",\n    \"web site\",\n    \"site\",\n    \"web-site\",\n    \"uri\",\n\n    // Non-English names\n    \"ort\",\n    \"adresse\",\n  ];\n\n  protected parseCsvOptions = {\n    encoding: \"UTF-8\",\n    skipEmptyLines: false,\n  };\n\n  protected get organization() {\n    return this.organizationId != null;\n  }\n\n  protected parseXml(data: string): Document {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(data, \"application/xml\");\n    return doc != null && doc.querySelector(\"parsererror\") == null ? doc : null;\n  }\n\n  protected parseCsv(data: string, header: boolean, options: any = {}): any[] {\n    const parseOptions: papa.ParseConfig<string> = Object.assign(\n      { header: header },\n      this.parseCsvOptions,\n      options\n    );\n    data = this.splitNewLine(data).join(\"\\n\").trim();\n    const result = papa.parse(data, parseOptions);\n    if (result.errors != null && result.errors.length > 0) {\n      result.errors.forEach((e) => {\n        if (e.row != null) {\n          this.logService.warning(\"Error parsing row \" + e.row + \": \" + e.message);\n        }\n      });\n    }\n    return result.data && result.data.length > 0 ? result.data : null;\n  }\n\n  protected parseSingleRowCsv(rowData: string) {\n    if (this.isNullOrWhitespace(rowData)) {\n      return null;\n    }\n    const parsedRow = this.parseCsv(rowData, false);\n    if (parsedRow != null && parsedRow.length > 0 && parsedRow[0].length > 0) {\n      return parsedRow[0];\n    }\n    return null;\n  }\n\n  protected makeUriArray(uri: string | string[]): LoginUriView[] {\n    if (uri == null) {\n      return null;\n    }\n\n    if (typeof uri === \"string\") {\n      const loginUri = new LoginUriView();\n      loginUri.uri = this.fixUri(uri);\n      if (this.isNullOrWhitespace(loginUri.uri)) {\n        return null;\n      }\n      loginUri.match = null;\n      return [loginUri];\n    }\n\n    if (uri.length > 0) {\n      const returnArr: LoginUriView[] = [];\n      uri.forEach((u) => {\n        const loginUri = new LoginUriView();\n        loginUri.uri = this.fixUri(u);\n        if (this.isNullOrWhitespace(loginUri.uri)) {\n          return;\n        }\n        loginUri.match = null;\n        returnArr.push(loginUri);\n      });\n      return returnArr.length === 0 ? null : returnArr;\n    }\n\n    return null;\n  }\n\n  protected fixUri(uri: string) {\n    if (uri == null) {\n      return null;\n    }\n    uri = uri.trim();\n    if (uri.indexOf(\"://\") === -1 && uri.indexOf(\".\") >= 0) {\n      uri = \"http://\" + uri;\n    }\n    if (uri.length > 1000) {\n      return uri.substring(0, 1000);\n    }\n    return uri;\n  }\n\n  protected nameFromUrl(url: string) {\n    const hostname = Utils.getHostname(url);\n    if (this.isNullOrWhitespace(hostname)) {\n      return null;\n    }\n    return hostname.startsWith(\"www.\") ? hostname.replace(\"www.\", \"\") : hostname;\n  }\n\n  protected isNullOrWhitespace(str: string): boolean {\n    return Utils.isNullOrWhitespace(str);\n  }\n\n  protected getValueOrDefault(str: string, defaultValue: string = null): string {\n    if (this.isNullOrWhitespace(str)) {\n      return defaultValue;\n    }\n    return str;\n  }\n\n  protected splitNewLine(str: string): string[] {\n    return str.split(this.newLineRegex);\n  }\n\n  protected setCardExpiration(cipher: CipherView, expiration: string): boolean {\n    if (this.isNullOrWhitespace(expiration)) {\n      return false;\n    }\n\n    expiration = expiration.replace(/\\s/g, \"\");\n\n    const monthRegex = \"0?(?<month>[1-9]|1[0-2])\";\n    const yearRegex = \"(?<year>(?:[1-2][0-9])?[0-9]{2})\";\n    const expiryRegex = new RegExp(`^${monthRegex}/${yearRegex}$`);\n\n    const expiryMatch = expiration.match(expiryRegex);\n\n    if (!expiryMatch) {\n      return false;\n    }\n\n    cipher.card.expMonth = expiryMatch.groups.month;\n    const year: string = expiryMatch.groups.year;\n    cipher.card.expYear = year.length === 2 ? \"20\" + year : year;\n    return true;\n  }\n\n  protected moveFoldersToCollections(result: ImportResult) {\n    result.folderRelationships.forEach((r) => result.collectionRelationships.push(r));\n    result.collections = result.folders.map((f) => {\n      const collection = new CollectionView();\n      collection.name = f.name;\n      collection.id = f.id;\n      return collection;\n    });\n    result.folderRelationships = [];\n    result.folders = [];\n  }\n\n  protected querySelectorDirectChild(parentEl: Element, query: string) {\n    const els = this.querySelectorAllDirectChild(parentEl, query);\n    return els.length === 0 ? null : els[0];\n  }\n\n  protected querySelectorAllDirectChild(parentEl: Element, query: string) {\n    return Array.from(parentEl.querySelectorAll(query)).filter((el) => el.parentNode === parentEl);\n  }\n\n  protected initLoginCipher() {\n    const cipher = new CipherView();\n    cipher.favorite = false;\n    cipher.notes = \"\";\n    cipher.fields = [];\n    cipher.login = new LoginView();\n    cipher.type = CipherType.Login;\n    return cipher;\n  }\n\n  protected cleanupCipher(cipher: CipherView) {\n    if (cipher == null) {\n      return;\n    }\n    if (cipher.type !== CipherType.Login) {\n      cipher.login = null;\n    }\n    if (this.isNullOrWhitespace(cipher.name)) {\n      cipher.name = \"--\";\n    }\n    if (this.isNullOrWhitespace(cipher.notes)) {\n      cipher.notes = null;\n    } else {\n      cipher.notes = cipher.notes.trim();\n    }\n    if (cipher.fields != null && cipher.fields.length === 0) {\n      cipher.fields = null;\n    }\n  }\n\n  protected processKvp(\n    cipher: CipherView,\n    key: string,\n    value: string,\n    type: FieldType = FieldType.Text\n  ) {\n    if (this.isNullOrWhitespace(value)) {\n      return;\n    }\n    if (this.isNullOrWhitespace(key)) {\n      key = \"\";\n    }\n    if (value.length > 200 || value.trim().search(this.newLineRegex) > -1) {\n      if (cipher.notes == null) {\n        cipher.notes = \"\";\n      }\n      cipher.notes += key + \": \" + this.splitNewLine(value).join(\"\\n\") + \"\\n\";\n    } else {\n      if (cipher.fields == null) {\n        cipher.fields = [];\n      }\n      const field = new FieldView();\n      field.type = type;\n      field.name = key;\n      field.value = value;\n      cipher.fields.push(field);\n    }\n  }\n\n  protected processFolder(result: ImportResult, folderName: string) {\n    if (this.isNullOrWhitespace(folderName)) {\n      return;\n    }\n\n    let folderIndex = result.folders.length;\n    // Replace backslashes with forward slashes, ensuring we create sub-folders\n    folderName = folderName.replace(\"\\\\\", \"/\");\n    let addFolder = true;\n\n    for (let i = 0; i < result.folders.length; i++) {\n      if (result.folders[i].name === folderName) {\n        addFolder = false;\n        folderIndex = i;\n        break;\n      }\n    }\n\n    if (addFolder) {\n      const f = new FolderView();\n      f.name = folderName;\n      result.folders.push(f);\n    }\n\n    result.folderRelationships.push([result.ciphers.length, folderIndex]);\n  }\n\n  protected convertToNoteIfNeeded(cipher: CipherView) {\n    if (\n      cipher.type === CipherType.Login &&\n      this.isNullOrWhitespace(cipher.login.username) &&\n      this.isNullOrWhitespace(cipher.login.password) &&\n      (cipher.login.uris == null || cipher.login.uris.length === 0)\n    ) {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    }\n  }\n\n  protected processFullName(cipher: CipherView, fullName: string) {\n    if (this.isNullOrWhitespace(fullName)) {\n      return;\n    }\n\n    const nameParts = fullName.split(\" \");\n    if (nameParts.length > 0) {\n      cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n    }\n    if (nameParts.length === 2) {\n      cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n    } else if (nameParts.length >= 3) {\n      cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n      cipher.identity.lastName = nameParts.slice(2, nameParts.length).join(\" \");\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AscendoCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 2) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const val: string = value[i + 2];\n          const field: string = value[i + 1];\n          if (this.isNullOrWhitespace(val) || this.isNullOrWhitespace(field)) {\n            continue;\n          }\n\n          const fieldLower = field.toLowerCase();\n          if (cipher.login.password == null && this.passwordFieldNames.indexOf(fieldLower) > -1) {\n            cipher.login.password = this.getValueOrDefault(val);\n          } else if (\n            cipher.login.username == null &&\n            this.usernameFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.username = this.getValueOrDefault(val);\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n          } else {\n            this.processKvp(cipher, field, val);\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.login.uris = this.makeUriArray(value.web);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.username = this.getValueOrDefault(value.login);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.logins != null) {\n      results.logins.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.pwd);\n        cipher.login.username = this.getValueOrDefault(value.loginName);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.notes != null) {\n      results.notes.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.name = this.getValueOrDefault(value.label);\n        cipher.notes = this.getValueOrDefault(value.text);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.cards != null) {\n      results.cards.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Card;\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.card.cardholderName = this.getValueOrDefault(value.holderName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        if (value.expirationDate != null) {\n          if (value.expirationDate.month != null) {\n            cipher.card.expMonth = value.expirationDate.month + \"\";\n          }\n          if (value.expirationDate.year != null) {\n            cipher.card.expYear = value.expirationDate.year + \"\";\n          }\n        }\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AviraCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.name,\n        this.getValueOrDefault(this.nameFromUrl(value.website), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.website);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (\n        this.isNullOrWhitespace(value.username) &&\n        !this.isNullOrWhitespace(value.secondary_username)\n      ) {\n        cipher.login.username = value.secondary_username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.notes = this.getValueOrDefault(value.secondary_username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlackBerryCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.grouping === \"list\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.favorite = value.fav === \"1\";\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.extra);\n      if (value.grouping !== \"note\") {\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ChromeCsvImporter extends BaseImporter implements Importer {\n  private androidPatternRegex = new RegExp(\"^android:\\\\/\\\\/.*(?<=@)(.*)(?=\\\\/)\");\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      let name = value.name;\n      if (!name && this.androidPatternRegex.test(value.url)) {\n        name = value.url.match(this.androidPatternRegex)[1];\n      }\n      cipher.name = this.getValueOrDefault(name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.organization && !this.isNullOrWhitespace(value.collections)) {\n        const collections = (value.collections as string).split(\",\");\n        collections.forEach((col) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === col) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = col;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization) {\n        this.processFolder(result, value.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.favorite =\n        !this.organization && this.getValueOrDefault(value.favorite, \"0\") !== \"0\" ? true : false;\n      cipher.type = CipherType.Login;\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      try {\n        cipher.reprompt = parseInt(\n          this.getValueOrDefault(value.reprompt, CipherRepromptType.None.toString()),\n          10\n        );\n      } catch (e) {\n        // eslint-disable-next-line\n        console.error(\"Unable to parse reprompt value\", e);\n        cipher.reprompt = CipherRepromptType.None;\n      }\n\n      if (!this.isNullOrWhitespace(value.fields)) {\n        const fields = this.splitNewLine(value.fields);\n        for (let i = 0; i < fields.length; i++) {\n          if (this.isNullOrWhitespace(fields[i])) {\n            continue;\n          }\n\n          const delimPosition = fields[i].lastIndexOf(\": \");\n          if (delimPosition === -1) {\n            continue;\n          }\n\n          if (cipher.fields == null) {\n            cipher.fields = [];\n          }\n\n          const field = new FieldView();\n          field.name = fields[i].substr(0, delimPosition);\n          field.value = null;\n          field.type = FieldType.Text;\n          if (fields[i].length > delimPosition + 2) {\n            field.value = fields[i].substr(delimPosition + 2);\n          }\n          cipher.fields.push(field);\n        }\n      }\n\n      const valueType = value.type != null ? value.type.toLowerCase() : null;\n      switch (valueType) {\n        case \"note\":\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote = new SecureNoteView();\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default: {\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.totp = this.getValueOrDefault(value.login_totp || value.totp);\n          cipher.login.username = this.getValueOrDefault(value.login_username || value.username);\n          cipher.login.password = this.getValueOrDefault(value.login_password || value.password);\n          const uris = this.parseSingleRowCsv(value.login_uri || value.uri);\n          cipher.login.uris = this.makeUriArray(uris);\n          break;\n        }\n      }\n\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import {\n  CipherWithIdExport,\n  CollectionWithIdExport,\n  FolderWithIdExport,\n} from \"@bitwarden/common/models/export\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenJsonImporter extends BaseImporter implements Importer {\n  private results: any;\n  private result: ImportResult;\n\n  protected constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService\n  ) {\n    super();\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    this.results = JSON.parse(data);\n    if (this.results == null || this.results.items == null) {\n      this.result.success = false;\n      return this.result;\n    }\n\n    if (this.results.encrypted) {\n      await this.parseEncrypted();\n    } else {\n      this.parseDecrypted();\n    }\n\n    return this.result;\n  }\n\n  private async parseEncrypted() {\n    if (this.results.encKeyValidation_DO_NOT_EDIT != null) {\n      const orgKey = await this.cryptoService.getOrgKey(this.organizationId);\n      const encKeyValidation = new EncString(this.results.encKeyValidation_DO_NOT_EDIT);\n      const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n        encKeyValidation,\n        orgKey\n      );\n      if (encKeyValidationDecrypt === null) {\n        this.result.success = false;\n        this.result.errorMessage = this.i18nService.t(\"importEncKeyError\");\n        return;\n      }\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    if (this.organization && this.results.collections != null) {\n      for (const c of this.results.collections as CollectionWithIdExport[]) {\n        const collection = CollectionWithIdExport.toDomain(c);\n        if (collection != null) {\n          collection.organizationId = this.organizationId;\n          const view = await collection.decrypt();\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(view);\n        }\n      }\n    } else if (!this.organization && this.results.folders != null) {\n      for (const f of this.results.folders as FolderWithIdExport[]) {\n        const folder = FolderWithIdExport.toDomain(f);\n        if (folder != null) {\n          const view = await folder.decrypt();\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(view);\n        }\n      }\n    }\n\n    for (const c of this.results.items as CipherWithIdExport[]) {\n      const cipher = CipherWithIdExport.toDomain(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = this.organizationId;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      const view = await cipher.decrypt();\n      this.cleanupCipher(view);\n      this.result.ciphers.push(view);\n    }\n\n    this.result.success = true;\n  }\n\n  private parseDecrypted() {\n    const groupingsMap = new Map<string, number>();\n    if (this.organization && this.results.collections != null) {\n      this.results.collections.forEach((c: CollectionWithIdExport) => {\n        const collection = CollectionWithIdExport.toView(c);\n        if (collection != null) {\n          collection.organizationId = null;\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(collection);\n        }\n      });\n    } else if (!this.organization && this.results.folders != null) {\n      this.results.folders.forEach((f: FolderWithIdExport) => {\n        const folder = FolderWithIdExport.toView(f);\n        if (folder != null) {\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(folder);\n        }\n      });\n    }\n\n    this.results.items.forEach((c: CipherWithIdExport) => {\n      const cipher = CipherWithIdExport.toView(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = null;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n  }\n}\n","import { KdfConfig } from \"@bitwarden/common/auth/models/domain/kdf-config\";\nimport { KdfType } from \"@bitwarden/common/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { BitwardenPasswordProtectedFileFormat } from \"@bitwarden/exporter/vault-export/bitwarden-password-protected-types\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { Importer } from \"../importer\";\n\nimport { BitwardenJsonImporter } from \"./bitwarden-json-importer\";\nexport class BitwardenPasswordProtectedImporter extends BitwardenJsonImporter implements Importer {\n  private key: SymmetricCryptoKey;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    private promptForPassword_callback: () => Promise<string>\n  ) {\n    super(cryptoService, i18nService);\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const parsedData: BitwardenPasswordProtectedFileFormat = JSON.parse(data);\n\n    if (!parsedData) {\n      result.success = false;\n      return result;\n    }\n\n    // File is unencrypted\n    if (!parsedData?.encrypted) {\n      return await super.parse(data);\n    }\n\n    // File is account-encrypted\n    if (!parsedData?.passwordProtected) {\n      return await super.parse(data);\n    }\n\n    if (this.cannotParseFile(parsedData)) {\n      result.success = false;\n      return result;\n    }\n\n    // File is password-protected\n    const password = await this.promptForPassword_callback();\n    if (!(await this.checkPassword(parsedData, password))) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"invalidFilePassword\");\n      return result;\n    }\n\n    const encData = new EncString(parsedData.data);\n    const clearTextData = await this.cryptoService.decryptToUtf8(encData, this.key);\n    return await super.parse(clearTextData);\n  }\n\n  private async checkPassword(\n    jdoc: BitwardenPasswordProtectedFileFormat,\n    password: string\n  ): Promise<boolean> {\n    if (this.isNullOrWhitespace(password)) {\n      return false;\n    }\n\n    this.key = await this.cryptoService.makePinKey(\n      password,\n      jdoc.salt,\n      jdoc.kdfType,\n      new KdfConfig(jdoc.kdfIterations, jdoc.kdfMemory, jdoc.kdfParallelism)\n    );\n\n    const encKeyValidation = new EncString(jdoc.encKeyValidation_DO_NOT_EDIT);\n\n    const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n      encKeyValidation,\n      this.key\n    );\n    if (encKeyValidationDecrypt === null) {\n      return false;\n    }\n    return true;\n  }\n\n  private cannotParseFile(jdoc: BitwardenPasswordProtectedFileFormat): boolean {\n    return (\n      !jdoc ||\n      !jdoc.encrypted ||\n      !jdoc.passwordProtected ||\n      !jdoc.salt ||\n      !jdoc.kdfIterations ||\n      typeof jdoc.kdfIterations !== \"number\" ||\n      jdoc.kdfType == null ||\n      KdfType[jdoc.kdfType] == null ||\n      !jdoc.encKeyValidation_DO_NOT_EDIT ||\n      !jdoc.data\n    );\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlurCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.label === \"null\") {\n        value.label = null;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.label,\n        this.getValueOrDefault(this.nameFromUrl(value.domain), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.domain);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (this.isNullOrWhitespace(value.email) && !this.isNullOrWhitespace(value.username)) {\n        cipher.login.username = value.username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.email);\n        cipher.notes = this.getValueOrDefault(value.username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst OfficialProps = [\"!group_id\", \"!group_name\", \"title\", \"username\", \"password\", \"URL\", \"id\"];\n\nexport class ButtercupCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value[\"!group_name\"]));\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      let processingCustomFields = false;\n      for (const prop in value) {\n        // eslint-disable-next-line\n        if (value.hasOwnProperty(prop)) {\n          if (!processingCustomFields && OfficialProps.indexOf(prop) === -1) {\n            processingCustomFields = true;\n          }\n          if (processingCustomFields) {\n            this.processKvp(cipher, prop, value[prop]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ClipperzHtmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const textarea = doc.querySelector(\"textarea\");\n    if (textarea == null || this.isNullOrWhitespace(textarea.textContent)) {\n      result.errorMessage = \"Missing textarea.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const entries = JSON.parse(textarea.textContent);\n    entries.forEach((entry: any) => {\n      const cipher = this.initLoginCipher();\n      if (!this.isNullOrWhitespace(entry.label)) {\n        cipher.name = entry.label.split(\" \")[0];\n      }\n      if (entry.data != null && !this.isNullOrWhitespace(entry.data.notes)) {\n        cipher.notes = entry.data.notes.split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (entry.currentVersion != null && entry.currentVersion.fields != null) {\n        for (const property in entry.currentVersion.fields) {\n          // eslint-disable-next-line\n          if (!entry.currentVersion.fields.hasOwnProperty(property)) {\n            continue;\n          }\n\n          const field = entry.currentVersion.fields[property];\n          const actionType = field.actionType != null ? field.actionType.toLowerCase() : null;\n          switch (actionType) {\n            case \"password\":\n              cipher.login.password = this.getValueOrDefault(field.value);\n              break;\n            case \"email\":\n            case \"username\":\n            case \"user\":\n            case \"name\":\n              cipher.login.username = this.getValueOrDefault(field.value);\n              break;\n            case \"url\":\n              cipher.login.uris = this.makeUriArray(field.value);\n              break;\n            default: {\n              const labelLower = field.label != null ? field.label.toLowerCase() : null;\n              if (\n                cipher.login.password == null &&\n                this.passwordFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.password = this.getValueOrDefault(field.value);\n              } else if (\n                cipher.login.username == null &&\n                this.usernameFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.username = this.getValueOrDefault(field.value);\n              } else if (\n                (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n                this.uriFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.uris = this.makeUriArray(field.value);\n              } else {\n                this.processKvp(cipher, field.label, field.value);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class CodebookCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value.Category));\n\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite) === \"True\";\n      cipher.name = this.getValueOrDefault(value.Entry, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.login.username = this.getValueOrDefault(value.Username, value.Email);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.totp = this.getValueOrDefault(value.TOTP);\n      cipher.login.uris = this.makeUriArray(value.Website);\n\n      if (!this.isNullOrWhitespace(value.Username)) {\n        this.processKvp(cipher, \"Email\", value.Email);\n      }\n      this.processKvp(cipher, \"Phone\", value.Phone);\n      this.processKvp(cipher, \"PIN\", value.PIN);\n      this.processKvp(cipher, \"Account\", value.Account);\n      this.processKvp(cipher, \"Date\", value.Date);\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CredentialsRecord,\n  IdRecord,\n  PaymentsRecord,\n  PersonalInformationRecord,\n  SecureNoteRecord,\n} from \"./types/dashlane-csv-types\";\n\nconst _mappedCredentialsColumns = new Set([\n  \"title\",\n  \"note\",\n  \"username\",\n  \"password\",\n  \"url\",\n  \"otpSecret\",\n  \"category\",\n]);\n\nconst _mappedPersonalInfoAsIdentityColumns = new Set([\n  \"type\",\n  \"title\",\n  \"first_name\",\n  \"middle_name\",\n  \"last_name\",\n  \"login\",\n  \"email\",\n  \"phone_number\",\n  \"address\",\n  \"country\",\n  \"state\",\n  \"city\",\n  \"zip\",\n  // Skip item_name as we already have set a combined name\n  \"item_name\",\n]);\n\nconst _mappedSecureNoteColumns = new Set([\"title\", \"note\"]);\n\nexport class DashlaneCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results[0].type != null && results[0].title != null) {\n      const personalRecords = results as PersonalInformationRecord[];\n\n      // If personalRecords has only one \"name\" then create an Identity-Cipher\n      if (personalRecords.filter((x) => x.type === \"name\").length === 1) {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        results.forEach((row) => {\n          this.parsePersonalInformationRecordAsIdentity(cipher, row);\n        });\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n        result.success = true;\n        return Promise.resolve(result);\n      }\n    }\n\n    results.forEach((row) => {\n      const cipher = this.initLoginCipher();\n\n      const rowKeys = Object.keys(row);\n      if (rowKeys[0] === \"username\") {\n        this.processFolder(result, row.category);\n        this.parseCredentialsRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"account_name\") {\n        this.parsePaymentRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"number\") {\n        this.parseIdRecord(cipher, row);\n      }\n\n      if ((rowKeys[0] === \"type\") != null && rowKeys[1] === \"title\") {\n        this.parsePersonalInformationRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"title\" && rowKeys[1] === \"note\") {\n        this.parseSecureNoteRecords(cipher, row);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  parseCredentialsRecord(cipher: CipherView, row: CredentialsRecord) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    cipher.name = row.title;\n    cipher.notes = row.note;\n    cipher.login.username = row.username;\n    cipher.login.password = row.password;\n    cipher.login.totp = row.otpSecret;\n    cipher.login.uris = this.makeUriArray(row.url);\n\n    this.importUnmappedFields(cipher, row, _mappedCredentialsColumns);\n  }\n\n  parsePaymentRecord(cipher: CipherView, row: PaymentsRecord) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n\n    cipher.name = row.account_name;\n    let mappedValues: string[] = [];\n    switch (row.type) {\n      case \"credit_card\":\n        cipher.card.cardholderName = row.account_name;\n        cipher.card.number = row.cc_number;\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.code = row.code;\n        this.setCardExpiration(cipher, `${row.expiration_month}/${row.expiration_year}`);\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\n          \"account_name\",\n          \"account_holder\",\n          \"cc_number\",\n          \"code\",\n          \"expiration_month\",\n          \"expiration_year\",\n        ];\n        break;\n      case \"bank\":\n        cipher.card.cardholderName = row.account_holder;\n        cipher.card.number = row.account_number;\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\"account_name\", \"account_holder\", \"account_number\"];\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parseIdRecord(cipher: CipherView, row: IdRecord) {\n    cipher.type = CipherType.Identity;\n    cipher.identity = new IdentityView();\n\n    const mappedValues: string[] = [\"name\", \"number\"];\n    switch (row.type) {\n      case \"card\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        break;\n      case \"passport\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.passportNumber = row.number;\n        break;\n      case \"license\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        cipher.identity.state = row.state;\n\n        mappedValues.push(\"state\");\n        break;\n      case \"social_security\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.ssn = row.number;\n        break;\n      case \"tax_number\":\n        cipher.name = row.type;\n        cipher.identity.licenseNumber = row.number;\n        break;\n\n      default:\n        break;\n    }\n\n    // If you add more mapped fields please extend this\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parsePersonalInformationRecord(cipher: CipherView, row: PersonalInformationRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    if (row.type === \"name\") {\n      cipher.name = `${row.title} ${row.first_name} ${row.middle_name} ${row.last_name}`\n        .replace(\"  \", \" \")\n        .trim();\n    } else {\n      cipher.name = row.item_name;\n    }\n\n    const dataRow = row as any;\n    Object.keys(row).forEach((key) => {\n      this.processKvp(cipher, key, dataRow[key]);\n    });\n  }\n\n  parsePersonalInformationRecordAsIdentity(cipher: CipherView, row: PersonalInformationRecord) {\n    switch (row.type) {\n      case \"name\":\n        this.processFullName(cipher, `${row.first_name} ${row.middle_name} ${row.last_name}`);\n        cipher.identity.title = row.title;\n        cipher.name = cipher.identity.fullName;\n\n        cipher.identity.username = row.login;\n        break;\n      case \"email\":\n        cipher.identity.email = row.email;\n        break;\n      case \"number\":\n        cipher.identity.phone = row.phone_number;\n        break;\n      case \"address\":\n        cipher.identity.address1 = row.address;\n        cipher.identity.city = row.city;\n        cipher.identity.postalCode = row.zip;\n        cipher.identity.state = row.state;\n        cipher.identity.country = row.country;\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, _mappedPersonalInfoAsIdentityColumns);\n  }\n\n  parseSecureNoteRecords(cipher: CipherView, row: SecureNoteRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = row.title;\n    cipher.notes = row.note;\n\n    this.importUnmappedFields(cipher, row, _mappedSecureNoteColumns);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nconst HandledResults = new Set([\n  \"ADDRESS\",\n  \"AUTHENTIFIANT\",\n  \"BANKSTATEMENT\",\n  \"IDCARD\",\n  \"IDENTITY\",\n  \"PAYMENTMEANS_CREDITCARD\",\n  \"PAYMENTMEAN_PAYPAL\",\n  \"EMAIL\",\n]);\n\nexport class DashlaneJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    if (results.ADDRESS != null) {\n      this.processAddress(results.ADDRESS);\n    }\n    if (results.AUTHENTIFIANT != null) {\n      this.processAuth(results.AUTHENTIFIANT);\n    }\n    if (results.BANKSTATEMENT != null) {\n      this.processNote(results.BANKSTATEMENT, \"BankAccountName\");\n    }\n    if (results.IDCARD != null) {\n      this.processNote(results.IDCARD, \"Fullname\");\n    }\n    if (results.PAYMENTMEANS_CREDITCARD != null) {\n      this.processCard(results.PAYMENTMEANS_CREDITCARD);\n    }\n    if (results.IDENTITY != null) {\n      this.processIdentity(results.IDENTITY);\n    }\n\n    for (const key in results) {\n      // eslint-disable-next-line\n      if (results.hasOwnProperty(key) && !HandledResults.has(key)) {\n        this.processNote(results[key], null, \"Generic Note\");\n      }\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processAuth(results: any[]) {\n    results.forEach((credential: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(credential.title);\n\n      cipher.login.username = this.getValueOrDefault(\n        credential.login,\n        this.getValueOrDefault(credential.secondaryLogin)\n      );\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.domain);\n      cipher.notes += this.getValueOrDefault(credential.note, \"\");\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processIdentity(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.fullName, \"\");\n      const nameParts = cipher.name.split(\" \");\n      if (nameParts.length > 0) {\n        cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n      }\n      if (nameParts.length === 2) {\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n      } else if (nameParts.length === 3) {\n        cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[2]);\n      }\n      cipher.identity.username = this.getValueOrDefault(obj.pseudo);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processAddress(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.addressName);\n      cipher.identity.address1 = this.getValueOrDefault(obj.addressFull);\n      cipher.identity.city = this.getValueOrDefault(obj.city);\n      cipher.identity.state = this.getValueOrDefault(obj.state);\n      cipher.identity.postalCode = this.getValueOrDefault(obj.zipcode);\n      cipher.identity.country = this.getValueOrDefault(obj.country);\n      if (cipher.identity.country != null) {\n        cipher.identity.country = cipher.identity.country.toUpperCase();\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processCard(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.card = new CardView();\n      cipher.type = CipherType.Card;\n      cipher.name = this.getValueOrDefault(obj.bank);\n      cipher.card.number = this.getValueOrDefault(obj.cardNumber);\n      cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n      cipher.card.cardholderName = this.getValueOrDefault(obj.owner);\n      if (!this.isNullOrWhitespace(cipher.card.brand)) {\n        if (this.isNullOrWhitespace(cipher.name)) {\n          cipher.name = cipher.card.brand;\n        } else {\n          cipher.name += \" - \" + cipher.card.brand;\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processNote(results: any[], nameProperty: string, name: string = null) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.secureNote = new SecureNoteView();\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote.type = SecureNoteType.Generic;\n      if (name != null) {\n        cipher.name = name;\n      } else {\n        cipher.name = this.getValueOrDefault(obj[nameProperty]);\n      }\n      for (const key in obj) {\n        // eslint-disable-next-line\n        if (obj.hasOwnProperty(key) && key !== nameProperty) {\n          this.processKvp(cipher, key, obj[key].toString());\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class EncryptrCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Label, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      const text = this.getValueOrDefault(value.Text);\n      if (!this.isNullOrWhitespace(text)) {\n        if (this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = text;\n        } else {\n          cipher.notes += \"\\n\\n\" + text;\n        }\n      }\n\n      const type = value[\"Entry Type\"];\n      if (type === \"Password\") {\n        cipher.login.username = this.getValueOrDefault(value.Username);\n        cipher.login.password = this.getValueOrDefault(value.Password);\n        cipher.login.uris = this.makeUriArray(value[\"Site URL\"]);\n      } else if (type === \"Credit Card\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value[\"Name on card\"]);\n        cipher.card.number = this.getValueOrDefault(value[\"Card Number\"]);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.CVV);\n        const expiry = this.getValueOrDefault(value.Expiry);\n        if (!this.isNullOrWhitespace(expiry)) {\n          const expParts = expiry.split(\"/\");\n          if (expParts.length > 1) {\n            cipher.card.expMonth = parseInt(expParts[0], null).toString();\n            cipher.card.expYear = (2000 + parseInt(expParts[1], null)).toString();\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class EnpassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let firstRow = true;\n    results.forEach((value) => {\n      if (value.length < 2 || (firstRow && (value[0] === \"Title\" || value[0] === \"title\"))) {\n        firstRow = false;\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (\n        value.length === 2 ||\n        (!this.containsField(value, \"username\") &&\n          !this.containsField(value, \"password\") &&\n          !this.containsField(value, \"email\") &&\n          !this.containsField(value, \"url\"))\n      ) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      }\n\n      if (\n        this.containsField(value, \"cardholder\") &&\n        this.containsField(value, \"number\") &&\n        this.containsField(value, \"expiry date\")\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      }\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const fieldValue: string = value[i + 2];\n          if (this.isNullOrWhitespace(fieldValue)) {\n            continue;\n          }\n\n          const fieldName: string = value[i + 1];\n          const fieldNameLower = fieldName.toLowerCase();\n\n          if (cipher.type === CipherType.Login) {\n            if (\n              fieldNameLower === \"url\" &&\n              (cipher.login.uris == null || cipher.login.uris.length === 0)\n            ) {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              continue;\n            } else if (\n              (fieldNameLower === \"username\" || fieldNameLower === \"email\") &&\n              this.isNullOrWhitespace(cipher.login.username)\n            ) {\n              cipher.login.username = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"password\" &&\n              this.isNullOrWhitespace(cipher.login.password)\n            ) {\n              cipher.login.password = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n              cipher.login.totp = fieldValue;\n              continue;\n            }\n          } else if (cipher.type === CipherType.Card) {\n            if (\n              fieldNameLower === \"cardholder\" &&\n              this.isNullOrWhitespace(cipher.card.cardholderName)\n            ) {\n              cipher.card.cardholderName = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"number\" && this.isNullOrWhitespace(cipher.card.number)) {\n              cipher.card.number = fieldValue;\n              cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n              continue;\n            } else if (fieldNameLower === \"cvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n              cipher.card.code = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"expiry date\" &&\n              this.isNullOrWhitespace(cipher.card.expMonth) &&\n              this.isNullOrWhitespace(cipher.card.expYear)\n            ) {\n              if (this.setCardExpiration(cipher, fieldValue)) {\n                continue;\n              }\n            } else if (fieldNameLower === \"type\") {\n              // Skip since brand was determined from number above\n              continue;\n            }\n          }\n\n          this.processKvp(cipher, fieldName, fieldValue);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private containsField(fields: any[], name: string) {\n    if (fields == null || name == null) {\n      return false;\n    }\n    return (\n      fields.filter((f) => !this.isNullOrWhitespace(f) && f.toLowerCase() === name.toLowerCase())\n        .length > 0\n    );\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { EnpassJsonFile, EnpassFolder, EnpassField } from \"./types/enpass-json-type\";\n\ntype EnpassFolderTreeItem = EnpassFolder & { children: EnpassFolderTreeItem[] };\nconst androidUrlRegex = new RegExp(\"androidapp://.*==@\", \"g\");\n\nexport class EnpassJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: EnpassJsonFile = JSON.parse(data);\n    if (results == null || results.items == null || results.items.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    const foldersIndexMap = new Map<string, number>();\n    const folderTree = this.buildFolderTree(results.folders);\n    this.flattenFolderTree(null, folderTree, foldersMap);\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((item) => {\n      if (item.folders != null && item.folders.length > 0 && foldersIndexMap.has(item.folders[0])) {\n        result.folderRelationships.push([\n          result.ciphers.length,\n          foldersIndexMap.get(item.folders[0]),\n        ]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(item.title);\n      cipher.favorite = item.favorite > 0;\n\n      if (item.template_type != null && item.fields != null && item.fields.length > 0) {\n        if (\n          item.template_type.indexOf(\"login.\") === 0 ||\n          item.template_type.indexOf(\"password.\") === 0\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else if (item.template_type.indexOf(\"creditcard.\") === 0) {\n          this.processCard(cipher, item.fields);\n        } else if (\n          item.template_type.indexOf(\"identity.\") < 0 &&\n          item.fields.some((f) => f.type === \"password\" && !this.isNullOrWhitespace(f.value))\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else {\n          this.processNote(cipher, item.fields);\n        }\n      }\n\n      cipher.notes += \"\\n\" + this.getValueOrDefault(item.note, \"\");\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private processLogin(cipher: CipherView, fields: EnpassField[]) {\n    const urls: string[] = [];\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n\n      if (\n        (field.type === \"username\" || field.type === \"email\") &&\n        this.isNullOrWhitespace(cipher.login.username)\n      ) {\n        cipher.login.username = field.value;\n      } else if (field.type === \"password\" && this.isNullOrWhitespace(cipher.login.password)) {\n        cipher.login.password = field.value;\n      } else if (field.type === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n        cipher.login.totp = field.value;\n      } else if (field.type === \"url\") {\n        urls.push(field.value);\n      } else if (field.type === \".Android#\") {\n        let cleanedValue = field.value.startsWith(\"androidapp://\")\n          ? field.value\n          : \"androidapp://\" + field.value;\n        cleanedValue = cleanedValue.replace(\"android://\", \"\");\n        cleanedValue = cleanedValue.replace(androidUrlRegex, \"androidapp://\");\n        urls.push(cleanedValue);\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n    cipher.login.uris = this.makeUriArray(urls);\n  }\n\n  private processCard(cipher: CipherView, fields: EnpassField[]) {\n    cipher.card = new CardView();\n    cipher.type = CipherType.Card;\n    fields.forEach((field) => {\n      if (\n        this.isNullOrWhitespace(field.value) ||\n        field.type === \"section\" ||\n        field.type === \"ccType\"\n      ) {\n        return;\n      }\n\n      if (field.type === \"ccName\" && this.isNullOrWhitespace(cipher.card.cardholderName)) {\n        cipher.card.cardholderName = field.value;\n      } else if (field.type === \"ccNumber\" && this.isNullOrWhitespace(cipher.card.number)) {\n        cipher.card.number = field.value;\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n      } else if (field.type === \"ccCvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n        cipher.card.code = field.value;\n      } else if (field.type === \"ccExpiry\" && this.isNullOrWhitespace(cipher.card.expYear)) {\n        if (!this.setCardExpiration(cipher, field.value)) {\n          this.processKvp(\n            cipher,\n            field.label,\n            field.value,\n            field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n          );\n        }\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n  }\n\n  private processNote(cipher: CipherView, fields: EnpassField[]) {\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n      this.processKvp(\n        cipher,\n        field.label,\n        field.value,\n        field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n      );\n    });\n  }\n\n  private buildFolderTree(folders: EnpassFolder[]): EnpassFolderTreeItem[] {\n    if (folders == null) {\n      return [];\n    }\n    const folderTree: EnpassFolderTreeItem[] = [];\n    const map = new Map<string, EnpassFolderTreeItem>([]);\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      map.set(obj.uuid, obj);\n      obj.children = [];\n    });\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      if (obj.parent_uuid != null && obj.parent_uuid !== \"\" && map.has(obj.parent_uuid)) {\n        map.get(obj.parent_uuid).children.push(obj);\n      } else {\n        folderTree.push(obj);\n      }\n    });\n    return folderTree;\n  }\n\n  private flattenFolderTree(\n    titlePrefix: string,\n    tree: EnpassFolderTreeItem[],\n    map: Map<string, string>\n  ) {\n    if (tree == null) {\n      return;\n    }\n    tree.forEach((f) => {\n      if (f.title != null && f.title.trim() !== \"\") {\n        let title = f.title.trim();\n        if (titlePrefix != null && titlePrefix.trim() !== \"\") {\n          title = titlePrefix + \"/\" + title;\n        }\n        map.set(f.uuid, title);\n        if (f.children != null && f.children.length !== 0) {\n          this.flattenFolderTree(title, f.children, map);\n        }\n      }\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class FirefoxCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results\n      .filter((value) => {\n        return value.url !== \"chrome://FirefoxAccounts\";\n      })\n      .forEach((value) => {\n        const cipher = this.initLoginCipher();\n        const url = this.getValueOrDefault(value.url, this.getValueOrDefault(value.hostname));\n        cipher.name = this.getValueOrDefault(this.nameFromUrl(url), \"--\");\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.uris = this.makeUriArray(url);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export interface FskFile {\n  data: Data;\n}\n\nexport interface Data {\n  [key: string]: FskEntry;\n}\n\nexport enum FskEntryTypesEnum {\n  Login = 1,\n  CreditCard = 2,\n}\n\nexport interface FskEntry {\n  color: string;\n  creditCvv: string;\n  creditExpiry: string;\n  creditNumber: string;\n  favorite: number; // UNIX timestamp\n  notes: string;\n  password: string;\n  passwordList: PasswordList[];\n  passwordModifiedDate: number; // UNIX timestamp\n  rev: string | number;\n  service: string;\n  style: string;\n  type: FskEntryTypesEnum;\n  url: string;\n  username: string;\n  createdDate: number; // UNIX timestamp\n  modifiedDate: number; // UNIX timestamp\n}\n\nexport interface PasswordList {\n  changedate: string;\n  password: string;\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { FskEntry, FskEntryTypesEnum, FskFile } from \"./fsecure-fsk-types\";\n\nexport class FSecureFskImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: FskFile = JSON.parse(data);\n    if (results == null || results.data == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const key in results.data) {\n      // eslint-disable-next-line\n      if (!results.data.hasOwnProperty(key)) {\n        continue;\n      }\n\n      const value = results.data[key];\n      const cipher = this.parseEntry(value);\n      result.ciphers.push(cipher);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseEntry(entry: FskEntry): CipherView {\n    const cipher = this.initLoginCipher();\n    cipher.name = this.getValueOrDefault(entry.service);\n    cipher.notes = this.getValueOrDefault(entry.notes);\n    cipher.favorite = entry.favorite > 0;\n\n    switch (entry.type) {\n      case FskEntryTypesEnum.Login:\n        this.handleLoginEntry(entry, cipher);\n        break;\n      case FskEntryTypesEnum.CreditCard:\n        this.handleCreditCardEntry(entry, cipher);\n        break;\n      default:\n        return;\n        break;\n    }\n\n    this.convertToNoteIfNeeded(cipher);\n    this.cleanupCipher(cipher);\n    return cipher;\n  }\n\n  private handleLoginEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.login.username = this.getValueOrDefault(entry.username);\n    cipher.login.password = this.getValueOrDefault(entry.password);\n    cipher.login.uris = this.makeUriArray(entry.url);\n  }\n\n  private handleCreditCardEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n    cipher.card.cardholderName = this.getValueOrDefault(entry.username);\n    cipher.card.number = this.getValueOrDefault(entry.creditNumber);\n    cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n    cipher.card.code = this.getValueOrDefault(entry.creditCvv);\n    if (!this.isNullOrWhitespace(entry.creditExpiry)) {\n      if (!this.setCardExpiration(cipher, entry.creditExpiry)) {\n        this.processKvp(cipher, \"Expiration\", entry.creditExpiry);\n      }\n    }\n    if (!this.isNullOrWhitespace(entry.password)) {\n      this.processKvp(cipher, \"PIN\", entry.password);\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class GnomeJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || Object.keys(results).length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const keyRing in results) {\n      if (\n        !results.hasOwnProperty(keyRing) || // eslint-disable-line\n        this.isNullOrWhitespace(keyRing) ||\n        results[keyRing].length === 0\n      ) {\n        continue;\n      }\n\n      results[keyRing].forEach((value: any) => {\n        if (\n          this.isNullOrWhitespace(value.display_name) ||\n          value.display_name.indexOf(\"http\") !== 0\n        ) {\n          return;\n        }\n\n        this.processFolder(result, keyRing);\n        const cipher = this.initLoginCipher();\n        cipher.name = value.display_name.replace(\"http://\", \"\").replace(\"https://\", \"\");\n        if (cipher.name.length > 30) {\n          cipher.name = cipher.name.substring(0, 30);\n        }\n        cipher.login.password = this.getValueOrDefault(value.secret);\n        cipher.login.uris = this.makeUriArray(value.display_name);\n\n        if (value.attributes != null) {\n          cipher.login.username =\n            value.attributes != null\n              ? this.getValueOrDefault(value.attributes.username_value)\n              : null;\n          for (const attr in value.attributes) {\n            if (\n              !value.attributes.hasOwnProperty(attr) || // eslint-disable-line\n              attr === \"username_value\" ||\n              attr === \"xdg:schema\"\n            ) {\n              continue;\n            }\n            this.processKvp(cipher, attr, value.attributes[attr]);\n          }\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst NotesHeader = \"Notes\\n\\n\";\nconst ApplicationsHeader = \"Applications\\n\\n\";\nconst WebsitesHeader = \"Websites\\n\\n\";\nconst Delimiter = \"\\n---\\n\";\n\nexport class KasperskyTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n\n    let notesData: string;\n    let applicationsData: string;\n    let websitesData: string;\n    let workingData = this.splitNewLine(data).join(\"\\n\");\n\n    if (workingData.indexOf(NotesHeader) !== -1) {\n      const parts = workingData.split(NotesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        notesData = parts[1];\n      }\n    }\n    if (workingData.indexOf(ApplicationsHeader) !== -1) {\n      const parts = workingData.split(ApplicationsHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        applicationsData = parts[1];\n      }\n    }\n    if (workingData.indexOf(WebsitesHeader) === 0) {\n      const parts = workingData.split(WebsitesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        websitesData = parts[1];\n      }\n    }\n\n    const notes = this.parseDataCategory(notesData);\n    const applications = this.parseDataCategory(applicationsData);\n    const websites = this.parseDataCategory(websitesData);\n\n    notes.forEach((n) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(n.get(\"Name\"));\n      cipher.notes = this.getValueOrDefault(n.get(\"Text\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    websites.concat(applications).forEach((w) => {\n      const cipher = this.initLoginCipher();\n      const nameKey = w.has(\"Website name\") ? \"Website name\" : \"Application\";\n      cipher.name = this.getValueOrDefault(w.get(nameKey), \"\");\n      if (!this.isNullOrWhitespace(w.get(\"Login name\"))) {\n        if (!this.isNullOrWhitespace(cipher.name)) {\n          cipher.name += \": \";\n        }\n        cipher.name += w.get(\"Login name\");\n      }\n      cipher.notes = this.getValueOrDefault(w.get(\"Comment\"));\n      if (w.has(\"Website URL\")) {\n        cipher.login.uris = this.makeUriArray(w.get(\"Website URL\"));\n      }\n      cipher.login.username = this.getValueOrDefault(w.get(\"Login\"));\n      cipher.login.password = this.getValueOrDefault(w.get(\"Password\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseDataCategory(data: string): Map<string, string>[] {\n    if (this.isNullOrWhitespace(data) || data.indexOf(Delimiter) === -1) {\n      return [];\n    }\n    const items: Map<string, string>[] = [];\n    data.split(Delimiter).forEach((p) => {\n      if (p.indexOf(\"\\n\") === -1) {\n        return;\n      }\n      const item = new Map<string, string>();\n      let itemComment: string;\n      let itemCommentKey: string;\n      p.split(\"\\n\").forEach((l) => {\n        if (itemComment != null) {\n          itemComment += \"\\n\" + l;\n          return;\n        }\n        const colonIndex = l.indexOf(\":\");\n        let key: string;\n        let val: string;\n        if (colonIndex === -1) {\n          return;\n        } else {\n          key = l.substring(0, colonIndex);\n          if (l.length > colonIndex + 1) {\n            val = l.substring(colonIndex + 2);\n          }\n        }\n        if (key != null) {\n          item.set(key, val);\n        }\n        if (key === \"Comment\" || key === \"Text\") {\n          itemComment = val;\n          itemCommentKey = key;\n        }\n      });\n      if (itemComment != null && itemCommentKey != null) {\n        item.set(itemCommentKey, itemComment);\n      }\n      if (item.size === 0) {\n        return;\n      }\n      items.push(item);\n    });\n    return items;\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePass2XmlImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    //Note: The doc.querySelector(\"KeePassFile > Root > Group\") no longers works on node and we have to breakdown the query by nodes\n    const KeePassFileNode = doc.querySelector(\"KeePassFile\");\n\n    if (KeePassFileNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const RootNode = KeePassFileNode.querySelector(\"Root\");\n    if (RootNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const rootGroup = RootNode.querySelector(\"Group\");\n    if (rootGroup == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root > Group` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    this.traverse(rootGroup, true, \"\");\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  traverse(node: Element, isRootNode: boolean, groupPrefixName: string) {\n    const folderIndex = this.result.folders.length;\n    let groupName = groupPrefixName;\n\n    if (!isRootNode) {\n      if (groupName !== \"\") {\n        groupName += \"/\";\n      }\n      const nameEl = this.querySelectorDirectChild(node, \"Name\");\n      groupName += nameEl == null ? \"-\" : nameEl.textContent;\n      const folder = new FolderView();\n      folder.name = groupName;\n      this.result.folders.push(folder);\n    }\n\n    this.querySelectorAllDirectChild(node, \"Entry\").forEach((entry) => {\n      const cipherIndex = this.result.ciphers.length;\n\n      const cipher = this.initLoginCipher();\n      this.querySelectorAllDirectChild(entry, \"String\").forEach((entryString) => {\n        const valueEl = this.querySelectorDirectChild(entryString, \"Value\");\n        const value = valueEl != null ? valueEl.textContent : null;\n        if (this.isNullOrWhitespace(value)) {\n          return;\n        }\n        const keyEl = this.querySelectorDirectChild(entryString, \"Key\");\n        const key = keyEl != null ? keyEl.textContent : null;\n\n        if (key === \"URL\") {\n          cipher.login.uris = this.makeUriArray(value);\n        } else if (key === \"UserName\") {\n          cipher.login.username = value;\n        } else if (key === \"Password\") {\n          cipher.login.password = value;\n        } else if (key === \"otp\") {\n          cipher.login.totp = value.replace(\"key=\", \"\");\n        } else if (key === \"Title\") {\n          cipher.name = value;\n        } else if (key === \"Notes\") {\n          cipher.notes += value + \"\\n\";\n        } else {\n          let type = FieldType.Text;\n          const attrs = valueEl.attributes as any;\n          if (\n            attrs.length > 0 &&\n            attrs.ProtectInMemory != null &&\n            attrs.ProtectInMemory.value === \"True\"\n          ) {\n            type = FieldType.Hidden;\n          }\n          this.processKvp(cipher, key, value, type);\n        }\n      });\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n\n      if (!isRootNode) {\n        this.result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    this.querySelectorAllDirectChild(node, \"Group\").forEach((group) => {\n      this.traverse(group, false, groupName);\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePassXCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(value.Title)) {\n        return;\n      }\n\n      value.Group =\n        !this.isNullOrWhitespace(value.Group) && value.Group.startsWith(\"Root/\")\n          ? value.Group.replace(\"Root/\", \"\")\n          : value.Group;\n      const groupName = !this.isNullOrWhitespace(value.Group) ? value.Group : null;\n      this.processFolder(result, groupName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class KeeperCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 6) {\n        return;\n      }\n\n      this.processFolder(result, value[0]);\n      const cipher = this.initLoginCipher();\n\n      const notes = this.getValueOrDefault(value[5]);\n      if (notes) {\n        cipher.notes = `${notes}\\n`;\n      }\n\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[4]);\n\n      if (value.length > 7) {\n        // we have some custom fields.\n        for (let i = 7; i < value.length; i = i + 2) {\n          if (value[i] == \"TFC:Keeper\") {\n            cipher.login.totp = value[i + 1];\n          } else {\n            this.processKvp(cipher, value[i], value[i + 1]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LastPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipherIndex = result.ciphers.length;\n      let folderIndex = result.folders.length;\n      let grouping = value.grouping;\n      if (grouping != null) {\n        // eslint-disable-next-line\n        grouping = grouping.replace(/\\\\/g, \"/\").replace(/[\\x00-\\x1F\\x7F-\\x9F]/g, \"\");\n      }\n      const hasFolder = this.getValueOrDefault(grouping, \"(none)\") !== \"(none)\";\n      let addFolder = hasFolder;\n\n      if (hasFolder) {\n        for (let i = 0; i < result.folders.length; i++) {\n          if (result.folders[i].name === grouping) {\n            addFolder = false;\n            folderIndex = i;\n            break;\n          }\n        }\n      }\n\n      const cipher = this.buildBaseCipher(value);\n      if (cipher.type === CipherType.Login) {\n        cipher.notes = this.getValueOrDefault(value.extra);\n        cipher.login = new LoginView();\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.totp);\n      } else if (cipher.type === CipherType.SecureNote) {\n        this.parseSecureNote(value, cipher);\n      } else if (cipher.type === CipherType.Card) {\n        cipher.card = this.parseCard(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n      } else if (cipher.type === CipherType.Identity) {\n        cipher.identity = this.parseIdentity(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n        if (!this.isNullOrWhitespace(value.ccnum)) {\n          // there is a card on this identity too\n          const cardCipher = this.buildBaseCipher(value);\n          cardCipher.identity = null;\n          cardCipher.type = CipherType.Card;\n          cardCipher.card = this.parseCard(value);\n          result.ciphers.push(cardCipher);\n        }\n      }\n\n      result.ciphers.push(cipher);\n\n      if (addFolder) {\n        const f = new FolderView();\n        f.name = grouping;\n        result.folders.push(f);\n      }\n      if (hasFolder) {\n        result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private buildBaseCipher(value: any) {\n    const cipher = new CipherView();\n    // eslint-disable-next-line\n    if (value.hasOwnProperty(\"profilename\") && value.hasOwnProperty(\"profilelanguage\")) {\n      // form fill\n      cipher.favorite = false;\n      cipher.name = this.getValueOrDefault(value.profilename, \"--\");\n      cipher.type = CipherType.Card;\n\n      if (\n        !this.isNullOrWhitespace(value.title) ||\n        !this.isNullOrWhitespace(value.firstname) ||\n        !this.isNullOrWhitespace(value.lastname) ||\n        !this.isNullOrWhitespace(value.address1) ||\n        !this.isNullOrWhitespace(value.phone) ||\n        !this.isNullOrWhitespace(value.username) ||\n        !this.isNullOrWhitespace(value.email)\n      ) {\n        cipher.type = CipherType.Identity;\n      }\n    } else {\n      // site or secure note\n      cipher.favorite = !this.organization && this.getValueOrDefault(value.fav, \"0\") === \"1\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.type = value.url === \"http://sn\" ? CipherType.SecureNote : CipherType.Login;\n    }\n    return cipher;\n  }\n\n  private parseCard(value: any): CardView {\n    const card = new CardView();\n    card.cardholderName = this.getValueOrDefault(value.ccname);\n    card.number = this.getValueOrDefault(value.ccnum);\n    card.code = this.getValueOrDefault(value.cccsc);\n    card.brand = CardView.getCardBrandByPatterns(card.number);\n\n    if (!this.isNullOrWhitespace(value.ccexp) && value.ccexp.indexOf(\"-\") > -1) {\n      const ccexpParts = (value.ccexp as string).split(\"-\");\n      if (ccexpParts.length > 1) {\n        card.expYear = ccexpParts[0];\n        card.expMonth = ccexpParts[1];\n        if (card.expMonth.length === 2 && card.expMonth[0] === \"0\") {\n          card.expMonth = card.expMonth[1];\n        }\n      }\n    }\n\n    return card;\n  }\n\n  private parseIdentity(value: any): IdentityView {\n    const identity = new IdentityView();\n    identity.title = this.getValueOrDefault(value.title);\n    identity.firstName = this.getValueOrDefault(value.firstname);\n    identity.middleName = this.getValueOrDefault(value.middlename);\n    identity.lastName = this.getValueOrDefault(value.lastname);\n    identity.username = this.getValueOrDefault(value.username);\n    identity.company = this.getValueOrDefault(value.company);\n    identity.ssn = this.getValueOrDefault(value.ssn);\n    identity.address1 = this.getValueOrDefault(value.address1);\n    identity.address2 = this.getValueOrDefault(value.address2);\n    identity.address3 = this.getValueOrDefault(value.address3);\n    identity.city = this.getValueOrDefault(value.city);\n    identity.state = this.getValueOrDefault(value.state);\n    identity.postalCode = this.getValueOrDefault(value.zip);\n    identity.country = this.getValueOrDefault(value.country);\n    identity.email = this.getValueOrDefault(value.email);\n    identity.phone = this.getValueOrDefault(value.phone);\n\n    if (!this.isNullOrWhitespace(identity.title)) {\n      identity.title = identity.title.charAt(0).toUpperCase() + identity.title.slice(1);\n    }\n\n    return identity;\n  }\n\n  private parseSecureNote(value: any, cipher: CipherView) {\n    const extraParts = this.splitNewLine(value.extra);\n    let processedNote = false;\n\n    if (extraParts.length) {\n      const typeParts = extraParts[0].split(\":\");\n      if (\n        typeParts.length > 1 &&\n        typeParts[0] === \"NoteType\" &&\n        (typeParts[1] === \"Credit Card\" || typeParts[1] === \"Address\")\n      ) {\n        if (typeParts[1] === \"Credit Card\") {\n          const mappedData = this.parseSecureNoteMapping<CardView>(cipher, extraParts, {\n            Number: \"number\",\n            \"Name on Card\": \"cardholderName\",\n            \"Security Code\": \"code\",\n            // LP provides date in a format like 'June,2020'\n            // Store in expMonth, then parse and modify\n            \"Expiration Date\": \"expMonth\",\n          });\n\n          if (this.isNullOrWhitespace(mappedData.expMonth) || mappedData.expMonth === \",\") {\n            // No expiration data\n            mappedData.expMonth = undefined;\n          } else {\n            const [monthString, year] = mappedData.expMonth.split(\",\");\n            // Parse month name into number\n            if (!this.isNullOrWhitespace(monthString)) {\n              const month = new Date(Date.parse(monthString.trim() + \" 1, 2012\")).getMonth() + 1;\n              if (isNaN(month)) {\n                mappedData.expMonth = undefined;\n              } else {\n                mappedData.expMonth = month.toString();\n              }\n            } else {\n              mappedData.expMonth = undefined;\n            }\n            if (!this.isNullOrWhitespace(year)) {\n              mappedData.expYear = year;\n            }\n          }\n\n          cipher.type = CipherType.Card;\n          cipher.card = mappedData;\n        } else if (typeParts[1] === \"Address\") {\n          const mappedData = this.parseSecureNoteMapping<IdentityView>(cipher, extraParts, {\n            Title: \"title\",\n            \"First Name\": \"firstName\",\n            \"Last Name\": \"lastName\",\n            \"Middle Name\": \"middleName\",\n            Company: \"company\",\n            \"Address 1\": \"address1\",\n            \"Address 2\": \"address2\",\n            \"Address 3\": \"address3\",\n            \"City / Town\": \"city\",\n            State: \"state\",\n            \"Zip / Postal Code\": \"postalCode\",\n            Country: \"country\",\n            \"Email Address\": \"email\",\n            Username: \"username\",\n          });\n          cipher.type = CipherType.Identity;\n          cipher.identity = mappedData;\n        }\n        processedNote = true;\n      }\n    }\n\n    if (!processedNote) {\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n      cipher.notes = this.getValueOrDefault(value.extra);\n    }\n  }\n\n  private parseSecureNoteMapping<T>(cipher: CipherView, extraParts: string[], map: any): T {\n    const dataObj: any = {};\n\n    let processingNotes = false;\n    extraParts.forEach((extraPart) => {\n      let key: string = null;\n      let val: string = null;\n      if (!processingNotes) {\n        if (this.isNullOrWhitespace(extraPart)) {\n          return;\n        }\n        const colonIndex = extraPart.indexOf(\":\");\n        if (colonIndex === -1) {\n          key = extraPart;\n        } else {\n          key = extraPart.substring(0, colonIndex);\n          if (extraPart.length > colonIndex) {\n            val = extraPart.substring(colonIndex + 1);\n          }\n        }\n        if (this.isNullOrWhitespace(key) || this.isNullOrWhitespace(val) || key === \"NoteType\") {\n          return;\n        }\n      }\n\n      if (processingNotes) {\n        cipher.notes += \"\\n\" + extraPart;\n      } else if (key === \"Notes\") {\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes += \"\\n\" + val;\n        } else {\n          cipher.notes = val;\n        }\n        processingNotes = true;\n        // eslint-disable-next-line\n      } else if (map.hasOwnProperty(key)) {\n        dataObj[map[key]] = val;\n      } else {\n        this.processKvp(cipher, key, val);\n      }\n    });\n\n    return dataObj;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LogMeOnceCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 4) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[1]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MeldiumCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.DisplayName, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.login.username = this.getValueOrDefault(value.UserName);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MSecureCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      const folderName =\n        this.getValueOrDefault(value[0], \"Unassigned\") !== \"Unassigned\" ? value[0] : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[2], \"--\");\n\n      if (value[1] === \"Web Logins\" || value[1] === \"Login\") {\n        cipher.login.uris = this.makeUriArray(value[4]);\n        cipher.login.username = this.getValueOrDefault(value[5]);\n        cipher.login.password = this.getValueOrDefault(value[6]);\n        cipher.notes = !this.isNullOrWhitespace(value[3]) ? value[3].split(\"\\\\n\").join(\"\\n\") : null;\n      } else if (value.length > 3) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        for (let i = 3; i < value.length; i++) {\n          if (!this.isNullOrWhitespace(value[i])) {\n            cipher.notes += value[i] + \"\\n\";\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(value[1]) && cipher.type !== CipherType.Login) {\n        cipher.name = value[1] + \": \" + cipher.name;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst mappedBaseColumns = [\"nickname\", \"additionalInfo\"];\nconst _mappedUserAccountColumns = new Set(\n  mappedBaseColumns.concat([\"url\", \"username\", \"password\", \"twofaSecret\"])\n);\nconst _mappedCreditCardColumns = new Set(\n  mappedBaseColumns.concat([\"cardNumber\", \"cardName\", \"exp_month\", \"exp_year\", \"cvv\"])\n);\n\nconst _mappedIdentityColumns = new Set(\n  mappedBaseColumns.concat([\n    \"title\",\n    \"firstName\",\n    \"middleName\",\n    \"lastName\",\n    \"email\",\n    \"firstAddressLine\",\n    \"secondAddressLine\",\n    \"city\",\n    \"country\",\n    \"zipCode\",\n  ])\n);\n\nconst _mappedIdCardColumns = new Set(mappedBaseColumns.concat([\"idName\", \"idNumber\", \"idCountry\"]));\n\nconst _mappedTwoFaColumns = new Set(mappedBaseColumns.concat([\"authToken\"]));\n\nconst _mappedUserNoteColumns = new Set(mappedBaseColumns.concat([\"content\"]));\n\nexport class MykiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.nickname, \"--\");\n      cipher.notes = this.getValueOrDefault(value.additionalInfo);\n\n      if (value.url !== undefined) {\n        // Accounts\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.twofaSecret);\n\n        this.importUnmappedFields(cipher, value, _mappedUserAccountColumns);\n      } else if (value.authToken !== undefined) {\n        // TwoFA\n        cipher.login.totp = this.getValueOrDefault(value.authToken);\n\n        this.importUnmappedFields(cipher, value, _mappedTwoFaColumns);\n      } else if (value.cardNumber !== undefined) {\n        // Cards\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.expMonth = this.getValueOrDefault(value.exp_month);\n        cipher.card.expYear = this.getValueOrDefault(value.exp_year);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n\n        this.importUnmappedFields(cipher, value, _mappedCreditCardColumns);\n      } else if (value.firstName !== undefined) {\n        // Identities\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        cipher.identity.title = this.getValueOrDefault(value.title);\n        cipher.identity.firstName = this.getValueOrDefault(value.firstName);\n        cipher.identity.middleName = this.getValueOrDefault(value.middleName);\n        cipher.identity.lastName = this.getValueOrDefault(value.lastName);\n        cipher.identity.phone = this.getValueOrDefault(value.number);\n        cipher.identity.email = this.getValueOrDefault(value.email);\n        cipher.identity.address1 = this.getValueOrDefault(value.firstAddressLine);\n        cipher.identity.address2 = this.getValueOrDefault(value.secondAddressLine);\n        cipher.identity.city = this.getValueOrDefault(value.city);\n        cipher.identity.country = this.getValueOrDefault(value.country);\n        cipher.identity.postalCode = this.getValueOrDefault(value.zipCode);\n\n        this.importUnmappedFields(cipher, value, _mappedIdentityColumns);\n      } else if (value.idType !== undefined) {\n        // IdCards\n\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        this.processFullName(cipher, value.idName);\n        cipher.identity.country = this.getValueOrDefault(value.idCountry);\n\n        switch (value.idType) {\n          // case \"Driver's License\":\n          // case \"ID Card\":\n          // case \"Outdoor License\":\n          // case \"Software License\":\n          // case \"Tax Number\":\n          // case \"Bank Account\":\n          // case \"Insurance Card\":\n          // case \"Health Card\":\n          // case \"Membership\":\n          // case \"Database\":\n          // case \"Reward Program\":\n          // case \"Tour Visa\":\n          case \"Passport\":\n            cipher.identity.passportNumber = value.idNumber;\n            break;\n          case \"Social Security\":\n            cipher.identity.ssn = value.idNumber;\n            break;\n          default:\n            cipher.identity.licenseNumber = value.idNumber;\n            break;\n        }\n\n        this.importUnmappedFields(cipher, value, _mappedIdCardColumns);\n      } else if (value.content !== undefined) {\n        // Notes\n        cipher.secureNote = new SecureNoteView();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.notes = this.getValueOrDefault(value.content);\n\n        this.importUnmappedFields(cipher, value, _mappedUserNoteColumns);\n      } else {\n        return;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\ntype nodePassCsvParsed = {\n  name: string;\n  url: string;\n  username: string;\n  password: string;\n  note: string;\n  cardholdername: string;\n  cardnumber: string;\n  cvc: string;\n  expirydate: string;\n  zipcode: string;\n  folder: string;\n  full_name: string;\n  phone_number: string;\n  email: string;\n  address1: string;\n  address2: string;\n  city: string;\n  country: string;\n  state: string;\n};\n\nexport class NordPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: nodePassCsvParsed[] = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((record) => {\n      const recordType = this.evaluateType(record);\n      if (recordType === undefined) {\n        return;\n      }\n\n      if (!this.organization) {\n        this.processFolder(result, record.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.name = this.getValueOrDefault(record.name, \"--\");\n      cipher.notes = this.getValueOrDefault(record.note);\n\n      switch (recordType) {\n        case CipherType.Login:\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.username = this.getValueOrDefault(record.username);\n          cipher.login.password = this.getValueOrDefault(record.password);\n          cipher.login.uris = this.makeUriArray(record.url);\n          break;\n        case CipherType.Card:\n          cipher.type = CipherType.Card;\n          cipher.card.cardholderName = this.getValueOrDefault(record.cardholdername);\n          cipher.card.number = this.getValueOrDefault(record.cardnumber);\n          cipher.card.code = this.getValueOrDefault(record.cvc);\n          cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n          this.setCardExpiration(cipher, record.expirydate);\n          break;\n\n        case CipherType.Identity:\n          cipher.type = CipherType.Identity;\n\n          this.processFullName(cipher, this.getValueOrDefault(record.full_name));\n          cipher.identity.address1 = this.getValueOrDefault(record.address1);\n          cipher.identity.address2 = this.getValueOrDefault(record.address2);\n          cipher.identity.city = this.getValueOrDefault(record.city);\n          cipher.identity.state = this.getValueOrDefault(record.state);\n          cipher.identity.postalCode = this.getValueOrDefault(record.zipcode);\n          cipher.identity.country = this.getValueOrDefault(record.country);\n          if (cipher.identity.country != null) {\n            cipher.identity.country = cipher.identity.country.toUpperCase();\n          }\n          cipher.identity.email = this.getValueOrDefault(record.email);\n          cipher.identity.phone = this.getValueOrDefault(record.phone_number);\n          break;\n        case CipherType.SecureNote:\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default:\n          break;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private evaluateType(record: nodePassCsvParsed): CipherType {\n    if (!this.isNullOrWhitespace(record.username)) {\n      return CipherType.Login;\n    }\n\n    if (!this.isNullOrWhitespace(record.cardnumber)) {\n      return CipherType.Card;\n    }\n\n    if (!this.isNullOrWhitespace(record.full_name)) {\n      return CipherType.Identity;\n    }\n\n    if (!this.isNullOrWhitespace(record.note)) {\n      return CipherType.SecureNote;\n    }\n\n    return undefined;\n  }\n}\n","export interface ExportData {\n  accounts?: AccountsEntity[] | null;\n}\nexport interface AccountsEntity {\n  attrs: AccountAttributes;\n  vaults?: VaultsEntity[] | null;\n}\nexport interface AccountAttributes {\n  accountName: string;\n  name: string;\n  avatar: string;\n  email: string;\n  uuid: string;\n  domain: string;\n}\nexport interface VaultsEntity {\n  attrs: VaultAttributes;\n  items?: Item[] | null;\n}\nexport interface VaultAttributes {\n  uuid: string;\n  desc: string;\n  avatar: string;\n  name: string;\n  type: string;\n}\n\nexport enum CategoryEnum {\n  Login = \"001\",\n  CreditCard = \"002\",\n  SecureNote = \"003\",\n  Identity = \"004\",\n  Password = \"005\",\n  Document = \"006\",\n  SoftwareLicense = \"100\",\n  BankAccount = \"101\",\n  Database = \"102\",\n  DriversLicense = \"103\",\n  OutdoorLicense = \"104\",\n  Membership = \"105\",\n  Passport = \"106\",\n  RewardsProgram = \"107\",\n  SocialSecurityNumber = \"108\",\n  WirelessRouter = \"109\",\n  Server = \"110\",\n  EmailAccount = \"111\",\n  API_Credential = \"112\",\n  MedicalRecord = \"113\",\n}\n\nexport interface Item {\n  uuid: string;\n  favIndex: number;\n  createdAt: number;\n  updatedAt: number;\n  trashed?: boolean;\n  categoryUuid: string;\n  details: Details;\n  overview: Overview;\n}\nexport interface Details {\n  loginFields?: (LoginFieldsEntity | null)[] | null;\n  notesPlain?: string | null;\n  sections?: (SectionsEntity | null)[] | null;\n  passwordHistory?: (PasswordHistoryEntity | null)[] | null;\n  documentAttributes?: DocumentAttributes | null;\n  password?: string | null;\n}\n\nexport enum LoginFieldTypeEnum {\n  TextOrHtml = \"T\",\n  EmailAddress = \"E\",\n  URL = \"U\",\n  Number = \"N\",\n  Password = \"P\",\n  TextArea = \"A\",\n  PhoneNumber = \"T\",\n  CheckBox = \"C\",\n}\nexport interface LoginFieldsEntity {\n  value: string;\n  id: string;\n  name: string;\n  fieldType: LoginFieldTypeEnum | string;\n  designation?: string | null;\n}\nexport interface SectionsEntity {\n  title: string;\n  name?: string | null;\n  fields?: FieldsEntity[] | null;\n}\nexport interface FieldsEntity {\n  title: string;\n  id: string;\n  value: Value;\n  indexAtSource: number;\n  guarded: boolean;\n  multiline: boolean;\n  dontGenerate: boolean;\n  placeholder?: string;\n  inputTraits: InputTraits;\n  clipboardFilter?: string | null;\n}\nexport interface Value {\n  totp?: string | null;\n  date?: number | null;\n  string?: string | null;\n  concealed?: string | null;\n  email?: Email | null;\n  phone?: string | null;\n  menu?: string | null;\n  gender?: string | null;\n  monthYear?: number | null;\n  url?: string | null;\n  address?: Address | null;\n  creditCardType?: string | null;\n  creditCardNumber?: string | null;\n  reference?: string | null;\n}\n\nexport interface Email {\n  email_address: string;\n  provider: string;\n}\n\nexport interface Address {\n  street: string;\n  city: string;\n  country: string;\n  zip: string;\n  state: string;\n}\nexport interface InputTraits {\n  keyboard: string;\n  correction: string;\n  capitalization: string;\n}\nexport interface PasswordHistoryEntity {\n  value: string;\n  time: number;\n}\nexport interface DocumentAttributes {\n  fileName: string;\n  documentId: string;\n  decryptedSize: number;\n}\nexport interface Overview {\n  subtitle: string;\n  title: string;\n  url: string;\n  urls?: UrlsEntity[] | null;\n  ps?: number | null;\n  pbe?: number | null;\n  pgrng?: boolean | null;\n  tags?: string[] | null;\n}\nexport interface UrlsEntity {\n  label: string;\n  url: string;\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class OnePassword1PifImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    data.split(this.newLineRegex).forEach((line) => {\n      if (this.isNullOrWhitespace(line) || line[0] !== \"{\") {\n        return;\n      }\n      const item = JSON.parse(line);\n      if (item.trashed === true) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n\n      if (this.isNullOrWhitespace(item.hmac)) {\n        this.processStandardItem(item, cipher);\n      } else {\n        this.processWinOpVaultItem(item, cipher);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processWinOpVaultItem(item: any, cipher: CipherView) {\n    if (item.overview != null) {\n      cipher.name = this.getValueOrDefault(item.overview.title);\n      if (item.overview.URLs != null) {\n        const urls: string[] = [];\n        item.overview.URLs.forEach((url: any) => {\n          if (!this.isNullOrWhitespace(url.u)) {\n            urls.push(url.u);\n          }\n        });\n        cipher.login.uris = this.makeUriArray(urls);\n      }\n    }\n\n    if (item.details != null) {\n      if (item.details.passwordHistory != null) {\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n      }\n      if (\n        !this.isNullOrWhitespace(item.details.ccnum) ||\n        !this.isNullOrWhitespace(item.details.cvv)\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      } else if (\n        !this.isNullOrWhitespace(item.details.firstname) ||\n        !this.isNullOrWhitespace(item.details.address1)\n      ) {\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n      }\n      if (cipher.type === CipherType.Login && !this.isNullOrWhitespace(item.details.password)) {\n        cipher.login.password = item.details.password;\n      }\n      if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n        cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (item.details.fields != null) {\n        this.parseFields(item.details.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.details.sections != null) {\n        item.details.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private processStandardItem(item: any, cipher: CipherView) {\n    cipher.favorite = item.openContents && item.openContents.faveIndex ? true : false;\n    cipher.name = this.getValueOrDefault(item.title);\n\n    if (item.typeName === \"securenotes.SecureNote\") {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    } else if (item.typeName === \"wallet.financial.CreditCard\") {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    } else if (item.typeName === \"identities.Identity\") {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    } else {\n      cipher.login.uris = this.makeUriArray(item.location);\n    }\n\n    if (item.secureContents != null) {\n      if (item.secureContents.passwordHistory != null) {\n        this.parsePasswordHistory(item.secureContents.passwordHistory, cipher);\n      }\n      if (!this.isNullOrWhitespace(item.secureContents.notesPlain)) {\n        cipher.notes = item.secureContents.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (cipher.type === CipherType.Login) {\n        if (!this.isNullOrWhitespace(item.secureContents.password)) {\n          cipher.login.password = item.secureContents.password;\n        }\n        if (item.secureContents.URLs != null) {\n          const urls: string[] = [];\n          item.secureContents.URLs.forEach((u: any) => {\n            if (!this.isNullOrWhitespace(u.url)) {\n              urls.push(u.url);\n            }\n          });\n          if (urls.length > 0) {\n            cipher.login.uris = this.makeUriArray(urls);\n          }\n        }\n      }\n      if (item.secureContents.fields != null) {\n        this.parseFields(item.secureContents.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.secureContents.sections != null) {\n        item.secureContents.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private parsePasswordHistory(items: any[], cipher: CipherView) {\n    const maxSize = items.length > 5 ? 5 : items.length;\n    cipher.passwordHistory = items\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n\n  private parseFields(\n    fields: any[],\n    cipher: CipherView,\n    designationKey: string,\n    valueKey: string,\n    nameKey: string\n  ) {\n    fields.forEach((field: any) => {\n      if (field[valueKey] == null || field[valueKey].toString().trim() === \"\") {\n        return;\n      }\n\n      // TODO: when date FieldType exists, store this as a date field type instead of formatted Text if k is 'date'\n      const fieldValue =\n        field.k === \"date\"\n          ? new Date(field[valueKey] * 1000).toUTCString()\n          : field[valueKey].toString();\n      const fieldDesignation =\n        field[designationKey] != null ? field[designationKey].toString() : null;\n\n      if (cipher.type === CipherType.Login) {\n        if (this.isNullOrWhitespace(cipher.login.username) && fieldDesignation === \"username\") {\n          cipher.login.username = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.password) &&\n          fieldDesignation === \"password\"\n        ) {\n          cipher.login.password = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.totp) &&\n          fieldDesignation != null &&\n          fieldDesignation.startsWith(\"TOTP_\")\n        ) {\n          cipher.login.totp = fieldValue;\n          return;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.isNullOrWhitespace(cipher.card.number) && fieldDesignation === \"ccnum\") {\n          cipher.card.number = fieldValue;\n          cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n          return;\n        } else if (this.isNullOrWhitespace(cipher.card.code) && fieldDesignation === \"cvv\") {\n          cipher.card.code = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.cardholderName) &&\n          fieldDesignation === \"cardholder\"\n        ) {\n          cipher.card.cardholderName = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.expiration) &&\n          fieldDesignation === \"expiry\" &&\n          fieldValue.length === 6\n        ) {\n          cipher.card.expMonth = (fieldValue as string).substr(4, 2);\n          if (cipher.card.expMonth[0] === \"0\") {\n            cipher.card.expMonth = cipher.card.expMonth.substr(1, 1);\n          }\n          cipher.card.expYear = (fieldValue as string).substr(0, 4);\n          return;\n        } else if (fieldDesignation === \"type\") {\n          // Skip since brand was determined from number above\n          return;\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        const identity = cipher.identity;\n        if (this.isNullOrWhitespace(identity.firstName) && fieldDesignation === \"firstname\") {\n          identity.firstName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.lastName) && fieldDesignation === \"lastname\") {\n          identity.lastName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.middleName) && fieldDesignation === \"initial\") {\n          identity.middleName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.phone) && fieldDesignation === \"defphone\") {\n          identity.phone = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.company) && fieldDesignation === \"company\") {\n          identity.company = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.email) && fieldDesignation === \"email\") {\n          identity.email = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.username) && fieldDesignation === \"username\") {\n          identity.username = fieldValue;\n          return;\n        } else if (fieldDesignation === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip } = field[valueKey];\n          identity.address1 = this.getValueOrDefault(street);\n          identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            identity.country = country.toUpperCase();\n          }\n          identity.postalCode = this.getValueOrDefault(zip);\n          return;\n        }\n      }\n\n      const fieldName = this.isNullOrWhitespace(field[nameKey]) ? \"no_name\" : field[nameKey];\n      if (\n        fieldName === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      const fieldType = field.k === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CategoryEnum,\n  Details,\n  ExportData,\n  FieldsEntity,\n  Item,\n  LoginFieldTypeEnum,\n  Overview,\n  PasswordHistoryEntity,\n  SectionsEntity,\n  UrlsEntity,\n  Value,\n  VaultsEntity,\n} from \"./types/onepassword-1pux-importer-types\";\n\nexport class OnePassword1PuxImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const exportData: ExportData = JSON.parse(data);\n\n    const account = exportData.accounts[0];\n    // TODO Add handling of multiple vaults\n    // const personalVaults = account.vaults[0].filter((v) => v.attrs.type === VaultAttributeTypeEnum.Personal);\n    account.vaults.forEach((vault: VaultsEntity) => {\n      vault.items.forEach((item: Item) => {\n        if (item.trashed === true) {\n          return;\n        }\n\n        const cipher = this.initLoginCipher();\n\n        const category = item.categoryUuid as CategoryEnum;\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.Password:\n          case CategoryEnum.WirelessRouter:\n          case CategoryEnum.Server:\n          case CategoryEnum.API_Credential:\n            cipher.type = CipherType.Login;\n            cipher.login = new LoginView();\n            break;\n          case CategoryEnum.CreditCard:\n          case CategoryEnum.BankAccount:\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            break;\n          case CategoryEnum.SecureNote:\n          case CategoryEnum.SoftwareLicense:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.MedicalRecord:\n            // case CategoryEnum.Document:\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case CategoryEnum.Identity:\n          case CategoryEnum.DriversLicense:\n          case CategoryEnum.OutdoorLicense:\n          case CategoryEnum.Membership:\n          case CategoryEnum.Passport:\n          case CategoryEnum.RewardsProgram:\n          case CategoryEnum.SocialSecurityNumber:\n            cipher.type = CipherType.Identity;\n            cipher.identity = new IdentityView();\n            break;\n          default:\n            break;\n        }\n\n        cipher.favorite = item.favIndex === 1 ? true : false;\n\n        this.processOverview(item.overview, cipher);\n\n        this.processLoginFields(item, cipher);\n\n        this.processDetails(category, item.details, cipher);\n\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n\n        this.processSections(category, item.details.sections, cipher);\n\n        if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n          cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        this.result.ciphers.push(cipher);\n      });\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processOverview(overview: Overview, cipher: CipherView) {\n    if (overview == null) {\n      return;\n    }\n\n    cipher.name = this.getValueOrDefault(overview.title);\n\n    if (overview.urls != null) {\n      const urls: string[] = [];\n      overview.urls.forEach((url: UrlsEntity) => {\n        if (!this.isNullOrWhitespace(url.url)) {\n          urls.push(url.url);\n        }\n      });\n      cipher.login.uris = this.makeUriArray(urls);\n    }\n\n    if (overview.tags != null && overview.tags.length > 0) {\n      const folderName = this.capitalize(overview.tags[0]);\n      this.processFolder(this.result, folderName);\n    }\n  }\n\n  private capitalize(inputString: string): string {\n    return inputString.trim().replace(/\\w\\S*/g, (w) => w.replace(/^\\w/, (c) => c.toUpperCase()));\n  }\n\n  private processLoginFields(item: Item, cipher: CipherView) {\n    if (item.details == null) {\n      return;\n    }\n\n    if (item.details.loginFields == null || item.details.loginFields.length === 0) {\n      return;\n    }\n\n    item.details.loginFields.forEach((loginField) => {\n      if (loginField.designation === \"username\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.username = loginField.value;\n        return;\n      }\n\n      if (loginField.designation === \"password\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.password = loginField.value;\n        return;\n      }\n\n      let fieldValue = loginField.value;\n      let fieldType: FieldType = FieldType.Text;\n      switch (loginField.fieldType) {\n        case LoginFieldTypeEnum.Password:\n          fieldType = FieldType.Hidden;\n          break;\n        case LoginFieldTypeEnum.CheckBox:\n          fieldValue = loginField.value !== \"\" ? \"true\" : \"false\";\n          fieldType = FieldType.Boolean;\n          break;\n        default:\n          break;\n      }\n      this.processKvp(cipher, loginField.name, fieldValue, fieldType);\n    });\n  }\n\n  private processDetails(category: CategoryEnum, details: Details, cipher: CipherView) {\n    if (category !== CategoryEnum.Password) {\n      return;\n    }\n\n    if (details == null) {\n      return;\n    }\n    cipher.login.password = details.password;\n  }\n\n  private processSections(category: CategoryEnum, sections: SectionsEntity[], cipher: CipherView) {\n    if (sections == null || sections.length === 0) {\n      return;\n    }\n\n    sections.forEach((section: SectionsEntity) => {\n      if (section.fields == null) {\n        return;\n      }\n\n      this.parseSectionFields(category, section.fields, cipher);\n    });\n  }\n\n  private parseSectionFields(category: CategoryEnum, fields: FieldsEntity[], cipher: CipherView) {\n    fields.forEach((field: FieldsEntity) => {\n      const valueKey = Object.keys(field.value)[0];\n      const anyField = field as any;\n\n      if (\n        anyField.value == null ||\n        anyField.value[valueKey] == null ||\n        anyField.value[valueKey] === \"\"\n      ) {\n        return;\n      }\n\n      const fieldName = this.getFieldName(field.id, field.title);\n      const fieldValue = this.extractValue(field.value, valueKey);\n\n      if (cipher.type === CipherType.Login) {\n        if (this.fillLogin(field, fieldValue, cipher)) {\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.WirelessRouter:\n            break;\n\n          case CategoryEnum.Server:\n            if (this.isNullOrWhitespace(cipher.login.uri) && field.id === \"url\") {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              return;\n            }\n            break;\n\n          case CategoryEnum.API_Credential:\n            if (this.fillApiCredentials(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.fillCreditCard(field, fieldValue, cipher)) {\n          return;\n        }\n\n        if (category === CategoryEnum.BankAccount) {\n          if (this.fillBankAccount(field, fieldValue, cipher)) {\n            return;\n          }\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        if (this.fillIdentity(field, fieldValue, cipher, valueKey)) {\n          return;\n        }\n        if (valueKey === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip, state } = field.value.address;\n          cipher.identity.address1 = this.getValueOrDefault(street);\n          cipher.identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            cipher.identity.country = country.toUpperCase();\n          }\n          cipher.identity.postalCode = this.getValueOrDefault(zip);\n          cipher.identity.state = this.getValueOrDefault(state);\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Identity:\n            break;\n          case CategoryEnum.DriversLicense:\n            if (this.fillDriversLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.OutdoorLicense:\n            if (this.fillOutdoorLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Membership:\n            if (this.fillMembership(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Passport:\n            if (this.fillPassport(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.RewardsProgram:\n            if (this.fillRewardsProgram(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.SocialSecurityNumber:\n            if (this.fillSSN(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (valueKey === \"email\") {\n        // fieldValue is an object casted into a string, so access the plain value instead\n        const { email_address, provider } = field.value.email;\n        this.processKvp(cipher, fieldName, email_address, FieldType.Text);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return;\n      }\n\n      // Do not include a password field if it's already in the history\n      if (\n        field.title === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      // TODO ?? If one of the fields is marked as guarded, then activate Password-Reprompt for the entire item\n      if (field.guarded && cipher.reprompt === CipherRepromptType.None) {\n        cipher.reprompt = CipherRepromptType.Password;\n      }\n\n      const fieldType = valueKey === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n\n  private getFieldName(id: string, title: string): string {\n    if (this.isNullOrWhitespace(title)) {\n      return id;\n    }\n\n    // Naive approach of checking if the fields id is usable\n    if (id.length > 25 && RegExp(/[0-9]{2}[A-Z]{2}/, \"i\").test(id)) {\n      return title;\n    }\n    return id;\n  }\n\n  private extractValue(value: Value, valueKey: string): string {\n    if (valueKey === \"date\") {\n      return new Date(value.date * 1000).toUTCString();\n    }\n\n    if (valueKey === \"monthYear\") {\n      return value.monthYear.toString();\n    }\n\n    return (value as any)[valueKey];\n  }\n\n  private fillLogin(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.username) && fieldName === \"username\") {\n      cipher.login.username = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"password\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (\n      this.isNullOrWhitespace(cipher.login.totp) &&\n      field.id != null &&\n      field.id.startsWith(\"TOTP_\")\n    ) {\n      cipher.login.totp = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillApiCredentials(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"credential\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.uri) && fieldName === \"hostname\") {\n      cipher.login.uris = this.makeUriArray(fieldValue);\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillCreditCard(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.number) && field.id === \"ccnum\") {\n      cipher.card.number = fieldValue;\n      cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.code) && field.id === \"cvv\") {\n      cipher.card.code = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"cardholder\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.expiration) && field.id === \"expiry\") {\n      const monthYear: string = fieldValue.toString().trim();\n      cipher.card.expMonth = monthYear.substring(4, 6);\n      if (cipher.card.expMonth[0] === \"0\") {\n        cipher.card.expMonth = cipher.card.expMonth.substring(1, 2);\n      }\n      cipher.card.expYear = monthYear.substring(0, 4);\n      return true;\n    }\n\n    if (field.id === \"type\") {\n      // Skip since brand was determined from number above\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillBankAccount(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"owner\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillIdentity(\n    field: FieldsEntity,\n    fieldValue: string,\n    cipher: CipherView,\n    valueKey: string\n  ): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"firstname\") {\n      cipher.identity.firstName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.lastName) && field.id === \"lastname\") {\n      cipher.identity.lastName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.middleName) && field.id === \"initial\") {\n      cipher.identity.middleName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"defphone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.email)) {\n      if (valueKey === \"email\") {\n        const { email_address, provider } = field.value.email;\n        cipher.identity.email = this.getValueOrDefault(email_address);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return true;\n      }\n\n      if (field.id === \"email\") {\n        cipher.identity.email = fieldValue;\n        return true;\n      }\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.username) && field.id === \"username\") {\n      cipher.identity.username = fieldValue;\n      return true;\n    }\n    return false;\n  }\n\n  private fillDriversLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.address1) && field.id === \"address\") {\n      cipher.identity.address1 = fieldValue;\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.licenseNumber) && field.id === \"number\") {\n      cipher.identity.licenseNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillOutdoorLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillMembership(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"org_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"phone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillPassport(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO Iso\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"issuing_country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.passportNumber) && field.id === \"number\") {\n      cipher.identity.passportNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillRewardsProgram(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillSSN(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.ssn) && field.id === \"number\") {\n      cipher.identity.ssn = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private parsePasswordHistory(historyItems: PasswordHistoryEntity[], cipher: CipherView) {\n    if (historyItems == null || historyItems.length === 0) {\n      return;\n    }\n\n    const maxSize = historyItems.length > 5 ? 5 : historyItems.length;\n    cipher.passwordHistory = historyItems\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nexport class CipherImportContext {\n  lowerProperty: string;\n  constructor(public importRecord: any, public property: string, public cipher: CipherView) {\n    this.lowerProperty = property.toLowerCase();\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\n\nexport const IgnoredProperties = [\n  \"ainfo\",\n  \"autosubmit\",\n  \"notesplain\",\n  \"ps\",\n  \"scope\",\n  \"tags\",\n  \"title\",\n  \"uuid\",\n  \"notes\",\n];\n\nexport abstract class OnePasswordCsvImporter extends BaseImporter implements Importer {\n  protected loginPropertyParsers = [\n    this.setLoginUsername,\n    this.setLoginPassword,\n    this.setLoginUris,\n  ];\n  protected creditCardPropertyParsers = [\n    this.setCreditCardNumber,\n    this.setCreditCardVerification,\n    this.setCreditCardCardholderName,\n    this.setCreditCardExpiry,\n  ];\n  protected identityPropertyParsers = [\n    this.setIdentityFirstName,\n    this.setIdentityInitial,\n    this.setIdentityLastName,\n    this.setIdentityUserName,\n    this.setIdentityEmail,\n    this.setIdentityPhone,\n    this.setIdentityCompany,\n  ];\n\n  abstract setCipherType(value: any, cipher: CipherView): void;\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true, {\n      quoteChar: '\"',\n      escapeChar: \"\\\\\",\n    });\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(this.getProp(value, \"title\"))) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.getProp(value, \"title\"), \"--\");\n\n      this.setNotes(value, cipher);\n\n      this.setCipherType(value, cipher);\n\n      let altUsername: string = null;\n      for (const property in value) {\n        // eslint-disable-next-line\n        if (!value.hasOwnProperty(property) || this.isNullOrWhitespace(value[property])) {\n          continue;\n        }\n\n        const context = new CipherImportContext(value, property, cipher);\n        if (cipher.type === CipherType.Login && this.setKnownLoginValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Card && this.setKnownCreditCardValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Identity && this.setKnownIdentityValue(context)) {\n          continue;\n        }\n\n        altUsername = this.setUnknownValue(context, altUsername);\n      }\n\n      if (\n        cipher.type === CipherType.Login &&\n        !this.isNullOrWhitespace(altUsername) &&\n        this.isNullOrWhitespace(cipher.login.username) &&\n        altUsername.indexOf(\"://\") === -1\n      ) {\n        cipher.login.username = altUsername;\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  protected getProp(obj: any, name: string): any {\n    const lowerObj = Object.entries(obj).reduce((agg: any, entry: [string, any]) => {\n      agg[entry[0].toLowerCase()] = entry[1];\n      return agg;\n    }, {});\n    return lowerObj[name.toLowerCase()];\n  }\n\n  protected getPropByRegexp(obj: any, regexp: RegExp): any {\n    const matchingKeys = Object.keys(obj).reduce((agg: string[], key: string) => {\n      if (key.match(regexp)) {\n        agg.push(key);\n      }\n      return agg;\n    }, []);\n    if (matchingKeys.length === 0) {\n      return null;\n    } else {\n      return obj[matchingKeys[0]];\n    }\n  }\n\n  protected getPropIncluding(obj: any, name: string): any {\n    const includesMap = Object.keys(obj).reduce((agg: string[], entry: string) => {\n      if (entry.toLowerCase().includes(name.toLowerCase())) {\n        agg.push(entry);\n      }\n      return agg;\n    }, []);\n    if (includesMap.length === 0) {\n      return null;\n    } else {\n      return obj[includesMap[0]];\n    }\n  }\n\n  protected setNotes(importRecord: any, cipher: CipherView) {\n    cipher.notes =\n      this.getValueOrDefault(this.getProp(importRecord, \"notesPlain\"), \"\") +\n      \"\\n\" +\n      this.getValueOrDefault(this.getProp(importRecord, \"notes\"), \"\") +\n      \"\\n\";\n    cipher.notes.trim();\n  }\n\n  protected setKnownLoginValue(context: CipherImportContext): boolean {\n    return this.loginPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownCreditCardValue(context: CipherImportContext): boolean {\n    return this.creditCardPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownIdentityValue(context: CipherImportContext): boolean {\n    return this.identityPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setUnknownValue(context: CipherImportContext, altUsername: string): string {\n    if (\n      IgnoredProperties.indexOf(context.lowerProperty) === -1 &&\n      !context.lowerProperty.startsWith(\"section:\") &&\n      !context.lowerProperty.startsWith(\"section \")\n    ) {\n      if (altUsername == null && context.lowerProperty === \"email\") {\n        return context.importRecord[context.property];\n      } else if (\n        context.lowerProperty === \"created date\" ||\n        context.lowerProperty === \"modified date\"\n      ) {\n        const readableDate = new Date(\n          parseInt(context.importRecord[context.property], 10) * 1000\n        ).toUTCString();\n        this.processKvp(context.cipher, \"1Password \" + context.property, readableDate);\n        return null;\n      }\n      if (\n        context.lowerProperty.includes(\"password\") ||\n        context.lowerProperty.includes(\"key\") ||\n        context.lowerProperty.includes(\"secret\")\n      ) {\n        this.processKvp(\n          context.cipher,\n          context.property,\n          context.importRecord[context.property],\n          FieldType.Hidden\n        );\n      } else {\n        this.processKvp(context.cipher, context.property, context.importRecord[context.property]);\n      }\n    }\n    return null;\n  }\n\n  protected setIdentityFirstName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.firstName) &&\n      context.lowerProperty.includes(\"first name\")\n    ) {\n      context.cipher.identity.firstName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityInitial(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.middleName) &&\n      context.lowerProperty.includes(\"initial\")\n    ) {\n      context.cipher.identity.middleName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityLastName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.lastName) &&\n      context.lowerProperty.includes(\"last name\")\n    ) {\n      context.cipher.identity.lastName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityUserName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.username) &&\n      context.lowerProperty.includes(\"username\")\n    ) {\n      context.cipher.identity.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityCompany(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.company) &&\n      context.lowerProperty.includes(\"company\")\n    ) {\n      context.cipher.identity.company = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityPhone(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.phone) &&\n      context.lowerProperty.includes(\"default phone\")\n    ) {\n      context.cipher.identity.phone = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityEmail(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.email) &&\n      context.lowerProperty.includes(\"email\")\n    ) {\n      context.cipher.identity.email = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardNumber(context: CipherImportContext): boolean {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.number) &&\n      context.lowerProperty.includes(\"number\")\n    ) {\n      context.cipher.card.number = context.importRecord[context.property];\n      context.cipher.card.brand = CardView.getCardBrandByPatterns(context.cipher.card.number);\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardVerification(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.code) &&\n      context.lowerProperty.includes(\"verification number\")\n    ) {\n      context.cipher.card.code = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardCardholderName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.cardholderName) &&\n      context.lowerProperty.includes(\"cardholder name\")\n    ) {\n      context.cipher.card.cardholderName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\") &&\n      context.importRecord[context.property].length === 7\n    ) {\n      context.cipher.card.expMonth = (context.importRecord[context.property] as string).substr(\n        0,\n        2\n      );\n      if (context.cipher.card.expMonth[0] === \"0\") {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = (context.importRecord[context.property] as string).substr(3, 4);\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginPassword(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.password) &&\n      context.lowerProperty === \"password\"\n    ) {\n      context.cipher.login.password = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUsername(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.username) &&\n      context.lowerProperty === \"username\"\n    ) {\n      context.cipher.login.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUris(context: CipherImportContext) {\n    if (\n      (context.cipher.login.uris == null || context.cipher.login.uris.length === 0) &&\n      context.lowerProperty === \"urls\"\n    ) {\n      const urls = context.importRecord[context.property].split(this.newLineRegex);\n      context.cipher.login.uris = this.makeUriArray(urls);\n      return true;\n    } else if (context.lowerProperty === \"url\") {\n      if (context.cipher.login.uris == null) {\n        context.cipher.login.uris = [];\n      }\n      context.cipher.login.uris.concat(this.makeUriArray(context.importRecord[context.property]));\n      return true;\n    }\n    return false;\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { IgnoredProperties, OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordMacCsvImporter extends OnePasswordCsvImporter implements Importer {\n  setCipherType(value: any, cipher: CipherView) {\n    const onePassType = this.getValueOrDefault(this.getProp(value, \"type\"), \"Login\");\n    switch (onePassType) {\n      case \"Credit Card\":\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Identity\":\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Login\":\n      case \"Secure Note\":\n        IgnoredProperties.push(\"type\");\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\nimport { OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordWinCsvImporter extends OnePasswordCsvImporter implements Importer {\n  constructor() {\n    super();\n    this.identityPropertyParsers.push(this.setIdentityAddress);\n  }\n\n  setCipherType(value: any, cipher: CipherView) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: number/i)) &&\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: expiry date/i))\n    ) {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    }\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: first name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: initial/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: last name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /internet \\d+: email/i))\n    ) {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    }\n  }\n\n  setIdentityAddress(context: CipherImportContext) {\n    if (context.lowerProperty.match(/address \\d+: address/i)) {\n      this.processKvp(context.cipher, \"address\", context.importRecord[context.property]);\n      return true;\n    }\n    return false;\n  }\n\n  setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\")\n    ) {\n      const expSplit = (context.importRecord[context.property] as string).split(\"/\");\n      context.cipher.card.expMonth = expSplit[0];\n      if (context.cipher.card.expMonth[0] === \"0\" && context.cipher.card.expMonth.length === 2) {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = expSplit[2].length > 4 ? expSplit[2].substr(0, 4) : expSplit[2];\n      return true;\n    }\n    return false;\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PadlockCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let headers: string[] = null;\n    results.forEach((value) => {\n      if (headers == null) {\n        headers = value.map((v: string) => v);\n        return;\n      }\n\n      if (value.length < 2 || value.length !== headers.length) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value[1])) {\n        if (this.organization) {\n          const tags = (value[1] as string).split(\",\");\n          tags.forEach((tag) => {\n            tag = tag.trim();\n            let addCollection = true;\n            let collectionIndex = result.collections.length;\n\n            for (let i = 0; i < result.collections.length; i++) {\n              if (result.collections[i].name === tag) {\n                addCollection = false;\n                collectionIndex = i;\n                break;\n              }\n            }\n\n            if (addCollection) {\n              const collection = new CollectionView();\n              collection.name = tag;\n              result.collections.push(collection);\n            }\n\n            result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n          });\n        } else {\n          const tags = (value[1] as string).split(\",\");\n          const tag = tags.length > 0 ? tags[0].trim() : null;\n          this.processFolder(result, tag);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      for (let i = 2; i < value.length; i++) {\n        const header = headers[i].trim().toLowerCase();\n        if (this.isNullOrWhitespace(value[i]) || this.isNullOrWhitespace(header)) {\n          continue;\n        }\n\n        if (this.usernameFieldNames.indexOf(header) > -1) {\n          cipher.login.username = value[i];\n        } else if (this.passwordFieldNames.indexOf(header) > -1) {\n          cipher.login.password = value[i];\n        } else if (this.uriFieldNames.indexOf(header) > -1) {\n          cipher.login.uris = this.makeUriArray(value[i]);\n        } else {\n          this.processKvp(cipher, headers[i], value[i]);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassKeepCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValue(\"category\", value));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValue(\"description\", value);\n      cipher.name = this.getValueOrDefault(this.getValue(\"title\", value), \"--\");\n      cipher.login.username = this.getValue(\"username\", value);\n      cipher.login.password = this.getValue(\"password\", value);\n      cipher.login.uris = this.makeUriArray(this.getValue(\"site\", value));\n      this.processKvp(cipher, \"Password 2\", this.getValue(\"password2\", value));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private getValue(key: string, value: any) {\n    return this.getValueOrDefault(value[key], this.getValueOrDefault(value[\" \" + key]));\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { PasskyJsonExport } from \"./passky-json-types\";\n\nexport class PasskyJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const passkyExport: PasskyJsonExport = JSON.parse(data);\n    if (\n      passkyExport == null ||\n      passkyExport.passwords == null ||\n      passkyExport.passwords.length === 0\n    ) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (passkyExport.encrypted == true) {\n      result.success = false;\n      result.errorMessage = \"Unable to import an encrypted passky backup.\";\n      return Promise.resolve(result);\n    }\n\n    passkyExport.passwords.forEach((record) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = record.website;\n      cipher.login.username = record.username;\n      cipher.login.password = record.password;\n\n      cipher.login.uris = this.makeUriArray(record.website);\n      cipher.notes = record.message;\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassmanJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((credential: any) => {\n      if (credential.tags != null && credential.tags.length > 0) {\n        const folderName = credential.tags[0].text;\n        this.processFolder(result, folderName);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = credential.label;\n\n      cipher.login.username = this.getValueOrDefault(credential.username);\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.url);\n      cipher.notes += this.getValueOrDefault(credential.description, \"\");\n      if (credential.otp != null) {\n        cipher.login.totp = this.getValueOrDefault(credential.otp.secret);\n      }\n\n      if (credential.custom_fields != null) {\n        credential.custom_fields.forEach((customField: any) => {\n          switch (customField.field_type) {\n            case \"text\":\n            case \"password\":\n              this.processKvp(cipher, customField.label, customField.value);\n              break;\n          }\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasspackCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const tagsJson = !this.isNullOrWhitespace(value.Tags) ? JSON.parse(value.Tags) : null;\n      const tags: string[] =\n        tagsJson != null && tagsJson.tags != null && tagsJson.tags.length > 0\n          ? tagsJson.tags\n              .map((tagJson: string) => {\n                try {\n                  const t = JSON.parse(tagJson);\n                  return this.getValueOrDefault(t.tag);\n                } catch {\n                  // Ignore error\n                }\n                return null;\n              })\n              .filter((t: string) => !this.isNullOrWhitespace(t))\n          : null;\n\n      if (this.organization && tags != null && tags.length > 0) {\n        tags.forEach((tag) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === tag) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = tag;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization && tags != null && tags.length > 0) {\n        this.processFolder(result, tags[0]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes, \"\");\n      cipher.notes += \"\\n\\n\" + this.getValueOrDefault(value[\"Shared Notes\"], \"\") + \"\\n\";\n      cipher.name = this.getValueOrDefault(value[\"Entry Name\"], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User ID\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n        value.__parsed_extra.forEach((extra: string) => {\n          if (!this.isNullOrWhitespace(extra)) {\n            cipher.notes += \"\\n\" + extra;\n          }\n        });\n      }\n\n      const fieldsJson = !this.isNullOrWhitespace(value[\"Extra Fields\"])\n        ? JSON.parse(value[\"Extra Fields\"])\n        : null;\n      const fields =\n        fieldsJson != null && fieldsJson.extraFields != null && fieldsJson.extraFields.length > 0\n          ? fieldsJson.extraFields.map((fieldJson: string) => {\n              try {\n                return JSON.parse(fieldJson);\n              } catch {\n                // Ignore error\n              }\n              return null;\n            })\n          : null;\n      if (fields != null) {\n        fields.forEach((f: any) => {\n          if (f != null) {\n            this.processKvp(cipher, f.name, f.data);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordAgentCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let newVersion = true;\n    results.forEach((value) => {\n      if (value.length !== 5 && value.length < 9) {\n        return;\n      }\n      const altFormat = value.length === 10 && value[0] === \"0\";\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[altFormat ? 1 : 0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[altFormat ? 2 : 1]);\n      cipher.login.password = this.getValueOrDefault(value[altFormat ? 3 : 2]);\n      if (value.length === 5) {\n        newVersion = false;\n        cipher.notes = this.getValueOrDefault(value[4]);\n        cipher.login.uris = this.makeUriArray(value[3]);\n      } else {\n        const folder = this.getValueOrDefault(value[altFormat ? 9 : 8], \"(None)\");\n        let folderName = folder !== \"(None)\" ? folder.split(\"\\\\\").join(\"/\") : null;\n        if (folderName != null) {\n          folderName = folder.split(\" > \").join(\"/\");\n          folderName = folder.split(\">\").join(\"/\");\n        }\n        this.processFolder(result, folderName);\n        cipher.notes = this.getValueOrDefault(value[altFormat ? 5 : 3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (newVersion && this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordBossJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.items == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    results.folders.forEach((value: any) => {\n      foldersMap.set(value.id, value.name);\n    });\n    const foldersIndexMap = new Map<string, number>();\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((value: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.login.uris = this.makeUriArray(value.login_url);\n\n      if (value.folder != null && foldersIndexMap.has(value.folder)) {\n        result.folderRelationships.push([result.ciphers.length, foldersIndexMap.get(value.folder)]);\n      }\n\n      if (value.identifiers == null) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value.identifiers.notes)) {\n        cipher.notes = value.identifiers.notes.split(\"\\\\r\\\\n\").join(\"\\n\").split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (value.type === \"CreditCard\") {\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n      }\n\n      for (const property in value.identifiers) {\n        // eslint-disable-next-line\n        if (!value.identifiers.hasOwnProperty(property)) {\n          continue;\n        }\n        const valObj = value.identifiers[property];\n        const val = valObj != null ? valObj.toString() : null;\n        if (\n          this.isNullOrWhitespace(val) ||\n          property === \"notes\" ||\n          property === \"ignoreItemInSecurityScore\"\n        ) {\n          continue;\n        }\n\n        if (property === \"custom_fields\") {\n          valObj.forEach((cf: any) => {\n            this.processKvp(cipher, cf.name, cf.value);\n          });\n          continue;\n        }\n\n        if (cipher.type === CipherType.Card) {\n          if (property === \"cardNumber\") {\n            cipher.card.number = val;\n            cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n            continue;\n          } else if (property === \"nameOnCard\") {\n            cipher.card.cardholderName = val;\n            continue;\n          } else if (property === \"security_code\") {\n            cipher.card.code = val;\n            continue;\n          } else if (property === \"expires\") {\n            try {\n              const expDate = new Date(val);\n              cipher.card.expYear = expDate.getFullYear().toString();\n              cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n            } catch {\n              // Ignore error\n            }\n            continue;\n          } else if (property === \"cardType\") {\n            continue;\n          }\n        } else {\n          if (\n            (property === \"username\" || property === \"email\") &&\n            this.isNullOrWhitespace(cipher.login.username)\n          ) {\n            cipher.login.username = val;\n            continue;\n          } else if (property === \"password\") {\n            cipher.login.password = val;\n            continue;\n          } else if (property === \"totp\") {\n            cipher.login.totp = val;\n            continue;\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(property) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n            continue;\n          }\n        }\n\n        this.processKvp(cipher, property, val);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordDragonXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const records = doc.querySelectorAll(\"PasswordManager > record\");\n    Array.from(records).forEach((record) => {\n      const category = this.querySelectorDirectChild(record, \"Category\");\n      const categoryText =\n        category != null &&\n        !this.isNullOrWhitespace(category.textContent) &&\n        category.textContent !== \"Unfiled\"\n          ? category.textContent\n          : null;\n      this.processFolder(result, categoryText);\n\n      const accountName = this.querySelectorDirectChild(record, \"Account-Name\");\n      const userId = this.querySelectorDirectChild(record, \"User-Id\");\n      const password = this.querySelectorDirectChild(record, \"Password\");\n      const url = this.querySelectorDirectChild(record, \"URL\");\n      const notes = this.querySelectorDirectChild(record, \"Notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name =\n        accountName != null ? this.getValueOrDefault(accountName.textContent, \"--\") : \"--\";\n      cipher.notes = notes != null ? this.getValueOrDefault(notes.textContent) : \"\";\n      cipher.login.username = userId != null ? this.getValueOrDefault(userId.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      const attributes: string[] = [];\n      for (let i = 1; i <= 10; i++) {\n        attributes.push(\"Attribute-\" + i);\n      }\n\n      this.querySelectorAllDirectChild(record, attributes.join(\",\")).forEach((attr) => {\n        if (this.isNullOrWhitespace(attr.textContent) || attr.textContent === \"null\") {\n          return;\n        }\n        this.processKvp(cipher, attr.tagName, attr.textContent);\n      });\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordSafeXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const passwordSafe = doc.querySelector(\"passwordsafe\");\n    if (passwordSafe == null) {\n      result.errorMessage = \"Missing `passwordsafe` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const notesDelimiter = passwordSafe.getAttribute(\"delimiter\");\n    const entries = doc.querySelectorAll(\"passwordsafe > entry\");\n    Array.from(entries).forEach((entry) => {\n      const group = this.querySelectorDirectChild(entry, \"group\");\n      const groupText =\n        group != null && !this.isNullOrWhitespace(group.textContent)\n          ? group.textContent.split(\".\").join(\"/\")\n          : null;\n      this.processFolder(result, groupText);\n\n      const title = this.querySelectorDirectChild(entry, \"title\");\n      const username = this.querySelectorDirectChild(entry, \"username\");\n      const email = this.querySelectorDirectChild(entry, \"email\");\n      const password = this.querySelectorDirectChild(entry, \"password\");\n      const url = this.querySelectorDirectChild(entry, \"url\");\n      const notes = this.querySelectorDirectChild(entry, \"notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name = title != null ? this.getValueOrDefault(title.textContent, \"--\") : \"--\";\n      cipher.notes =\n        notes != null\n          ? this.getValueOrDefault(notes.textContent, \"\").split(notesDelimiter).join(\"\\n\")\n          : null;\n      cipher.login.username =\n        username != null ? this.getValueOrDefault(username.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      if (this.isNullOrWhitespace(cipher.login.username) && email != null) {\n        cipher.login.username = this.getValueOrDefault(email.textContent);\n      } else if (email != null && !this.isNullOrWhitespace(email.textContent)) {\n        cipher.notes = this.isNullOrWhitespace(cipher.notes)\n          ? \"Email: \" + email.textContent\n          : cipher.notes + \"\\n\" + \"Email: \" + email.textContent;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordWalletTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 1) {\n        return;\n      }\n      if (value.length > 5) {\n        this.processFolder(result, value[5]);\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      if (value.length > 4) {\n        cipher.notes = this.getValueOrDefault(value[4], \"\").split(\"¬\").join(\"\\n\");\n      }\n      if (value.length > 2) {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n      }\n      if (value.length > 3) {\n        cipher.login.password = this.getValueOrDefault(value[3]);\n      }\n      if (value.length > 1) {\n        cipher.login.uris = this.makeUriArray(value[1]);\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  AppPasswordEntry,\n  BookmarkEntry,\n  EnvironmentVariablesEntry,\n  FoldersEntity,\n  GPGEntry,\n  NotesEntry,\n  PsonoItemTypes,\n  PsonoJsonExport,\n  TOTPEntry,\n  WebsitePasswordEntry,\n} from \"./psono-json-types\";\n\nexport class PsonoJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const psonoExport: PsonoJsonExport = JSON.parse(data);\n    if (psonoExport == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    this.parseFolders(result, psonoExport.folders);\n    this.handleItemParsing(result, psonoExport.items);\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFolders(result: ImportResult, folders: FoldersEntity[]) {\n    if (folders == null || folders.length === 0) {\n      return;\n    }\n\n    folders.forEach((folder) => {\n      if (folder.items == null || folder.items.length == 0) {\n        return;\n      }\n\n      this.processFolder(result, folder.name);\n\n      this.handleItemParsing(result, folder.items);\n    });\n  }\n\n  private handleItemParsing(result: ImportResult, items?: PsonoItemTypes[]) {\n    if (items == null || items.length === 0) {\n      return;\n    }\n\n    items.forEach((record) => {\n      const cipher = this.parsePsonoItem(record);\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n  }\n\n  private parsePsonoItem(item: PsonoItemTypes): CipherView {\n    const cipher = this.initLoginCipher();\n\n    switch (item.type) {\n      case \"website_password\":\n        this.parseWebsiteLogins(item, cipher);\n        break;\n      case \"application_password\":\n        this.parseApplicationPasswords(item, cipher);\n        break;\n      case \"environment_variables\":\n        this.parseEnvironmentVariables(item, cipher);\n        break;\n      case \"totp\":\n        this.parseTOTP(item, cipher);\n        break;\n      case \"bookmark\":\n        this.parseBookmarks(item, cipher);\n        break;\n      // Skipping this until we can save GPG into notes/custom fields\n      // case \"mail_gpg_own_key\":\n      //   this.parseGPG(item, cipher);\n      //   break;\n      case \"note\":\n        this.parseNotes(item, cipher);\n        break;\n      default:\n        break;\n    }\n\n    return cipher;\n  }\n\n  readonly WEBSITE_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"website_password_title\",\n    \"website_password_notes\",\n    \"website_password_username\",\n    \"website_password_password\",\n    \"website_password_url\",\n    \"autosubmit\",\n    \"website_password_auto_submit\",\n    \"urlfilter\",\n    \"website_password_url_filter\",\n  ]);\n  private parseWebsiteLogins(entry: WebsitePasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"website_password\") {\n      return;\n    }\n\n    cipher.name = entry.website_password_title;\n    cipher.notes = entry.website_password_notes;\n\n    cipher.login.username = entry.website_password_username;\n    cipher.login.password = entry.website_password_password;\n\n    cipher.login.uris = this.makeUriArray(entry.website_password_url);\n\n    this.processKvp(\n      cipher,\n      \"website_password_auto_submit\",\n      entry.website_password_auto_submit.toString(),\n      FieldType.Boolean\n    );\n\n    this.processKvp(cipher, \"website_password_url_filter\", entry.website_password_url_filter);\n\n    this.importUnmappedFields(cipher, entry, this.WEBSITE_mappedValues);\n  }\n\n  readonly APP_PWD_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"application_password_title\",\n    \"application_password_notes\",\n    \"application_password_username\",\n    \"application_password_password\",\n  ]);\n  private parseApplicationPasswords(entry: AppPasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"application_password\") {\n      return;\n    }\n\n    cipher.name = entry.application_password_title;\n    cipher.notes = entry.application_password_notes;\n\n    cipher.login.username = entry.application_password_username;\n    cipher.login.password = entry.application_password_password;\n\n    this.importUnmappedFields(cipher, entry, this.APP_PWD_mappedValues);\n  }\n\n  readonly BOOKMARK_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"bookmark_title\",\n    \"bookmark_notes\",\n    \"bookmark_url\",\n  ]);\n  private parseBookmarks(entry: BookmarkEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"bookmark\") {\n      return;\n    }\n\n    cipher.name = entry.bookmark_title;\n    cipher.notes = entry.bookmark_notes;\n\n    cipher.login.uris = this.makeUriArray(entry.bookmark_url);\n\n    this.importUnmappedFields(cipher, entry, this.BOOKMARK_mappedValues);\n  }\n\n  readonly NOTES_mappedValues = new Set([\"type\", \"name\", \"note_title\", \"note_notes\"]);\n  private parseNotes(entry: NotesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"note\") {\n      return;\n    }\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.note_title;\n    cipher.notes = entry.note_notes;\n\n    this.importUnmappedFields(cipher, entry, this.NOTES_mappedValues);\n  }\n\n  readonly TOTP_mappedValues = new Set([\"type\", \"name\", \"totp_title\", \"totp_notes\", \"totp_code\"]);\n  private parseTOTP(entry: TOTPEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"totp\") {\n      return;\n    }\n\n    cipher.name = entry.totp_title;\n    cipher.notes = entry.totp_notes;\n\n    cipher.login.totp = entry.totp_code;\n\n    this.importUnmappedFields(cipher, entry, this.TOTP_mappedValues);\n  }\n\n  readonly ENV_VARIABLES_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"environment_variables_title\",\n    \"environment_variables_notes\",\n    \"environment_variables_variables\",\n  ]);\n  private parseEnvironmentVariables(entry: EnvironmentVariablesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"environment_variables\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.environment_variables_title;\n    cipher.notes = entry.environment_variables_notes;\n\n    entry.environment_variables_variables.forEach((KvPair) => {\n      this.processKvp(cipher, KvPair.key, KvPair.value);\n    });\n\n    this.importUnmappedFields(cipher, entry, this.ENV_VARIABLES_mappedValues);\n  }\n\n  readonly GPG_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"mail_gpg_own_key_title\",\n    \"mail_gpg_own_key_public\",\n    \"mail_gpg_own_key_name\",\n    \"mail_gpg_own_key_email\",\n    \"mail_gpg_own_key_private\",\n  ]);\n  private parseGPG(entry: GPGEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"mail_gpg_own_key\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.mail_gpg_own_key_title;\n    cipher.notes = entry.mail_gpg_own_key_public;\n\n    this.processKvp(cipher, \"mail_gpg_own_key_name\", entry.mail_gpg_own_key_name);\n    this.processKvp(cipher, \"mail_gpg_own_key_email\", entry.mail_gpg_own_key_email);\n    this.processKvp(\n      cipher,\n      \"mail_gpg_own_key_private\",\n      entry.mail_gpg_own_key_private,\n      FieldType.Hidden\n    );\n\n    this.importUnmappedFields(cipher, entry, this.GPG_mappedValues);\n  }\n\n  private importUnmappedFields(\n    cipher: CipherView,\n    entry: PsonoItemTypes,\n    mappedValues: Set<string>\n  ) {\n    const unmappedFields = Object.keys(entry).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = entry as any;\n      this.processKvp(cipher, key, item[key].toString());\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RememBearCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.trash === \"true\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.notes);\n      if (value.type === \"LoginItem\") {\n        cipher.login.uris = this.makeUriArray(value.website);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      } else if (value.type === \"CreditCardItem\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.verification);\n\n        try {\n          const expMonth = this.getValueOrDefault(value.expiryMonth);\n          if (expMonth != null) {\n            const expMonthNumber = parseInt(expMonth, null);\n            if (expMonthNumber != null && expMonthNumber >= 1 && expMonthNumber <= 12) {\n              cipher.card.expMonth = expMonthNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n        try {\n          const expYear = this.getValueOrDefault(value.expiryYear);\n          if (expYear != null) {\n            const expYearNumber = parseInt(expYear, null);\n            if (expYearNumber != null) {\n              cipher.card.expYear = expYearNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n\n        const pin = this.getValueOrDefault(value.pin);\n        if (pin != null) {\n          this.processKvp(cipher, \"PIN\", pin);\n        }\n        const zip = this.getValueOrDefault(value.zipCode);\n        if (zip != null) {\n          this.processKvp(cipher, \"Zip Code\", zip);\n        }\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RoboFormCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let i = 1;\n    results.forEach((value) => {\n      const folder =\n        !this.isNullOrWhitespace(value.Folder) && value.Folder.startsWith(\"/\")\n          ? value.Folder.replace(\"/\", \"\")\n          : value.Folder;\n      const folderName = !this.isNullOrWhitespace(folder) ? folder : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Login);\n      cipher.login.password = this.getValueOrDefault(value.Pwd);\n      cipher.login.uris = this.makeUriArray(value.Url);\n\n      if (!this.isNullOrWhitespace(value.Rf_fields)) {\n        let fields: string[] = [value.Rf_fields];\n        if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n          fields = fields.concat(value.__parsed_extra);\n        }\n        fields.forEach((field: string) => {\n          const parts = field.split(\":\");\n          if (parts.length < 3) {\n            return;\n          }\n          const key = parts[0] === \"-no-name-\" ? null : parts[0];\n          const val = parts.length === 4 && parts[2] === \"rck\" ? parts[1] : parts[2];\n          this.processKvp(cipher, key, val);\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n\n      if (\n        i === results.length &&\n        cipher.name === \"--\" &&\n        this.isNullOrWhitespace(cipher.login.password)\n      ) {\n        return;\n      }\n\n      result.ciphers.push(cipher);\n      i++;\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafariCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url ?? value.URL);\n      cipher.login.totp = this.getValueOrDefault(value.OTPAuth);\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafeInCloudXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const db = doc.querySelector(\"database\");\n    if (db == null) {\n      result.errorMessage = \"Missing `database` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, number>();\n\n    Array.from(doc.querySelectorAll(\"database > label\")).forEach((labelEl) => {\n      const name = labelEl.getAttribute(\"name\");\n      const id = labelEl.getAttribute(\"id\");\n      if (!this.isNullOrWhitespace(name) && !this.isNullOrWhitespace(id)) {\n        foldersMap.set(id, result.folders.length);\n        const folder = new FolderView();\n        folder.name = name;\n        result.folders.push(folder);\n      }\n    });\n\n    Array.from(doc.querySelectorAll(\"database > card\")).forEach((cardEl) => {\n      if (cardEl.getAttribute(\"template\") === \"true\" || cardEl.getAttribute(\"deleted\") === \"true\") {\n        return;\n      }\n\n      const labelIdEl = this.querySelectorDirectChild(cardEl, \"label_id\");\n      if (labelIdEl != null) {\n        const labelId = labelIdEl.textContent;\n        if (!this.isNullOrWhitespace(labelId) && foldersMap.has(labelId)) {\n          result.folderRelationships.push([result.ciphers.length, foldersMap.get(labelId)]);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(cardEl.getAttribute(\"title\"), \"--\");\n\n      if (cardEl.getAttribute(\"star\") === \"true\") {\n        cipher.favorite = true;\n      }\n\n      const cardType = cardEl.getAttribute(\"type\");\n      if (cardType === \"note\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      } else {\n        Array.from(this.querySelectorAllDirectChild(cardEl, \"field\")).forEach((fieldEl) => {\n          const text = fieldEl.textContent;\n          if (this.isNullOrWhitespace(text)) {\n            return;\n          }\n          const name = fieldEl.getAttribute(\"name\");\n          const fieldType = this.getValueOrDefault(fieldEl.getAttribute(\"type\"), \"\").toLowerCase();\n          if (fieldType === \"login\") {\n            cipher.login.username = text;\n          } else if (fieldType === \"password\" || fieldType === \"secret\") {\n            // safeInCloud allows for more than one password. we just insert them here and find the one used as password later\n            this.processKvp(cipher, name, text, FieldType.Hidden);\n          } else if (fieldType === \"one_time_password\") {\n            cipher.login.totp = text;\n          } else if (fieldType === \"notes\") {\n            cipher.notes += text + \"\\n\";\n          } else if (fieldType === \"weblogin\" || fieldType === \"website\") {\n            cipher.login.uris = this.makeUriArray(text);\n          } else {\n            this.processKvp(cipher, name, text);\n          }\n        });\n      }\n\n      Array.from(this.querySelectorAllDirectChild(cardEl, \"notes\")).forEach((notesEl) => {\n        cipher.notes += notesEl.textContent + \"\\n\";\n      });\n\n      this.setPassword(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  // Choose a password from all passwords. Take one that has password in its name, or the first one if there is no such entry\n  // if its name is password, we can safely remove it form the fields. otherwise, it would maybe be best to keep it as a hidden field\n  setPassword(cipher: CipherView) {\n    const candidates = cipher.fields.filter((field) => field.type === FieldType.Hidden);\n    if (!candidates.length) {\n      return;\n    }\n\n    let choice: FieldView;\n    for (const field of candidates) {\n      if (this.passwordFieldNames.includes(field.name.toLowerCase())) {\n        choice = field;\n        cipher.fields = cipher.fields.filter((f) => f !== choice);\n        break;\n      }\n    }\n\n    if (!choice) {\n      choice = candidates[0];\n    }\n\n    cipher.login.password = choice.value;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SaferPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.nameFromUrl(value.url), \"--\");\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SecureSafeCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title);\n      cipher.notes = this.getValueOrDefault(value.Comment);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SplashIdCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      this.processFolder(result, this.getValueOrDefault(value[value.length - 1]));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 2], \"\");\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n\n      if (value[0] === \"Web Logins\" || value[0] === \"Servers\" || value[0] === \"Email Accounts\") {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n        cipher.login.password = this.getValueOrDefault(value[3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n        this.parseFieldsToNotes(cipher, 5, value);\n      } else {\n        this.parseFieldsToNotes(cipher, 2, value);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFieldsToNotes(cipher: CipherView, startIndex: number, value: any) {\n    // last 3 rows do not get parsed\n    for (let i = startIndex; i < value.length - 3; i++) {\n      if (this.isNullOrWhitespace(value[i])) {\n        continue;\n      }\n      cipher.notes += value[i] + \"\\n\";\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class StickyPasswordXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const loginNodes = doc.querySelectorAll(\"root > Database > Logins > Login\");\n    Array.from(loginNodes).forEach((loginNode) => {\n      const accountId = loginNode.getAttribute(\"ID\");\n      if (this.isNullOrWhitespace(accountId)) {\n        return;\n      }\n\n      const usernameText = loginNode.getAttribute(\"Name\");\n      const passwordText = loginNode.getAttribute(\"Password\");\n      let titleText: string = null;\n      let linkText: string = null;\n      let notesText: string = null;\n      let groupId: string = null;\n      let groupText: string = null;\n\n      const accountLogin = doc.querySelector(\n        \"root > Database > Accounts > Account > \" +\n          'LoginLinks > Login[SourceLoginID=\"' +\n          accountId +\n          '\"]'\n      );\n      if (accountLogin != null) {\n        const account = accountLogin.parentElement.parentElement;\n        if (account != null) {\n          titleText = account.getAttribute(\"Name\");\n          linkText = account.getAttribute(\"Link\");\n          groupId = account.getAttribute(\"ParentID\");\n          notesText = account.getAttribute(\"Comments\");\n          if (!this.isNullOrWhitespace(notesText)) {\n            notesText = notesText.split(\"/n\").join(\"\\n\");\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(groupId)) {\n        groupText = this.buildGroupText(doc, groupId, \"\");\n        this.processFolder(result, groupText);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(titleText, \"--\");\n      cipher.notes = this.getValueOrDefault(notesText);\n      cipher.login.username = this.getValueOrDefault(usernameText);\n      cipher.login.password = this.getValueOrDefault(passwordText);\n      cipher.login.uris = this.makeUriArray(linkText);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  buildGroupText(doc: Document, groupId: string, groupText: string): string {\n    const group = doc.querySelector('root > Database > Groups > Group[ID=\"' + groupId + '\"]');\n    if (group == null) {\n      return groupText;\n    }\n    if (!this.isNullOrWhitespace(groupText)) {\n      groupText = \"/\" + groupText;\n    }\n    groupText = group.getAttribute(\"Name\") + groupText;\n    return this.buildGroupText(doc, group.getAttribute(\"ParentID\"), groupText);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst PropertiesToIgnore = [\n  \"kind\",\n  \"autologin\",\n  \"favorite\",\n  \"hexcolor\",\n  \"protectedwithpassword\",\n  \"subdomainonly\",\n  \"type\",\n  \"tk_export_version\",\n  \"note\",\n  \"title\",\n  \"document_content\",\n];\n\nexport class TrueKeyCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.favorite, \"\").toLowerCase() === \"true\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.notes = this.getValueOrDefault(value.memo, \"\");\n      cipher.login.username = this.getValueOrDefault(value.login);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n\n      if (value.kind !== \"login\") {\n        cipher.name = this.getValueOrDefault(value.title, \"--\");\n        cipher.notes = this.getValueOrDefault(value.note, \"\");\n      }\n\n      if (value.kind === \"cc\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        if (!this.isNullOrWhitespace(value.expiryDate)) {\n          try {\n            const expDate = new Date(value.expiryDate);\n            cipher.card.expYear = expDate.getFullYear().toString();\n            cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n          } catch {\n            // Ignore error\n          }\n        }\n      } else if (value.kind !== \"login\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = this.getValueOrDefault(value.document_content, \"\");\n        }\n        for (const property in value) {\n          if (\n            value.hasOwnProperty(property) && // eslint-disable-line\n            PropertiesToIgnore.indexOf(property.toLowerCase()) < 0 &&\n            !this.isNullOrWhitespace(value[property])\n          ) {\n            this.processKvp(cipher, property, value[property]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class UpmCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length !== 5) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.notes = this.getValueOrDefault(value[4]);\n      cipher.login.username = this.getValueOrDefault(value[1]);\n      cipher.login.password = this.getValueOrDefault(value[2]);\n      cipher.login.uris = this.makeUriArray(value[3]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class YotiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User name\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ZohoVaultCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (\n        this.isNullOrWhitespace(value[\"Password Name\"]) &&\n        this.isNullOrWhitespace(value[\"Secret Name\"])\n      ) {\n        return;\n      }\n      this.processFolder(result, this.getValueOrDefault(value.ChamberName));\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite, \"0\") === \"1\";\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(\n        value[\"Password Name\"],\n        this.getValueOrDefault(value[\"Secret Name\"], \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(\n        this.getValueOrDefault(value[\"Password URL\"], this.getValueOrDefault(value[\"Secret URL\"]))\n      );\n      this.parseData(cipher, value.SecretData);\n      this.parseData(cipher, value.CustomData);\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseData(cipher: CipherView, data: string) {\n    if (this.isNullOrWhitespace(data)) {\n      return;\n    }\n    const dataLines = this.splitNewLine(data);\n    dataLines.forEach((line) => {\n      const delimPosition = line.indexOf(\":\");\n      if (delimPosition < 0) {\n        return;\n      }\n      const field = line.substring(0, delimPosition);\n      const value = line.length > delimPosition ? line.substring(delimPosition + 1) : null;\n      if (\n        this.isNullOrWhitespace(field) ||\n        this.isNullOrWhitespace(value) ||\n        field === \"SecretType\"\n      ) {\n        return;\n      }\n      const fieldLower = field.toLowerCase();\n      if (cipher.login.username == null && this.usernameFieldNames.indexOf(fieldLower) > -1) {\n        cipher.login.username = value;\n      } else if (\n        cipher.login.password == null &&\n        this.passwordFieldNames.indexOf(fieldLower) > -1\n      ) {\n        cipher.login.password = value;\n      } else {\n        this.processKvp(cipher, field, value);\n      }\n    });\n  }\n}\n","export interface ImportOption {\n  id: string;\n  name: string;\n}\n\nexport const featuredImportOptions = [\n  { id: \"bitwardenjson\", name: \"Bitwarden (json)\" },\n  { id: \"bitwardencsv\", name: \"Bitwarden (csv)\" },\n  { id: \"chromecsv\", name: \"Chrome (csv)\" },\n  { id: \"dashlanecsv\", name: \"Dashlane (csv)\" },\n  { id: \"firefoxcsv\", name: \"Firefox (csv)\" },\n  { id: \"keepass2xml\", name: \"KeePass 2 (xml)\" },\n  { id: \"lastpasscsv\", name: \"LastPass (csv)\" },\n  { id: \"safaricsv\", name: \"Safari and macOS (csv)\" },\n  { id: \"1password1pux\", name: \"1Password (1pux)\" },\n] as const;\n\nexport const regularImportOptions = [\n  { id: \"keepassxcsv\", name: \"KeePassX (csv)\" },\n  { id: \"1password1pif\", name: \"1Password (1pif)\" },\n  { id: \"1passwordwincsv\", name: \"1Password 6 and 7 Windows (csv)\" },\n  { id: \"1passwordmaccsv\", name: \"1Password 6 and 7 Mac (csv)\" },\n  { id: \"dashlanejson\", name: \"Dashlane (json)\" },\n  { id: \"roboformcsv\", name: \"RoboForm (csv)\" },\n  { id: \"keepercsv\", name: \"Keeper (csv)\" },\n  // Temporarily remove this option for the Feb release\n  // { id: \"keeperjson\", name: \"Keeper (json)\" },\n  { id: \"enpasscsv\", name: \"Enpass (csv)\" },\n  { id: \"enpassjson\", name: \"Enpass (json)\" },\n  { id: \"safeincloudxml\", name: \"SafeInCloud (xml)\" },\n  { id: \"pwsafexml\", name: \"Password Safe (xml)\" },\n  { id: \"stickypasswordxml\", name: \"Sticky Password (xml)\" },\n  { id: \"msecurecsv\", name: \"mSecure (csv)\" },\n  { id: \"truekeycsv\", name: \"True Key (csv)\" },\n  { id: \"passwordbossjson\", name: \"Password Boss (json)\" },\n  { id: \"zohovaultcsv\", name: \"Zoho Vault (csv)\" },\n  { id: \"splashidcsv\", name: \"SplashID (csv)\" },\n  { id: \"passworddragonxml\", name: \"Password Dragon (xml)\" },\n  { id: \"padlockcsv\", name: \"Padlock (csv)\" },\n  { id: \"passboltcsv\", name: \"Passbolt (csv)\" },\n  { id: \"clipperzhtml\", name: \"Clipperz (html)\" },\n  { id: \"aviracsv\", name: \"Avira (csv)\" },\n  { id: \"saferpasscsv\", name: \"SaferPass (csv)\" },\n  { id: \"upmcsv\", name: \"Universal Password Manager (csv)\" },\n  { id: \"ascendocsv\", name: \"Ascendo DataVault (csv)\" },\n  { id: \"meldiumcsv\", name: \"Meldium (csv)\" },\n  { id: \"passkeepcsv\", name: \"PassKeep (csv)\" },\n  { id: \"operacsv\", name: \"Opera (csv)\" },\n  { id: \"vivaldicsv\", name: \"Vivaldi (csv)\" },\n  { id: \"gnomejson\", name: \"GNOME Passwords and Keys/Seahorse (json)\" },\n  { id: \"blurcsv\", name: \"Blur (csv)\" },\n  { id: \"passwordagentcsv\", name: \"Password Agent (csv)\" },\n  { id: \"passpackcsv\", name: \"Passpack (csv)\" },\n  { id: \"passmanjson\", name: \"Passman (json)\" },\n  { id: \"avastcsv\", name: \"Avast Passwords (csv)\" },\n  { id: \"avastjson\", name: \"Avast Passwords (json)\" },\n  { id: \"fsecurefsk\", name: \"F-Secure KEY (fsk)\" },\n  { id: \"kasperskytxt\", name: \"Kaspersky Password Manager (txt)\" },\n  { id: \"remembearcsv\", name: \"RememBear (csv)\" },\n  { id: \"passwordwallettxt\", name: \"PasswordWallet (txt)\" },\n  { id: \"mykicsv\", name: \"Myki (csv)\" },\n  { id: \"securesafecsv\", name: \"SecureSafe (csv)\" },\n  { id: \"logmeoncecsv\", name: \"LogMeOnce (csv)\" },\n  { id: \"blackberrycsv\", name: \"BlackBerry Password Keeper (csv)\" },\n  { id: \"buttercupcsv\", name: \"Buttercup (csv)\" },\n  { id: \"codebookcsv\", name: \"Codebook (csv)\" },\n  { id: \"encryptrcsv\", name: \"Encryptr (csv)\" },\n  { id: \"yoticsv\", name: \"Yoti (csv)\" },\n  { id: \"nordpasscsv\", name: \"Nordpass (csv)\" },\n  { id: \"psonojson\", name: \"Psono (json)\" },\n  { id: \"passkyjson\", name: \"Passky (json)\" },\n] as const;\n\nexport type ImportType =\n  | (typeof featuredImportOptions)[number][\"id\"]\n  | (typeof regularImportOptions)[number][\"id\"];\n","import { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\nimport { KvpRequest } from \"@bitwarden/common/models/request/kvp.request\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherRequest } from \"@bitwarden/common/vault/models/request/cipher.request\";\nimport { CollectionWithIdRequest } from \"@bitwarden/common/vault/models/request/collection-with-id.request\";\nimport { FolderWithIdRequest } from \"@bitwarden/common/vault/models/request/folder-with-id.request\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport {\n  AscendoCsvImporter,\n  AvastCsvImporter,\n  AvastJsonImporter,\n  AviraCsvImporter,\n  BitwardenCsvImporter,\n  BitwardenPasswordProtectedImporter,\n  BlackBerryCsvImporter,\n  BlurCsvImporter,\n  ButtercupCsvImporter,\n  ChromeCsvImporter,\n  ClipperzHtmlImporter,\n  CodebookCsvImporter,\n  DashlaneCsvImporter,\n  DashlaneJsonImporter,\n  EncryptrCsvImporter,\n  EnpassCsvImporter,\n  EnpassJsonImporter,\n  FirefoxCsvImporter,\n  FSecureFskImporter,\n  GnomeJsonImporter,\n  KasperskyTxtImporter,\n  KeePass2XmlImporter,\n  KeePassXCsvImporter,\n  KeeperCsvImporter,\n  // KeeperJsonImporter,\n  LastPassCsvImporter,\n  LogMeOnceCsvImporter,\n  MSecureCsvImporter,\n  MeldiumCsvImporter,\n  MykiCsvImporter,\n  NordPassCsvImporter,\n  OnePassword1PifImporter,\n  OnePassword1PuxImporter,\n  OnePasswordMacCsvImporter,\n  OnePasswordWinCsvImporter,\n  PadlockCsvImporter,\n  PassKeepCsvImporter,\n  PasskyJsonImporter,\n  PassmanJsonImporter,\n  PasspackCsvImporter,\n  PasswordAgentCsvImporter,\n  PasswordBossJsonImporter,\n  PasswordDragonXmlImporter,\n  PasswordSafeXmlImporter,\n  PasswordWalletTxtImporter,\n  PsonoJsonImporter,\n  RememBearCsvImporter,\n  RoboFormCsvImporter,\n  SafariCsvImporter,\n  SafeInCloudXmlImporter,\n  SaferPassCsvImporter,\n  SecureSafeCsvImporter,\n  SplashIdCsvImporter,\n  StickyPasswordXmlImporter,\n  TrueKeyCsvImporter,\n  UpmCsvImporter,\n  YotiCsvImporter,\n  ZohoVaultCsvImporter,\n} from \"../importers\";\nimport { Importer } from \"../importers/importer\";\nimport {\n  featuredImportOptions,\n  ImportOption,\n  ImportType,\n  regularImportOptions,\n} from \"../models/import-options\";\nimport { ImportResult } from \"../models/import-result\";\nimport { ImportApiServiceAbstraction } from \"../services/import-api.service.abstraction\";\nimport { ImportServiceAbstraction } from \"../services/import.service.abstraction\";\n\nexport class ImportService implements ImportServiceAbstraction {\n  featuredImportOptions = featuredImportOptions as readonly ImportOption[];\n\n  regularImportOptions = regularImportOptions as readonly ImportOption[];\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private importApiService: ImportApiServiceAbstraction,\n    private i18nService: I18nService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService\n  ) {}\n\n  getImportOptions(): ImportOption[] {\n    return this.featuredImportOptions.concat(this.regularImportOptions);\n  }\n\n  async import(\n    importer: Importer,\n    fileContents: string,\n    organizationId: string = null,\n    selectedImportTarget: string = null,\n    isUserAdmin: boolean\n  ): Promise<ImportResult> {\n    let importResult: ImportResult;\n    try {\n      importResult = await importer.parse(fileContents);\n    } catch (error) {\n      if (error instanceof SyntaxError) {\n        throw new Error(this.i18nService.t(\"importFormatError\"));\n      }\n      throw error;\n    }\n\n    if (!importResult.success) {\n      if (!Utils.isNullOrWhitespace(importResult.errorMessage)) {\n        throw new Error(importResult.errorMessage);\n      }\n      throw new Error(this.i18nService.t(\"importFormatError\"));\n    }\n\n    if (importResult.folders.length === 0 && importResult.ciphers.length === 0) {\n      throw new Error(this.i18nService.t(\"importNothingError\"));\n    }\n\n    if (importResult.ciphers.length > 0) {\n      const halfway = Math.floor(importResult.ciphers.length / 2);\n      const last = importResult.ciphers.length - 1;\n\n      if (\n        this.badData(importResult.ciphers[0]) &&\n        this.badData(importResult.ciphers[halfway]) &&\n        this.badData(importResult.ciphers[last])\n      ) {\n        throw new Error(this.i18nService.t(\"importFormatError\"));\n      }\n    }\n\n    if (organizationId && Utils.isNullOrWhitespace(selectedImportTarget) && !isUserAdmin) {\n      const hasUnassignedCollections = importResult.ciphers.some(\n        (c) => !Array.isArray(c.collectionIds) || c.collectionIds.length == 0\n      );\n      if (hasUnassignedCollections) {\n        throw new Error(this.i18nService.t(\"importUnassignedItemsError\"));\n      }\n    }\n\n    try {\n      await this.setImportTarget(importResult, organizationId, selectedImportTarget);\n      if (organizationId != null) {\n        await this.handleOrganizationalImport(importResult, organizationId);\n      } else {\n        await this.handleIndividualImport(importResult);\n      }\n    } catch (error) {\n      const errorResponse = new ErrorResponse(error, 400);\n      throw this.handleServerError(errorResponse, importResult);\n    }\n    return importResult;\n  }\n\n  getImporter(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>,\n    organizationId: string = null\n  ): Importer {\n    if (promptForPassword_callback == null) {\n      return null;\n    }\n\n    const importer = this.getImporterInstance(format, promptForPassword_callback);\n    if (importer == null) {\n      return null;\n    }\n    importer.organizationId = organizationId;\n    return importer;\n  }\n\n  private getImporterInstance(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>\n  ) {\n    if (format == null) {\n      return null;\n    }\n\n    switch (format) {\n      case \"bitwardencsv\":\n        return new BitwardenCsvImporter();\n      case \"bitwardenjson\":\n      case \"bitwardenpasswordprotected\":\n        return new BitwardenPasswordProtectedImporter(\n          this.cryptoService,\n          this.i18nService,\n          promptForPassword_callback\n        );\n      case \"lastpasscsv\":\n      case \"passboltcsv\":\n        return new LastPassCsvImporter();\n      case \"keepassxcsv\":\n        return new KeePassXCsvImporter();\n      case \"aviracsv\":\n        return new AviraCsvImporter();\n      case \"blurcsv\":\n        return new BlurCsvImporter();\n      case \"safeincloudxml\":\n        return new SafeInCloudXmlImporter();\n      case \"padlockcsv\":\n        return new PadlockCsvImporter();\n      case \"keepass2xml\":\n        return new KeePass2XmlImporter();\n      case \"chromecsv\":\n      case \"operacsv\":\n      case \"vivaldicsv\":\n        return new ChromeCsvImporter();\n      case \"firefoxcsv\":\n        return new FirefoxCsvImporter();\n      case \"upmcsv\":\n        return new UpmCsvImporter();\n      case \"saferpasscsv\":\n        return new SaferPassCsvImporter();\n      case \"safaricsv\":\n        return new SafariCsvImporter();\n      case \"meldiumcsv\":\n        return new MeldiumCsvImporter();\n      case \"1password1pif\":\n        return new OnePassword1PifImporter();\n      case \"1password1pux\":\n        return new OnePassword1PuxImporter();\n      case \"1passwordwincsv\":\n        return new OnePasswordWinCsvImporter();\n      case \"1passwordmaccsv\":\n        return new OnePasswordMacCsvImporter();\n      case \"keepercsv\":\n        return new KeeperCsvImporter();\n      // case \"keeperjson\":\n      //   return new KeeperJsonImporter();\n      case \"passworddragonxml\":\n        return new PasswordDragonXmlImporter();\n      case \"enpasscsv\":\n        return new EnpassCsvImporter();\n      case \"enpassjson\":\n        return new EnpassJsonImporter();\n      case \"pwsafexml\":\n        return new PasswordSafeXmlImporter();\n      case \"dashlanecsv\":\n        return new DashlaneCsvImporter();\n      case \"dashlanejson\":\n        return new DashlaneJsonImporter();\n      case \"msecurecsv\":\n        return new MSecureCsvImporter();\n      case \"stickypasswordxml\":\n        return new StickyPasswordXmlImporter();\n      case \"truekeycsv\":\n        return new TrueKeyCsvImporter();\n      case \"clipperzhtml\":\n        return new ClipperzHtmlImporter();\n      case \"roboformcsv\":\n        return new RoboFormCsvImporter();\n      case \"ascendocsv\":\n        return new AscendoCsvImporter();\n      case \"passwordbossjson\":\n        return new PasswordBossJsonImporter();\n      case \"zohovaultcsv\":\n        return new ZohoVaultCsvImporter();\n      case \"splashidcsv\":\n        return new SplashIdCsvImporter();\n      case \"passkeepcsv\":\n        return new PassKeepCsvImporter();\n      case \"gnomejson\":\n        return new GnomeJsonImporter();\n      case \"passwordagentcsv\":\n        return new PasswordAgentCsvImporter();\n      case \"passpackcsv\":\n        return new PasspackCsvImporter();\n      case \"passmanjson\":\n        return new PassmanJsonImporter();\n      case \"avastcsv\":\n        return new AvastCsvImporter();\n      case \"avastjson\":\n        return new AvastJsonImporter();\n      case \"fsecurefsk\":\n        return new FSecureFskImporter();\n      case \"kasperskytxt\":\n        return new KasperskyTxtImporter();\n      case \"remembearcsv\":\n        return new RememBearCsvImporter();\n      case \"passwordwallettxt\":\n        return new PasswordWalletTxtImporter();\n      case \"mykicsv\":\n        return new MykiCsvImporter();\n      case \"securesafecsv\":\n        return new SecureSafeCsvImporter();\n      case \"logmeoncecsv\":\n        return new LogMeOnceCsvImporter();\n      case \"blackberrycsv\":\n        return new BlackBerryCsvImporter();\n      case \"buttercupcsv\":\n        return new ButtercupCsvImporter();\n      case \"codebookcsv\":\n        return new CodebookCsvImporter();\n      case \"encryptrcsv\":\n        return new EncryptrCsvImporter();\n      case \"yoticsv\":\n        return new YotiCsvImporter();\n      case \"nordpasscsv\":\n        return new NordPassCsvImporter();\n      case \"psonojson\":\n        return new PsonoJsonImporter();\n      case \"passkyjson\":\n        return new PasskyJsonImporter();\n      default:\n        return null;\n    }\n  }\n\n  private async handleIndividualImport(importResult: ImportResult) {\n    const request = new ImportCiphersRequest();\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.folders != null) {\n      for (let i = 0; i < importResult.folders.length; i++) {\n        const f = await this.folderService.encrypt(importResult.folders[i]);\n        request.folders.push(new FolderWithIdRequest(f));\n      }\n    }\n    if (importResult.folderRelationships != null) {\n      importResult.folderRelationships.forEach((r) =>\n        request.folderRelationships.push(new KvpRequest(r[0], r[1]))\n      );\n    }\n    return await this.importApiService.postImportCiphers(request);\n  }\n\n  private async handleOrganizationalImport(importResult: ImportResult, organizationId: string) {\n    const request = new ImportOrganizationCiphersRequest();\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      importResult.ciphers[i].organizationId = organizationId;\n      const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.collections != null) {\n      for (let i = 0; i < importResult.collections.length; i++) {\n        importResult.collections[i].organizationId = organizationId;\n        const c = await this.collectionService.encrypt(importResult.collections[i]);\n        request.collections.push(new CollectionWithIdRequest(c));\n      }\n    }\n    if (importResult.collectionRelationships != null) {\n      importResult.collectionRelationships.forEach((r) =>\n        request.collectionRelationships.push(new KvpRequest(r[0], r[1]))\n      );\n    }\n    return await this.importApiService.postImportOrganizationCiphers(organizationId, request);\n  }\n\n  private badData(c: CipherView) {\n    return (\n      (c.name == null || c.name === \"--\") &&\n      c.type === CipherType.Login &&\n      c.login != null &&\n      Utils.isNullOrWhitespace(c.login.password)\n    );\n  }\n\n  private handleServerError(errorResponse: ErrorResponse, importResult: ImportResult): Error {\n    if (errorResponse.validationErrors == null) {\n      return new Error(errorResponse.message);\n    }\n\n    let errorMessage = \"\";\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const i = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Ciphers\":\n          item = importResult.ciphers[i];\n          itemType = CipherType[item.type];\n          break;\n        case \"Folders\":\n          item = importResult.folders[i];\n          itemType = \"Folder\";\n          break;\n        case \"Collections\":\n          item = importResult.collections[i];\n          itemType = \"Collection\";\n          break;\n        default:\n          return;\n      }\n\n      if (index > 0) {\n        errorMessage += \"\\n\\n\";\n      }\n\n      if (itemType !== \"Folder\" && itemType !== \"Collection\") {\n        errorMessage += \"[\" + (i + 1) + \"] \";\n      }\n\n      errorMessage += \"[\" + itemType + '] \"' + item.name + '\": ' + value;\n    });\n\n    return new Error(errorMessage);\n  }\n\n  private async setImportTarget(\n    importResult: ImportResult,\n    organizationId: string,\n    importTarget: string\n  ) {\n    if (Utils.isNullOrWhitespace(importTarget)) {\n      return;\n    }\n\n    if (organizationId) {\n      const collectionViews: CollectionView[] = await this.collectionService.getAllDecrypted();\n      const targetCollection = collectionViews.find((c) => c.id === importTarget);\n\n      const noCollectionRelationShips: [number, number][] = [];\n      importResult.ciphers.forEach((c, index) => {\n        if (!Array.isArray(c.collectionIds) || c.collectionIds.length == 0) {\n          c.collectionIds = [targetCollection.id];\n          noCollectionRelationShips.push([index, 0]);\n        }\n      });\n\n      const collections: CollectionView[] = [...importResult.collections];\n      importResult.collections = [targetCollection];\n      collections.map((x) => {\n        const f = new CollectionView();\n        f.name = `${targetCollection.name}/${x.name}`;\n        importResult.collections.push(f);\n      });\n\n      const relationships: [number, number][] = [...importResult.collectionRelationships];\n      importResult.collectionRelationships = [...noCollectionRelationShips];\n      relationships.map((x) => {\n        importResult.collectionRelationships.push([x[0], x[1] + 1]);\n      });\n\n      return;\n    }\n\n    const folderViews = await this.folderService.getAllDecryptedFromState();\n    const targetFolder = folderViews.find((f) => f.id === importTarget);\n\n    const noFolderRelationShips: [number, number][] = [];\n    importResult.ciphers.forEach((c, index) => {\n      if (Utils.isNullOrEmpty(c.folderId)) {\n        c.folderId = targetFolder.id;\n        noFolderRelationShips.push([index, 0]);\n      }\n    });\n\n    const folders: FolderView[] = [...importResult.folders];\n    importResult.folders = [targetFolder];\n    folders.map((x) => {\n      const newFolderName = `${targetFolder.name}/${x.name}`;\n      const f = new FolderView();\n      f.name = newFolderName;\n      importResult.folders.push(f);\n    });\n\n    const relationships: [number, number][] = [...importResult.folderRelationships];\n    importResult.folderRelationships = [...noFolderRelationShips];\n    relationships.map((x) => {\n      importResult.folderRelationships.push([x[0], x[1] + 1]);\n    });\n  }\n}\n"],"names":["disabledByPolicy","this","_disabledByPolicy","constructor","cryptoService","i18nService","platformUtilsService","exportService","eventCollectionService","policyService","win","logService","userVerificationService","formBuilder","fileDownloadService","dialogService","onSaved","exportForm","group","format","secret","filePassword","required","confirmFilePassword","fileEncryptionType","AccountEncrypted","formatOptions","name","value","destroy$","Subject","ngOnInit","policyAppliesToActiveUser$","DisablePersonalVaultExport","pipe","takeUntil","subscribe","policyAppliesToActiveUser","disable","merge","get","valueChanges","startWith","adjustValidators","ngOnDestroy","next","encryptedFormat","doExport","formPromise","getExportData","data","downloadFile","saved","collectEvent","setValue","clearValidators","e","error","submit","showToast","t","warningDialog","verifyUser","message","openSimpleDialog","title","key","content","acceptButtonText","type","WARNING","emit","FileEncrypted","getPasswordProtectedExport","getExport","getFileName","prefix","extension","collect","User_ClientExportedVault","reset","controls","enable","csv","fileName","download","blobData","blobOptions","ExportComponent","super","window","encryptedExportType","isFileEncryptedExport","markAllAsTouched","valid","confirmDescription","isAccountEncryptedExport","ref","confirmButtonText","modalTitle","firstValueFrom","closed","ImportSuccessDialogComponent","dialogRef","dataSource","buildResultList","logins","cards","identities","secureNotes","ciphers","map","c","Login","Card","SecureNote","Identity","list","push","icon","count","folders","length","collections","FilePasswordPromptComponent","markAsTouched","close","ImportComponent","importService","router","modalService","syncService","folderService","collectionService","organizationService","organizationId","_importBlockedByPolicy","formGroup","vaultSelector","nonNullable","validators","targetSelector","fileContents","file","invalid","performImport","importBlockedByPolicy","onSuccessfulImport","navigate","setImportOptions","organizations$","concat","memberOrganizations$","orgs","sort","getSortFunction","combineLatest","PersonalOwnership","policyApplies","patchValue","collections$","asyncToObservable","getAllDecrypted","then","filter","c2","folders$","folderViews$","f","id","undefined","importer","getImporter","getFilePassword","files","document","getElementById","getFileContents","isAdmin","result","import","isUserAdmin","open","fullSync","getFormatInstructionTitle","results","featuredImportOptions","importOptions","o","regularImportOptions","a","b","collator","compare","localeCompare","setSelectedFile","event","fileInputEl","target","fileSelected","heightAuto","buttonsStyling","iconHtml","input","inputValue","inputAttributes","readonly","titleText","text","showConfirmButton","onOpen","popupEl","querySelector","scrollTo","extract1PuxContent","Promise","resolve","reject","reader","FileReader","readAsText","onload","evt","pre","DOMParser","parseFromString","textContent","onerror","loadAsync","zip","async","dialog","ariaModal","lastValueFrom","complete","BoxRowDirective","elRef","el","nativeElement","formEls","Array","from","querySelectorAll","forEach","formEl","addEventListener","classList","add","remove","onClick","contains","tagName","toLowerCase","inputEl","click","focus","ExportScopeCalloutComponent","stateService","show","hasOrganizations","scopeConfig","description","scopeIdentifier","getEmail","ImportApiServiceAbstraction","ImportApiService","apiService","postImportCiphers","request","send","postImportOrganizationCiphers","ImportServiceAbstraction","ImportCiphersRequest","folderRelationships","ImportOrganizationCiphersRequest","collectionRelationships","KvpRequest","CollectionWithIdRequest","collection","success","newLineRegex","passwordFieldNames","usernameFieldNames","notesFieldNames","uriFieldNames","parseCsvOptions","encoding","skipEmptyLines","organization","parseXml","doc","parseCsv","header","options","parseOptions","Object","assign","splitNewLine","join","trim","errors","row","warning","parseSingleRowCsv","rowData","isNullOrWhitespace","parsedRow","makeUriArray","uri","loginUri","fixUri","match","returnArr","u","indexOf","substring","nameFromUrl","url","hostname","getHostname","startsWith","replace","str","getValueOrDefault","defaultValue","split","setCardExpiration","cipher","expiration","expiryRegex","RegExp","expiryMatch","card","expMonth","groups","month","year","expYear","moveFoldersToCollections","r","querySelectorDirectChild","parentEl","query","els","querySelectorAllDirectChild","parentNode","initLoginCipher","favorite","notes","fields","login","cleanupCipher","processKvp","Text","search","field","processFolder","folderName","folderIndex","addFolder","i","convertToNoteIfNeeded","username","password","uris","secureNote","Generic","processFullName","fullName","nameParts","identity","firstName","lastName","middleName","slice","AscendoCsvImporter","parse","val","fieldLower","AvastCsvImporter","web","AvastJsonImporter","JSON","custName","note","pwd","loginName","label","cardholderName","holderName","number","cardNumber","code","cvv","brand","getCardBrandByPatterns","expirationDate","AviraCsvImporter","website","secondary_username","BlackBerryCsvImporter","grouping","fav","extra","ChromeCsvImporter","androidPatternRegex","test","BitwardenCsvImporter","col","addCollection","collectionIndex","folder","reprompt","parseInt","None","toString","console","delimPosition","lastIndexOf","substr","totp","login_totp","login_username","login_password","login_uri","BitwardenJsonImporter","items","encrypted","parseEncrypted","parseDecrypted","encKeyValidation_DO_NOT_EDIT","orgKey","getOrgKey","encKeyValidation","decryptToUtf8","errorMessage","groupingsMap","Map","toDomain","view","decrypt","set","collectionIds","passwordHistory","folderId","has","cId","toView","BitwardenPasswordProtectedImporter","promptForPassword_callback","parsedData","passwordProtected","cannotParseFile","checkPassword","encData","clearTextData","jdoc","makePinKey","salt","kdfType","kdfIterations","kdfMemory","kdfParallelism","BlurCsvImporter","domain","email","OfficialProps","ButtercupCsvImporter","URL","processingCustomFields","prop","hasOwnProperty","ClipperzHtmlImporter","textarea","entry","currentVersion","property","actionType","labelLower","CodebookCsvImporter","Category","Favorite","Entry","Note","Username","Email","Password","TOTP","Website","Phone","PIN","Account","Date","_mappedCredentialsColumns","Set","_mappedPersonalInfoAsIdentityColumns","_mappedSecureNoteColumns","DashlaneCsvImporter","x","parsePersonalInformationRecordAsIdentity","rowKeys","keys","category","parseCredentialsRecord","parsePaymentRecord","parseIdRecord","parsePersonalInformationRecord","parseSecureNoteRecords","otpSecret","importUnmappedFields","account_name","mappedValues","cc_number","expiration_month","expiration_year","account_holder","account_number","licenseNumber","passportNumber","state","ssn","first_name","middle_name","last_name","item_name","dataRow","phone","phone_number","address1","address","city","postalCode","country","item","HandledResults","DashlaneJsonImporter","ADDRESS","processAddress","AUTHENTIFIANT","processAuth","BANKSTATEMENT","processNote","IDCARD","PAYMENTMEANS_CREDITCARD","processCard","IDENTITY","processIdentity","credential","secondaryLogin","obj","pseudo","addressName","addressFull","zipcode","toUpperCase","bank","owner","nameProperty","EncryptrCsvImporter","Label","Notes","CVV","expiry","Expiry","expParts","EnpassCsvImporter","firstRow","containsField","fieldValue","fieldName","fieldNameLower","androidUrlRegex","EnpassJsonImporter","foldersMap","foldersIndexMap","folderTree","buildFolderTree","flattenFolderTree","template_type","processLogin","some","urls","cleanedValue","sensitive","Hidden","uuid","children","parent_uuid","titlePrefix","tree","FirefoxCsvImporter","FskEntryTypesEnum","FSecureFskImporter","parseEntry","service","handleLoginEntry","CreditCard","handleCreditCardEntry","creditNumber","creditCvv","creditExpiry","GnomeJsonImporter","keyRing","display_name","attributes","username_value","attr","NotesHeader","ApplicationsHeader","WebsitesHeader","Delimiter","KasperskyTxtImporter","notesData","applicationsData","websitesData","workingData","parts","parseDataCategory","applications","websites","n","w","nameKey","p","itemComment","itemCommentKey","l","colonIndex","size","KeePass2XmlImporter","KeePassFileNode","RootNode","rootGroup","traverse","node","isRootNode","groupPrefixName","groupName","nameEl","cipherIndex","entryString","valueEl","keyEl","attrs","ProtectInMemory","KeePassXCsvImporter","Title","Group","KeeperCsvImporter","LastPassCsvImporter","hasFolder","buildBaseCipher","parseSecureNote","parseCard","parseIdentity","ccnum","cardCipher","profilename","firstname","lastname","ccname","cccsc","ccexp","ccexpParts","middlename","company","address2","address3","charAt","extraParts","processedNote","typeParts","mappedData","parseSecureNoteMapping","Number","monthString","getMonth","isNaN","Company","State","Country","dataObj","processingNotes","extraPart","LogMeOnceCsvImporter","MeldiumCsvImporter","DisplayName","UserName","Url","MSecureCsvImporter","mappedBaseColumns","_mappedUserAccountColumns","_mappedCreditCardColumns","_mappedIdentityColumns","_mappedIdCardColumns","_mappedTwoFaColumns","_mappedUserNoteColumns","MykiCsvImporter","nickname","additionalInfo","twofaSecret","authToken","cardName","exp_month","exp_year","firstAddressLine","secondAddressLine","zipCode","idType","idName","idCountry","idNumber","NordPassCsvImporter","record","recordType","evaluateType","cardholdername","cardnumber","cvc","expirydate","full_name","CategoryEnum","LoginFieldTypeEnum","OnePassword1PifImporter","line","trashed","hmac","processStandardItem","processWinOpVaultItem","overview","URLs","details","parsePasswordHistory","notesPlain","parseFields","sections","section","openContents","faveIndex","typeName","location","secureContents","maxSize","h","time","ph","lastUsedDate","designationKey","valueKey","k","toUTCString","fieldDesignation","street","fieldType","OnePassword1PuxImporter","accounts","vaults","vault","categoryUuid","Database","WirelessRouter","Server","API_Credential","BankAccount","SoftwareLicense","EmailAccount","MedicalRecord","DriversLicense","OutdoorLicense","Membership","Passport","RewardsProgram","SocialSecurityNumber","favIndex","processOverview","processLoginFields","processDetails","processSections","tags","capitalize","inputString","loginFields","loginField","designation","CheckBox","Boolean","parseSectionFields","anyField","getFieldName","extractValue","fillLogin","fillApiCredentials","fillCreditCard","fillBankAccount","fillIdentity","fillDriversLicense","fillOutdoorLicense","fillMembership","fillPassport","fillRewardsProgram","fillSSN","email_address","provider","guarded","date","monthYear","historyItems","CipherImportContext","importRecord","lowerProperty","IgnoredProperties","OnePasswordCsvImporter","loginPropertyParsers","setLoginUsername","setLoginPassword","setLoginUris","creditCardPropertyParsers","setCreditCardNumber","setCreditCardVerification","setCreditCardCardholderName","setCreditCardExpiry","identityPropertyParsers","setIdentityFirstName","setIdentityInitial","setIdentityLastName","setIdentityUserName","setIdentityEmail","setIdentityPhone","setIdentityCompany","quoteChar","escapeChar","getProp","setNotes","setCipherType","altUsername","context","setKnownLoginValue","setKnownCreditCardValue","setKnownIdentityValue","setUnknownValue","entries","reduce","agg","getPropByRegexp","regexp","matchingKeys","getPropIncluding","includesMap","includes","func","bind","readableDate","OnePasswordMacCsvImporter","OnePasswordWinCsvImporter","setIdentityAddress","expSplit","PadlockCsvImporter","headers","v","tag","PassKeepCsvImporter","getValue","PasskyJsonImporter","passkyExport","passwords","PassmanJsonImporter","otp","custom_fields","customField","field_type","PasspackCsvImporter","tagsJson","Tags","tagJson","__parsed_extra","fieldsJson","extraFields","fieldJson","PasswordAgentCsvImporter","newVersion","altFormat","PasswordBossJsonImporter","login_url","identifiers","valObj","expDate","getFullYear","cf","PasswordDragonXmlImporter","records","categoryText","accountName","userId","PasswordSafeXmlImporter","passwordSafe","notesDelimiter","getAttribute","groupText","PasswordWalletTxtImporter","PsonoJsonImporter","WEBSITE_mappedValues","APP_PWD_mappedValues","BOOKMARK_mappedValues","NOTES_mappedValues","TOTP_mappedValues","ENV_VARIABLES_mappedValues","GPG_mappedValues","psonoExport","parseFolders","handleItemParsing","parsePsonoItem","parseWebsiteLogins","parseApplicationPasswords","parseEnvironmentVariables","parseTOTP","parseBookmarks","parseNotes","website_password_title","website_password_notes","website_password_username","website_password_password","website_password_url","website_password_auto_submit","website_password_url_filter","application_password_title","application_password_notes","application_password_username","application_password_password","bookmark_title","bookmark_notes","bookmark_url","note_title","note_notes","totp_title","totp_notes","totp_code","environment_variables_title","environment_variables_notes","environment_variables_variables","KvPair","parseGPG","mail_gpg_own_key_title","mail_gpg_own_key_public","mail_gpg_own_key_name","mail_gpg_own_key_email","mail_gpg_own_key_private","RememBearCsvImporter","trash","cardholder","verification","expiryMonth","expMonthNumber","expiryYear","expYearNumber","pin","RoboFormCsvImporter","Folder","Name","Pwd","Rf_fields","SafariCsvImporter","OTPAuth","SafeInCloudXmlImporter","labelEl","cardEl","labelIdEl","labelId","fieldEl","notesEl","setPassword","candidates","choice","SaferPassCsvImporter","SecureSafeCsvImporter","Comment","SplashIdCsvImporter","parseFieldsToNotes","startIndex","StickyPasswordXmlImporter","loginNodes","loginNode","accountId","usernameText","passwordText","linkText","notesText","groupId","accountLogin","account","parentElement","buildGroupText","PropertiesToIgnore","TrueKeyCsvImporter","memo","kind","expiryDate","document_content","UpmCsvImporter","YotiCsvImporter","ZohoVaultCsvImporter","ChamberName","parseData","SecretData","CustomData","ImportService","cipherService","importApiService","getImportOptions","selectedImportTarget","importResult","SyntaxError","Error","halfway","Math","floor","last","badData","isArray","setImportTarget","handleOrganizationalImport","handleIndividualImport","errorResponse","handleServerError","getImporterInstance","encrypt","validationErrors","index","itemType","importTarget","targetCollection","find","noCollectionRelationShips","relationships","targetFolder","getAllDecryptedFromState","noFolderRelationShips","isNullOrEmpty","newFolderName"],"sourceRoot":""}