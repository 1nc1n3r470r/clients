{"version":3,"file":"581.c069c9e17682692a4de9.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/import-success-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/import-success-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/file-password-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/file-password-prompt.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/directives/box-row.directive.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export-scope-callout.component.html","webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export-scope-callout.component.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import-api.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import-api.service.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-organization-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/kvp.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/request/collection-with-id.request.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-result.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/base-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/ascendo-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avast/avast-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avast/avast-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avira-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/blackberry-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/chrome-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-password-protected-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/blur-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/buttercup-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/clipperz-html-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/codebook-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/dashlane/dashlane-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/dashlane/dashlane-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/encryptr-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/enpass/enpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/enpass/enpass-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/firefox-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/fsecure/fsecure-fsk-types.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/fsecure/fsecure-fsk-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/gnome-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/kaspersky-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keepass2-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keepassx-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keeper/keeper-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/logmeonce-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/meldium-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/msecure-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/myki-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/nordpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/types/onepassword-1pux-importer-types.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-1pif-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-1pux-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/cipher-import-context.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-mac-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-win-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/padlock-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passkeep-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passky/passky-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passman-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passpack-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordagent-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordboss-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passworddragon-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordsafe-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordwallet-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/psono/psono-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/remembear-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/roboform-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/safari-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/safeincloud-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/saferpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/securesafe-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/splashid-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/stickypassword-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/truekey-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/upm-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/yoti-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/zohovault-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-options.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import.service.ts"],"sourcesContent":["import { Directive, EventEmitter, OnDestroy, OnInit, Output } from \"@angular/core\";\nimport { UntypedFormBuilder, Validators } from \"@angular/forms\";\nimport { merge, startWith, Subject, takeUntil } from \"rxjs\";\n\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { EncryptedExportType, EventType } from \"@bitwarden/common/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { VaultExportServiceAbstraction } from \"@bitwarden/exporter/vault-export\";\n\nimport { DialogServiceAbstraction, SimpleDialogType } from \"../../../services/dialog\";\n\n@Directive()\nexport class ExportComponent implements OnInit, OnDestroy {\n  @Output() onSaved = new EventEmitter();\n\n  formPromise: Promise<string>;\n  private _disabledByPolicy = false;\n\n  protected get disabledByPolicy(): boolean {\n    return this._disabledByPolicy;\n  }\n\n  exportForm = this.formBuilder.group({\n    format: [\"json\"],\n    secret: [\"\"],\n    filePassword: [\"\", Validators.required],\n    confirmFilePassword: [\"\", Validators.required],\n    fileEncryptionType: [EncryptedExportType.AccountEncrypted],\n  });\n\n  formatOptions = [\n    { name: \".json\", value: \"json\" },\n    { name: \".csv\", value: \"csv\" },\n    { name: \".json (Encrypted)\", value: \"encrypted_json\" },\n  ];\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected exportService: VaultExportServiceAbstraction,\n    protected eventCollectionService: EventCollectionService,\n    private policyService: PolicyService,\n    protected win: Window,\n    private logService: LogService,\n    private userVerificationService: UserVerificationService,\n    private formBuilder: UntypedFormBuilder,\n    protected fileDownloadService: FileDownloadService,\n    protected dialogService: DialogServiceAbstraction\n  ) {}\n\n  async ngOnInit() {\n    this.policyService\n      .policyAppliesToActiveUser$(PolicyType.DisablePersonalVaultExport)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((policyAppliesToActiveUser) => {\n        this._disabledByPolicy = policyAppliesToActiveUser;\n        if (this.disabledByPolicy) {\n          this.exportForm.disable();\n        }\n      });\n\n    merge(\n      this.exportForm.get(\"format\").valueChanges,\n      this.exportForm.get(\"fileEncryptionType\").valueChanges\n    )\n      .pipe(takeUntil(this.destroy$))\n      .pipe(startWith(0))\n      .subscribe(() => this.adjustValidators());\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n  }\n\n  get encryptedFormat() {\n    return this.format === \"encrypted_json\";\n  }\n\n  protected async doExport() {\n    try {\n      this.formPromise = this.getExportData();\n      const data = await this.formPromise;\n      this.downloadFile(data);\n      this.saved();\n      await this.collectEvent();\n      this.exportForm.get(\"secret\").setValue(\"\");\n      this.exportForm.clearValidators();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async submit() {\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const acceptedWarning = await this.warningDialog();\n    if (!acceptedWarning) {\n      return;\n    }\n    const secret = this.exportForm.get(\"secret\").value;\n\n    try {\n      await this.userVerificationService.verifyUser(secret);\n    } catch (e) {\n      this.platformUtilsService.showToast(\"error\", this.i18nService.t(\"errorOccurred\"), e.message);\n      return;\n    }\n\n    this.doExport();\n  }\n\n  async warningDialog() {\n    if (this.encryptedFormat) {\n      return await this.dialogService.openSimpleDialog({\n        title: { key: \"confirmVaultExport\" },\n        content:\n          this.i18nService.t(\"encExportKeyWarningDesc\") +\n          \" \" +\n          this.i18nService.t(\"encExportAccountWarningDesc\"),\n        acceptButtonText: { key: \"exportVault\" },\n        type: SimpleDialogType.WARNING,\n      });\n    } else {\n      return await this.dialogService.openSimpleDialog({\n        title: { key: \"confirmVaultExport\" },\n        content: { key: \"exportWarningDesc\" },\n        acceptButtonText: { key: \"exportVault\" },\n        type: SimpleDialogType.WARNING,\n      });\n    }\n  }\n\n  protected saved() {\n    this.onSaved.emit();\n  }\n\n  protected getExportData() {\n    if (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    ) {\n      return this.exportService.getPasswordProtectedExport(this.filePassword);\n    } else {\n      return this.exportService.getExport(this.format, null);\n    }\n  }\n\n  protected getFileName(prefix?: string) {\n    let extension = this.format;\n    if (this.format === \"encrypted_json\") {\n      if (prefix == null) {\n        prefix = \"encrypted\";\n      } else {\n        prefix = \"encrypted_\" + prefix;\n      }\n      extension = \"json\";\n    }\n    return this.exportService.getFileName(prefix, extension);\n  }\n\n  protected async collectEvent(): Promise<void> {\n    await this.eventCollectionService.collect(EventType.User_ClientExportedVault);\n  }\n\n  get format() {\n    return this.exportForm.get(\"format\").value;\n  }\n\n  get filePassword() {\n    return this.exportForm.get(\"filePassword\").value;\n  }\n\n  get confirmFilePassword() {\n    return this.exportForm.get(\"confirmFilePassword\").value;\n  }\n\n  get fileEncryptionType() {\n    return this.exportForm.get(\"fileEncryptionType\").value;\n  }\n\n  adjustValidators() {\n    this.exportForm.get(\"confirmFilePassword\").reset();\n    this.exportForm.get(\"filePassword\").reset();\n\n    if (this.encryptedFormat && this.fileEncryptionType == EncryptedExportType.FileEncrypted) {\n      this.exportForm.controls.filePassword.enable();\n      this.exportForm.controls.confirmFilePassword.enable();\n    } else {\n      this.exportForm.controls.filePassword.disable();\n      this.exportForm.controls.confirmFilePassword.disable();\n    }\n  }\n\n  private downloadFile(csv: string): void {\n    const fileName = this.getFileName();\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: csv,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable tailwindcss/no-custom-classname -->\n<form\n  #form\n  (ngSubmit)=\"submit()\"\n  [appApiAction]=\"formPromise\"\n  [formGroup]=\"exportForm\"\n  *ngIf=\"exportForm\"\n>\n  <div class=\"page-header\">\n    <h1>{{ \"exportVault\" | i18n }}</h1>\n  </div>\n\n  <app-callout type=\"error\" title=\"{{ 'vaultExportDisabled' | i18n }}\" *ngIf=\"disabledByPolicy\">\n    {{ \"personalVaultExportPolicyInEffect\" | i18n }}\n  </app-callout>\n  <app-export-scope-callout\n    [organizationId]=\"organizationId\"\n    *ngIf=\"!disabledByPolicy\"\n  ></app-export-scope-callout>\n\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <bit-form-field>\n        <bit-label class=\"tw-text-lg\" for=\"format\">{{ \"fileFormat\" | i18n }}</bit-label>\n        <select bitInput name=\"format\" formControlName=\"format\">\n          <option *ngFor=\"let f of formatOptions\" [value]=\"f.value\">{{ f.name }}</option>\n        </select>\n      </bit-form-field>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"form-group col-6\">\n      <ng-container *ngIf=\"format === 'encrypted_json'\">\n        <div role=\"radiogroup\" aria-labelledby=\"exportTypeHeading\">\n          <label id=\"exportTypeHeading\" class=\"tw-semi-bold tw-text-lg\">\n            {{ \"exportTypeHeading\" | i18n }}\n          </label>\n\n          <div appBoxRow name=\"FileTypeOptions\" class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"AccountEncrypted\"\n                [value]=\"encryptedExportType.AccountEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.AccountEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"AccountEncrypted\">\n                {{ \"accountRestricted\" | i18n }}\n              </label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 pb-2 tw-text-sm\">\n            {{ \"accountRestrictedOptionDescription\" | i18n }}\n          </div>\n\n          <div class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"FileEncrypted\"\n                [value]=\"encryptedExportType.FileEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.FileEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"FileEncrypted\">{{\n                \"passwordProtected\" | i18n\n              }}</label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 tw-text-sm\">\n            {{ \"passwordProtectedOptionDescription\" | i18n }}\n          </div>\n        </div>\n        <br />\n\n        <ng-container *ngIf=\"fileEncryptionType == encryptedExportType.FileEncrypted\">\n          <bit-form-field>\n            <bit-label>{{ \"filePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"filePassword\"\n              formControlName=\"filePassword\"\n              name=\"password\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n            <bit-hint>{{ \"exportPasswordDescription\" | i18n }}</bit-hint>\n          </bit-form-field>\n          <bit-form-field>\n            <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"confirmFilePassword\"\n              formControlName=\"confirmFilePassword\"\n              name=\"confirmFilePassword\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n          </bit-form-field>\n        </ng-container>\n      </ng-container>\n\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary btn-submit\"\n        [disabled]=\"form.loading || disabledByPolicy\"\n        [ngClass]=\"{ manual: disabledByPolicy }\"\n      >\n        <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n        <span>{{ \"confirmFormat\" | i18n }}</span>\n      </button>\n    </div>\n  </div>\n</form>\n","import { Component } from \"@angular/core\";\nimport { UntypedFormBuilder } from \"@angular/forms\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { ExportComponent as BaseExportComponent } from \"@bitwarden/angular/tools/export/components/export.component\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { EncryptedExportType } from \"@bitwarden/common/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { VaultExportServiceAbstraction } from \"@bitwarden/exporter/vault-export\";\n\nimport { openUserVerificationPrompt } from \"../../auth/shared/components/user-verification\";\n\n@Component({\n  selector: \"app-export\",\n  templateUrl: \"export.component.html\",\n})\nexport class ExportComponent extends BaseExportComponent {\n  organizationId: string;\n  encryptedExportType = EncryptedExportType;\n  protected showFilePassword: boolean;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    platformUtilsService: PlatformUtilsService,\n    exportService: VaultExportServiceAbstraction,\n    eventCollectionService: EventCollectionService,\n    policyService: PolicyService,\n    logService: LogService,\n    userVerificationService: UserVerificationService,\n    formBuilder: UntypedFormBuilder,\n    fileDownloadService: FileDownloadService,\n    dialogService: DialogServiceAbstraction\n  ) {\n    super(\n      cryptoService,\n      i18nService,\n      platformUtilsService,\n      exportService,\n      eventCollectionService,\n      policyService,\n      window,\n      logService,\n      userVerificationService,\n      formBuilder,\n      fileDownloadService,\n      dialogService\n    );\n  }\n\n  async submit() {\n    if (this.isFileEncryptedExport && this.filePassword != this.confirmFilePassword) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"filePasswordAndConfirmFilePasswordDoNotMatch\")\n      );\n      return;\n    }\n\n    this.exportForm.markAllAsTouched();\n    if (!this.exportForm.valid) {\n      return;\n    }\n\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    this.doExport();\n  }\n\n  protected saved() {\n    super.saved();\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"exportSuccess\"));\n  }\n\n  private verifyUser() {\n    let confirmDescription = \"exportWarningDesc\";\n    if (this.isFileEncryptedExport) {\n      confirmDescription = \"fileEncryptedExportWarningDesc\";\n    } else if (this.isAccountEncryptedExport) {\n      confirmDescription = \"encExportKeyWarningDesc\";\n    }\n\n    const ref = openUserVerificationPrompt(this.dialogService, {\n      data: {\n        confirmDescription: confirmDescription,\n        confirmButtonText: \"exportVault\",\n        modalTitle: \"confirmVaultExport\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return firstValueFrom(ref.closed);\n  }\n\n  get isFileEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    );\n  }\n\n  get isAccountEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.AccountEncrypted\n    );\n  }\n}\n","<bit-dialog>\n  <span bitDialogTitle>\n    {{ \"importSuccess\" | i18n }}\n  </span>\n\n  <div bitDialogContent>\n    <span>{{ \"importSuccessNumberOfItems\" | i18n : this.data.ciphers.length }}</span>\n    <bit-table [dataSource]=\"dataSource\">\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"type\" | i18n }}</th>\n          <th bitCell>{{ \"total\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body let-rows$>\n        <tr bitRow *ngFor=\"let r of rows$ | async\">\n          <td bitCell>\n            <i class=\"bwi bwi-fw bwi-{{ r.icon }}\" aria-hidden=\"true\"></i>\n            {{ r.type | i18n }}\n          </td>\n          <td bitCell>{{ r.count }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </div>\n\n  <ng-container bitDialogFooter>\n    <button bitButton bitDialogClose buttonType=\"primary\" type=\"button\">\n      {{ \"ok\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { TableDataSource } from \"@bitwarden/components\";\nimport { ImportResult } from \"@bitwarden/importer\";\n\nexport interface ResultList {\n  icon: string;\n  type: string;\n  count: number;\n}\n\n@Component({\n  templateUrl: \"./import-success-dialog.component.html\",\n})\nexport class ImportSuccessDialogComponent implements OnInit {\n  protected dataSource = new TableDataSource<ResultList>();\n\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) public data: ImportResult) {}\n\n  ngOnInit(): void {\n    if (this.data != null) {\n      this.dataSource.data = this.buildResultList();\n    }\n  }\n\n  private buildResultList(): ResultList[] {\n    let logins = 0;\n    let cards = 0;\n    let identities = 0;\n    let secureNotes = 0;\n    this.data.ciphers.map((c) => {\n      switch (c.type) {\n        case CipherType.Login:\n          logins++;\n          break;\n        case CipherType.Card:\n          cards++;\n          break;\n        case CipherType.SecureNote:\n          secureNotes++;\n          break;\n        case CipherType.Identity:\n          identities++;\n          break;\n        default:\n          break;\n      }\n    });\n\n    const list: ResultList[] = [];\n    if (logins > 0) {\n      list.push({ icon: \"globe\", type: \"typeLogin\", count: logins });\n    }\n    if (cards > 0) {\n      list.push({ icon: \"credit-card\", type: \"typeCard\", count: cards });\n    }\n    if (identities > 0) {\n      list.push({ icon: \"id-card\", type: \"typeIdentity\", count: identities });\n    }\n    if (secureNotes > 0) {\n      list.push({ icon: \"sticky-note\", type: \"typeSecureNote\", count: secureNotes });\n    }\n    if (this.data.folders.length > 0) {\n      list.push({ icon: \"folder\", type: \"folders\", count: this.data.folders.length });\n    }\n    if (this.data.collections.length > 0) {\n      list.push({\n        icon: \"collection\",\n        type: \"collections\",\n        count: this.data.collections.length,\n      });\n    }\n    return list;\n  }\n}\n","import { DialogRef } from \"@angular/cdk/dialog\";\nimport { Component } from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\n\n@Component({\n  templateUrl: \"file-password-prompt.component.html\",\n})\nexport class FilePasswordPromptComponent {\n  filePassword = new FormControl(\"\", Validators.required);\n\n  constructor(public dialogRef: DialogRef) {}\n\n  submit() {\n    this.filePassword.markAsTouched();\n    if (!this.filePassword.valid) {\n      return;\n    }\n    this.dialogRef.close(this.filePassword.value);\n  }\n}\n","<form (submit)=\"submit()\">\n  <bit-dialog>\n    <span bitDialogTitle>\n      {{ \"confirmVaultImport\" | i18n }}\n    </span>\n\n    <div bitDialogContent>\n      {{ \"confirmVaultImportDesc\" | i18n }}\n      <bit-form-field class=\"tw-mt-6\">\n        <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n        <input\n          bitInput\n          type=\"password\"\n          name=\"filePassword\"\n          [formControl]=\"filePassword\"\n          appAutofocus\n          appInputVerbatim\n        />\n        <button type=\"button\" bitSuffix bitIconButton bitPasswordInputToggle></button>\n      </bit-form-field>\n    </div>\n\n    <ng-container bitDialogFooter>\n      <button bitButton buttonType=\"primary\" type=\"submit\">\n        <span>{{ \"importData\" | i18n }}</span>\n      </button>\n      <button bitButton bitDialogClose buttonType=\"secondary\" type=\"button\">\n        <span>{{ \"cancel\" | i18n }}</span>\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","<div class=\"page-header\">\n  <h1>{{ \"importData\" | i18n }}</h1>\n</div>\n<app-callout type=\"info\" *ngIf=\"importBlockedByPolicy\">\n  {{ \"personalOwnershipPolicyInEffectImports\" | i18n }}\n</app-callout>\n<form #form (ngSubmit)=\"submit()\" ngNativeValidate>\n  <bit-form-field class=\"tw-w-1/2\">\n    <bit-label for=\"type\">1. {{ \"selectFormat\" | i18n }}</bit-label>\n    <bit-select\n      id=\"type\"\n      name=\"Format\"\n      bitInput\n      [(ngModel)]=\"format\"\n      [disabled]=\"importBlockedByPolicy\"\n      required\n    >\n      <bit-option *ngFor=\"let o of featuredImportOptions\" [value]=\"o.id\" [label]=\"o.name\" />\n      <ng-container *ngIf=\"importOptions && importOptions.length\">\n        <bit-option value=\"-\" disabled />\n        <bit-option *ngFor=\"let o of importOptions\" [value]=\"o.id\" [label]=\"o.name\" />\n      </ng-container>\n    </bit-select>\n  </bit-form-field>\n  <app-callout type=\"info\" title=\"{{ getFormatInstructionTitle() }}\" *ngIf=\"format\">\n    <ng-container *ngIf=\"format === 'bitwardencsv' || format === 'bitwardenjson'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/export-your-data/\">\n        https://bitwarden.com/help/export-your-data/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'lastpasscsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-lastpass/\">\n        https://bitwarden.com/help/import-from-lastpass/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepassxcsv'\">\n      Using the KeePassX desktop application, navigate to \"Database\" &rarr; \"Export to CSV file\" and\n      save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'aviracsv'\">\n      In the Avira web vault, go to \"Settings\" &rarr; \"My Data\" &rarr; \"Export data\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blurcsv'\">\n      In the Blur web vault, click your username at the top and go to \"Settings\" &rarr; \"Export\n      Data\", then click \"Export CSV\" for your \"Accounts\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safeincloudxml'\">\n      Using the SaveInCloud desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As XML\"\n      and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'padlockcsv'\">\n      Using the Padlock desktop application, click the hamburger icon in the top left corner and\n      navigate to \"Settings\" &rarr; \"Export\" button and save the file \"As CSV\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepass2xml'\">\n      Using the KeePass 2 desktop application, navigate to \"File\" &rarr; \"Export\" and select the\n      \"KeePass XML (2.x)\" option.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'upmcsv'\">\n      Using the Universal Password Manager desktop application, navigate to \"Database\" &rarr;\n      \"Export\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'saferpasscsv'\">\n      Using the SaferPass browser extension, click the hamburger icon in the top left corner and\n      navigate to \"Settings\". Click the \"Export accounts\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'meldiumcsv'\">\n      Using the Meldium web vault, navigate to \"Settings\". Locate the \"Export data\" function and\n      click \"Show me my data\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepercsv'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .csv File\" option. Click\n      \"Export\" to save the CSV file.\n    </ng-container>\n    <!--\n    <ng-container *ngIf=\"format === 'keeperjson'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .json File\" option. Click\n      \"Export\" to save the JSON file.\n    </ng-container>\n    -->\n    <ng-container\n      *ngIf=\"format === 'chromecsv' || format === 'operacsv' || format === 'vivaldicsv'\"\n    >\n      <span *ngIf=\"format !== 'chromecsv'\">\n        The process is exactly the same as importing from Google Chrome.\n      </span>\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-chrome/\">\n        https://bitwarden.com/help/import-from-chrome/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'firefoxcsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-firefox/\">\n        https://bitwarden.com/help/import-from-firefox/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safaricsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-safari/\">\n        https://bitwarden.com/help/import-from-safari/</a\n      >.\n    </ng-container>\n    <ng-container\n      *ngIf=\"\n        format === '1password1pux' ||\n        format === '1password1pif' ||\n        format === '1passwordwincsv' ||\n        format === '1passwordmaccsv'\n      \"\n    >\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-1password/\">\n        https://bitwarden.com/help/import-from-1password/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passworddragonxml'\">\n      Using the Password Dragon desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"To\n      XML\". In the dialog that pops up select \"All Rows\" and check all fields. Click the \"Export\"\n      button and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpasscsv'\">\n      Using the Enpass desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As CSV\".\n      Select \"OK\" to the warning alert and save the CSV file. Note that the importer only supports\n      files exported while Enpass is set to the English language, so adjust your settings\n      accordingly.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpassjson'\">\n      Using the Enpass 6 desktop application, click the menu button and navigate to \"File\" &rarr;\n      \"Export\". Select the \".json\" file format option and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'pwsafexml'\">\n      Using the Password Safe desktop application, navigate to \"File\" &rarr; \"Export To\" &rarr; \"XML\n      format...\" and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanecsv'\">\n      Log in to Dashlane, click on \"My Account\" &rarr; \"Settings\" &rarr; \"Export file\" and select\n      \"Export as a CSV file\". This will download a zip archive containing various CSV files. Unzip\n      the archive and import each CSV file individually.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanejson'\">\n      Dashlane no longer supports the JSON format. Only use this if you have an existing JSON for\n      import. Use the CSV importer when creating new exports.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'msecurecsv'\">\n      Using the mSecure desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"CSV File...\"\n      and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'stickypasswordxml'\">\n      Using the Sticky Password desktop application, navigate to \"Menu\" (top right) &rarr; \"Export\"\n      &rarr; \"Export all\". Select the unencrypted format XML option and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'truekeycsv'\">\n      Using the True Key desktop application, click the gear icon (top right) and then navigate to\n      \"App Settings\". Click the \"Export\" button, enter your password and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'clipperzhtml'\">\n      Log into the Clipperz web application (clipperz.is/app). Click the hamburger menu icon in the\n      top right to expand the navigation bar. Navigate to \"Data\" &rarr; \"Export\". Click the\n      \"download HTML+JSON\" button to save the HTML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'roboformcsv'\">\n      Using the RoboForm Editor desktop application, navigate to \"RoboForm\" (top left) &rarr;\n      \"Options\" &rarr; \"Account &amp; Data\" and click the \"Export\" button. Select all of your data,\n      change the \"Format\" to \"CSV file\" and then click the \"Export\" button to save the CSV file.\n      Note: RoboForm only allows you to export Logins. Other items will not be exported.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passboltcsv'\">\n      Log into the Passbolt web vault and navigate to the \"Passwords\" listing. Select all of the\n      passwords you would like to export and click the \"Export\" button at the top of the listing.\n      Choose the \"csv (lastpass)\" export format and click the \"Export\" button.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'ascendocsv'\">\n      Using the Ascendo DataVault desktop application, navigate to \"Tools\" &rarr; \"Export\". In the\n      dialog that pops up, select the \"All Items (DVX, CSV)\" option. Click the \"Ok\" button to save\n      the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordbossjson'\">\n      Using the Password Boss desktop application, navigate to \"File\" &rarr; \"Export data\" &rarr;\n      \"Password Boss JSON - not encrypted\" and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'zohovaultcsv'\">\n      Log into the Zoho web vault (vault.zoho.com). Navigate to \"Tools\" &rarr; \"Export Secrets\".\n      Select \"All Secrets\" and click the \"Zoho Vault Format CSV\" button. Highlight and copy the data\n      from the textarea. Open a text editor like Notepad and paste the data. Save the data from the\n      text editor as\n      <code>zoho_export.csv</code>.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'splashidcsv'\">\n      Using the SplashID Safe desktop application, click on the SplashID blue lock logo in the top\n      right corner. Navigate to \"Export\" &rarr; \"Export as CSV\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkeepcsv'\">\n      Using the PassKeep mobile app, navigate to \"Backup/Restore\". Locate the \"CSV Backup/Restore\"\n      section and click \"Backup to CSV\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'gnomejson'\">\n      Make sure you have python-keyring and python-gnomekeyring installed. Save the\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bit.ly/2GpOMTg\"\n        >GNOME Keyring Import/Export</a\n      >\n      python script to your desktop as <code>pw_helper.py</code>. Open terminal and run\n      <code>chmod +rx Desktop/pw_helper.py</code> and then\n      <code>python Desktop/pw_helper.py export Desktop/my_passwords.json</code>. Then upload the\n      resulting <code>my_passwords.json</code> file here to Bitwarden.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordagentcsv'\">\n      Using the Password Agent desktop application navigate to \"File\" &rarr; \"Export\", select the\n      \"Fields to export\" button and check all of the fields, change the \"Output format\" to \"CSV\",\n      and then click the \"Start\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passpackcsv'\">\n      Log into the Passpack website vault and navigate to \"Settings\" &rarr; \"Export\", then click the\n      \"Download\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passmanjson'\">\n      Open your Passman vault and click on \"Settings\" in the bottom left corner. In the \"Settings\"\n      window switch to the \"Export credentials\" tab and choose \"JSON\" as the export type. Enter your\n      vault's passphrase and click the \"Export\" button to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastcsv'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to CSV file\" option to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastjson'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to JSON file\" option to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'fsecurefsk'\">\n      Open the F-Secure KEY desktop application and navigate to \"Settings\" &rarr; \"Export\n      Passwords\". Select the \"Export\" button, enter your master password, and save the FSK file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'kasperskytxt'\">\n      Open the Kaspersky Password Manager desktop application and navigate to \"Settings\" &rarr;\n      \"Import/Export\". Locate the \"Export to text file\" section and select the \"Export\" button to\n      save the TXT file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'remembearcsv'\">\n      Open the RememBear desktop application and navigate to \"Settings\" &rarr; \"Account\" &rarr;\n      \"Export\". Enter your master password and select the \"Export Anyway\" button to save the CSV\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordwallettxt'\">\n      Open the PasswordWallet desktop application and navigate to \"File\" &rarr; \"Export\" &rarr;\n      \"Visible entries to text file\". Enter your password and select the \"Ok\" button to save the TXT\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'mykicsv'\">\n      Open the Myki desktop browser extension and navigate to \"Advanced\" &rarr; \"Export Accounts\"\n      and then scan the QR code with your mobile device. Various CSV files will then be saved to\n      your computer's downloads folder.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'securesafecsv'\">\n      Export your SecureSafe password safe to a CSV file with a comma delimiter.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'logmeoncecsv'\">\n      Open the LogMeOnce browser extension, then navigate to \"Open Menu\" &rarr; \"Export To\" and\n      select \"CSV File\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blackberrycsv'\">\n      Open the BlackBerry Password Keeper application, then navigate to \"Settings\" &rarr;\n      \"Import/Export\". Select \"Export Passwords\" and follow the instructions on screen to save the\n      unencrypted CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'buttercupcsv'\">\n      Open the Buttercup desktop application and unlock your vault. Right click on your vault's icon\n      and select \"Export\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'codebookcsv'\">\n      Open the Codebook desktop application and log in. Navigate to \"File\" &rarr; \"Export all\", then\n      click \"Yes\" on the dialog and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'encryptrcsv'\">\n      Open the newest version of the Encryptr desktop application and allow all of your data to\n      sync. Once syncing of your data is complete, the download icon in the top right corner will\n      turn pink. Click the download icon and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'yoticsv'\">\n      From the Yoti browser extension, click on \"Settings\", then \"Export Saved Logins\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'psonojson'\">\n      Log in to the Psono web vault, click on the \"Signed in as\"-dropdown, select \"Others\". Go to\n      the \"Export\"-tab and select the json type export and then click on Export.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkyjson'\">\n      Log in to \"https://vault.passky.org\" &rarr; \"Import & Export\" &rarr; \"Export\" in the Passky\n      section. (\"Backup\" is unsupported as it is encrypted).\n    </ng-container>\n  </app-callout>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"form-group\">\n        <label for=\"file\">2. {{ \"selectImportFile\" | i18n }}</label>\n        <br />\n        <div class=\"file-selector\">\n          <button\n            type=\"button\"\n            class=\"btn btn-outline-primary\"\n            (click)=\"fileSelector.click()\"\n            [disabled]=\"importBlockedByPolicy\"\n          >\n            {{ \"chooseFile\" | i18n }}\n          </button>\n          {{ this.fileSelected ? this.fileSelected.name : (\"noFileChosen\" | i18n) }}\n        </div>\n        <input\n          #fileSelector\n          type=\"file\"\n          id=\"file\"\n          class=\"form-control-file\"\n          name=\"file\"\n          (change)=\"setSelectedFile($event)\"\n          hidden\n          [disabled]=\"importBlockedByPolicy\"\n        />\n      </div>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"fileContents\">{{ \"orCopyPasteFileContents\" | i18n }}</label>\n    <textarea\n      id=\"fileContents\"\n      class=\"form-control\"\n      name=\"FileContents\"\n      [(ngModel)]=\"fileContents\"\n      [disabled]=\"importBlockedByPolicy\"\n    ></textarea>\n  </div>\n  <button\n    type=\"submit\"\n    class=\"btn btn-primary btn-submit\"\n    [disabled]=\"loading || importBlockedByPolicy\"\n    [ngClass]=\"{ manual: importBlockedByPolicy }\"\n  >\n    <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n    <span>{{ \"importData\" | i18n }}</span>\n  </button>\n</form>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport * as JSZip from \"jszip\";\nimport { Subject, lastValueFrom } from \"rxjs\";\nimport { takeUntil } from \"rxjs/operators\";\nimport Swal, { SweetAlertIcon } from \"sweetalert2\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport {\n  ImportOption,\n  ImportResult,\n  ImportServiceAbstraction,\n  ImportType,\n} from \"@bitwarden/importer\";\n\nimport { FilePasswordPromptComponent, ImportSuccessDialogComponent } from \"./dialog\";\n\n@Component({\n  selector: \"app-import\",\n  templateUrl: \"import.component.html\",\n})\nexport class ImportComponent implements OnInit, OnDestroy {\n  featuredImportOptions: ImportOption[];\n  importOptions: ImportOption[];\n  format: ImportType = null;\n  fileContents: string;\n  fileSelected: File;\n  loading = false;\n\n  protected organizationId: string = null;\n  protected destroy$ = new Subject<void>();\n\n  private _importBlockedByPolicy = false;\n\n  constructor(\n    protected i18nService: I18nService,\n    protected importService: ImportServiceAbstraction,\n    protected router: Router,\n    protected platformUtilsService: PlatformUtilsService,\n    protected policyService: PolicyService,\n    private logService: LogService,\n    protected modalService: ModalService,\n    protected syncService: SyncService,\n    protected dialogService: DialogServiceAbstraction\n  ) {}\n\n  protected get importBlockedByPolicy(): boolean {\n    return this._importBlockedByPolicy;\n  }\n\n  /**\n   * Callback that is called after a successful import.\n   */\n  protected async onSuccessfulImport(): Promise<void> {\n    await this.router.navigate([\"vault\"]);\n  }\n\n  ngOnInit() {\n    this.setImportOptions();\n\n    this.policyService\n      .policyAppliesToActiveUser$(PolicyType.PersonalOwnership)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((policyAppliesToActiveUser) => {\n        this._importBlockedByPolicy = policyAppliesToActiveUser;\n      });\n  }\n\n  async submit() {\n    if (this.importBlockedByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalOwnershipPolicyInEffectImports\")\n      );\n      return;\n    }\n\n    this.loading = true;\n\n    const promptForPassword_callback = async () => {\n      return await this.getFilePassword();\n    };\n\n    const importer = this.importService.getImporter(\n      this.format,\n      promptForPassword_callback,\n      this.organizationId\n    );\n    if (importer === null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFormat\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    const fileEl = document.getElementById(\"file\") as HTMLInputElement;\n    const files = fileEl.files;\n    if (\n      (files == null || files.length === 0) &&\n      (this.fileContents == null || this.fileContents === \"\")\n    ) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    let fileContents = this.fileContents;\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    try {\n      const result = await this.importService.import(importer, fileContents, this.organizationId);\n\n      //No errors, display success message\n      this.dialogService.open<unknown, ImportResult>(ImportSuccessDialogComponent, {\n        data: result,\n      });\n\n      this.syncService.fullSync(true);\n      await this.onSuccessfulImport();\n    } catch (e) {\n      this.error(e);\n      this.logService.error(e);\n    }\n\n    this.loading = false;\n  }\n\n  getFormatInstructionTitle() {\n    if (this.format == null) {\n      return null;\n    }\n\n    const results = this.featuredImportOptions\n      .concat(this.importOptions)\n      .filter((o) => o.id === this.format);\n    if (results.length > 0) {\n      return this.i18nService.t(\"instructionsFor\", results[0].name);\n    }\n    return null;\n  }\n\n  protected setImportOptions() {\n    this.featuredImportOptions = [\n      {\n        id: null,\n        name: \"-- \" + this.i18nService.t(\"select\") + \" --\",\n      },\n      ...this.importService.featuredImportOptions,\n    ];\n    this.importOptions = [...this.importService.regularImportOptions].sort((a, b) => {\n      if (a.name == null && b.name != null) {\n        return -1;\n      }\n      if (a.name != null && b.name == null) {\n        return 1;\n      }\n      if (a.name == null && b.name == null) {\n        return 0;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(a.name, b.name)\n        : a.name.localeCompare(b.name);\n    });\n  }\n\n  setSelectedFile(event: Event) {\n    const fileInputEl = <HTMLInputElement>event.target;\n    this.fileSelected = fileInputEl.files.length > 0 ? fileInputEl.files[0] : null;\n  }\n\n  private async error(error: Error) {\n    await Swal.fire({\n      heightAuto: false,\n      buttonsStyling: false,\n      icon: \"error\" as SweetAlertIcon,\n      iconHtml: `<i class=\"swal-custom-icon bwi bwi-error text-danger\"></i>`,\n      input: \"textarea\",\n      inputValue: error.message,\n      inputAttributes: {\n        readonly: \"true\",\n      },\n      titleText: this.i18nService.t(\"importError\"),\n      text: this.i18nService.t(\"importErrorDesc\"),\n      showConfirmButton: true,\n      confirmButtonText: this.i18nService.t(\"ok\"),\n      onOpen: (popupEl) => {\n        popupEl.querySelector(\".swal2-textarea\").scrollTo(0, 0);\n      },\n    });\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    if (this.format === \"1password1pux\") {\n      return this.extract1PuxContent(file);\n    }\n\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        if (this.format === \"lastpasscsv\" && file.type === \"text/html\") {\n          const parser = new DOMParser();\n          const doc = parser.parseFromString((evt.target as any).result, \"text/html\");\n          const pre = doc.querySelector(\"pre\");\n          if (pre != null) {\n            resolve(pre.textContent);\n            return;\n          }\n          reject();\n          return;\n        }\n\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private extract1PuxContent(file: File): Promise<string> {\n    return new JSZip()\n      .loadAsync(file)\n      .then((zip) => {\n        return zip.file(\"export.data\").async(\"string\");\n      })\n      .then(\n        function success(content) {\n          return content;\n        },\n        function error(e) {\n          return \"\";\n        }\n      );\n  }\n\n  async getFilePassword(): Promise<string> {\n    const dialog = this.dialogService.open<string>(FilePasswordPromptComponent, {\n      ariaModal: true,\n    });\n\n    return await lastValueFrom(dialog.closed);\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from \"@angular/core\";\n\n@Directive({\n  selector: \"[appBoxRow]\",\n})\nexport class BoxRowDirective implements OnInit {\n  el: HTMLElement = null;\n  formEls: Element[];\n\n  constructor(elRef: ElementRef) {\n    this.el = elRef.nativeElement;\n  }\n\n  ngOnInit(): void {\n    this.formEls = Array.from(\n      this.el.querySelectorAll('input:not([type=\"hidden\"]), select, textarea')\n    );\n    this.formEls.forEach((formEl) => {\n      formEl.addEventListener(\n        \"focus\",\n        () => {\n          this.el.classList.add(\"active\");\n        },\n        false\n      );\n\n      formEl.addEventListener(\n        \"blur\",\n        () => {\n          this.el.classList.remove(\"active\");\n        },\n        false\n      );\n    });\n  }\n\n  @HostListener(\"click\", [\"$event\"]) onClick(event: Event) {\n    const target = event.target as HTMLElement;\n    if (\n      target !== this.el &&\n      !target.classList.contains(\"progress\") &&\n      !target.classList.contains(\"progress-bar\")\n    ) {\n      return;\n    }\n\n    if (this.formEls.length > 0) {\n      const formEl = this.formEls[0] as HTMLElement;\n      if (formEl.tagName.toLowerCase() === \"input\") {\n        const inputEl = formEl as HTMLInputElement;\n        if (inputEl.type != null && inputEl.type.toLowerCase() === \"checkbox\") {\n          inputEl.click();\n          return;\n        }\n      }\n      formEl.focus();\n    }\n  }\n}\n","<ng-container *ngIf=\"show\">\n  <app-callout type=\"info\" title=\"{{ scopeConfig.title | i18n }}\">\n    {{ scopeConfig.description | i18n : scopeConfig.scopeIdentifier }}\n  </app-callout>\n</ng-container>\n","import { Component, Input, OnInit } from \"@angular/core\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\n\n@Component({\n  selector: \"app-export-scope-callout\",\n  templateUrl: \"export-scope-callout.component.html\",\n})\nexport class ExportScopeCalloutComponent implements OnInit {\n  @Input() organizationId: string = null;\n\n  show = false;\n  scopeConfig: {\n    title: string;\n    description: string;\n    scopeIdentifier: string;\n  };\n\n  constructor(\n    protected organizationService: OrganizationService,\n    protected stateService: StateService\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    if (!this.organizationService.hasOrganizations()) {\n      return;\n    }\n    this.scopeConfig =\n      this.organizationId != null\n        ? {\n            title: \"exportingOrganizationVaultTitle\",\n            description: \"exportingOrganizationVaultDescription\",\n            scopeIdentifier: this.organizationService.get(this.organizationId).name,\n          }\n        : {\n            title: \"exportingPersonalVaultTitle\",\n            description: \"exportingPersonalVaultDescription\",\n            scopeIdentifier: await this.stateService.getEmail(),\n          };\n    this.show = true;\n  }\n}\n","import { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nexport abstract class ImportApiServiceAbstraction {\n  postImportCiphers: (request: ImportCiphersRequest) => Promise<any>;\n  postImportOrganizationCiphers: (\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ) => Promise<any>;\n}\n","import { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nimport { ImportApiServiceAbstraction } from \"./import-api.service.abstraction\";\n\nexport class ImportApiService implements ImportApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  async postImportCiphers(request: ImportCiphersRequest): Promise<any> {\n    return await this.apiService.send(\"POST\", \"/ciphers/import\", request, true, false);\n  }\n\n  async postImportOrganizationCiphers(\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ): Promise<any> {\n    return await this.apiService.send(\n      \"POST\",\n      \"/ciphers/import-organization?organizationId=\" + organizationId,\n      request,\n      true,\n      false\n    );\n  }\n}\n","import { Importer } from \"../importers/importer\";\nimport { ImportOption, ImportType } from \"../models/import-options\";\nimport { ImportResult } from \"../models/import-result\";\n\nexport abstract class ImportServiceAbstraction {\n  featuredImportOptions: readonly ImportOption[];\n  regularImportOptions: readonly ImportOption[];\n  getImportOptions: () => ImportOption[];\n  import: (\n    importer: Importer,\n    fileContents: string,\n    organizationId?: string\n  ) => Promise<ImportResult>;\n  getImporter: (\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>,\n    organizationId: string\n  ) => Importer;\n}\n","import { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { FolderWithIdRequest } from \"../../vault/models/request/folder-with-id.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  folders: FolderWithIdRequest[] = [];\n  folderRelationships: KvpRequest<number, number>[] = [];\n}\n","import { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { CollectionWithIdRequest } from \"../../vault/models/request/collection-with-id.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportOrganizationCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  collections: CollectionWithIdRequest[] = [];\n  collectionRelationships: KvpRequest<number, number>[] = [];\n}\n","export class KvpRequest<TK, TV> {\n  key: TK;\n  value: TV;\n\n  constructor(key: TK, value: TV) {\n    this.key = key;\n    this.value = value;\n  }\n}\n","import { Collection } from \"../domain/collection\";\n\nimport { CollectionRequest } from \"./collection.request\";\n\nexport class CollectionWithIdRequest extends CollectionRequest {\n  id: string;\n\n  constructor(collection?: Collection) {\n    if (collection == null) {\n      return;\n    }\n    super(collection);\n    this.id = collection.id;\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nexport class ImportResult {\n  success = false;\n  errorMessage: string;\n  ciphers: CipherView[] = [];\n  folders: FolderView[] = [];\n  folderRelationships: [number, number][] = [];\n  collections: CollectionView[] = [];\n  collectionRelationships: [number, number][] = [];\n}\n","import * as papa from \"papaparse\";\n\nimport { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { ConsoleLogService } from \"@bitwarden/common/platform/services/console-log.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { LoginUriView } from \"@bitwarden/common/vault/models/view/login-uri.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nexport abstract class BaseImporter {\n  organizationId: string = null;\n\n  protected logService: LogService = new ConsoleLogService(false);\n\n  protected newLineRegex = /(?:\\r\\n|\\r|\\n)/;\n\n  protected passwordFieldNames = [\n    \"password\",\n    \"pass word\",\n    \"passphrase\",\n    \"pass phrase\",\n    \"pass\",\n    \"code\",\n    \"code word\",\n    \"codeword\",\n    \"secret\",\n    \"secret word\",\n    \"personpwd\",\n    \"key\",\n    \"keyword\",\n    \"key word\",\n    \"keyphrase\",\n    \"key phrase\",\n    \"form_pw\",\n    \"wppassword\",\n    \"pin\",\n    \"pwd\",\n    \"pw\",\n    \"pword\",\n    \"passwd\",\n    \"p\",\n    \"serial\",\n    \"serial#\",\n    \"license key\",\n    \"reg #\",\n\n    // Non-English names\n    \"passwort\",\n  ];\n\n  protected usernameFieldNames = [\n    \"user\",\n    \"name\",\n    \"user name\",\n    \"username\",\n    \"login name\",\n    \"email\",\n    \"e-mail\",\n    \"id\",\n    \"userid\",\n    \"user id\",\n    \"login\",\n    \"form_loginname\",\n    \"wpname\",\n    \"mail\",\n    \"loginid\",\n    \"login id\",\n    \"log\",\n    \"personlogin\",\n    \"first name\",\n    \"last name\",\n    \"card#\",\n    \"account #\",\n    \"member\",\n    \"member #\",\n\n    // Non-English names\n    \"nom\",\n    \"benutzername\",\n  ];\n\n  protected notesFieldNames = [\n    \"note\",\n    \"notes\",\n    \"comment\",\n    \"comments\",\n    \"memo\",\n    \"description\",\n    \"free form\",\n    \"freeform\",\n    \"free text\",\n    \"freetext\",\n    \"free\",\n\n    // Non-English names\n    \"kommentar\",\n  ];\n\n  protected uriFieldNames: string[] = [\n    \"url\",\n    \"hyper link\",\n    \"hyperlink\",\n    \"link\",\n    \"host\",\n    \"hostname\",\n    \"host name\",\n    \"server\",\n    \"address\",\n    \"hyper ref\",\n    \"href\",\n    \"web\",\n    \"website\",\n    \"web site\",\n    \"site\",\n    \"web-site\",\n    \"uri\",\n\n    // Non-English names\n    \"ort\",\n    \"adresse\",\n  ];\n\n  protected parseCsvOptions = {\n    encoding: \"UTF-8\",\n    skipEmptyLines: false,\n  };\n\n  protected get organization() {\n    return this.organizationId != null;\n  }\n\n  protected parseXml(data: string): Document {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(data, \"application/xml\");\n    return doc != null && doc.querySelector(\"parsererror\") == null ? doc : null;\n  }\n\n  protected parseCsv(data: string, header: boolean, options: any = {}): any[] {\n    const parseOptions: papa.ParseConfig<string> = Object.assign(\n      { header: header },\n      this.parseCsvOptions,\n      options\n    );\n    data = this.splitNewLine(data).join(\"\\n\").trim();\n    const result = papa.parse(data, parseOptions);\n    if (result.errors != null && result.errors.length > 0) {\n      result.errors.forEach((e) => {\n        if (e.row != null) {\n          this.logService.warning(\"Error parsing row \" + e.row + \": \" + e.message);\n        }\n      });\n    }\n    return result.data && result.data.length > 0 ? result.data : null;\n  }\n\n  protected parseSingleRowCsv(rowData: string) {\n    if (this.isNullOrWhitespace(rowData)) {\n      return null;\n    }\n    const parsedRow = this.parseCsv(rowData, false);\n    if (parsedRow != null && parsedRow.length > 0 && parsedRow[0].length > 0) {\n      return parsedRow[0];\n    }\n    return null;\n  }\n\n  protected makeUriArray(uri: string | string[]): LoginUriView[] {\n    if (uri == null) {\n      return null;\n    }\n\n    if (typeof uri === \"string\") {\n      const loginUri = new LoginUriView();\n      loginUri.uri = this.fixUri(uri);\n      if (this.isNullOrWhitespace(loginUri.uri)) {\n        return null;\n      }\n      loginUri.match = null;\n      return [loginUri];\n    }\n\n    if (uri.length > 0) {\n      const returnArr: LoginUriView[] = [];\n      uri.forEach((u) => {\n        const loginUri = new LoginUriView();\n        loginUri.uri = this.fixUri(u);\n        if (this.isNullOrWhitespace(loginUri.uri)) {\n          return;\n        }\n        loginUri.match = null;\n        returnArr.push(loginUri);\n      });\n      return returnArr.length === 0 ? null : returnArr;\n    }\n\n    return null;\n  }\n\n  protected fixUri(uri: string) {\n    if (uri == null) {\n      return null;\n    }\n    uri = uri.trim();\n    if (uri.indexOf(\"://\") === -1 && uri.indexOf(\".\") >= 0) {\n      uri = \"http://\" + uri;\n    }\n    if (uri.length > 1000) {\n      return uri.substring(0, 1000);\n    }\n    return uri;\n  }\n\n  protected nameFromUrl(url: string) {\n    const hostname = Utils.getHostname(url);\n    if (this.isNullOrWhitespace(hostname)) {\n      return null;\n    }\n    return hostname.startsWith(\"www.\") ? hostname.replace(\"www.\", \"\") : hostname;\n  }\n\n  protected isNullOrWhitespace(str: string): boolean {\n    return Utils.isNullOrWhitespace(str);\n  }\n\n  protected getValueOrDefault(str: string, defaultValue: string = null): string {\n    if (this.isNullOrWhitespace(str)) {\n      return defaultValue;\n    }\n    return str;\n  }\n\n  protected splitNewLine(str: string): string[] {\n    return str.split(this.newLineRegex);\n  }\n\n  protected setCardExpiration(cipher: CipherView, expiration: string): boolean {\n    if (this.isNullOrWhitespace(expiration)) {\n      return false;\n    }\n\n    expiration = expiration.replace(/\\s/g, \"\");\n\n    const monthRegex = \"0?(?<month>[1-9]|1[0-2])\";\n    const yearRegex = \"(?<year>(?:[1-2][0-9])?[0-9]{2})\";\n    const expiryRegex = new RegExp(`^${monthRegex}/${yearRegex}$`);\n\n    const expiryMatch = expiration.match(expiryRegex);\n\n    if (!expiryMatch) {\n      return false;\n    }\n\n    cipher.card.expMonth = expiryMatch.groups.month;\n    const year: string = expiryMatch.groups.year;\n    cipher.card.expYear = year.length === 2 ? \"20\" + year : year;\n    return true;\n  }\n\n  protected moveFoldersToCollections(result: ImportResult) {\n    result.folderRelationships.forEach((r) => result.collectionRelationships.push(r));\n    result.collections = result.folders.map((f) => {\n      const collection = new CollectionView();\n      collection.name = f.name;\n      collection.id = f.id;\n      return collection;\n    });\n    result.folderRelationships = [];\n    result.folders = [];\n  }\n\n  protected querySelectorDirectChild(parentEl: Element, query: string) {\n    const els = this.querySelectorAllDirectChild(parentEl, query);\n    return els.length === 0 ? null : els[0];\n  }\n\n  protected querySelectorAllDirectChild(parentEl: Element, query: string) {\n    return Array.from(parentEl.querySelectorAll(query)).filter((el) => el.parentNode === parentEl);\n  }\n\n  protected initLoginCipher() {\n    const cipher = new CipherView();\n    cipher.favorite = false;\n    cipher.notes = \"\";\n    cipher.fields = [];\n    cipher.login = new LoginView();\n    cipher.type = CipherType.Login;\n    return cipher;\n  }\n\n  protected cleanupCipher(cipher: CipherView) {\n    if (cipher == null) {\n      return;\n    }\n    if (cipher.type !== CipherType.Login) {\n      cipher.login = null;\n    }\n    if (this.isNullOrWhitespace(cipher.name)) {\n      cipher.name = \"--\";\n    }\n    if (this.isNullOrWhitespace(cipher.notes)) {\n      cipher.notes = null;\n    } else {\n      cipher.notes = cipher.notes.trim();\n    }\n    if (cipher.fields != null && cipher.fields.length === 0) {\n      cipher.fields = null;\n    }\n  }\n\n  protected processKvp(\n    cipher: CipherView,\n    key: string,\n    value: string,\n    type: FieldType = FieldType.Text\n  ) {\n    if (this.isNullOrWhitespace(value)) {\n      return;\n    }\n    if (this.isNullOrWhitespace(key)) {\n      key = \"\";\n    }\n    if (value.length > 200 || value.trim().search(this.newLineRegex) > -1) {\n      if (cipher.notes == null) {\n        cipher.notes = \"\";\n      }\n      cipher.notes += key + \": \" + this.splitNewLine(value).join(\"\\n\") + \"\\n\";\n    } else {\n      if (cipher.fields == null) {\n        cipher.fields = [];\n      }\n      const field = new FieldView();\n      field.type = type;\n      field.name = key;\n      field.value = value;\n      cipher.fields.push(field);\n    }\n  }\n\n  protected processFolder(result: ImportResult, folderName: string) {\n    if (this.isNullOrWhitespace(folderName)) {\n      return;\n    }\n\n    let folderIndex = result.folders.length;\n    // Replace backslashes with forward slashes, ensuring we create sub-folders\n    folderName = folderName.replace(\"\\\\\", \"/\");\n    let addFolder = true;\n\n    for (let i = 0; i < result.folders.length; i++) {\n      if (result.folders[i].name === folderName) {\n        addFolder = false;\n        folderIndex = i;\n        break;\n      }\n    }\n\n    if (addFolder) {\n      const f = new FolderView();\n      f.name = folderName;\n      result.folders.push(f);\n    }\n\n    result.folderRelationships.push([result.ciphers.length, folderIndex]);\n  }\n\n  protected convertToNoteIfNeeded(cipher: CipherView) {\n    if (\n      cipher.type === CipherType.Login &&\n      this.isNullOrWhitespace(cipher.login.username) &&\n      this.isNullOrWhitespace(cipher.login.password) &&\n      (cipher.login.uris == null || cipher.login.uris.length === 0)\n    ) {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    }\n  }\n\n  protected processFullName(cipher: CipherView, fullName: string) {\n    if (this.isNullOrWhitespace(fullName)) {\n      return;\n    }\n\n    const nameParts = fullName.split(\" \");\n    if (nameParts.length > 0) {\n      cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n    }\n    if (nameParts.length === 2) {\n      cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n    } else if (nameParts.length >= 3) {\n      cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n      cipher.identity.lastName = nameParts.slice(2, nameParts.length).join(\" \");\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AscendoCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 2) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const val: string = value[i + 2];\n          const field: string = value[i + 1];\n          if (this.isNullOrWhitespace(val) || this.isNullOrWhitespace(field)) {\n            continue;\n          }\n\n          const fieldLower = field.toLowerCase();\n          if (cipher.login.password == null && this.passwordFieldNames.indexOf(fieldLower) > -1) {\n            cipher.login.password = this.getValueOrDefault(val);\n          } else if (\n            cipher.login.username == null &&\n            this.usernameFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.username = this.getValueOrDefault(val);\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n          } else {\n            this.processKvp(cipher, field, val);\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.login.uris = this.makeUriArray(value.web);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.username = this.getValueOrDefault(value.login);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.logins != null) {\n      results.logins.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.pwd);\n        cipher.login.username = this.getValueOrDefault(value.loginName);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.notes != null) {\n      results.notes.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.name = this.getValueOrDefault(value.label);\n        cipher.notes = this.getValueOrDefault(value.text);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.cards != null) {\n      results.cards.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Card;\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.card.cardholderName = this.getValueOrDefault(value.holderName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        if (value.expirationDate != null) {\n          if (value.expirationDate.month != null) {\n            cipher.card.expMonth = value.expirationDate.month + \"\";\n          }\n          if (value.expirationDate.year != null) {\n            cipher.card.expYear = value.expirationDate.year + \"\";\n          }\n        }\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AviraCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.name,\n        this.getValueOrDefault(this.nameFromUrl(value.website), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.website);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (\n        this.isNullOrWhitespace(value.username) &&\n        !this.isNullOrWhitespace(value.secondary_username)\n      ) {\n        cipher.login.username = value.secondary_username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.notes = this.getValueOrDefault(value.secondary_username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlackBerryCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.grouping === \"list\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.favorite = value.fav === \"1\";\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.extra);\n      if (value.grouping !== \"note\") {\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ChromeCsvImporter extends BaseImporter implements Importer {\n  private androidPatternRegex = new RegExp(\"^android:\\\\/\\\\/.*(?<=@)(.*)(?=\\\\/)\");\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      let name = value.name;\n      if (!name && this.androidPatternRegex.test(value.url)) {\n        name = value.url.match(this.androidPatternRegex)[1];\n      }\n      cipher.name = this.getValueOrDefault(name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.organization && !this.isNullOrWhitespace(value.collections)) {\n        const collections = (value.collections as string).split(\",\");\n        collections.forEach((col) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === col) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = col;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization) {\n        this.processFolder(result, value.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.favorite =\n        !this.organization && this.getValueOrDefault(value.favorite, \"0\") !== \"0\" ? true : false;\n      cipher.type = CipherType.Login;\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      try {\n        cipher.reprompt = parseInt(\n          this.getValueOrDefault(value.reprompt, CipherRepromptType.None.toString()),\n          10\n        );\n      } catch (e) {\n        // eslint-disable-next-line\n        console.error(\"Unable to parse reprompt value\", e);\n        cipher.reprompt = CipherRepromptType.None;\n      }\n\n      if (!this.isNullOrWhitespace(value.fields)) {\n        const fields = this.splitNewLine(value.fields);\n        for (let i = 0; i < fields.length; i++) {\n          if (this.isNullOrWhitespace(fields[i])) {\n            continue;\n          }\n\n          const delimPosition = fields[i].lastIndexOf(\": \");\n          if (delimPosition === -1) {\n            continue;\n          }\n\n          if (cipher.fields == null) {\n            cipher.fields = [];\n          }\n\n          const field = new FieldView();\n          field.name = fields[i].substr(0, delimPosition);\n          field.value = null;\n          field.type = FieldType.Text;\n          if (fields[i].length > delimPosition + 2) {\n            field.value = fields[i].substr(delimPosition + 2);\n          }\n          cipher.fields.push(field);\n        }\n      }\n\n      const valueType = value.type != null ? value.type.toLowerCase() : null;\n      switch (valueType) {\n        case \"note\":\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote = new SecureNoteView();\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default: {\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.totp = this.getValueOrDefault(value.login_totp || value.totp);\n          cipher.login.username = this.getValueOrDefault(value.login_username || value.username);\n          cipher.login.password = this.getValueOrDefault(value.login_password || value.password);\n          const uris = this.parseSingleRowCsv(value.login_uri || value.uri);\n          cipher.login.uris = this.makeUriArray(uris);\n          break;\n        }\n      }\n\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import {\n  CipherWithIdExport,\n  CollectionWithIdExport,\n  FolderWithIdExport,\n} from \"@bitwarden/common/models/export\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenJsonImporter extends BaseImporter implements Importer {\n  private results: any;\n  private result: ImportResult;\n\n  protected constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService\n  ) {\n    super();\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    this.results = JSON.parse(data);\n    if (this.results == null || this.results.items == null) {\n      this.result.success = false;\n      return this.result;\n    }\n\n    if (this.results.encrypted) {\n      await this.parseEncrypted();\n    } else {\n      this.parseDecrypted();\n    }\n\n    return this.result;\n  }\n\n  private async parseEncrypted() {\n    if (this.results.encKeyValidation_DO_NOT_EDIT != null) {\n      const orgKey = await this.cryptoService.getOrgKey(this.organizationId);\n      const encKeyValidation = new EncString(this.results.encKeyValidation_DO_NOT_EDIT);\n      const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n        encKeyValidation,\n        orgKey\n      );\n      if (encKeyValidationDecrypt === null) {\n        this.result.success = false;\n        this.result.errorMessage = this.i18nService.t(\"importEncKeyError\");\n        return;\n      }\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    if (this.organization && this.results.collections != null) {\n      for (const c of this.results.collections as CollectionWithIdExport[]) {\n        const collection = CollectionWithIdExport.toDomain(c);\n        if (collection != null) {\n          collection.organizationId = this.organizationId;\n          const view = await collection.decrypt();\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(view);\n        }\n      }\n    } else if (!this.organization && this.results.folders != null) {\n      for (const f of this.results.folders as FolderWithIdExport[]) {\n        const folder = FolderWithIdExport.toDomain(f);\n        if (folder != null) {\n          const view = await folder.decrypt();\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(view);\n        }\n      }\n    }\n\n    for (const c of this.results.items as CipherWithIdExport[]) {\n      const cipher = CipherWithIdExport.toDomain(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = this.organizationId;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      const view = await cipher.decrypt();\n      this.cleanupCipher(view);\n      this.result.ciphers.push(view);\n    }\n\n    this.result.success = true;\n  }\n\n  private parseDecrypted() {\n    const groupingsMap = new Map<string, number>();\n    if (this.organization && this.results.collections != null) {\n      this.results.collections.forEach((c: CollectionWithIdExport) => {\n        const collection = CollectionWithIdExport.toView(c);\n        if (collection != null) {\n          collection.organizationId = null;\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(collection);\n        }\n      });\n    } else if (!this.organization && this.results.folders != null) {\n      this.results.folders.forEach((f: FolderWithIdExport) => {\n        const folder = FolderWithIdExport.toView(f);\n        if (folder != null) {\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(folder);\n        }\n      });\n    }\n\n    this.results.items.forEach((c: CipherWithIdExport) => {\n      const cipher = CipherWithIdExport.toView(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = null;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n  }\n}\n","import { KdfConfig } from \"@bitwarden/common/auth/models/domain/kdf-config\";\nimport { KdfType } from \"@bitwarden/common/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { BitwardenPasswordProtectedFileFormat } from \"@bitwarden/exporter/vault-export/bitwarden-password-protected-types\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { Importer } from \"../importer\";\n\nimport { BitwardenJsonImporter } from \"./bitwarden-json-importer\";\nexport class BitwardenPasswordProtectedImporter extends BitwardenJsonImporter implements Importer {\n  private key: SymmetricCryptoKey;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    private promptForPassword_callback: () => Promise<string>\n  ) {\n    super(cryptoService, i18nService);\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const parsedData: BitwardenPasswordProtectedFileFormat = JSON.parse(data);\n\n    if (!parsedData) {\n      result.success = false;\n      return result;\n    }\n\n    // File is unencrypted\n    if (!parsedData?.encrypted) {\n      return await super.parse(data);\n    }\n\n    // File is account-encrypted\n    if (!parsedData?.passwordProtected) {\n      return await super.parse(data);\n    }\n\n    if (this.cannotParseFile(parsedData)) {\n      result.success = false;\n      return result;\n    }\n\n    // File is password-protected\n    const password = await this.promptForPassword_callback();\n    if (!(await this.checkPassword(parsedData, password))) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"invalidFilePassword\");\n      return result;\n    }\n\n    const encData = new EncString(parsedData.data);\n    const clearTextData = await this.cryptoService.decryptToUtf8(encData, this.key);\n    return await super.parse(clearTextData);\n  }\n\n  private async checkPassword(\n    jdoc: BitwardenPasswordProtectedFileFormat,\n    password: string\n  ): Promise<boolean> {\n    if (this.isNullOrWhitespace(password)) {\n      return false;\n    }\n\n    this.key = await this.cryptoService.makePinKey(\n      password,\n      jdoc.salt,\n      jdoc.kdfType,\n      new KdfConfig(jdoc.kdfIterations, jdoc.kdfMemory, jdoc.kdfParallelism)\n    );\n\n    const encKeyValidation = new EncString(jdoc.encKeyValidation_DO_NOT_EDIT);\n\n    const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n      encKeyValidation,\n      this.key\n    );\n    if (encKeyValidationDecrypt === null) {\n      return false;\n    }\n    return true;\n  }\n\n  private cannotParseFile(jdoc: BitwardenPasswordProtectedFileFormat): boolean {\n    return (\n      !jdoc ||\n      !jdoc.encrypted ||\n      !jdoc.passwordProtected ||\n      !jdoc.salt ||\n      !jdoc.kdfIterations ||\n      typeof jdoc.kdfIterations !== \"number\" ||\n      jdoc.kdfType == null ||\n      KdfType[jdoc.kdfType] == null ||\n      !jdoc.encKeyValidation_DO_NOT_EDIT ||\n      !jdoc.data\n    );\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlurCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.label === \"null\") {\n        value.label = null;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.label,\n        this.getValueOrDefault(this.nameFromUrl(value.domain), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.domain);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (this.isNullOrWhitespace(value.email) && !this.isNullOrWhitespace(value.username)) {\n        cipher.login.username = value.username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.email);\n        cipher.notes = this.getValueOrDefault(value.username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst OfficialProps = [\"!group_id\", \"!group_name\", \"title\", \"username\", \"password\", \"URL\", \"id\"];\n\nexport class ButtercupCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value[\"!group_name\"]));\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      let processingCustomFields = false;\n      for (const prop in value) {\n        // eslint-disable-next-line\n        if (value.hasOwnProperty(prop)) {\n          if (!processingCustomFields && OfficialProps.indexOf(prop) === -1) {\n            processingCustomFields = true;\n          }\n          if (processingCustomFields) {\n            this.processKvp(cipher, prop, value[prop]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ClipperzHtmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const textarea = doc.querySelector(\"textarea\");\n    if (textarea == null || this.isNullOrWhitespace(textarea.textContent)) {\n      result.errorMessage = \"Missing textarea.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const entries = JSON.parse(textarea.textContent);\n    entries.forEach((entry: any) => {\n      const cipher = this.initLoginCipher();\n      if (!this.isNullOrWhitespace(entry.label)) {\n        cipher.name = entry.label.split(\" \")[0];\n      }\n      if (entry.data != null && !this.isNullOrWhitespace(entry.data.notes)) {\n        cipher.notes = entry.data.notes.split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (entry.currentVersion != null && entry.currentVersion.fields != null) {\n        for (const property in entry.currentVersion.fields) {\n          // eslint-disable-next-line\n          if (!entry.currentVersion.fields.hasOwnProperty(property)) {\n            continue;\n          }\n\n          const field = entry.currentVersion.fields[property];\n          const actionType = field.actionType != null ? field.actionType.toLowerCase() : null;\n          switch (actionType) {\n            case \"password\":\n              cipher.login.password = this.getValueOrDefault(field.value);\n              break;\n            case \"email\":\n            case \"username\":\n            case \"user\":\n            case \"name\":\n              cipher.login.username = this.getValueOrDefault(field.value);\n              break;\n            case \"url\":\n              cipher.login.uris = this.makeUriArray(field.value);\n              break;\n            default: {\n              const labelLower = field.label != null ? field.label.toLowerCase() : null;\n              if (\n                cipher.login.password == null &&\n                this.passwordFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.password = this.getValueOrDefault(field.value);\n              } else if (\n                cipher.login.username == null &&\n                this.usernameFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.username = this.getValueOrDefault(field.value);\n              } else if (\n                (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n                this.uriFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.uris = this.makeUriArray(field.value);\n              } else {\n                this.processKvp(cipher, field.label, field.value);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class CodebookCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value.Category));\n\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite) === \"True\";\n      cipher.name = this.getValueOrDefault(value.Entry, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.login.username = this.getValueOrDefault(value.Username, value.Email);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.totp = this.getValueOrDefault(value.TOTP);\n      cipher.login.uris = this.makeUriArray(value.Website);\n\n      if (!this.isNullOrWhitespace(value.Username)) {\n        this.processKvp(cipher, \"Email\", value.Email);\n      }\n      this.processKvp(cipher, \"Phone\", value.Phone);\n      this.processKvp(cipher, \"PIN\", value.PIN);\n      this.processKvp(cipher, \"Account\", value.Account);\n      this.processKvp(cipher, \"Date\", value.Date);\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CredentialsRecord,\n  IdRecord,\n  PaymentsRecord,\n  PersonalInformationRecord,\n  SecureNoteRecord,\n} from \"./types/dashlane-csv-types\";\n\nconst _mappedCredentialsColumns = new Set([\n  \"title\",\n  \"note\",\n  \"username\",\n  \"password\",\n  \"url\",\n  \"otpSecret\",\n  \"category\",\n]);\n\nconst _mappedPersonalInfoAsIdentityColumns = new Set([\n  \"type\",\n  \"title\",\n  \"first_name\",\n  \"middle_name\",\n  \"last_name\",\n  \"login\",\n  \"email\",\n  \"phone_number\",\n  \"address\",\n  \"country\",\n  \"state\",\n  \"city\",\n  \"zip\",\n  // Skip item_name as we already have set a combined name\n  \"item_name\",\n]);\n\nconst _mappedSecureNoteColumns = new Set([\"title\", \"note\"]);\n\nexport class DashlaneCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results[0].type != null && results[0].title != null) {\n      const personalRecords = results as PersonalInformationRecord[];\n\n      // If personalRecords has only one \"name\" then create an Identity-Cipher\n      if (personalRecords.filter((x) => x.type === \"name\").length === 1) {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        results.forEach((row) => {\n          this.parsePersonalInformationRecordAsIdentity(cipher, row);\n        });\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n        result.success = true;\n        return Promise.resolve(result);\n      }\n    }\n\n    results.forEach((row) => {\n      const cipher = this.initLoginCipher();\n\n      const rowKeys = Object.keys(row);\n      if (rowKeys[0] === \"username\") {\n        this.processFolder(result, row.category);\n        this.parseCredentialsRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"account_name\") {\n        this.parsePaymentRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"number\") {\n        this.parseIdRecord(cipher, row);\n      }\n\n      if ((rowKeys[0] === \"type\") != null && rowKeys[1] === \"title\") {\n        this.parsePersonalInformationRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"title\" && rowKeys[1] === \"note\") {\n        this.parseSecureNoteRecords(cipher, row);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  parseCredentialsRecord(cipher: CipherView, row: CredentialsRecord) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    cipher.name = row.title;\n    cipher.notes = row.note;\n    cipher.login.username = row.username;\n    cipher.login.password = row.password;\n    cipher.login.totp = row.otpSecret;\n    cipher.login.uris = this.makeUriArray(row.url);\n\n    this.importUnmappedFields(cipher, row, _mappedCredentialsColumns);\n  }\n\n  parsePaymentRecord(cipher: CipherView, row: PaymentsRecord) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n\n    cipher.name = row.account_name;\n    let mappedValues: string[] = [];\n    switch (row.type) {\n      case \"credit_card\":\n        cipher.card.cardholderName = row.account_name;\n        cipher.card.number = row.cc_number;\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.code = row.code;\n        this.setCardExpiration(cipher, `${row.expiration_month}/${row.expiration_year}`);\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\n          \"account_name\",\n          \"account_holder\",\n          \"cc_number\",\n          \"code\",\n          \"expiration_month\",\n          \"expiration_year\",\n        ];\n        break;\n      case \"bank\":\n        cipher.card.cardholderName = row.account_holder;\n        cipher.card.number = row.account_number;\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\"account_name\", \"account_holder\", \"account_number\"];\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parseIdRecord(cipher: CipherView, row: IdRecord) {\n    cipher.type = CipherType.Identity;\n    cipher.identity = new IdentityView();\n\n    const mappedValues: string[] = [\"name\", \"number\"];\n    switch (row.type) {\n      case \"card\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        break;\n      case \"passport\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.passportNumber = row.number;\n        break;\n      case \"license\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        cipher.identity.state = row.state;\n\n        mappedValues.push(\"state\");\n        break;\n      case \"social_security\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.ssn = row.number;\n        break;\n      case \"tax_number\":\n        cipher.name = row.type;\n        cipher.identity.licenseNumber = row.number;\n        break;\n\n      default:\n        break;\n    }\n\n    // If you add more mapped fields please extend this\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parsePersonalInformationRecord(cipher: CipherView, row: PersonalInformationRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    if (row.type === \"name\") {\n      cipher.name = `${row.title} ${row.first_name} ${row.middle_name} ${row.last_name}`\n        .replace(\"  \", \" \")\n        .trim();\n    } else {\n      cipher.name = row.item_name;\n    }\n\n    const dataRow = row as any;\n    Object.keys(row).forEach((key) => {\n      this.processKvp(cipher, key, dataRow[key]);\n    });\n  }\n\n  parsePersonalInformationRecordAsIdentity(cipher: CipherView, row: PersonalInformationRecord) {\n    switch (row.type) {\n      case \"name\":\n        this.processFullName(cipher, `${row.first_name} ${row.middle_name} ${row.last_name}`);\n        cipher.identity.title = row.title;\n        cipher.name = cipher.identity.fullName;\n\n        cipher.identity.username = row.login;\n        break;\n      case \"email\":\n        cipher.identity.email = row.email;\n        break;\n      case \"number\":\n        cipher.identity.phone = row.phone_number;\n        break;\n      case \"address\":\n        cipher.identity.address1 = row.address;\n        cipher.identity.city = row.city;\n        cipher.identity.postalCode = row.zip;\n        cipher.identity.state = row.state;\n        cipher.identity.country = row.country;\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, _mappedPersonalInfoAsIdentityColumns);\n  }\n\n  parseSecureNoteRecords(cipher: CipherView, row: SecureNoteRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = row.title;\n    cipher.notes = row.note;\n\n    this.importUnmappedFields(cipher, row, _mappedSecureNoteColumns);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nconst HandledResults = new Set([\n  \"ADDRESS\",\n  \"AUTHENTIFIANT\",\n  \"BANKSTATEMENT\",\n  \"IDCARD\",\n  \"IDENTITY\",\n  \"PAYMENTMEANS_CREDITCARD\",\n  \"PAYMENTMEAN_PAYPAL\",\n  \"EMAIL\",\n]);\n\nexport class DashlaneJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    if (results.ADDRESS != null) {\n      this.processAddress(results.ADDRESS);\n    }\n    if (results.AUTHENTIFIANT != null) {\n      this.processAuth(results.AUTHENTIFIANT);\n    }\n    if (results.BANKSTATEMENT != null) {\n      this.processNote(results.BANKSTATEMENT, \"BankAccountName\");\n    }\n    if (results.IDCARD != null) {\n      this.processNote(results.IDCARD, \"Fullname\");\n    }\n    if (results.PAYMENTMEANS_CREDITCARD != null) {\n      this.processCard(results.PAYMENTMEANS_CREDITCARD);\n    }\n    if (results.IDENTITY != null) {\n      this.processIdentity(results.IDENTITY);\n    }\n\n    for (const key in results) {\n      // eslint-disable-next-line\n      if (results.hasOwnProperty(key) && !HandledResults.has(key)) {\n        this.processNote(results[key], null, \"Generic Note\");\n      }\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processAuth(results: any[]) {\n    results.forEach((credential: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(credential.title);\n\n      cipher.login.username = this.getValueOrDefault(\n        credential.login,\n        this.getValueOrDefault(credential.secondaryLogin)\n      );\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.domain);\n      cipher.notes += this.getValueOrDefault(credential.note, \"\");\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processIdentity(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.fullName, \"\");\n      const nameParts = cipher.name.split(\" \");\n      if (nameParts.length > 0) {\n        cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n      }\n      if (nameParts.length === 2) {\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n      } else if (nameParts.length === 3) {\n        cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[2]);\n      }\n      cipher.identity.username = this.getValueOrDefault(obj.pseudo);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processAddress(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.addressName);\n      cipher.identity.address1 = this.getValueOrDefault(obj.addressFull);\n      cipher.identity.city = this.getValueOrDefault(obj.city);\n      cipher.identity.state = this.getValueOrDefault(obj.state);\n      cipher.identity.postalCode = this.getValueOrDefault(obj.zipcode);\n      cipher.identity.country = this.getValueOrDefault(obj.country);\n      if (cipher.identity.country != null) {\n        cipher.identity.country = cipher.identity.country.toUpperCase();\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processCard(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.card = new CardView();\n      cipher.type = CipherType.Card;\n      cipher.name = this.getValueOrDefault(obj.bank);\n      cipher.card.number = this.getValueOrDefault(obj.cardNumber);\n      cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n      cipher.card.cardholderName = this.getValueOrDefault(obj.owner);\n      if (!this.isNullOrWhitespace(cipher.card.brand)) {\n        if (this.isNullOrWhitespace(cipher.name)) {\n          cipher.name = cipher.card.brand;\n        } else {\n          cipher.name += \" - \" + cipher.card.brand;\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processNote(results: any[], nameProperty: string, name: string = null) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.secureNote = new SecureNoteView();\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote.type = SecureNoteType.Generic;\n      if (name != null) {\n        cipher.name = name;\n      } else {\n        cipher.name = this.getValueOrDefault(obj[nameProperty]);\n      }\n      for (const key in obj) {\n        // eslint-disable-next-line\n        if (obj.hasOwnProperty(key) && key !== nameProperty) {\n          this.processKvp(cipher, key, obj[key].toString());\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class EncryptrCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Label, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      const text = this.getValueOrDefault(value.Text);\n      if (!this.isNullOrWhitespace(text)) {\n        if (this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = text;\n        } else {\n          cipher.notes += \"\\n\\n\" + text;\n        }\n      }\n\n      const type = value[\"Entry Type\"];\n      if (type === \"Password\") {\n        cipher.login.username = this.getValueOrDefault(value.Username);\n        cipher.login.password = this.getValueOrDefault(value.Password);\n        cipher.login.uris = this.makeUriArray(value[\"Site URL\"]);\n      } else if (type === \"Credit Card\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value[\"Name on card\"]);\n        cipher.card.number = this.getValueOrDefault(value[\"Card Number\"]);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.CVV);\n        const expiry = this.getValueOrDefault(value.Expiry);\n        if (!this.isNullOrWhitespace(expiry)) {\n          const expParts = expiry.split(\"/\");\n          if (expParts.length > 1) {\n            cipher.card.expMonth = parseInt(expParts[0], null).toString();\n            cipher.card.expYear = (2000 + parseInt(expParts[1], null)).toString();\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class EnpassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let firstRow = true;\n    results.forEach((value) => {\n      if (value.length < 2 || (firstRow && (value[0] === \"Title\" || value[0] === \"title\"))) {\n        firstRow = false;\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (\n        value.length === 2 ||\n        (!this.containsField(value, \"username\") &&\n          !this.containsField(value, \"password\") &&\n          !this.containsField(value, \"email\") &&\n          !this.containsField(value, \"url\"))\n      ) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      }\n\n      if (\n        this.containsField(value, \"cardholder\") &&\n        this.containsField(value, \"number\") &&\n        this.containsField(value, \"expiry date\")\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      }\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const fieldValue: string = value[i + 2];\n          if (this.isNullOrWhitespace(fieldValue)) {\n            continue;\n          }\n\n          const fieldName: string = value[i + 1];\n          const fieldNameLower = fieldName.toLowerCase();\n\n          if (cipher.type === CipherType.Login) {\n            if (\n              fieldNameLower === \"url\" &&\n              (cipher.login.uris == null || cipher.login.uris.length === 0)\n            ) {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              continue;\n            } else if (\n              (fieldNameLower === \"username\" || fieldNameLower === \"email\") &&\n              this.isNullOrWhitespace(cipher.login.username)\n            ) {\n              cipher.login.username = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"password\" &&\n              this.isNullOrWhitespace(cipher.login.password)\n            ) {\n              cipher.login.password = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n              cipher.login.totp = fieldValue;\n              continue;\n            }\n          } else if (cipher.type === CipherType.Card) {\n            if (\n              fieldNameLower === \"cardholder\" &&\n              this.isNullOrWhitespace(cipher.card.cardholderName)\n            ) {\n              cipher.card.cardholderName = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"number\" && this.isNullOrWhitespace(cipher.card.number)) {\n              cipher.card.number = fieldValue;\n              cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n              continue;\n            } else if (fieldNameLower === \"cvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n              cipher.card.code = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"expiry date\" &&\n              this.isNullOrWhitespace(cipher.card.expMonth) &&\n              this.isNullOrWhitespace(cipher.card.expYear)\n            ) {\n              if (this.setCardExpiration(cipher, fieldValue)) {\n                continue;\n              }\n            } else if (fieldNameLower === \"type\") {\n              // Skip since brand was determined from number above\n              continue;\n            }\n          }\n\n          this.processKvp(cipher, fieldName, fieldValue);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private containsField(fields: any[], name: string) {\n    if (fields == null || name == null) {\n      return false;\n    }\n    return (\n      fields.filter((f) => !this.isNullOrWhitespace(f) && f.toLowerCase() === name.toLowerCase())\n        .length > 0\n    );\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { EnpassJsonFile, EnpassFolder, EnpassField } from \"./types/enpass-json-type\";\n\ntype EnpassFolderTreeItem = EnpassFolder & { children: EnpassFolderTreeItem[] };\nconst androidUrlRegex = new RegExp(\"androidapp://.*==@\", \"g\");\n\nexport class EnpassJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: EnpassJsonFile = JSON.parse(data);\n    if (results == null || results.items == null || results.items.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    const foldersIndexMap = new Map<string, number>();\n    const folderTree = this.buildFolderTree(results.folders);\n    this.flattenFolderTree(null, folderTree, foldersMap);\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((item) => {\n      if (item.folders != null && item.folders.length > 0 && foldersIndexMap.has(item.folders[0])) {\n        result.folderRelationships.push([\n          result.ciphers.length,\n          foldersIndexMap.get(item.folders[0]),\n        ]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(item.title);\n      cipher.favorite = item.favorite > 0;\n\n      if (item.template_type != null && item.fields != null && item.fields.length > 0) {\n        if (\n          item.template_type.indexOf(\"login.\") === 0 ||\n          item.template_type.indexOf(\"password.\") === 0\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else if (item.template_type.indexOf(\"creditcard.\") === 0) {\n          this.processCard(cipher, item.fields);\n        } else if (\n          item.template_type.indexOf(\"identity.\") < 0 &&\n          item.fields.some((f) => f.type === \"password\" && !this.isNullOrWhitespace(f.value))\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else {\n          this.processNote(cipher, item.fields);\n        }\n      }\n\n      cipher.notes += \"\\n\" + this.getValueOrDefault(item.note, \"\");\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private processLogin(cipher: CipherView, fields: EnpassField[]) {\n    const urls: string[] = [];\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n\n      if (\n        (field.type === \"username\" || field.type === \"email\") &&\n        this.isNullOrWhitespace(cipher.login.username)\n      ) {\n        cipher.login.username = field.value;\n      } else if (field.type === \"password\" && this.isNullOrWhitespace(cipher.login.password)) {\n        cipher.login.password = field.value;\n      } else if (field.type === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n        cipher.login.totp = field.value;\n      } else if (field.type === \"url\") {\n        urls.push(field.value);\n      } else if (field.type === \".Android#\") {\n        let cleanedValue = field.value.startsWith(\"androidapp://\")\n          ? field.value\n          : \"androidapp://\" + field.value;\n        cleanedValue = cleanedValue.replace(\"android://\", \"\");\n        cleanedValue = cleanedValue.replace(androidUrlRegex, \"androidapp://\");\n        urls.push(cleanedValue);\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n    cipher.login.uris = this.makeUriArray(urls);\n  }\n\n  private processCard(cipher: CipherView, fields: EnpassField[]) {\n    cipher.card = new CardView();\n    cipher.type = CipherType.Card;\n    fields.forEach((field) => {\n      if (\n        this.isNullOrWhitespace(field.value) ||\n        field.type === \"section\" ||\n        field.type === \"ccType\"\n      ) {\n        return;\n      }\n\n      if (field.type === \"ccName\" && this.isNullOrWhitespace(cipher.card.cardholderName)) {\n        cipher.card.cardholderName = field.value;\n      } else if (field.type === \"ccNumber\" && this.isNullOrWhitespace(cipher.card.number)) {\n        cipher.card.number = field.value;\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n      } else if (field.type === \"ccCvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n        cipher.card.code = field.value;\n      } else if (field.type === \"ccExpiry\" && this.isNullOrWhitespace(cipher.card.expYear)) {\n        if (!this.setCardExpiration(cipher, field.value)) {\n          this.processKvp(\n            cipher,\n            field.label,\n            field.value,\n            field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n          );\n        }\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n  }\n\n  private processNote(cipher: CipherView, fields: EnpassField[]) {\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n      this.processKvp(\n        cipher,\n        field.label,\n        field.value,\n        field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n      );\n    });\n  }\n\n  private buildFolderTree(folders: EnpassFolder[]): EnpassFolderTreeItem[] {\n    if (folders == null) {\n      return [];\n    }\n    const folderTree: EnpassFolderTreeItem[] = [];\n    const map = new Map<string, EnpassFolderTreeItem>([]);\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      map.set(obj.uuid, obj);\n      obj.children = [];\n    });\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      if (obj.parent_uuid != null && obj.parent_uuid !== \"\" && map.has(obj.parent_uuid)) {\n        map.get(obj.parent_uuid).children.push(obj);\n      } else {\n        folderTree.push(obj);\n      }\n    });\n    return folderTree;\n  }\n\n  private flattenFolderTree(\n    titlePrefix: string,\n    tree: EnpassFolderTreeItem[],\n    map: Map<string, string>\n  ) {\n    if (tree == null) {\n      return;\n    }\n    tree.forEach((f) => {\n      if (f.title != null && f.title.trim() !== \"\") {\n        let title = f.title.trim();\n        if (titlePrefix != null && titlePrefix.trim() !== \"\") {\n          title = titlePrefix + \"/\" + title;\n        }\n        map.set(f.uuid, title);\n        if (f.children != null && f.children.length !== 0) {\n          this.flattenFolderTree(title, f.children, map);\n        }\n      }\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class FirefoxCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results\n      .filter((value) => {\n        return value.url !== \"chrome://FirefoxAccounts\";\n      })\n      .forEach((value) => {\n        const cipher = this.initLoginCipher();\n        const url = this.getValueOrDefault(value.url, this.getValueOrDefault(value.hostname));\n        cipher.name = this.getValueOrDefault(this.nameFromUrl(url), \"--\");\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.uris = this.makeUriArray(url);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export interface FskFile {\n  data: Data;\n}\n\nexport interface Data {\n  [key: string]: FskEntry;\n}\n\nexport enum FskEntryTypesEnum {\n  Login = 1,\n  CreditCard = 2,\n}\n\nexport interface FskEntry {\n  color: string;\n  creditCvv: string;\n  creditExpiry: string;\n  creditNumber: string;\n  favorite: number; // UNIX timestamp\n  notes: string;\n  password: string;\n  passwordList: PasswordList[];\n  passwordModifiedDate: number; // UNIX timestamp\n  rev: string | number;\n  service: string;\n  style: string;\n  type: FskEntryTypesEnum;\n  url: string;\n  username: string;\n  createdDate: number; // UNIX timestamp\n  modifiedDate: number; // UNIX timestamp\n}\n\nexport interface PasswordList {\n  changedate: string;\n  password: string;\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { FskEntry, FskEntryTypesEnum, FskFile } from \"./fsecure-fsk-types\";\n\nexport class FSecureFskImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: FskFile = JSON.parse(data);\n    if (results == null || results.data == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const key in results.data) {\n      // eslint-disable-next-line\n      if (!results.data.hasOwnProperty(key)) {\n        continue;\n      }\n\n      const value = results.data[key];\n      const cipher = this.parseEntry(value);\n      result.ciphers.push(cipher);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseEntry(entry: FskEntry): CipherView {\n    const cipher = this.initLoginCipher();\n    cipher.name = this.getValueOrDefault(entry.service);\n    cipher.notes = this.getValueOrDefault(entry.notes);\n    cipher.favorite = entry.favorite > 0;\n\n    switch (entry.type) {\n      case FskEntryTypesEnum.Login:\n        this.handleLoginEntry(entry, cipher);\n        break;\n      case FskEntryTypesEnum.CreditCard:\n        this.handleCreditCardEntry(entry, cipher);\n        break;\n      default:\n        return;\n        break;\n    }\n\n    this.convertToNoteIfNeeded(cipher);\n    this.cleanupCipher(cipher);\n    return cipher;\n  }\n\n  private handleLoginEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.login.username = this.getValueOrDefault(entry.username);\n    cipher.login.password = this.getValueOrDefault(entry.password);\n    cipher.login.uris = this.makeUriArray(entry.url);\n  }\n\n  private handleCreditCardEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n    cipher.card.cardholderName = this.getValueOrDefault(entry.username);\n    cipher.card.number = this.getValueOrDefault(entry.creditNumber);\n    cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n    cipher.card.code = this.getValueOrDefault(entry.creditCvv);\n    if (!this.isNullOrWhitespace(entry.creditExpiry)) {\n      if (!this.setCardExpiration(cipher, entry.creditExpiry)) {\n        this.processKvp(cipher, \"Expiration\", entry.creditExpiry);\n      }\n    }\n    if (!this.isNullOrWhitespace(entry.password)) {\n      this.processKvp(cipher, \"PIN\", entry.password);\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class GnomeJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || Object.keys(results).length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const keyRing in results) {\n      if (\n        !results.hasOwnProperty(keyRing) || // eslint-disable-line\n        this.isNullOrWhitespace(keyRing) ||\n        results[keyRing].length === 0\n      ) {\n        continue;\n      }\n\n      results[keyRing].forEach((value: any) => {\n        if (\n          this.isNullOrWhitespace(value.display_name) ||\n          value.display_name.indexOf(\"http\") !== 0\n        ) {\n          return;\n        }\n\n        this.processFolder(result, keyRing);\n        const cipher = this.initLoginCipher();\n        cipher.name = value.display_name.replace(\"http://\", \"\").replace(\"https://\", \"\");\n        if (cipher.name.length > 30) {\n          cipher.name = cipher.name.substring(0, 30);\n        }\n        cipher.login.password = this.getValueOrDefault(value.secret);\n        cipher.login.uris = this.makeUriArray(value.display_name);\n\n        if (value.attributes != null) {\n          cipher.login.username =\n            value.attributes != null\n              ? this.getValueOrDefault(value.attributes.username_value)\n              : null;\n          for (const attr in value.attributes) {\n            if (\n              !value.attributes.hasOwnProperty(attr) || // eslint-disable-line\n              attr === \"username_value\" ||\n              attr === \"xdg:schema\"\n            ) {\n              continue;\n            }\n            this.processKvp(cipher, attr, value.attributes[attr]);\n          }\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst NotesHeader = \"Notes\\n\\n\";\nconst ApplicationsHeader = \"Applications\\n\\n\";\nconst WebsitesHeader = \"Websites\\n\\n\";\nconst Delimiter = \"\\n---\\n\";\n\nexport class KasperskyTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n\n    let notesData: string;\n    let applicationsData: string;\n    let websitesData: string;\n    let workingData = this.splitNewLine(data).join(\"\\n\");\n\n    if (workingData.indexOf(NotesHeader) !== -1) {\n      const parts = workingData.split(NotesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        notesData = parts[1];\n      }\n    }\n    if (workingData.indexOf(ApplicationsHeader) !== -1) {\n      const parts = workingData.split(ApplicationsHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        applicationsData = parts[1];\n      }\n    }\n    if (workingData.indexOf(WebsitesHeader) === 0) {\n      const parts = workingData.split(WebsitesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        websitesData = parts[1];\n      }\n    }\n\n    const notes = this.parseDataCategory(notesData);\n    const applications = this.parseDataCategory(applicationsData);\n    const websites = this.parseDataCategory(websitesData);\n\n    notes.forEach((n) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(n.get(\"Name\"));\n      cipher.notes = this.getValueOrDefault(n.get(\"Text\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    websites.concat(applications).forEach((w) => {\n      const cipher = this.initLoginCipher();\n      const nameKey = w.has(\"Website name\") ? \"Website name\" : \"Application\";\n      cipher.name = this.getValueOrDefault(w.get(nameKey), \"\");\n      if (!this.isNullOrWhitespace(w.get(\"Login name\"))) {\n        if (!this.isNullOrWhitespace(cipher.name)) {\n          cipher.name += \": \";\n        }\n        cipher.name += w.get(\"Login name\");\n      }\n      cipher.notes = this.getValueOrDefault(w.get(\"Comment\"));\n      if (w.has(\"Website URL\")) {\n        cipher.login.uris = this.makeUriArray(w.get(\"Website URL\"));\n      }\n      cipher.login.username = this.getValueOrDefault(w.get(\"Login\"));\n      cipher.login.password = this.getValueOrDefault(w.get(\"Password\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseDataCategory(data: string): Map<string, string>[] {\n    if (this.isNullOrWhitespace(data) || data.indexOf(Delimiter) === -1) {\n      return [];\n    }\n    const items: Map<string, string>[] = [];\n    data.split(Delimiter).forEach((p) => {\n      if (p.indexOf(\"\\n\") === -1) {\n        return;\n      }\n      const item = new Map<string, string>();\n      let itemComment: string;\n      let itemCommentKey: string;\n      p.split(\"\\n\").forEach((l) => {\n        if (itemComment != null) {\n          itemComment += \"\\n\" + l;\n          return;\n        }\n        const colonIndex = l.indexOf(\":\");\n        let key: string;\n        let val: string;\n        if (colonIndex === -1) {\n          return;\n        } else {\n          key = l.substring(0, colonIndex);\n          if (l.length > colonIndex + 1) {\n            val = l.substring(colonIndex + 2);\n          }\n        }\n        if (key != null) {\n          item.set(key, val);\n        }\n        if (key === \"Comment\" || key === \"Text\") {\n          itemComment = val;\n          itemCommentKey = key;\n        }\n      });\n      if (itemComment != null && itemCommentKey != null) {\n        item.set(itemCommentKey, itemComment);\n      }\n      if (item.size === 0) {\n        return;\n      }\n      items.push(item);\n    });\n    return items;\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePass2XmlImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    //Note: The doc.querySelector(\"KeePassFile > Root > Group\") no longers works on node and we have to breakdown the query by nodes\n    const KeePassFileNode = doc.querySelector(\"KeePassFile\");\n\n    if (KeePassFileNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const RootNode = KeePassFileNode.querySelector(\"Root\");\n    if (RootNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const rootGroup = RootNode.querySelector(\"Group\");\n    if (rootGroup == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root > Group` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    this.traverse(rootGroup, true, \"\");\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  traverse(node: Element, isRootNode: boolean, groupPrefixName: string) {\n    const folderIndex = this.result.folders.length;\n    let groupName = groupPrefixName;\n\n    if (!isRootNode) {\n      if (groupName !== \"\") {\n        groupName += \"/\";\n      }\n      const nameEl = this.querySelectorDirectChild(node, \"Name\");\n      groupName += nameEl == null ? \"-\" : nameEl.textContent;\n      const folder = new FolderView();\n      folder.name = groupName;\n      this.result.folders.push(folder);\n    }\n\n    this.querySelectorAllDirectChild(node, \"Entry\").forEach((entry) => {\n      const cipherIndex = this.result.ciphers.length;\n\n      const cipher = this.initLoginCipher();\n      this.querySelectorAllDirectChild(entry, \"String\").forEach((entryString) => {\n        const valueEl = this.querySelectorDirectChild(entryString, \"Value\");\n        const value = valueEl != null ? valueEl.textContent : null;\n        if (this.isNullOrWhitespace(value)) {\n          return;\n        }\n        const keyEl = this.querySelectorDirectChild(entryString, \"Key\");\n        const key = keyEl != null ? keyEl.textContent : null;\n\n        if (key === \"URL\") {\n          cipher.login.uris = this.makeUriArray(value);\n        } else if (key === \"UserName\") {\n          cipher.login.username = value;\n        } else if (key === \"Password\") {\n          cipher.login.password = value;\n        } else if (key === \"otp\") {\n          cipher.login.totp = value.replace(\"key=\", \"\");\n        } else if (key === \"Title\") {\n          cipher.name = value;\n        } else if (key === \"Notes\") {\n          cipher.notes += value + \"\\n\";\n        } else {\n          let type = FieldType.Text;\n          const attrs = valueEl.attributes as any;\n          if (\n            attrs.length > 0 &&\n            attrs.ProtectInMemory != null &&\n            attrs.ProtectInMemory.value === \"True\"\n          ) {\n            type = FieldType.Hidden;\n          }\n          this.processKvp(cipher, key, value, type);\n        }\n      });\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n\n      if (!isRootNode) {\n        this.result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    this.querySelectorAllDirectChild(node, \"Group\").forEach((group) => {\n      this.traverse(group, false, groupName);\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePassXCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(value.Title)) {\n        return;\n      }\n\n      value.Group =\n        !this.isNullOrWhitespace(value.Group) && value.Group.startsWith(\"Root/\")\n          ? value.Group.replace(\"Root/\", \"\")\n          : value.Group;\n      const groupName = !this.isNullOrWhitespace(value.Group) ? value.Group : null;\n      this.processFolder(result, groupName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class KeeperCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 6) {\n        return;\n      }\n\n      this.processFolder(result, value[0]);\n      const cipher = this.initLoginCipher();\n\n      const notes = this.getValueOrDefault(value[5]);\n      if (notes) {\n        cipher.notes = `${notes}\\n`;\n      }\n\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[4]);\n\n      if (value.length > 7) {\n        // we have some custom fields.\n        for (let i = 7; i < value.length; i = i + 2) {\n          if (value[i] == \"TFC:Keeper\") {\n            cipher.login.totp = value[i + 1];\n          } else {\n            this.processKvp(cipher, value[i], value[i + 1]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LastPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipherIndex = result.ciphers.length;\n      let folderIndex = result.folders.length;\n      let grouping = value.grouping;\n      if (grouping != null) {\n        // eslint-disable-next-line\n        grouping = grouping.replace(/\\\\/g, \"/\").replace(/[\\x00-\\x1F\\x7F-\\x9F]/g, \"\");\n      }\n      const hasFolder = this.getValueOrDefault(grouping, \"(none)\") !== \"(none)\";\n      let addFolder = hasFolder;\n\n      if (hasFolder) {\n        for (let i = 0; i < result.folders.length; i++) {\n          if (result.folders[i].name === grouping) {\n            addFolder = false;\n            folderIndex = i;\n            break;\n          }\n        }\n      }\n\n      const cipher = this.buildBaseCipher(value);\n      if (cipher.type === CipherType.Login) {\n        cipher.notes = this.getValueOrDefault(value.extra);\n        cipher.login = new LoginView();\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.totp);\n      } else if (cipher.type === CipherType.SecureNote) {\n        this.parseSecureNote(value, cipher);\n      } else if (cipher.type === CipherType.Card) {\n        cipher.card = this.parseCard(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n      } else if (cipher.type === CipherType.Identity) {\n        cipher.identity = this.parseIdentity(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n        if (!this.isNullOrWhitespace(value.ccnum)) {\n          // there is a card on this identity too\n          const cardCipher = this.buildBaseCipher(value);\n          cardCipher.identity = null;\n          cardCipher.type = CipherType.Card;\n          cardCipher.card = this.parseCard(value);\n          result.ciphers.push(cardCipher);\n        }\n      }\n\n      result.ciphers.push(cipher);\n\n      if (addFolder) {\n        const f = new FolderView();\n        f.name = grouping;\n        result.folders.push(f);\n      }\n      if (hasFolder) {\n        result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private buildBaseCipher(value: any) {\n    const cipher = new CipherView();\n    // eslint-disable-next-line\n    if (value.hasOwnProperty(\"profilename\") && value.hasOwnProperty(\"profilelanguage\")) {\n      // form fill\n      cipher.favorite = false;\n      cipher.name = this.getValueOrDefault(value.profilename, \"--\");\n      cipher.type = CipherType.Card;\n\n      if (\n        !this.isNullOrWhitespace(value.title) ||\n        !this.isNullOrWhitespace(value.firstname) ||\n        !this.isNullOrWhitespace(value.lastname) ||\n        !this.isNullOrWhitespace(value.address1) ||\n        !this.isNullOrWhitespace(value.phone) ||\n        !this.isNullOrWhitespace(value.username) ||\n        !this.isNullOrWhitespace(value.email)\n      ) {\n        cipher.type = CipherType.Identity;\n      }\n    } else {\n      // site or secure note\n      cipher.favorite = !this.organization && this.getValueOrDefault(value.fav, \"0\") === \"1\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.type = value.url === \"http://sn\" ? CipherType.SecureNote : CipherType.Login;\n    }\n    return cipher;\n  }\n\n  private parseCard(value: any): CardView {\n    const card = new CardView();\n    card.cardholderName = this.getValueOrDefault(value.ccname);\n    card.number = this.getValueOrDefault(value.ccnum);\n    card.code = this.getValueOrDefault(value.cccsc);\n    card.brand = CardView.getCardBrandByPatterns(card.number);\n\n    if (!this.isNullOrWhitespace(value.ccexp) && value.ccexp.indexOf(\"-\") > -1) {\n      const ccexpParts = (value.ccexp as string).split(\"-\");\n      if (ccexpParts.length > 1) {\n        card.expYear = ccexpParts[0];\n        card.expMonth = ccexpParts[1];\n        if (card.expMonth.length === 2 && card.expMonth[0] === \"0\") {\n          card.expMonth = card.expMonth[1];\n        }\n      }\n    }\n\n    return card;\n  }\n\n  private parseIdentity(value: any): IdentityView {\n    const identity = new IdentityView();\n    identity.title = this.getValueOrDefault(value.title);\n    identity.firstName = this.getValueOrDefault(value.firstname);\n    identity.middleName = this.getValueOrDefault(value.middlename);\n    identity.lastName = this.getValueOrDefault(value.lastname);\n    identity.username = this.getValueOrDefault(value.username);\n    identity.company = this.getValueOrDefault(value.company);\n    identity.ssn = this.getValueOrDefault(value.ssn);\n    identity.address1 = this.getValueOrDefault(value.address1);\n    identity.address2 = this.getValueOrDefault(value.address2);\n    identity.address3 = this.getValueOrDefault(value.address3);\n    identity.city = this.getValueOrDefault(value.city);\n    identity.state = this.getValueOrDefault(value.state);\n    identity.postalCode = this.getValueOrDefault(value.zip);\n    identity.country = this.getValueOrDefault(value.country);\n    identity.email = this.getValueOrDefault(value.email);\n    identity.phone = this.getValueOrDefault(value.phone);\n\n    if (!this.isNullOrWhitespace(identity.title)) {\n      identity.title = identity.title.charAt(0).toUpperCase() + identity.title.slice(1);\n    }\n\n    return identity;\n  }\n\n  private parseSecureNote(value: any, cipher: CipherView) {\n    const extraParts = this.splitNewLine(value.extra);\n    let processedNote = false;\n\n    if (extraParts.length) {\n      const typeParts = extraParts[0].split(\":\");\n      if (\n        typeParts.length > 1 &&\n        typeParts[0] === \"NoteType\" &&\n        (typeParts[1] === \"Credit Card\" || typeParts[1] === \"Address\")\n      ) {\n        if (typeParts[1] === \"Credit Card\") {\n          const mappedData = this.parseSecureNoteMapping<CardView>(cipher, extraParts, {\n            Number: \"number\",\n            \"Name on Card\": \"cardholderName\",\n            \"Security Code\": \"code\",\n            // LP provides date in a format like 'June,2020'\n            // Store in expMonth, then parse and modify\n            \"Expiration Date\": \"expMonth\",\n          });\n\n          if (this.isNullOrWhitespace(mappedData.expMonth) || mappedData.expMonth === \",\") {\n            // No expiration data\n            mappedData.expMonth = undefined;\n          } else {\n            const [monthString, year] = mappedData.expMonth.split(\",\");\n            // Parse month name into number\n            if (!this.isNullOrWhitespace(monthString)) {\n              const month = new Date(Date.parse(monthString.trim() + \" 1, 2012\")).getMonth() + 1;\n              if (isNaN(month)) {\n                mappedData.expMonth = undefined;\n              } else {\n                mappedData.expMonth = month.toString();\n              }\n            } else {\n              mappedData.expMonth = undefined;\n            }\n            if (!this.isNullOrWhitespace(year)) {\n              mappedData.expYear = year;\n            }\n          }\n\n          cipher.type = CipherType.Card;\n          cipher.card = mappedData;\n        } else if (typeParts[1] === \"Address\") {\n          const mappedData = this.parseSecureNoteMapping<IdentityView>(cipher, extraParts, {\n            Title: \"title\",\n            \"First Name\": \"firstName\",\n            \"Last Name\": \"lastName\",\n            \"Middle Name\": \"middleName\",\n            Company: \"company\",\n            \"Address 1\": \"address1\",\n            \"Address 2\": \"address2\",\n            \"Address 3\": \"address3\",\n            \"City / Town\": \"city\",\n            State: \"state\",\n            \"Zip / Postal Code\": \"postalCode\",\n            Country: \"country\",\n            \"Email Address\": \"email\",\n            Username: \"username\",\n          });\n          cipher.type = CipherType.Identity;\n          cipher.identity = mappedData;\n        }\n        processedNote = true;\n      }\n    }\n\n    if (!processedNote) {\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n      cipher.notes = this.getValueOrDefault(value.extra);\n    }\n  }\n\n  private parseSecureNoteMapping<T>(cipher: CipherView, extraParts: string[], map: any): T {\n    const dataObj: any = {};\n\n    let processingNotes = false;\n    extraParts.forEach((extraPart) => {\n      let key: string = null;\n      let val: string = null;\n      if (!processingNotes) {\n        if (this.isNullOrWhitespace(extraPart)) {\n          return;\n        }\n        const colonIndex = extraPart.indexOf(\":\");\n        if (colonIndex === -1) {\n          key = extraPart;\n        } else {\n          key = extraPart.substring(0, colonIndex);\n          if (extraPart.length > colonIndex) {\n            val = extraPart.substring(colonIndex + 1);\n          }\n        }\n        if (this.isNullOrWhitespace(key) || this.isNullOrWhitespace(val) || key === \"NoteType\") {\n          return;\n        }\n      }\n\n      if (processingNotes) {\n        cipher.notes += \"\\n\" + extraPart;\n      } else if (key === \"Notes\") {\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes += \"\\n\" + val;\n        } else {\n          cipher.notes = val;\n        }\n        processingNotes = true;\n        // eslint-disable-next-line\n      } else if (map.hasOwnProperty(key)) {\n        dataObj[map[key]] = val;\n      } else {\n        this.processKvp(cipher, key, val);\n      }\n    });\n\n    return dataObj;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LogMeOnceCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 4) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[1]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MeldiumCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.DisplayName, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.login.username = this.getValueOrDefault(value.UserName);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MSecureCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      const folderName =\n        this.getValueOrDefault(value[0], \"Unassigned\") !== \"Unassigned\" ? value[0] : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[2], \"--\");\n\n      if (value[1] === \"Web Logins\" || value[1] === \"Login\") {\n        cipher.login.uris = this.makeUriArray(value[4]);\n        cipher.login.username = this.getValueOrDefault(value[5]);\n        cipher.login.password = this.getValueOrDefault(value[6]);\n        cipher.notes = !this.isNullOrWhitespace(value[3]) ? value[3].split(\"\\\\n\").join(\"\\n\") : null;\n      } else if (value.length > 3) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        for (let i = 3; i < value.length; i++) {\n          if (!this.isNullOrWhitespace(value[i])) {\n            cipher.notes += value[i] + \"\\n\";\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(value[1]) && cipher.type !== CipherType.Login) {\n        cipher.name = value[1] + \": \" + cipher.name;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst mappedBaseColumns = [\"nickname\", \"additionalInfo\"];\nconst _mappedUserAccountColumns = new Set(\n  mappedBaseColumns.concat([\"url\", \"username\", \"password\", \"twofaSecret\"])\n);\nconst _mappedCreditCardColumns = new Set(\n  mappedBaseColumns.concat([\"cardNumber\", \"cardName\", \"exp_month\", \"exp_year\", \"cvv\"])\n);\n\nconst _mappedIdentityColumns = new Set(\n  mappedBaseColumns.concat([\n    \"title\",\n    \"firstName\",\n    \"middleName\",\n    \"lastName\",\n    \"email\",\n    \"firstAddressLine\",\n    \"secondAddressLine\",\n    \"city\",\n    \"country\",\n    \"zipCode\",\n  ])\n);\n\nconst _mappedIdCardColumns = new Set(mappedBaseColumns.concat([\"idName\", \"idNumber\", \"idCountry\"]));\n\nconst _mappedTwoFaColumns = new Set(mappedBaseColumns.concat([\"authToken\"]));\n\nconst _mappedUserNoteColumns = new Set(mappedBaseColumns.concat([\"content\"]));\n\nexport class MykiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.nickname, \"--\");\n      cipher.notes = this.getValueOrDefault(value.additionalInfo);\n\n      if (value.url !== undefined) {\n        // Accounts\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.twofaSecret);\n\n        this.importUnmappedFields(cipher, value, _mappedUserAccountColumns);\n      } else if (value.authToken !== undefined) {\n        // TwoFA\n        cipher.login.totp = this.getValueOrDefault(value.authToken);\n\n        this.importUnmappedFields(cipher, value, _mappedTwoFaColumns);\n      } else if (value.cardNumber !== undefined) {\n        // Cards\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.expMonth = this.getValueOrDefault(value.exp_month);\n        cipher.card.expYear = this.getValueOrDefault(value.exp_year);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n\n        this.importUnmappedFields(cipher, value, _mappedCreditCardColumns);\n      } else if (value.firstName !== undefined) {\n        // Identities\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        cipher.identity.title = this.getValueOrDefault(value.title);\n        cipher.identity.firstName = this.getValueOrDefault(value.firstName);\n        cipher.identity.middleName = this.getValueOrDefault(value.middleName);\n        cipher.identity.lastName = this.getValueOrDefault(value.lastName);\n        cipher.identity.phone = this.getValueOrDefault(value.number);\n        cipher.identity.email = this.getValueOrDefault(value.email);\n        cipher.identity.address1 = this.getValueOrDefault(value.firstAddressLine);\n        cipher.identity.address2 = this.getValueOrDefault(value.secondAddressLine);\n        cipher.identity.city = this.getValueOrDefault(value.city);\n        cipher.identity.country = this.getValueOrDefault(value.country);\n        cipher.identity.postalCode = this.getValueOrDefault(value.zipCode);\n\n        this.importUnmappedFields(cipher, value, _mappedIdentityColumns);\n      } else if (value.idType !== undefined) {\n        // IdCards\n\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        this.processFullName(cipher, value.idName);\n        cipher.identity.country = this.getValueOrDefault(value.idCountry);\n\n        switch (value.idType) {\n          // case \"Driver's License\":\n          // case \"ID Card\":\n          // case \"Outdoor License\":\n          // case \"Software License\":\n          // case \"Tax Number\":\n          // case \"Bank Account\":\n          // case \"Insurance Card\":\n          // case \"Health Card\":\n          // case \"Membership\":\n          // case \"Database\":\n          // case \"Reward Program\":\n          // case \"Tour Visa\":\n          case \"Passport\":\n            cipher.identity.passportNumber = value.idNumber;\n            break;\n          case \"Social Security\":\n            cipher.identity.ssn = value.idNumber;\n            break;\n          default:\n            cipher.identity.licenseNumber = value.idNumber;\n            break;\n        }\n\n        this.importUnmappedFields(cipher, value, _mappedIdCardColumns);\n      } else if (value.content !== undefined) {\n        // Notes\n        cipher.secureNote = new SecureNoteView();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.notes = this.getValueOrDefault(value.content);\n\n        this.importUnmappedFields(cipher, value, _mappedUserNoteColumns);\n      } else {\n        return;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\ntype nodePassCsvParsed = {\n  name: string;\n  url: string;\n  username: string;\n  password: string;\n  note: string;\n  cardholdername: string;\n  cardnumber: string;\n  cvc: string;\n  expirydate: string;\n  zipcode: string;\n  folder: string;\n  full_name: string;\n  phone_number: string;\n  email: string;\n  address1: string;\n  address2: string;\n  city: string;\n  country: string;\n  state: string;\n};\n\nexport class NordPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: nodePassCsvParsed[] = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((record) => {\n      const recordType = this.evaluateType(record);\n      if (recordType === undefined) {\n        return;\n      }\n\n      if (!this.organization) {\n        this.processFolder(result, record.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.name = this.getValueOrDefault(record.name, \"--\");\n      cipher.notes = this.getValueOrDefault(record.note);\n\n      switch (recordType) {\n        case CipherType.Login:\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.username = this.getValueOrDefault(record.username);\n          cipher.login.password = this.getValueOrDefault(record.password);\n          cipher.login.uris = this.makeUriArray(record.url);\n          break;\n        case CipherType.Card:\n          cipher.type = CipherType.Card;\n          cipher.card.cardholderName = this.getValueOrDefault(record.cardholdername);\n          cipher.card.number = this.getValueOrDefault(record.cardnumber);\n          cipher.card.code = this.getValueOrDefault(record.cvc);\n          cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n          this.setCardExpiration(cipher, record.expirydate);\n          break;\n\n        case CipherType.Identity:\n          cipher.type = CipherType.Identity;\n\n          this.processFullName(cipher, this.getValueOrDefault(record.full_name));\n          cipher.identity.address1 = this.getValueOrDefault(record.address1);\n          cipher.identity.address2 = this.getValueOrDefault(record.address2);\n          cipher.identity.city = this.getValueOrDefault(record.city);\n          cipher.identity.state = this.getValueOrDefault(record.state);\n          cipher.identity.postalCode = this.getValueOrDefault(record.zipcode);\n          cipher.identity.country = this.getValueOrDefault(record.country);\n          if (cipher.identity.country != null) {\n            cipher.identity.country = cipher.identity.country.toUpperCase();\n          }\n          cipher.identity.email = this.getValueOrDefault(record.email);\n          cipher.identity.phone = this.getValueOrDefault(record.phone_number);\n          break;\n        case CipherType.SecureNote:\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default:\n          break;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private evaluateType(record: nodePassCsvParsed): CipherType {\n    if (!this.isNullOrWhitespace(record.username)) {\n      return CipherType.Login;\n    }\n\n    if (!this.isNullOrWhitespace(record.cardnumber)) {\n      return CipherType.Card;\n    }\n\n    if (!this.isNullOrWhitespace(record.full_name)) {\n      return CipherType.Identity;\n    }\n\n    if (!this.isNullOrWhitespace(record.note)) {\n      return CipherType.SecureNote;\n    }\n\n    return undefined;\n  }\n}\n","export interface ExportData {\n  accounts?: AccountsEntity[] | null;\n}\nexport interface AccountsEntity {\n  attrs: AccountAttributes;\n  vaults?: VaultsEntity[] | null;\n}\nexport interface AccountAttributes {\n  accountName: string;\n  name: string;\n  avatar: string;\n  email: string;\n  uuid: string;\n  domain: string;\n}\nexport interface VaultsEntity {\n  attrs: VaultAttributes;\n  items?: Item[] | null;\n}\nexport interface VaultAttributes {\n  uuid: string;\n  desc: string;\n  avatar: string;\n  name: string;\n  type: string;\n}\n\nexport enum CategoryEnum {\n  Login = \"001\",\n  CreditCard = \"002\",\n  SecureNote = \"003\",\n  Identity = \"004\",\n  Password = \"005\",\n  Document = \"006\",\n  SoftwareLicense = \"100\",\n  BankAccount = \"101\",\n  Database = \"102\",\n  DriversLicense = \"103\",\n  OutdoorLicense = \"104\",\n  Membership = \"105\",\n  Passport = \"106\",\n  RewardsProgram = \"107\",\n  SocialSecurityNumber = \"108\",\n  WirelessRouter = \"109\",\n  Server = \"110\",\n  EmailAccount = \"111\",\n  API_Credential = \"112\",\n  MedicalRecord = \"113\",\n}\n\nexport interface Item {\n  uuid: string;\n  favIndex: number;\n  createdAt: number;\n  updatedAt: number;\n  trashed?: boolean;\n  categoryUuid: string;\n  details: Details;\n  overview: Overview;\n}\nexport interface Details {\n  loginFields?: (LoginFieldsEntity | null)[] | null;\n  notesPlain?: string | null;\n  sections?: (SectionsEntity | null)[] | null;\n  passwordHistory?: (PasswordHistoryEntity | null)[] | null;\n  documentAttributes?: DocumentAttributes | null;\n  password?: string | null;\n}\n\nexport enum LoginFieldTypeEnum {\n  TextOrHtml = \"T\",\n  EmailAddress = \"E\",\n  URL = \"U\",\n  Number = \"N\",\n  Password = \"P\",\n  TextArea = \"A\",\n  PhoneNumber = \"T\",\n  CheckBox = \"C\",\n}\nexport interface LoginFieldsEntity {\n  value: string;\n  id: string;\n  name: string;\n  fieldType: LoginFieldTypeEnum | string;\n  designation?: string | null;\n}\nexport interface SectionsEntity {\n  title: string;\n  name?: string | null;\n  fields?: FieldsEntity[] | null;\n}\nexport interface FieldsEntity {\n  title: string;\n  id: string;\n  value: Value;\n  indexAtSource: number;\n  guarded: boolean;\n  multiline: boolean;\n  dontGenerate: boolean;\n  placeholder?: string;\n  inputTraits: InputTraits;\n  clipboardFilter?: string | null;\n}\nexport interface Value {\n  totp?: string | null;\n  date?: number | null;\n  string?: string | null;\n  concealed?: string | null;\n  email?: Email | null;\n  phone?: string | null;\n  menu?: string | null;\n  gender?: string | null;\n  monthYear?: number | null;\n  url?: string | null;\n  address?: Address | null;\n  creditCardType?: string | null;\n  creditCardNumber?: string | null;\n  reference?: string | null;\n}\n\nexport interface Email {\n  email_address: string;\n  provider: string;\n}\n\nexport interface Address {\n  street: string;\n  city: string;\n  country: string;\n  zip: string;\n  state: string;\n}\nexport interface InputTraits {\n  keyboard: string;\n  correction: string;\n  capitalization: string;\n}\nexport interface PasswordHistoryEntity {\n  value: string;\n  time: number;\n}\nexport interface DocumentAttributes {\n  fileName: string;\n  documentId: string;\n  decryptedSize: number;\n}\nexport interface Overview {\n  subtitle: string;\n  title: string;\n  url: string;\n  urls?: UrlsEntity[] | null;\n  ps?: number | null;\n  pbe?: number | null;\n  pgrng?: boolean | null;\n  tags?: string[] | null;\n}\nexport interface UrlsEntity {\n  label: string;\n  url: string;\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class OnePassword1PifImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    data.split(this.newLineRegex).forEach((line) => {\n      if (this.isNullOrWhitespace(line) || line[0] !== \"{\") {\n        return;\n      }\n      const item = JSON.parse(line);\n      if (item.trashed === true) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n\n      if (this.isNullOrWhitespace(item.hmac)) {\n        this.processStandardItem(item, cipher);\n      } else {\n        this.processWinOpVaultItem(item, cipher);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processWinOpVaultItem(item: any, cipher: CipherView) {\n    if (item.overview != null) {\n      cipher.name = this.getValueOrDefault(item.overview.title);\n      if (item.overview.URLs != null) {\n        const urls: string[] = [];\n        item.overview.URLs.forEach((url: any) => {\n          if (!this.isNullOrWhitespace(url.u)) {\n            urls.push(url.u);\n          }\n        });\n        cipher.login.uris = this.makeUriArray(urls);\n      }\n    }\n\n    if (item.details != null) {\n      if (item.details.passwordHistory != null) {\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n      }\n      if (\n        !this.isNullOrWhitespace(item.details.ccnum) ||\n        !this.isNullOrWhitespace(item.details.cvv)\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      } else if (\n        !this.isNullOrWhitespace(item.details.firstname) ||\n        !this.isNullOrWhitespace(item.details.address1)\n      ) {\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n      }\n      if (cipher.type === CipherType.Login && !this.isNullOrWhitespace(item.details.password)) {\n        cipher.login.password = item.details.password;\n      }\n      if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n        cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (item.details.fields != null) {\n        this.parseFields(item.details.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.details.sections != null) {\n        item.details.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private processStandardItem(item: any, cipher: CipherView) {\n    cipher.favorite = item.openContents && item.openContents.faveIndex ? true : false;\n    cipher.name = this.getValueOrDefault(item.title);\n\n    if (item.typeName === \"securenotes.SecureNote\") {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    } else if (item.typeName === \"wallet.financial.CreditCard\") {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    } else if (item.typeName === \"identities.Identity\") {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    } else {\n      cipher.login.uris = this.makeUriArray(item.location);\n    }\n\n    if (item.secureContents != null) {\n      if (item.secureContents.passwordHistory != null) {\n        this.parsePasswordHistory(item.secureContents.passwordHistory, cipher);\n      }\n      if (!this.isNullOrWhitespace(item.secureContents.notesPlain)) {\n        cipher.notes = item.secureContents.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (cipher.type === CipherType.Login) {\n        if (!this.isNullOrWhitespace(item.secureContents.password)) {\n          cipher.login.password = item.secureContents.password;\n        }\n        if (item.secureContents.URLs != null) {\n          const urls: string[] = [];\n          item.secureContents.URLs.forEach((u: any) => {\n            if (!this.isNullOrWhitespace(u.url)) {\n              urls.push(u.url);\n            }\n          });\n          if (urls.length > 0) {\n            cipher.login.uris = this.makeUriArray(urls);\n          }\n        }\n      }\n      if (item.secureContents.fields != null) {\n        this.parseFields(item.secureContents.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.secureContents.sections != null) {\n        item.secureContents.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private parsePasswordHistory(items: any[], cipher: CipherView) {\n    const maxSize = items.length > 5 ? 5 : items.length;\n    cipher.passwordHistory = items\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n\n  private parseFields(\n    fields: any[],\n    cipher: CipherView,\n    designationKey: string,\n    valueKey: string,\n    nameKey: string\n  ) {\n    fields.forEach((field: any) => {\n      if (field[valueKey] == null || field[valueKey].toString().trim() === \"\") {\n        return;\n      }\n\n      // TODO: when date FieldType exists, store this as a date field type instead of formatted Text if k is 'date'\n      const fieldValue =\n        field.k === \"date\"\n          ? new Date(field[valueKey] * 1000).toUTCString()\n          : field[valueKey].toString();\n      const fieldDesignation =\n        field[designationKey] != null ? field[designationKey].toString() : null;\n\n      if (cipher.type === CipherType.Login) {\n        if (this.isNullOrWhitespace(cipher.login.username) && fieldDesignation === \"username\") {\n          cipher.login.username = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.password) &&\n          fieldDesignation === \"password\"\n        ) {\n          cipher.login.password = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.totp) &&\n          fieldDesignation != null &&\n          fieldDesignation.startsWith(\"TOTP_\")\n        ) {\n          cipher.login.totp = fieldValue;\n          return;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.isNullOrWhitespace(cipher.card.number) && fieldDesignation === \"ccnum\") {\n          cipher.card.number = fieldValue;\n          cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n          return;\n        } else if (this.isNullOrWhitespace(cipher.card.code) && fieldDesignation === \"cvv\") {\n          cipher.card.code = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.cardholderName) &&\n          fieldDesignation === \"cardholder\"\n        ) {\n          cipher.card.cardholderName = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.expiration) &&\n          fieldDesignation === \"expiry\" &&\n          fieldValue.length === 6\n        ) {\n          cipher.card.expMonth = (fieldValue as string).substr(4, 2);\n          if (cipher.card.expMonth[0] === \"0\") {\n            cipher.card.expMonth = cipher.card.expMonth.substr(1, 1);\n          }\n          cipher.card.expYear = (fieldValue as string).substr(0, 4);\n          return;\n        } else if (fieldDesignation === \"type\") {\n          // Skip since brand was determined from number above\n          return;\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        const identity = cipher.identity;\n        if (this.isNullOrWhitespace(identity.firstName) && fieldDesignation === \"firstname\") {\n          identity.firstName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.lastName) && fieldDesignation === \"lastname\") {\n          identity.lastName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.middleName) && fieldDesignation === \"initial\") {\n          identity.middleName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.phone) && fieldDesignation === \"defphone\") {\n          identity.phone = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.company) && fieldDesignation === \"company\") {\n          identity.company = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.email) && fieldDesignation === \"email\") {\n          identity.email = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.username) && fieldDesignation === \"username\") {\n          identity.username = fieldValue;\n          return;\n        } else if (fieldDesignation === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip } = field[valueKey];\n          identity.address1 = this.getValueOrDefault(street);\n          identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            identity.country = country.toUpperCase();\n          }\n          identity.postalCode = this.getValueOrDefault(zip);\n          return;\n        }\n      }\n\n      const fieldName = this.isNullOrWhitespace(field[nameKey]) ? \"no_name\" : field[nameKey];\n      if (\n        fieldName === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      const fieldType = field.k === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CategoryEnum,\n  Details,\n  ExportData,\n  FieldsEntity,\n  Item,\n  LoginFieldTypeEnum,\n  Overview,\n  PasswordHistoryEntity,\n  SectionsEntity,\n  UrlsEntity,\n  Value,\n  VaultsEntity,\n} from \"./types/onepassword-1pux-importer-types\";\n\nexport class OnePassword1PuxImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const exportData: ExportData = JSON.parse(data);\n\n    const account = exportData.accounts[0];\n    // TODO Add handling of multiple vaults\n    // const personalVaults = account.vaults[0].filter((v) => v.attrs.type === VaultAttributeTypeEnum.Personal);\n    account.vaults.forEach((vault: VaultsEntity) => {\n      vault.items.forEach((item: Item) => {\n        if (item.trashed === true) {\n          return;\n        }\n\n        const cipher = this.initLoginCipher();\n\n        const category = item.categoryUuid as CategoryEnum;\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.Password:\n          case CategoryEnum.WirelessRouter:\n          case CategoryEnum.Server:\n          case CategoryEnum.API_Credential:\n            cipher.type = CipherType.Login;\n            cipher.login = new LoginView();\n            break;\n          case CategoryEnum.CreditCard:\n          case CategoryEnum.BankAccount:\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            break;\n          case CategoryEnum.SecureNote:\n          case CategoryEnum.SoftwareLicense:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.MedicalRecord:\n            // case CategoryEnum.Document:\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case CategoryEnum.Identity:\n          case CategoryEnum.DriversLicense:\n          case CategoryEnum.OutdoorLicense:\n          case CategoryEnum.Membership:\n          case CategoryEnum.Passport:\n          case CategoryEnum.RewardsProgram:\n          case CategoryEnum.SocialSecurityNumber:\n            cipher.type = CipherType.Identity;\n            cipher.identity = new IdentityView();\n            break;\n          default:\n            break;\n        }\n\n        cipher.favorite = item.favIndex === 1 ? true : false;\n\n        this.processOverview(item.overview, cipher);\n\n        this.processLoginFields(item, cipher);\n\n        this.processDetails(category, item.details, cipher);\n\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n\n        this.processSections(category, item.details.sections, cipher);\n\n        if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n          cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        this.result.ciphers.push(cipher);\n      });\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processOverview(overview: Overview, cipher: CipherView) {\n    if (overview == null) {\n      return;\n    }\n\n    cipher.name = this.getValueOrDefault(overview.title);\n\n    if (overview.urls != null) {\n      const urls: string[] = [];\n      overview.urls.forEach((url: UrlsEntity) => {\n        if (!this.isNullOrWhitespace(url.url)) {\n          urls.push(url.url);\n        }\n      });\n      cipher.login.uris = this.makeUriArray(urls);\n    }\n\n    if (overview.tags != null && overview.tags.length > 0) {\n      const folderName = this.capitalize(overview.tags[0]);\n      this.processFolder(this.result, folderName);\n    }\n  }\n\n  private capitalize(inputString: string): string {\n    return inputString.trim().replace(/\\w\\S*/g, (w) => w.replace(/^\\w/, (c) => c.toUpperCase()));\n  }\n\n  private processLoginFields(item: Item, cipher: CipherView) {\n    if (item.details == null) {\n      return;\n    }\n\n    if (item.details.loginFields == null || item.details.loginFields.length === 0) {\n      return;\n    }\n\n    item.details.loginFields.forEach((loginField) => {\n      if (loginField.designation === \"username\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.username = loginField.value;\n        return;\n      }\n\n      if (loginField.designation === \"password\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.password = loginField.value;\n        return;\n      }\n\n      let fieldValue = loginField.value;\n      let fieldType: FieldType = FieldType.Text;\n      switch (loginField.fieldType) {\n        case LoginFieldTypeEnum.Password:\n          fieldType = FieldType.Hidden;\n          break;\n        case LoginFieldTypeEnum.CheckBox:\n          fieldValue = loginField.value !== \"\" ? \"true\" : \"false\";\n          fieldType = FieldType.Boolean;\n          break;\n        default:\n          break;\n      }\n      this.processKvp(cipher, loginField.name, fieldValue, fieldType);\n    });\n  }\n\n  private processDetails(category: CategoryEnum, details: Details, cipher: CipherView) {\n    if (category !== CategoryEnum.Password) {\n      return;\n    }\n\n    if (details == null) {\n      return;\n    }\n    cipher.login.password = details.password;\n  }\n\n  private processSections(category: CategoryEnum, sections: SectionsEntity[], cipher: CipherView) {\n    if (sections == null || sections.length === 0) {\n      return;\n    }\n\n    sections.forEach((section: SectionsEntity) => {\n      if (section.fields == null) {\n        return;\n      }\n\n      this.parseSectionFields(category, section.fields, cipher);\n    });\n  }\n\n  private parseSectionFields(category: CategoryEnum, fields: FieldsEntity[], cipher: CipherView) {\n    fields.forEach((field: FieldsEntity) => {\n      const valueKey = Object.keys(field.value)[0];\n      const anyField = field as any;\n\n      if (\n        anyField.value == null ||\n        anyField.value[valueKey] == null ||\n        anyField.value[valueKey] === \"\"\n      ) {\n        return;\n      }\n\n      const fieldName = this.getFieldName(field.id, field.title);\n      const fieldValue = this.extractValue(field.value, valueKey);\n\n      if (cipher.type === CipherType.Login) {\n        if (this.fillLogin(field, fieldValue, cipher)) {\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.WirelessRouter:\n            break;\n\n          case CategoryEnum.Server:\n            if (this.isNullOrWhitespace(cipher.login.uri) && field.id === \"url\") {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              return;\n            }\n            break;\n\n          case CategoryEnum.API_Credential:\n            if (this.fillApiCredentials(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.fillCreditCard(field, fieldValue, cipher)) {\n          return;\n        }\n\n        if (category === CategoryEnum.BankAccount) {\n          if (this.fillBankAccount(field, fieldValue, cipher)) {\n            return;\n          }\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        if (this.fillIdentity(field, fieldValue, cipher, valueKey)) {\n          return;\n        }\n        if (valueKey === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip, state } = field.value.address;\n          cipher.identity.address1 = this.getValueOrDefault(street);\n          cipher.identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            cipher.identity.country = country.toUpperCase();\n          }\n          cipher.identity.postalCode = this.getValueOrDefault(zip);\n          cipher.identity.state = this.getValueOrDefault(state);\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Identity:\n            break;\n          case CategoryEnum.DriversLicense:\n            if (this.fillDriversLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.OutdoorLicense:\n            if (this.fillOutdoorLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Membership:\n            if (this.fillMembership(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Passport:\n            if (this.fillPassport(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.RewardsProgram:\n            if (this.fillRewardsProgram(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.SocialSecurityNumber:\n            if (this.fillSSN(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (valueKey === \"email\") {\n        // fieldValue is an object casted into a string, so access the plain value instead\n        const { email_address, provider } = field.value.email;\n        this.processKvp(cipher, fieldName, email_address, FieldType.Text);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return;\n      }\n\n      // Do not include a password field if it's already in the history\n      if (\n        field.title === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      // TODO ?? If one of the fields is marked as guarded, then activate Password-Reprompt for the entire item\n      if (field.guarded && cipher.reprompt === CipherRepromptType.None) {\n        cipher.reprompt = CipherRepromptType.Password;\n      }\n\n      const fieldType = valueKey === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n\n  private getFieldName(id: string, title: string): string {\n    if (this.isNullOrWhitespace(title)) {\n      return id;\n    }\n\n    // Naive approach of checking if the fields id is usable\n    if (id.length > 25 && RegExp(/[0-9]{2}[A-Z]{2}/, \"i\").test(id)) {\n      return title;\n    }\n    return id;\n  }\n\n  private extractValue(value: Value, valueKey: string): string {\n    if (valueKey === \"date\") {\n      return new Date(value.date * 1000).toUTCString();\n    }\n\n    if (valueKey === \"monthYear\") {\n      return value.monthYear.toString();\n    }\n\n    return (value as any)[valueKey];\n  }\n\n  private fillLogin(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.username) && fieldName === \"username\") {\n      cipher.login.username = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"password\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (\n      this.isNullOrWhitespace(cipher.login.totp) &&\n      field.id != null &&\n      field.id.startsWith(\"TOTP_\")\n    ) {\n      cipher.login.totp = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillApiCredentials(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"credential\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.uri) && fieldName === \"hostname\") {\n      cipher.login.uris = this.makeUriArray(fieldValue);\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillCreditCard(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.number) && field.id === \"ccnum\") {\n      cipher.card.number = fieldValue;\n      cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.code) && field.id === \"cvv\") {\n      cipher.card.code = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"cardholder\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.expiration) && field.id === \"expiry\") {\n      const monthYear: string = fieldValue.toString().trim();\n      cipher.card.expMonth = monthYear.substring(4, 6);\n      if (cipher.card.expMonth[0] === \"0\") {\n        cipher.card.expMonth = cipher.card.expMonth.substring(1, 2);\n      }\n      cipher.card.expYear = monthYear.substring(0, 4);\n      return true;\n    }\n\n    if (field.id === \"type\") {\n      // Skip since brand was determined from number above\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillBankAccount(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"owner\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillIdentity(\n    field: FieldsEntity,\n    fieldValue: string,\n    cipher: CipherView,\n    valueKey: string\n  ): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"firstname\") {\n      cipher.identity.firstName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.lastName) && field.id === \"lastname\") {\n      cipher.identity.lastName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.middleName) && field.id === \"initial\") {\n      cipher.identity.middleName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"defphone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.email)) {\n      if (valueKey === \"email\") {\n        const { email_address, provider } = field.value.email;\n        cipher.identity.email = this.getValueOrDefault(email_address);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return true;\n      }\n\n      if (field.id === \"email\") {\n        cipher.identity.email = fieldValue;\n        return true;\n      }\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.username) && field.id === \"username\") {\n      cipher.identity.username = fieldValue;\n      return true;\n    }\n    return false;\n  }\n\n  private fillDriversLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.address1) && field.id === \"address\") {\n      cipher.identity.address1 = fieldValue;\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.licenseNumber) && field.id === \"number\") {\n      cipher.identity.licenseNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillOutdoorLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillMembership(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"org_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"phone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillPassport(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO Iso\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"issuing_country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.passportNumber) && field.id === \"number\") {\n      cipher.identity.passportNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillRewardsProgram(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillSSN(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.ssn) && field.id === \"number\") {\n      cipher.identity.ssn = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private parsePasswordHistory(historyItems: PasswordHistoryEntity[], cipher: CipherView) {\n    if (historyItems == null || historyItems.length === 0) {\n      return;\n    }\n\n    const maxSize = historyItems.length > 5 ? 5 : historyItems.length;\n    cipher.passwordHistory = historyItems\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nexport class CipherImportContext {\n  lowerProperty: string;\n  constructor(public importRecord: any, public property: string, public cipher: CipherView) {\n    this.lowerProperty = property.toLowerCase();\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\n\nexport const IgnoredProperties = [\n  \"ainfo\",\n  \"autosubmit\",\n  \"notesplain\",\n  \"ps\",\n  \"scope\",\n  \"tags\",\n  \"title\",\n  \"uuid\",\n  \"notes\",\n];\n\nexport abstract class OnePasswordCsvImporter extends BaseImporter implements Importer {\n  protected loginPropertyParsers = [\n    this.setLoginUsername,\n    this.setLoginPassword,\n    this.setLoginUris,\n  ];\n  protected creditCardPropertyParsers = [\n    this.setCreditCardNumber,\n    this.setCreditCardVerification,\n    this.setCreditCardCardholderName,\n    this.setCreditCardExpiry,\n  ];\n  protected identityPropertyParsers = [\n    this.setIdentityFirstName,\n    this.setIdentityInitial,\n    this.setIdentityLastName,\n    this.setIdentityUserName,\n    this.setIdentityEmail,\n    this.setIdentityPhone,\n    this.setIdentityCompany,\n  ];\n\n  abstract setCipherType(value: any, cipher: CipherView): void;\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true, {\n      quoteChar: '\"',\n      escapeChar: \"\\\\\",\n    });\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(this.getProp(value, \"title\"))) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.getProp(value, \"title\"), \"--\");\n\n      this.setNotes(value, cipher);\n\n      this.setCipherType(value, cipher);\n\n      let altUsername: string = null;\n      for (const property in value) {\n        // eslint-disable-next-line\n        if (!value.hasOwnProperty(property) || this.isNullOrWhitespace(value[property])) {\n          continue;\n        }\n\n        const context = new CipherImportContext(value, property, cipher);\n        if (cipher.type === CipherType.Login && this.setKnownLoginValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Card && this.setKnownCreditCardValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Identity && this.setKnownIdentityValue(context)) {\n          continue;\n        }\n\n        altUsername = this.setUnknownValue(context, altUsername);\n      }\n\n      if (\n        cipher.type === CipherType.Login &&\n        !this.isNullOrWhitespace(altUsername) &&\n        this.isNullOrWhitespace(cipher.login.username) &&\n        altUsername.indexOf(\"://\") === -1\n      ) {\n        cipher.login.username = altUsername;\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  protected getProp(obj: any, name: string): any {\n    const lowerObj = Object.entries(obj).reduce((agg: any, entry: [string, any]) => {\n      agg[entry[0].toLowerCase()] = entry[1];\n      return agg;\n    }, {});\n    return lowerObj[name.toLowerCase()];\n  }\n\n  protected getPropByRegexp(obj: any, regexp: RegExp): any {\n    const matchingKeys = Object.keys(obj).reduce((agg: string[], key: string) => {\n      if (key.match(regexp)) {\n        agg.push(key);\n      }\n      return agg;\n    }, []);\n    if (matchingKeys.length === 0) {\n      return null;\n    } else {\n      return obj[matchingKeys[0]];\n    }\n  }\n\n  protected getPropIncluding(obj: any, name: string): any {\n    const includesMap = Object.keys(obj).reduce((agg: string[], entry: string) => {\n      if (entry.toLowerCase().includes(name.toLowerCase())) {\n        agg.push(entry);\n      }\n      return agg;\n    }, []);\n    if (includesMap.length === 0) {\n      return null;\n    } else {\n      return obj[includesMap[0]];\n    }\n  }\n\n  protected setNotes(importRecord: any, cipher: CipherView) {\n    cipher.notes =\n      this.getValueOrDefault(this.getProp(importRecord, \"notesPlain\"), \"\") +\n      \"\\n\" +\n      this.getValueOrDefault(this.getProp(importRecord, \"notes\"), \"\") +\n      \"\\n\";\n    cipher.notes.trim();\n  }\n\n  protected setKnownLoginValue(context: CipherImportContext): boolean {\n    return this.loginPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownCreditCardValue(context: CipherImportContext): boolean {\n    return this.creditCardPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownIdentityValue(context: CipherImportContext): boolean {\n    return this.identityPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setUnknownValue(context: CipherImportContext, altUsername: string): string {\n    if (\n      IgnoredProperties.indexOf(context.lowerProperty) === -1 &&\n      !context.lowerProperty.startsWith(\"section:\") &&\n      !context.lowerProperty.startsWith(\"section \")\n    ) {\n      if (altUsername == null && context.lowerProperty === \"email\") {\n        return context.importRecord[context.property];\n      } else if (\n        context.lowerProperty === \"created date\" ||\n        context.lowerProperty === \"modified date\"\n      ) {\n        const readableDate = new Date(\n          parseInt(context.importRecord[context.property], 10) * 1000\n        ).toUTCString();\n        this.processKvp(context.cipher, \"1Password \" + context.property, readableDate);\n        return null;\n      }\n      if (\n        context.lowerProperty.includes(\"password\") ||\n        context.lowerProperty.includes(\"key\") ||\n        context.lowerProperty.includes(\"secret\")\n      ) {\n        this.processKvp(\n          context.cipher,\n          context.property,\n          context.importRecord[context.property],\n          FieldType.Hidden\n        );\n      } else {\n        this.processKvp(context.cipher, context.property, context.importRecord[context.property]);\n      }\n    }\n    return null;\n  }\n\n  protected setIdentityFirstName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.firstName) &&\n      context.lowerProperty.includes(\"first name\")\n    ) {\n      context.cipher.identity.firstName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityInitial(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.middleName) &&\n      context.lowerProperty.includes(\"initial\")\n    ) {\n      context.cipher.identity.middleName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityLastName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.lastName) &&\n      context.lowerProperty.includes(\"last name\")\n    ) {\n      context.cipher.identity.lastName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityUserName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.username) &&\n      context.lowerProperty.includes(\"username\")\n    ) {\n      context.cipher.identity.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityCompany(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.company) &&\n      context.lowerProperty.includes(\"company\")\n    ) {\n      context.cipher.identity.company = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityPhone(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.phone) &&\n      context.lowerProperty.includes(\"default phone\")\n    ) {\n      context.cipher.identity.phone = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityEmail(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.email) &&\n      context.lowerProperty.includes(\"email\")\n    ) {\n      context.cipher.identity.email = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardNumber(context: CipherImportContext): boolean {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.number) &&\n      context.lowerProperty.includes(\"number\")\n    ) {\n      context.cipher.card.number = context.importRecord[context.property];\n      context.cipher.card.brand = CardView.getCardBrandByPatterns(context.cipher.card.number);\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardVerification(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.code) &&\n      context.lowerProperty.includes(\"verification number\")\n    ) {\n      context.cipher.card.code = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardCardholderName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.cardholderName) &&\n      context.lowerProperty.includes(\"cardholder name\")\n    ) {\n      context.cipher.card.cardholderName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\") &&\n      context.importRecord[context.property].length === 7\n    ) {\n      context.cipher.card.expMonth = (context.importRecord[context.property] as string).substr(\n        0,\n        2\n      );\n      if (context.cipher.card.expMonth[0] === \"0\") {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = (context.importRecord[context.property] as string).substr(3, 4);\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginPassword(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.password) &&\n      context.lowerProperty === \"password\"\n    ) {\n      context.cipher.login.password = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUsername(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.username) &&\n      context.lowerProperty === \"username\"\n    ) {\n      context.cipher.login.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUris(context: CipherImportContext) {\n    if (\n      (context.cipher.login.uris == null || context.cipher.login.uris.length === 0) &&\n      context.lowerProperty === \"urls\"\n    ) {\n      const urls = context.importRecord[context.property].split(this.newLineRegex);\n      context.cipher.login.uris = this.makeUriArray(urls);\n      return true;\n    } else if (context.lowerProperty === \"url\") {\n      if (context.cipher.login.uris == null) {\n        context.cipher.login.uris = [];\n      }\n      context.cipher.login.uris.concat(this.makeUriArray(context.importRecord[context.property]));\n      return true;\n    }\n    return false;\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { IgnoredProperties, OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordMacCsvImporter extends OnePasswordCsvImporter implements Importer {\n  setCipherType(value: any, cipher: CipherView) {\n    const onePassType = this.getValueOrDefault(this.getProp(value, \"type\"), \"Login\");\n    switch (onePassType) {\n      case \"Credit Card\":\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Identity\":\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Login\":\n      case \"Secure Note\":\n        IgnoredProperties.push(\"type\");\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\nimport { OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordWinCsvImporter extends OnePasswordCsvImporter implements Importer {\n  constructor() {\n    super();\n    this.identityPropertyParsers.push(this.setIdentityAddress);\n  }\n\n  setCipherType(value: any, cipher: CipherView) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: number/i)) &&\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: expiry date/i))\n    ) {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    }\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: first name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: initial/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: last name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /internet \\d+: email/i))\n    ) {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    }\n  }\n\n  setIdentityAddress(context: CipherImportContext) {\n    if (context.lowerProperty.match(/address \\d+: address/i)) {\n      this.processKvp(context.cipher, \"address\", context.importRecord[context.property]);\n      return true;\n    }\n    return false;\n  }\n\n  setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\")\n    ) {\n      const expSplit = (context.importRecord[context.property] as string).split(\"/\");\n      context.cipher.card.expMonth = expSplit[0];\n      if (context.cipher.card.expMonth[0] === \"0\" && context.cipher.card.expMonth.length === 2) {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = expSplit[2].length > 4 ? expSplit[2].substr(0, 4) : expSplit[2];\n      return true;\n    }\n    return false;\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PadlockCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let headers: string[] = null;\n    results.forEach((value) => {\n      if (headers == null) {\n        headers = value.map((v: string) => v);\n        return;\n      }\n\n      if (value.length < 2 || value.length !== headers.length) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value[1])) {\n        if (this.organization) {\n          const tags = (value[1] as string).split(\",\");\n          tags.forEach((tag) => {\n            tag = tag.trim();\n            let addCollection = true;\n            let collectionIndex = result.collections.length;\n\n            for (let i = 0; i < result.collections.length; i++) {\n              if (result.collections[i].name === tag) {\n                addCollection = false;\n                collectionIndex = i;\n                break;\n              }\n            }\n\n            if (addCollection) {\n              const collection = new CollectionView();\n              collection.name = tag;\n              result.collections.push(collection);\n            }\n\n            result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n          });\n        } else {\n          const tags = (value[1] as string).split(\",\");\n          const tag = tags.length > 0 ? tags[0].trim() : null;\n          this.processFolder(result, tag);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      for (let i = 2; i < value.length; i++) {\n        const header = headers[i].trim().toLowerCase();\n        if (this.isNullOrWhitespace(value[i]) || this.isNullOrWhitespace(header)) {\n          continue;\n        }\n\n        if (this.usernameFieldNames.indexOf(header) > -1) {\n          cipher.login.username = value[i];\n        } else if (this.passwordFieldNames.indexOf(header) > -1) {\n          cipher.login.password = value[i];\n        } else if (this.uriFieldNames.indexOf(header) > -1) {\n          cipher.login.uris = this.makeUriArray(value[i]);\n        } else {\n          this.processKvp(cipher, headers[i], value[i]);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassKeepCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValue(\"category\", value));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValue(\"description\", value);\n      cipher.name = this.getValueOrDefault(this.getValue(\"title\", value), \"--\");\n      cipher.login.username = this.getValue(\"username\", value);\n      cipher.login.password = this.getValue(\"password\", value);\n      cipher.login.uris = this.makeUriArray(this.getValue(\"site\", value));\n      this.processKvp(cipher, \"Password 2\", this.getValue(\"password2\", value));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private getValue(key: string, value: any) {\n    return this.getValueOrDefault(value[key], this.getValueOrDefault(value[\" \" + key]));\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { PasskyJsonExport } from \"./passky-json-types\";\n\nexport class PasskyJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const passkyExport: PasskyJsonExport = JSON.parse(data);\n    if (\n      passkyExport == null ||\n      passkyExport.passwords == null ||\n      passkyExport.passwords.length === 0\n    ) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (passkyExport.encrypted == true) {\n      result.success = false;\n      result.errorMessage = \"Unable to import an encrypted passky backup.\";\n      return Promise.resolve(result);\n    }\n\n    passkyExport.passwords.forEach((record) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = record.website;\n      cipher.login.username = record.username;\n      cipher.login.password = record.password;\n\n      cipher.login.uris = this.makeUriArray(record.website);\n      cipher.notes = record.message;\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassmanJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((credential: any) => {\n      if (credential.tags != null && credential.tags.length > 0) {\n        const folderName = credential.tags[0].text;\n        this.processFolder(result, folderName);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = credential.label;\n\n      cipher.login.username = this.getValueOrDefault(credential.username);\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.url);\n      cipher.notes += this.getValueOrDefault(credential.description, \"\");\n      if (credential.otp != null) {\n        cipher.login.totp = this.getValueOrDefault(credential.otp.secret);\n      }\n\n      if (credential.custom_fields != null) {\n        credential.custom_fields.forEach((customField: any) => {\n          switch (customField.field_type) {\n            case \"text\":\n            case \"password\":\n              this.processKvp(cipher, customField.label, customField.value);\n              break;\n          }\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasspackCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const tagsJson = !this.isNullOrWhitespace(value.Tags) ? JSON.parse(value.Tags) : null;\n      const tags: string[] =\n        tagsJson != null && tagsJson.tags != null && tagsJson.tags.length > 0\n          ? tagsJson.tags\n              .map((tagJson: string) => {\n                try {\n                  const t = JSON.parse(tagJson);\n                  return this.getValueOrDefault(t.tag);\n                } catch {\n                  // Ignore error\n                }\n                return null;\n              })\n              .filter((t: string) => !this.isNullOrWhitespace(t))\n          : null;\n\n      if (this.organization && tags != null && tags.length > 0) {\n        tags.forEach((tag) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === tag) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = tag;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization && tags != null && tags.length > 0) {\n        this.processFolder(result, tags[0]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes, \"\");\n      cipher.notes += \"\\n\\n\" + this.getValueOrDefault(value[\"Shared Notes\"], \"\") + \"\\n\";\n      cipher.name = this.getValueOrDefault(value[\"Entry Name\"], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User ID\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n        value.__parsed_extra.forEach((extra: string) => {\n          if (!this.isNullOrWhitespace(extra)) {\n            cipher.notes += \"\\n\" + extra;\n          }\n        });\n      }\n\n      const fieldsJson = !this.isNullOrWhitespace(value[\"Extra Fields\"])\n        ? JSON.parse(value[\"Extra Fields\"])\n        : null;\n      const fields =\n        fieldsJson != null && fieldsJson.extraFields != null && fieldsJson.extraFields.length > 0\n          ? fieldsJson.extraFields.map((fieldJson: string) => {\n              try {\n                return JSON.parse(fieldJson);\n              } catch {\n                // Ignore error\n              }\n              return null;\n            })\n          : null;\n      if (fields != null) {\n        fields.forEach((f: any) => {\n          if (f != null) {\n            this.processKvp(cipher, f.name, f.data);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordAgentCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let newVersion = true;\n    results.forEach((value) => {\n      if (value.length !== 5 && value.length < 9) {\n        return;\n      }\n      const altFormat = value.length === 10 && value[0] === \"0\";\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[altFormat ? 1 : 0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[altFormat ? 2 : 1]);\n      cipher.login.password = this.getValueOrDefault(value[altFormat ? 3 : 2]);\n      if (value.length === 5) {\n        newVersion = false;\n        cipher.notes = this.getValueOrDefault(value[4]);\n        cipher.login.uris = this.makeUriArray(value[3]);\n      } else {\n        const folder = this.getValueOrDefault(value[altFormat ? 9 : 8], \"(None)\");\n        let folderName = folder !== \"(None)\" ? folder.split(\"\\\\\").join(\"/\") : null;\n        if (folderName != null) {\n          folderName = folder.split(\" > \").join(\"/\");\n          folderName = folder.split(\">\").join(\"/\");\n        }\n        this.processFolder(result, folderName);\n        cipher.notes = this.getValueOrDefault(value[altFormat ? 5 : 3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (newVersion && this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordBossJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.items == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    results.folders.forEach((value: any) => {\n      foldersMap.set(value.id, value.name);\n    });\n    const foldersIndexMap = new Map<string, number>();\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((value: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.login.uris = this.makeUriArray(value.login_url);\n\n      if (value.folder != null && foldersIndexMap.has(value.folder)) {\n        result.folderRelationships.push([result.ciphers.length, foldersIndexMap.get(value.folder)]);\n      }\n\n      if (value.identifiers == null) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value.identifiers.notes)) {\n        cipher.notes = value.identifiers.notes.split(\"\\\\r\\\\n\").join(\"\\n\").split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (value.type === \"CreditCard\") {\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n      }\n\n      for (const property in value.identifiers) {\n        // eslint-disable-next-line\n        if (!value.identifiers.hasOwnProperty(property)) {\n          continue;\n        }\n        const valObj = value.identifiers[property];\n        const val = valObj != null ? valObj.toString() : null;\n        if (\n          this.isNullOrWhitespace(val) ||\n          property === \"notes\" ||\n          property === \"ignoreItemInSecurityScore\"\n        ) {\n          continue;\n        }\n\n        if (property === \"custom_fields\") {\n          valObj.forEach((cf: any) => {\n            this.processKvp(cipher, cf.name, cf.value);\n          });\n          continue;\n        }\n\n        if (cipher.type === CipherType.Card) {\n          if (property === \"cardNumber\") {\n            cipher.card.number = val;\n            cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n            continue;\n          } else if (property === \"nameOnCard\") {\n            cipher.card.cardholderName = val;\n            continue;\n          } else if (property === \"security_code\") {\n            cipher.card.code = val;\n            continue;\n          } else if (property === \"expires\") {\n            try {\n              const expDate = new Date(val);\n              cipher.card.expYear = expDate.getFullYear().toString();\n              cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n            } catch {\n              // Ignore error\n            }\n            continue;\n          } else if (property === \"cardType\") {\n            continue;\n          }\n        } else {\n          if (\n            (property === \"username\" || property === \"email\") &&\n            this.isNullOrWhitespace(cipher.login.username)\n          ) {\n            cipher.login.username = val;\n            continue;\n          } else if (property === \"password\") {\n            cipher.login.password = val;\n            continue;\n          } else if (property === \"totp\") {\n            cipher.login.totp = val;\n            continue;\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(property) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n            continue;\n          }\n        }\n\n        this.processKvp(cipher, property, val);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordDragonXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const records = doc.querySelectorAll(\"PasswordManager > record\");\n    Array.from(records).forEach((record) => {\n      const category = this.querySelectorDirectChild(record, \"Category\");\n      const categoryText =\n        category != null &&\n        !this.isNullOrWhitespace(category.textContent) &&\n        category.textContent !== \"Unfiled\"\n          ? category.textContent\n          : null;\n      this.processFolder(result, categoryText);\n\n      const accountName = this.querySelectorDirectChild(record, \"Account-Name\");\n      const userId = this.querySelectorDirectChild(record, \"User-Id\");\n      const password = this.querySelectorDirectChild(record, \"Password\");\n      const url = this.querySelectorDirectChild(record, \"URL\");\n      const notes = this.querySelectorDirectChild(record, \"Notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name =\n        accountName != null ? this.getValueOrDefault(accountName.textContent, \"--\") : \"--\";\n      cipher.notes = notes != null ? this.getValueOrDefault(notes.textContent) : \"\";\n      cipher.login.username = userId != null ? this.getValueOrDefault(userId.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      const attributes: string[] = [];\n      for (let i = 1; i <= 10; i++) {\n        attributes.push(\"Attribute-\" + i);\n      }\n\n      this.querySelectorAllDirectChild(record, attributes.join(\",\")).forEach((attr) => {\n        if (this.isNullOrWhitespace(attr.textContent) || attr.textContent === \"null\") {\n          return;\n        }\n        this.processKvp(cipher, attr.tagName, attr.textContent);\n      });\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordSafeXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const passwordSafe = doc.querySelector(\"passwordsafe\");\n    if (passwordSafe == null) {\n      result.errorMessage = \"Missing `passwordsafe` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const notesDelimiter = passwordSafe.getAttribute(\"delimiter\");\n    const entries = doc.querySelectorAll(\"passwordsafe > entry\");\n    Array.from(entries).forEach((entry) => {\n      const group = this.querySelectorDirectChild(entry, \"group\");\n      const groupText =\n        group != null && !this.isNullOrWhitespace(group.textContent)\n          ? group.textContent.split(\".\").join(\"/\")\n          : null;\n      this.processFolder(result, groupText);\n\n      const title = this.querySelectorDirectChild(entry, \"title\");\n      const username = this.querySelectorDirectChild(entry, \"username\");\n      const email = this.querySelectorDirectChild(entry, \"email\");\n      const password = this.querySelectorDirectChild(entry, \"password\");\n      const url = this.querySelectorDirectChild(entry, \"url\");\n      const notes = this.querySelectorDirectChild(entry, \"notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name = title != null ? this.getValueOrDefault(title.textContent, \"--\") : \"--\";\n      cipher.notes =\n        notes != null\n          ? this.getValueOrDefault(notes.textContent, \"\").split(notesDelimiter).join(\"\\n\")\n          : null;\n      cipher.login.username =\n        username != null ? this.getValueOrDefault(username.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      if (this.isNullOrWhitespace(cipher.login.username) && email != null) {\n        cipher.login.username = this.getValueOrDefault(email.textContent);\n      } else if (email != null && !this.isNullOrWhitespace(email.textContent)) {\n        cipher.notes = this.isNullOrWhitespace(cipher.notes)\n          ? \"Email: \" + email.textContent\n          : cipher.notes + \"\\n\" + \"Email: \" + email.textContent;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordWalletTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 1) {\n        return;\n      }\n      if (value.length > 5) {\n        this.processFolder(result, value[5]);\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      if (value.length > 4) {\n        cipher.notes = this.getValueOrDefault(value[4], \"\").split(\"¬\").join(\"\\n\");\n      }\n      if (value.length > 2) {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n      }\n      if (value.length > 3) {\n        cipher.login.password = this.getValueOrDefault(value[3]);\n      }\n      if (value.length > 1) {\n        cipher.login.uris = this.makeUriArray(value[1]);\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  AppPasswordEntry,\n  BookmarkEntry,\n  EnvironmentVariablesEntry,\n  FoldersEntity,\n  GPGEntry,\n  NotesEntry,\n  PsonoItemTypes,\n  PsonoJsonExport,\n  TOTPEntry,\n  WebsitePasswordEntry,\n} from \"./psono-json-types\";\n\nexport class PsonoJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const psonoExport: PsonoJsonExport = JSON.parse(data);\n    if (psonoExport == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    this.parseFolders(result, psonoExport.folders);\n    this.handleItemParsing(result, psonoExport.items);\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFolders(result: ImportResult, folders: FoldersEntity[]) {\n    if (folders == null || folders.length === 0) {\n      return;\n    }\n\n    folders.forEach((folder) => {\n      if (folder.items == null || folder.items.length == 0) {\n        return;\n      }\n\n      this.processFolder(result, folder.name);\n\n      this.handleItemParsing(result, folder.items);\n    });\n  }\n\n  private handleItemParsing(result: ImportResult, items?: PsonoItemTypes[]) {\n    if (items == null || items.length === 0) {\n      return;\n    }\n\n    items.forEach((record) => {\n      const cipher = this.parsePsonoItem(record);\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n  }\n\n  private parsePsonoItem(item: PsonoItemTypes): CipherView {\n    const cipher = this.initLoginCipher();\n\n    switch (item.type) {\n      case \"website_password\":\n        this.parseWebsiteLogins(item, cipher);\n        break;\n      case \"application_password\":\n        this.parseApplicationPasswords(item, cipher);\n        break;\n      case \"environment_variables\":\n        this.parseEnvironmentVariables(item, cipher);\n        break;\n      case \"totp\":\n        this.parseTOTP(item, cipher);\n        break;\n      case \"bookmark\":\n        this.parseBookmarks(item, cipher);\n        break;\n      // Skipping this until we can save GPG into notes/custom fields\n      // case \"mail_gpg_own_key\":\n      //   this.parseGPG(item, cipher);\n      //   break;\n      case \"note\":\n        this.parseNotes(item, cipher);\n        break;\n      default:\n        break;\n    }\n\n    return cipher;\n  }\n\n  readonly WEBSITE_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"website_password_title\",\n    \"website_password_notes\",\n    \"website_password_username\",\n    \"website_password_password\",\n    \"website_password_url\",\n    \"autosubmit\",\n    \"website_password_auto_submit\",\n    \"urlfilter\",\n    \"website_password_url_filter\",\n  ]);\n  private parseWebsiteLogins(entry: WebsitePasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"website_password\") {\n      return;\n    }\n\n    cipher.name = entry.website_password_title;\n    cipher.notes = entry.website_password_notes;\n\n    cipher.login.username = entry.website_password_username;\n    cipher.login.password = entry.website_password_password;\n\n    cipher.login.uris = this.makeUriArray(entry.website_password_url);\n\n    this.processKvp(\n      cipher,\n      \"website_password_auto_submit\",\n      entry.website_password_auto_submit.toString(),\n      FieldType.Boolean\n    );\n\n    this.processKvp(cipher, \"website_password_url_filter\", entry.website_password_url_filter);\n\n    this.importUnmappedFields(cipher, entry, this.WEBSITE_mappedValues);\n  }\n\n  readonly APP_PWD_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"application_password_title\",\n    \"application_password_notes\",\n    \"application_password_username\",\n    \"application_password_password\",\n  ]);\n  private parseApplicationPasswords(entry: AppPasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"application_password\") {\n      return;\n    }\n\n    cipher.name = entry.application_password_title;\n    cipher.notes = entry.application_password_notes;\n\n    cipher.login.username = entry.application_password_username;\n    cipher.login.password = entry.application_password_password;\n\n    this.importUnmappedFields(cipher, entry, this.APP_PWD_mappedValues);\n  }\n\n  readonly BOOKMARK_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"bookmark_title\",\n    \"bookmark_notes\",\n    \"bookmark_url\",\n  ]);\n  private parseBookmarks(entry: BookmarkEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"bookmark\") {\n      return;\n    }\n\n    cipher.name = entry.bookmark_title;\n    cipher.notes = entry.bookmark_notes;\n\n    cipher.login.uris = this.makeUriArray(entry.bookmark_url);\n\n    this.importUnmappedFields(cipher, entry, this.BOOKMARK_mappedValues);\n  }\n\n  readonly NOTES_mappedValues = new Set([\"type\", \"name\", \"note_title\", \"note_notes\"]);\n  private parseNotes(entry: NotesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"note\") {\n      return;\n    }\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.note_title;\n    cipher.notes = entry.note_notes;\n\n    this.importUnmappedFields(cipher, entry, this.NOTES_mappedValues);\n  }\n\n  readonly TOTP_mappedValues = new Set([\"type\", \"name\", \"totp_title\", \"totp_notes\", \"totp_code\"]);\n  private parseTOTP(entry: TOTPEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"totp\") {\n      return;\n    }\n\n    cipher.name = entry.totp_title;\n    cipher.notes = entry.totp_notes;\n\n    cipher.login.totp = entry.totp_code;\n\n    this.importUnmappedFields(cipher, entry, this.TOTP_mappedValues);\n  }\n\n  readonly ENV_VARIABLES_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"environment_variables_title\",\n    \"environment_variables_notes\",\n    \"environment_variables_variables\",\n  ]);\n  private parseEnvironmentVariables(entry: EnvironmentVariablesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"environment_variables\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.environment_variables_title;\n    cipher.notes = entry.environment_variables_notes;\n\n    entry.environment_variables_variables.forEach((KvPair) => {\n      this.processKvp(cipher, KvPair.key, KvPair.value);\n    });\n\n    this.importUnmappedFields(cipher, entry, this.ENV_VARIABLES_mappedValues);\n  }\n\n  readonly GPG_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"mail_gpg_own_key_title\",\n    \"mail_gpg_own_key_public\",\n    \"mail_gpg_own_key_name\",\n    \"mail_gpg_own_key_email\",\n    \"mail_gpg_own_key_private\",\n  ]);\n  private parseGPG(entry: GPGEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"mail_gpg_own_key\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.mail_gpg_own_key_title;\n    cipher.notes = entry.mail_gpg_own_key_public;\n\n    this.processKvp(cipher, \"mail_gpg_own_key_name\", entry.mail_gpg_own_key_name);\n    this.processKvp(cipher, \"mail_gpg_own_key_email\", entry.mail_gpg_own_key_email);\n    this.processKvp(\n      cipher,\n      \"mail_gpg_own_key_private\",\n      entry.mail_gpg_own_key_private,\n      FieldType.Hidden\n    );\n\n    this.importUnmappedFields(cipher, entry, this.GPG_mappedValues);\n  }\n\n  private importUnmappedFields(\n    cipher: CipherView,\n    entry: PsonoItemTypes,\n    mappedValues: Set<string>\n  ) {\n    const unmappedFields = Object.keys(entry).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = entry as any;\n      this.processKvp(cipher, key, item[key].toString());\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RememBearCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.trash === \"true\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.notes);\n      if (value.type === \"LoginItem\") {\n        cipher.login.uris = this.makeUriArray(value.website);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      } else if (value.type === \"CreditCardItem\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.verification);\n\n        try {\n          const expMonth = this.getValueOrDefault(value.expiryMonth);\n          if (expMonth != null) {\n            const expMonthNumber = parseInt(expMonth, null);\n            if (expMonthNumber != null && expMonthNumber >= 1 && expMonthNumber <= 12) {\n              cipher.card.expMonth = expMonthNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n        try {\n          const expYear = this.getValueOrDefault(value.expiryYear);\n          if (expYear != null) {\n            const expYearNumber = parseInt(expYear, null);\n            if (expYearNumber != null) {\n              cipher.card.expYear = expYearNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n\n        const pin = this.getValueOrDefault(value.pin);\n        if (pin != null) {\n          this.processKvp(cipher, \"PIN\", pin);\n        }\n        const zip = this.getValueOrDefault(value.zipCode);\n        if (zip != null) {\n          this.processKvp(cipher, \"Zip Code\", zip);\n        }\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RoboFormCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let i = 1;\n    results.forEach((value) => {\n      const folder =\n        !this.isNullOrWhitespace(value.Folder) && value.Folder.startsWith(\"/\")\n          ? value.Folder.replace(\"/\", \"\")\n          : value.Folder;\n      const folderName = !this.isNullOrWhitespace(folder) ? folder : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Login);\n      cipher.login.password = this.getValueOrDefault(value.Pwd);\n      cipher.login.uris = this.makeUriArray(value.Url);\n\n      if (!this.isNullOrWhitespace(value.Rf_fields)) {\n        let fields: string[] = [value.Rf_fields];\n        if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n          fields = fields.concat(value.__parsed_extra);\n        }\n        fields.forEach((field: string) => {\n          const parts = field.split(\":\");\n          if (parts.length < 3) {\n            return;\n          }\n          const key = parts[0] === \"-no-name-\" ? null : parts[0];\n          const val = parts.length === 4 && parts[2] === \"rck\" ? parts[1] : parts[2];\n          this.processKvp(cipher, key, val);\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n\n      if (\n        i === results.length &&\n        cipher.name === \"--\" &&\n        this.isNullOrWhitespace(cipher.login.password)\n      ) {\n        return;\n      }\n\n      result.ciphers.push(cipher);\n      i++;\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafariCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url ?? value.URL);\n      cipher.login.totp = this.getValueOrDefault(value.OTPAuth);\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafeInCloudXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const db = doc.querySelector(\"database\");\n    if (db == null) {\n      result.errorMessage = \"Missing `database` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, number>();\n\n    Array.from(doc.querySelectorAll(\"database > label\")).forEach((labelEl) => {\n      const name = labelEl.getAttribute(\"name\");\n      const id = labelEl.getAttribute(\"id\");\n      if (!this.isNullOrWhitespace(name) && !this.isNullOrWhitespace(id)) {\n        foldersMap.set(id, result.folders.length);\n        const folder = new FolderView();\n        folder.name = name;\n        result.folders.push(folder);\n      }\n    });\n\n    Array.from(doc.querySelectorAll(\"database > card\")).forEach((cardEl) => {\n      if (cardEl.getAttribute(\"template\") === \"true\" || cardEl.getAttribute(\"deleted\") === \"true\") {\n        return;\n      }\n\n      const labelIdEl = this.querySelectorDirectChild(cardEl, \"label_id\");\n      if (labelIdEl != null) {\n        const labelId = labelIdEl.textContent;\n        if (!this.isNullOrWhitespace(labelId) && foldersMap.has(labelId)) {\n          result.folderRelationships.push([result.ciphers.length, foldersMap.get(labelId)]);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(cardEl.getAttribute(\"title\"), \"--\");\n\n      if (cardEl.getAttribute(\"star\") === \"true\") {\n        cipher.favorite = true;\n      }\n\n      const cardType = cardEl.getAttribute(\"type\");\n      if (cardType === \"note\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      } else {\n        Array.from(this.querySelectorAllDirectChild(cardEl, \"field\")).forEach((fieldEl) => {\n          const text = fieldEl.textContent;\n          if (this.isNullOrWhitespace(text)) {\n            return;\n          }\n          const name = fieldEl.getAttribute(\"name\");\n          const fieldType = this.getValueOrDefault(fieldEl.getAttribute(\"type\"), \"\").toLowerCase();\n          if (fieldType === \"login\") {\n            cipher.login.username = text;\n          } else if (fieldType === \"password\" || fieldType === \"secret\") {\n            // safeInCloud allows for more than one password. we just insert them here and find the one used as password later\n            this.processKvp(cipher, name, text, FieldType.Hidden);\n          } else if (fieldType === \"one_time_password\") {\n            cipher.login.totp = text;\n          } else if (fieldType === \"notes\") {\n            cipher.notes += text + \"\\n\";\n          } else if (fieldType === \"weblogin\" || fieldType === \"website\") {\n            cipher.login.uris = this.makeUriArray(text);\n          } else {\n            this.processKvp(cipher, name, text);\n          }\n        });\n      }\n\n      Array.from(this.querySelectorAllDirectChild(cardEl, \"notes\")).forEach((notesEl) => {\n        cipher.notes += notesEl.textContent + \"\\n\";\n      });\n\n      this.setPassword(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  // Choose a password from all passwords. Take one that has password in its name, or the first one if there is no such entry\n  // if its name is password, we can safely remove it form the fields. otherwise, it would maybe be best to keep it as a hidden field\n  setPassword(cipher: CipherView) {\n    const candidates = cipher.fields.filter((field) => field.type === FieldType.Hidden);\n    if (!candidates.length) {\n      return;\n    }\n\n    let choice: FieldView;\n    for (const field of candidates) {\n      if (this.passwordFieldNames.includes(field.name.toLowerCase())) {\n        choice = field;\n        cipher.fields = cipher.fields.filter((f) => f !== choice);\n        break;\n      }\n    }\n\n    if (!choice) {\n      choice = candidates[0];\n    }\n\n    cipher.login.password = choice.value;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SaferPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.nameFromUrl(value.url), \"--\");\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SecureSafeCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title);\n      cipher.notes = this.getValueOrDefault(value.Comment);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SplashIdCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      this.processFolder(result, this.getValueOrDefault(value[value.length - 1]));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 2], \"\");\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n\n      if (value[0] === \"Web Logins\" || value[0] === \"Servers\" || value[0] === \"Email Accounts\") {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n        cipher.login.password = this.getValueOrDefault(value[3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n        this.parseFieldsToNotes(cipher, 5, value);\n      } else {\n        this.parseFieldsToNotes(cipher, 2, value);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFieldsToNotes(cipher: CipherView, startIndex: number, value: any) {\n    // last 3 rows do not get parsed\n    for (let i = startIndex; i < value.length - 3; i++) {\n      if (this.isNullOrWhitespace(value[i])) {\n        continue;\n      }\n      cipher.notes += value[i] + \"\\n\";\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class StickyPasswordXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const loginNodes = doc.querySelectorAll(\"root > Database > Logins > Login\");\n    Array.from(loginNodes).forEach((loginNode) => {\n      const accountId = loginNode.getAttribute(\"ID\");\n      if (this.isNullOrWhitespace(accountId)) {\n        return;\n      }\n\n      const usernameText = loginNode.getAttribute(\"Name\");\n      const passwordText = loginNode.getAttribute(\"Password\");\n      let titleText: string = null;\n      let linkText: string = null;\n      let notesText: string = null;\n      let groupId: string = null;\n      let groupText: string = null;\n\n      const accountLogin = doc.querySelector(\n        \"root > Database > Accounts > Account > \" +\n          'LoginLinks > Login[SourceLoginID=\"' +\n          accountId +\n          '\"]'\n      );\n      if (accountLogin != null) {\n        const account = accountLogin.parentElement.parentElement;\n        if (account != null) {\n          titleText = account.getAttribute(\"Name\");\n          linkText = account.getAttribute(\"Link\");\n          groupId = account.getAttribute(\"ParentID\");\n          notesText = account.getAttribute(\"Comments\");\n          if (!this.isNullOrWhitespace(notesText)) {\n            notesText = notesText.split(\"/n\").join(\"\\n\");\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(groupId)) {\n        groupText = this.buildGroupText(doc, groupId, \"\");\n        this.processFolder(result, groupText);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(titleText, \"--\");\n      cipher.notes = this.getValueOrDefault(notesText);\n      cipher.login.username = this.getValueOrDefault(usernameText);\n      cipher.login.password = this.getValueOrDefault(passwordText);\n      cipher.login.uris = this.makeUriArray(linkText);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  buildGroupText(doc: Document, groupId: string, groupText: string): string {\n    const group = doc.querySelector('root > Database > Groups > Group[ID=\"' + groupId + '\"]');\n    if (group == null) {\n      return groupText;\n    }\n    if (!this.isNullOrWhitespace(groupText)) {\n      groupText = \"/\" + groupText;\n    }\n    groupText = group.getAttribute(\"Name\") + groupText;\n    return this.buildGroupText(doc, group.getAttribute(\"ParentID\"), groupText);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst PropertiesToIgnore = [\n  \"kind\",\n  \"autologin\",\n  \"favorite\",\n  \"hexcolor\",\n  \"protectedwithpassword\",\n  \"subdomainonly\",\n  \"type\",\n  \"tk_export_version\",\n  \"note\",\n  \"title\",\n  \"document_content\",\n];\n\nexport class TrueKeyCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.favorite, \"\").toLowerCase() === \"true\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.notes = this.getValueOrDefault(value.memo, \"\");\n      cipher.login.username = this.getValueOrDefault(value.login);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n\n      if (value.kind !== \"login\") {\n        cipher.name = this.getValueOrDefault(value.title, \"--\");\n        cipher.notes = this.getValueOrDefault(value.note, \"\");\n      }\n\n      if (value.kind === \"cc\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        if (!this.isNullOrWhitespace(value.expiryDate)) {\n          try {\n            const expDate = new Date(value.expiryDate);\n            cipher.card.expYear = expDate.getFullYear().toString();\n            cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n          } catch {\n            // Ignore error\n          }\n        }\n      } else if (value.kind !== \"login\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = this.getValueOrDefault(value.document_content, \"\");\n        }\n        for (const property in value) {\n          if (\n            value.hasOwnProperty(property) && // eslint-disable-line\n            PropertiesToIgnore.indexOf(property.toLowerCase()) < 0 &&\n            !this.isNullOrWhitespace(value[property])\n          ) {\n            this.processKvp(cipher, property, value[property]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class UpmCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length !== 5) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.notes = this.getValueOrDefault(value[4]);\n      cipher.login.username = this.getValueOrDefault(value[1]);\n      cipher.login.password = this.getValueOrDefault(value[2]);\n      cipher.login.uris = this.makeUriArray(value[3]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class YotiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User name\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ZohoVaultCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (\n        this.isNullOrWhitespace(value[\"Password Name\"]) &&\n        this.isNullOrWhitespace(value[\"Secret Name\"])\n      ) {\n        return;\n      }\n      this.processFolder(result, this.getValueOrDefault(value.ChamberName));\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite, \"0\") === \"1\";\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(\n        value[\"Password Name\"],\n        this.getValueOrDefault(value[\"Secret Name\"], \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(\n        this.getValueOrDefault(value[\"Password URL\"], this.getValueOrDefault(value[\"Secret URL\"]))\n      );\n      this.parseData(cipher, value.SecretData);\n      this.parseData(cipher, value.CustomData);\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseData(cipher: CipherView, data: string) {\n    if (this.isNullOrWhitespace(data)) {\n      return;\n    }\n    const dataLines = this.splitNewLine(data);\n    dataLines.forEach((line) => {\n      const delimPosition = line.indexOf(\":\");\n      if (delimPosition < 0) {\n        return;\n      }\n      const field = line.substring(0, delimPosition);\n      const value = line.length > delimPosition ? line.substring(delimPosition + 1) : null;\n      if (\n        this.isNullOrWhitespace(field) ||\n        this.isNullOrWhitespace(value) ||\n        field === \"SecretType\"\n      ) {\n        return;\n      }\n      const fieldLower = field.toLowerCase();\n      if (cipher.login.username == null && this.usernameFieldNames.indexOf(fieldLower) > -1) {\n        cipher.login.username = value;\n      } else if (\n        cipher.login.password == null &&\n        this.passwordFieldNames.indexOf(fieldLower) > -1\n      ) {\n        cipher.login.password = value;\n      } else {\n        this.processKvp(cipher, field, value);\n      }\n    });\n  }\n}\n","export interface ImportOption {\n  id: string;\n  name: string;\n}\n\nexport const featuredImportOptions = [\n  { id: \"bitwardenjson\", name: \"Bitwarden (json)\" },\n  { id: \"bitwardencsv\", name: \"Bitwarden (csv)\" },\n  { id: \"chromecsv\", name: \"Chrome (csv)\" },\n  { id: \"dashlanecsv\", name: \"Dashlane (csv)\" },\n  { id: \"firefoxcsv\", name: \"Firefox (csv)\" },\n  { id: \"keepass2xml\", name: \"KeePass 2 (xml)\" },\n  { id: \"lastpasscsv\", name: \"LastPass (csv)\" },\n  { id: \"safaricsv\", name: \"Safari and macOS (csv)\" },\n  { id: \"1password1pux\", name: \"1Password (1pux)\" },\n] as const;\n\nexport const regularImportOptions = [\n  { id: \"keepassxcsv\", name: \"KeePassX (csv)\" },\n  { id: \"1password1pif\", name: \"1Password (1pif)\" },\n  { id: \"1passwordwincsv\", name: \"1Password 6 and 7 Windows (csv)\" },\n  { id: \"1passwordmaccsv\", name: \"1Password 6 and 7 Mac (csv)\" },\n  { id: \"dashlanejson\", name: \"Dashlane (json)\" },\n  { id: \"roboformcsv\", name: \"RoboForm (csv)\" },\n  { id: \"keepercsv\", name: \"Keeper (csv)\" },\n  // Temporarily remove this option for the Feb release\n  // { id: \"keeperjson\", name: \"Keeper (json)\" },\n  { id: \"enpasscsv\", name: \"Enpass (csv)\" },\n  { id: \"enpassjson\", name: \"Enpass (json)\" },\n  { id: \"safeincloudxml\", name: \"SafeInCloud (xml)\" },\n  { id: \"pwsafexml\", name: \"Password Safe (xml)\" },\n  { id: \"stickypasswordxml\", name: \"Sticky Password (xml)\" },\n  { id: \"msecurecsv\", name: \"mSecure (csv)\" },\n  { id: \"truekeycsv\", name: \"True Key (csv)\" },\n  { id: \"passwordbossjson\", name: \"Password Boss (json)\" },\n  { id: \"zohovaultcsv\", name: \"Zoho Vault (csv)\" },\n  { id: \"splashidcsv\", name: \"SplashID (csv)\" },\n  { id: \"passworddragonxml\", name: \"Password Dragon (xml)\" },\n  { id: \"padlockcsv\", name: \"Padlock (csv)\" },\n  { id: \"passboltcsv\", name: \"Passbolt (csv)\" },\n  { id: \"clipperzhtml\", name: \"Clipperz (html)\" },\n  { id: \"aviracsv\", name: \"Avira (csv)\" },\n  { id: \"saferpasscsv\", name: \"SaferPass (csv)\" },\n  { id: \"upmcsv\", name: \"Universal Password Manager (csv)\" },\n  { id: \"ascendocsv\", name: \"Ascendo DataVault (csv)\" },\n  { id: \"meldiumcsv\", name: \"Meldium (csv)\" },\n  { id: \"passkeepcsv\", name: \"PassKeep (csv)\" },\n  { id: \"operacsv\", name: \"Opera (csv)\" },\n  { id: \"vivaldicsv\", name: \"Vivaldi (csv)\" },\n  { id: \"gnomejson\", name: \"GNOME Passwords and Keys/Seahorse (json)\" },\n  { id: \"blurcsv\", name: \"Blur (csv)\" },\n  { id: \"passwordagentcsv\", name: \"Password Agent (csv)\" },\n  { id: \"passpackcsv\", name: \"Passpack (csv)\" },\n  { id: \"passmanjson\", name: \"Passman (json)\" },\n  { id: \"avastcsv\", name: \"Avast Passwords (csv)\" },\n  { id: \"avastjson\", name: \"Avast Passwords (json)\" },\n  { id: \"fsecurefsk\", name: \"F-Secure KEY (fsk)\" },\n  { id: \"kasperskytxt\", name: \"Kaspersky Password Manager (txt)\" },\n  { id: \"remembearcsv\", name: \"RememBear (csv)\" },\n  { id: \"passwordwallettxt\", name: \"PasswordWallet (txt)\" },\n  { id: \"mykicsv\", name: \"Myki (csv)\" },\n  { id: \"securesafecsv\", name: \"SecureSafe (csv)\" },\n  { id: \"logmeoncecsv\", name: \"LogMeOnce (csv)\" },\n  { id: \"blackberrycsv\", name: \"BlackBerry Password Keeper (csv)\" },\n  { id: \"buttercupcsv\", name: \"Buttercup (csv)\" },\n  { id: \"codebookcsv\", name: \"Codebook (csv)\" },\n  { id: \"encryptrcsv\", name: \"Encryptr (csv)\" },\n  { id: \"yoticsv\", name: \"Yoti (csv)\" },\n  { id: \"nordpasscsv\", name: \"Nordpass (csv)\" },\n  { id: \"psonojson\", name: \"Psono (json)\" },\n  { id: \"passkyjson\", name: \"Passky (json)\" },\n] as const;\n\nexport type ImportType =\n  | (typeof featuredImportOptions)[number][\"id\"]\n  | (typeof regularImportOptions)[number][\"id\"];\n","import { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\nimport { KvpRequest } from \"@bitwarden/common/models/request/kvp.request\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherRequest } from \"@bitwarden/common/vault/models/request/cipher.request\";\nimport { CollectionWithIdRequest } from \"@bitwarden/common/vault/models/request/collection-with-id.request\";\nimport { FolderWithIdRequest } from \"@bitwarden/common/vault/models/request/folder-with-id.request\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport {\n  AscendoCsvImporter,\n  AvastCsvImporter,\n  AvastJsonImporter,\n  AviraCsvImporter,\n  BitwardenCsvImporter,\n  BitwardenPasswordProtectedImporter,\n  BlackBerryCsvImporter,\n  BlurCsvImporter,\n  ButtercupCsvImporter,\n  ChromeCsvImporter,\n  ClipperzHtmlImporter,\n  CodebookCsvImporter,\n  DashlaneCsvImporter,\n  DashlaneJsonImporter,\n  EncryptrCsvImporter,\n  EnpassCsvImporter,\n  EnpassJsonImporter,\n  FirefoxCsvImporter,\n  FSecureFskImporter,\n  GnomeJsonImporter,\n  KasperskyTxtImporter,\n  KeePass2XmlImporter,\n  KeePassXCsvImporter,\n  KeeperCsvImporter,\n  // KeeperJsonImporter,\n  LastPassCsvImporter,\n  LogMeOnceCsvImporter,\n  MSecureCsvImporter,\n  MeldiumCsvImporter,\n  MykiCsvImporter,\n  NordPassCsvImporter,\n  OnePassword1PifImporter,\n  OnePassword1PuxImporter,\n  OnePasswordMacCsvImporter,\n  OnePasswordWinCsvImporter,\n  PadlockCsvImporter,\n  PassKeepCsvImporter,\n  PasskyJsonImporter,\n  PassmanJsonImporter,\n  PasspackCsvImporter,\n  PasswordAgentCsvImporter,\n  PasswordBossJsonImporter,\n  PasswordDragonXmlImporter,\n  PasswordSafeXmlImporter,\n  PasswordWalletTxtImporter,\n  PsonoJsonImporter,\n  RememBearCsvImporter,\n  RoboFormCsvImporter,\n  SafariCsvImporter,\n  SafeInCloudXmlImporter,\n  SaferPassCsvImporter,\n  SecureSafeCsvImporter,\n  SplashIdCsvImporter,\n  StickyPasswordXmlImporter,\n  TrueKeyCsvImporter,\n  UpmCsvImporter,\n  YotiCsvImporter,\n  ZohoVaultCsvImporter,\n} from \"../importers\";\nimport { Importer } from \"../importers/importer\";\nimport {\n  featuredImportOptions,\n  ImportOption,\n  ImportType,\n  regularImportOptions,\n} from \"../models/import-options\";\nimport { ImportResult } from \"../models/import-result\";\nimport { ImportApiServiceAbstraction } from \"../services/import-api.service.abstraction\";\nimport { ImportServiceAbstraction } from \"../services/import.service.abstraction\";\n\nexport class ImportService implements ImportServiceAbstraction {\n  featuredImportOptions = featuredImportOptions as readonly ImportOption[];\n\n  regularImportOptions = regularImportOptions as readonly ImportOption[];\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private importApiService: ImportApiServiceAbstraction,\n    private i18nService: I18nService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService\n  ) {}\n\n  getImportOptions(): ImportOption[] {\n    return this.featuredImportOptions.concat(this.regularImportOptions);\n  }\n\n  async import(\n    importer: Importer,\n    fileContents: string,\n    organizationId: string = null\n  ): Promise<ImportResult> {\n    const importResult = await importer.parse(fileContents);\n    if (!importResult.success) {\n      if (!Utils.isNullOrWhitespace(importResult.errorMessage)) {\n        throw new Error(importResult.errorMessage);\n      }\n      throw new Error(this.i18nService.t(\"importFormatError\"));\n    }\n\n    if (importResult.folders.length === 0 && importResult.ciphers.length === 0) {\n      throw new Error(this.i18nService.t(\"importNothingError\"));\n    }\n\n    if (importResult.ciphers.length > 0) {\n      const halfway = Math.floor(importResult.ciphers.length / 2);\n      const last = importResult.ciphers.length - 1;\n\n      if (\n        this.badData(importResult.ciphers[0]) &&\n        this.badData(importResult.ciphers[halfway]) &&\n        this.badData(importResult.ciphers[last])\n      ) {\n        throw new Error(this.i18nService.t(\"importFormatError\"));\n      }\n    }\n\n    try {\n      if (organizationId != null) {\n        await this.handleOrganizationalImport(importResult, organizationId);\n      } else {\n        await this.handleIndividualImport(importResult);\n      }\n    } catch (error) {\n      const errorResponse = new ErrorResponse(error, 400);\n      throw this.handleServerError(errorResponse, importResult);\n    }\n    return importResult;\n  }\n\n  getImporter(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>,\n    organizationId: string = null\n  ): Importer {\n    if (promptForPassword_callback == null) {\n      return null;\n    }\n\n    const importer = this.getImporterInstance(format, promptForPassword_callback);\n    if (importer == null) {\n      return null;\n    }\n    importer.organizationId = organizationId;\n    return importer;\n  }\n\n  private getImporterInstance(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>\n  ) {\n    if (format == null) {\n      return null;\n    }\n\n    switch (format) {\n      case \"bitwardencsv\":\n        return new BitwardenCsvImporter();\n      case \"bitwardenjson\":\n      case \"bitwardenpasswordprotected\":\n        return new BitwardenPasswordProtectedImporter(\n          this.cryptoService,\n          this.i18nService,\n          promptForPassword_callback\n        );\n      case \"lastpasscsv\":\n      case \"passboltcsv\":\n        return new LastPassCsvImporter();\n      case \"keepassxcsv\":\n        return new KeePassXCsvImporter();\n      case \"aviracsv\":\n        return new AviraCsvImporter();\n      case \"blurcsv\":\n        return new BlurCsvImporter();\n      case \"safeincloudxml\":\n        return new SafeInCloudXmlImporter();\n      case \"padlockcsv\":\n        return new PadlockCsvImporter();\n      case \"keepass2xml\":\n        return new KeePass2XmlImporter();\n      case \"chromecsv\":\n      case \"operacsv\":\n      case \"vivaldicsv\":\n        return new ChromeCsvImporter();\n      case \"firefoxcsv\":\n        return new FirefoxCsvImporter();\n      case \"upmcsv\":\n        return new UpmCsvImporter();\n      case \"saferpasscsv\":\n        return new SaferPassCsvImporter();\n      case \"safaricsv\":\n        return new SafariCsvImporter();\n      case \"meldiumcsv\":\n        return new MeldiumCsvImporter();\n      case \"1password1pif\":\n        return new OnePassword1PifImporter();\n      case \"1password1pux\":\n        return new OnePassword1PuxImporter();\n      case \"1passwordwincsv\":\n        return new OnePasswordWinCsvImporter();\n      case \"1passwordmaccsv\":\n        return new OnePasswordMacCsvImporter();\n      case \"keepercsv\":\n        return new KeeperCsvImporter();\n      // case \"keeperjson\":\n      //   return new KeeperJsonImporter();\n      case \"passworddragonxml\":\n        return new PasswordDragonXmlImporter();\n      case \"enpasscsv\":\n        return new EnpassCsvImporter();\n      case \"enpassjson\":\n        return new EnpassJsonImporter();\n      case \"pwsafexml\":\n        return new PasswordSafeXmlImporter();\n      case \"dashlanecsv\":\n        return new DashlaneCsvImporter();\n      case \"dashlanejson\":\n        return new DashlaneJsonImporter();\n      case \"msecurecsv\":\n        return new MSecureCsvImporter();\n      case \"stickypasswordxml\":\n        return new StickyPasswordXmlImporter();\n      case \"truekeycsv\":\n        return new TrueKeyCsvImporter();\n      case \"clipperzhtml\":\n        return new ClipperzHtmlImporter();\n      case \"roboformcsv\":\n        return new RoboFormCsvImporter();\n      case \"ascendocsv\":\n        return new AscendoCsvImporter();\n      case \"passwordbossjson\":\n        return new PasswordBossJsonImporter();\n      case \"zohovaultcsv\":\n        return new ZohoVaultCsvImporter();\n      case \"splashidcsv\":\n        return new SplashIdCsvImporter();\n      case \"passkeepcsv\":\n        return new PassKeepCsvImporter();\n      case \"gnomejson\":\n        return new GnomeJsonImporter();\n      case \"passwordagentcsv\":\n        return new PasswordAgentCsvImporter();\n      case \"passpackcsv\":\n        return new PasspackCsvImporter();\n      case \"passmanjson\":\n        return new PassmanJsonImporter();\n      case \"avastcsv\":\n        return new AvastCsvImporter();\n      case \"avastjson\":\n        return new AvastJsonImporter();\n      case \"fsecurefsk\":\n        return new FSecureFskImporter();\n      case \"kasperskytxt\":\n        return new KasperskyTxtImporter();\n      case \"remembearcsv\":\n        return new RememBearCsvImporter();\n      case \"passwordwallettxt\":\n        return new PasswordWalletTxtImporter();\n      case \"mykicsv\":\n        return new MykiCsvImporter();\n      case \"securesafecsv\":\n        return new SecureSafeCsvImporter();\n      case \"logmeoncecsv\":\n        return new LogMeOnceCsvImporter();\n      case \"blackberrycsv\":\n        return new BlackBerryCsvImporter();\n      case \"buttercupcsv\":\n        return new ButtercupCsvImporter();\n      case \"codebookcsv\":\n        return new CodebookCsvImporter();\n      case \"encryptrcsv\":\n        return new EncryptrCsvImporter();\n      case \"yoticsv\":\n        return new YotiCsvImporter();\n      case \"nordpasscsv\":\n        return new NordPassCsvImporter();\n      case \"psonojson\":\n        return new PsonoJsonImporter();\n      case \"passkyjson\":\n        return new PasskyJsonImporter();\n      default:\n        return null;\n    }\n  }\n\n  private async handleIndividualImport(importResult: ImportResult) {\n    const request = new ImportCiphersRequest();\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.folders != null) {\n      for (let i = 0; i < importResult.folders.length; i++) {\n        const f = await this.folderService.encrypt(importResult.folders[i]);\n        request.folders.push(new FolderWithIdRequest(f));\n      }\n    }\n    if (importResult.folderRelationships != null) {\n      importResult.folderRelationships.forEach((r) =>\n        request.folderRelationships.push(new KvpRequest(r[0], r[1]))\n      );\n    }\n    return await this.importApiService.postImportCiphers(request);\n  }\n\n  private async handleOrganizationalImport(importResult: ImportResult, organizationId: string) {\n    const request = new ImportOrganizationCiphersRequest();\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      importResult.ciphers[i].organizationId = organizationId;\n      const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.collections != null) {\n      for (let i = 0; i < importResult.collections.length; i++) {\n        importResult.collections[i].organizationId = organizationId;\n        const c = await this.collectionService.encrypt(importResult.collections[i]);\n        request.collections.push(new CollectionWithIdRequest(c));\n      }\n    }\n    if (importResult.collectionRelationships != null) {\n      importResult.collectionRelationships.forEach((r) =>\n        request.collectionRelationships.push(new KvpRequest(r[0], r[1]))\n      );\n    }\n    return await this.importApiService.postImportOrganizationCiphers(organizationId, request);\n  }\n\n  private badData(c: CipherView) {\n    return (\n      (c.name == null || c.name === \"--\") &&\n      c.type === CipherType.Login &&\n      c.login != null &&\n      Utils.isNullOrWhitespace(c.login.password)\n    );\n  }\n\n  private handleServerError(errorResponse: ErrorResponse, importResult: ImportResult): Error {\n    if (errorResponse.validationErrors == null) {\n      return new Error(errorResponse.message);\n    }\n\n    let errorMessage = \"\";\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const i = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Ciphers\":\n          item = importResult.ciphers[i];\n          itemType = CipherType[item.type];\n          break;\n        case \"Folders\":\n          item = importResult.folders[i];\n          itemType = \"Folder\";\n          break;\n        case \"Collections\":\n          item = importResult.collections[i];\n          itemType = \"Collection\";\n          break;\n        default:\n          return;\n      }\n\n      if (index > 0) {\n        errorMessage += \"\\n\\n\";\n      }\n\n      if (itemType !== \"Folder\" && itemType !== \"Collection\") {\n        errorMessage += \"[\" + (i + 1) + \"] \";\n      }\n\n      errorMessage += \"[\" + itemType + '] \"' + item.name + '\": ' + value;\n    });\n\n    return new Error(errorMessage);\n  }\n}\n"],"names":["disabledByPolicy","this","_disabledByPolicy","constructor","cryptoService","i18nService","platformUtilsService","exportService","eventCollectionService","policyService","win","logService","userVerificationService","formBuilder","fileDownloadService","dialogService","onSaved","exportForm","group","format","secret","filePassword","required","confirmFilePassword","fileEncryptionType","AccountEncrypted","formatOptions","name","value","destroy$","Subject","ngOnInit","policyAppliesToActiveUser$","DisablePersonalVaultExport","pipe","takeUntil","subscribe","policyAppliesToActiveUser","disable","merge","get","valueChanges","startWith","adjustValidators","ngOnDestroy","next","encryptedFormat","doExport","formPromise","getExportData","data","downloadFile","saved","collectEvent","setValue","clearValidators","e","error","submit","showToast","t","warningDialog","verifyUser","message","openSimpleDialog","title","key","content","acceptButtonText","type","WARNING","emit","FileEncrypted","getPasswordProtectedExport","getExport","getFileName","prefix","extension","collect","User_ClientExportedVault","reset","controls","enable","csv","fileName","download","blobData","blobOptions","ExportComponent","super","window","encryptedExportType","isFileEncryptedExport","markAllAsTouched","valid","confirmDescription","isAccountEncryptedExport","ref","confirmButtonText","modalTitle","firstValueFrom","closed","ImportSuccessDialogComponent","dialogRef","dataSource","buildResultList","logins","cards","identities","secureNotes","ciphers","map","c","Login","Card","SecureNote","Identity","list","push","icon","count","folders","length","collections","FilePasswordPromptComponent","markAsTouched","close","ImportComponent","importService","router","modalService","syncService","loading","organizationId","_importBlockedByPolicy","importBlockedByPolicy","onSuccessfulImport","navigate","setImportOptions","PersonalOwnership","importer","getImporter","getFilePassword","files","document","getElementById","fileContents","getFileContents","result","import","open","fullSync","getFormatInstructionTitle","results","featuredImportOptions","concat","importOptions","filter","o","id","regularImportOptions","sort","a","b","collator","compare","localeCompare","setSelectedFile","event","fileInputEl","target","fileSelected","heightAuto","buttonsStyling","iconHtml","input","inputValue","inputAttributes","readonly","titleText","text","showConfirmButton","onOpen","popupEl","querySelector","scrollTo","file","extract1PuxContent","Promise","resolve","reject","reader","FileReader","readAsText","onload","evt","pre","DOMParser","parseFromString","textContent","onerror","loadAsync","then","zip","async","dialog","ariaModal","lastValueFrom","complete","BoxRowDirective","elRef","el","nativeElement","formEls","Array","from","querySelectorAll","forEach","formEl","addEventListener","classList","add","remove","onClick","contains","tagName","toLowerCase","inputEl","click","focus","ExportScopeCalloutComponent","organizationService","stateService","show","hasOrganizations","scopeConfig","description","scopeIdentifier","getEmail","ImportApiServiceAbstraction","ImportApiService","apiService","postImportCiphers","request","send","postImportOrganizationCiphers","ImportServiceAbstraction","ImportCiphersRequest","folderRelationships","ImportOrganizationCiphersRequest","collectionRelationships","KvpRequest","CollectionWithIdRequest","collection","success","newLineRegex","passwordFieldNames","usernameFieldNames","notesFieldNames","uriFieldNames","parseCsvOptions","encoding","skipEmptyLines","organization","parseXml","doc","parseCsv","header","options","parseOptions","Object","assign","splitNewLine","join","trim","errors","row","warning","parseSingleRowCsv","rowData","isNullOrWhitespace","parsedRow","makeUriArray","uri","loginUri","fixUri","match","returnArr","u","indexOf","substring","nameFromUrl","url","hostname","getHostname","startsWith","replace","str","getValueOrDefault","defaultValue","split","setCardExpiration","cipher","expiration","expiryRegex","RegExp","expiryMatch","card","expMonth","groups","month","year","expYear","moveFoldersToCollections","r","f","querySelectorDirectChild","parentEl","query","els","querySelectorAllDirectChild","parentNode","initLoginCipher","favorite","notes","fields","login","cleanupCipher","processKvp","Text","search","field","processFolder","folderName","folderIndex","addFolder","i","convertToNoteIfNeeded","username","password","uris","secureNote","Generic","processFullName","fullName","nameParts","identity","firstName","lastName","middleName","slice","AscendoCsvImporter","parse","val","fieldLower","AvastCsvImporter","web","AvastJsonImporter","JSON","custName","note","pwd","loginName","label","cardholderName","holderName","number","cardNumber","code","cvv","brand","getCardBrandByPatterns","expirationDate","AviraCsvImporter","website","secondary_username","BlackBerryCsvImporter","grouping","fav","extra","ChromeCsvImporter","androidPatternRegex","test","BitwardenCsvImporter","col","addCollection","collectionIndex","folder","reprompt","parseInt","None","toString","console","delimPosition","lastIndexOf","substr","totp","login_totp","login_username","login_password","login_uri","BitwardenJsonImporter","items","encrypted","parseEncrypted","parseDecrypted","encKeyValidation_DO_NOT_EDIT","orgKey","getOrgKey","encKeyValidation","decryptToUtf8","errorMessage","groupingsMap","Map","toDomain","view","decrypt","set","collectionIds","passwordHistory","folderId","has","cId","toView","BitwardenPasswordProtectedImporter","promptForPassword_callback","parsedData","passwordProtected","cannotParseFile","checkPassword","encData","clearTextData","jdoc","makePinKey","salt","kdfType","kdfIterations","kdfMemory","kdfParallelism","BlurCsvImporter","domain","email","OfficialProps","ButtercupCsvImporter","URL","processingCustomFields","prop","hasOwnProperty","ClipperzHtmlImporter","textarea","entry","currentVersion","property","actionType","labelLower","CodebookCsvImporter","Category","Favorite","Entry","Note","Username","Email","Password","TOTP","Website","Phone","PIN","Account","Date","_mappedCredentialsColumns","Set","_mappedPersonalInfoAsIdentityColumns","_mappedSecureNoteColumns","DashlaneCsvImporter","x","parsePersonalInformationRecordAsIdentity","rowKeys","keys","category","parseCredentialsRecord","parsePaymentRecord","parseIdRecord","parsePersonalInformationRecord","parseSecureNoteRecords","otpSecret","importUnmappedFields","account_name","mappedValues","cc_number","expiration_month","expiration_year","account_holder","account_number","licenseNumber","passportNumber","state","ssn","first_name","middle_name","last_name","item_name","dataRow","phone","phone_number","address1","address","city","postalCode","country","item","HandledResults","DashlaneJsonImporter","ADDRESS","processAddress","AUTHENTIFIANT","processAuth","BANKSTATEMENT","processNote","IDCARD","PAYMENTMEANS_CREDITCARD","processCard","IDENTITY","processIdentity","credential","secondaryLogin","obj","pseudo","addressName","addressFull","zipcode","toUpperCase","bank","owner","nameProperty","EncryptrCsvImporter","Label","Notes","CVV","expiry","Expiry","expParts","EnpassCsvImporter","firstRow","containsField","fieldValue","fieldName","fieldNameLower","androidUrlRegex","EnpassJsonImporter","foldersMap","foldersIndexMap","folderTree","buildFolderTree","flattenFolderTree","template_type","processLogin","some","urls","cleanedValue","sensitive","Hidden","uuid","children","parent_uuid","titlePrefix","tree","FirefoxCsvImporter","FskEntryTypesEnum","FSecureFskImporter","parseEntry","service","handleLoginEntry","CreditCard","handleCreditCardEntry","creditNumber","creditCvv","creditExpiry","GnomeJsonImporter","keyRing","display_name","attributes","username_value","attr","NotesHeader","ApplicationsHeader","WebsitesHeader","Delimiter","KasperskyTxtImporter","notesData","applicationsData","websitesData","workingData","parts","parseDataCategory","applications","websites","n","w","nameKey","p","itemComment","itemCommentKey","l","colonIndex","size","KeePass2XmlImporter","KeePassFileNode","RootNode","rootGroup","traverse","node","isRootNode","groupPrefixName","groupName","nameEl","cipherIndex","entryString","valueEl","keyEl","attrs","ProtectInMemory","KeePassXCsvImporter","Title","Group","KeeperCsvImporter","LastPassCsvImporter","hasFolder","buildBaseCipher","parseSecureNote","parseCard","parseIdentity","ccnum","cardCipher","profilename","firstname","lastname","ccname","cccsc","ccexp","ccexpParts","middlename","company","address2","address3","charAt","extraParts","processedNote","typeParts","mappedData","parseSecureNoteMapping","Number","undefined","monthString","getMonth","isNaN","Company","State","Country","dataObj","processingNotes","extraPart","LogMeOnceCsvImporter","MeldiumCsvImporter","DisplayName","UserName","Url","MSecureCsvImporter","mappedBaseColumns","_mappedUserAccountColumns","_mappedCreditCardColumns","_mappedIdentityColumns","_mappedIdCardColumns","_mappedTwoFaColumns","_mappedUserNoteColumns","MykiCsvImporter","nickname","additionalInfo","twofaSecret","authToken","cardName","exp_month","exp_year","firstAddressLine","secondAddressLine","zipCode","idType","idName","idCountry","idNumber","NordPassCsvImporter","record","recordType","evaluateType","cardholdername","cardnumber","cvc","expirydate","full_name","CategoryEnum","LoginFieldTypeEnum","OnePassword1PifImporter","line","trashed","hmac","processStandardItem","processWinOpVaultItem","overview","URLs","details","parsePasswordHistory","notesPlain","parseFields","sections","section","openContents","faveIndex","typeName","location","secureContents","maxSize","h","time","ph","lastUsedDate","designationKey","valueKey","k","toUTCString","fieldDesignation","street","fieldType","OnePassword1PuxImporter","accounts","vaults","vault","categoryUuid","Database","WirelessRouter","Server","API_Credential","BankAccount","SoftwareLicense","EmailAccount","MedicalRecord","DriversLicense","OutdoorLicense","Membership","Passport","RewardsProgram","SocialSecurityNumber","favIndex","processOverview","processLoginFields","processDetails","processSections","tags","capitalize","inputString","loginFields","loginField","designation","CheckBox","Boolean","parseSectionFields","anyField","getFieldName","extractValue","fillLogin","fillApiCredentials","fillCreditCard","fillBankAccount","fillIdentity","fillDriversLicense","fillOutdoorLicense","fillMembership","fillPassport","fillRewardsProgram","fillSSN","email_address","provider","guarded","date","monthYear","historyItems","CipherImportContext","importRecord","lowerProperty","IgnoredProperties","OnePasswordCsvImporter","loginPropertyParsers","setLoginUsername","setLoginPassword","setLoginUris","creditCardPropertyParsers","setCreditCardNumber","setCreditCardVerification","setCreditCardCardholderName","setCreditCardExpiry","identityPropertyParsers","setIdentityFirstName","setIdentityInitial","setIdentityLastName","setIdentityUserName","setIdentityEmail","setIdentityPhone","setIdentityCompany","quoteChar","escapeChar","getProp","setNotes","setCipherType","altUsername","context","setKnownLoginValue","setKnownCreditCardValue","setKnownIdentityValue","setUnknownValue","entries","reduce","agg","getPropByRegexp","regexp","matchingKeys","getPropIncluding","includesMap","includes","func","bind","readableDate","OnePasswordMacCsvImporter","OnePasswordWinCsvImporter","setIdentityAddress","expSplit","PadlockCsvImporter","headers","v","tag","PassKeepCsvImporter","getValue","PasskyJsonImporter","passkyExport","passwords","PassmanJsonImporter","otp","custom_fields","customField","field_type","PasspackCsvImporter","tagsJson","Tags","tagJson","__parsed_extra","fieldsJson","extraFields","fieldJson","PasswordAgentCsvImporter","newVersion","altFormat","PasswordBossJsonImporter","login_url","identifiers","valObj","expDate","getFullYear","cf","PasswordDragonXmlImporter","records","categoryText","accountName","userId","PasswordSafeXmlImporter","passwordSafe","notesDelimiter","getAttribute","groupText","PasswordWalletTxtImporter","PsonoJsonImporter","WEBSITE_mappedValues","APP_PWD_mappedValues","BOOKMARK_mappedValues","NOTES_mappedValues","TOTP_mappedValues","ENV_VARIABLES_mappedValues","GPG_mappedValues","psonoExport","parseFolders","handleItemParsing","parsePsonoItem","parseWebsiteLogins","parseApplicationPasswords","parseEnvironmentVariables","parseTOTP","parseBookmarks","parseNotes","website_password_title","website_password_notes","website_password_username","website_password_password","website_password_url","website_password_auto_submit","website_password_url_filter","application_password_title","application_password_notes","application_password_username","application_password_password","bookmark_title","bookmark_notes","bookmark_url","note_title","note_notes","totp_title","totp_notes","totp_code","environment_variables_title","environment_variables_notes","environment_variables_variables","KvPair","parseGPG","mail_gpg_own_key_title","mail_gpg_own_key_public","mail_gpg_own_key_name","mail_gpg_own_key_email","mail_gpg_own_key_private","RememBearCsvImporter","trash","cardholder","verification","expiryMonth","expMonthNumber","expiryYear","expYearNumber","pin","RoboFormCsvImporter","Folder","Name","Pwd","Rf_fields","SafariCsvImporter","OTPAuth","SafeInCloudXmlImporter","labelEl","cardEl","labelIdEl","labelId","fieldEl","notesEl","setPassword","candidates","choice","SaferPassCsvImporter","SecureSafeCsvImporter","Comment","SplashIdCsvImporter","parseFieldsToNotes","startIndex","StickyPasswordXmlImporter","loginNodes","loginNode","accountId","usernameText","passwordText","linkText","notesText","groupId","accountLogin","account","parentElement","buildGroupText","PropertiesToIgnore","TrueKeyCsvImporter","memo","kind","expiryDate","document_content","UpmCsvImporter","YotiCsvImporter","ZohoVaultCsvImporter","ChamberName","parseData","SecretData","CustomData","ImportService","cipherService","folderService","importApiService","collectionService","getImportOptions","importResult","Error","halfway","Math","floor","last","badData","handleOrganizationalImport","handleIndividualImport","errorResponse","handleServerError","getImporterInstance","encrypt","validationErrors","index","itemType"],"sourceRoot":""}