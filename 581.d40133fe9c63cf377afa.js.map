{"version":3,"file":"581.d40133fe9c63cf377afa.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/import-success-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/import-success-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/file-password-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/file-password-prompt.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/directives/box-row.directive.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export-scope-callout.component.html","webpack://@bitwarden/web-vault/../../libs/angular/src/tools/export/components/export-scope-callout.component.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import-api.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import-api.service.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-organization-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/kvp.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/vault/models/request/collection-with-id.request.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-result.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/base-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/ascendo-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avast/avast-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avast/avast-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avira-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/blackberry-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/chrome-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-password-protected-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/blur-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/buttercup-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/clipperz-html-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/codebook-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/dashlane/dashlane-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/dashlane/dashlane-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/encryptr-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/enpass/enpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/enpass/enpass-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/firefox-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/fsecure/fsecure-fsk-types.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/fsecure/fsecure-fsk-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/gnome-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/kaspersky-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keepass2-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keepassx-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keeper/keeper-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/logmeonce-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/meldium-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/msecure-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/myki-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/nordpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/types/onepassword-1pux-importer-types.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-1pif-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-1pux-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/cipher-import-context.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-mac-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-win-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/padlock-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passkeep-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passky/passky-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passman-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passpack-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordagent-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordboss-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passworddragon-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordsafe-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordwallet-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/protonpass/types/protonpass-json-type.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/protonpass/protonpass-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/psono/psono-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/remembear-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/roboform-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/safari-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/safeincloud-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/saferpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/securesafe-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/splashid-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/stickypassword-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/truekey-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/upm-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/yoti-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/zohovault-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-options.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import.service.ts"],"sourcesContent":["import { Directive, EventEmitter, OnDestroy, OnInit, Output } from \"@angular/core\";\nimport { UntypedFormBuilder, Validators } from \"@angular/forms\";\nimport { merge, startWith, Subject, takeUntil } from \"rxjs\";\n\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { EncryptedExportType, EventType } from \"@bitwarden/common/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { DialogService } from \"@bitwarden/components\";\nimport { VaultExportServiceAbstraction } from \"@bitwarden/exporter/vault-export\";\n\n@Directive()\nexport class ExportComponent implements OnInit, OnDestroy {\n  @Output() onSaved = new EventEmitter();\n\n  formPromise: Promise<string>;\n  private _disabledByPolicy = false;\n\n  protected get disabledByPolicy(): boolean {\n    return this._disabledByPolicy;\n  }\n\n  exportForm = this.formBuilder.group({\n    format: [\"json\"],\n    secret: [\"\"],\n    filePassword: [\"\", Validators.required],\n    confirmFilePassword: [\"\", Validators.required],\n    fileEncryptionType: [EncryptedExportType.AccountEncrypted],\n  });\n\n  formatOptions = [\n    { name: \".json\", value: \"json\" },\n    { name: \".csv\", value: \"csv\" },\n    { name: \".json (Encrypted)\", value: \"encrypted_json\" },\n  ];\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected exportService: VaultExportServiceAbstraction,\n    protected eventCollectionService: EventCollectionService,\n    private policyService: PolicyService,\n    protected win: Window,\n    private logService: LogService,\n    private userVerificationService: UserVerificationService,\n    private formBuilder: UntypedFormBuilder,\n    protected fileDownloadService: FileDownloadService,\n    protected dialogService: DialogService\n  ) {}\n\n  async ngOnInit() {\n    this.policyService\n      .policyAppliesToActiveUser$(PolicyType.DisablePersonalVaultExport)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((policyAppliesToActiveUser) => {\n        this._disabledByPolicy = policyAppliesToActiveUser;\n        if (this.disabledByPolicy) {\n          this.exportForm.disable();\n        }\n      });\n\n    merge(\n      this.exportForm.get(\"format\").valueChanges,\n      this.exportForm.get(\"fileEncryptionType\").valueChanges\n    )\n      .pipe(takeUntil(this.destroy$))\n      .pipe(startWith(0))\n      .subscribe(() => this.adjustValidators());\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n  }\n\n  get encryptedFormat() {\n    return this.format === \"encrypted_json\";\n  }\n\n  protected async doExport() {\n    try {\n      this.formPromise = this.getExportData();\n      const data = await this.formPromise;\n      this.downloadFile(data);\n      this.saved();\n      await this.collectEvent();\n      this.exportForm.get(\"secret\").setValue(\"\");\n      this.exportForm.clearValidators();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async submit() {\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const acceptedWarning = await this.warningDialog();\n    if (!acceptedWarning) {\n      return;\n    }\n    const secret = this.exportForm.get(\"secret\").value;\n\n    try {\n      await this.userVerificationService.verifyUser(secret);\n    } catch (e) {\n      this.platformUtilsService.showToast(\"error\", this.i18nService.t(\"errorOccurred\"), e.message);\n      return;\n    }\n\n    this.doExport();\n  }\n\n  async warningDialog() {\n    if (this.encryptedFormat) {\n      return await this.dialogService.openSimpleDialog({\n        title: { key: \"confirmVaultExport\" },\n        content:\n          this.i18nService.t(\"encExportKeyWarningDesc\") +\n          \" \" +\n          this.i18nService.t(\"encExportAccountWarningDesc\"),\n        acceptButtonText: { key: \"exportVault\" },\n        type: \"warning\",\n      });\n    } else {\n      return await this.dialogService.openSimpleDialog({\n        title: { key: \"confirmVaultExport\" },\n        content: { key: \"exportWarningDesc\" },\n        acceptButtonText: { key: \"exportVault\" },\n        type: \"warning\",\n      });\n    }\n  }\n\n  protected saved() {\n    this.onSaved.emit();\n  }\n\n  protected getExportData() {\n    if (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    ) {\n      return this.exportService.getPasswordProtectedExport(this.filePassword);\n    } else {\n      return this.exportService.getExport(this.format, null);\n    }\n  }\n\n  protected getFileName(prefix?: string) {\n    let extension = this.format;\n    if (this.format === \"encrypted_json\") {\n      if (prefix == null) {\n        prefix = \"encrypted\";\n      } else {\n        prefix = \"encrypted_\" + prefix;\n      }\n      extension = \"json\";\n    }\n    return this.exportService.getFileName(prefix, extension);\n  }\n\n  protected async collectEvent(): Promise<void> {\n    await this.eventCollectionService.collect(EventType.User_ClientExportedVault);\n  }\n\n  get format() {\n    return this.exportForm.get(\"format\").value;\n  }\n\n  get filePassword() {\n    return this.exportForm.get(\"filePassword\").value;\n  }\n\n  get confirmFilePassword() {\n    return this.exportForm.get(\"confirmFilePassword\").value;\n  }\n\n  get fileEncryptionType() {\n    return this.exportForm.get(\"fileEncryptionType\").value;\n  }\n\n  adjustValidators() {\n    this.exportForm.get(\"confirmFilePassword\").reset();\n    this.exportForm.get(\"filePassword\").reset();\n\n    if (this.encryptedFormat && this.fileEncryptionType == EncryptedExportType.FileEncrypted) {\n      this.exportForm.controls.filePassword.enable();\n      this.exportForm.controls.confirmFilePassword.enable();\n    } else {\n      this.exportForm.controls.filePassword.disable();\n      this.exportForm.controls.confirmFilePassword.disable();\n    }\n  }\n\n  private downloadFile(csv: string): void {\n    const fileName = this.getFileName();\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: csv,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable tailwindcss/no-custom-classname -->\n<form\n  #form\n  (ngSubmit)=\"submit()\"\n  [appApiAction]=\"formPromise\"\n  [formGroup]=\"exportForm\"\n  *ngIf=\"exportForm\"\n>\n  <div class=\"page-header\">\n    <h1>{{ \"exportVault\" | i18n }}</h1>\n  </div>\n\n  <app-callout type=\"error\" title=\"{{ 'vaultExportDisabled' | i18n }}\" *ngIf=\"disabledByPolicy\">\n    {{ \"personalVaultExportPolicyInEffect\" | i18n }}\n  </app-callout>\n  <app-export-scope-callout\n    [organizationId]=\"organizationId\"\n    *ngIf=\"!disabledByPolicy\"\n  ></app-export-scope-callout>\n\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <bit-form-field>\n        <bit-label class=\"tw-text-lg\" for=\"format\">{{ \"fileFormat\" | i18n }}</bit-label>\n        <select bitInput name=\"format\" formControlName=\"format\">\n          <option *ngFor=\"let f of formatOptions\" [value]=\"f.value\">{{ f.name }}</option>\n        </select>\n      </bit-form-field>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"form-group col-6\">\n      <ng-container *ngIf=\"format === 'encrypted_json'\">\n        <div role=\"radiogroup\" aria-labelledby=\"exportTypeHeading\">\n          <label id=\"exportTypeHeading\" class=\"tw-semi-bold tw-text-lg\">\n            {{ \"exportTypeHeading\" | i18n }}\n          </label>\n\n          <div appBoxRow name=\"FileTypeOptions\" class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"AccountEncrypted\"\n                [value]=\"encryptedExportType.AccountEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.AccountEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"AccountEncrypted\">\n                {{ \"accountRestricted\" | i18n }}\n              </label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 pb-2 tw-text-sm\">\n            {{ \"accountRestrictedOptionDescription\" | i18n }}\n          </div>\n\n          <div class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"FileEncrypted\"\n                [value]=\"encryptedExportType.FileEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.FileEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"FileEncrypted\">{{\n                \"passwordProtected\" | i18n\n              }}</label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 tw-text-sm\">\n            {{ \"passwordProtectedOptionDescription\" | i18n }}\n          </div>\n        </div>\n        <br />\n\n        <ng-container *ngIf=\"fileEncryptionType == encryptedExportType.FileEncrypted\">\n          <bit-form-field>\n            <bit-label>{{ \"filePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"filePassword\"\n              formControlName=\"filePassword\"\n              name=\"password\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n            <bit-hint>{{ \"exportPasswordDescription\" | i18n }}</bit-hint>\n          </bit-form-field>\n          <bit-form-field>\n            <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"confirmFilePassword\"\n              formControlName=\"confirmFilePassword\"\n              name=\"confirmFilePassword\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n          </bit-form-field>\n        </ng-container>\n      </ng-container>\n\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary btn-submit\"\n        [disabled]=\"form.loading || disabledByPolicy\"\n        [ngClass]=\"{ manual: disabledByPolicy }\"\n      >\n        <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n        <span>{{ \"confirmFormat\" | i18n }}</span>\n      </button>\n    </div>\n  </div>\n</form>\n","import { Component } from \"@angular/core\";\nimport { UntypedFormBuilder } from \"@angular/forms\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { ExportComponent as BaseExportComponent } from \"@bitwarden/angular/tools/export/components/export.component\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { EncryptedExportType } from \"@bitwarden/common/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { DialogService } from \"@bitwarden/components\";\nimport { VaultExportServiceAbstraction } from \"@bitwarden/exporter/vault-export\";\n\nimport { openUserVerificationPrompt } from \"../../auth/shared/components/user-verification\";\n\n@Component({\n  selector: \"app-export\",\n  templateUrl: \"export.component.html\",\n})\nexport class ExportComponent extends BaseExportComponent {\n  organizationId: string;\n  encryptedExportType = EncryptedExportType;\n  protected showFilePassword: boolean;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    platformUtilsService: PlatformUtilsService,\n    exportService: VaultExportServiceAbstraction,\n    eventCollectionService: EventCollectionService,\n    policyService: PolicyService,\n    logService: LogService,\n    userVerificationService: UserVerificationService,\n    formBuilder: UntypedFormBuilder,\n    fileDownloadService: FileDownloadService,\n    dialogService: DialogService\n  ) {\n    super(\n      cryptoService,\n      i18nService,\n      platformUtilsService,\n      exportService,\n      eventCollectionService,\n      policyService,\n      window,\n      logService,\n      userVerificationService,\n      formBuilder,\n      fileDownloadService,\n      dialogService\n    );\n  }\n\n  async submit() {\n    if (this.isFileEncryptedExport && this.filePassword != this.confirmFilePassword) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"filePasswordAndConfirmFilePasswordDoNotMatch\")\n      );\n      return;\n    }\n\n    this.exportForm.markAllAsTouched();\n    if (!this.exportForm.valid) {\n      return;\n    }\n\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    this.doExport();\n  }\n\n  protected saved() {\n    super.saved();\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"exportSuccess\"));\n  }\n\n  private verifyUser() {\n    let confirmDescription = \"exportWarningDesc\";\n    if (this.isFileEncryptedExport) {\n      confirmDescription = \"fileEncryptedExportWarningDesc\";\n    } else if (this.isAccountEncryptedExport) {\n      confirmDescription = \"encExportKeyWarningDesc\";\n    }\n\n    const ref = openUserVerificationPrompt(this.dialogService, {\n      data: {\n        confirmDescription: confirmDescription,\n        confirmButtonText: \"exportVault\",\n        modalTitle: \"confirmVaultExport\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return firstValueFrom(ref.closed);\n  }\n\n  get isFileEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    );\n  }\n\n  get isAccountEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.AccountEncrypted\n    );\n  }\n}\n","<bit-dialog>\n  <span bitDialogTitle>\n    {{ \"importSuccess\" | i18n }}\n  </span>\n\n  <div bitDialogContent>\n    <span>{{ \"importSuccessNumberOfItems\" | i18n : this.data.ciphers.length }}</span>\n    <bit-table [dataSource]=\"dataSource\">\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"type\" | i18n }}</th>\n          <th bitCell>{{ \"total\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body let-rows$>\n        <tr bitRow *ngFor=\"let r of rows$ | async\">\n          <td bitCell>\n            <i class=\"bwi bwi-fw bwi-{{ r.icon }}\" aria-hidden=\"true\"></i>\n            {{ r.type | i18n }}\n          </td>\n          <td bitCell>{{ r.count }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </div>\n\n  <ng-container bitDialogFooter>\n    <button bitButton bitDialogClose buttonType=\"primary\" type=\"button\">\n      {{ \"ok\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { TableDataSource } from \"@bitwarden/components\";\nimport { ImportResult } from \"@bitwarden/importer\";\n\nexport interface ResultList {\n  icon: string;\n  type: string;\n  count: number;\n}\n\n@Component({\n  templateUrl: \"./import-success-dialog.component.html\",\n})\nexport class ImportSuccessDialogComponent implements OnInit {\n  protected dataSource = new TableDataSource<ResultList>();\n\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) public data: ImportResult) {}\n\n  ngOnInit(): void {\n    if (this.data != null) {\n      this.dataSource.data = this.buildResultList();\n    }\n  }\n\n  private buildResultList(): ResultList[] {\n    let logins = 0;\n    let cards = 0;\n    let identities = 0;\n    let secureNotes = 0;\n    this.data.ciphers.map((c) => {\n      switch (c.type) {\n        case CipherType.Login:\n          logins++;\n          break;\n        case CipherType.Card:\n          cards++;\n          break;\n        case CipherType.SecureNote:\n          secureNotes++;\n          break;\n        case CipherType.Identity:\n          identities++;\n          break;\n        default:\n          break;\n      }\n    });\n\n    const list: ResultList[] = [];\n    if (logins > 0) {\n      list.push({ icon: \"globe\", type: \"typeLogin\", count: logins });\n    }\n    if (cards > 0) {\n      list.push({ icon: \"credit-card\", type: \"typeCard\", count: cards });\n    }\n    if (identities > 0) {\n      list.push({ icon: \"id-card\", type: \"typeIdentity\", count: identities });\n    }\n    if (secureNotes > 0) {\n      list.push({ icon: \"sticky-note\", type: \"typeSecureNote\", count: secureNotes });\n    }\n    if (this.data.folders.length > 0) {\n      list.push({ icon: \"folder\", type: \"folders\", count: this.data.folders.length });\n    }\n    if (this.data.collections.length > 0) {\n      list.push({\n        icon: \"collection\",\n        type: \"collections\",\n        count: this.data.collections.length,\n      });\n    }\n    return list;\n  }\n}\n","import { DialogRef } from \"@angular/cdk/dialog\";\nimport { Component } from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\n\n@Component({\n  templateUrl: \"file-password-prompt.component.html\",\n})\nexport class FilePasswordPromptComponent {\n  filePassword = new FormControl(\"\", Validators.required);\n\n  constructor(public dialogRef: DialogRef) {}\n\n  submit() {\n    this.filePassword.markAsTouched();\n    if (!this.filePassword.valid) {\n      return;\n    }\n    this.dialogRef.close(this.filePassword.value);\n  }\n}\n","<form (submit)=\"submit()\">\n  <bit-dialog>\n    <span bitDialogTitle>\n      {{ \"confirmVaultImport\" | i18n }}\n    </span>\n\n    <div bitDialogContent>\n      {{ \"confirmVaultImportDesc\" | i18n }}\n      <bit-form-field class=\"tw-mt-6\">\n        <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n        <input\n          bitInput\n          type=\"password\"\n          name=\"filePassword\"\n          [formControl]=\"filePassword\"\n          appAutofocus\n          appInputVerbatim\n        />\n        <button type=\"button\" bitSuffix bitIconButton bitPasswordInputToggle></button>\n      </bit-form-field>\n    </div>\n\n    <ng-container bitDialogFooter>\n      <button bitButton buttonType=\"primary\" type=\"submit\">\n        <span>{{ \"importData\" | i18n }}</span>\n      </button>\n      <button bitButton bitDialogClose buttonType=\"secondary\" type=\"button\">\n        <span>{{ \"cancel\" | i18n }}</span>\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","<h1 bitTypography=\"h1\">{{ \"importData\" | i18n }}</h1>\n\n<bit-callout type=\"info\" *ngIf=\"importBlockedByPolicy\">\n  {{ \"personalOwnershipPolicyInEffectImports\" | i18n }}\n</bit-callout>\n<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-form-field>\n    <bit-label\n      >{{ \"importDestination\" | i18n }}\n      <a\n        target=\"_blank\"\n        rel=\"noopener\"\n        appA11yTitle=\"{{ 'learnAboutImportOptions' | i18n }}\"\n        href=\"https://bitwarden.com/help/import-data/\"\n      >\n        <i class=\"bwi bwi-question-circle\" aria-hidden=\"true\"></i>\n      </a>\n    </bit-label>\n    <bit-select formControlName=\"vaultSelector\">\n      <bit-option\n        *ngIf=\"!importBlockedByPolicy\"\n        [label]=\"'myVault' | i18n\"\n        value=\"myVault\"\n        icon=\"bwi-user\"\n      />\n      <bit-option\n        *ngFor=\"let o of organizations$ | async\"\n        [value]=\"o.id\"\n        [label]=\"o.name\"\n        icon=\"bwi-business\"\n      />\n    </bit-select>\n  </bit-form-field>\n\n  <bit-form-field>\n    <bit-label>{{ organizationId ? (\"collection\" | i18n) : (\"folder\" | i18n) }}</bit-label>\n    <bit-select formControlName=\"targetSelector\">\n      <ng-container *ngIf=\"!organizationId\">\n        <bit-option [value]=\"null\" label=\"-- {{ 'selectImportFolder' | i18n }} --\" />\n        <bit-option\n          *ngFor=\"let f of folders$ | async\"\n          [value]=\"f.id\"\n          [label]=\"f.name\"\n          icon=\"bwi-folder\"\n        />\n      </ng-container>\n      <ng-container *ngIf=\"organizationId\">\n        <bit-option [value]=\"null\" label=\"-- {{ 'selectImportCollection' | i18n }} --\" />\n        <bit-option\n          *ngFor=\"let c of collections$ | async\"\n          [value]=\"c.id\"\n          [label]=\"c.name\"\n          icon=\"bwi-collection\"\n        />\n      </ng-container>\n    </bit-select>\n    <bit-hint>{{\n      \"importTargetHint\"\n        | i18n\n          : (organizationId ? (\"collection\" | i18n | lowercase) : (\"folder\" | i18n | lowercase))\n    }}</bit-hint>\n  </bit-form-field>\n\n  <bit-form-field class=\"tw-w-1/2\">\n    <bit-label>{{ \"fileFormat\" | i18n }}</bit-label>\n    <bit-select formControlName=\"format\">\n      <bit-option *ngFor=\"let o of featuredImportOptions\" [value]=\"o.id\" [label]=\"o.name\" />\n      <ng-container *ngIf=\"importOptions && importOptions.length\">\n        <bit-option value=\"-\" disabled />\n        <bit-option *ngFor=\"let o of importOptions\" [value]=\"o.id\" [label]=\"o.name\" />\n      </ng-container>\n    </bit-select>\n  </bit-form-field>\n  <bit-callout type=\"info\" title=\"{{ getFormatInstructionTitle() }}\" *ngIf=\"format\">\n    <ng-container *ngIf=\"format === 'bitwardencsv' || format === 'bitwardenjson'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/export-your-data/\">\n        https://bitwarden.com/help/export-your-data/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'lastpasscsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-lastpass/\">\n        https://bitwarden.com/help/import-from-lastpass/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepassxcsv'\">\n      Using the KeePassX desktop application, navigate to \"Database\" &rarr; \"Export to CSV file\" and\n      save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'aviracsv'\">\n      In the Avira web vault, go to \"Settings\" &rarr; \"My Data\" &rarr; \"Export data\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blurcsv'\">\n      In the Blur web vault, click your username at the top and go to \"Settings\" &rarr; \"Export\n      Data\", then click \"Export CSV\" for your \"Accounts\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safeincloudxml'\">\n      Using the SaveInCloud desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As XML\"\n      and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'padlockcsv'\">\n      Using the Padlock desktop application, click the hamburger icon in the top left corner and\n      navigate to \"Settings\" &rarr; \"Export\" button and save the file \"As CSV\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepass2xml'\">\n      Using the KeePass 2 desktop application, navigate to \"File\" &rarr; \"Export\" and select the\n      \"KeePass XML (2.x)\" option.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'upmcsv'\">\n      Using the Universal Password Manager desktop application, navigate to \"Database\" &rarr;\n      \"Export\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'saferpasscsv'\">\n      Using the SaferPass browser extension, click the hamburger icon in the top left corner and\n      navigate to \"Settings\". Click the \"Export accounts\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'meldiumcsv'\">\n      Using the Meldium web vault, navigate to \"Settings\". Locate the \"Export data\" function and\n      click \"Show me my data\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepercsv'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .csv File\" option. Click\n      \"Export\" to save the CSV file.\n    </ng-container>\n    <!--\n    <ng-container *ngIf=\"format === 'keeperjson'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .json File\" option. Click\n      \"Export\" to save the JSON file.\n    </ng-container>\n    -->\n    <ng-container\n      *ngIf=\"format === 'chromecsv' || format === 'operacsv' || format === 'vivaldicsv'\"\n    >\n      <span *ngIf=\"format !== 'chromecsv'\">\n        The process is exactly the same as importing from Google Chrome.\n      </span>\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-chrome/\">\n        https://bitwarden.com/help/import-from-chrome/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'firefoxcsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-firefox/\">\n        https://bitwarden.com/help/import-from-firefox/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safaricsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-safari/\">\n        https://bitwarden.com/help/import-from-safari/</a\n      >.\n    </ng-container>\n    <ng-container\n      *ngIf=\"\n        format === '1password1pux' ||\n        format === '1password1pif' ||\n        format === '1passwordwincsv' ||\n        format === '1passwordmaccsv'\n      \"\n    >\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-1password/\">\n        https://bitwarden.com/help/import-from-1password/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passworddragonxml'\">\n      Using the Password Dragon desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"To\n      XML\". In the dialog that pops up select \"All Rows\" and check all fields. Click the \"Export\"\n      button and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpasscsv'\">\n      Using the Enpass desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As CSV\".\n      Select \"OK\" to the warning alert and save the CSV file. Note that the importer only supports\n      files exported while Enpass is set to the English language, so adjust your settings\n      accordingly.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpassjson'\">\n      Using the Enpass 6 desktop application, click the menu button and navigate to \"File\" &rarr;\n      \"Export\". Select the \".json\" file format option and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'pwsafexml'\">\n      Using the Password Safe desktop application, navigate to \"File\" &rarr; \"Export To\" &rarr; \"XML\n      format...\" and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanecsv'\">\n      Log in to Dashlane, click on \"My Account\" &rarr; \"Settings\" &rarr; \"Export file\" and select\n      \"Export as a CSV file\". This will download a zip archive containing various CSV files. Unzip\n      the archive and import each CSV file individually.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanejson'\">\n      Dashlane no longer supports the JSON format. Only use this if you have an existing JSON for\n      import. Use the CSV importer when creating new exports.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'msecurecsv'\">\n      Using the mSecure desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"CSV File...\"\n      and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'stickypasswordxml'\">\n      Using the Sticky Password desktop application, navigate to \"Menu\" (top right) &rarr; \"Export\"\n      &rarr; \"Export all\". Select the unencrypted format XML option and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'truekeycsv'\">\n      Using the True Key desktop application, click the gear icon (top right) and then navigate to\n      \"App Settings\". Click the \"Export\" button, enter your password and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'clipperzhtml'\">\n      Log into the Clipperz web application (clipperz.is/app). Click the hamburger menu icon in the\n      top right to expand the navigation bar. Navigate to \"Data\" &rarr; \"Export\". Click the\n      \"download HTML+JSON\" button to save the HTML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'roboformcsv'\">\n      Using the RoboForm Editor desktop application, navigate to \"RoboForm\" (top left) &rarr;\n      \"Options\" &rarr; \"Account &amp; Data\" and click the \"Export\" button. Select all of your data,\n      change the \"Format\" to \"CSV file\" and then click the \"Export\" button to save the CSV file.\n      Note: RoboForm only allows you to export Logins. Other items will not be exported.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passboltcsv'\">\n      Log into the Passbolt web vault and navigate to the \"Passwords\" listing. Select all of the\n      passwords you would like to export and click the \"Export\" button at the top of the listing.\n      Choose the \"csv (lastpass)\" export format and click the \"Export\" button.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'ascendocsv'\">\n      Using the Ascendo DataVault desktop application, navigate to \"Tools\" &rarr; \"Export\". In the\n      dialog that pops up, select the \"All Items (DVX, CSV)\" option. Click the \"Ok\" button to save\n      the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordbossjson'\">\n      Using the Password Boss desktop application, navigate to \"File\" &rarr; \"Export data\" &rarr;\n      \"Password Boss JSON - not encrypted\" and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'zohovaultcsv'\">\n      Log into the Zoho web vault (vault.zoho.com). Navigate to \"Tools\" &rarr; \"Export Secrets\".\n      Select \"All Secrets\" and click the \"Zoho Vault Format CSV\" button. Highlight and copy the data\n      from the textarea. Open a text editor like Notepad and paste the data. Save the data from the\n      text editor as\n      <code>zoho_export.csv</code>.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'splashidcsv'\">\n      Using the SplashID Safe desktop application, click on the SplashID blue lock logo in the top\n      right corner. Navigate to \"Export\" &rarr; \"Export as CSV\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkeepcsv'\">\n      Using the PassKeep mobile app, navigate to \"Backup/Restore\". Locate the \"CSV Backup/Restore\"\n      section and click \"Backup to CSV\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'gnomejson'\">\n      Make sure you have python-keyring and python-gnomekeyring installed. Save the\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bit.ly/2GpOMTg\"\n        >GNOME Keyring Import/Export</a\n      >\n      python script to your desktop as <code>pw_helper.py</code>. Open terminal and run\n      <code>chmod +rx Desktop/pw_helper.py</code> and then\n      <code>python Desktop/pw_helper.py export Desktop/my_passwords.json</code>. Then upload the\n      resulting <code>my_passwords.json</code> file here to Bitwarden.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordagentcsv'\">\n      Using the Password Agent desktop application navigate to \"File\" &rarr; \"Export\", select the\n      \"Fields to export\" button and check all of the fields, change the \"Output format\" to \"CSV\",\n      and then click the \"Start\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passpackcsv'\">\n      Log into the Passpack website vault and navigate to \"Settings\" &rarr; \"Export\", then click the\n      \"Download\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passmanjson'\">\n      Open your Passman vault and click on \"Settings\" in the bottom left corner. In the \"Settings\"\n      window switch to the \"Export credentials\" tab and choose \"JSON\" as the export type. Enter your\n      vault's passphrase and click the \"Export\" button to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastcsv'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to CSV file\" option to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastjson'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to JSON file\" option to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'fsecurefsk'\">\n      Open the F-Secure KEY desktop application and navigate to \"Settings\" &rarr; \"Export\n      Passwords\". Select the \"Export\" button, enter your master password, and save the FSK file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'kasperskytxt'\">\n      Open the Kaspersky Password Manager desktop application and navigate to \"Settings\" &rarr;\n      \"Import/Export\". Locate the \"Export to text file\" section and select the \"Export\" button to\n      save the TXT file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'remembearcsv'\">\n      Open the RememBear desktop application and navigate to \"Settings\" &rarr; \"Account\" &rarr;\n      \"Export\". Enter your master password and select the \"Export Anyway\" button to save the CSV\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordwallettxt'\">\n      Open the PasswordWallet desktop application and navigate to \"File\" &rarr; \"Export\" &rarr;\n      \"Visible entries to text file\". Enter your password and select the \"Ok\" button to save the TXT\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'mykicsv'\">\n      Open the Myki desktop browser extension and navigate to \"Advanced\" &rarr; \"Export Accounts\"\n      and then scan the QR code with your mobile device. Various CSV files will then be saved to\n      your computer's downloads folder.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'securesafecsv'\">\n      Export your SecureSafe password safe to a CSV file with a comma delimiter.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'logmeoncecsv'\">\n      Open the LogMeOnce browser extension, then navigate to \"Open Menu\" &rarr; \"Export To\" and\n      select \"CSV File\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blackberrycsv'\">\n      Open the BlackBerry Password Keeper application, then navigate to \"Settings\" &rarr;\n      \"Import/Export\". Select \"Export Passwords\" and follow the instructions on screen to save the\n      unencrypted CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'buttercupcsv'\">\n      Open the Buttercup desktop application and unlock your vault. Right click on your vault's icon\n      and select \"Export\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'codebookcsv'\">\n      Open the Codebook desktop application and log in. Navigate to \"File\" &rarr; \"Export all\", then\n      click \"Yes\" on the dialog and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'encryptrcsv'\">\n      Open the newest version of the Encryptr desktop application and allow all of your data to\n      sync. Once syncing of your data is complete, the download icon in the top right corner will\n      turn pink. Click the download icon and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'yoticsv'\">\n      From the Yoti browser extension, click on \"Settings\", then \"Export Saved Logins\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'psonojson'\">\n      Log in to the Psono web vault, click on the \"Signed in as\"-dropdown, select \"Others\". Go to\n      the \"Export\"-tab and select the json type export and then click on Export.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkyjson'\">\n      Log in to \"https://vault.passky.org\" &rarr; \"Import & Export\" &rarr; \"Export\" in the Passky\n      section. (\"Backup\" is unsupported as it is encrypted).\n    </ng-container>\n    <ng-container *ngIf=\"format === 'protonpass'\">\n      In the ProtonPass browser extension, go to Settings > Export. Export without PGP encryption\n      and save the zip file.\n    </ng-container>\n  </bit-callout>\n  <bit-form-field>\n    <bit-label>{{ \"selectImportFile\" | i18n }}</bit-label>\n    <div class=\"file-selector\">\n      <button\n        bitButton\n        type=\"button\"\n        class=\"btn btn-outline-primary\"\n        (click)=\"fileSelector.click()\"\n      >\n        {{ \"chooseFile\" | i18n }}\n      </button>\n      {{ this.fileSelected ? this.fileSelected.name : (\"noFileChosen\" | i18n) }}\n    </div>\n    <input\n      bitInput\n      #fileSelector\n      type=\"file\"\n      id=\"file\"\n      class=\"form-control-file\"\n      name=\"file\"\n      formControlName=\"file\"\n      (change)=\"setSelectedFile($event)\"\n      hidden\n    />\n  </bit-form-field>\n  <bit-form-field>\n    <bit-label>{{ \"orCopyPasteFileContents\" | i18n }}</bit-label>\n    <textarea\n      id=\"fileContents\"\n      bitInput\n      name=\"FileContents\"\n      formControlName=\"fileContents\"\n    ></textarea>\n  </bit-form-field>\n  <button\n    bitButton\n    bitFormButton\n    type=\"submit\"\n    buttonType=\"primary\"\n    [disabled]=\"importBlockedByPolicy\"\n  >\n    {{ \"importData\" | i18n }}\n  </button>\n</form>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormBuilder, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport * as JSZip from \"jszip\";\nimport { concat, Observable, Subject, lastValueFrom, combineLatest } from \"rxjs\";\nimport { map, takeUntil } from \"rxjs/operators\";\nimport Swal, { SweetAlertIcon } from \"sweetalert2\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport {\n  canAccessImportExport,\n  OrganizationService,\n} from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { DialogService } from \"@bitwarden/components\";\nimport {\n  ImportOption,\n  ImportResult,\n  ImportServiceAbstraction,\n  ImportType,\n} from \"@bitwarden/importer\";\n\nimport { FilePasswordPromptComponent, ImportSuccessDialogComponent } from \"./dialog\";\n\n@Component({\n  selector: \"app-import\",\n  templateUrl: \"import.component.html\",\n})\nexport class ImportComponent implements OnInit, OnDestroy {\n  featuredImportOptions: ImportOption[];\n  importOptions: ImportOption[];\n  format: ImportType = null;\n  fileSelected: File;\n\n  folders$: Observable<FolderView[]>;\n  collections$: Observable<CollectionView[]>;\n  organizations$: Observable<Organization[]>;\n\n  protected organizationId: string = null;\n  protected destroy$ = new Subject<void>();\n\n  private _importBlockedByPolicy = false;\n\n  formGroup = this.formBuilder.group({\n    vaultSelector: [\n      \"myVault\",\n      {\n        nonNullable: true,\n        validators: [Validators.required],\n      },\n    ],\n    targetSelector: [null],\n    format: [null as ImportType | null, [Validators.required]],\n    fileContents: [],\n    file: [],\n  });\n\n  constructor(\n    protected i18nService: I18nService,\n    protected importService: ImportServiceAbstraction,\n    protected router: Router,\n    protected platformUtilsService: PlatformUtilsService,\n    protected policyService: PolicyService,\n    private logService: LogService,\n    protected modalService: ModalService,\n    protected syncService: SyncService,\n    protected dialogService: DialogService,\n    protected folderService: FolderService,\n    protected collectionService: CollectionService,\n    protected organizationService: OrganizationService,\n    protected formBuilder: FormBuilder\n  ) {}\n\n  protected get importBlockedByPolicy(): boolean {\n    return this._importBlockedByPolicy;\n  }\n\n  /**\n   * Callback that is called after a successful import.\n   */\n  protected async onSuccessfulImport(): Promise<void> {\n    await this.router.navigate([\"vault\"]);\n  }\n\n  ngOnInit() {\n    this.setImportOptions();\n\n    this.organizations$ = concat(\n      this.organizationService.memberOrganizations$.pipe(\n        canAccessImportExport(this.i18nService),\n        map((orgs) => orgs.sort(Utils.getSortFunction(this.i18nService, \"name\")))\n      )\n    );\n\n    combineLatest([\n      this.policyService.policyAppliesToActiveUser$(PolicyType.PersonalOwnership),\n      this.organizations$,\n    ])\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(([policyApplies, orgs]) => {\n        this._importBlockedByPolicy = policyApplies;\n        if (policyApplies && orgs.length == 0) {\n          this.formGroup.disable();\n        }\n      });\n\n    if (this.organizationId) {\n      this.formGroup.controls.vaultSelector.patchValue(this.organizationId);\n      this.formGroup.controls.vaultSelector.disable();\n\n      this.collections$ = Utils.asyncToObservable(() =>\n        this.collectionService\n          .getAllDecrypted()\n          .then((c) => c.filter((c2) => c2.organizationId === this.organizationId))\n      );\n    } else {\n      // Filter out the `no folder`-item from folderViews$\n      this.folders$ = this.folderService.folderViews$.pipe(\n        map((folders) => folders.filter((f) => f.id != null))\n      );\n      this.formGroup.controls.targetSelector.disable();\n\n      this.formGroup.controls.vaultSelector.valueChanges\n        .pipe(takeUntil(this.destroy$))\n        .subscribe((value) => {\n          this.organizationId = value != \"myVault\" ? value : undefined;\n          if (!this._importBlockedByPolicy) {\n            this.formGroup.controls.targetSelector.enable();\n          }\n          if (value) {\n            this.collections$ = Utils.asyncToObservable(() =>\n              this.collectionService\n                .getAllDecrypted()\n                .then((c) => c.filter((c2) => c2.organizationId === value))\n            );\n          }\n        });\n\n      this.formGroup.controls.vaultSelector.setValue(\"myVault\");\n    }\n    this.formGroup.controls.format.valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((value) => {\n        this.format = value;\n      });\n  }\n\n  submit = async () => {\n    if (this.formGroup.invalid) {\n      this.formGroup.markAllAsTouched();\n      return;\n    }\n\n    await this.performImport();\n  };\n\n  protected async performImport() {\n    if (this.importBlockedByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalOwnershipPolicyInEffectImports\")\n      );\n      return;\n    }\n\n    const promptForPassword_callback = async () => {\n      return await this.getFilePassword();\n    };\n\n    const importer = this.importService.getImporter(\n      this.format,\n      promptForPassword_callback,\n      this.organizationId\n    );\n\n    if (importer === null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFormat\")\n      );\n      return;\n    }\n\n    const fileEl = document.getElementById(\"file\") as HTMLInputElement;\n    const files = fileEl.files;\n    let fileContents = this.formGroup.controls.fileContents.value;\n    if ((files == null || files.length === 0) && (fileContents == null || fileContents === \"\")) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      return;\n    }\n\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      return;\n    }\n\n    if (this.organizationId) {\n      await this.organizationService.get(this.organizationId)?.isAdmin;\n    }\n\n    try {\n      const result = await this.importService.import(\n        importer,\n        fileContents,\n        this.organizationId,\n        this.formGroup.controls.targetSelector.value,\n        this.isUserAdmin(this.organizationId)\n      );\n\n      //No errors, display success message\n      this.dialogService.open<unknown, ImportResult>(ImportSuccessDialogComponent, {\n        data: result,\n      });\n\n      this.syncService.fullSync(true);\n      await this.onSuccessfulImport();\n    } catch (e) {\n      this.error(e);\n      this.logService.error(e);\n    }\n  }\n\n  private isUserAdmin(organizationId?: string): boolean {\n    if (!organizationId) {\n      return false;\n    }\n    return this.organizationService.get(this.organizationId)?.isAdmin;\n  }\n\n  getFormatInstructionTitle() {\n    if (this.format == null) {\n      return null;\n    }\n\n    const results = this.featuredImportOptions\n      .concat(this.importOptions)\n      .filter((o) => o.id === this.format);\n    if (results.length > 0) {\n      return this.i18nService.t(\"instructionsFor\", results[0].name);\n    }\n    return null;\n  }\n\n  protected setImportOptions() {\n    this.featuredImportOptions = [\n      {\n        id: null,\n        name: \"-- \" + this.i18nService.t(\"select\") + \" --\",\n      },\n      ...this.importService.featuredImportOptions,\n    ];\n    this.importOptions = [...this.importService.regularImportOptions].sort((a, b) => {\n      if (a.name == null && b.name != null) {\n        return -1;\n      }\n      if (a.name != null && b.name == null) {\n        return 1;\n      }\n      if (a.name == null && b.name == null) {\n        return 0;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(a.name, b.name)\n        : a.name.localeCompare(b.name);\n    });\n  }\n\n  setSelectedFile(event: Event) {\n    const fileInputEl = <HTMLInputElement>event.target;\n    this.fileSelected = fileInputEl.files.length > 0 ? fileInputEl.files[0] : null;\n  }\n\n  private async error(error: Error) {\n    await Swal.fire({\n      heightAuto: false,\n      buttonsStyling: false,\n      icon: \"error\" as SweetAlertIcon,\n      iconHtml: `<i class=\"swal-custom-icon bwi bwi-error text-danger\"></i>`,\n      input: \"textarea\",\n      inputValue: error.message,\n      inputAttributes: {\n        readonly: \"true\",\n      },\n      titleText: this.i18nService.t(\"importError\"),\n      text: this.i18nService.t(\"importErrorDesc\"),\n      showConfirmButton: true,\n      confirmButtonText: this.i18nService.t(\"ok\"),\n      onOpen: (popupEl) => {\n        popupEl.querySelector(\".swal2-textarea\").scrollTo(0, 0);\n      },\n    });\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    if (this.format === \"1password1pux\") {\n      return this.extractZipContent(file, \"export.data\");\n    }\n    if (\n      this.format === \"protonpass\" &&\n      (file.type === \"application/zip\" ||\n        file.type == \"application/x-zip-compressed\" ||\n        file.name.endsWith(\".zip\"))\n    ) {\n      return this.extractZipContent(file, \"Proton Pass/data.json\");\n    }\n\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        if (this.format === \"lastpasscsv\" && file.type === \"text/html\") {\n          const parser = new DOMParser();\n          const doc = parser.parseFromString((evt.target as any).result, \"text/html\");\n          const pre = doc.querySelector(\"pre\");\n          if (pre != null) {\n            resolve(pre.textContent);\n            return;\n          }\n          reject();\n          return;\n        }\n\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private extractZipContent(zipFile: File, contentFilePath: string): Promise<string> {\n    return new JSZip()\n      .loadAsync(zipFile)\n      .then((zip) => {\n        return zip.file(contentFilePath).async(\"string\");\n      })\n      .then(\n        function success(content) {\n          return content;\n        },\n        function error(e) {\n          return \"\";\n        }\n      );\n  }\n\n  async getFilePassword(): Promise<string> {\n    const dialog = this.dialogService.open<string>(FilePasswordPromptComponent, {\n      ariaModal: true,\n    });\n\n    return await lastValueFrom(dialog.closed);\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from \"@angular/core\";\n\n@Directive({\n  selector: \"[appBoxRow]\",\n})\nexport class BoxRowDirective implements OnInit {\n  el: HTMLElement = null;\n  formEls: Element[];\n\n  constructor(elRef: ElementRef) {\n    this.el = elRef.nativeElement;\n  }\n\n  ngOnInit(): void {\n    this.formEls = Array.from(\n      this.el.querySelectorAll('input:not([type=\"hidden\"]), select, textarea')\n    );\n    this.formEls.forEach((formEl) => {\n      formEl.addEventListener(\n        \"focus\",\n        () => {\n          this.el.classList.add(\"active\");\n        },\n        false\n      );\n\n      formEl.addEventListener(\n        \"blur\",\n        () => {\n          this.el.classList.remove(\"active\");\n        },\n        false\n      );\n    });\n  }\n\n  @HostListener(\"click\", [\"$event\"]) onClick(event: Event) {\n    const target = event.target as HTMLElement;\n    if (\n      target !== this.el &&\n      !target.classList.contains(\"progress\") &&\n      !target.classList.contains(\"progress-bar\")\n    ) {\n      return;\n    }\n\n    if (this.formEls.length > 0) {\n      const formEl = this.formEls[0] as HTMLElement;\n      if (formEl.tagName.toLowerCase() === \"input\") {\n        const inputEl = formEl as HTMLInputElement;\n        if (inputEl.type != null && inputEl.type.toLowerCase() === \"checkbox\") {\n          inputEl.click();\n          return;\n        }\n      }\n      formEl.focus();\n    }\n  }\n}\n","<ng-container *ngIf=\"show\">\n  <app-callout type=\"info\" title=\"{{ scopeConfig.title | i18n }}\">\n    {{ scopeConfig.description | i18n : scopeConfig.scopeIdentifier }}\n  </app-callout>\n</ng-container>\n","import { Component, Input, OnInit } from \"@angular/core\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\n\n@Component({\n  selector: \"app-export-scope-callout\",\n  templateUrl: \"export-scope-callout.component.html\",\n})\nexport class ExportScopeCalloutComponent implements OnInit {\n  @Input() organizationId: string = null;\n\n  show = false;\n  scopeConfig: {\n    title: string;\n    description: string;\n    scopeIdentifier: string;\n  };\n\n  constructor(\n    protected organizationService: OrganizationService,\n    protected stateService: StateService\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    if (!this.organizationService.hasOrganizations()) {\n      return;\n    }\n    this.scopeConfig =\n      this.organizationId != null\n        ? {\n            title: \"exportingOrganizationVaultTitle\",\n            description: \"exportingOrganizationVaultDesc\",\n            scopeIdentifier: this.organizationService.get(this.organizationId).name,\n          }\n        : {\n            title: \"exportingPersonalVaultTitle\",\n            description: \"exportingIndividualVaultDescription\",\n            scopeIdentifier: await this.stateService.getEmail(),\n          };\n    this.show = true;\n  }\n}\n","import { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nexport abstract class ImportApiServiceAbstraction {\n  postImportCiphers: (request: ImportCiphersRequest) => Promise<any>;\n  postImportOrganizationCiphers: (\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ) => Promise<any>;\n}\n","import { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nimport { ImportApiServiceAbstraction } from \"./import-api.service.abstraction\";\n\nexport class ImportApiService implements ImportApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  async postImportCiphers(request: ImportCiphersRequest): Promise<any> {\n    return await this.apiService.send(\"POST\", \"/ciphers/import\", request, true, false);\n  }\n\n  async postImportOrganizationCiphers(\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ): Promise<any> {\n    return await this.apiService.send(\n      \"POST\",\n      \"/ciphers/import-organization?organizationId=\" + organizationId,\n      request,\n      true,\n      false\n    );\n  }\n}\n","import { Importer } from \"../importers/importer\";\nimport { ImportOption, ImportType } from \"../models/import-options\";\nimport { ImportResult } from \"../models/import-result\";\n\nexport abstract class ImportServiceAbstraction {\n  featuredImportOptions: readonly ImportOption[];\n  regularImportOptions: readonly ImportOption[];\n  getImportOptions: () => ImportOption[];\n  import: (\n    importer: Importer,\n    fileContents: string,\n    organizationId?: string,\n    selectedImportTarget?: string,\n    isUserAdmin?: boolean\n  ) => Promise<ImportResult>;\n  getImporter: (\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>,\n    organizationId: string\n  ) => Importer;\n}\n","import { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { FolderWithIdRequest } from \"../../vault/models/request/folder-with-id.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  folders: FolderWithIdRequest[] = [];\n  folderRelationships: KvpRequest<number, number>[] = [];\n}\n","import { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { CollectionWithIdRequest } from \"../../vault/models/request/collection-with-id.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportOrganizationCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  collections: CollectionWithIdRequest[] = [];\n  collectionRelationships: KvpRequest<number, number>[] = [];\n}\n","export class KvpRequest<TK, TV> {\n  key: TK;\n  value: TV;\n\n  constructor(key: TK, value: TV) {\n    this.key = key;\n    this.value = value;\n  }\n}\n","import { Collection } from \"../domain/collection\";\n\nimport { CollectionRequest } from \"./collection.request\";\n\nexport class CollectionWithIdRequest extends CollectionRequest {\n  id: string;\n\n  constructor(collection?: Collection) {\n    if (collection == null) {\n      return;\n    }\n    super(collection);\n    this.id = collection.id;\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nexport class ImportResult {\n  success = false;\n  errorMessage: string;\n  ciphers: CipherView[] = [];\n  folders: FolderView[] = [];\n  folderRelationships: [number, number][] = [];\n  collections: CollectionView[] = [];\n  collectionRelationships: [number, number][] = [];\n}\n","import * as papa from \"papaparse\";\n\nimport { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { ConsoleLogService } from \"@bitwarden/common/platform/services/console-log.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { LoginUriView } from \"@bitwarden/common/vault/models/view/login-uri.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nexport abstract class BaseImporter {\n  organizationId: string = null;\n\n  protected logService: LogService = new ConsoleLogService(false);\n\n  protected newLineRegex = /(?:\\r\\n|\\r|\\n)/;\n\n  protected passwordFieldNames = [\n    \"password\",\n    \"pass word\",\n    \"passphrase\",\n    \"pass phrase\",\n    \"pass\",\n    \"code\",\n    \"code word\",\n    \"codeword\",\n    \"secret\",\n    \"secret word\",\n    \"personpwd\",\n    \"key\",\n    \"keyword\",\n    \"key word\",\n    \"keyphrase\",\n    \"key phrase\",\n    \"form_pw\",\n    \"wppassword\",\n    \"pin\",\n    \"pwd\",\n    \"pw\",\n    \"pword\",\n    \"passwd\",\n    \"p\",\n    \"serial\",\n    \"serial#\",\n    \"license key\",\n    \"reg #\",\n\n    // Non-English names\n    \"passwort\",\n  ];\n\n  protected usernameFieldNames = [\n    \"user\",\n    \"name\",\n    \"user name\",\n    \"username\",\n    \"login name\",\n    \"email\",\n    \"e-mail\",\n    \"id\",\n    \"userid\",\n    \"user id\",\n    \"login\",\n    \"form_loginname\",\n    \"wpname\",\n    \"mail\",\n    \"loginid\",\n    \"login id\",\n    \"log\",\n    \"personlogin\",\n    \"first name\",\n    \"last name\",\n    \"card#\",\n    \"account #\",\n    \"member\",\n    \"member #\",\n\n    // Non-English names\n    \"nom\",\n    \"benutzername\",\n  ];\n\n  protected notesFieldNames = [\n    \"note\",\n    \"notes\",\n    \"comment\",\n    \"comments\",\n    \"memo\",\n    \"description\",\n    \"free form\",\n    \"freeform\",\n    \"free text\",\n    \"freetext\",\n    \"free\",\n\n    // Non-English names\n    \"kommentar\",\n  ];\n\n  protected uriFieldNames: string[] = [\n    \"url\",\n    \"hyper link\",\n    \"hyperlink\",\n    \"link\",\n    \"host\",\n    \"hostname\",\n    \"host name\",\n    \"server\",\n    \"address\",\n    \"hyper ref\",\n    \"href\",\n    \"web\",\n    \"website\",\n    \"web site\",\n    \"site\",\n    \"web-site\",\n    \"uri\",\n\n    // Non-English names\n    \"ort\",\n    \"adresse\",\n  ];\n\n  protected parseCsvOptions = {\n    encoding: \"UTF-8\",\n    skipEmptyLines: false,\n  };\n\n  protected get organization() {\n    return this.organizationId != null;\n  }\n\n  protected parseXml(data: string): Document {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(data, \"application/xml\");\n    return doc != null && doc.querySelector(\"parsererror\") == null ? doc : null;\n  }\n\n  protected parseCsv(data: string, header: boolean, options: any = {}): any[] {\n    const parseOptions: papa.ParseConfig<string> = Object.assign(\n      { header: header },\n      this.parseCsvOptions,\n      options\n    );\n    data = this.splitNewLine(data).join(\"\\n\").trim();\n    const result = papa.parse(data, parseOptions);\n    if (result.errors != null && result.errors.length > 0) {\n      result.errors.forEach((e) => {\n        if (e.row != null) {\n          this.logService.warning(\"Error parsing row \" + e.row + \": \" + e.message);\n        }\n      });\n    }\n    return result.data && result.data.length > 0 ? result.data : null;\n  }\n\n  protected parseSingleRowCsv(rowData: string) {\n    if (this.isNullOrWhitespace(rowData)) {\n      return null;\n    }\n    const parsedRow = this.parseCsv(rowData, false);\n    if (parsedRow != null && parsedRow.length > 0 && parsedRow[0].length > 0) {\n      return parsedRow[0];\n    }\n    return null;\n  }\n\n  protected makeUriArray(uri: string | string[]): LoginUriView[] {\n    if (uri == null) {\n      return null;\n    }\n\n    if (typeof uri === \"string\") {\n      const loginUri = new LoginUriView();\n      loginUri.uri = this.fixUri(uri);\n      if (this.isNullOrWhitespace(loginUri.uri)) {\n        return null;\n      }\n      loginUri.match = null;\n      return [loginUri];\n    }\n\n    if (uri.length > 0) {\n      const returnArr: LoginUriView[] = [];\n      uri.forEach((u) => {\n        const loginUri = new LoginUriView();\n        loginUri.uri = this.fixUri(u);\n        if (this.isNullOrWhitespace(loginUri.uri)) {\n          return;\n        }\n        loginUri.match = null;\n        returnArr.push(loginUri);\n      });\n      return returnArr.length === 0 ? null : returnArr;\n    }\n\n    return null;\n  }\n\n  protected fixUri(uri: string) {\n    if (uri == null) {\n      return null;\n    }\n    uri = uri.trim();\n    if (uri.indexOf(\"://\") === -1 && uri.indexOf(\".\") >= 0) {\n      uri = \"http://\" + uri;\n    }\n    if (uri.length > 1000) {\n      return uri.substring(0, 1000);\n    }\n    return uri;\n  }\n\n  protected nameFromUrl(url: string) {\n    const hostname = Utils.getHostname(url);\n    if (this.isNullOrWhitespace(hostname)) {\n      return null;\n    }\n    return hostname.startsWith(\"www.\") ? hostname.replace(\"www.\", \"\") : hostname;\n  }\n\n  protected isNullOrWhitespace(str: string): boolean {\n    return Utils.isNullOrWhitespace(str);\n  }\n\n  protected getValueOrDefault(str: string, defaultValue: string = null): string {\n    if (this.isNullOrWhitespace(str)) {\n      return defaultValue;\n    }\n    return str;\n  }\n\n  protected splitNewLine(str: string): string[] {\n    return str.split(this.newLineRegex);\n  }\n\n  protected setCardExpiration(cipher: CipherView, expiration: string): boolean {\n    if (this.isNullOrWhitespace(expiration)) {\n      return false;\n    }\n\n    expiration = expiration.replace(/\\s/g, \"\");\n\n    const monthRegex = \"0?(?<month>[1-9]|1[0-2])\";\n    const yearRegex = \"(?<year>(?:[1-2][0-9])?[0-9]{2})\";\n    const expiryRegex = new RegExp(`^${monthRegex}/${yearRegex}$`);\n\n    const expiryMatch = expiration.match(expiryRegex);\n\n    if (!expiryMatch) {\n      return false;\n    }\n\n    cipher.card.expMonth = expiryMatch.groups.month;\n    const year: string = expiryMatch.groups.year;\n    cipher.card.expYear = year.length === 2 ? \"20\" + year : year;\n    return true;\n  }\n\n  protected moveFoldersToCollections(result: ImportResult) {\n    result.folderRelationships.forEach((r) => result.collectionRelationships.push(r));\n    result.collections = result.folders.map((f) => {\n      const collection = new CollectionView();\n      collection.name = f.name;\n      collection.id = f.id;\n      return collection;\n    });\n    result.folderRelationships = [];\n    result.folders = [];\n  }\n\n  protected querySelectorDirectChild(parentEl: Element, query: string) {\n    const els = this.querySelectorAllDirectChild(parentEl, query);\n    return els.length === 0 ? null : els[0];\n  }\n\n  protected querySelectorAllDirectChild(parentEl: Element, query: string) {\n    return Array.from(parentEl.querySelectorAll(query)).filter((el) => el.parentNode === parentEl);\n  }\n\n  protected initLoginCipher() {\n    const cipher = new CipherView();\n    cipher.favorite = false;\n    cipher.notes = \"\";\n    cipher.fields = [];\n    cipher.login = new LoginView();\n    cipher.type = CipherType.Login;\n    return cipher;\n  }\n\n  protected cleanupCipher(cipher: CipherView) {\n    if (cipher == null) {\n      return;\n    }\n    if (cipher.type !== CipherType.Login) {\n      cipher.login = null;\n    }\n    if (this.isNullOrWhitespace(cipher.name)) {\n      cipher.name = \"--\";\n    }\n    if (this.isNullOrWhitespace(cipher.notes)) {\n      cipher.notes = null;\n    } else {\n      cipher.notes = cipher.notes.trim();\n    }\n    if (cipher.fields != null && cipher.fields.length === 0) {\n      cipher.fields = null;\n    }\n    if (cipher.passwordHistory != null && cipher.passwordHistory.length === 0) {\n      cipher.passwordHistory = null;\n    }\n  }\n\n  protected processKvp(\n    cipher: CipherView,\n    key: string,\n    value: string,\n    type: FieldType = FieldType.Text\n  ) {\n    if (this.isNullOrWhitespace(value)) {\n      return;\n    }\n    if (this.isNullOrWhitespace(key)) {\n      key = \"\";\n    }\n    if (value.length > 200 || value.trim().search(this.newLineRegex) > -1) {\n      if (cipher.notes == null) {\n        cipher.notes = \"\";\n      }\n      cipher.notes += key + \": \" + this.splitNewLine(value).join(\"\\n\") + \"\\n\";\n    } else {\n      if (cipher.fields == null) {\n        cipher.fields = [];\n      }\n      const field = new FieldView();\n      field.type = type;\n      field.name = key;\n      field.value = value;\n      cipher.fields.push(field);\n    }\n  }\n\n  protected processFolder(result: ImportResult, folderName: string) {\n    if (this.isNullOrWhitespace(folderName)) {\n      return;\n    }\n\n    let folderIndex = result.folders.length;\n    // Replace backslashes with forward slashes, ensuring we create sub-folders\n    folderName = folderName.replace(\"\\\\\", \"/\");\n    let addFolder = true;\n\n    for (let i = 0; i < result.folders.length; i++) {\n      if (result.folders[i].name === folderName) {\n        addFolder = false;\n        folderIndex = i;\n        break;\n      }\n    }\n\n    if (addFolder) {\n      const f = new FolderView();\n      f.name = folderName;\n      result.folders.push(f);\n    }\n\n    result.folderRelationships.push([result.ciphers.length, folderIndex]);\n  }\n\n  protected convertToNoteIfNeeded(cipher: CipherView) {\n    if (\n      cipher.type === CipherType.Login &&\n      this.isNullOrWhitespace(cipher.login.username) &&\n      this.isNullOrWhitespace(cipher.login.password) &&\n      (cipher.login.uris == null || cipher.login.uris.length === 0)\n    ) {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    }\n  }\n\n  protected processFullName(cipher: CipherView, fullName: string) {\n    if (this.isNullOrWhitespace(fullName)) {\n      return;\n    }\n\n    const nameParts = fullName.split(\" \");\n    if (nameParts.length > 0) {\n      cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n    }\n    if (nameParts.length === 2) {\n      cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n    } else if (nameParts.length >= 3) {\n      cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n      cipher.identity.lastName = nameParts.slice(2, nameParts.length).join(\" \");\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AscendoCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 2) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const val: string = value[i + 2];\n          const field: string = value[i + 1];\n          if (this.isNullOrWhitespace(val) || this.isNullOrWhitespace(field)) {\n            continue;\n          }\n\n          const fieldLower = field.toLowerCase();\n          if (cipher.login.password == null && this.passwordFieldNames.indexOf(fieldLower) > -1) {\n            cipher.login.password = this.getValueOrDefault(val);\n          } else if (\n            cipher.login.username == null &&\n            this.usernameFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.username = this.getValueOrDefault(val);\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n          } else {\n            this.processKvp(cipher, field, val);\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.login.uris = this.makeUriArray(value.web);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.username = this.getValueOrDefault(value.login);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.logins != null) {\n      results.logins.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.pwd);\n        cipher.login.username = this.getValueOrDefault(value.loginName);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.notes != null) {\n      results.notes.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.name = this.getValueOrDefault(value.label);\n        cipher.notes = this.getValueOrDefault(value.text);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.cards != null) {\n      results.cards.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Card;\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.card.cardholderName = this.getValueOrDefault(value.holderName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        if (value.expirationDate != null) {\n          if (value.expirationDate.month != null) {\n            cipher.card.expMonth = value.expirationDate.month + \"\";\n          }\n          if (value.expirationDate.year != null) {\n            cipher.card.expYear = value.expirationDate.year + \"\";\n          }\n        }\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AviraCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.name,\n        this.getValueOrDefault(this.nameFromUrl(value.website), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.website);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (\n        this.isNullOrWhitespace(value.username) &&\n        !this.isNullOrWhitespace(value.secondary_username)\n      ) {\n        cipher.login.username = value.secondary_username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.notes = this.getValueOrDefault(value.secondary_username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlackBerryCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.grouping === \"list\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.favorite = value.fav === \"1\";\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.extra);\n      if (value.grouping !== \"note\") {\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ChromeCsvImporter extends BaseImporter implements Importer {\n  private androidPatternRegex = new RegExp(\"^android:\\\\/\\\\/.*(?<=@)(.*)(?=\\\\/)\");\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      let name = value.name;\n      if (!name && this.androidPatternRegex.test(value.url)) {\n        name = value.url.match(this.androidPatternRegex)[1];\n      }\n      cipher.name = this.getValueOrDefault(name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.organization && !this.isNullOrWhitespace(value.collections)) {\n        const collections = (value.collections as string).split(\",\");\n        collections.forEach((col) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === col) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = col;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization) {\n        this.processFolder(result, value.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.favorite =\n        !this.organization && this.getValueOrDefault(value.favorite, \"0\") !== \"0\" ? true : false;\n      cipher.type = CipherType.Login;\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      try {\n        cipher.reprompt = parseInt(\n          this.getValueOrDefault(value.reprompt, CipherRepromptType.None.toString()),\n          10\n        );\n      } catch (e) {\n        // eslint-disable-next-line\n        console.error(\"Unable to parse reprompt value\", e);\n        cipher.reprompt = CipherRepromptType.None;\n      }\n\n      if (!this.isNullOrWhitespace(value.fields)) {\n        const fields = this.splitNewLine(value.fields);\n        for (let i = 0; i < fields.length; i++) {\n          if (this.isNullOrWhitespace(fields[i])) {\n            continue;\n          }\n\n          const delimPosition = fields[i].lastIndexOf(\": \");\n          if (delimPosition === -1) {\n            continue;\n          }\n\n          if (cipher.fields == null) {\n            cipher.fields = [];\n          }\n\n          const field = new FieldView();\n          field.name = fields[i].substr(0, delimPosition);\n          field.value = null;\n          field.type = FieldType.Text;\n          if (fields[i].length > delimPosition + 2) {\n            field.value = fields[i].substr(delimPosition + 2);\n          }\n          cipher.fields.push(field);\n        }\n      }\n\n      const valueType = value.type != null ? value.type.toLowerCase() : null;\n      switch (valueType) {\n        case \"note\":\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote = new SecureNoteView();\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default: {\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.totp = this.getValueOrDefault(value.login_totp || value.totp);\n          cipher.login.username = this.getValueOrDefault(value.login_username || value.username);\n          cipher.login.password = this.getValueOrDefault(value.login_password || value.password);\n          const uris = this.parseSingleRowCsv(value.login_uri || value.uri);\n          cipher.login.uris = this.makeUriArray(uris);\n          break;\n        }\n      }\n\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import {\n  CipherWithIdExport,\n  CollectionWithIdExport,\n  FolderWithIdExport,\n} from \"@bitwarden/common/models/export\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport {\n  BitwardenEncryptedIndividualJsonExport,\n  BitwardenEncryptedOrgJsonExport,\n  BitwardenJsonExport,\n  BitwardenUnEncryptedIndividualJsonExport,\n  BitwardenUnEncryptedOrgJsonExport,\n} from \"@bitwarden/exporter/vault-export/bitwarden-json-export-types\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  protected constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService\n  ) {\n    super();\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results: BitwardenJsonExport = JSON.parse(data);\n    if (results == null || results.items == null) {\n      this.result.success = false;\n      return this.result;\n    }\n\n    if (results.encrypted) {\n      await this.parseEncrypted(results as any);\n    } else {\n      await this.parseDecrypted(results as any);\n    }\n\n    return this.result;\n  }\n\n  private async parseEncrypted(\n    results: BitwardenEncryptedIndividualJsonExport | BitwardenEncryptedOrgJsonExport\n  ) {\n    if (results.encKeyValidation_DO_NOT_EDIT != null) {\n      const orgKey = await this.cryptoService.getOrgKey(this.organizationId);\n      const encKeyValidation = new EncString(results.encKeyValidation_DO_NOT_EDIT);\n      const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n        encKeyValidation,\n        orgKey\n      );\n      if (encKeyValidationDecrypt === null) {\n        this.result.success = false;\n        this.result.errorMessage = this.i18nService.t(\"importEncKeyError\");\n        return;\n      }\n    }\n\n    const groupingsMap = this.organization\n      ? await this.parseCollections(results as BitwardenEncryptedOrgJsonExport)\n      : await this.parseFolders(results as BitwardenEncryptedIndividualJsonExport);\n\n    for (const c of results.items) {\n      const cipher = CipherWithIdExport.toDomain(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = this.organizationId;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      const view = await cipher.decrypt();\n      this.cleanupCipher(view);\n      this.result.ciphers.push(view);\n    }\n\n    this.result.success = true;\n  }\n\n  private async parseDecrypted(\n    results: BitwardenUnEncryptedIndividualJsonExport | BitwardenUnEncryptedOrgJsonExport\n  ) {\n    const groupingsMap = this.organization\n      ? await this.parseCollections(results as BitwardenUnEncryptedOrgJsonExport)\n      : await this.parseFolders(results as BitwardenUnEncryptedIndividualJsonExport);\n\n    results.items.forEach((c) => {\n      const cipher = CipherWithIdExport.toView(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = null;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n  }\n\n  private async parseFolders(\n    data: BitwardenUnEncryptedIndividualJsonExport | BitwardenEncryptedIndividualJsonExport\n  ): Promise<Map<string, number>> | null {\n    if (data.folders == null) {\n      return null;\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    for (const f of data.folders) {\n      let folderView: FolderView;\n      if (data.encrypted) {\n        const folder = FolderWithIdExport.toDomain(f);\n        if (folder != null) {\n          folderView = await folder.decrypt();\n        }\n      } else {\n        folderView = FolderWithIdExport.toView(f);\n      }\n\n      if (folderView != null) {\n        groupingsMap.set(f.id, this.result.folders.length);\n        this.result.folders.push(folderView);\n      }\n    }\n    return groupingsMap;\n  }\n\n  private async parseCollections(\n    data: BitwardenUnEncryptedOrgJsonExport | BitwardenEncryptedOrgJsonExport\n  ): Promise<Map<string, number>> | null {\n    if (data.collections == null) {\n      return null;\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    for (const c of data.collections) {\n      let collectionView: CollectionView;\n      if (data.encrypted) {\n        const collection = CollectionWithIdExport.toDomain(c);\n        collection.organizationId = this.organizationId;\n        collectionView = await collection.decrypt();\n      } else {\n        collectionView = CollectionWithIdExport.toView(c);\n        collectionView.organizationId = null;\n      }\n\n      if (collectionView != null) {\n        groupingsMap.set(c.id, this.result.collections.length);\n        this.result.collections.push(collectionView);\n      }\n    }\n    return groupingsMap;\n  }\n}\n","import { KdfConfig } from \"@bitwarden/common/auth/models/domain/kdf-config\";\nimport { KdfType } from \"@bitwarden/common/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { BitwardenPasswordProtectedFileFormat } from \"@bitwarden/exporter/vault-export/bitwarden-json-export-types\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { Importer } from \"../importer\";\n\nimport { BitwardenJsonImporter } from \"./bitwarden-json-importer\";\nexport class BitwardenPasswordProtectedImporter extends BitwardenJsonImporter implements Importer {\n  private key: SymmetricCryptoKey;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    private promptForPassword_callback: () => Promise<string>\n  ) {\n    super(cryptoService, i18nService);\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const parsedData: BitwardenPasswordProtectedFileFormat = JSON.parse(data);\n\n    if (!parsedData) {\n      result.success = false;\n      return result;\n    }\n\n    // File is unencrypted\n    if (!parsedData?.encrypted) {\n      return await super.parse(data);\n    }\n\n    // File is account-encrypted\n    if (!parsedData?.passwordProtected) {\n      return await super.parse(data);\n    }\n\n    if (this.cannotParseFile(parsedData)) {\n      result.success = false;\n      return result;\n    }\n\n    // File is password-protected\n    const password = await this.promptForPassword_callback();\n    if (!(await this.checkPassword(parsedData, password))) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"invalidFilePassword\");\n      return result;\n    }\n\n    const encData = new EncString(parsedData.data);\n    const clearTextData = await this.cryptoService.decryptToUtf8(encData, this.key);\n    return await super.parse(clearTextData);\n  }\n\n  private async checkPassword(\n    jdoc: BitwardenPasswordProtectedFileFormat,\n    password: string\n  ): Promise<boolean> {\n    if (this.isNullOrWhitespace(password)) {\n      return false;\n    }\n\n    this.key = await this.cryptoService.makePinKey(\n      password,\n      jdoc.salt,\n      jdoc.kdfType,\n      new KdfConfig(jdoc.kdfIterations, jdoc.kdfMemory, jdoc.kdfParallelism)\n    );\n\n    const encKeyValidation = new EncString(jdoc.encKeyValidation_DO_NOT_EDIT);\n\n    const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n      encKeyValidation,\n      this.key\n    );\n    if (encKeyValidationDecrypt === null) {\n      return false;\n    }\n    return true;\n  }\n\n  private cannotParseFile(jdoc: BitwardenPasswordProtectedFileFormat): boolean {\n    return (\n      !jdoc ||\n      !jdoc.encrypted ||\n      !jdoc.passwordProtected ||\n      !jdoc.salt ||\n      !jdoc.kdfIterations ||\n      typeof jdoc.kdfIterations !== \"number\" ||\n      jdoc.kdfType == null ||\n      KdfType[jdoc.kdfType] == null ||\n      !jdoc.encKeyValidation_DO_NOT_EDIT ||\n      !jdoc.data\n    );\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlurCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.label === \"null\") {\n        value.label = null;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.label,\n        this.getValueOrDefault(this.nameFromUrl(value.domain), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.domain);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (this.isNullOrWhitespace(value.email) && !this.isNullOrWhitespace(value.username)) {\n        cipher.login.username = value.username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.email);\n        cipher.notes = this.getValueOrDefault(value.username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst OfficialProps = [\"!group_id\", \"!group_name\", \"title\", \"username\", \"password\", \"URL\", \"id\"];\n\nexport class ButtercupCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value[\"!group_name\"]));\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      let processingCustomFields = false;\n      for (const prop in value) {\n        // eslint-disable-next-line\n        if (value.hasOwnProperty(prop)) {\n          if (!processingCustomFields && OfficialProps.indexOf(prop) === -1) {\n            processingCustomFields = true;\n          }\n          if (processingCustomFields) {\n            this.processKvp(cipher, prop, value[prop]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ClipperzHtmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const textarea = doc.querySelector(\"textarea\");\n    if (textarea == null || this.isNullOrWhitespace(textarea.textContent)) {\n      result.errorMessage = \"Missing textarea.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const entries = JSON.parse(textarea.textContent);\n    entries.forEach((entry: any) => {\n      const cipher = this.initLoginCipher();\n      if (!this.isNullOrWhitespace(entry.label)) {\n        cipher.name = entry.label.split(\" \")[0];\n      }\n      if (entry.data != null && !this.isNullOrWhitespace(entry.data.notes)) {\n        cipher.notes = entry.data.notes.split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (entry.currentVersion != null && entry.currentVersion.fields != null) {\n        for (const property in entry.currentVersion.fields) {\n          // eslint-disable-next-line\n          if (!entry.currentVersion.fields.hasOwnProperty(property)) {\n            continue;\n          }\n\n          const field = entry.currentVersion.fields[property];\n          const actionType = field.actionType != null ? field.actionType.toLowerCase() : null;\n          switch (actionType) {\n            case \"password\":\n              cipher.login.password = this.getValueOrDefault(field.value);\n              break;\n            case \"email\":\n            case \"username\":\n            case \"user\":\n            case \"name\":\n              cipher.login.username = this.getValueOrDefault(field.value);\n              break;\n            case \"url\":\n              cipher.login.uris = this.makeUriArray(field.value);\n              break;\n            default: {\n              const labelLower = field.label != null ? field.label.toLowerCase() : null;\n              if (\n                cipher.login.password == null &&\n                this.passwordFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.password = this.getValueOrDefault(field.value);\n              } else if (\n                cipher.login.username == null &&\n                this.usernameFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.username = this.getValueOrDefault(field.value);\n              } else if (\n                (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n                this.uriFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.uris = this.makeUriArray(field.value);\n              } else {\n                this.processKvp(cipher, field.label, field.value);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class CodebookCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value.Category));\n\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite) === \"True\";\n      cipher.name = this.getValueOrDefault(value.Entry, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.login.username = this.getValueOrDefault(value.Username, value.Email);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.totp = this.getValueOrDefault(value.TOTP);\n      cipher.login.uris = this.makeUriArray(value.Website);\n\n      if (!this.isNullOrWhitespace(value.Username)) {\n        this.processKvp(cipher, \"Email\", value.Email);\n      }\n      this.processKvp(cipher, \"Phone\", value.Phone);\n      this.processKvp(cipher, \"PIN\", value.PIN);\n      this.processKvp(cipher, \"Account\", value.Account);\n      this.processKvp(cipher, \"Date\", value.Date);\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CredentialsRecord,\n  IdRecord,\n  PaymentsRecord,\n  PersonalInformationRecord,\n  SecureNoteRecord,\n} from \"./types/dashlane-csv-types\";\n\nconst _mappedCredentialsColumns = new Set([\n  \"title\",\n  \"note\",\n  \"username\",\n  \"password\",\n  \"url\",\n  \"otpSecret\",\n  \"category\",\n]);\n\nconst _mappedPersonalInfoAsIdentityColumns = new Set([\n  \"type\",\n  \"title\",\n  \"first_name\",\n  \"middle_name\",\n  \"last_name\",\n  \"login\",\n  \"email\",\n  \"phone_number\",\n  \"address\",\n  \"country\",\n  \"state\",\n  \"city\",\n  \"zip\",\n  // Skip item_name as we already have set a combined name\n  \"item_name\",\n]);\n\nconst _mappedSecureNoteColumns = new Set([\"title\", \"note\"]);\n\nexport class DashlaneCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results[0].type != null && results[0].title != null) {\n      const personalRecords = results as PersonalInformationRecord[];\n\n      // If personalRecords has only one \"name\" then create an Identity-Cipher\n      if (personalRecords.filter((x) => x.type === \"name\").length === 1) {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        results.forEach((row) => {\n          this.parsePersonalInformationRecordAsIdentity(cipher, row);\n        });\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n        result.success = true;\n        return Promise.resolve(result);\n      }\n    }\n\n    results.forEach((row) => {\n      const cipher = this.initLoginCipher();\n\n      const rowKeys = Object.keys(row);\n      if (rowKeys[0] === \"username\") {\n        this.processFolder(result, row.category);\n        this.parseCredentialsRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"account_name\") {\n        this.parsePaymentRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"number\") {\n        this.parseIdRecord(cipher, row);\n      }\n\n      if ((rowKeys[0] === \"type\") != null && rowKeys[1] === \"title\") {\n        this.parsePersonalInformationRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"title\" && rowKeys[1] === \"note\") {\n        this.parseSecureNoteRecords(cipher, row);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  parseCredentialsRecord(cipher: CipherView, row: CredentialsRecord) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    cipher.name = row.title;\n    cipher.notes = row.note;\n    cipher.login.username = row.username;\n    cipher.login.password = row.password;\n    cipher.login.totp = row.otpSecret;\n    cipher.login.uris = this.makeUriArray(row.url);\n\n    this.importUnmappedFields(cipher, row, _mappedCredentialsColumns);\n  }\n\n  parsePaymentRecord(cipher: CipherView, row: PaymentsRecord) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n\n    cipher.name = row.account_name;\n    let mappedValues: string[] = [];\n    switch (row.type) {\n      case \"credit_card\":\n        cipher.card.cardholderName = row.account_name;\n        cipher.card.number = row.cc_number;\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.code = row.code;\n        this.setCardExpiration(cipher, `${row.expiration_month}/${row.expiration_year}`);\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\n          \"account_name\",\n          \"account_holder\",\n          \"cc_number\",\n          \"code\",\n          \"expiration_month\",\n          \"expiration_year\",\n        ];\n        break;\n      case \"bank\":\n        cipher.card.cardholderName = row.account_holder;\n        cipher.card.number = row.account_number;\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\"account_name\", \"account_holder\", \"account_number\"];\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parseIdRecord(cipher: CipherView, row: IdRecord) {\n    cipher.type = CipherType.Identity;\n    cipher.identity = new IdentityView();\n\n    const mappedValues: string[] = [\"name\", \"number\"];\n    switch (row.type) {\n      case \"card\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        break;\n      case \"passport\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.passportNumber = row.number;\n        break;\n      case \"license\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        cipher.identity.state = row.state;\n\n        mappedValues.push(\"state\");\n        break;\n      case \"social_security\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.ssn = row.number;\n        break;\n      case \"tax_number\":\n        cipher.name = row.type;\n        cipher.identity.licenseNumber = row.number;\n        break;\n\n      default:\n        break;\n    }\n\n    // If you add more mapped fields please extend this\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parsePersonalInformationRecord(cipher: CipherView, row: PersonalInformationRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    if (row.type === \"name\") {\n      cipher.name = `${row.title} ${row.first_name} ${row.middle_name} ${row.last_name}`\n        .replace(\"  \", \" \")\n        .trim();\n    } else {\n      cipher.name = row.item_name;\n    }\n\n    const dataRow = row as any;\n    Object.keys(row).forEach((key) => {\n      this.processKvp(cipher, key, dataRow[key]);\n    });\n  }\n\n  parsePersonalInformationRecordAsIdentity(cipher: CipherView, row: PersonalInformationRecord) {\n    switch (row.type) {\n      case \"name\":\n        this.processFullName(cipher, `${row.first_name} ${row.middle_name} ${row.last_name}`);\n        cipher.identity.title = row.title;\n        cipher.name = cipher.identity.fullName;\n\n        cipher.identity.username = row.login;\n        break;\n      case \"email\":\n        cipher.identity.email = row.email;\n        break;\n      case \"number\":\n        cipher.identity.phone = row.phone_number;\n        break;\n      case \"address\":\n        cipher.identity.address1 = row.address;\n        cipher.identity.city = row.city;\n        cipher.identity.postalCode = row.zip;\n        cipher.identity.state = row.state;\n        cipher.identity.country = row.country;\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, _mappedPersonalInfoAsIdentityColumns);\n  }\n\n  parseSecureNoteRecords(cipher: CipherView, row: SecureNoteRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = row.title;\n    cipher.notes = row.note;\n\n    this.importUnmappedFields(cipher, row, _mappedSecureNoteColumns);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nconst HandledResults = new Set([\n  \"ADDRESS\",\n  \"AUTHENTIFIANT\",\n  \"BANKSTATEMENT\",\n  \"IDCARD\",\n  \"IDENTITY\",\n  \"PAYMENTMEANS_CREDITCARD\",\n  \"PAYMENTMEAN_PAYPAL\",\n  \"EMAIL\",\n]);\n\nexport class DashlaneJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    if (results.ADDRESS != null) {\n      this.processAddress(results.ADDRESS);\n    }\n    if (results.AUTHENTIFIANT != null) {\n      this.processAuth(results.AUTHENTIFIANT);\n    }\n    if (results.BANKSTATEMENT != null) {\n      this.processNote(results.BANKSTATEMENT, \"BankAccountName\");\n    }\n    if (results.IDCARD != null) {\n      this.processNote(results.IDCARD, \"Fullname\");\n    }\n    if (results.PAYMENTMEANS_CREDITCARD != null) {\n      this.processCard(results.PAYMENTMEANS_CREDITCARD);\n    }\n    if (results.IDENTITY != null) {\n      this.processIdentity(results.IDENTITY);\n    }\n\n    for (const key in results) {\n      // eslint-disable-next-line\n      if (results.hasOwnProperty(key) && !HandledResults.has(key)) {\n        this.processNote(results[key], null, \"Generic Note\");\n      }\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processAuth(results: any[]) {\n    results.forEach((credential: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(credential.title);\n\n      cipher.login.username = this.getValueOrDefault(\n        credential.login,\n        this.getValueOrDefault(credential.secondaryLogin)\n      );\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.domain);\n      cipher.notes += this.getValueOrDefault(credential.note, \"\");\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processIdentity(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.fullName, \"\");\n      const nameParts = cipher.name.split(\" \");\n      if (nameParts.length > 0) {\n        cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n      }\n      if (nameParts.length === 2) {\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n      } else if (nameParts.length === 3) {\n        cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[2]);\n      }\n      cipher.identity.username = this.getValueOrDefault(obj.pseudo);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processAddress(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.addressName);\n      cipher.identity.address1 = this.getValueOrDefault(obj.addressFull);\n      cipher.identity.city = this.getValueOrDefault(obj.city);\n      cipher.identity.state = this.getValueOrDefault(obj.state);\n      cipher.identity.postalCode = this.getValueOrDefault(obj.zipcode);\n      cipher.identity.country = this.getValueOrDefault(obj.country);\n      if (cipher.identity.country != null) {\n        cipher.identity.country = cipher.identity.country.toUpperCase();\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processCard(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.card = new CardView();\n      cipher.type = CipherType.Card;\n      cipher.name = this.getValueOrDefault(obj.bank);\n      cipher.card.number = this.getValueOrDefault(obj.cardNumber);\n      cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n      cipher.card.cardholderName = this.getValueOrDefault(obj.owner);\n      if (!this.isNullOrWhitespace(cipher.card.brand)) {\n        if (this.isNullOrWhitespace(cipher.name)) {\n          cipher.name = cipher.card.brand;\n        } else {\n          cipher.name += \" - \" + cipher.card.brand;\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processNote(results: any[], nameProperty: string, name: string = null) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.secureNote = new SecureNoteView();\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote.type = SecureNoteType.Generic;\n      if (name != null) {\n        cipher.name = name;\n      } else {\n        cipher.name = this.getValueOrDefault(obj[nameProperty]);\n      }\n      for (const key in obj) {\n        // eslint-disable-next-line\n        if (obj.hasOwnProperty(key) && key !== nameProperty) {\n          this.processKvp(cipher, key, obj[key].toString());\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class EncryptrCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Label, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      const text = this.getValueOrDefault(value.Text);\n      if (!this.isNullOrWhitespace(text)) {\n        if (this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = text;\n        } else {\n          cipher.notes += \"\\n\\n\" + text;\n        }\n      }\n\n      const type = value[\"Entry Type\"];\n      if (type === \"Password\") {\n        cipher.login.username = this.getValueOrDefault(value.Username);\n        cipher.login.password = this.getValueOrDefault(value.Password);\n        cipher.login.uris = this.makeUriArray(value[\"Site URL\"]);\n      } else if (type === \"Credit Card\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value[\"Name on card\"]);\n        cipher.card.number = this.getValueOrDefault(value[\"Card Number\"]);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.CVV);\n        const expiry = this.getValueOrDefault(value.Expiry);\n        if (!this.isNullOrWhitespace(expiry)) {\n          const expParts = expiry.split(\"/\");\n          if (expParts.length > 1) {\n            cipher.card.expMonth = parseInt(expParts[0], null).toString();\n            cipher.card.expYear = (2000 + parseInt(expParts[1], null)).toString();\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class EnpassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let firstRow = true;\n    results.forEach((value) => {\n      if (value.length < 2 || (firstRow && (value[0] === \"Title\" || value[0] === \"title\"))) {\n        firstRow = false;\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (\n        value.length === 2 ||\n        (!this.containsField(value, \"username\") &&\n          !this.containsField(value, \"password\") &&\n          !this.containsField(value, \"email\") &&\n          !this.containsField(value, \"url\"))\n      ) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      }\n\n      if (\n        this.containsField(value, \"cardholder\") &&\n        this.containsField(value, \"number\") &&\n        this.containsField(value, \"expiry date\")\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      }\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const fieldValue: string = value[i + 2];\n          if (this.isNullOrWhitespace(fieldValue)) {\n            continue;\n          }\n\n          const fieldName: string = value[i + 1];\n          const fieldNameLower = fieldName.toLowerCase();\n\n          if (cipher.type === CipherType.Login) {\n            if (\n              fieldNameLower === \"url\" &&\n              (cipher.login.uris == null || cipher.login.uris.length === 0)\n            ) {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              continue;\n            } else if (\n              (fieldNameLower === \"username\" || fieldNameLower === \"email\") &&\n              this.isNullOrWhitespace(cipher.login.username)\n            ) {\n              cipher.login.username = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"password\" &&\n              this.isNullOrWhitespace(cipher.login.password)\n            ) {\n              cipher.login.password = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n              cipher.login.totp = fieldValue;\n              continue;\n            }\n          } else if (cipher.type === CipherType.Card) {\n            if (\n              fieldNameLower === \"cardholder\" &&\n              this.isNullOrWhitespace(cipher.card.cardholderName)\n            ) {\n              cipher.card.cardholderName = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"number\" && this.isNullOrWhitespace(cipher.card.number)) {\n              cipher.card.number = fieldValue;\n              cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n              continue;\n            } else if (fieldNameLower === \"cvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n              cipher.card.code = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"expiry date\" &&\n              this.isNullOrWhitespace(cipher.card.expMonth) &&\n              this.isNullOrWhitespace(cipher.card.expYear)\n            ) {\n              if (this.setCardExpiration(cipher, fieldValue)) {\n                continue;\n              }\n            } else if (fieldNameLower === \"type\") {\n              // Skip since brand was determined from number above\n              continue;\n            }\n          }\n\n          this.processKvp(cipher, fieldName, fieldValue);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private containsField(fields: any[], name: string) {\n    if (fields == null || name == null) {\n      return false;\n    }\n    return (\n      fields.filter((f) => !this.isNullOrWhitespace(f) && f.toLowerCase() === name.toLowerCase())\n        .length > 0\n    );\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { EnpassJsonFile, EnpassFolder, EnpassField } from \"./types/enpass-json-type\";\n\ntype EnpassFolderTreeItem = EnpassFolder & { children: EnpassFolderTreeItem[] };\nconst androidUrlRegex = new RegExp(\"androidapp://.*==@\", \"g\");\n\nexport class EnpassJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: EnpassJsonFile = JSON.parse(data);\n    if (results == null || results.items == null || results.items.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    const foldersIndexMap = new Map<string, number>();\n    const folderTree = this.buildFolderTree(results.folders);\n    this.flattenFolderTree(null, folderTree, foldersMap);\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((item) => {\n      if (item.folders != null && item.folders.length > 0 && foldersIndexMap.has(item.folders[0])) {\n        result.folderRelationships.push([\n          result.ciphers.length,\n          foldersIndexMap.get(item.folders[0]),\n        ]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(item.title);\n      cipher.favorite = item.favorite > 0;\n\n      if (item.template_type != null && item.fields != null && item.fields.length > 0) {\n        if (\n          item.template_type.indexOf(\"login.\") === 0 ||\n          item.template_type.indexOf(\"password.\") === 0\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else if (item.template_type.indexOf(\"creditcard.\") === 0) {\n          this.processCard(cipher, item.fields);\n        } else if (\n          item.template_type.indexOf(\"identity.\") < 0 &&\n          item.fields.some((f) => f.type === \"password\" && !this.isNullOrWhitespace(f.value))\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else {\n          this.processNote(cipher, item.fields);\n        }\n      }\n\n      cipher.notes += \"\\n\" + this.getValueOrDefault(item.note, \"\");\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private processLogin(cipher: CipherView, fields: EnpassField[]) {\n    const urls: string[] = [];\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n\n      if (\n        (field.type === \"username\" || field.type === \"email\") &&\n        this.isNullOrWhitespace(cipher.login.username)\n      ) {\n        cipher.login.username = field.value;\n      } else if (field.type === \"password\" && this.isNullOrWhitespace(cipher.login.password)) {\n        cipher.login.password = field.value;\n      } else if (field.type === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n        cipher.login.totp = field.value;\n      } else if (field.type === \"url\") {\n        urls.push(field.value);\n      } else if (field.type === \".Android#\") {\n        let cleanedValue = field.value.startsWith(\"androidapp://\")\n          ? field.value\n          : \"androidapp://\" + field.value;\n        cleanedValue = cleanedValue.replace(\"android://\", \"\");\n        cleanedValue = cleanedValue.replace(androidUrlRegex, \"androidapp://\");\n        urls.push(cleanedValue);\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n    cipher.login.uris = this.makeUriArray(urls);\n  }\n\n  private processCard(cipher: CipherView, fields: EnpassField[]) {\n    cipher.card = new CardView();\n    cipher.type = CipherType.Card;\n    fields.forEach((field) => {\n      if (\n        this.isNullOrWhitespace(field.value) ||\n        field.type === \"section\" ||\n        field.type === \"ccType\"\n      ) {\n        return;\n      }\n\n      if (field.type === \"ccName\" && this.isNullOrWhitespace(cipher.card.cardholderName)) {\n        cipher.card.cardholderName = field.value;\n      } else if (field.type === \"ccNumber\" && this.isNullOrWhitespace(cipher.card.number)) {\n        cipher.card.number = field.value;\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n      } else if (field.type === \"ccCvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n        cipher.card.code = field.value;\n      } else if (field.type === \"ccExpiry\" && this.isNullOrWhitespace(cipher.card.expYear)) {\n        if (!this.setCardExpiration(cipher, field.value)) {\n          this.processKvp(\n            cipher,\n            field.label,\n            field.value,\n            field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n          );\n        }\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n  }\n\n  private processNote(cipher: CipherView, fields: EnpassField[]) {\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n      this.processKvp(\n        cipher,\n        field.label,\n        field.value,\n        field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n      );\n    });\n  }\n\n  private buildFolderTree(folders: EnpassFolder[]): EnpassFolderTreeItem[] {\n    if (folders == null) {\n      return [];\n    }\n    const folderTree: EnpassFolderTreeItem[] = [];\n    const map = new Map<string, EnpassFolderTreeItem>([]);\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      map.set(obj.uuid, obj);\n      obj.children = [];\n    });\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      if (obj.parent_uuid != null && obj.parent_uuid !== \"\" && map.has(obj.parent_uuid)) {\n        map.get(obj.parent_uuid).children.push(obj);\n      } else {\n        folderTree.push(obj);\n      }\n    });\n    return folderTree;\n  }\n\n  private flattenFolderTree(\n    titlePrefix: string,\n    tree: EnpassFolderTreeItem[],\n    map: Map<string, string>\n  ) {\n    if (tree == null) {\n      return;\n    }\n    tree.forEach((f) => {\n      if (f.title != null && f.title.trim() !== \"\") {\n        let title = f.title.trim();\n        if (titlePrefix != null && titlePrefix.trim() !== \"\") {\n          title = titlePrefix + \"/\" + title;\n        }\n        map.set(f.uuid, title);\n        if (f.children != null && f.children.length !== 0) {\n          this.flattenFolderTree(title, f.children, map);\n        }\n      }\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class FirefoxCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results\n      .filter((value) => {\n        return value.url !== \"chrome://FirefoxAccounts\";\n      })\n      .forEach((value) => {\n        const cipher = this.initLoginCipher();\n        const url = this.getValueOrDefault(value.url, this.getValueOrDefault(value.hostname));\n        cipher.name = this.getValueOrDefault(this.nameFromUrl(url), \"--\");\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.uris = this.makeUriArray(url);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export interface FskFile {\n  data: Data;\n}\n\nexport interface Data {\n  [key: string]: FskEntry;\n}\n\nexport enum FskEntryTypesEnum {\n  Login = 1,\n  CreditCard = 2,\n}\n\nexport interface FskEntry {\n  color: string;\n  creditCvv: string;\n  creditExpiry: string;\n  creditNumber: string;\n  favorite: number; // UNIX timestamp\n  notes: string;\n  password: string;\n  passwordList: PasswordList[];\n  passwordModifiedDate: number; // UNIX timestamp\n  rev: string | number;\n  service: string;\n  style: string;\n  type: FskEntryTypesEnum;\n  url: string;\n  username: string;\n  createdDate: number; // UNIX timestamp\n  modifiedDate: number; // UNIX timestamp\n}\n\nexport interface PasswordList {\n  changedate: string;\n  password: string;\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { FskEntry, FskEntryTypesEnum, FskFile } from \"./fsecure-fsk-types\";\n\nexport class FSecureFskImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: FskFile = JSON.parse(data);\n    if (results == null || results.data == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const key in results.data) {\n      // eslint-disable-next-line\n      if (!results.data.hasOwnProperty(key)) {\n        continue;\n      }\n\n      const value = results.data[key];\n      const cipher = this.parseEntry(value);\n      result.ciphers.push(cipher);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseEntry(entry: FskEntry): CipherView {\n    const cipher = this.initLoginCipher();\n    cipher.name = this.getValueOrDefault(entry.service);\n    cipher.notes = this.getValueOrDefault(entry.notes);\n    cipher.favorite = entry.favorite > 0;\n\n    switch (entry.type) {\n      case FskEntryTypesEnum.Login:\n        this.handleLoginEntry(entry, cipher);\n        break;\n      case FskEntryTypesEnum.CreditCard:\n        this.handleCreditCardEntry(entry, cipher);\n        break;\n      default:\n        return;\n        break;\n    }\n\n    this.convertToNoteIfNeeded(cipher);\n    this.cleanupCipher(cipher);\n    return cipher;\n  }\n\n  private handleLoginEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.login.username = this.getValueOrDefault(entry.username);\n    cipher.login.password = this.getValueOrDefault(entry.password);\n    cipher.login.uris = this.makeUriArray(entry.url);\n  }\n\n  private handleCreditCardEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n    cipher.card.cardholderName = this.getValueOrDefault(entry.username);\n    cipher.card.number = this.getValueOrDefault(entry.creditNumber);\n    cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n    cipher.card.code = this.getValueOrDefault(entry.creditCvv);\n    if (!this.isNullOrWhitespace(entry.creditExpiry)) {\n      if (!this.setCardExpiration(cipher, entry.creditExpiry)) {\n        this.processKvp(cipher, \"Expiration\", entry.creditExpiry);\n      }\n    }\n    if (!this.isNullOrWhitespace(entry.password)) {\n      this.processKvp(cipher, \"PIN\", entry.password);\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class GnomeJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || Object.keys(results).length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const keyRing in results) {\n      if (\n        !results.hasOwnProperty(keyRing) || // eslint-disable-line\n        this.isNullOrWhitespace(keyRing) ||\n        results[keyRing].length === 0\n      ) {\n        continue;\n      }\n\n      results[keyRing].forEach((value: any) => {\n        if (\n          this.isNullOrWhitespace(value.display_name) ||\n          value.display_name.indexOf(\"http\") !== 0\n        ) {\n          return;\n        }\n\n        this.processFolder(result, keyRing);\n        const cipher = this.initLoginCipher();\n        cipher.name = value.display_name.replace(\"http://\", \"\").replace(\"https://\", \"\");\n        if (cipher.name.length > 30) {\n          cipher.name = cipher.name.substring(0, 30);\n        }\n        cipher.login.password = this.getValueOrDefault(value.secret);\n        cipher.login.uris = this.makeUriArray(value.display_name);\n\n        if (value.attributes != null) {\n          cipher.login.username =\n            value.attributes != null\n              ? this.getValueOrDefault(value.attributes.username_value)\n              : null;\n          for (const attr in value.attributes) {\n            if (\n              !value.attributes.hasOwnProperty(attr) || // eslint-disable-line\n              attr === \"username_value\" ||\n              attr === \"xdg:schema\"\n            ) {\n              continue;\n            }\n            this.processKvp(cipher, attr, value.attributes[attr]);\n          }\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst NotesHeader = \"Notes\\n\\n\";\nconst ApplicationsHeader = \"Applications\\n\\n\";\nconst WebsitesHeader = \"Websites\\n\\n\";\nconst Delimiter = \"\\n---\\n\";\n\nexport class KasperskyTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n\n    let notesData: string;\n    let applicationsData: string;\n    let websitesData: string;\n    let workingData = this.splitNewLine(data).join(\"\\n\");\n\n    if (workingData.indexOf(NotesHeader) !== -1) {\n      const parts = workingData.split(NotesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        notesData = parts[1];\n      }\n    }\n    if (workingData.indexOf(ApplicationsHeader) !== -1) {\n      const parts = workingData.split(ApplicationsHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        applicationsData = parts[1];\n      }\n    }\n    if (workingData.indexOf(WebsitesHeader) === 0) {\n      const parts = workingData.split(WebsitesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        websitesData = parts[1];\n      }\n    }\n\n    const notes = this.parseDataCategory(notesData);\n    const applications = this.parseDataCategory(applicationsData);\n    const websites = this.parseDataCategory(websitesData);\n\n    notes.forEach((n) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(n.get(\"Name\"));\n      cipher.notes = this.getValueOrDefault(n.get(\"Text\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    websites.concat(applications).forEach((w) => {\n      const cipher = this.initLoginCipher();\n      const nameKey = w.has(\"Website name\") ? \"Website name\" : \"Application\";\n      cipher.name = this.getValueOrDefault(w.get(nameKey), \"\");\n      if (!this.isNullOrWhitespace(w.get(\"Login name\"))) {\n        if (!this.isNullOrWhitespace(cipher.name)) {\n          cipher.name += \": \";\n        }\n        cipher.name += w.get(\"Login name\");\n      }\n      cipher.notes = this.getValueOrDefault(w.get(\"Comment\"));\n      if (w.has(\"Website URL\")) {\n        cipher.login.uris = this.makeUriArray(w.get(\"Website URL\"));\n      }\n      cipher.login.username = this.getValueOrDefault(w.get(\"Login\"));\n      cipher.login.password = this.getValueOrDefault(w.get(\"Password\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseDataCategory(data: string): Map<string, string>[] {\n    if (this.isNullOrWhitespace(data) || data.indexOf(Delimiter) === -1) {\n      return [];\n    }\n    const items: Map<string, string>[] = [];\n    data.split(Delimiter).forEach((p) => {\n      if (p.indexOf(\"\\n\") === -1) {\n        return;\n      }\n      const item = new Map<string, string>();\n      let itemComment: string;\n      let itemCommentKey: string;\n      p.split(\"\\n\").forEach((l) => {\n        if (itemComment != null) {\n          itemComment += \"\\n\" + l;\n          return;\n        }\n        const colonIndex = l.indexOf(\":\");\n        let key: string;\n        let val: string;\n        if (colonIndex === -1) {\n          return;\n        } else {\n          key = l.substring(0, colonIndex);\n          if (l.length > colonIndex + 1) {\n            val = l.substring(colonIndex + 2);\n          }\n        }\n        if (key != null) {\n          item.set(key, val);\n        }\n        if (key === \"Comment\" || key === \"Text\") {\n          itemComment = val;\n          itemCommentKey = key;\n        }\n      });\n      if (itemComment != null && itemCommentKey != null) {\n        item.set(itemCommentKey, itemComment);\n      }\n      if (item.size === 0) {\n        return;\n      }\n      items.push(item);\n    });\n    return items;\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePass2XmlImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    //Note: The doc.querySelector(\"KeePassFile > Root > Group\") no longers works on node and we have to breakdown the query by nodes\n    const KeePassFileNode = doc.querySelector(\"KeePassFile\");\n\n    if (KeePassFileNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const RootNode = KeePassFileNode.querySelector(\"Root\");\n    if (RootNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const rootGroup = RootNode.querySelector(\"Group\");\n    if (rootGroup == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root > Group` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    this.traverse(rootGroup, true, \"\");\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  traverse(node: Element, isRootNode: boolean, groupPrefixName: string) {\n    const folderIndex = this.result.folders.length;\n    let groupName = groupPrefixName;\n\n    if (!isRootNode) {\n      if (groupName !== \"\") {\n        groupName += \"/\";\n      }\n      const nameEl = this.querySelectorDirectChild(node, \"Name\");\n      groupName += nameEl == null ? \"-\" : nameEl.textContent;\n      const folder = new FolderView();\n      folder.name = groupName;\n      this.result.folders.push(folder);\n    }\n\n    this.querySelectorAllDirectChild(node, \"Entry\").forEach((entry) => {\n      const cipherIndex = this.result.ciphers.length;\n\n      const cipher = this.initLoginCipher();\n      this.querySelectorAllDirectChild(entry, \"String\").forEach((entryString) => {\n        const valueEl = this.querySelectorDirectChild(entryString, \"Value\");\n        const value = valueEl != null ? valueEl.textContent : null;\n        if (this.isNullOrWhitespace(value)) {\n          return;\n        }\n        const keyEl = this.querySelectorDirectChild(entryString, \"Key\");\n        const key = keyEl != null ? keyEl.textContent : null;\n\n        if (key === \"URL\") {\n          cipher.login.uris = this.makeUriArray(value);\n        } else if (key === \"UserName\") {\n          cipher.login.username = value;\n        } else if (key === \"Password\") {\n          cipher.login.password = value;\n        } else if (key === \"otp\") {\n          cipher.login.totp = value.replace(\"key=\", \"\");\n        } else if (key === \"Title\") {\n          cipher.name = value;\n        } else if (key === \"Notes\") {\n          cipher.notes += value + \"\\n\";\n        } else {\n          let type = FieldType.Text;\n          const attrs = valueEl.attributes as any;\n          if (\n            attrs.length > 0 &&\n            attrs.ProtectInMemory != null &&\n            attrs.ProtectInMemory.value === \"True\"\n          ) {\n            type = FieldType.Hidden;\n          }\n          this.processKvp(cipher, key, value, type);\n        }\n      });\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n\n      if (!isRootNode) {\n        this.result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    this.querySelectorAllDirectChild(node, \"Group\").forEach((group) => {\n      this.traverse(group, false, groupName);\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePassXCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(value.Title)) {\n        return;\n      }\n\n      value.Group =\n        !this.isNullOrWhitespace(value.Group) && value.Group.startsWith(\"Root/\")\n          ? value.Group.replace(\"Root/\", \"\")\n          : value.Group;\n      const groupName = !this.isNullOrWhitespace(value.Group) ? value.Group : null;\n      this.processFolder(result, groupName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class KeeperCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 6) {\n        return;\n      }\n\n      this.processFolder(result, value[0]);\n      const cipher = this.initLoginCipher();\n\n      const notes = this.getValueOrDefault(value[5]);\n      if (notes) {\n        cipher.notes = `${notes}\\n`;\n      }\n\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[4]);\n\n      if (value.length > 7) {\n        // we have some custom fields.\n        for (let i = 7; i < value.length; i = i + 2) {\n          if (value[i] == \"TFC:Keeper\") {\n            cipher.login.totp = value[i + 1];\n          } else {\n            this.processKvp(cipher, value[i], value[i + 1]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LastPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipherIndex = result.ciphers.length;\n      let folderIndex = result.folders.length;\n      let grouping = value.grouping;\n      if (grouping != null) {\n        // eslint-disable-next-line\n        grouping = grouping.replace(/\\\\/g, \"/\").replace(/[\\x00-\\x1F\\x7F-\\x9F]/g, \"\");\n      }\n      const hasFolder = this.getValueOrDefault(grouping, \"(none)\") !== \"(none)\";\n      let addFolder = hasFolder;\n\n      if (hasFolder) {\n        for (let i = 0; i < result.folders.length; i++) {\n          if (result.folders[i].name === grouping) {\n            addFolder = false;\n            folderIndex = i;\n            break;\n          }\n        }\n      }\n\n      const cipher = this.buildBaseCipher(value);\n      if (cipher.type === CipherType.Login) {\n        cipher.notes = this.getValueOrDefault(value.extra);\n        cipher.login = new LoginView();\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.totp);\n      } else if (cipher.type === CipherType.SecureNote) {\n        this.parseSecureNote(value, cipher);\n      } else if (cipher.type === CipherType.Card) {\n        cipher.card = this.parseCard(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n      } else if (cipher.type === CipherType.Identity) {\n        cipher.identity = this.parseIdentity(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n        if (!this.isNullOrWhitespace(value.ccnum)) {\n          // there is a card on this identity too\n          const cardCipher = this.buildBaseCipher(value);\n          cardCipher.identity = null;\n          cardCipher.type = CipherType.Card;\n          cardCipher.card = this.parseCard(value);\n          result.ciphers.push(cardCipher);\n        }\n      }\n\n      result.ciphers.push(cipher);\n\n      if (addFolder) {\n        const f = new FolderView();\n        f.name = grouping;\n        result.folders.push(f);\n      }\n      if (hasFolder) {\n        result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private buildBaseCipher(value: any) {\n    const cipher = new CipherView();\n    // eslint-disable-next-line\n    if (value.hasOwnProperty(\"profilename\") && value.hasOwnProperty(\"profilelanguage\")) {\n      // form fill\n      cipher.favorite = false;\n      cipher.name = this.getValueOrDefault(value.profilename, \"--\");\n      cipher.type = CipherType.Card;\n\n      if (\n        !this.isNullOrWhitespace(value.title) ||\n        !this.isNullOrWhitespace(value.firstname) ||\n        !this.isNullOrWhitespace(value.lastname) ||\n        !this.isNullOrWhitespace(value.address1) ||\n        !this.isNullOrWhitespace(value.phone) ||\n        !this.isNullOrWhitespace(value.username) ||\n        !this.isNullOrWhitespace(value.email)\n      ) {\n        cipher.type = CipherType.Identity;\n      }\n    } else {\n      // site or secure note\n      cipher.favorite = !this.organization && this.getValueOrDefault(value.fav, \"0\") === \"1\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.type = value.url === \"http://sn\" ? CipherType.SecureNote : CipherType.Login;\n    }\n    return cipher;\n  }\n\n  private parseCard(value: any): CardView {\n    const card = new CardView();\n    card.cardholderName = this.getValueOrDefault(value.ccname);\n    card.number = this.getValueOrDefault(value.ccnum);\n    card.code = this.getValueOrDefault(value.cccsc);\n    card.brand = CardView.getCardBrandByPatterns(card.number);\n\n    if (!this.isNullOrWhitespace(value.ccexp) && value.ccexp.indexOf(\"-\") > -1) {\n      const ccexpParts = (value.ccexp as string).split(\"-\");\n      if (ccexpParts.length > 1) {\n        card.expYear = ccexpParts[0];\n        card.expMonth = ccexpParts[1];\n        if (card.expMonth.length === 2 && card.expMonth[0] === \"0\") {\n          card.expMonth = card.expMonth[1];\n        }\n      }\n    }\n\n    return card;\n  }\n\n  private parseIdentity(value: any): IdentityView {\n    const identity = new IdentityView();\n    identity.title = this.getValueOrDefault(value.title);\n    identity.firstName = this.getValueOrDefault(value.firstname);\n    identity.middleName = this.getValueOrDefault(value.middlename);\n    identity.lastName = this.getValueOrDefault(value.lastname);\n    identity.username = this.getValueOrDefault(value.username);\n    identity.company = this.getValueOrDefault(value.company);\n    identity.ssn = this.getValueOrDefault(value.ssn);\n    identity.address1 = this.getValueOrDefault(value.address1);\n    identity.address2 = this.getValueOrDefault(value.address2);\n    identity.address3 = this.getValueOrDefault(value.address3);\n    identity.city = this.getValueOrDefault(value.city);\n    identity.state = this.getValueOrDefault(value.state);\n    identity.postalCode = this.getValueOrDefault(value.zip);\n    identity.country = this.getValueOrDefault(value.country);\n    identity.email = this.getValueOrDefault(value.email);\n    identity.phone = this.getValueOrDefault(value.phone);\n\n    if (!this.isNullOrWhitespace(identity.title)) {\n      identity.title = identity.title.charAt(0).toUpperCase() + identity.title.slice(1);\n    }\n\n    return identity;\n  }\n\n  private parseSecureNote(value: any, cipher: CipherView) {\n    const extraParts = this.splitNewLine(value.extra);\n    let processedNote = false;\n\n    if (extraParts.length) {\n      const typeParts = extraParts[0].split(\":\");\n      if (\n        typeParts.length > 1 &&\n        typeParts[0] === \"NoteType\" &&\n        (typeParts[1] === \"Credit Card\" || typeParts[1] === \"Address\")\n      ) {\n        if (typeParts[1] === \"Credit Card\") {\n          const mappedData = this.parseSecureNoteMapping<CardView>(cipher, extraParts, {\n            Number: \"number\",\n            \"Name on Card\": \"cardholderName\",\n            \"Security Code\": \"code\",\n            // LP provides date in a format like 'June,2020'\n            // Store in expMonth, then parse and modify\n            \"Expiration Date\": \"expMonth\",\n          });\n\n          if (this.isNullOrWhitespace(mappedData.expMonth) || mappedData.expMonth === \",\") {\n            // No expiration data\n            mappedData.expMonth = undefined;\n          } else {\n            const [monthString, year] = mappedData.expMonth.split(\",\");\n            // Parse month name into number\n            if (!this.isNullOrWhitespace(monthString)) {\n              const month = new Date(Date.parse(monthString.trim() + \" 1, 2012\")).getMonth() + 1;\n              if (isNaN(month)) {\n                mappedData.expMonth = undefined;\n              } else {\n                mappedData.expMonth = month.toString();\n              }\n            } else {\n              mappedData.expMonth = undefined;\n            }\n            if (!this.isNullOrWhitespace(year)) {\n              mappedData.expYear = year;\n            }\n          }\n\n          cipher.type = CipherType.Card;\n          cipher.card = mappedData;\n        } else if (typeParts[1] === \"Address\") {\n          const mappedData = this.parseSecureNoteMapping<IdentityView>(cipher, extraParts, {\n            Title: \"title\",\n            \"First Name\": \"firstName\",\n            \"Last Name\": \"lastName\",\n            \"Middle Name\": \"middleName\",\n            Company: \"company\",\n            \"Address 1\": \"address1\",\n            \"Address 2\": \"address2\",\n            \"Address 3\": \"address3\",\n            \"City / Town\": \"city\",\n            State: \"state\",\n            \"Zip / Postal Code\": \"postalCode\",\n            Country: \"country\",\n            \"Email Address\": \"email\",\n            Username: \"username\",\n          });\n          cipher.type = CipherType.Identity;\n          cipher.identity = mappedData;\n        }\n        processedNote = true;\n      }\n    }\n\n    if (!processedNote) {\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n      cipher.notes = this.getValueOrDefault(value.extra);\n    }\n  }\n\n  private parseSecureNoteMapping<T>(cipher: CipherView, extraParts: string[], map: any): T {\n    const dataObj: any = {};\n\n    let processingNotes = false;\n    extraParts.forEach((extraPart) => {\n      let key: string = null;\n      let val: string = null;\n      if (!processingNotes) {\n        if (this.isNullOrWhitespace(extraPart)) {\n          return;\n        }\n        const colonIndex = extraPart.indexOf(\":\");\n        if (colonIndex === -1) {\n          key = extraPart;\n        } else {\n          key = extraPart.substring(0, colonIndex);\n          if (extraPart.length > colonIndex) {\n            val = extraPart.substring(colonIndex + 1);\n          }\n        }\n        if (this.isNullOrWhitespace(key) || this.isNullOrWhitespace(val) || key === \"NoteType\") {\n          return;\n        }\n      }\n\n      if (processingNotes) {\n        cipher.notes += \"\\n\" + extraPart;\n      } else if (key === \"Notes\") {\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes += \"\\n\" + val;\n        } else {\n          cipher.notes = val;\n        }\n        processingNotes = true;\n        // eslint-disable-next-line\n      } else if (map.hasOwnProperty(key)) {\n        dataObj[map[key]] = val;\n      } else {\n        this.processKvp(cipher, key, val);\n      }\n    });\n\n    return dataObj;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LogMeOnceCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 4) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[1]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MeldiumCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.DisplayName, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.login.username = this.getValueOrDefault(value.UserName);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MSecureCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      const folderName =\n        this.getValueOrDefault(value[0], \"Unassigned\") !== \"Unassigned\" ? value[0] : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[2], \"--\");\n\n      if (value[1] === \"Web Logins\" || value[1] === \"Login\") {\n        cipher.login.uris = this.makeUriArray(value[4]);\n        cipher.login.username = this.getValueOrDefault(value[5]);\n        cipher.login.password = this.getValueOrDefault(value[6]);\n        cipher.notes = !this.isNullOrWhitespace(value[3]) ? value[3].split(\"\\\\n\").join(\"\\n\") : null;\n      } else if (value.length > 3) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        for (let i = 3; i < value.length; i++) {\n          if (!this.isNullOrWhitespace(value[i])) {\n            cipher.notes += value[i] + \"\\n\";\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(value[1]) && cipher.type !== CipherType.Login) {\n        cipher.name = value[1] + \": \" + cipher.name;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst mappedBaseColumns = [\"nickname\", \"additionalInfo\"];\nconst _mappedUserAccountColumns = new Set(\n  mappedBaseColumns.concat([\"url\", \"username\", \"password\", \"twofaSecret\"])\n);\nconst _mappedCreditCardColumns = new Set(\n  mappedBaseColumns.concat([\"cardNumber\", \"cardName\", \"exp_month\", \"exp_year\", \"cvv\"])\n);\n\nconst _mappedIdentityColumns = new Set(\n  mappedBaseColumns.concat([\n    \"title\",\n    \"firstName\",\n    \"middleName\",\n    \"lastName\",\n    \"email\",\n    \"firstAddressLine\",\n    \"secondAddressLine\",\n    \"city\",\n    \"country\",\n    \"zipCode\",\n  ])\n);\n\nconst _mappedIdCardColumns = new Set(mappedBaseColumns.concat([\"idName\", \"idNumber\", \"idCountry\"]));\n\nconst _mappedTwoFaColumns = new Set(mappedBaseColumns.concat([\"authToken\"]));\n\nconst _mappedUserNoteColumns = new Set(mappedBaseColumns.concat([\"content\"]));\n\nexport class MykiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.nickname, \"--\");\n      cipher.notes = this.getValueOrDefault(value.additionalInfo);\n\n      if (value.url !== undefined) {\n        // Accounts\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.twofaSecret);\n\n        this.importUnmappedFields(cipher, value, _mappedUserAccountColumns);\n      } else if (value.authToken !== undefined) {\n        // TwoFA\n        cipher.login.totp = this.getValueOrDefault(value.authToken);\n\n        this.importUnmappedFields(cipher, value, _mappedTwoFaColumns);\n      } else if (value.cardNumber !== undefined) {\n        // Cards\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.expMonth = this.getValueOrDefault(value.exp_month);\n        cipher.card.expYear = this.getValueOrDefault(value.exp_year);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n\n        this.importUnmappedFields(cipher, value, _mappedCreditCardColumns);\n      } else if (value.firstName !== undefined) {\n        // Identities\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        cipher.identity.title = this.getValueOrDefault(value.title);\n        cipher.identity.firstName = this.getValueOrDefault(value.firstName);\n        cipher.identity.middleName = this.getValueOrDefault(value.middleName);\n        cipher.identity.lastName = this.getValueOrDefault(value.lastName);\n        cipher.identity.phone = this.getValueOrDefault(value.number);\n        cipher.identity.email = this.getValueOrDefault(value.email);\n        cipher.identity.address1 = this.getValueOrDefault(value.firstAddressLine);\n        cipher.identity.address2 = this.getValueOrDefault(value.secondAddressLine);\n        cipher.identity.city = this.getValueOrDefault(value.city);\n        cipher.identity.country = this.getValueOrDefault(value.country);\n        cipher.identity.postalCode = this.getValueOrDefault(value.zipCode);\n\n        this.importUnmappedFields(cipher, value, _mappedIdentityColumns);\n      } else if (value.idType !== undefined) {\n        // IdCards\n\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        this.processFullName(cipher, value.idName);\n        cipher.identity.country = this.getValueOrDefault(value.idCountry);\n\n        switch (value.idType) {\n          // case \"Driver's License\":\n          // case \"ID Card\":\n          // case \"Outdoor License\":\n          // case \"Software License\":\n          // case \"Tax Number\":\n          // case \"Bank Account\":\n          // case \"Insurance Card\":\n          // case \"Health Card\":\n          // case \"Membership\":\n          // case \"Database\":\n          // case \"Reward Program\":\n          // case \"Tour Visa\":\n          case \"Passport\":\n            cipher.identity.passportNumber = value.idNumber;\n            break;\n          case \"Social Security\":\n            cipher.identity.ssn = value.idNumber;\n            break;\n          default:\n            cipher.identity.licenseNumber = value.idNumber;\n            break;\n        }\n\n        this.importUnmappedFields(cipher, value, _mappedIdCardColumns);\n      } else if (value.content !== undefined) {\n        // Notes\n        cipher.secureNote = new SecureNoteView();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.notes = this.getValueOrDefault(value.content);\n\n        this.importUnmappedFields(cipher, value, _mappedUserNoteColumns);\n      } else {\n        return;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\ntype nodePassCsvParsed = {\n  name: string;\n  url: string;\n  username: string;\n  password: string;\n  note: string;\n  cardholdername: string;\n  cardnumber: string;\n  cvc: string;\n  expirydate: string;\n  zipcode: string;\n  folder: string;\n  full_name: string;\n  phone_number: string;\n  email: string;\n  address1: string;\n  address2: string;\n  city: string;\n  country: string;\n  state: string;\n};\n\nexport class NordPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: nodePassCsvParsed[] = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((record) => {\n      const recordType = this.evaluateType(record);\n      if (recordType === undefined) {\n        return;\n      }\n\n      if (!this.organization) {\n        this.processFolder(result, record.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.name = this.getValueOrDefault(record.name, \"--\");\n      cipher.notes = this.getValueOrDefault(record.note);\n\n      switch (recordType) {\n        case CipherType.Login:\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.username = this.getValueOrDefault(record.username);\n          cipher.login.password = this.getValueOrDefault(record.password);\n          cipher.login.uris = this.makeUriArray(record.url);\n          break;\n        case CipherType.Card:\n          cipher.type = CipherType.Card;\n          cipher.card.cardholderName = this.getValueOrDefault(record.cardholdername);\n          cipher.card.number = this.getValueOrDefault(record.cardnumber);\n          cipher.card.code = this.getValueOrDefault(record.cvc);\n          cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n          this.setCardExpiration(cipher, record.expirydate);\n          break;\n\n        case CipherType.Identity:\n          cipher.type = CipherType.Identity;\n\n          this.processFullName(cipher, this.getValueOrDefault(record.full_name));\n          cipher.identity.address1 = this.getValueOrDefault(record.address1);\n          cipher.identity.address2 = this.getValueOrDefault(record.address2);\n          cipher.identity.city = this.getValueOrDefault(record.city);\n          cipher.identity.state = this.getValueOrDefault(record.state);\n          cipher.identity.postalCode = this.getValueOrDefault(record.zipcode);\n          cipher.identity.country = this.getValueOrDefault(record.country);\n          if (cipher.identity.country != null) {\n            cipher.identity.country = cipher.identity.country.toUpperCase();\n          }\n          cipher.identity.email = this.getValueOrDefault(record.email);\n          cipher.identity.phone = this.getValueOrDefault(record.phone_number);\n          break;\n        case CipherType.SecureNote:\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default:\n          break;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private evaluateType(record: nodePassCsvParsed): CipherType {\n    if (!this.isNullOrWhitespace(record.username)) {\n      return CipherType.Login;\n    }\n\n    if (!this.isNullOrWhitespace(record.cardnumber)) {\n      return CipherType.Card;\n    }\n\n    if (!this.isNullOrWhitespace(record.full_name)) {\n      return CipherType.Identity;\n    }\n\n    if (!this.isNullOrWhitespace(record.note)) {\n      return CipherType.SecureNote;\n    }\n\n    return undefined;\n  }\n}\n","export interface ExportData {\n  accounts?: AccountsEntity[] | null;\n}\nexport interface AccountsEntity {\n  attrs: AccountAttributes;\n  vaults?: VaultsEntity[] | null;\n}\nexport interface AccountAttributes {\n  accountName: string;\n  name: string;\n  avatar: string;\n  email: string;\n  uuid: string;\n  domain: string;\n}\nexport interface VaultsEntity {\n  attrs: VaultAttributes;\n  items?: Item[] | null;\n}\nexport interface VaultAttributes {\n  uuid: string;\n  desc: string;\n  avatar: string;\n  name: string;\n  type: string;\n}\n\nexport enum CategoryEnum {\n  Login = \"001\",\n  CreditCard = \"002\",\n  SecureNote = \"003\",\n  Identity = \"004\",\n  Password = \"005\",\n  Document = \"006\",\n  SoftwareLicense = \"100\",\n  BankAccount = \"101\",\n  Database = \"102\",\n  DriversLicense = \"103\",\n  OutdoorLicense = \"104\",\n  Membership = \"105\",\n  Passport = \"106\",\n  RewardsProgram = \"107\",\n  SocialSecurityNumber = \"108\",\n  WirelessRouter = \"109\",\n  Server = \"110\",\n  EmailAccount = \"111\",\n  API_Credential = \"112\",\n  MedicalRecord = \"113\",\n}\n\nexport interface Item {\n  uuid: string;\n  favIndex: number;\n  createdAt: number;\n  updatedAt: number;\n  trashed?: boolean;\n  categoryUuid: string;\n  details: Details;\n  overview: Overview;\n}\nexport interface Details {\n  loginFields?: (LoginFieldsEntity | null)[] | null;\n  notesPlain?: string | null;\n  sections?: (SectionsEntity | null)[] | null;\n  passwordHistory?: (PasswordHistoryEntity | null)[] | null;\n  documentAttributes?: DocumentAttributes | null;\n  password?: string | null;\n}\n\nexport enum LoginFieldTypeEnum {\n  TextOrHtml = \"T\",\n  EmailAddress = \"E\",\n  URL = \"U\",\n  Number = \"N\",\n  Password = \"P\",\n  TextArea = \"A\",\n  PhoneNumber = \"T\",\n  CheckBox = \"C\",\n}\nexport interface LoginFieldsEntity {\n  value: string;\n  id: string;\n  name: string;\n  fieldType: LoginFieldTypeEnum | string;\n  designation?: string | null;\n}\nexport interface SectionsEntity {\n  title: string;\n  name?: string | null;\n  fields?: FieldsEntity[] | null;\n}\nexport interface FieldsEntity {\n  title: string;\n  id: string;\n  value: Value;\n  indexAtSource: number;\n  guarded: boolean;\n  multiline: boolean;\n  dontGenerate: boolean;\n  placeholder?: string;\n  inputTraits: InputTraits;\n  clipboardFilter?: string | null;\n}\nexport interface Value {\n  totp?: string | null;\n  date?: number | null;\n  string?: string | null;\n  concealed?: string | null;\n  email?: Email | null;\n  phone?: string | null;\n  menu?: string | null;\n  gender?: string | null;\n  monthYear?: number | null;\n  url?: string | null;\n  address?: Address | null;\n  creditCardType?: string | null;\n  creditCardNumber?: string | null;\n  reference?: string | null;\n}\n\nexport interface Email {\n  email_address: string;\n  provider: string;\n}\n\nexport interface Address {\n  street: string;\n  city: string;\n  country: string;\n  zip: string;\n  state: string;\n}\nexport interface InputTraits {\n  keyboard: string;\n  correction: string;\n  capitalization: string;\n}\nexport interface PasswordHistoryEntity {\n  value: string;\n  time: number;\n}\nexport interface DocumentAttributes {\n  fileName: string;\n  documentId: string;\n  decryptedSize: number;\n}\nexport interface Overview {\n  subtitle: string;\n  title: string;\n  url: string;\n  urls?: UrlsEntity[] | null;\n  ps?: number | null;\n  pbe?: number | null;\n  pgrng?: boolean | null;\n  tags?: string[] | null;\n}\nexport interface UrlsEntity {\n  label: string;\n  url: string;\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class OnePassword1PifImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    data.split(this.newLineRegex).forEach((line) => {\n      if (this.isNullOrWhitespace(line) || line[0] !== \"{\") {\n        return;\n      }\n      const item = JSON.parse(line);\n      if (item.trashed === true) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n\n      if (this.isNullOrWhitespace(item.hmac)) {\n        this.processStandardItem(item, cipher);\n      } else {\n        this.processWinOpVaultItem(item, cipher);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processWinOpVaultItem(item: any, cipher: CipherView) {\n    if (item.overview != null) {\n      cipher.name = this.getValueOrDefault(item.overview.title);\n      if (item.overview.URLs != null) {\n        const urls: string[] = [];\n        item.overview.URLs.forEach((url: any) => {\n          if (!this.isNullOrWhitespace(url.u)) {\n            urls.push(url.u);\n          }\n        });\n        cipher.login.uris = this.makeUriArray(urls);\n      }\n    }\n\n    if (item.details != null) {\n      if (item.details.passwordHistory != null) {\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n      }\n      if (\n        !this.isNullOrWhitespace(item.details.ccnum) ||\n        !this.isNullOrWhitespace(item.details.cvv)\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      } else if (\n        !this.isNullOrWhitespace(item.details.firstname) ||\n        !this.isNullOrWhitespace(item.details.address1)\n      ) {\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n      }\n      if (cipher.type === CipherType.Login && !this.isNullOrWhitespace(item.details.password)) {\n        cipher.login.password = item.details.password;\n      }\n      if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n        cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (item.details.fields != null) {\n        this.parseFields(item.details.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.details.sections != null) {\n        item.details.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private processStandardItem(item: any, cipher: CipherView) {\n    cipher.favorite = item.openContents && item.openContents.faveIndex ? true : false;\n    cipher.name = this.getValueOrDefault(item.title);\n\n    if (item.typeName === \"securenotes.SecureNote\") {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    } else if (item.typeName === \"wallet.financial.CreditCard\") {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    } else if (item.typeName === \"identities.Identity\") {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    } else {\n      cipher.login.uris = this.makeUriArray(item.location);\n    }\n\n    if (item.secureContents != null) {\n      if (item.secureContents.passwordHistory != null) {\n        this.parsePasswordHistory(item.secureContents.passwordHistory, cipher);\n      }\n      if (!this.isNullOrWhitespace(item.secureContents.notesPlain)) {\n        cipher.notes = item.secureContents.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (cipher.type === CipherType.Login) {\n        if (!this.isNullOrWhitespace(item.secureContents.password)) {\n          cipher.login.password = item.secureContents.password;\n        }\n        if (item.secureContents.URLs != null) {\n          const urls: string[] = [];\n          item.secureContents.URLs.forEach((u: any) => {\n            if (!this.isNullOrWhitespace(u.url)) {\n              urls.push(u.url);\n            }\n          });\n          if (urls.length > 0) {\n            cipher.login.uris = this.makeUriArray(urls);\n          }\n        }\n      }\n      if (item.secureContents.fields != null) {\n        this.parseFields(item.secureContents.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.secureContents.sections != null) {\n        item.secureContents.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private parsePasswordHistory(items: any[], cipher: CipherView) {\n    const maxSize = items.length > 5 ? 5 : items.length;\n    cipher.passwordHistory = items\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n\n  private parseFields(\n    fields: any[],\n    cipher: CipherView,\n    designationKey: string,\n    valueKey: string,\n    nameKey: string\n  ) {\n    fields.forEach((field: any) => {\n      if (field[valueKey] == null || field[valueKey].toString().trim() === \"\") {\n        return;\n      }\n\n      // TODO: when date FieldType exists, store this as a date field type instead of formatted Text if k is 'date'\n      const fieldValue =\n        field.k === \"date\"\n          ? new Date(field[valueKey] * 1000).toUTCString()\n          : field[valueKey].toString();\n      const fieldDesignation =\n        field[designationKey] != null ? field[designationKey].toString() : null;\n\n      if (cipher.type === CipherType.Login) {\n        if (this.isNullOrWhitespace(cipher.login.username) && fieldDesignation === \"username\") {\n          cipher.login.username = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.password) &&\n          fieldDesignation === \"password\"\n        ) {\n          cipher.login.password = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.totp) &&\n          fieldDesignation != null &&\n          fieldDesignation.startsWith(\"TOTP_\")\n        ) {\n          cipher.login.totp = fieldValue;\n          return;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.isNullOrWhitespace(cipher.card.number) && fieldDesignation === \"ccnum\") {\n          cipher.card.number = fieldValue;\n          cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n          return;\n        } else if (this.isNullOrWhitespace(cipher.card.code) && fieldDesignation === \"cvv\") {\n          cipher.card.code = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.cardholderName) &&\n          fieldDesignation === \"cardholder\"\n        ) {\n          cipher.card.cardholderName = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.expiration) &&\n          fieldDesignation === \"expiry\" &&\n          fieldValue.length === 6\n        ) {\n          cipher.card.expMonth = (fieldValue as string).substr(4, 2);\n          if (cipher.card.expMonth[0] === \"0\") {\n            cipher.card.expMonth = cipher.card.expMonth.substr(1, 1);\n          }\n          cipher.card.expYear = (fieldValue as string).substr(0, 4);\n          return;\n        } else if (fieldDesignation === \"type\") {\n          // Skip since brand was determined from number above\n          return;\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        const identity = cipher.identity;\n        if (this.isNullOrWhitespace(identity.firstName) && fieldDesignation === \"firstname\") {\n          identity.firstName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.lastName) && fieldDesignation === \"lastname\") {\n          identity.lastName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.middleName) && fieldDesignation === \"initial\") {\n          identity.middleName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.phone) && fieldDesignation === \"defphone\") {\n          identity.phone = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.company) && fieldDesignation === \"company\") {\n          identity.company = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.email) && fieldDesignation === \"email\") {\n          identity.email = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.username) && fieldDesignation === \"username\") {\n          identity.username = fieldValue;\n          return;\n        } else if (fieldDesignation === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip } = field[valueKey];\n          identity.address1 = this.getValueOrDefault(street);\n          identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            identity.country = country.toUpperCase();\n          }\n          identity.postalCode = this.getValueOrDefault(zip);\n          return;\n        }\n      }\n\n      const fieldName = this.isNullOrWhitespace(field[nameKey]) ? \"no_name\" : field[nameKey];\n      if (\n        fieldName === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      const fieldType = field.k === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CategoryEnum,\n  Details,\n  ExportData,\n  FieldsEntity,\n  Item,\n  LoginFieldTypeEnum,\n  Overview,\n  PasswordHistoryEntity,\n  SectionsEntity,\n  UrlsEntity,\n  Value,\n  VaultsEntity,\n} from \"./types/onepassword-1pux-importer-types\";\n\nexport class OnePassword1PuxImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const exportData: ExportData = JSON.parse(data);\n\n    const account = exportData.accounts[0];\n    // TODO Add handling of multiple vaults\n    // const personalVaults = account.vaults[0].filter((v) => v.attrs.type === VaultAttributeTypeEnum.Personal);\n    account.vaults.forEach((vault: VaultsEntity) => {\n      vault.items.forEach((item: Item) => {\n        if (item.trashed === true) {\n          return;\n        }\n\n        const cipher = this.initLoginCipher();\n\n        const category = item.categoryUuid as CategoryEnum;\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.Password:\n          case CategoryEnum.WirelessRouter:\n          case CategoryEnum.Server:\n          case CategoryEnum.API_Credential:\n            cipher.type = CipherType.Login;\n            cipher.login = new LoginView();\n            break;\n          case CategoryEnum.CreditCard:\n          case CategoryEnum.BankAccount:\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            break;\n          case CategoryEnum.SecureNote:\n          case CategoryEnum.SoftwareLicense:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.MedicalRecord:\n            // case CategoryEnum.Document:\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case CategoryEnum.Identity:\n          case CategoryEnum.DriversLicense:\n          case CategoryEnum.OutdoorLicense:\n          case CategoryEnum.Membership:\n          case CategoryEnum.Passport:\n          case CategoryEnum.RewardsProgram:\n          case CategoryEnum.SocialSecurityNumber:\n            cipher.type = CipherType.Identity;\n            cipher.identity = new IdentityView();\n            break;\n          default:\n            break;\n        }\n\n        cipher.favorite = item.favIndex === 1 ? true : false;\n\n        this.processOverview(item.overview, cipher);\n\n        this.processLoginFields(item, cipher);\n\n        this.processDetails(category, item.details, cipher);\n\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n\n        this.processSections(category, item.details.sections, cipher);\n\n        if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n          cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        this.result.ciphers.push(cipher);\n      });\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processOverview(overview: Overview, cipher: CipherView) {\n    if (overview == null) {\n      return;\n    }\n\n    cipher.name = this.getValueOrDefault(overview.title);\n\n    if (overview.urls != null) {\n      const urls: string[] = [];\n      overview.urls.forEach((url: UrlsEntity) => {\n        if (!this.isNullOrWhitespace(url.url)) {\n          urls.push(url.url);\n        }\n      });\n      cipher.login.uris = this.makeUriArray(urls);\n    }\n\n    if (overview.tags != null && overview.tags.length > 0) {\n      const folderName = this.capitalize(overview.tags[0]);\n      this.processFolder(this.result, folderName);\n    }\n  }\n\n  private capitalize(inputString: string): string {\n    return inputString.trim().replace(/\\w\\S*/g, (w) => w.replace(/^\\w/, (c) => c.toUpperCase()));\n  }\n\n  private processLoginFields(item: Item, cipher: CipherView) {\n    if (item.details == null) {\n      return;\n    }\n\n    if (item.details.loginFields == null || item.details.loginFields.length === 0) {\n      return;\n    }\n\n    item.details.loginFields.forEach((loginField) => {\n      if (loginField.designation === \"username\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.username = loginField.value;\n        return;\n      }\n\n      if (loginField.designation === \"password\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.password = loginField.value;\n        return;\n      }\n\n      let fieldValue = loginField.value;\n      let fieldType: FieldType = FieldType.Text;\n      switch (loginField.fieldType) {\n        case LoginFieldTypeEnum.Password:\n          fieldType = FieldType.Hidden;\n          break;\n        case LoginFieldTypeEnum.CheckBox:\n          fieldValue = loginField.value !== \"\" ? \"true\" : \"false\";\n          fieldType = FieldType.Boolean;\n          break;\n        default:\n          break;\n      }\n      this.processKvp(cipher, loginField.name, fieldValue, fieldType);\n    });\n  }\n\n  private processDetails(category: CategoryEnum, details: Details, cipher: CipherView) {\n    if (category !== CategoryEnum.Password) {\n      return;\n    }\n\n    if (details == null) {\n      return;\n    }\n    cipher.login.password = details.password;\n  }\n\n  private processSections(category: CategoryEnum, sections: SectionsEntity[], cipher: CipherView) {\n    if (sections == null || sections.length === 0) {\n      return;\n    }\n\n    sections.forEach((section: SectionsEntity) => {\n      if (section.fields == null) {\n        return;\n      }\n\n      this.parseSectionFields(category, section.fields, cipher);\n    });\n  }\n\n  private parseSectionFields(category: CategoryEnum, fields: FieldsEntity[], cipher: CipherView) {\n    fields.forEach((field: FieldsEntity) => {\n      const valueKey = Object.keys(field.value)[0];\n      const anyField = field as any;\n\n      if (\n        anyField.value == null ||\n        anyField.value[valueKey] == null ||\n        anyField.value[valueKey] === \"\"\n      ) {\n        return;\n      }\n\n      const fieldName = this.getFieldName(field.id, field.title);\n      const fieldValue = this.extractValue(field.value, valueKey);\n\n      if (cipher.type === CipherType.Login) {\n        if (this.fillLogin(field, fieldValue, cipher)) {\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.WirelessRouter:\n            break;\n\n          case CategoryEnum.Server:\n            if (this.isNullOrWhitespace(cipher.login.uri) && field.id === \"url\") {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              return;\n            }\n            break;\n\n          case CategoryEnum.API_Credential:\n            if (this.fillApiCredentials(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.fillCreditCard(field, fieldValue, cipher)) {\n          return;\n        }\n\n        if (category === CategoryEnum.BankAccount) {\n          if (this.fillBankAccount(field, fieldValue, cipher)) {\n            return;\n          }\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        if (this.fillIdentity(field, fieldValue, cipher, valueKey)) {\n          return;\n        }\n        if (valueKey === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip, state } = field.value.address;\n          cipher.identity.address1 = this.getValueOrDefault(street);\n          cipher.identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            cipher.identity.country = country.toUpperCase();\n          }\n          cipher.identity.postalCode = this.getValueOrDefault(zip);\n          cipher.identity.state = this.getValueOrDefault(state);\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Identity:\n            break;\n          case CategoryEnum.DriversLicense:\n            if (this.fillDriversLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.OutdoorLicense:\n            if (this.fillOutdoorLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Membership:\n            if (this.fillMembership(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Passport:\n            if (this.fillPassport(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.RewardsProgram:\n            if (this.fillRewardsProgram(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.SocialSecurityNumber:\n            if (this.fillSSN(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (valueKey === \"email\") {\n        // fieldValue is an object casted into a string, so access the plain value instead\n        const { email_address, provider } = field.value.email;\n        this.processKvp(cipher, fieldName, email_address, FieldType.Text);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return;\n      }\n\n      // Do not include a password field if it's already in the history\n      if (\n        field.title === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      // TODO ?? If one of the fields is marked as guarded, then activate Password-Reprompt for the entire item\n      if (field.guarded && cipher.reprompt === CipherRepromptType.None) {\n        cipher.reprompt = CipherRepromptType.Password;\n      }\n\n      const fieldType = valueKey === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n\n  private getFieldName(id: string, title: string): string {\n    if (this.isNullOrWhitespace(title)) {\n      return id;\n    }\n\n    // Naive approach of checking if the fields id is usable\n    if (id.length > 25 && RegExp(/[0-9]{2}[A-Z]{2}/, \"i\").test(id)) {\n      return title;\n    }\n    return id;\n  }\n\n  private extractValue(value: Value, valueKey: string): string {\n    if (valueKey === \"date\") {\n      return new Date(value.date * 1000).toUTCString();\n    }\n\n    if (valueKey === \"monthYear\") {\n      return value.monthYear.toString();\n    }\n\n    return (value as any)[valueKey];\n  }\n\n  private fillLogin(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.username) && fieldName === \"username\") {\n      cipher.login.username = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"password\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (\n      this.isNullOrWhitespace(cipher.login.totp) &&\n      field.id != null &&\n      field.id.startsWith(\"TOTP_\")\n    ) {\n      cipher.login.totp = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillApiCredentials(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"credential\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.uri) && fieldName === \"hostname\") {\n      cipher.login.uris = this.makeUriArray(fieldValue);\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillCreditCard(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.number) && field.id === \"ccnum\") {\n      cipher.card.number = fieldValue;\n      cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.code) && field.id === \"cvv\") {\n      cipher.card.code = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"cardholder\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.expiration) && field.id === \"expiry\") {\n      const monthYear: string = fieldValue.toString().trim();\n      cipher.card.expMonth = monthYear.substring(4, 6);\n      if (cipher.card.expMonth[0] === \"0\") {\n        cipher.card.expMonth = cipher.card.expMonth.substring(1, 2);\n      }\n      cipher.card.expYear = monthYear.substring(0, 4);\n      return true;\n    }\n\n    if (field.id === \"type\") {\n      // Skip since brand was determined from number above\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillBankAccount(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"owner\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillIdentity(\n    field: FieldsEntity,\n    fieldValue: string,\n    cipher: CipherView,\n    valueKey: string\n  ): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"firstname\") {\n      cipher.identity.firstName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.lastName) && field.id === \"lastname\") {\n      cipher.identity.lastName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.middleName) && field.id === \"initial\") {\n      cipher.identity.middleName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"defphone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.email)) {\n      if (valueKey === \"email\") {\n        const { email_address, provider } = field.value.email;\n        cipher.identity.email = this.getValueOrDefault(email_address);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return true;\n      }\n\n      if (field.id === \"email\") {\n        cipher.identity.email = fieldValue;\n        return true;\n      }\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.username) && field.id === \"username\") {\n      cipher.identity.username = fieldValue;\n      return true;\n    }\n    return false;\n  }\n\n  private fillDriversLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.address1) && field.id === \"address\") {\n      cipher.identity.address1 = fieldValue;\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.licenseNumber) && field.id === \"number\") {\n      cipher.identity.licenseNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillOutdoorLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillMembership(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"org_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"phone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillPassport(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO Iso\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"issuing_country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.passportNumber) && field.id === \"number\") {\n      cipher.identity.passportNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillRewardsProgram(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillSSN(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.ssn) && field.id === \"number\") {\n      cipher.identity.ssn = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private parsePasswordHistory(historyItems: PasswordHistoryEntity[], cipher: CipherView) {\n    if (historyItems == null || historyItems.length === 0) {\n      return;\n    }\n\n    const maxSize = historyItems.length > 5 ? 5 : historyItems.length;\n    cipher.passwordHistory = historyItems\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nexport class CipherImportContext {\n  lowerProperty: string;\n  constructor(public importRecord: any, public property: string, public cipher: CipherView) {\n    this.lowerProperty = property.toLowerCase();\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\n\nexport const IgnoredProperties = [\n  \"ainfo\",\n  \"autosubmit\",\n  \"notesplain\",\n  \"ps\",\n  \"scope\",\n  \"tags\",\n  \"title\",\n  \"uuid\",\n  \"notes\",\n];\n\nexport abstract class OnePasswordCsvImporter extends BaseImporter implements Importer {\n  protected loginPropertyParsers = [\n    this.setLoginUsername,\n    this.setLoginPassword,\n    this.setLoginUris,\n  ];\n  protected creditCardPropertyParsers = [\n    this.setCreditCardNumber,\n    this.setCreditCardVerification,\n    this.setCreditCardCardholderName,\n    this.setCreditCardExpiry,\n  ];\n  protected identityPropertyParsers = [\n    this.setIdentityFirstName,\n    this.setIdentityInitial,\n    this.setIdentityLastName,\n    this.setIdentityUserName,\n    this.setIdentityEmail,\n    this.setIdentityPhone,\n    this.setIdentityCompany,\n  ];\n\n  abstract setCipherType(value: any, cipher: CipherView): void;\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true, {\n      quoteChar: '\"',\n      escapeChar: \"\\\\\",\n    });\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(this.getProp(value, \"title\"))) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.getProp(value, \"title\"), \"--\");\n\n      this.setNotes(value, cipher);\n\n      this.setCipherType(value, cipher);\n\n      let altUsername: string = null;\n      for (const property in value) {\n        // eslint-disable-next-line\n        if (!value.hasOwnProperty(property) || this.isNullOrWhitespace(value[property])) {\n          continue;\n        }\n\n        const context = new CipherImportContext(value, property, cipher);\n        if (cipher.type === CipherType.Login && this.setKnownLoginValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Card && this.setKnownCreditCardValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Identity && this.setKnownIdentityValue(context)) {\n          continue;\n        }\n\n        altUsername = this.setUnknownValue(context, altUsername);\n      }\n\n      if (\n        cipher.type === CipherType.Login &&\n        !this.isNullOrWhitespace(altUsername) &&\n        this.isNullOrWhitespace(cipher.login.username) &&\n        altUsername.indexOf(\"://\") === -1\n      ) {\n        cipher.login.username = altUsername;\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  protected getProp(obj: any, name: string): any {\n    const lowerObj = Object.entries(obj).reduce((agg: any, entry: [string, any]) => {\n      agg[entry[0].toLowerCase()] = entry[1];\n      return agg;\n    }, {});\n    return lowerObj[name.toLowerCase()];\n  }\n\n  protected getPropByRegexp(obj: any, regexp: RegExp): any {\n    const matchingKeys = Object.keys(obj).reduce((agg: string[], key: string) => {\n      if (key.match(regexp)) {\n        agg.push(key);\n      }\n      return agg;\n    }, []);\n    if (matchingKeys.length === 0) {\n      return null;\n    } else {\n      return obj[matchingKeys[0]];\n    }\n  }\n\n  protected getPropIncluding(obj: any, name: string): any {\n    const includesMap = Object.keys(obj).reduce((agg: string[], entry: string) => {\n      if (entry.toLowerCase().includes(name.toLowerCase())) {\n        agg.push(entry);\n      }\n      return agg;\n    }, []);\n    if (includesMap.length === 0) {\n      return null;\n    } else {\n      return obj[includesMap[0]];\n    }\n  }\n\n  protected setNotes(importRecord: any, cipher: CipherView) {\n    cipher.notes =\n      this.getValueOrDefault(this.getProp(importRecord, \"notesPlain\"), \"\") +\n      \"\\n\" +\n      this.getValueOrDefault(this.getProp(importRecord, \"notes\"), \"\") +\n      \"\\n\";\n    cipher.notes.trim();\n  }\n\n  protected setKnownLoginValue(context: CipherImportContext): boolean {\n    return this.loginPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownCreditCardValue(context: CipherImportContext): boolean {\n    return this.creditCardPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownIdentityValue(context: CipherImportContext): boolean {\n    return this.identityPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setUnknownValue(context: CipherImportContext, altUsername: string): string {\n    if (\n      IgnoredProperties.indexOf(context.lowerProperty) === -1 &&\n      !context.lowerProperty.startsWith(\"section:\") &&\n      !context.lowerProperty.startsWith(\"section \")\n    ) {\n      if (altUsername == null && context.lowerProperty === \"email\") {\n        return context.importRecord[context.property];\n      } else if (\n        context.lowerProperty === \"created date\" ||\n        context.lowerProperty === \"modified date\"\n      ) {\n        const readableDate = new Date(\n          parseInt(context.importRecord[context.property], 10) * 1000\n        ).toUTCString();\n        this.processKvp(context.cipher, \"1Password \" + context.property, readableDate);\n        return null;\n      }\n      if (\n        context.lowerProperty.includes(\"password\") ||\n        context.lowerProperty.includes(\"key\") ||\n        context.lowerProperty.includes(\"secret\")\n      ) {\n        this.processKvp(\n          context.cipher,\n          context.property,\n          context.importRecord[context.property],\n          FieldType.Hidden\n        );\n      } else {\n        this.processKvp(context.cipher, context.property, context.importRecord[context.property]);\n      }\n    }\n    return null;\n  }\n\n  protected setIdentityFirstName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.firstName) &&\n      context.lowerProperty.includes(\"first name\")\n    ) {\n      context.cipher.identity.firstName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityInitial(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.middleName) &&\n      context.lowerProperty.includes(\"initial\")\n    ) {\n      context.cipher.identity.middleName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityLastName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.lastName) &&\n      context.lowerProperty.includes(\"last name\")\n    ) {\n      context.cipher.identity.lastName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityUserName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.username) &&\n      context.lowerProperty.includes(\"username\")\n    ) {\n      context.cipher.identity.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityCompany(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.company) &&\n      context.lowerProperty.includes(\"company\")\n    ) {\n      context.cipher.identity.company = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityPhone(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.phone) &&\n      context.lowerProperty.includes(\"default phone\")\n    ) {\n      context.cipher.identity.phone = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityEmail(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.email) &&\n      context.lowerProperty.includes(\"email\")\n    ) {\n      context.cipher.identity.email = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardNumber(context: CipherImportContext): boolean {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.number) &&\n      context.lowerProperty.includes(\"number\")\n    ) {\n      context.cipher.card.number = context.importRecord[context.property];\n      context.cipher.card.brand = CardView.getCardBrandByPatterns(context.cipher.card.number);\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardVerification(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.code) &&\n      context.lowerProperty.includes(\"verification number\")\n    ) {\n      context.cipher.card.code = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardCardholderName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.cardholderName) &&\n      context.lowerProperty.includes(\"cardholder name\")\n    ) {\n      context.cipher.card.cardholderName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\") &&\n      context.importRecord[context.property].length === 7\n    ) {\n      context.cipher.card.expMonth = (context.importRecord[context.property] as string).substr(\n        0,\n        2\n      );\n      if (context.cipher.card.expMonth[0] === \"0\") {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = (context.importRecord[context.property] as string).substr(3, 4);\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginPassword(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.password) &&\n      context.lowerProperty === \"password\"\n    ) {\n      context.cipher.login.password = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUsername(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.username) &&\n      context.lowerProperty === \"username\"\n    ) {\n      context.cipher.login.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUris(context: CipherImportContext) {\n    if (\n      (context.cipher.login.uris == null || context.cipher.login.uris.length === 0) &&\n      context.lowerProperty === \"urls\"\n    ) {\n      const urls = context.importRecord[context.property].split(this.newLineRegex);\n      context.cipher.login.uris = this.makeUriArray(urls);\n      return true;\n    } else if (context.lowerProperty === \"url\") {\n      if (context.cipher.login.uris == null) {\n        context.cipher.login.uris = [];\n      }\n      context.cipher.login.uris.concat(this.makeUriArray(context.importRecord[context.property]));\n      return true;\n    }\n    return false;\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { IgnoredProperties, OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordMacCsvImporter extends OnePasswordCsvImporter implements Importer {\n  setCipherType(value: any, cipher: CipherView) {\n    const onePassType = this.getValueOrDefault(this.getProp(value, \"type\"), \"Login\");\n    switch (onePassType) {\n      case \"Credit Card\":\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Identity\":\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Login\":\n      case \"Secure Note\":\n        IgnoredProperties.push(\"type\");\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\nimport { OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordWinCsvImporter extends OnePasswordCsvImporter implements Importer {\n  constructor() {\n    super();\n    this.identityPropertyParsers.push(this.setIdentityAddress);\n  }\n\n  setCipherType(value: any, cipher: CipherView) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: number/i)) &&\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: expiry date/i))\n    ) {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    }\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: first name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: initial/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: last name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /internet \\d+: email/i))\n    ) {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    }\n  }\n\n  setIdentityAddress(context: CipherImportContext) {\n    if (context.lowerProperty.match(/address \\d+: address/i)) {\n      this.processKvp(context.cipher, \"address\", context.importRecord[context.property]);\n      return true;\n    }\n    return false;\n  }\n\n  setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\")\n    ) {\n      const expSplit = (context.importRecord[context.property] as string).split(\"/\");\n      context.cipher.card.expMonth = expSplit[0];\n      if (context.cipher.card.expMonth[0] === \"0\" && context.cipher.card.expMonth.length === 2) {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = expSplit[2].length > 4 ? expSplit[2].substr(0, 4) : expSplit[2];\n      return true;\n    }\n    return false;\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PadlockCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let headers: string[] = null;\n    results.forEach((value) => {\n      if (headers == null) {\n        headers = value.map((v: string) => v);\n        return;\n      }\n\n      if (value.length < 2 || value.length !== headers.length) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value[1])) {\n        if (this.organization) {\n          const tags = (value[1] as string).split(\",\");\n          tags.forEach((tag) => {\n            tag = tag.trim();\n            let addCollection = true;\n            let collectionIndex = result.collections.length;\n\n            for (let i = 0; i < result.collections.length; i++) {\n              if (result.collections[i].name === tag) {\n                addCollection = false;\n                collectionIndex = i;\n                break;\n              }\n            }\n\n            if (addCollection) {\n              const collection = new CollectionView();\n              collection.name = tag;\n              result.collections.push(collection);\n            }\n\n            result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n          });\n        } else {\n          const tags = (value[1] as string).split(\",\");\n          const tag = tags.length > 0 ? tags[0].trim() : null;\n          this.processFolder(result, tag);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      for (let i = 2; i < value.length; i++) {\n        const header = headers[i].trim().toLowerCase();\n        if (this.isNullOrWhitespace(value[i]) || this.isNullOrWhitespace(header)) {\n          continue;\n        }\n\n        if (this.usernameFieldNames.indexOf(header) > -1) {\n          cipher.login.username = value[i];\n        } else if (this.passwordFieldNames.indexOf(header) > -1) {\n          cipher.login.password = value[i];\n        } else if (this.uriFieldNames.indexOf(header) > -1) {\n          cipher.login.uris = this.makeUriArray(value[i]);\n        } else {\n          this.processKvp(cipher, headers[i], value[i]);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassKeepCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValue(\"category\", value));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValue(\"description\", value);\n      cipher.name = this.getValueOrDefault(this.getValue(\"title\", value), \"--\");\n      cipher.login.username = this.getValue(\"username\", value);\n      cipher.login.password = this.getValue(\"password\", value);\n      cipher.login.uris = this.makeUriArray(this.getValue(\"site\", value));\n      this.processKvp(cipher, \"Password 2\", this.getValue(\"password2\", value));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private getValue(key: string, value: any) {\n    return this.getValueOrDefault(value[key], this.getValueOrDefault(value[\" \" + key]));\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { PasskyJsonExport } from \"./passky-json-types\";\n\nexport class PasskyJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const passkyExport: PasskyJsonExport = JSON.parse(data);\n    if (\n      passkyExport == null ||\n      passkyExport.passwords == null ||\n      passkyExport.passwords.length === 0\n    ) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (passkyExport.encrypted == true) {\n      result.success = false;\n      result.errorMessage = \"Unable to import an encrypted passky backup.\";\n      return Promise.resolve(result);\n    }\n\n    passkyExport.passwords.forEach((record) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = record.website;\n      cipher.login.username = record.username;\n      cipher.login.password = record.password;\n\n      cipher.login.uris = this.makeUriArray(record.website);\n      cipher.notes = record.message;\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassmanJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((credential: any) => {\n      if (credential.tags != null && credential.tags.length > 0) {\n        const folderName = credential.tags[0].text;\n        this.processFolder(result, folderName);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = credential.label;\n\n      cipher.login.username = this.getValueOrDefault(credential.username);\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.url);\n      cipher.notes += this.getValueOrDefault(credential.description, \"\");\n      if (credential.otp != null) {\n        cipher.login.totp = this.getValueOrDefault(credential.otp.secret);\n      }\n\n      if (credential.custom_fields != null) {\n        credential.custom_fields.forEach((customField: any) => {\n          switch (customField.field_type) {\n            case \"text\":\n            case \"password\":\n              this.processKvp(cipher, customField.label, customField.value);\n              break;\n          }\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasspackCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const tagsJson = !this.isNullOrWhitespace(value.Tags) ? JSON.parse(value.Tags) : null;\n      const tags: string[] =\n        tagsJson != null && tagsJson.tags != null && tagsJson.tags.length > 0\n          ? tagsJson.tags\n              .map((tagJson: string) => {\n                try {\n                  const t = JSON.parse(tagJson);\n                  return this.getValueOrDefault(t.tag);\n                } catch {\n                  // Ignore error\n                }\n                return null;\n              })\n              .filter((t: string) => !this.isNullOrWhitespace(t))\n          : null;\n\n      if (this.organization && tags != null && tags.length > 0) {\n        tags.forEach((tag) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === tag) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = tag;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization && tags != null && tags.length > 0) {\n        this.processFolder(result, tags[0]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes, \"\");\n      cipher.notes += \"\\n\\n\" + this.getValueOrDefault(value[\"Shared Notes\"], \"\") + \"\\n\";\n      cipher.name = this.getValueOrDefault(value[\"Entry Name\"], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User ID\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n        value.__parsed_extra.forEach((extra: string) => {\n          if (!this.isNullOrWhitespace(extra)) {\n            cipher.notes += \"\\n\" + extra;\n          }\n        });\n      }\n\n      const fieldsJson = !this.isNullOrWhitespace(value[\"Extra Fields\"])\n        ? JSON.parse(value[\"Extra Fields\"])\n        : null;\n      const fields =\n        fieldsJson != null && fieldsJson.extraFields != null && fieldsJson.extraFields.length > 0\n          ? fieldsJson.extraFields.map((fieldJson: string) => {\n              try {\n                return JSON.parse(fieldJson);\n              } catch {\n                // Ignore error\n              }\n              return null;\n            })\n          : null;\n      if (fields != null) {\n        fields.forEach((f: any) => {\n          if (f != null) {\n            this.processKvp(cipher, f.name, f.data);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordAgentCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let newVersion = true;\n    results.forEach((value) => {\n      if (value.length !== 5 && value.length < 9) {\n        return;\n      }\n      const altFormat = value.length === 10 && value[0] === \"0\";\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[altFormat ? 1 : 0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[altFormat ? 2 : 1]);\n      cipher.login.password = this.getValueOrDefault(value[altFormat ? 3 : 2]);\n      if (value.length === 5) {\n        newVersion = false;\n        cipher.notes = this.getValueOrDefault(value[4]);\n        cipher.login.uris = this.makeUriArray(value[3]);\n      } else {\n        const folder = this.getValueOrDefault(value[altFormat ? 9 : 8], \"(None)\");\n        let folderName = folder !== \"(None)\" ? folder.split(\"\\\\\").join(\"/\") : null;\n        if (folderName != null) {\n          folderName = folder.split(\" > \").join(\"/\");\n          folderName = folder.split(\">\").join(\"/\");\n        }\n        this.processFolder(result, folderName);\n        cipher.notes = this.getValueOrDefault(value[altFormat ? 5 : 3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (newVersion && this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordBossJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.items == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    results.folders.forEach((value: any) => {\n      foldersMap.set(value.id, value.name);\n    });\n    const foldersIndexMap = new Map<string, number>();\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((value: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.login.uris = this.makeUriArray(value.login_url);\n\n      if (value.folder != null && foldersIndexMap.has(value.folder)) {\n        result.folderRelationships.push([result.ciphers.length, foldersIndexMap.get(value.folder)]);\n      }\n\n      if (value.identifiers == null) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value.identifiers.notes)) {\n        cipher.notes = value.identifiers.notes.split(\"\\\\r\\\\n\").join(\"\\n\").split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (value.type === \"CreditCard\") {\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n      }\n\n      for (const property in value.identifiers) {\n        // eslint-disable-next-line\n        if (!value.identifiers.hasOwnProperty(property)) {\n          continue;\n        }\n        const valObj = value.identifiers[property];\n        const val = valObj != null ? valObj.toString() : null;\n        if (\n          this.isNullOrWhitespace(val) ||\n          property === \"notes\" ||\n          property === \"ignoreItemInSecurityScore\"\n        ) {\n          continue;\n        }\n\n        if (property === \"custom_fields\") {\n          valObj.forEach((cf: any) => {\n            this.processKvp(cipher, cf.name, cf.value);\n          });\n          continue;\n        }\n\n        if (cipher.type === CipherType.Card) {\n          if (property === \"cardNumber\") {\n            cipher.card.number = val;\n            cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n            continue;\n          } else if (property === \"nameOnCard\") {\n            cipher.card.cardholderName = val;\n            continue;\n          } else if (property === \"security_code\") {\n            cipher.card.code = val;\n            continue;\n          } else if (property === \"expires\") {\n            try {\n              const expDate = new Date(val);\n              cipher.card.expYear = expDate.getFullYear().toString();\n              cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n            } catch {\n              // Ignore error\n            }\n            continue;\n          } else if (property === \"cardType\") {\n            continue;\n          }\n        } else {\n          if (\n            (property === \"username\" || property === \"email\") &&\n            this.isNullOrWhitespace(cipher.login.username)\n          ) {\n            cipher.login.username = val;\n            continue;\n          } else if (property === \"password\") {\n            cipher.login.password = val;\n            continue;\n          } else if (property === \"totp\") {\n            cipher.login.totp = val;\n            continue;\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(property) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n            continue;\n          }\n        }\n\n        this.processKvp(cipher, property, val);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordDragonXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const records = doc.querySelectorAll(\"PasswordManager > record\");\n    Array.from(records).forEach((record) => {\n      const category = this.querySelectorDirectChild(record, \"Category\");\n      const categoryText =\n        category != null &&\n        !this.isNullOrWhitespace(category.textContent) &&\n        category.textContent !== \"Unfiled\"\n          ? category.textContent\n          : null;\n      this.processFolder(result, categoryText);\n\n      const accountName = this.querySelectorDirectChild(record, \"Account-Name\");\n      const userId = this.querySelectorDirectChild(record, \"User-Id\");\n      const password = this.querySelectorDirectChild(record, \"Password\");\n      const url = this.querySelectorDirectChild(record, \"URL\");\n      const notes = this.querySelectorDirectChild(record, \"Notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name =\n        accountName != null ? this.getValueOrDefault(accountName.textContent, \"--\") : \"--\";\n      cipher.notes = notes != null ? this.getValueOrDefault(notes.textContent) : \"\";\n      cipher.login.username = userId != null ? this.getValueOrDefault(userId.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      const attributes: string[] = [];\n      for (let i = 1; i <= 10; i++) {\n        attributes.push(\"Attribute-\" + i);\n      }\n\n      this.querySelectorAllDirectChild(record, attributes.join(\",\")).forEach((attr) => {\n        if (this.isNullOrWhitespace(attr.textContent) || attr.textContent === \"null\") {\n          return;\n        }\n        this.processKvp(cipher, attr.tagName, attr.textContent);\n      });\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordSafeXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const passwordSafe = doc.querySelector(\"passwordsafe\");\n    if (passwordSafe == null) {\n      result.errorMessage = \"Missing `passwordsafe` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const notesDelimiter = passwordSafe.getAttribute(\"delimiter\");\n    const entries = doc.querySelectorAll(\"passwordsafe > entry\");\n    Array.from(entries).forEach((entry) => {\n      const group = this.querySelectorDirectChild(entry, \"group\");\n      const groupText =\n        group != null && !this.isNullOrWhitespace(group.textContent)\n          ? group.textContent.split(\".\").join(\"/\")\n          : null;\n      this.processFolder(result, groupText);\n\n      const title = this.querySelectorDirectChild(entry, \"title\");\n      const username = this.querySelectorDirectChild(entry, \"username\");\n      const email = this.querySelectorDirectChild(entry, \"email\");\n      const password = this.querySelectorDirectChild(entry, \"password\");\n      const url = this.querySelectorDirectChild(entry, \"url\");\n      const notes = this.querySelectorDirectChild(entry, \"notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name = title != null ? this.getValueOrDefault(title.textContent, \"--\") : \"--\";\n      cipher.notes =\n        notes != null\n          ? this.getValueOrDefault(notes.textContent, \"\").split(notesDelimiter).join(\"\\n\")\n          : null;\n      cipher.login.username =\n        username != null ? this.getValueOrDefault(username.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      if (this.isNullOrWhitespace(cipher.login.username) && email != null) {\n        cipher.login.username = this.getValueOrDefault(email.textContent);\n      } else if (email != null && !this.isNullOrWhitespace(email.textContent)) {\n        cipher.notes = this.isNullOrWhitespace(cipher.notes)\n          ? \"Email: \" + email.textContent\n          : cipher.notes + \"\\n\" + \"Email: \" + email.textContent;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordWalletTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 1) {\n        return;\n      }\n      if (value.length > 5) {\n        this.processFolder(result, value[5]);\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      if (value.length > 4) {\n        cipher.notes = this.getValueOrDefault(value[4], \"\").split(\"¬\").join(\"\\n\");\n      }\n      if (value.length > 2) {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n      }\n      if (value.length > 3) {\n        cipher.login.password = this.getValueOrDefault(value[3]);\n      }\n      if (value.length > 1) {\n        cipher.login.uris = this.makeUriArray(value[1]);\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export type ProtonPassJsonFile = {\n  version: string;\n  userId: string;\n  encrypted: boolean;\n  vaults: Record<string, ProtonPassVault>;\n};\n\nexport type ProtonPassVault = {\n  name: string;\n  description: string;\n  display: {\n    color: number;\n    icon: number;\n  };\n  items: ProtonPassItem[];\n};\n\nexport type ProtonPassItem = {\n  itemId: string;\n  shareId: string;\n  data: ProtonPassItemData;\n  state: ProtonPassItemState;\n  aliasEmail: string | null;\n  contentFormatVersion: number;\n  createTime: number;\n  modifyTime: number;\n};\n\nexport enum ProtonPassItemState {\n  ACTIVE = 1,\n  TRASHED = 2,\n}\n\nexport type ProtonPassItemData = {\n  metadata: ProtonPassItemMetadata;\n  extraFields: ProtonPassItemExtraField[];\n  type: \"login\" | \"alias\" | \"creditCard\" | \"note\";\n  content: ProtonPassLoginItemContent | ProtonPassCreditCardItemContent;\n};\n\nexport type ProtonPassItemMetadata = {\n  name: string;\n  note: string;\n  itemUuid: string;\n};\n\nexport type ProtonPassItemExtraField = {\n  fieldName: string;\n  type: string;\n  data: ProtonPassItemExtraFieldData;\n};\n\nexport type ProtonPassItemExtraFieldData = {\n  content?: string;\n  totpUri?: string;\n};\n\nexport type ProtonPassLoginItemContent = {\n  username?: string;\n  password?: string;\n  urls?: string[];\n  totpUri?: string;\n};\n\nexport type ProtonPassCreditCardItemContent = {\n  cardholderName?: string;\n  cardType?: number;\n  number?: string;\n  verificationNumber?: string;\n  expirationDate?: string;\n  pin?: string;\n};\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  ProtonPassCreditCardItemContent,\n  ProtonPassItemState,\n  ProtonPassJsonFile,\n  ProtonPassLoginItemContent,\n} from \"./types/protonpass-json-type\";\n\nexport class ProtonPassJsonImporter extends BaseImporter implements Importer {\n  constructor(private i18nService: I18nService) {\n    super();\n  }\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: ProtonPassJsonFile = JSON.parse(data);\n    if (results == null || results.vaults == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.encrypted) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"unsupportedEncryptedImport\");\n      return Promise.resolve(result);\n    }\n\n    for (const [, vault] of Object.entries(results.vaults)) {\n      for (const item of vault.items) {\n        if (item.state == ProtonPassItemState.TRASHED) {\n          continue;\n        }\n        this.processFolder(result, vault.name);\n\n        const cipher = this.initLoginCipher();\n        cipher.name = item.data.metadata.name;\n        cipher.notes = item.data.metadata.note;\n\n        switch (item.data.type) {\n          case \"login\": {\n            const loginContent = item.data.content as ProtonPassLoginItemContent;\n            cipher.login.uris = this.makeUriArray(loginContent.urls);\n            cipher.login.username = loginContent.username;\n            cipher.login.password = loginContent.password;\n            if (loginContent.totpUri != \"\") {\n              cipher.login.totp = new URL(loginContent.totpUri).searchParams.get(\"secret\");\n            }\n            for (const extraField of item.data.extraFields) {\n              this.processKvp(\n                cipher,\n                extraField.fieldName,\n                extraField.type == \"totp\" ? extraField.data.totpUri : extraField.data.content,\n                extraField.type == \"text\" ? FieldType.Text : FieldType.Hidden\n              );\n            }\n            break;\n          }\n          case \"note\":\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case \"creditCard\": {\n            const creditCardContent = item.data.content as ProtonPassCreditCardItemContent;\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            cipher.card.cardholderName = creditCardContent.cardholderName;\n            cipher.card.number = creditCardContent.number;\n            cipher.card.brand = CardView.getCardBrandByPatterns(creditCardContent.number);\n            cipher.card.code = creditCardContent.verificationNumber;\n\n            if (!this.isNullOrWhitespace(creditCardContent.expirationDate)) {\n              cipher.card.expMonth = creditCardContent.expirationDate.substring(0, 2);\n              cipher.card.expMonth = cipher.card.expMonth.replace(/^0+/, \"\");\n              cipher.card.expYear = creditCardContent.expirationDate.substring(2, 6);\n            }\n\n            if (!this.isNullOrWhitespace(creditCardContent.pin)) {\n              this.processKvp(cipher, \"PIN\", creditCardContent.pin, FieldType.Hidden);\n            }\n\n            break;\n          }\n        }\n\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      }\n    }\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  AppPasswordEntry,\n  BookmarkEntry,\n  EnvironmentVariablesEntry,\n  FoldersEntity,\n  GPGEntry,\n  NotesEntry,\n  PsonoItemTypes,\n  PsonoJsonExport,\n  TOTPEntry,\n  WebsitePasswordEntry,\n} from \"./psono-json-types\";\n\nexport class PsonoJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const psonoExport: PsonoJsonExport = JSON.parse(data);\n    if (psonoExport == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    this.parseFolders(result, psonoExport.folders);\n    this.handleItemParsing(result, psonoExport.items);\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFolders(result: ImportResult, folders: FoldersEntity[]) {\n    if (folders == null || folders.length === 0) {\n      return;\n    }\n\n    folders.forEach((folder) => {\n      if (folder.items == null || folder.items.length == 0) {\n        return;\n      }\n\n      this.processFolder(result, folder.name);\n\n      this.handleItemParsing(result, folder.items);\n    });\n  }\n\n  private handleItemParsing(result: ImportResult, items?: PsonoItemTypes[]) {\n    if (items == null || items.length === 0) {\n      return;\n    }\n\n    items.forEach((record) => {\n      const cipher = this.parsePsonoItem(record);\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n  }\n\n  private parsePsonoItem(item: PsonoItemTypes): CipherView {\n    const cipher = this.initLoginCipher();\n\n    switch (item.type) {\n      case \"website_password\":\n        this.parseWebsiteLogins(item, cipher);\n        break;\n      case \"application_password\":\n        this.parseApplicationPasswords(item, cipher);\n        break;\n      case \"environment_variables\":\n        this.parseEnvironmentVariables(item, cipher);\n        break;\n      case \"totp\":\n        this.parseTOTP(item, cipher);\n        break;\n      case \"bookmark\":\n        this.parseBookmarks(item, cipher);\n        break;\n      // Skipping this until we can save GPG into notes/custom fields\n      // case \"mail_gpg_own_key\":\n      //   this.parseGPG(item, cipher);\n      //   break;\n      case \"note\":\n        this.parseNotes(item, cipher);\n        break;\n      default:\n        break;\n    }\n\n    return cipher;\n  }\n\n  readonly WEBSITE_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"website_password_title\",\n    \"website_password_notes\",\n    \"website_password_username\",\n    \"website_password_password\",\n    \"website_password_url\",\n    \"autosubmit\",\n    \"website_password_auto_submit\",\n    \"urlfilter\",\n    \"website_password_url_filter\",\n  ]);\n  private parseWebsiteLogins(entry: WebsitePasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"website_password\") {\n      return;\n    }\n\n    cipher.name = entry.website_password_title;\n    cipher.notes = entry.website_password_notes;\n\n    cipher.login.username = entry.website_password_username;\n    cipher.login.password = entry.website_password_password;\n\n    cipher.login.uris = this.makeUriArray(entry.website_password_url);\n\n    this.processKvp(\n      cipher,\n      \"website_password_auto_submit\",\n      entry.website_password_auto_submit.toString(),\n      FieldType.Boolean\n    );\n\n    this.processKvp(cipher, \"website_password_url_filter\", entry.website_password_url_filter);\n\n    this.importUnmappedFields(cipher, entry, this.WEBSITE_mappedValues);\n  }\n\n  readonly APP_PWD_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"application_password_title\",\n    \"application_password_notes\",\n    \"application_password_username\",\n    \"application_password_password\",\n  ]);\n  private parseApplicationPasswords(entry: AppPasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"application_password\") {\n      return;\n    }\n\n    cipher.name = entry.application_password_title;\n    cipher.notes = entry.application_password_notes;\n\n    cipher.login.username = entry.application_password_username;\n    cipher.login.password = entry.application_password_password;\n\n    this.importUnmappedFields(cipher, entry, this.APP_PWD_mappedValues);\n  }\n\n  readonly BOOKMARK_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"bookmark_title\",\n    \"bookmark_notes\",\n    \"bookmark_url\",\n  ]);\n  private parseBookmarks(entry: BookmarkEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"bookmark\") {\n      return;\n    }\n\n    cipher.name = entry.bookmark_title;\n    cipher.notes = entry.bookmark_notes;\n\n    cipher.login.uris = this.makeUriArray(entry.bookmark_url);\n\n    this.importUnmappedFields(cipher, entry, this.BOOKMARK_mappedValues);\n  }\n\n  readonly NOTES_mappedValues = new Set([\"type\", \"name\", \"note_title\", \"note_notes\"]);\n  private parseNotes(entry: NotesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"note\") {\n      return;\n    }\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.note_title;\n    cipher.notes = entry.note_notes;\n\n    this.importUnmappedFields(cipher, entry, this.NOTES_mappedValues);\n  }\n\n  readonly TOTP_mappedValues = new Set([\"type\", \"name\", \"totp_title\", \"totp_notes\", \"totp_code\"]);\n  private parseTOTP(entry: TOTPEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"totp\") {\n      return;\n    }\n\n    cipher.name = entry.totp_title;\n    cipher.notes = entry.totp_notes;\n\n    cipher.login.totp = entry.totp_code;\n\n    this.importUnmappedFields(cipher, entry, this.TOTP_mappedValues);\n  }\n\n  readonly ENV_VARIABLES_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"environment_variables_title\",\n    \"environment_variables_notes\",\n    \"environment_variables_variables\",\n  ]);\n  private parseEnvironmentVariables(entry: EnvironmentVariablesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"environment_variables\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.environment_variables_title;\n    cipher.notes = entry.environment_variables_notes;\n\n    entry.environment_variables_variables.forEach((KvPair) => {\n      this.processKvp(cipher, KvPair.key, KvPair.value);\n    });\n\n    this.importUnmappedFields(cipher, entry, this.ENV_VARIABLES_mappedValues);\n  }\n\n  readonly GPG_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"mail_gpg_own_key_title\",\n    \"mail_gpg_own_key_public\",\n    \"mail_gpg_own_key_name\",\n    \"mail_gpg_own_key_email\",\n    \"mail_gpg_own_key_private\",\n  ]);\n  private parseGPG(entry: GPGEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"mail_gpg_own_key\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.mail_gpg_own_key_title;\n    cipher.notes = entry.mail_gpg_own_key_public;\n\n    this.processKvp(cipher, \"mail_gpg_own_key_name\", entry.mail_gpg_own_key_name);\n    this.processKvp(cipher, \"mail_gpg_own_key_email\", entry.mail_gpg_own_key_email);\n    this.processKvp(\n      cipher,\n      \"mail_gpg_own_key_private\",\n      entry.mail_gpg_own_key_private,\n      FieldType.Hidden\n    );\n\n    this.importUnmappedFields(cipher, entry, this.GPG_mappedValues);\n  }\n\n  private importUnmappedFields(\n    cipher: CipherView,\n    entry: PsonoItemTypes,\n    mappedValues: Set<string>\n  ) {\n    const unmappedFields = Object.keys(entry).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = entry as any;\n      this.processKvp(cipher, key, item[key].toString());\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RememBearCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.trash === \"true\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.notes);\n      if (value.type === \"LoginItem\") {\n        cipher.login.uris = this.makeUriArray(value.website);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      } else if (value.type === \"CreditCardItem\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.verification);\n\n        try {\n          const expMonth = this.getValueOrDefault(value.expiryMonth);\n          if (expMonth != null) {\n            const expMonthNumber = parseInt(expMonth, null);\n            if (expMonthNumber != null && expMonthNumber >= 1 && expMonthNumber <= 12) {\n              cipher.card.expMonth = expMonthNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n        try {\n          const expYear = this.getValueOrDefault(value.expiryYear);\n          if (expYear != null) {\n            const expYearNumber = parseInt(expYear, null);\n            if (expYearNumber != null) {\n              cipher.card.expYear = expYearNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n\n        const pin = this.getValueOrDefault(value.pin);\n        if (pin != null) {\n          this.processKvp(cipher, \"PIN\", pin);\n        }\n        const zip = this.getValueOrDefault(value.zipCode);\n        if (zip != null) {\n          this.processKvp(cipher, \"Zip Code\", zip);\n        }\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RoboFormCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let i = 1;\n    results.forEach((value) => {\n      const folder =\n        !this.isNullOrWhitespace(value.Folder) && value.Folder.startsWith(\"/\")\n          ? value.Folder.replace(\"/\", \"\")\n          : value.Folder;\n      const folderName = !this.isNullOrWhitespace(folder) ? folder : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Login);\n      cipher.login.password = this.getValueOrDefault(value.Pwd);\n      cipher.login.uris = this.makeUriArray(value.Url);\n\n      if (!this.isNullOrWhitespace(value.Rf_fields)) {\n        let fields: string[] = [value.Rf_fields];\n        if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n          fields = fields.concat(value.__parsed_extra);\n        }\n        fields.forEach((field: string) => {\n          const parts = field.split(\":\");\n          if (parts.length < 3) {\n            return;\n          }\n          const key = parts[0] === \"-no-name-\" ? null : parts[0];\n          const val = parts.length === 4 && parts[2] === \"rck\" ? parts[1] : parts[2];\n          this.processKvp(cipher, key, val);\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n\n      if (\n        i === results.length &&\n        cipher.name === \"--\" &&\n        this.isNullOrWhitespace(cipher.login.password)\n      ) {\n        return;\n      }\n\n      result.ciphers.push(cipher);\n      i++;\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafariCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url ?? value.URL);\n      cipher.login.totp = this.getValueOrDefault(value.OTPAuth);\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafeInCloudXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const db = doc.querySelector(\"database\");\n    if (db == null) {\n      result.errorMessage = \"Missing `database` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, number>();\n\n    Array.from(doc.querySelectorAll(\"database > label\")).forEach((labelEl) => {\n      const name = labelEl.getAttribute(\"name\");\n      const id = labelEl.getAttribute(\"id\");\n      if (!this.isNullOrWhitespace(name) && !this.isNullOrWhitespace(id)) {\n        foldersMap.set(id, result.folders.length);\n        const folder = new FolderView();\n        folder.name = name;\n        result.folders.push(folder);\n      }\n    });\n\n    Array.from(doc.querySelectorAll(\"database > card\")).forEach((cardEl) => {\n      if (cardEl.getAttribute(\"template\") === \"true\" || cardEl.getAttribute(\"deleted\") === \"true\") {\n        return;\n      }\n\n      const labelIdEl = this.querySelectorDirectChild(cardEl, \"label_id\");\n      if (labelIdEl != null) {\n        const labelId = labelIdEl.textContent;\n        if (!this.isNullOrWhitespace(labelId) && foldersMap.has(labelId)) {\n          result.folderRelationships.push([result.ciphers.length, foldersMap.get(labelId)]);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(cardEl.getAttribute(\"title\"), \"--\");\n\n      if (cardEl.getAttribute(\"star\") === \"true\") {\n        cipher.favorite = true;\n      }\n\n      const cardType = cardEl.getAttribute(\"type\");\n      if (cardType === \"note\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      } else {\n        Array.from(this.querySelectorAllDirectChild(cardEl, \"field\")).forEach((fieldEl) => {\n          const text = fieldEl.textContent;\n          if (this.isNullOrWhitespace(text)) {\n            return;\n          }\n          const name = fieldEl.getAttribute(\"name\");\n          const fieldType = this.getValueOrDefault(fieldEl.getAttribute(\"type\"), \"\").toLowerCase();\n          if (fieldType === \"login\") {\n            cipher.login.username = text;\n          } else if (fieldType === \"password\" || fieldType === \"secret\") {\n            // safeInCloud allows for more than one password. we just insert them here and find the one used as password later\n            this.processKvp(cipher, name, text, FieldType.Hidden);\n          } else if (fieldType === \"one_time_password\") {\n            cipher.login.totp = text;\n          } else if (fieldType === \"notes\") {\n            cipher.notes += text + \"\\n\";\n          } else if (fieldType === \"weblogin\" || fieldType === \"website\") {\n            cipher.login.uris = this.makeUriArray(text);\n          } else {\n            this.processKvp(cipher, name, text);\n          }\n        });\n      }\n\n      Array.from(this.querySelectorAllDirectChild(cardEl, \"notes\")).forEach((notesEl) => {\n        cipher.notes += notesEl.textContent + \"\\n\";\n      });\n\n      this.setPassword(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  // Choose a password from all passwords. Take one that has password in its name, or the first one if there is no such entry\n  // if its name is password, we can safely remove it form the fields. otherwise, it would maybe be best to keep it as a hidden field\n  setPassword(cipher: CipherView) {\n    const candidates = cipher.fields.filter((field) => field.type === FieldType.Hidden);\n    if (!candidates.length) {\n      return;\n    }\n\n    let choice: FieldView;\n    for (const field of candidates) {\n      if (this.passwordFieldNames.includes(field.name.toLowerCase())) {\n        choice = field;\n        cipher.fields = cipher.fields.filter((f) => f !== choice);\n        break;\n      }\n    }\n\n    if (!choice) {\n      choice = candidates[0];\n    }\n\n    cipher.login.password = choice.value;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SaferPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.nameFromUrl(value.url), \"--\");\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SecureSafeCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title);\n      cipher.notes = this.getValueOrDefault(value.Comment);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SplashIdCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      this.processFolder(result, this.getValueOrDefault(value[value.length - 1]));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 2], \"\");\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n\n      if (value[0] === \"Web Logins\" || value[0] === \"Servers\" || value[0] === \"Email Accounts\") {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n        cipher.login.password = this.getValueOrDefault(value[3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n        this.parseFieldsToNotes(cipher, 5, value);\n      } else {\n        this.parseFieldsToNotes(cipher, 2, value);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFieldsToNotes(cipher: CipherView, startIndex: number, value: any) {\n    // last 3 rows do not get parsed\n    for (let i = startIndex; i < value.length - 3; i++) {\n      if (this.isNullOrWhitespace(value[i])) {\n        continue;\n      }\n      cipher.notes += value[i] + \"\\n\";\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class StickyPasswordXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const loginNodes = doc.querySelectorAll(\"root > Database > Logins > Login\");\n    Array.from(loginNodes).forEach((loginNode) => {\n      const accountId = loginNode.getAttribute(\"ID\");\n      if (this.isNullOrWhitespace(accountId)) {\n        return;\n      }\n\n      const usernameText = loginNode.getAttribute(\"Name\");\n      const passwordText = loginNode.getAttribute(\"Password\");\n      let titleText: string = null;\n      let linkText: string = null;\n      let notesText: string = null;\n      let groupId: string = null;\n      let groupText: string = null;\n\n      const accountLogin = doc.querySelector(\n        \"root > Database > Accounts > Account > \" +\n          'LoginLinks > Login[SourceLoginID=\"' +\n          accountId +\n          '\"]'\n      );\n      if (accountLogin != null) {\n        const account = accountLogin.parentElement.parentElement;\n        if (account != null) {\n          titleText = account.getAttribute(\"Name\");\n          linkText = account.getAttribute(\"Link\");\n          groupId = account.getAttribute(\"ParentID\");\n          notesText = account.getAttribute(\"Comments\");\n          if (!this.isNullOrWhitespace(notesText)) {\n            notesText = notesText.split(\"/n\").join(\"\\n\");\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(groupId)) {\n        groupText = this.buildGroupText(doc, groupId, \"\");\n        this.processFolder(result, groupText);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(titleText, \"--\");\n      cipher.notes = this.getValueOrDefault(notesText);\n      cipher.login.username = this.getValueOrDefault(usernameText);\n      cipher.login.password = this.getValueOrDefault(passwordText);\n      cipher.login.uris = this.makeUriArray(linkText);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  buildGroupText(doc: Document, groupId: string, groupText: string): string {\n    const group = doc.querySelector('root > Database > Groups > Group[ID=\"' + groupId + '\"]');\n    if (group == null) {\n      return groupText;\n    }\n    if (!this.isNullOrWhitespace(groupText)) {\n      groupText = \"/\" + groupText;\n    }\n    groupText = group.getAttribute(\"Name\") + groupText;\n    return this.buildGroupText(doc, group.getAttribute(\"ParentID\"), groupText);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst PropertiesToIgnore = [\n  \"kind\",\n  \"autologin\",\n  \"favorite\",\n  \"hexcolor\",\n  \"protectedwithpassword\",\n  \"subdomainonly\",\n  \"type\",\n  \"tk_export_version\",\n  \"note\",\n  \"title\",\n  \"document_content\",\n];\n\nexport class TrueKeyCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.favorite, \"\").toLowerCase() === \"true\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.notes = this.getValueOrDefault(value.memo, \"\");\n      cipher.login.username = this.getValueOrDefault(value.login);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n\n      if (value.kind !== \"login\") {\n        cipher.name = this.getValueOrDefault(value.title, \"--\");\n        cipher.notes = this.getValueOrDefault(value.note, \"\");\n      }\n\n      if (value.kind === \"cc\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        if (!this.isNullOrWhitespace(value.expiryDate)) {\n          try {\n            const expDate = new Date(value.expiryDate);\n            cipher.card.expYear = expDate.getFullYear().toString();\n            cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n          } catch {\n            // Ignore error\n          }\n        }\n      } else if (value.kind !== \"login\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = this.getValueOrDefault(value.document_content, \"\");\n        }\n        for (const property in value) {\n          if (\n            value.hasOwnProperty(property) && // eslint-disable-line\n            PropertiesToIgnore.indexOf(property.toLowerCase()) < 0 &&\n            !this.isNullOrWhitespace(value[property])\n          ) {\n            this.processKvp(cipher, property, value[property]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class UpmCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length !== 5) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.notes = this.getValueOrDefault(value[4]);\n      cipher.login.username = this.getValueOrDefault(value[1]);\n      cipher.login.password = this.getValueOrDefault(value[2]);\n      cipher.login.uris = this.makeUriArray(value[3]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class YotiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User name\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ZohoVaultCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (\n        this.isNullOrWhitespace(value[\"Password Name\"]) &&\n        this.isNullOrWhitespace(value[\"Secret Name\"])\n      ) {\n        return;\n      }\n      this.processFolder(result, this.getValueOrDefault(value.ChamberName));\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite, \"0\") === \"1\";\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(\n        value[\"Password Name\"],\n        this.getValueOrDefault(value[\"Secret Name\"], \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(\n        this.getValueOrDefault(value[\"Password URL\"], this.getValueOrDefault(value[\"Secret URL\"]))\n      );\n      this.parseData(cipher, value.SecretData);\n      this.parseData(cipher, value.CustomData);\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseData(cipher: CipherView, data: string) {\n    if (this.isNullOrWhitespace(data)) {\n      return;\n    }\n    const dataLines = this.splitNewLine(data);\n    dataLines.forEach((line) => {\n      const delimPosition = line.indexOf(\":\");\n      if (delimPosition < 0) {\n        return;\n      }\n      const field = line.substring(0, delimPosition);\n      const value = line.length > delimPosition ? line.substring(delimPosition + 1) : null;\n      if (\n        this.isNullOrWhitespace(field) ||\n        this.isNullOrWhitespace(value) ||\n        field === \"SecretType\"\n      ) {\n        return;\n      }\n      const fieldLower = field.toLowerCase();\n      if (cipher.login.username == null && this.usernameFieldNames.indexOf(fieldLower) > -1) {\n        cipher.login.username = value;\n      } else if (\n        cipher.login.password == null &&\n        this.passwordFieldNames.indexOf(fieldLower) > -1\n      ) {\n        cipher.login.password = value;\n      } else {\n        this.processKvp(cipher, field, value);\n      }\n    });\n  }\n}\n","export interface ImportOption {\n  id: string;\n  name: string;\n}\n\nexport const featuredImportOptions = [\n  { id: \"bitwardenjson\", name: \"Bitwarden (json)\" },\n  { id: \"bitwardencsv\", name: \"Bitwarden (csv)\" },\n  { id: \"chromecsv\", name: \"Chrome (csv)\" },\n  { id: \"dashlanecsv\", name: \"Dashlane (csv)\" },\n  { id: \"firefoxcsv\", name: \"Firefox (csv)\" },\n  { id: \"keepass2xml\", name: \"KeePass 2 (xml)\" },\n  { id: \"lastpasscsv\", name: \"LastPass (csv)\" },\n  { id: \"safaricsv\", name: \"Safari and macOS (csv)\" },\n  { id: \"1password1pux\", name: \"1Password (1pux)\" },\n] as const;\n\nexport const regularImportOptions = [\n  { id: \"keepassxcsv\", name: \"KeePassX (csv)\" },\n  { id: \"1password1pif\", name: \"1Password (1pif)\" },\n  { id: \"1passwordwincsv\", name: \"1Password 6 and 7 Windows (csv)\" },\n  { id: \"1passwordmaccsv\", name: \"1Password 6 and 7 Mac (csv)\" },\n  { id: \"dashlanejson\", name: \"Dashlane (json)\" },\n  { id: \"roboformcsv\", name: \"RoboForm (csv)\" },\n  { id: \"keepercsv\", name: \"Keeper (csv)\" },\n  // Temporarily remove this option for the Feb release\n  // { id: \"keeperjson\", name: \"Keeper (json)\" },\n  { id: \"enpasscsv\", name: \"Enpass (csv)\" },\n  { id: \"enpassjson\", name: \"Enpass (json)\" },\n  { id: \"protonpass\", name: \"ProtonPass (zip/json)\" },\n  { id: \"safeincloudxml\", name: \"SafeInCloud (xml)\" },\n  { id: \"pwsafexml\", name: \"Password Safe (xml)\" },\n  { id: \"stickypasswordxml\", name: \"Sticky Password (xml)\" },\n  { id: \"msecurecsv\", name: \"mSecure (csv)\" },\n  { id: \"truekeycsv\", name: \"True Key (csv)\" },\n  { id: \"passwordbossjson\", name: \"Password Boss (json)\" },\n  { id: \"zohovaultcsv\", name: \"Zoho Vault (csv)\" },\n  { id: \"splashidcsv\", name: \"SplashID (csv)\" },\n  { id: \"passworddragonxml\", name: \"Password Dragon (xml)\" },\n  { id: \"padlockcsv\", name: \"Padlock (csv)\" },\n  { id: \"passboltcsv\", name: \"Passbolt (csv)\" },\n  { id: \"clipperzhtml\", name: \"Clipperz (html)\" },\n  { id: \"aviracsv\", name: \"Avira (csv)\" },\n  { id: \"saferpasscsv\", name: \"SaferPass (csv)\" },\n  { id: \"upmcsv\", name: \"Universal Password Manager (csv)\" },\n  { id: \"ascendocsv\", name: \"Ascendo DataVault (csv)\" },\n  { id: \"meldiumcsv\", name: \"Meldium (csv)\" },\n  { id: \"passkeepcsv\", name: \"PassKeep (csv)\" },\n  { id: \"operacsv\", name: \"Opera (csv)\" },\n  { id: \"vivaldicsv\", name: \"Vivaldi (csv)\" },\n  { id: \"gnomejson\", name: \"GNOME Passwords and Keys/Seahorse (json)\" },\n  { id: \"blurcsv\", name: \"Blur (csv)\" },\n  { id: \"passwordagentcsv\", name: \"Password Agent (csv)\" },\n  { id: \"passpackcsv\", name: \"Passpack (csv)\" },\n  { id: \"passmanjson\", name: \"Passman (json)\" },\n  { id: \"avastcsv\", name: \"Avast Passwords (csv)\" },\n  { id: \"avastjson\", name: \"Avast Passwords (json)\" },\n  { id: \"fsecurefsk\", name: \"F-Secure KEY (fsk)\" },\n  { id: \"kasperskytxt\", name: \"Kaspersky Password Manager (txt)\" },\n  { id: \"remembearcsv\", name: \"RememBear (csv)\" },\n  { id: \"passwordwallettxt\", name: \"PasswordWallet (txt)\" },\n  { id: \"mykicsv\", name: \"Myki (csv)\" },\n  { id: \"securesafecsv\", name: \"SecureSafe (csv)\" },\n  { id: \"logmeoncecsv\", name: \"LogMeOnce (csv)\" },\n  { id: \"blackberrycsv\", name: \"BlackBerry Password Keeper (csv)\" },\n  { id: \"buttercupcsv\", name: \"Buttercup (csv)\" },\n  { id: \"codebookcsv\", name: \"Codebook (csv)\" },\n  { id: \"encryptrcsv\", name: \"Encryptr (csv)\" },\n  { id: \"yoticsv\", name: \"Yoti (csv)\" },\n  { id: \"nordpasscsv\", name: \"Nordpass (csv)\" },\n  { id: \"psonojson\", name: \"Psono (json)\" },\n  { id: \"passkyjson\", name: \"Passky (json)\" },\n] as const;\n\nexport type ImportType =\n  | (typeof featuredImportOptions)[number][\"id\"]\n  | (typeof regularImportOptions)[number][\"id\"];\n","import { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\nimport { KvpRequest } from \"@bitwarden/common/models/request/kvp.request\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherRequest } from \"@bitwarden/common/vault/models/request/cipher.request\";\nimport { CollectionWithIdRequest } from \"@bitwarden/common/vault/models/request/collection-with-id.request\";\nimport { FolderWithIdRequest } from \"@bitwarden/common/vault/models/request/folder-with-id.request\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport {\n  AscendoCsvImporter,\n  AvastCsvImporter,\n  AvastJsonImporter,\n  AviraCsvImporter,\n  BitwardenCsvImporter,\n  BitwardenPasswordProtectedImporter,\n  BlackBerryCsvImporter,\n  BlurCsvImporter,\n  ButtercupCsvImporter,\n  ChromeCsvImporter,\n  ClipperzHtmlImporter,\n  CodebookCsvImporter,\n  DashlaneCsvImporter,\n  DashlaneJsonImporter,\n  EncryptrCsvImporter,\n  EnpassCsvImporter,\n  EnpassJsonImporter,\n  FirefoxCsvImporter,\n  FSecureFskImporter,\n  GnomeJsonImporter,\n  KasperskyTxtImporter,\n  KeePass2XmlImporter,\n  KeePassXCsvImporter,\n  KeeperCsvImporter,\n  // KeeperJsonImporter,\n  LastPassCsvImporter,\n  LogMeOnceCsvImporter,\n  MSecureCsvImporter,\n  MeldiumCsvImporter,\n  MykiCsvImporter,\n  NordPassCsvImporter,\n  OnePassword1PifImporter,\n  OnePassword1PuxImporter,\n  OnePasswordMacCsvImporter,\n  OnePasswordWinCsvImporter,\n  PadlockCsvImporter,\n  PassKeepCsvImporter,\n  PasskyJsonImporter,\n  PassmanJsonImporter,\n  PasspackCsvImporter,\n  PasswordAgentCsvImporter,\n  PasswordBossJsonImporter,\n  PasswordDragonXmlImporter,\n  PasswordSafeXmlImporter,\n  PasswordWalletTxtImporter,\n  ProtonPassJsonImporter,\n  PsonoJsonImporter,\n  RememBearCsvImporter,\n  RoboFormCsvImporter,\n  SafariCsvImporter,\n  SafeInCloudXmlImporter,\n  SaferPassCsvImporter,\n  SecureSafeCsvImporter,\n  SplashIdCsvImporter,\n  StickyPasswordXmlImporter,\n  TrueKeyCsvImporter,\n  UpmCsvImporter,\n  YotiCsvImporter,\n  ZohoVaultCsvImporter,\n} from \"../importers\";\nimport { Importer } from \"../importers/importer\";\nimport {\n  featuredImportOptions,\n  ImportOption,\n  ImportType,\n  regularImportOptions,\n} from \"../models/import-options\";\nimport { ImportResult } from \"../models/import-result\";\nimport { ImportApiServiceAbstraction } from \"../services/import-api.service.abstraction\";\nimport { ImportServiceAbstraction } from \"../services/import.service.abstraction\";\n\nexport class ImportService implements ImportServiceAbstraction {\n  featuredImportOptions = featuredImportOptions as readonly ImportOption[];\n\n  regularImportOptions = regularImportOptions as readonly ImportOption[];\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private importApiService: ImportApiServiceAbstraction,\n    private i18nService: I18nService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService\n  ) {}\n\n  getImportOptions(): ImportOption[] {\n    return this.featuredImportOptions.concat(this.regularImportOptions);\n  }\n\n  async import(\n    importer: Importer,\n    fileContents: string,\n    organizationId: string = null,\n    selectedImportTarget: string = null,\n    isUserAdmin: boolean\n  ): Promise<ImportResult> {\n    let importResult: ImportResult;\n    try {\n      importResult = await importer.parse(fileContents);\n    } catch (error) {\n      if (error instanceof SyntaxError) {\n        throw new Error(this.i18nService.t(\"importFormatError\"));\n      }\n      throw error;\n    }\n\n    if (!importResult.success) {\n      if (!Utils.isNullOrWhitespace(importResult.errorMessage)) {\n        throw new Error(importResult.errorMessage);\n      }\n      throw new Error(this.i18nService.t(\"importFormatError\"));\n    }\n\n    if (importResult.folders.length === 0 && importResult.ciphers.length === 0) {\n      throw new Error(this.i18nService.t(\"importNothingError\"));\n    }\n\n    if (importResult.ciphers.length > 0) {\n      const halfway = Math.floor(importResult.ciphers.length / 2);\n      const last = importResult.ciphers.length - 1;\n\n      if (\n        this.badData(importResult.ciphers[0]) &&\n        this.badData(importResult.ciphers[halfway]) &&\n        this.badData(importResult.ciphers[last])\n      ) {\n        throw new Error(this.i18nService.t(\"importFormatError\"));\n      }\n    }\n\n    if (organizationId && Utils.isNullOrWhitespace(selectedImportTarget) && !isUserAdmin) {\n      const hasUnassignedCollections = importResult.ciphers.some(\n        (c) => !Array.isArray(c.collectionIds) || c.collectionIds.length == 0\n      );\n      if (hasUnassignedCollections) {\n        throw new Error(this.i18nService.t(\"importUnassignedItemsError\"));\n      }\n    }\n\n    try {\n      await this.setImportTarget(importResult, organizationId, selectedImportTarget);\n      if (organizationId != null) {\n        await this.handleOrganizationalImport(importResult, organizationId);\n      } else {\n        await this.handleIndividualImport(importResult);\n      }\n    } catch (error) {\n      const errorResponse = new ErrorResponse(error, 400);\n      throw this.handleServerError(errorResponse, importResult);\n    }\n    return importResult;\n  }\n\n  getImporter(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>,\n    organizationId: string = null\n  ): Importer {\n    if (promptForPassword_callback == null) {\n      return null;\n    }\n\n    const importer = this.getImporterInstance(format, promptForPassword_callback);\n    if (importer == null) {\n      return null;\n    }\n    importer.organizationId = organizationId;\n    return importer;\n  }\n\n  private getImporterInstance(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>\n  ) {\n    if (format == null) {\n      return null;\n    }\n\n    switch (format) {\n      case \"bitwardencsv\":\n        return new BitwardenCsvImporter();\n      case \"bitwardenjson\":\n      case \"bitwardenpasswordprotected\":\n        return new BitwardenPasswordProtectedImporter(\n          this.cryptoService,\n          this.i18nService,\n          promptForPassword_callback\n        );\n      case \"lastpasscsv\":\n      case \"passboltcsv\":\n        return new LastPassCsvImporter();\n      case \"keepassxcsv\":\n        return new KeePassXCsvImporter();\n      case \"aviracsv\":\n        return new AviraCsvImporter();\n      case \"blurcsv\":\n        return new BlurCsvImporter();\n      case \"safeincloudxml\":\n        return new SafeInCloudXmlImporter();\n      case \"padlockcsv\":\n        return new PadlockCsvImporter();\n      case \"keepass2xml\":\n        return new KeePass2XmlImporter();\n      case \"chromecsv\":\n      case \"operacsv\":\n      case \"vivaldicsv\":\n        return new ChromeCsvImporter();\n      case \"firefoxcsv\":\n        return new FirefoxCsvImporter();\n      case \"upmcsv\":\n        return new UpmCsvImporter();\n      case \"saferpasscsv\":\n        return new SaferPassCsvImporter();\n      case \"safaricsv\":\n        return new SafariCsvImporter();\n      case \"meldiumcsv\":\n        return new MeldiumCsvImporter();\n      case \"1password1pif\":\n        return new OnePassword1PifImporter();\n      case \"1password1pux\":\n        return new OnePassword1PuxImporter();\n      case \"1passwordwincsv\":\n        return new OnePasswordWinCsvImporter();\n      case \"1passwordmaccsv\":\n        return new OnePasswordMacCsvImporter();\n      case \"keepercsv\":\n        return new KeeperCsvImporter();\n      // case \"keeperjson\":\n      //   return new KeeperJsonImporter();\n      case \"passworddragonxml\":\n        return new PasswordDragonXmlImporter();\n      case \"enpasscsv\":\n        return new EnpassCsvImporter();\n      case \"enpassjson\":\n        return new EnpassJsonImporter();\n      case \"pwsafexml\":\n        return new PasswordSafeXmlImporter();\n      case \"dashlanecsv\":\n        return new DashlaneCsvImporter();\n      case \"dashlanejson\":\n        return new DashlaneJsonImporter();\n      case \"msecurecsv\":\n        return new MSecureCsvImporter();\n      case \"stickypasswordxml\":\n        return new StickyPasswordXmlImporter();\n      case \"truekeycsv\":\n        return new TrueKeyCsvImporter();\n      case \"clipperzhtml\":\n        return new ClipperzHtmlImporter();\n      case \"roboformcsv\":\n        return new RoboFormCsvImporter();\n      case \"ascendocsv\":\n        return new AscendoCsvImporter();\n      case \"passwordbossjson\":\n        return new PasswordBossJsonImporter();\n      case \"zohovaultcsv\":\n        return new ZohoVaultCsvImporter();\n      case \"splashidcsv\":\n        return new SplashIdCsvImporter();\n      case \"passkeepcsv\":\n        return new PassKeepCsvImporter();\n      case \"gnomejson\":\n        return new GnomeJsonImporter();\n      case \"passwordagentcsv\":\n        return new PasswordAgentCsvImporter();\n      case \"passpackcsv\":\n        return new PasspackCsvImporter();\n      case \"passmanjson\":\n        return new PassmanJsonImporter();\n      case \"avastcsv\":\n        return new AvastCsvImporter();\n      case \"avastjson\":\n        return new AvastJsonImporter();\n      case \"fsecurefsk\":\n        return new FSecureFskImporter();\n      case \"kasperskytxt\":\n        return new KasperskyTxtImporter();\n      case \"remembearcsv\":\n        return new RememBearCsvImporter();\n      case \"passwordwallettxt\":\n        return new PasswordWalletTxtImporter();\n      case \"mykicsv\":\n        return new MykiCsvImporter();\n      case \"securesafecsv\":\n        return new SecureSafeCsvImporter();\n      case \"logmeoncecsv\":\n        return new LogMeOnceCsvImporter();\n      case \"blackberrycsv\":\n        return new BlackBerryCsvImporter();\n      case \"buttercupcsv\":\n        return new ButtercupCsvImporter();\n      case \"codebookcsv\":\n        return new CodebookCsvImporter();\n      case \"encryptrcsv\":\n        return new EncryptrCsvImporter();\n      case \"yoticsv\":\n        return new YotiCsvImporter();\n      case \"nordpasscsv\":\n        return new NordPassCsvImporter();\n      case \"psonojson\":\n        return new PsonoJsonImporter();\n      case \"passkyjson\":\n        return new PasskyJsonImporter();\n      case \"protonpass\":\n        return new ProtonPassJsonImporter(this.i18nService);\n      default:\n        return null;\n    }\n  }\n\n  private async handleIndividualImport(importResult: ImportResult) {\n    const request = new ImportCiphersRequest();\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.folders != null) {\n      for (let i = 0; i < importResult.folders.length; i++) {\n        const f = await this.folderService.encrypt(importResult.folders[i]);\n        request.folders.push(new FolderWithIdRequest(f));\n      }\n    }\n    if (importResult.folderRelationships != null) {\n      importResult.folderRelationships.forEach((r) =>\n        request.folderRelationships.push(new KvpRequest(r[0], r[1]))\n      );\n    }\n    return await this.importApiService.postImportCiphers(request);\n  }\n\n  private async handleOrganizationalImport(importResult: ImportResult, organizationId: string) {\n    const request = new ImportOrganizationCiphersRequest();\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      importResult.ciphers[i].organizationId = organizationId;\n      const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.collections != null) {\n      for (let i = 0; i < importResult.collections.length; i++) {\n        importResult.collections[i].organizationId = organizationId;\n        const c = await this.collectionService.encrypt(importResult.collections[i]);\n        request.collections.push(new CollectionWithIdRequest(c));\n      }\n    }\n    if (importResult.collectionRelationships != null) {\n      importResult.collectionRelationships.forEach((r) =>\n        request.collectionRelationships.push(new KvpRequest(r[0], r[1]))\n      );\n    }\n    return await this.importApiService.postImportOrganizationCiphers(organizationId, request);\n  }\n\n  private badData(c: CipherView) {\n    return (\n      (c.name == null || c.name === \"--\") &&\n      c.type === CipherType.Login &&\n      c.login != null &&\n      Utils.isNullOrWhitespace(c.login.password)\n    );\n  }\n\n  private handleServerError(errorResponse: ErrorResponse, importResult: ImportResult): Error {\n    if (errorResponse.validationErrors == null) {\n      return new Error(errorResponse.message);\n    }\n\n    let errorMessage = \"\";\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const i = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Ciphers\":\n          item = importResult.ciphers[i];\n          itemType = CipherType[item.type];\n          break;\n        case \"Folders\":\n          item = importResult.folders[i];\n          itemType = \"Folder\";\n          break;\n        case \"Collections\":\n          item = importResult.collections[i];\n          itemType = \"Collection\";\n          break;\n        default:\n          return;\n      }\n\n      if (index > 0) {\n        errorMessage += \"\\n\\n\";\n      }\n\n      if (itemType !== \"Folder\" && itemType !== \"Collection\") {\n        errorMessage += \"[\" + (i + 1) + \"] \";\n      }\n\n      errorMessage += \"[\" + itemType + '] \"' + item.name + '\": ' + value;\n    });\n\n    return new Error(errorMessage);\n  }\n\n  private async setImportTarget(\n    importResult: ImportResult,\n    organizationId: string,\n    importTarget: string\n  ) {\n    if (Utils.isNullOrWhitespace(importTarget)) {\n      return;\n    }\n\n    if (organizationId) {\n      const collectionViews: CollectionView[] = await this.collectionService.getAllDecrypted();\n      const targetCollection = collectionViews.find((c) => c.id === importTarget);\n\n      const noCollectionRelationShips: [number, number][] = [];\n      importResult.ciphers.forEach((c, index) => {\n        if (!Array.isArray(c.collectionIds) || c.collectionIds.length == 0) {\n          c.collectionIds = [targetCollection.id];\n          noCollectionRelationShips.push([index, 0]);\n        }\n      });\n\n      const collections: CollectionView[] = [...importResult.collections];\n      importResult.collections = [targetCollection];\n      collections.map((x) => {\n        const f = new CollectionView();\n        f.name = `${targetCollection.name}/${x.name}`;\n        importResult.collections.push(f);\n      });\n\n      const relationships: [number, number][] = [...importResult.collectionRelationships];\n      importResult.collectionRelationships = [...noCollectionRelationShips];\n      relationships.map((x) => {\n        importResult.collectionRelationships.push([x[0], x[1] + 1]);\n      });\n\n      return;\n    }\n\n    const folderViews = await this.folderService.getAllDecryptedFromState();\n    const targetFolder = folderViews.find((f) => f.id === importTarget);\n\n    const noFolderRelationShips: [number, number][] = [];\n    importResult.ciphers.forEach((c, index) => {\n      if (Utils.isNullOrEmpty(c.folderId)) {\n        c.folderId = targetFolder.id;\n        noFolderRelationShips.push([index, 0]);\n      }\n    });\n\n    const folders: FolderView[] = [...importResult.folders];\n    importResult.folders = [targetFolder];\n    folders.map((x) => {\n      const newFolderName = `${targetFolder.name}/${x.name}`;\n      const f = new FolderView();\n      f.name = newFolderName;\n      importResult.folders.push(f);\n    });\n\n    const relationships: [number, number][] = [...importResult.folderRelationships];\n    importResult.folderRelationships = [...noFolderRelationShips];\n    relationships.map((x) => {\n      importResult.folderRelationships.push([x[0], x[1] + 1]);\n    });\n  }\n}\n"],"names":["disabledByPolicy","this","_disabledByPolicy","constructor","cryptoService","i18nService","platformUtilsService","exportService","eventCollectionService","policyService","win","logService","userVerificationService","formBuilder","fileDownloadService","dialogService","onSaved","exportForm","group","format","secret","filePassword","required","confirmFilePassword","fileEncryptionType","AccountEncrypted","formatOptions","name","value","destroy$","Subject","ngOnInit","policyAppliesToActiveUser$","DisablePersonalVaultExport","pipe","takeUntil","subscribe","policyAppliesToActiveUser","disable","merge","get","valueChanges","startWith","adjustValidators","ngOnDestroy","next","encryptedFormat","doExport","formPromise","getExportData","data","downloadFile","saved","collectEvent","setValue","clearValidators","e","error","submit","showToast","t","warningDialog","verifyUser","message","openSimpleDialog","title","key","content","acceptButtonText","type","emit","FileEncrypted","getPasswordProtectedExport","getExport","getFileName","prefix","extension","collect","User_ClientExportedVault","reset","controls","enable","csv","fileName","download","blobData","blobOptions","ExportComponent","super","window","encryptedExportType","isFileEncryptedExport","markAllAsTouched","valid","confirmDescription","isAccountEncryptedExport","ref","confirmButtonText","modalTitle","firstValueFrom","closed","ImportSuccessDialogComponent","dialogRef","dataSource","buildResultList","logins","cards","identities","secureNotes","ciphers","map","c","Login","Card","SecureNote","Identity","list","push","icon","count","folders","length","collections","FilePasswordPromptComponent","markAsTouched","close","ImportComponent","importService","router","modalService","syncService","folderService","collectionService","organizationService","organizationId","_importBlockedByPolicy","formGroup","vaultSelector","nonNullable","validators","targetSelector","fileContents","file","invalid","performImport","importBlockedByPolicy","onSuccessfulImport","navigate","setImportOptions","organizations$","concat","memberOrganizations$","orgs","sort","getSortFunction","combineLatest","PersonalOwnership","policyApplies","patchValue","collections$","asyncToObservable","getAllDecrypted","then","filter","c2","folders$","folderViews$","f","id","undefined","importer","getImporter","getFilePassword","files","document","getElementById","getFileContents","isAdmin","result","import","isUserAdmin","open","fullSync","getFormatInstructionTitle","results","featuredImportOptions","importOptions","o","regularImportOptions","a","b","collator","compare","localeCompare","setSelectedFile","event","fileInputEl","target","fileSelected","heightAuto","buttonsStyling","iconHtml","input","inputValue","inputAttributes","readonly","titleText","text","showConfirmButton","onOpen","popupEl","querySelector","scrollTo","extractZipContent","endsWith","Promise","resolve","reject","reader","FileReader","readAsText","onload","evt","pre","DOMParser","parseFromString","textContent","onerror","zipFile","contentFilePath","loadAsync","zip","async","dialog","ariaModal","lastValueFrom","complete","BoxRowDirective","elRef","el","nativeElement","formEls","Array","from","querySelectorAll","forEach","formEl","addEventListener","classList","add","remove","onClick","contains","tagName","toLowerCase","inputEl","click","focus","ExportScopeCalloutComponent","stateService","show","hasOrganizations","scopeConfig","description","scopeIdentifier","getEmail","ImportApiServiceAbstraction","ImportApiService","apiService","postImportCiphers","request","send","postImportOrganizationCiphers","ImportServiceAbstraction","ImportCiphersRequest","folderRelationships","ImportOrganizationCiphersRequest","collectionRelationships","KvpRequest","CollectionWithIdRequest","collection","success","newLineRegex","passwordFieldNames","usernameFieldNames","notesFieldNames","uriFieldNames","parseCsvOptions","encoding","skipEmptyLines","organization","parseXml","doc","parseCsv","header","options","parseOptions","Object","assign","splitNewLine","join","trim","errors","row","warning","parseSingleRowCsv","rowData","isNullOrWhitespace","parsedRow","makeUriArray","uri","loginUri","fixUri","match","returnArr","u","indexOf","substring","nameFromUrl","url","hostname","getHostname","startsWith","replace","str","getValueOrDefault","defaultValue","split","setCardExpiration","cipher","expiration","expiryRegex","RegExp","expiryMatch","card","expMonth","groups","month","year","expYear","moveFoldersToCollections","r","querySelectorDirectChild","parentEl","query","els","querySelectorAllDirectChild","parentNode","initLoginCipher","favorite","notes","fields","login","cleanupCipher","passwordHistory","processKvp","Text","search","field","processFolder","folderName","folderIndex","addFolder","i","convertToNoteIfNeeded","username","password","uris","secureNote","Generic","processFullName","fullName","nameParts","identity","firstName","lastName","middleName","slice","AscendoCsvImporter","parse","val","fieldLower","AvastCsvImporter","web","AvastJsonImporter","JSON","custName","note","pwd","loginName","label","cardholderName","holderName","number","cardNumber","code","cvv","brand","getCardBrandByPatterns","expirationDate","AviraCsvImporter","website","secondary_username","BlackBerryCsvImporter","grouping","fav","extra","ChromeCsvImporter","androidPatternRegex","test","BitwardenCsvImporter","col","addCollection","collectionIndex","folder","reprompt","parseInt","None","toString","console","delimPosition","lastIndexOf","substr","totp","login_totp","login_username","login_password","login_uri","BitwardenJsonImporter","items","encrypted","parseEncrypted","parseDecrypted","encKeyValidation_DO_NOT_EDIT","orgKey","getOrgKey","encKeyValidation","decryptToUtf8","errorMessage","groupingsMap","parseCollections","parseFolders","toDomain","collectionIds","folderId","has","cId","view","decrypt","toView","Map","folderView","set","collectionView","BitwardenPasswordProtectedImporter","promptForPassword_callback","parsedData","passwordProtected","cannotParseFile","checkPassword","encData","clearTextData","jdoc","makePinKey","salt","kdfType","kdfIterations","kdfMemory","kdfParallelism","BlurCsvImporter","domain","email","OfficialProps","ButtercupCsvImporter","URL","processingCustomFields","prop","hasOwnProperty","ClipperzHtmlImporter","textarea","entry","currentVersion","property","actionType","labelLower","CodebookCsvImporter","Category","Favorite","Entry","Note","Username","Email","Password","TOTP","Website","Phone","PIN","Account","Date","_mappedCredentialsColumns","Set","_mappedPersonalInfoAsIdentityColumns","_mappedSecureNoteColumns","DashlaneCsvImporter","x","parsePersonalInformationRecordAsIdentity","rowKeys","keys","category","parseCredentialsRecord","parsePaymentRecord","parseIdRecord","parsePersonalInformationRecord","parseSecureNoteRecords","otpSecret","importUnmappedFields","account_name","mappedValues","cc_number","expiration_month","expiration_year","account_holder","account_number","licenseNumber","passportNumber","state","ssn","first_name","middle_name","last_name","item_name","dataRow","phone","phone_number","address1","address","city","postalCode","country","item","HandledResults","DashlaneJsonImporter","ADDRESS","processAddress","AUTHENTIFIANT","processAuth","BANKSTATEMENT","processNote","IDCARD","PAYMENTMEANS_CREDITCARD","processCard","IDENTITY","processIdentity","credential","secondaryLogin","obj","pseudo","addressName","addressFull","zipcode","toUpperCase","bank","owner","nameProperty","EncryptrCsvImporter","Label","Notes","CVV","expiry","Expiry","expParts","EnpassCsvImporter","firstRow","containsField","fieldValue","fieldName","fieldNameLower","androidUrlRegex","EnpassJsonImporter","foldersMap","foldersIndexMap","folderTree","buildFolderTree","flattenFolderTree","template_type","processLogin","some","urls","cleanedValue","sensitive","Hidden","uuid","children","parent_uuid","titlePrefix","tree","FirefoxCsvImporter","FskEntryTypesEnum","FSecureFskImporter","parseEntry","service","handleLoginEntry","CreditCard","handleCreditCardEntry","creditNumber","creditCvv","creditExpiry","GnomeJsonImporter","keyRing","display_name","attributes","username_value","attr","NotesHeader","ApplicationsHeader","WebsitesHeader","Delimiter","KasperskyTxtImporter","notesData","applicationsData","websitesData","workingData","parts","parseDataCategory","applications","websites","n","w","nameKey","p","itemComment","itemCommentKey","l","colonIndex","size","KeePass2XmlImporter","KeePassFileNode","RootNode","rootGroup","traverse","node","isRootNode","groupPrefixName","groupName","nameEl","cipherIndex","entryString","valueEl","keyEl","attrs","ProtectInMemory","KeePassXCsvImporter","Title","Group","KeeperCsvImporter","LastPassCsvImporter","hasFolder","buildBaseCipher","parseSecureNote","parseCard","parseIdentity","ccnum","cardCipher","profilename","firstname","lastname","ccname","cccsc","ccexp","ccexpParts","middlename","company","address2","address3","charAt","extraParts","processedNote","typeParts","mappedData","parseSecureNoteMapping","Number","monthString","getMonth","isNaN","Company","State","Country","dataObj","processingNotes","extraPart","LogMeOnceCsvImporter","MeldiumCsvImporter","DisplayName","UserName","Url","MSecureCsvImporter","mappedBaseColumns","_mappedUserAccountColumns","_mappedCreditCardColumns","_mappedIdentityColumns","_mappedIdCardColumns","_mappedTwoFaColumns","_mappedUserNoteColumns","MykiCsvImporter","nickname","additionalInfo","twofaSecret","authToken","cardName","exp_month","exp_year","firstAddressLine","secondAddressLine","zipCode","idType","idName","idCountry","idNumber","NordPassCsvImporter","record","recordType","evaluateType","cardholdername","cardnumber","cvc","expirydate","full_name","CategoryEnum","LoginFieldTypeEnum","OnePassword1PifImporter","line","trashed","hmac","processStandardItem","processWinOpVaultItem","overview","URLs","details","parsePasswordHistory","notesPlain","parseFields","sections","section","openContents","faveIndex","typeName","location","secureContents","maxSize","h","time","ph","lastUsedDate","designationKey","valueKey","k","toUTCString","fieldDesignation","street","fieldType","OnePassword1PuxImporter","accounts","vaults","vault","categoryUuid","Database","WirelessRouter","Server","API_Credential","BankAccount","SoftwareLicense","EmailAccount","MedicalRecord","DriversLicense","OutdoorLicense","Membership","Passport","RewardsProgram","SocialSecurityNumber","favIndex","processOverview","processLoginFields","processDetails","processSections","tags","capitalize","inputString","loginFields","loginField","designation","CheckBox","Boolean","parseSectionFields","anyField","getFieldName","extractValue","fillLogin","fillApiCredentials","fillCreditCard","fillBankAccount","fillIdentity","fillDriversLicense","fillOutdoorLicense","fillMembership","fillPassport","fillRewardsProgram","fillSSN","email_address","provider","guarded","date","monthYear","historyItems","CipherImportContext","importRecord","lowerProperty","IgnoredProperties","OnePasswordCsvImporter","loginPropertyParsers","setLoginUsername","setLoginPassword","setLoginUris","creditCardPropertyParsers","setCreditCardNumber","setCreditCardVerification","setCreditCardCardholderName","setCreditCardExpiry","identityPropertyParsers","setIdentityFirstName","setIdentityInitial","setIdentityLastName","setIdentityUserName","setIdentityEmail","setIdentityPhone","setIdentityCompany","quoteChar","escapeChar","getProp","setNotes","setCipherType","altUsername","context","setKnownLoginValue","setKnownCreditCardValue","setKnownIdentityValue","setUnknownValue","entries","reduce","agg","getPropByRegexp","regexp","matchingKeys","getPropIncluding","includesMap","includes","func","bind","readableDate","OnePasswordMacCsvImporter","OnePasswordWinCsvImporter","setIdentityAddress","expSplit","PadlockCsvImporter","headers","v","tag","PassKeepCsvImporter","getValue","PasskyJsonImporter","passkyExport","passwords","PassmanJsonImporter","otp","custom_fields","customField","field_type","PasspackCsvImporter","tagsJson","Tags","tagJson","__parsed_extra","fieldsJson","extraFields","fieldJson","PasswordAgentCsvImporter","newVersion","altFormat","PasswordBossJsonImporter","login_url","identifiers","valObj","expDate","getFullYear","cf","PasswordDragonXmlImporter","records","categoryText","accountName","userId","PasswordSafeXmlImporter","passwordSafe","notesDelimiter","getAttribute","groupText","PasswordWalletTxtImporter","ProtonPassItemState","ProtonPassJsonImporter","TRASHED","metadata","loginContent","totpUri","searchParams","extraField","creditCardContent","verificationNumber","pin","PsonoJsonImporter","WEBSITE_mappedValues","APP_PWD_mappedValues","BOOKMARK_mappedValues","NOTES_mappedValues","TOTP_mappedValues","ENV_VARIABLES_mappedValues","GPG_mappedValues","psonoExport","handleItemParsing","parsePsonoItem","parseWebsiteLogins","parseApplicationPasswords","parseEnvironmentVariables","parseTOTP","parseBookmarks","parseNotes","website_password_title","website_password_notes","website_password_username","website_password_password","website_password_url","website_password_auto_submit","website_password_url_filter","application_password_title","application_password_notes","application_password_username","application_password_password","bookmark_title","bookmark_notes","bookmark_url","note_title","note_notes","totp_title","totp_notes","totp_code","environment_variables_title","environment_variables_notes","environment_variables_variables","KvPair","parseGPG","mail_gpg_own_key_title","mail_gpg_own_key_public","mail_gpg_own_key_name","mail_gpg_own_key_email","mail_gpg_own_key_private","RememBearCsvImporter","trash","cardholder","verification","expiryMonth","expMonthNumber","expiryYear","expYearNumber","RoboFormCsvImporter","Folder","Name","Pwd","Rf_fields","SafariCsvImporter","OTPAuth","SafeInCloudXmlImporter","labelEl","cardEl","labelIdEl","labelId","fieldEl","notesEl","setPassword","candidates","choice","SaferPassCsvImporter","SecureSafeCsvImporter","Comment","SplashIdCsvImporter","parseFieldsToNotes","startIndex","StickyPasswordXmlImporter","loginNodes","loginNode","accountId","usernameText","passwordText","linkText","notesText","groupId","accountLogin","account","parentElement","buildGroupText","PropertiesToIgnore","TrueKeyCsvImporter","memo","kind","expiryDate","document_content","UpmCsvImporter","YotiCsvImporter","ZohoVaultCsvImporter","ChamberName","parseData","SecretData","CustomData","ImportService","cipherService","importApiService","getImportOptions","selectedImportTarget","importResult","SyntaxError","Error","halfway","Math","floor","last","badData","isArray","setImportTarget","handleOrganizationalImport","handleIndividualImport","errorResponse","handleServerError","getImporterInstance","encrypt","validationErrors","index","itemType","importTarget","targetCollection","find","noCollectionRelationShips","relationships","targetFolder","getAllDecryptedFromState","noFolderRelationShips","isNullOrEmpty","newFolderName"],"sourceRoot":""}