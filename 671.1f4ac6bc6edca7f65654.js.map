{"version":3,"file":"671.1f4ac6bc6edca7f65654.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/../../libs/components/src/navigation/navigation.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/layout.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/sm-shared.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/layout.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/layout.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-base.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-item.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-item.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-group.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-group.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-divider.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-divider.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/org-switcher.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/org-switcher.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/navigation.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/navigation.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/dialogs/bulk-status-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/dialogs/bulk-status-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/project-list.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/project.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/models/requests/project.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/models/responses/project-list-item.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/models/responses/project.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-delete-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-delete-dialog.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/form-field/bit-validators/trim.validator.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/secret-list.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/secret-project.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/secret.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/requests/secret.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret-project.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret-list-item.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret-with-projects-list.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secret.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-delete.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-delete.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/service-account.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/requests/service-account.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/responses/service-account.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-account.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/secrets-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/secrets-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/header.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/header.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/new-menu.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/projects-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/new-menu.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/projects-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding-task.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding-task.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/section.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/section.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/access-policy.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/potential-grantee.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/access-policies-create.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/access-policy.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/project-access-policies.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/service-accounts-access-policies.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/access-policy-update.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/access-policy.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/granted-policy.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/potential-grantee.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-policy.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-selector.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-selector.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/dialogs/access-removal-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/dialogs/access-removal-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-people.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-people.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-secrets.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-secrets.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-service-accounts.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-service-accounts.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/dialogs/bulk-confirmation-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/dialogs/bulk-confirmation-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects/projects.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects/projects.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/requests/access-token.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/requests/revoke-access-tokens.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/responses/access-token-creation.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/responses/access-tokens.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/view/access-token.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/expiration-options.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/expiration-options.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-create-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-create-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-tokens.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-tokens.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/people/service-account-people.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/people/service-account-people.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/projects/service-account-projects.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/projects/service-account-projects.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-account.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-account.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-delete-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-delete-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/error/sm-import-error.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/requests/sm-import.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/requests/sm-imported-project.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/requests/sm-imported-secret.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/responses/sm-exported-project.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/responses/sm-exported-secret.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/responses/sm-export.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/sm-export.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/services/sm-porting-api.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/services/sm-porting.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-export.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-export.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/dialog/sm-import-error-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/dialog/sm-import-error-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-import.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-import.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/settings-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/settings.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/dialog/secret-hard-delete.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/dialog/secret-hard-delete.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/dialog/secret-restore.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/dialog/secret-restore.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/trash.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/trash.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/trash-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/trash.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/sm-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/sm.guard.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets-manager.module.ts","webpack://@bitwarden/web-vault/../../libs/components/src/progress/progress.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/progress/progress.component.ts"],"sourcesContent":["import { OverlayModule } from \"@angular/cdk/overlay\";\nimport { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\n\nimport { IconButtonModule } from \"../icon-button/icon-button.module\";\nimport { SharedModule } from \"../shared/shared.module\";\n\nimport { NavDividerComponent } from \"./nav-divider.component\";\nimport { NavGroupComponent } from \"./nav-group.component\";\nimport { NavItemComponent } from \"./nav-item.component\";\n\n@NgModule({\n  imports: [CommonModule, SharedModule, IconButtonModule, OverlayModule, RouterModule],\n  declarations: [NavDividerComponent, NavGroupComponent, NavItemComponent],\n  exports: [NavDividerComponent, NavGroupComponent, NavItemComponent],\n})\nexport class NavigationModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { NavigationModule } from \"@bitwarden/components\";\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared/shared.module\";\n\nimport { LayoutComponent } from \"./layout.component\";\nimport { NavigationComponent } from \"./navigation.component\";\nimport { OrgSwitcherComponent } from \"./org-switcher.component\";\n\n@NgModule({\n  imports: [SharedModule, NavigationModule],\n  declarations: [LayoutComponent, NavigationComponent, OrgSwitcherComponent],\n})\nexport class LayoutModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport {\n  MultiSelectModule,\n  SearchModule,\n  SelectModule,\n  NoItemsModule,\n} from \"@bitwarden/components\";\nimport { CoreOrganizationModule } from \"@bitwarden/web-vault/app/admin-console/organizations/core\";\nimport { DynamicAvatarComponent } from \"@bitwarden/web-vault/app/components/dynamic-avatar.component\";\nimport { ProductSwitcherModule } from \"@bitwarden/web-vault/app/layouts/product-switcher/product-switcher.module\";\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared\";\n\nimport { AccessSelectorComponent } from \"./access-policies/access-selector.component\";\nimport { AccessRemovalDialogComponent } from \"./access-policies/dialogs/access-removal-dialog.component\";\nimport { BulkConfirmationDialogComponent } from \"./dialogs/bulk-confirmation-dialog.component\";\nimport { BulkStatusDialogComponent } from \"./dialogs/bulk-status-dialog.component\";\nimport { HeaderComponent } from \"./header.component\";\nimport { NewMenuComponent } from \"./new-menu.component\";\nimport { ProjectsListComponent } from \"./projects-list.component\";\nimport { SecretsListComponent } from \"./secrets-list.component\";\n\n@NgModule({\n  imports: [\n    SharedModule,\n    ProductSwitcherModule,\n    MultiSelectModule,\n    CoreOrganizationModule,\n    NoItemsModule,\n    SelectModule,\n    DynamicAvatarComponent,\n    SearchModule,\n  ],\n  exports: [\n    SharedModule,\n    NoItemsModule,\n    AccessRemovalDialogComponent,\n    AccessSelectorComponent,\n    BulkStatusDialogComponent,\n    BulkConfirmationDialogComponent,\n    HeaderComponent,\n    NewMenuComponent,\n    ProjectsListComponent,\n    SearchModule,\n    SecretsListComponent,\n    SelectModule,\n    SharedModule,\n  ],\n  declarations: [\n    AccessRemovalDialogComponent,\n    BulkStatusDialogComponent,\n    BulkConfirmationDialogComponent,\n    HeaderComponent,\n    NewMenuComponent,\n    ProjectsListComponent,\n    SecretsListComponent,\n    AccessSelectorComponent,\n  ],\n  providers: [],\n  bootstrap: [],\n})\nexport class SecretsManagerSharedModule {}\n","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-layout\",\n  templateUrl: \"./layout.component.html\",\n})\nexport class LayoutComponent implements OnInit {\n  ngOnInit() {\n    document.body.classList.remove(\"layout_frontend\");\n  }\n}\n","<div class=\"tw-flex tw-w-full\">\n  <nav\n    class=\"tw-fixed tw-max-h-screen tw-min-h-screen tw-w-60 tw-overflow-auto tw-bg-background-alt3\"\n  >\n    <router-outlet name=\"sidebar\"></router-outlet>\n  </nav>\n  <main class=\"tw-ml-60 tw-min-h-screen tw-min-w-0 tw-flex-1 tw-p-6\">\n    <router-outlet></router-outlet>\n  </main>\n</div>\n","import { Directive, EventEmitter, Input, Output } from \"@angular/core\";\n\n/**\n * Base class used in `NavGroupComponent` and `NavItemComponent`\n */\n@Directive()\nexport abstract class NavBaseComponent {\n  /**\n   * Text to display in main content\n   */\n  @Input() text: string;\n\n  /**\n   * `aria-label` for main content\n   */\n  @Input() ariaLabel: string;\n\n  /**\n   * Optional icon, e.g. `\"bwi-collection\"`\n   */\n  @Input() icon: string;\n\n  /**\n   * Route to be passed to internal `routerLink`\n   */\n  @Input() route: string | any[];\n\n  /**\n   * If this item is used within a tree, set `variant` to `\"tree\"`\n   */\n  @Input() variant: \"default\" | \"tree\" = \"default\";\n\n  /**\n   * Depth level when nested inside of a `'tree'` variant\n   */\n  @Input() treeDepth = 0;\n\n  /**\n   * If `true`, do not change styles when nav item is active.\n   */\n  @Input() hideActiveStyles = false;\n\n  /**\n   * Fires when main content is clicked\n   */\n  @Output() mainContentClicked: EventEmitter<MouseEvent> = new EventEmitter();\n}\n","<div\n  class=\"tw-relative\"\n  [ngClass]=\"[\n    showActiveStyles ? 'tw-bg-background-alt4' : 'tw-bg-background-alt3',\n    fvwStyles$ | async\n  ]\"\n>\n  <div\n    [ngStyle]=\"{\n      'padding-left': (variant === 'tree' ? 2.5 : 1) + treeDepth * 1.5 + 'rem'\n    }\"\n    class=\"tw-relative tw-flex tw-items-center tw-pr-4\"\n    [ngClass]=\"[variant === 'tree' ? 'tw-py-1' : 'tw-py-2']\"\n  >\n    <div\n      #slotStart\n      class=\"[&>*:focus-visible::before]:!tw-ring-text-alt2 [&>*:hover]:!tw-border-text-alt2 [&>*]:!tw-text-alt2\"\n    >\n      <ng-content select=\"[slot-start]\"></ng-content>\n    </div>\n    <!-- Default content for #slotStart (for consistent sizing) -->\n    <div\n      *ngIf=\"slotStart.childElementCount === 0\"\n      [ngClass]=\"{\n        'tw-w-0': variant !== 'tree'\n      }\"\n    >\n      <button\n        type=\"button\"\n        class=\"tw-invisible\"\n        [bitIconButton]=\"'bwi-angle-down'\"\n        size=\"small\"\n        aria-hidden=\"true\"\n      ></button>\n    </div>\n\n    <ng-container *ngIf=\"route; then isAnchor; else isButton\"></ng-container>\n\n    <!-- Main content of `NavItem` -->\n    <ng-template #anchorAndButtonContent>\n      <i class=\"bwi bwi-fw tw-text-alt2 tw-mx-1 {{ icon }}\"></i\n      ><span [ngClass]=\"showActiveStyles ? 'tw-font-bold' : 'tw-font-semibold'\">{{ text }}</span>\n    </ng-template>\n\n    <!-- Show if a value was passed to `this.to` -->\n    <ng-template #isAnchor>\n      <!-- The `fvw` class passes focus to `this.focusVisibleWithin$` -->\n      <!-- The following `class` field should match the `#isButton` class field below -->\n      <a\n        class=\"fvw tw-w-full tw-overflow-hidden tw-text-ellipsis tw-whitespace-nowrap tw-border-none tw-bg-transparent tw-p-0 tw-text-start !tw-text-alt2 hover:tw-text-alt2 hover:tw-no-underline focus:tw-outline-none [&>:not(.bwi)]:hover:tw-underline\"\n        [routerLink]=\"route\"\n        [attr.aria-label]=\"ariaLabel || text\"\n        routerLinkActive\n        [routerLinkActiveOptions]=\"rlaOptions\"\n        [ariaCurrentWhenActive]=\"'page'\"\n        (isActiveChange)=\"setActive($event)\"\n        (click)=\"mainContentClicked.emit()\"\n      >\n        <ng-container *ngTemplateOutlet=\"anchorAndButtonContent\"></ng-container>\n      </a>\n    </ng-template>\n\n    <!-- Show if `this.to` is falsy -->\n    <ng-template #isButton>\n      <!-- Class field should match `#isAnchor` class field above -->\n      <button\n        type=\"button\"\n        class=\"fvw tw-w-full tw-overflow-hidden tw-text-ellipsis tw-whitespace-nowrap tw-border-none tw-bg-transparent tw-p-0 tw-text-start !tw-text-alt2 hover:tw-text-alt2 hover:tw-no-underline focus:tw-outline-none [&>:not(.bwi)]:hover:tw-underline\"\n        (click)=\"mainContentClicked.emit()\"\n      >\n        <ng-container *ngTemplateOutlet=\"anchorAndButtonContent\"></ng-container>\n      </button>\n    </ng-template>\n\n    <div\n      class=\"tw-flex tw-gap-1 [&>*:focus-visible::before]:!tw-ring-text-alt2 [&>*:hover]:!tw-border-text-alt2 [&>*]:!tw-text-alt2\"\n    >\n      <ng-content select=\"[slot-end]\"></ng-content>\n    </div>\n  </div>\n</div>\n","import { Component, HostListener, Input } from \"@angular/core\";\nimport { IsActiveMatchOptions } from \"@angular/router\";\nimport { BehaviorSubject, map } from \"rxjs\";\n\nimport { NavBaseComponent } from \"./nav-base.component\";\n\n@Component({\n  selector: \"bit-nav-item\",\n  templateUrl: \"./nav-item.component.html\",\n})\nexport class NavItemComponent extends NavBaseComponent {\n  /**\n   * Is `true` if `to` matches the current route\n   */\n  private _active = false;\n  protected setActive(isActive: boolean) {\n    this._active = isActive;\n  }\n  protected get showActiveStyles() {\n    return this._active && !this.hideActiveStyles;\n  }\n  protected rlaOptions: IsActiveMatchOptions = {\n    paths: \"subset\",\n    queryParams: \"exact\",\n    fragment: \"ignored\",\n    matrixParams: \"ignored\",\n  };\n\n  /**\n   * if `true`, use `exact` match for path instead of `subset`.\n   */\n  @Input() set exactMatch(val: boolean) {\n    this.rlaOptions.paths = val ? \"exact\" : \"subset\";\n  }\n\n  /**\n   * The design spec calls for the an outline to wrap the entire element when the template's anchor/button has :focus-visible.\n   * Usually, we would use :focus-within for this. However, that matches when a child element has :focus instead of :focus-visible.\n   *\n   * Currently, the browser does not have a pseudo selector that combines these two, e.g. :focus-visible-within (WICG/focus-visible#151)\n   * To make our own :focus-visible-within functionality, we use event delegation on the host and manually check if the focus target (denoted with the .fvw class) matches :focus-visible. We then map that state to some styles, so the entire component can have an outline.\n   */\n  protected focusVisibleWithin$ = new BehaviorSubject(false);\n  protected fvwStyles$ = this.focusVisibleWithin$.pipe(\n    map((value) => (value ? \"tw-z-10 tw-rounded tw-outline-none tw-ring tw-ring-text-alt2\" : \"\"))\n  );\n  @HostListener(\"focusin\", [\"$event.target\"])\n  onFocusIn(target: HTMLElement) {\n    this.focusVisibleWithin$.next(target.matches(\".fvw:focus-visible\"));\n  }\n  @HostListener(\"focusout\")\n  onFocusOut() {\n    this.focusVisibleWithin$.next(false);\n  }\n}\n","<!-- This a higher order component that composes `NavItemComponent`  -->\n<bit-nav-item\n  [text]=\"text\"\n  [icon]=\"icon\"\n  [route]=\"route\"\n  [variant]=\"variant\"\n  (mainContentClicked)=\"toggle()\"\n  [treeDepth]=\"treeDepth\"\n  (mainContentClicked)=\"mainContentClicked.emit()\"\n  [ariaLabel]=\"ariaLabel\"\n  [exactMatch]=\"exactMatch\"\n>\n  <ng-template #button>\n    <button\n      type=\"button\"\n      class=\"tw-ml-auto\"\n      [bitIconButton]=\"\n        open ? 'bwi-angle-up' : variant === 'tree' ? 'bwi-angle-right' : 'bwi-angle-down'\n      \"\n      [buttonType]=\"'main'\"\n      (click)=\"toggle($event)\"\n      size=\"small\"\n      [title]=\"'toggleCollapse' | i18n\"\n      aria-haspopup=\"true\"\n      [attr.aria-expanded]=\"open.toString()\"\n      [attr.aria-controls]=\"contentId\"\n      [attr.aria-label]=\"['toggleCollapse' | i18n, text].join(' ')\"\n    ></button>\n  </ng-template>\n\n  <!-- Show toggle to the left for trees otherwise to the right -->\n  <ng-container slot-start *ngIf=\"variant === 'tree'\">\n    <ng-container *ngTemplateOutlet=\"button\"></ng-container>\n  </ng-container>\n  <ng-container slot-end *ngIf=\"variant !== 'tree'\">\n    <ng-container *ngTemplateOutlet=\"button\"></ng-container>\n  </ng-container>\n</bit-nav-item>\n\n<!-- [attr.aria-controls] of the above button expects a unique ID on the controlled element -->\n<div\n  *ngIf=\"open\"\n  [attr.id]=\"contentId\"\n  [attr.aria-label]=\"[text, 'submenu' | i18n].join(' ')\"\n  role=\"group\"\n>\n  <ng-content></ng-content>\n</div>\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  QueryList,\n} from \"@angular/core\";\n\nimport { NavBaseComponent } from \"./nav-base.component\";\nimport { NavItemComponent } from \"./nav-item.component\";\n\n@Component({\n  selector: \"bit-nav-group\",\n  templateUrl: \"./nav-group.component.html\",\n})\nexport class NavGroupComponent extends NavBaseComponent implements AfterContentInit {\n  @ContentChildren(forwardRef(() => NavGroupComponent), {\n    descendants: true,\n  })\n  nestedGroups!: QueryList<NavGroupComponent>;\n\n  @ContentChildren(NavItemComponent, {\n    descendants: true,\n  })\n  nestedItems!: QueryList<NavItemComponent>;\n\n  /**\n   * UID for `[attr.aria-controls]`\n   */\n  protected contentId = Math.random().toString(36).substring(2);\n\n  /**\n   * Is `true` if the expanded content is visible\n   */\n  @Input()\n  open = false;\n\n  /**\n   * if `true`, use `exact` match for path instead of `subset`.\n   */\n  @Input() exactMatch: boolean;\n\n  @Output()\n  openChange = new EventEmitter<boolean>();\n\n  protected toggle(event?: MouseEvent) {\n    event?.stopPropagation();\n    this.open = !this.open;\n    this.openChange.emit(this.open);\n  }\n\n  /**\n   * - For any nested NavGroupComponents or NavItemComponents, increment the `treeDepth` by 1.\n   */\n  private initNestedStyles() {\n    if (this.variant !== \"tree\") {\n      return;\n    }\n    [...this.nestedGroups, ...this.nestedItems].forEach((navGroupOrItem) => {\n      navGroupOrItem.treeDepth += 1;\n    });\n  }\n\n  ngAfterContentInit(): void {\n    this.initNestedStyles();\n  }\n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"bit-nav-divider\",\n  templateUrl: \"./nav-divider.component.html\",\n})\nexport class NavDividerComponent {}\n","<div class=\"tw-h-px tw-w-full tw-bg-secondary-300\"></div>\n","<bit-nav-group\n  *ngIf=\"activeOrganization$ | async as activeOrganization\"\n  [text]=\"activeOrganization.name\"\n  [ariaLabel]=\"['organization' | i18n, activeOrganization.name].join(' ')\"\n  icon=\"bwi-business\"\n  [route]=\"['../', activeOrganization.id]\"\n  [(open)]=\"open\"\n  [exactMatch]=\"true\"\n>\n  <ng-container *ngIf=\"organizations$ | async as organizations\">\n    <bit-nav-item\n      *ngFor=\"let org of organizations\"\n      [text]=\"org.name\"\n      [ariaLabel]=\"['organization' | i18n, org.name].join(' ')\"\n      [route]=\"['../', org.id]\"\n      (mainContentClicked)=\"toggle()\"\n      [hideActiveStyles]=\"true\"\n    >\n    </bit-nav-item>\n  </ng-container>\n  <bit-nav-item\n    *ngIf=\"!hideNewButton\"\n    icon=\"bwi-plus\"\n    [text]=\"'newOrganization' | i18n\"\n    route=\"/create-organization\"\n  ></bit-nav-item>\n  <bit-nav-divider></bit-nav-divider>\n</bit-nav-group>\n","import { Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, map, Observable } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport type { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\n\n@Component({\n  selector: \"org-switcher\",\n  templateUrl: \"org-switcher.component.html\",\n})\nexport class OrgSwitcherComponent {\n  protected organizations$: Observable<Organization[]> =\n    this.organizationService.organizations$.pipe(\n      map((orgs) => orgs.filter(this.filter).sort((a, b) => a.name.localeCompare(b.name)))\n    );\n  protected activeOrganization$: Observable<Organization> = combineLatest([\n    this.route.paramMap,\n    this.organizations$,\n  ]).pipe(map(([params, orgs]) => orgs.find((org) => org.id === params.get(\"organizationId\"))));\n\n  /**\n   * Filter function for displayed organizations in the `org-switcher`\n   * @example\n   * const smFilter = (org: Organization) => org.canAccessSecretsManager\n   * // <org-switcher [filter]=\"smFilter\">\n   */\n  @Input()\n  filter: (org: Organization) => boolean = () => true;\n\n  /**\n   * Is `true` if the expanded content is visible\n   */\n  @Input()\n  open = false;\n  @Output()\n  openChange = new EventEmitter<boolean>();\n\n  /**\n   * Visibility of the New Organization button\n   * (Temporary; will be removed when ability to create organizations is added to SM.)\n   */\n  @Input()\n  hideNewButton = false;\n\n  constructor(private route: ActivatedRoute, private organizationService: OrganizationService) {}\n\n  protected toggle(event?: MouseEvent) {\n    event?.stopPropagation();\n    this.open = !this.open;\n    this.openChange.emit(this.open);\n  }\n}\n","<a routerLink=\".\" class=\"tw-m-5 tw-mt-7 tw-block\">\n  <bit-icon [icon]=\"logo\"></bit-icon>\n</a>\n\n<org-switcher [filter]=\"orgFilter\" [hideNewButton]=\"true\"></org-switcher>\n<bit-nav-item icon=\"bwi-collection\" [text]=\"'projects' | i18n\" route=\"projects\"></bit-nav-item>\n<bit-nav-item icon=\"bwi-key\" [text]=\"'secrets' | i18n\" route=\"secrets\"></bit-nav-item>\n<bit-nav-item\n  icon=\"bwi-wrench\"\n  [text]=\"'serviceAccounts' | i18n\"\n  route=\"service-accounts\"\n></bit-nav-item>\n<bit-nav-item\n  icon=\"bwi-trash\"\n  [text]=\"'trash' | i18n\"\n  route=\"trash\"\n  *ngIf=\"isAdmin$ | async\"\n></bit-nav-item>\n<bit-nav-group icon=\"bwi-cog\" [text]=\"'settings' | i18n\" *ngIf=\"isAdmin$ | async\">\n  <bit-nav-item [text]=\"'importData' | i18n\" route=\"settings/import\"></bit-nav-item>\n  <bit-nav-item [text]=\"'exportData' | i18n\" route=\"settings/export\"></bit-nav-item>\n</bit-nav-group>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { map } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\n\nimport { SecretsManagerLogo } from \"./secrets-manager-logo\";\n\n@Component({\n  selector: \"sm-navigation\",\n  templateUrl: \"./navigation.component.html\",\n})\nexport class NavigationComponent {\n  protected readonly logo = SecretsManagerLogo;\n  protected orgFilter = (org: Organization) => org.canAccessSecretsManager;\n  protected isAdmin$ = this.route.params.pipe(\n    map((params) => this.organizationService.get(params.organizationId)?.isAdmin)\n  );\n\n  constructor(private route: ActivatedRoute, private organizationService: OrganizationService) {}\n}\n","import { NgModule } from \"@angular/core\";\n\nimport { ProgressModule } from \"@bitwarden/components\";\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared\";\n\nimport { OnboardingTaskComponent } from \"./onboarding-task.component\";\nimport { OnboardingComponent } from \"./onboarding.component\";\n\n@NgModule({\n  imports: [SharedModule, ProgressModule],\n  exports: [OnboardingComponent, OnboardingTaskComponent],\n  declarations: [OnboardingComponent, OnboardingTaskComponent],\n})\nexport class OnboardingModule {}\n","<bit-dialog dialogSize=\"default\">\n  <ng-container bitDialogTitle>\n    <span>{{ data.title | i18n }}</span>\n    <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n      {{ data.details.length }}\n      {{ data.subTitle | i18n }}\n    </span>\n  </ng-container>\n\n  <div bitDialogContent>\n    {{ data.message | i18n }}\n    <bit-table>\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ data.columnTitle | i18n }}</th>\n          <th bitCell>{{ \"error\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body>\n        <tr bitRow *ngFor=\"let detail of data.details\">\n          <td bitCell>{{ detail.name }}</td>\n          <td bitCell>{{ detail.errorMessage }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </div>\n\n  <ng-container bitDialogFooter>\n    <button bitButton buttonType=\"primary\" bitDialogClose type=\"button\">\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nexport interface BulkStatusDetails {\n  title: string;\n  subTitle: string;\n  columnTitle: string;\n  message: string;\n  details: BulkOperationStatus[];\n}\n\nexport class BulkOperationStatus {\n  id: string;\n  name: string;\n  errorMessage?: string;\n}\n\n@Component({\n  templateUrl: \"./bulk-status-dialog.component.html\",\n})\nexport class BulkStatusDialogComponent implements OnInit {\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) public data: BulkStatusDetails) {}\n\n  ngOnInit(): void {\n    // TODO remove null checks once strictNullChecks in TypeScript is turned on.\n    if (\n      !this.data.title ||\n      !this.data.subTitle ||\n      !this.data.columnTitle ||\n      !this.data.message ||\n      !(this.data.details?.length >= 1)\n    ) {\n      this.dialogRef.close();\n      throw new Error(\n        \"The bulk status dialog was not called with the appropriate operation values.\"\n      );\n    }\n  }\n}\n","export class ProjectListView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  read: boolean;\n  write: boolean;\n}\n","export class ProjectView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  read: boolean;\n  write: boolean;\n}\n","import { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nexport class ProjectRequest {\n  name: EncString;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class ProjectListItemResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  read: boolean;\n  write: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.read = this.getResponseProperty(\"Read\");\n    this.write = this.getResponseProperty(\"Write\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class ProjectResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  read: boolean;\n  write: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.read = this.getResponseProperty(\"Read\");\n    this.write = this.getResponseProperty(\"Write\");\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\n\nimport { ProjectListView } from \"../models/view/project-list.view\";\nimport { ProjectView } from \"../models/view/project.view\";\nimport { BulkOperationStatus } from \"../shared/dialogs/bulk-status-dialog.component\";\n\nimport { ProjectRequest } from \"./models/requests/project.request\";\nimport { ProjectListItemResponse } from \"./models/responses/project-list-item.response\";\nimport { ProjectResponse } from \"./models/responses/project.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ProjectService {\n  protected _project = new Subject<ProjectView>();\n  project$ = this._project.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getByProjectId(projectId: string): Promise<ProjectView> {\n    const r = await this.apiService.send(\"GET\", \"/projects/\" + projectId, null, true, true);\n    const projectResponse = new ProjectResponse(r);\n    return await this.createProjectView(projectResponse);\n  }\n\n  async getProjects(organizationId: string): Promise<ProjectListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/projects\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, ProjectListItemResponse);\n    return await this.createProjectsListView(organizationId, results.data);\n  }\n\n  async create(organizationId: string, projectView: ProjectView): Promise<ProjectView> {\n    const request = await this.getProjectRequest(organizationId, projectView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/projects\",\n      request,\n      true,\n      true\n    );\n\n    const project = await this.createProjectView(new ProjectResponse(r));\n    this._project.next(project);\n    return project;\n  }\n\n  async update(organizationId: string, projectView: ProjectView) {\n    const request = await this.getProjectRequest(organizationId, projectView);\n    const r = await this.apiService.send(\"PUT\", \"/projects/\" + projectView.id, request, true, true);\n    this._project.next(await this.createProjectView(new ProjectResponse(r)));\n  }\n\n  async delete(projects: ProjectListView[]): Promise<BulkOperationStatus[]> {\n    const projectIds = projects.map((project) => project.id);\n    const r = await this.apiService.send(\"POST\", \"/projects/delete\", projectIds, true, true);\n    this._project.next(null);\n    return r.data.map((element: { id: string; error: string }) => {\n      const bulkOperationStatus = new BulkOperationStatus();\n      bulkOperationStatus.id = element.id;\n      bulkOperationStatus.name = projects.find((project) => project.id == element.id).name;\n      bulkOperationStatus.errorMessage = element.error;\n      return bulkOperationStatus;\n    });\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async getProjectRequest(\n    organizationId: string,\n    projectView: ProjectView\n  ): Promise<ProjectRequest> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = new ProjectRequest();\n    request.name = await this.encryptService.encrypt(projectView.name, orgKey);\n\n    return request;\n  }\n\n  private async createProjectView(projectResponse: ProjectResponse) {\n    const orgKey = await this.getOrganizationKey(projectResponse.organizationId);\n\n    const projectView = new ProjectView();\n    projectView.id = projectResponse.id;\n    projectView.organizationId = projectResponse.organizationId;\n    projectView.creationDate = projectResponse.creationDate;\n    projectView.revisionDate = projectResponse.revisionDate;\n    projectView.read = projectResponse.read;\n    projectView.write = projectResponse.write;\n    projectView.name = await this.encryptService.decryptToUtf8(\n      new EncString(projectResponse.name),\n      orgKey\n    );\n    return projectView;\n  }\n\n  private async createProjectsListView(\n    organizationId: string,\n    projects: ProjectListItemResponse[]\n  ): Promise<ProjectListView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      projects.map(async (s: ProjectListItemResponse) => {\n        const projectListView = new ProjectListView();\n        projectListView.id = s.id;\n        projectListView.organizationId = s.organizationId;\n        projectListView.read = s.read;\n        projectListView.write = s.write;\n        projectListView.name = await this.encryptService.decryptToUtf8(\n          new EncString(s.name),\n          orgKey\n        );\n        projectListView.creationDate = s.creationDate;\n        projectListView.revisionDate = s.revisionDate;\n        return projectListView;\n      })\n    );\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"small\">\n    <ng-container bitDialogTitle>\n      <span>{{ title | i18n }}</span>\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        <ng-container *ngIf=\"data.projects.length == 1\">\n          {{ data.projects[0].name }}\n        </ng-container>\n        <ng-container *ngIf=\"data.projects.length > 1\">\n          {{ data.projects.length }}\n          {{ \"projects\" | i18n }}\n        </ng-container>\n      </span>\n    </ng-container>\n\n    <div bitDialogContent>\n      <bit-callout type=\"warning\" [title]=\"'warning' | i18n\">\n        {{ dialogContent }}\n      </bit-callout>\n      <bit-form-field>\n        <bit-label>{{ dialogConfirmationLabel }}</bit-label>\n        <input bitInput formControlName=\"confirmDelete\" />\n      </bit-form-field>\n    </div>\n\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton buttonType=\"danger\" bitFormButton>\n        {{ title | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport {\n  FormControl,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  AbstractControl,\n} from \"@angular/forms\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport {\n  BulkOperationStatus,\n  BulkStatusDetails,\n  BulkStatusDialogComponent,\n} from \"../../shared/dialogs/bulk-status-dialog.component\";\nimport { ProjectService } from \"../project.service\";\n\nexport interface ProjectDeleteOperation {\n  projects: ProjectListView[];\n}\n\n@Component({\n  templateUrl: \"./project-delete-dialog.component.html\",\n})\nexport class ProjectDeleteDialogComponent implements OnInit {\n  formGroup = new FormGroup({\n    confirmDelete: new FormControl(\"\", [this.matchConfirmationMessageValidator()]),\n  });\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: ProjectDeleteOperation,\n    private projectService: ProjectService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private dialogService: DialogServiceAbstraction\n  ) {}\n\n  ngOnInit(): void {\n    if (!(this.data.projects?.length >= 1)) {\n      this.dialogRef.close();\n      throw new Error(\n        \"The project delete dialog was not called with the appropriate operation values.\"\n      );\n    }\n  }\n\n  get title() {\n    return this.data.projects.length === 1 ? \"deleteProject\" : \"deleteProjects\";\n  }\n\n  get dialogContent() {\n    return this.data.projects.length === 1\n      ? this.i18nService.t(\"deleteProjectDialogMessage\", this.data.projects[0].name)\n      : this.i18nService.t(\"deleteProjectsDialogMessage\");\n  }\n\n  get dialogConfirmationLabel() {\n    return this.i18nService.t(\"deleteProjectInputLabel\", this.dialogConfirmationMessage);\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    await this.delete();\n    this.dialogRef.close();\n  };\n\n  async delete() {\n    const bulkResponses = await this.projectService.delete(this.data.projects);\n\n    if (bulkResponses.find((response) => response.errorMessage)) {\n      this.openBulkStatusDialog(bulkResponses.filter((response) => response.errorMessage));\n      return;\n    }\n\n    const message = this.data.projects.length === 1 ? \"deleteProjectToast\" : \"deleteProjectsToast\";\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  }\n\n  openBulkStatusDialog(bulkStatusResults: BulkOperationStatus[]) {\n    this.dialogService.open<unknown, BulkStatusDetails>(BulkStatusDialogComponent, {\n      data: {\n        title: \"deleteProjects\",\n        subTitle: \"projects\",\n        columnTitle: \"projectName\",\n        message: \"bulkDeleteProjectsErrorMessage\",\n        details: bulkStatusResults,\n      },\n    });\n  }\n\n  private get dialogConfirmationMessage() {\n    return this.data.projects?.length === 1\n      ? this.i18nService.t(\"deleteProjectConfirmMessage\", this.data.projects[0].name)\n      : this.i18nService.t(\"deleteProjectsConfirmMessage\", this.data.projects?.length.toString());\n  }\n\n  private matchConfirmationMessageValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (this.dialogConfirmationMessage.toLowerCase() == control.value.toLowerCase()) {\n        return null;\n      } else {\n        return {\n          confirmationDoesntMatchError: {\n            message: this.i18nService.t(\"smConfirmationRequired\"),\n          },\n        };\n      }\n    };\n  }\n}\n","import { AbstractControl, FormControl, ValidatorFn } from \"@angular/forms\";\n\n/**\n * Automatically trims FormControl value. Errors if value only contains whitespace.\n *\n * Should be used with `updateOn: \"submit\"`\n */\nexport const trimValidator: ValidatorFn = (control: AbstractControl<string>) => {\n  if (!(control instanceof FormControl)) {\n    throw new Error(\"trimValidator only supports validating FormControls\");\n  }\n  const value = control.value;\n  if (value === null || value === undefined || value === \"\") {\n    return null;\n  }\n  if (!value.trim().length) {\n    return {\n      trim: {\n        message: \"input is only whitespace\",\n      },\n    };\n  }\n  if (value !== value.trim()) {\n    control.setValue(value.trim());\n  }\n  return null;\n};\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { BitValidators } from \"@bitwarden/components\";\n\nimport { ProjectView } from \"../../models/view/project.view\";\nimport { ProjectService } from \"../../projects/project.service\";\n\nexport enum OperationType {\n  Add,\n  Edit,\n}\n\nexport interface ProjectOperation {\n  organizationId: string;\n  operation: OperationType;\n  projectId?: string;\n}\n\n@Component({\n  templateUrl: \"./project-dialog.component.html\",\n})\nexport class ProjectDialogComponent implements OnInit {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", {\n      validators: [Validators.required, BitValidators.trimValidator],\n      updateOn: \"submit\",\n    }),\n  });\n  protected loading = false;\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: ProjectOperation,\n    private projectService: ProjectService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private router: Router\n  ) {}\n\n  async ngOnInit() {\n    if (this.data.operation === OperationType.Edit && this.data.projectId) {\n      await this.loadData();\n    } else if (this.data.operation !== OperationType.Add) {\n      this.dialogRef.close();\n      throw new Error(`The project dialog was not called with the appropriate operation values.`);\n    }\n  }\n\n  async loadData() {\n    this.loading = true;\n    const project: ProjectView = await this.projectService.getByProjectId(this.data.projectId);\n    this.loading = false;\n    this.formGroup.setValue({ name: project.name });\n  }\n\n  get title() {\n    return this.data.operation === OperationType.Add ? \"newProject\" : \"editProject\";\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const projectView = this.getProjectView();\n    if (this.data.operation === OperationType.Add) {\n      const newProject = await this.createProject(projectView);\n      this.router.navigate([\"sm\", this.data.organizationId, \"projects\", newProject.id]);\n    } else {\n      projectView.id = this.data.projectId;\n      await this.updateProject(projectView);\n    }\n    this.dialogRef.close();\n  };\n\n  private async createProject(projectView: ProjectView) {\n    const newProject = await this.projectService.create(this.data.organizationId, projectView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"projectCreated\"));\n    return newProject;\n  }\n\n  private async updateProject(projectView: ProjectView) {\n    await this.projectService.update(this.data.organizationId, projectView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"projectSaved\"));\n  }\n\n  private getProjectView() {\n    const projectView = new ProjectView();\n    projectView.organizationId = this.data.organizationId;\n    projectView.name = this.formGroup.value.name;\n    return projectView;\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"small\">\n    <span bitDialogTitle>{{ title | i18n }}</span>\n    <span bitDialogContent>\n      <div *ngIf=\"loading\" class=\"tw-text-center\">\n        <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n      </div>\n      <bit-form-field *ngIf=\"!loading\">\n        <bit-label>{{ \"projectName\" | i18n }}</bit-label>\n        <input formControlName=\"name\" maxlength=\"1000\" bitInput />\n      </bit-form-field>\n    </span>\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"save\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","import { SecretProjectView } from \"./secret-project.view\";\n\nexport class SecretListView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectView[];\n  read: boolean;\n  write: boolean;\n}\n","export class SecretProjectView {\n  id: string;\n  name: string;\n}\n","import { SecretProjectView } from \"./secret-project.view\";\n\nexport class SecretView {\n  id: string;\n  organizationId: string;\n  name: string;\n  value: string;\n  note: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectView[];\n\n  read: boolean;\n  write: boolean;\n}\n","export class SecretRequest {\n  key: string;\n  value: string;\n  note: string;\n  projectIds?: string[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class SecretProjectResponse extends BaseResponse {\n  id: string;\n  name: string;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.id = this.getResponseProperty(\"Id\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretProjectResponse } from \"./secret-project.response\";\n\nexport class SecretListItemResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectResponse[];\n  read: boolean;\n  write: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Key\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.read = this.getResponseProperty(\"Read\");\n    this.write = this.getResponseProperty(\"Write\");\n\n    const project = this.getResponseProperty(\"projects\");\n    this.projects = project == null ? null : project.map((k: any) => new SecretProjectResponse(k));\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretListItemResponse } from \"./secret-list-item.response\";\nimport { SecretProjectResponse } from \"./secret-project.response\";\n\nexport class SecretWithProjectsListResponse extends BaseResponse {\n  secrets: SecretListItemResponse[];\n  projects: SecretProjectResponse[];\n\n  constructor(response: any) {\n    super(response);\n    const secrets = this.getResponseProperty(\"secrets\");\n    const projects = this.getResponseProperty(\"projects\");\n    this.projects =\n      projects == null ? null : projects.map((k: any) => new SecretProjectResponse(k));\n    this.secrets = secrets == null ? [] : secrets.map((dr: any) => new SecretListItemResponse(dr));\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretProjectResponse } from \"./secret-project.response\";\n\nexport class SecretResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  value: string;\n  note: string;\n  creationDate: string;\n  revisionDate: string;\n\n  read: boolean;\n  write: boolean;\n\n  projects: SecretProjectResponse[];\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Key\");\n    this.value = this.getResponseProperty(\"Value\");\n    this.note = this.getResponseProperty(\"Note\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n\n    this.read = this.getResponseProperty(\"Read\");\n    this.write = this.getResponseProperty(\"Write\");\n\n    const projects = this.getResponseProperty(\"Projects\");\n    this.projects =\n      projects == null ? null : projects.map((k: any) => new SecretProjectResponse(k));\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport { SecretProjectView } from \"../models/view/secret-project.view\";\nimport { SecretView } from \"../models/view/secret.view\";\nimport { BulkOperationStatus } from \"../shared/dialogs/bulk-status-dialog.component\";\n\nimport { SecretRequest } from \"./requests/secret.request\";\nimport { SecretListItemResponse } from \"./responses/secret-list-item.response\";\nimport { SecretProjectResponse } from \"./responses/secret-project.response\";\nimport { SecretWithProjectsListResponse } from \"./responses/secret-with-projects-list.response\";\nimport { SecretResponse } from \"./responses/secret.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SecretService {\n  protected _secret: Subject<SecretView> = new Subject();\n\n  secret$ = this._secret.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getBySecretId(secretId: string): Promise<SecretView> {\n    const r = await this.apiService.send(\"GET\", \"/secrets/\" + secretId, null, true, true);\n    const secretResponse = new SecretResponse(r);\n\n    return await this.createSecretView(secretResponse);\n  }\n\n  async getSecrets(organizationId: string): Promise<SecretListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/secrets\",\n      null,\n      true,\n      true\n    );\n\n    const results = new SecretWithProjectsListResponse(r);\n    return await this.createSecretsListView(organizationId, results);\n  }\n\n  async getSecretsByProject(organizationId: string, projectId: string): Promise<SecretListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/projects/\" + projectId + \"/secrets\",\n      null,\n      true,\n      true\n    );\n\n    const results = new SecretWithProjectsListResponse(r);\n    return await this.createSecretsListView(organizationId, results);\n  }\n\n  async create(organizationId: string, secretView: SecretView) {\n    const request = await this.getSecretRequest(organizationId, secretView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/secrets\",\n      request,\n      true,\n      true\n    );\n    this._secret.next(await this.createSecretView(new SecretResponse(r)));\n  }\n\n  async update(organizationId: string, secretView: SecretView) {\n    const request = await this.getSecretRequest(organizationId, secretView);\n    const r = await this.apiService.send(\"PUT\", \"/secrets/\" + secretView.id, request, true, true);\n    this._secret.next(await this.createSecretView(new SecretResponse(r)));\n  }\n\n  async delete(secrets: SecretListView[]): Promise<BulkOperationStatus[]> {\n    const secretIds = secrets.map((secret) => secret.id);\n    const r = await this.apiService.send(\"POST\", \"/secrets/delete\", secretIds, true, true);\n\n    this._secret.next(null);\n    return r.data.map((element: { id: string; error: string }) => {\n      const bulkOperationStatus = new BulkOperationStatus();\n      bulkOperationStatus.id = element.id;\n      bulkOperationStatus.name = secrets.find((secret) => secret.id == element.id).name;\n      bulkOperationStatus.errorMessage = element.error;\n      return bulkOperationStatus;\n    });\n  }\n\n  async getTrashedSecrets(organizationId: string): Promise<SecretListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/secrets/\" + organizationId + \"/trash\",\n      null,\n      true,\n      true\n    );\n\n    return await this.createSecretsListView(organizationId, new SecretWithProjectsListResponse(r));\n  }\n\n  async deleteTrashed(organizationId: string, secretIds: string[]) {\n    await this.apiService.send(\n      \"POST\",\n      \"/secrets/\" + organizationId + \"/trash/empty\",\n      secretIds,\n      true,\n      true\n    );\n\n    this._secret.next(null);\n  }\n\n  async restoreTrashed(organizationId: string, secretIds: string[]) {\n    await this.apiService.send(\n      \"POST\",\n      \"/secrets/\" + organizationId + \"/trash/restore\",\n      secretIds,\n      true,\n      true\n    );\n\n    this._secret.next(null);\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async getSecretRequest(\n    organizationId: string,\n    secretView: SecretView\n  ): Promise<SecretRequest> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = new SecretRequest();\n    const [key, value, note] = await Promise.all([\n      this.encryptService.encrypt(secretView.name, orgKey),\n      this.encryptService.encrypt(secretView.value, orgKey),\n      this.encryptService.encrypt(secretView.note, orgKey),\n    ]);\n    request.key = key.encryptedString;\n    request.value = value.encryptedString;\n    request.note = note.encryptedString;\n    request.projectIds = [];\n\n    secretView.projects?.forEach((e) => request.projectIds.push(e.id));\n\n    return request;\n  }\n\n  private async createSecretView(secretResponse: SecretResponse): Promise<SecretView> {\n    const orgKey = await this.getOrganizationKey(secretResponse.organizationId);\n\n    const secretView = new SecretView();\n    secretView.id = secretResponse.id;\n    secretView.organizationId = secretResponse.organizationId;\n    secretView.creationDate = secretResponse.creationDate;\n    secretView.revisionDate = secretResponse.revisionDate;\n\n    const [name, value, note] = await Promise.all([\n      this.encryptService.decryptToUtf8(new EncString(secretResponse.name), orgKey),\n      this.encryptService.decryptToUtf8(new EncString(secretResponse.value), orgKey),\n      this.encryptService.decryptToUtf8(new EncString(secretResponse.note), orgKey),\n    ]);\n    secretView.name = name;\n    secretView.value = value;\n    secretView.note = note;\n\n    secretView.read = secretResponse.read;\n    secretView.write = secretResponse.write;\n\n    if (secretResponse.projects != null) {\n      secretView.projects = await this.decryptProjectsMappedToSecrets(\n        orgKey,\n        secretResponse.projects\n      );\n    }\n\n    return secretView;\n  }\n\n  private async createSecretsListView(\n    organizationId: string,\n    secrets: SecretWithProjectsListResponse\n  ): Promise<SecretListView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n\n    const projectsMappedToSecretsView = await this.decryptProjectsMappedToSecrets(\n      orgKey,\n      secrets.projects\n    );\n\n    return await Promise.all(\n      secrets.secrets.map(async (s: SecretListItemResponse) => {\n        const secretListView = new SecretListView();\n        secretListView.id = s.id;\n        secretListView.organizationId = s.organizationId;\n        secretListView.name = await this.encryptService.decryptToUtf8(\n          new EncString(s.name),\n          orgKey\n        );\n        secretListView.creationDate = s.creationDate;\n        secretListView.revisionDate = s.revisionDate;\n\n        const projectIds = s.projects?.map((p) => p.id);\n        secretListView.projects = projectsMappedToSecretsView.filter((p) =>\n          projectIds.includes(p.id)\n        );\n\n        secretListView.read = s.read;\n        secretListView.write = s.write;\n\n        return secretListView;\n      })\n    );\n  }\n\n  private async decryptProjectsMappedToSecrets(\n    orgKey: SymmetricCryptoKey,\n    projects: SecretProjectResponse[]\n  ): Promise<SecretProjectView[]> {\n    return await Promise.all(\n      projects.map(async (s: SecretProjectResponse) => {\n        const projectsMappedToSecretView = new SecretProjectView();\n        projectsMappedToSecretView.id = s.id;\n        projectsMappedToSecretView.name = s.name\n          ? await this.encryptService.decryptToUtf8(new EncString(s.name), orgKey)\n          : null;\n        return projectsMappedToSecretView;\n      })\n    );\n  }\n}\n","<bit-simple-dialog>\n  <span bitDialogTitle>{{ title | i18n }}</span>\n  <span bitDialogContent>\n    <div *ngIf=\"showSoftDeleteSecretWarning\">\n      {{ \"softDeleteSecretWarning\" | i18n }}\n    </div>\n    {{ \"deleteItemConfirmation\" | i18n }}\n  </span>\n  <ng-container bitDialogFooter>\n    <button type=\"button\" bitButton buttonType=\"primary\" [bitAction]=\"delete\">\n      {{ submitButtonText | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-simple-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { SecretListView } from \"../../models/view/secret-list.view\";\nimport {\n  BulkOperationStatus,\n  BulkStatusDetails,\n  BulkStatusDialogComponent,\n} from \"../../shared/dialogs/bulk-status-dialog.component\";\nimport { SecretService } from \"../secret.service\";\n\nexport interface SecretDeleteOperation {\n  secrets: SecretListView[];\n}\n\n@Component({\n  templateUrl: \"./secret-delete.component.html\",\n})\nexport class SecretDeleteDialogComponent {\n  constructor(\n    public dialogRef: DialogRef,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    @Inject(DIALOG_DATA) private data: SecretDeleteOperation,\n    private dialogService: DialogServiceAbstraction\n  ) {}\n\n  showSoftDeleteSecretWarning = this.data.secrets.length === 1;\n\n  get title() {\n    return this.data.secrets.length === 1 ? \"deleteSecret\" : \"deleteSecrets\";\n  }\n\n  get submitButtonText() {\n    return this.data.secrets.length === 1 ? \"deleteSecret\" : \"deleteSecrets\";\n  }\n\n  delete = async () => {\n    const bulkResponses = await this.secretService.delete(this.data.secrets);\n\n    if (bulkResponses.find((response) => response.errorMessage)) {\n      this.openBulkStatusDialog(bulkResponses.filter((response) => response.errorMessage));\n      this.dialogRef.close(true);\n      return;\n    }\n\n    const message =\n      this.data.secrets.length === 1 ? \"softDeleteSuccessToast\" : \"softDeletesSuccessToast\";\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n\n    this.dialogRef.close(true);\n  };\n\n  openBulkStatusDialog(bulkStatusResults: BulkOperationStatus[]) {\n    this.dialogService.open<unknown, BulkStatusDetails>(BulkStatusDialogComponent, {\n      data: {\n        title: \"deleteSecrets\",\n        subTitle: \"secrets\",\n        columnTitle: \"name\",\n        message: \"bulkDeleteSecretsErrorMessage\",\n        details: bulkStatusResults,\n      },\n    });\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { lastValueFrom, Subject, takeUntil } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { BitValidators } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport { ProjectView } from \"../../models/view/project.view\";\nimport { SecretListView } from \"../../models/view/secret-list.view\";\nimport { SecretProjectView } from \"../../models/view/secret-project.view\";\nimport { SecretView } from \"../../models/view/secret.view\";\nimport { ProjectService } from \"../../projects/project.service\";\nimport { SecretService } from \"../secret.service\";\n\nimport { SecretDeleteDialogComponent, SecretDeleteOperation } from \"./secret-delete.component\";\n\nexport enum OperationType {\n  Add,\n  Edit,\n}\n\nexport interface SecretOperation {\n  organizationId: string;\n  operation: OperationType;\n  projectId?: string;\n  secretId?: string;\n}\n\n@Component({\n  templateUrl: \"./secret-dialog.component.html\",\n})\nexport class SecretDialogComponent implements OnInit {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", {\n      validators: [Validators.required, BitValidators.trimValidator],\n      updateOn: \"submit\",\n    }),\n    value: new FormControl(\"\", [Validators.required]),\n    notes: new FormControl(\"\", {\n      validators: [BitValidators.trimValidator],\n      updateOn: \"submit\",\n    }),\n    project: new FormControl(\"\", [Validators.required]),\n    newProjectName: new FormControl(\"\", {\n      validators: [BitValidators.trimValidator],\n      updateOn: \"submit\",\n    }),\n  });\n\n  private destroy$ = new Subject<void>();\n  private loading = true;\n  projects: ProjectListView[];\n  addNewProject = false;\n  newProjectGuid = Utils.newGuid();\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: SecretOperation,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private projectService: ProjectService,\n    private dialogService: DialogServiceAbstraction,\n    private organizationService: OrganizationService\n  ) {}\n\n  async ngOnInit() {\n    if (this.data.operation === OperationType.Edit && this.data.secretId) {\n      await this.loadData();\n    } else if (this.data.operation !== OperationType.Add) {\n      this.dialogRef.close();\n      throw new Error(`The secret dialog was not called with the appropriate operation values.`);\n    } else if (this.data.operation == OperationType.Add) {\n      await this.loadProjects(true);\n      if (this.data.projectId == null || this.data.projectId == \"\") {\n        this.addNewProjectOptionToProjectsDropDown();\n      }\n    }\n\n    if (this.data.projectId) {\n      this.formGroup.get(\"project\").setValue(this.data.projectId);\n    }\n\n    if (this.organizationService.get(this.data.organizationId)?.isAdmin) {\n      this.formGroup.get(\"project\").removeValidators(Validators.required);\n      this.formGroup.get(\"project\").updateValueAndValidity();\n    }\n  }\n\n  async loadData() {\n    this.formGroup.disable();\n    const secret: SecretView = await this.secretService.getBySecretId(this.data.secretId);\n\n    await this.loadProjects(secret.write);\n\n    this.formGroup.setValue({\n      name: secret.name,\n      value: secret.value,\n      notes: secret.note,\n      project: secret.projects[0]?.id ?? \"\",\n      newProjectName: \"\",\n    });\n\n    this.loading = false;\n\n    if (secret.write) {\n      this.formGroup.enable();\n    }\n  }\n\n  async loadProjects(filterByPermission: boolean) {\n    this.projects = await this.projectService\n      .getProjects(this.data.organizationId)\n      .then((projects) => projects.sort((a, b) => a.name.localeCompare(b.name)));\n\n    if (filterByPermission) {\n      this.projects = this.projects.filter((p) => p.write);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private addNewProjectOptionToProjectsDropDown() {\n    this.formGroup\n      .get(\"project\")\n      .valueChanges.pipe(takeUntil(this.destroy$))\n      .subscribe((val: string) => {\n        this.dropDownSelected(val);\n      });\n\n    const addNewProject = new ProjectListView();\n    addNewProject.name = this.i18nService.t(\"newProject\");\n    addNewProject.id = this.newProjectGuid;\n    this.projects.unshift(addNewProject);\n  }\n\n  private dropDownSelected(val: string) {\n    this.addNewProject = val == this.newProjectGuid;\n\n    if (this.addNewProject) {\n      this.formGroup.get(\"newProjectName\").addValidators([Validators.required]);\n    } else {\n      this.formGroup.get(\"newProjectName\").clearValidators();\n    }\n\n    this.formGroup.get(\"newProjectName\").updateValueAndValidity();\n  }\n\n  get title() {\n    return this.data.operation === OperationType.Add ? \"newSecret\" : \"editSecret\";\n  }\n\n  get showSpinner() {\n    return this.data.operation === OperationType.Edit && this.loading;\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const secretView = this.getSecretView();\n\n    if (this.addNewProject) {\n      const newProject = await this.createProject(this.getNewProjectView());\n      secretView.projects = [newProject];\n    }\n\n    if (this.data.operation === OperationType.Add) {\n      await this.createSecret(secretView);\n    } else {\n      secretView.id = this.data.secretId;\n      await this.updateSecret(secretView);\n    }\n    this.dialogRef.close();\n  };\n\n  get deleteButtonIsVisible(): boolean {\n    return this.data.operation === OperationType.Edit;\n  }\n\n  private async createProject(projectView: ProjectView) {\n    return await this.projectService.create(this.data.organizationId, projectView);\n  }\n\n  protected openDeleteSecretDialog() {\n    const secretListView: SecretListView[] = this.getSecretListView();\n\n    const dialogRef = this.dialogService.open<unknown, SecretDeleteOperation>(\n      SecretDeleteDialogComponent,\n      {\n        data: {\n          secrets: secretListView,\n        },\n      }\n    );\n\n    // If the secret is deleted, chain close this dialog after the delete dialog\n    lastValueFrom(dialogRef.closed).then(\n      (closeData) => closeData !== undefined && this.dialogRef.close()\n    );\n  }\n\n  private async createSecret(secretView: SecretView) {\n    await this.secretService.create(this.data.organizationId, secretView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"secretCreated\"));\n  }\n\n  private getNewProjectView() {\n    const projectView = new ProjectView();\n    projectView.organizationId = this.data.organizationId;\n    projectView.name = this.formGroup.value.newProjectName;\n    return projectView;\n  }\n\n  private async updateSecret(secretView: SecretView) {\n    await this.secretService.update(this.data.organizationId, secretView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"secretEdited\"));\n  }\n\n  private getSecretView() {\n    const secretView = new SecretView();\n    secretView.organizationId = this.data.organizationId;\n    secretView.name = this.formGroup.value.name;\n    secretView.value = this.formGroup.value.value;\n    secretView.note = this.formGroup.value.notes;\n\n    const project = this.projects.find((p) => p.id == this.formGroup.value.project);\n    secretView.projects = project != undefined ? [project] : [];\n\n    return secretView;\n  }\n\n  private getSecretListView() {\n    const secretListViews: SecretListView[] = [];\n    const emptyProjects: SecretProjectView[] = [];\n\n    const secretListView = new SecretListView();\n\n    if (this.formGroup.value.project) {\n      secretListView.projects = [this.projects.find((p) => p.id == this.formGroup.value.project)];\n    } else {\n      secretListView.projects = emptyProjects;\n    }\n\n    secretListView.organizationId = this.data.organizationId;\n    secretListView.id = this.data.secretId;\n    secretListView.name = this.formGroup.value.name;\n    secretListViews.push(secretListView);\n    return secretListViews;\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"large\">\n    <ng-container bitDialogTitle>{{ title | i18n }}</ng-container>\n    <div bitDialogContent class=\"tw-relative\">\n      <div\n        *ngIf=\"showSpinner\"\n        class=\"tw-absolute tw-flex tw-h-full tw-w-full tw-items-center tw-justify-center tw-bg-text-contrast\"\n      >\n        <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n      </div>\n      <div class=\"tw-flex tw-gap-4 tw-pt-4\">\n        <bit-form-field class=\"tw-w-1/3\">\n          <bit-label for=\"secret-name\">{{ \"name\" | i18n }}</bit-label>\n          <input formControlName=\"name\" bitInput />\n        </bit-form-field>\n        <bit-form-field class=\"tw-w-full\">\n          <bit-label>{{ \"value\" | i18n }}</bit-label>\n          <textarea bitInput rows=\"4\" formControlName=\"value\"></textarea>\n        </bit-form-field>\n      </div>\n      <bit-form-field>\n        <bit-label>{{ \"notes\" | i18n }}</bit-label>\n        <textarea bitInput rows=\"4\" formControlName=\"notes\"></textarea>\n      </bit-form-field>\n\n      <hr />\n\n      <bit-form-field class=\"tw-mb-0 tw-mt-3\">\n        <bit-label>{{ \"project\" | i18n }}</bit-label>\n        <bit-select bitInput name=\"project\" formControlName=\"project\">\n          <bit-option value=\"\" [label]=\"'selectPlaceholder' | i18n\"></bit-option>\n          <bit-option\n            *ngFor=\"let p of projects\"\n            [icon]=\"p.id === this.newProjectGuid ? 'bwi-plus-circle' : ''\"\n            [value]=\"p.id\"\n            [label]=\"p.name\"\n          >\n          </bit-option>\n        </bit-select>\n      </bit-form-field>\n\n      <bit-form-field *ngIf=\"addNewProject == true\">\n        <bit-label>{{ \"projectName\" | i18n }}</bit-label>\n        <input formControlName=\"newProjectName\" maxlength=\"1000\" bitInput />\n      </bit-form-field>\n    </div>\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"save\" | i18n }}\n      </button>\n      <button\n        type=\"button\"\n        bitButton\n        buttonType=\"secondary\"\n        bitFormButton\n        bitDialogClose\n        [disabled]=\"false\"\n      >\n        {{ \"cancel\" | i18n }}\n      </button>\n      <button\n        *ngIf=\"deleteButtonIsVisible\"\n        class=\"tw-ml-auto\"\n        type=\"button\"\n        bitIconButton=\"bwi-trash\"\n        buttonType=\"danger\"\n        bitFormButton\n        (click)=\"openDeleteSecretDialog()\"\n      ></button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","export class ServiceAccountView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n}\n","import { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nexport class ServiceAccountRequest {\n  name: EncString;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class ServiceAccountResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\n\nimport { ServiceAccountView } from \"../models/view/service-account.view\";\nimport { BulkOperationStatus } from \"../shared/dialogs/bulk-status-dialog.component\";\n\nimport { ServiceAccountRequest } from \"./models/requests/service-account.request\";\nimport { ServiceAccountResponse } from \"./models/responses/service-account.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ServiceAccountService {\n  protected _serviceAccount: Subject<ServiceAccountView> = new Subject();\n\n  serviceAccount$ = this._serviceAccount.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getServiceAccounts(organizationId: string): Promise<ServiceAccountView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/service-accounts\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, ServiceAccountResponse);\n    return await this.createServiceAccountViews(organizationId, results.data);\n  }\n\n  async getByServiceAccountId(\n    serviceAccountId: string,\n    organizationId: string\n  ): Promise<ServiceAccountView> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId,\n      null,\n      true,\n      true\n    );\n\n    return await this.createServiceAccountView(orgKey, new ServiceAccountResponse(r));\n  }\n\n  async update(\n    serviceAccountId: string,\n    organizationId: string,\n    serviceAccountView: ServiceAccountView\n  ) {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = await this.getServiceAccountRequest(orgKey, serviceAccountView);\n    const r = await this.apiService.send(\n      \"PUT\",\n      \"/service-accounts/\" + serviceAccountId,\n      request,\n      true,\n      true\n    );\n    this._serviceAccount.next(\n      await this.createServiceAccountView(orgKey, new ServiceAccountResponse(r))\n    );\n  }\n\n  async create(organizationId: string, serviceAccountView: ServiceAccountView) {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = await this.getServiceAccountRequest(orgKey, serviceAccountView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/service-accounts\",\n      request,\n      true,\n      true\n    );\n    this._serviceAccount.next(\n      await this.createServiceAccountView(orgKey, new ServiceAccountResponse(r))\n    );\n  }\n\n  async delete(serviceAccounts: ServiceAccountView[]): Promise<BulkOperationStatus[]> {\n    const ids = serviceAccounts.map((serviceAccount) => serviceAccount.id);\n    const r = await this.apiService.send(\"POST\", \"/service-accounts/delete\", ids, true, true);\n\n    this._serviceAccount.next(null);\n\n    return r.data.map((element: { id: string; error: string }) => {\n      const bulkOperationStatus = new BulkOperationStatus();\n      bulkOperationStatus.id = element.id;\n      bulkOperationStatus.name = serviceAccounts.find((sa) => sa.id == element.id).name;\n      bulkOperationStatus.errorMessage = element.error;\n      return bulkOperationStatus;\n    });\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async getServiceAccountRequest(\n    organizationKey: SymmetricCryptoKey,\n    serviceAccountView: ServiceAccountView\n  ) {\n    const request = new ServiceAccountRequest();\n    request.name = await this.encryptService.encrypt(serviceAccountView.name, organizationKey);\n    return request;\n  }\n\n  private async createServiceAccountView(\n    organizationKey: SymmetricCryptoKey,\n    serviceAccountResponse: ServiceAccountResponse\n  ): Promise<ServiceAccountView> {\n    const serviceAccountView = new ServiceAccountView();\n    serviceAccountView.id = serviceAccountResponse.id;\n    serviceAccountView.organizationId = serviceAccountResponse.organizationId;\n    serviceAccountView.creationDate = serviceAccountResponse.creationDate;\n    serviceAccountView.revisionDate = serviceAccountResponse.revisionDate;\n    serviceAccountView.name = await this.encryptService.decryptToUtf8(\n      new EncString(serviceAccountResponse.name),\n      organizationKey\n    );\n    return serviceAccountView;\n  }\n\n  private async createServiceAccountViews(\n    organizationId: string,\n    serviceAccountResponses: ServiceAccountResponse[]\n  ): Promise<ServiceAccountView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      serviceAccountResponses.map(async (s: ServiceAccountResponse) => {\n        return await this.createServiceAccountView(orgKey, s);\n      })\n    );\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { BitValidators } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../../models/view/service-account.view\";\nimport { ServiceAccountService } from \"../service-account.service\";\n\nexport enum OperationType {\n  Add,\n  Edit,\n}\n\nexport interface ServiceAccountOperation {\n  organizationId: string;\n  serviceAccountId?: string;\n  operation: OperationType;\n}\n\n@Component({\n  templateUrl: \"./service-account-dialog.component.html\",\n})\nexport class ServiceAccountDialogComponent {\n  protected formGroup = new FormGroup(\n    {\n      name: new FormControl(\"\", {\n        validators: [Validators.required, BitValidators.trimValidator],\n        updateOn: \"submit\",\n      }),\n    },\n    {}\n  );\n\n  protected loading = false;\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: ServiceAccountOperation,\n    private serviceAccountService: ServiceAccountService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService\n  ) {}\n\n  async ngOnInit() {\n    if (this.data.operation == OperationType.Edit) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    this.loading = true;\n    const serviceAccount: ServiceAccountView =\n      await this.serviceAccountService.getByServiceAccountId(\n        this.data.serviceAccountId,\n        this.data.organizationId\n      );\n    this.formGroup.patchValue({ name: serviceAccount.name });\n    this.loading = false;\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const serviceAccountView = this.getServiceAccountView();\n    let serviceAccountMessage: string;\n\n    if (this.data.operation == OperationType.Add) {\n      await this.serviceAccountService.create(this.data.organizationId, serviceAccountView);\n      serviceAccountMessage = this.i18nService.t(\"serviceAccountCreated\");\n    } else {\n      await this.serviceAccountService.update(\n        this.data.serviceAccountId,\n        this.data.organizationId,\n        serviceAccountView\n      );\n      serviceAccountMessage = this.i18nService.t(\"serviceAccountUpdated\");\n    }\n\n    this.platformUtilsService.showToast(\"success\", null, serviceAccountMessage);\n    this.dialogRef.close();\n  };\n\n  private getServiceAccountView() {\n    const serviceAccountView = new ServiceAccountView();\n    serviceAccountView.organizationId = this.data.organizationId;\n    serviceAccountView.name = this.formGroup.value.name;\n    return serviceAccountView;\n  }\n\n  get title() {\n    return this.data.operation === OperationType.Add ? \"newServiceAccount\" : \"editServiceAccount\";\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"small\">\n    <ng-container bitDialogTitle>{{ title | i18n }}</ng-container>\n    <div bitDialogContent>\n      <div *ngIf=\"loading\" class=\"tw-text-center\">\n        <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n      </div>\n      <div *ngIf=\"!loading\">\n        <bit-form-field>\n          <bit-label>{{ \"serviceAccountName\" | i18n }}</bit-label>\n          <input formControlName=\"name\" maxlength=\"1000\" bitInput />\n        </bit-form-field>\n      </div>\n    </div>\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"save\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","<div *ngIf=\"!secrets\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<ng-container *ngIf=\"secrets?.length == 0\">\n  <bit-no-items *ngIf=\"trash\">\n    <ng-container slot=\"title\">{{ \"secretsNoItemsTitle\" | i18n }}</ng-container>\n    <ng-container slot=\"description\">{{ \"secretsTrashNoItemsMessage\" | i18n }}</ng-container>\n  </bit-no-items>\n  <bit-no-items *ngIf=\"!trash\">\n    <ng-container slot=\"title\">{{ \"secretsNoItemsTitle\" | i18n }}</ng-container>\n    <ng-container slot=\"description\">{{ \"secretsNoItemsMessage\" | i18n }}</ng-container>\n    <button\n      type=\"button\"\n      slot=\"button\"\n      bitButton\n      buttonType=\"secondary\"\n      (click)=\"newSecretEvent.emit()\"\n    >\n      <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n      {{ \"newSecret\" | i18n }}\n    </button>\n  </bit-no-items>\n</ng-container>\n\n<bit-table *ngIf=\"secrets?.length >= 1\" [dataSource]=\"dataSource\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"!tw-mb-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell bitSortable=\"name\" default>{{ \"name\" | i18n }}</th>\n      <th bitCell bitSortable=\"projects\" [fn]=\"sortProjects\">{{ \"project\" | i18n }}</th>\n      <th bitCell bitSortable=\"revisionDate\">{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body let-rows$>\n    <tr bitRow *ngFor=\"let secret of rows$ | async\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(secret.id) : null\"\n          [checked]=\"selection.isSelected(secret.id)\"\n        />\n      </td>\n      <td bitCell>\n        <div class=\"tw-flex tw-items-center tw-gap-4 tw-break-all\">\n          <i class=\"bwi bwi-key tw-text-muted\" aria-hidden=\"true\"></i>\n          <button type=\"button\" bitLink (click)=\"editSecretEvent.emit(secret.id)\" *ngIf=\"!trash\">\n            {{ secret.name }}\n          </button>\n          <div *ngIf=\"trash\">{{ secret.name }}</div>\n        </div>\n      </td>\n      <td bitCell>\n        <span\n          *ngFor=\"let project of secret.projects\"\n          bitBadge\n          badgeType=\"secondary\"\n          class=\"tw-ml-1\"\n          [title]=\"project.name\"\n        >\n          {{ project.name | ellipsis : 32 }}\n        </span>\n        <span *ngIf=\"secret.projects.length === 0\" bitBadge badgeType=\"warning\" class=\"tw-ml-1\"\n          ><i class=\"bwi bwi-fw bwi-exclamation-triangle tw-mr-1\" aria-hidden=\"true\"></i\n          >{{ \"unassigned\" | i18n }}</span\n        >\n      </td>\n      <td bitCell class=\"tw-whitespace-nowrap\">{{ secret.revisionDate | date : \"medium\" }}</td>\n      <td bitCell>\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"secretMenu\"\n        ></button>\n      </td>\n\n      <bit-menu #secretMenu>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"editSecretEvent.emit(secret.id)\"\n          *ngIf=\"secret.write && !trash\"\n        >\n          <i class=\"bwi bwi-fw bwi-pencil\" aria-hidden=\"true\"></i>\n          {{ \"editSecret\" | i18n }}\n        </button>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"copySecretNameEvent.emit(secret.name)\"\n          *ngIf=\"!trash\"\n        >\n          <i class=\"bwi bwi-fw bwi-clone\" aria-hidden=\"true\"></i>\n          {{ \"copySecretName\" | i18n }}\n        </button>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"copySecretValueEvent.emit(secret.id)\"\n          *ngIf=\"!trash\"\n        >\n          <i class=\"bwi bwi-fw bwi-clone\" aria-hidden=\"true\"></i>\n          {{ \"copySecretValue\" | i18n }}\n        </button>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"restoreSecretsEvent.emit([secret.id])\"\n          *ngIf=\"trash\"\n        >\n          <i class=\"bwi bwi-fw bwi-refresh\" aria-hidden=\"true\"></i>\n          {{ \"restoreSecret\" | i18n }}\n        </button>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"deleteSecretsEvent.emit([secret])\"\n          *ngIf=\"secret.write\"\n        >\n          <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n          <span class=\"tw-text-danger\">{{\n            (trash ? \"permanentlyDelete\" : \"deleteSecret\") | i18n\n          }}</span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"bulkRestoreSecrets()\" *ngIf=\"trash\">\n    <i class=\"bwi bwi-fw bwi-refresh\" aria-hidden=\"true\"></i>\n    <span>{{ \"restoreSelected\" | i18n }}</span>\n  </button>\n  <button type=\"button\" bitMenuItem (click)=\"bulkDeleteSecrets()\">\n    <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">{{ \"deleteSecrets\" | i18n }}</span>\n  </button>\n</bit-menu>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, OnDestroy, Output } from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { TableDataSource } from \"@bitwarden/components\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport { SecretService } from \"../secrets/secret.service\";\n\n@Component({\n  selector: \"sm-secrets-list\",\n  templateUrl: \"./secrets-list.component.html\",\n})\nexport class SecretsListComponent implements OnDestroy {\n  protected dataSource = new TableDataSource<SecretListView>();\n\n  @Input()\n  get secrets(): SecretListView[] {\n    return this._secrets;\n  }\n  set secrets(secrets: SecretListView[]) {\n    this.selection.clear();\n    this._secrets = secrets;\n    this.dataSource.data = secrets;\n  }\n  private _secrets: SecretListView[];\n\n  @Input()\n  set search(search: string) {\n    this.selection.clear();\n    this.dataSource.filter = search;\n  }\n\n  @Input() trash: boolean;\n\n  @Output() editSecretEvent = new EventEmitter<string>();\n  @Output() copySecretNameEvent = new EventEmitter<string>();\n  @Output() copySecretValueEvent = new EventEmitter<string>();\n  @Output() onSecretCheckedEvent = new EventEmitter<string[]>();\n  @Output() deleteSecretsEvent = new EventEmitter<SecretListView[]>();\n  @Output() newSecretEvent = new EventEmitter();\n  @Output() restoreSecretsEvent = new EventEmitter();\n\n  private destroy$: Subject<void> = new Subject<void>();\n\n  selection = new SelectionModel<string>(true, []);\n\n  constructor(\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService\n  ) {\n    this.selection.changed\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((_) => this.onSecretCheckedEvent.emit(this.selection.selected));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  isAllSelected() {\n    if (this.selection.selected?.length > 0) {\n      const numSelected = this.selection.selected.length;\n      const numRows = this.dataSource.filteredData.length;\n      return numSelected === numRows;\n    }\n    return false;\n  }\n\n  toggleAll() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n    } else {\n      this.selection.select(...this.dataSource.filteredData.map((s) => s.id));\n    }\n  }\n\n  bulkDeleteSecrets() {\n    if (this.selection.selected.length >= 1) {\n      this.deleteSecretsEvent.emit(\n        this.secrets.filter((secret) => this.selection.isSelected(secret.id))\n      );\n    } else {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\")\n      );\n    }\n  }\n\n  bulkRestoreSecrets() {\n    if (this.selection.selected.length >= 1) {\n      this.restoreSecretsEvent.emit(this.selection.selected);\n    } else {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\")\n      );\n    }\n  }\n\n  sortProjects = (a: SecretListView, b: SecretListView): number => {\n    const aProjects = a.projects;\n    const bProjects = b.projects;\n    if (aProjects.length !== bProjects.length) {\n      return aProjects.length - bProjects.length;\n    }\n\n    return aProjects[0]?.name.localeCompare(bProjects[0].name);\n  };\n\n  /**\n   * TODO: Refactor to smart component and remove\n   */\n  static copySecretName(\n    name: string,\n    platformUtilsService: PlatformUtilsService,\n    i18nService: I18nService\n  ) {\n    platformUtilsService.copyToClipboard(name);\n    platformUtilsService.showToast(\n      \"success\",\n      null,\n      i18nService.t(\"valueCopied\", i18nService.t(\"name\"))\n    );\n  }\n\n  /**\n   * TODO: Refactor to smart component and remove\n   */\n  static copySecretValue(\n    id: string,\n    platformUtilsService: PlatformUtilsService,\n    i18nService: I18nService,\n    secretService: SecretService\n  ) {\n    const value = secretService.getBySecretId(id).then((secret) => secret.value);\n    SecretsListComponent.copyToClipboardAsync(value, platformUtilsService).then(() => {\n      platformUtilsService.showToast(\n        \"success\",\n        null,\n        i18nService.t(\"valueCopied\", i18nService.t(\"value\"))\n      );\n    });\n  }\n\n  /**\n   * TODO: Remove in favor of updating `PlatformUtilsService.copyToClipboard`\n   */\n  private static copyToClipboardAsync(\n    text: Promise<string>,\n    platformUtilsService: PlatformUtilsService\n  ) {\n    if (platformUtilsService.isSafari()) {\n      return navigator.clipboard.write([\n        new ClipboardItem({\n          [\"text/plain\"]: text,\n        }),\n      ]);\n    }\n\n    return text.then((t) => platformUtilsService.copyToClipboard(t));\n  }\n}\n","<header\n  *ngIf=\"routeData$ | async as routeData\"\n  class=\"-tw-m-6 tw-mb-3 tw-flex tw-flex-col tw-p-6\"\n  [ngClass]=\"{\n    'tw-border-0 tw-border-b tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-pb-0':\n      tabsContainer.childElementCount !== 0\n  }\"\n>\n  <div class=\"tw-flex\">\n    <div class=\"tw-flex tw-min-w-0 tw-flex-1 tw-flex-col tw-gap-2\">\n      <ng-content select=\"[slot=breadcrumbs]\"></ng-content>\n      <div #titleContainer [ngClass]=\"{ 'tw-hidden': titleContainer.childElementCount === 0 }\">\n        <ng-content select=\"[slot=title]\"></ng-content>\n      </div>\n      <h1\n        *ngIf=\"titleContainer.childElementCount === 0\"\n        bitTypography=\"h1\"\n        noMargin\n        class=\"tw-m-0 tw-mr-2 tw-truncate tw-leading-10\"\n        [title]=\"title || (routeData.titleId | i18n)\"\n      >\n        <i *ngIf=\"icon\" class=\"bwi {{ icon }}\" aria-hidden=\"true\"></i>\n        {{ title || (routeData.titleId | i18n) }}\n      </h1>\n    </div>\n    <div class=\"tw-ml-auto tw-flex tw-flex-col tw-gap-4\">\n      <div class=\"tw-flex tw-min-w-max tw-items-center tw-justify-end tw-gap-2\">\n        <ng-content></ng-content>\n        <product-switcher></product-switcher>\n        <ng-container *ngIf=\"account$ | async as account\">\n          <button\n            type=\"button\"\n            [bitMenuTriggerFor]=\"accountMenu\"\n            class=\"tw-border-0 tw-bg-transparent tw-p-0\"\n          >\n            <dynamic-avatar [id]=\"account.userId\" [text]=\"account | userName\"></dynamic-avatar>\n          </button>\n\n          <bit-menu #accountMenu>\n            <div class=\"tw-flex tw-min-w-52 tw-max-w-72 tw-flex-col\">\n              <div\n                class=\"tw-flex tw-items-center tw-px-4 tw-py-1 tw-leading-tight tw-text-info\"\n                appStopProp\n              >\n                <dynamic-avatar [id]=\"account.userId\" [text]=\"account | userName\"></dynamic-avatar>\n                <div class=\"tw-ml-2 tw-block tw-overflow-hidden tw-whitespace-nowrap\">\n                  <span>{{ \"loggedInAs\" | i18n }}</span>\n                  <small class=\"tw-block tw-overflow-hidden tw-whitespace-nowrap tw-text-muted\">\n                    {{ account | userName }}\n                  </small>\n                </div>\n              </div>\n\n              <bit-menu-divider></bit-menu-divider>\n\n              <a bitMenuItem routerLink=\"/settings/account\">\n                <i class=\"bwi bwi-fw bwi-user\" aria-hidden=\"true\"></i>\n                {{ \"accountSettings\" | i18n }}\n              </a>\n              <a bitMenuItem href=\"https://bitwarden.com/help/\" target=\"_blank\" rel=\"noopener\">\n                <i class=\"bwi bwi-fw bwi-question-circle\" aria-hidden=\"true\"></i>\n                {{ \"getHelp\" | i18n }}\n              </a>\n              <a bitMenuItem href=\"https://bitwarden.com/download/\" target=\"_blank\" rel=\"noopener\">\n                <i class=\"bwi bwi-fw bwi-download\" aria-hidden=\"true\"></i>\n                {{ \"getApps\" | i18n }}\n              </a>\n\n              <bit-menu-divider></bit-menu-divider>\n\n              <button bitMenuItem type=\"button\" (click)=\"lock()\">\n                <i class=\"bwi bwi-fw bwi-lock\" aria-hidden=\"true\"></i>\n                {{ \"lockNow\" | i18n }}\n              </button>\n              <button bitMenuItem type=\"button\" (click)=\"logout()\">\n                <i class=\"bwi bwi-fw bwi-sign-out\" aria-hidden=\"true\"></i>\n                {{ \"logOut\" | i18n }}\n              </button>\n            </div>\n          </bit-menu>\n        </ng-container>\n      </div>\n      <div\n        class=\"tw-ml-auto\"\n        #contentContainer\n        [ngClass]=\"{ 'tw-hidden': contentContainer.childElementCount === 0 }\"\n      >\n        <ng-content select=\"[slot=secondary]\"></ng-content>\n      </div>\n    </div>\n  </div>\n  <div\n    #tabsContainer\n    class=\"-tw-mx-4 -tw-mb-px\"\n    [ngClass]=\"{ 'tw-hidden': tabsContainer.childElementCount === 0 }\"\n  >\n    <ng-content select=\"[slot=tabs]\"></ng-content>\n  </div>\n</header>\n","import { Component, Input } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, map, Observable } from \"rxjs\";\n\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { AccountProfile } from \"@bitwarden/common/platform/models/domain/account\";\n\n@Component({\n  selector: \"sm-header\",\n  templateUrl: \"./header.component.html\",\n})\nexport class HeaderComponent {\n  /**\n   * Custom title that overrides the route data `titleId`\n   */\n  @Input() title: string;\n\n  /**\n   * Icon to show before the title\n   */\n  @Input() icon: string;\n\n  protected routeData$: Observable<{ titleId: string }>;\n  protected account$: Observable<AccountProfile>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private stateService: StateService,\n    private messagingService: MessagingService\n  ) {\n    this.routeData$ = this.route.data.pipe(\n      map((params) => {\n        return {\n          titleId: params.titleId,\n        };\n      })\n    );\n\n    this.account$ = combineLatest([\n      this.stateService.activeAccount$,\n      this.stateService.accounts$,\n    ]).pipe(\n      map(([activeAccount, accounts]) => {\n        return accounts[activeAccount]?.profile;\n      })\n    );\n  }\n\n  protected lock() {\n    this.messagingService.send(\"lockVault\");\n  }\n\n  protected logout() {\n    this.messagingService.send(\"logout\");\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\n\nimport {\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../projects/dialog/project-dialog.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"../secrets/dialog/secret-dialog.component\";\nimport {\n  ServiceAccountDialogComponent,\n  ServiceAccountOperation,\n} from \"../service-accounts/dialog/service-account-dialog.component\";\n\n@Component({\n  selector: \"sm-new-menu\",\n  templateUrl: \"./new-menu.component.html\",\n})\nexport class NewMenuComponent implements OnInit, OnDestroy {\n  private organizationId: string;\n  private destroy$: Subject<void> = new Subject<void>();\n\n  constructor(private route: ActivatedRoute, private dialogService: DialogServiceAbstraction) {}\n\n  ngOnInit() {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params: any) => {\n      this.organizationId = params.organizationId;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  openSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openProjectDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openServiceAccountDialog() {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n}\n","<div *ngIf=\"!projects\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<bit-no-items *ngIf=\"projects?.length == 0\">\n  <ng-container slot=\"title\">{{ \"projectsNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container slot=\"description\">{{ \"projectsNoItemsMessage\" | i18n }}</ng-container>\n  <button\n    type=\"button\"\n    slot=\"button\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"newProjectEvent.emit()\"\n  >\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newProject\" | i18n }}\n  </button>\n</bit-no-items>\n\n<bit-table *ngIf=\"projects?.length >= 1\" [dataSource]=\"dataSource\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"!tw-mb-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell bitSortable=\"name\" default>{{ \"name\" | i18n }}</th>\n      <th bitCell bitSortable=\"revisionDate\">{{ \"lastEdited\" | i18n }}</th>\n      <th\n        bitCell\n        class=\"tw-w-0\"\n        [ngClass]=\"{ 'tw-invisible': !(hasWriteAccessOnSelected$ | async) }\"\n      >\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body let-rows$>\n    <tr bitRow *ngFor=\"let project of rows$ | async\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(project.id) : null\"\n          [checked]=\"selection.isSelected(project.id)\"\n        />\n      </td>\n      <td bitCell>\n        <div class=\"tw-flex tw-items-center tw-gap-4 tw-break-all\">\n          <i class=\"bwi bwi-collection tw-text-muted\" aria-hidden=\"true\"></i>\n          <a bitLink [routerLink]=\"['/sm', project.organizationId, 'projects', project.id]\">{{\n            project.name\n          }}</a>\n        </div>\n      </td>\n      <td bitCell class=\"tw-whitespace-nowrap\">{{ project.revisionDate | date : \"medium\" }}</td>\n      <td bitCell>\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [bitMenuTriggerFor]=\"projectMenu\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n        ></button>\n      </td>\n      <bit-menu #projectMenu>\n        <a bitMenuItem [routerLink]=\"['/sm', project.organizationId, 'projects', project.id]\">\n          <i class=\"bwi bwi-fw bwi-eye\" aria-hidden=\"true\"></i>\n          {{ \"viewProject\" | i18n }}\n        </a>\n        <button\n          *ngIf=\"project.write\"\n          type=\"button\"\n          bitMenuItem\n          (click)=\"editProjectEvent.emit(project.id)\"\n        >\n          <i class=\"bwi bwi-fw bwi-pencil\" aria-hidden=\"true\"></i>\n          {{ \"editProject\" | i18n }}\n        </button>\n        <button *ngIf=\"project.write\" type=\"button\" bitMenuItem (click)=\"deleteProject(project.id)\">\n          <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n          <span class=\"tw-text-danger\">{{ \"deleteProject\" | i18n }}</span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"bulkDeleteProjects()\">\n    <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">{{ \"deleteProjects\" | i18n }}</span>\n  </button>\n</bit-menu>\n","<button\n  type=\"button\"\n  bitButton\n  class=\"tw-min-w-max\"\n  buttonType=\"primary\"\n  [bitMenuTriggerFor]=\"newMenu\"\n>\n  {{ \"new\" | i18n }} <i class=\"bwi bwi-angle-down\" aria-hidden=\"true\"></i>\n</button>\n\n<bit-menu #newMenu>\n  <button type=\"button\" bitMenuItem (click)=\"openProjectDialog()\">\n    <i class=\"bwi bwi-fw bwi-sitemap\" aria-hidden=\"true\"></i>\n    {{ \"project\" | i18n }}\n  </button>\n  <button type=\"button\" bitMenuItem (click)=\"openSecretDialog()\">\n    <i class=\"bwi bwi-fw bwi-key\" aria-hidden=\"true\"></i>\n    {{ \"secret\" | i18n }}\n  </button>\n  <button type=\"button\" bitMenuItem (click)=\"openServiceAccountDialog()\">\n    <i class=\"bwi bwi-fw bwi-wrench\" aria-hidden=\"true\"></i>\n    {{ \"serviceAccount\" | i18n }}\n  </button>\n</bit-menu>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { map } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { TableDataSource } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../models/view/project-list.view\";\n\n@Component({\n  selector: \"sm-projects-list\",\n  templateUrl: \"./projects-list.component.html\",\n})\nexport class ProjectsListComponent {\n  @Input()\n  get projects(): ProjectListView[] {\n    return this._projects;\n  }\n  set projects(projects: ProjectListView[]) {\n    this.selection.clear();\n    this._projects = projects;\n    this.dataSource.data = projects;\n  }\n  private _projects: ProjectListView[];\n\n  @Input()\n  set search(search: string) {\n    this.selection.clear();\n    this.dataSource.filter = search;\n  }\n\n  @Output() editProjectEvent = new EventEmitter<string>();\n  @Output() deleteProjectEvent = new EventEmitter<ProjectListView[]>();\n  @Output() newProjectEvent = new EventEmitter();\n\n  selection = new SelectionModel<string>(true, []);\n  protected dataSource = new TableDataSource<ProjectListView>();\n  protected hasWriteAccessOnSelected$ = this.selection.changed.pipe(\n    map((_) => this.selectedHasWriteAccess())\n  );\n\n  constructor(\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService\n  ) {}\n\n  isAllSelected() {\n    if (this.selection.selected?.length > 0) {\n      const numSelected = this.selection.selected.length;\n      const numRows = this.dataSource.filteredData.length;\n      return numSelected === numRows;\n    }\n    return false;\n  }\n\n  toggleAll() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n    } else {\n      this.selection.select(...this.dataSource.filteredData.map((s) => s.id));\n    }\n  }\n\n  deleteProject(projectId: string) {\n    this.deleteProjectEvent.emit(this.projects.filter((p) => p.id == projectId));\n  }\n\n  bulkDeleteProjects() {\n    if (this.selection.selected.length >= 1) {\n      this.deleteProjectEvent.emit(\n        this.projects.filter((project) => this.selection.isSelected(project.id))\n      );\n    } else {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\")\n      );\n    }\n  }\n\n  private selectedHasWriteAccess() {\n    const selectedProjects = this.projects.filter((project) =>\n      this.selection.isSelected(project.id)\n    );\n    if (selectedProjects.some((project) => project.write)) {\n      return true;\n    }\n    return false;\n  }\n}\n","<ng-template #content>\n  <i class=\"bwi bwi-fw !tw-mr-4\" [ngClass]=\"completed ? 'bwi-check tw-text-success' : icon\"></i\n  ><span\n    [ngClass]=\"{\n      'tw-text-primary-700 tw-line-through tw-decoration-primary-700 tw-opacity-50': completed\n    }\"\n    >{{ title }}<i class=\"bwi bwi-angle-right tw-ml-1\"></i\n  ></span>\n</ng-template>\n\n<li class=\"tw-list-none\">\n  <a bitLink *ngIf=\"route\" [routerLink]=\"route\">\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </a>\n  <button type=\"button\" bitLink *ngIf=\"!route\">\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </button>\n  <div\n    class=\"tw-ml-8 tw-mt-1 tw-text-sm\"\n    [ngClass]=\"{ 'tw-opacity-50': completed }\"\n    (click)=\"handleClick($event)\"\n  >\n    <ng-content></ng-content>\n  </div>\n</li>\n","import { Component, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-onboarding-task\",\n  templateUrl: \"./onboarding-task.component.html\",\n  host: {\n    class: \"tw-max-w-max\",\n  },\n})\nexport class OnboardingTaskComponent {\n  @Input()\n  completed = false;\n\n  @Input()\n  icon = \"bwi-info-circle\";\n\n  @Input()\n  title: string;\n\n  @Input()\n  route: string | any[];\n\n  handleClick(ev: MouseEvent) {\n    /**\n     * If the main `ng-content` is clicked, we don't want to trigger the task's click handler.\n     */\n    ev.stopPropagation();\n  }\n}\n","<details #details class=\"tw-rounded-sm tw-bg-background-alt tw-text-main\" (toggle)=\"toggle()\" open>\n  <summary class=\"tw-list-none tw-p-2 tw-px-4\">\n    <div class=\"tw-flex tw-select-none tw-items-center tw-gap-4\">\n      <i class=\"bwi bwi-dashboard tw-text-3xl tw-text-primary-500\" aria-hidden=\"true\"></i>\n      <div class=\"tw-text-lg\">{{ title }}</div>\n      <bit-progress class=\"tw-flex-1\" [showText]=\"false\" [barWidth]=\"barWidth\"></bit-progress>\n      <span *ngIf=\"tasks.length > 0; else spinner\">\n        {{ \"complete\" | i18n : amountCompleted : tasks.length }}\n      </span>\n      <i\n        class=\"bwi tw-my-auto\"\n        [ngClass]=\"open ? 'bwi-angle-down' : 'bwi-angle-up'\"\n        aria-hidden=\"true\"\n      ></i>\n    </div>\n  </summary>\n  <ul class=\"tw-mb-0 tw-ml-6 tw-flex tw-flex-col tw-gap-4\">\n    <ng-content></ng-content>\n  </ul>\n  <div class=\"tw-p-4 tw-pt-0\">\n    <button bitLink type=\"button\" class=\"tw-ml-auto tw-block\" (click)=\"dismiss.emit()\">\n      {{ \"dismiss\" | i18n }}\n    </button>\n  </div>\n</details>\n\n<ng-template #spinner>\n  <i class=\"bwi bwi-spinner bwi-spin\"></i>\n</ng-template>\n","import { Component, ContentChildren, EventEmitter, Input, Output, QueryList } from \"@angular/core\";\n\nimport { OnboardingTaskComponent } from \"./onboarding-task.component\";\n\n@Component({\n  selector: \"sm-onboarding\",\n  templateUrl: \"./onboarding.component.html\",\n})\nexport class OnboardingComponent {\n  @ContentChildren(OnboardingTaskComponent) tasks: QueryList<OnboardingTaskComponent>;\n  @Input() title: string;\n\n  @Output() dismiss = new EventEmitter<void>();\n\n  protected open = true;\n  protected visible = false;\n\n  protected get amountCompleted(): number {\n    return this.tasks.filter((task) => task.completed).length;\n  }\n\n  protected get barWidth(): number {\n    return this.tasks.length === 0 ? 0 : (this.amountCompleted / this.tasks.length) * 100;\n  }\n\n  protected toggle() {\n    this.open = !this.open;\n  }\n}\n","<section>\n  <header class=\"tw-flex tw-max-w-min tw-items-center tw-gap-2\">\n    <div><ng-content select=\"[slot=summary]\"></ng-content></div>\n    <button\n      type=\"button\"\n      [bitIconButton]=\"open ? 'bwi-angle-up' : 'bwi-angle-down'\"\n      (click)=\"toggle()\"\n      [attr.aria-expanded]=\"open\"\n      [attr.aria-controls]=\"contentId\"\n    ></button>\n  </header>\n  <div *ngIf=\"open\" [attr.id]=\"contentId\" class=\"tw-mt-4\">\n    <ng-content></ng-content>\n  </div>\n</section>\n","import { Component, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-section\",\n  templateUrl: \"./section.component.html\",\n})\nexport class SectionComponent {\n  @Input() open = true;\n\n  /**\n   * UID for `[attr.aria-controls]`\n   */\n  protected contentId = Math.random().toString(36).substring(2);\n\n  protected toggle() {\n    this.open = !this.open;\n  }\n}\n","<sm-header [title]=\"organizationName\">\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n\n<div *ngIf=\"!loading && view$ | async as view; else spinner\">\n  <sm-onboarding [title]=\"'getStarted' | i18n\" *ngIf=\"showOnboarding\" (dismiss)=\"hideOnboarding()\">\n    <sm-onboarding-task\n      [title]=\"'createServiceAccount' | i18n\"\n      (click)=\"openServiceAccountDialog()\"\n      icon=\"bwi-cli\"\n      [completed]=\"view.tasks.createServiceAccount\"\n    >\n      <span class=\"tw-pl-1\">\n        {{ \"downloadThe\" | i18n }}\n        <a bitLink href=\"https://bitwarden.com/help/secrets-manager-cli/\" target=\"_blank\">{{\n          \"smCLI\" | i18n\n        }}</a>\n      </span>\n    </sm-onboarding-task>\n    <sm-onboarding-task\n      *ngIf=\"userIsAdmin\"\n      [title]=\"'createProject' | i18n\"\n      (click)=\"openNewProjectDialog()\"\n      icon=\"bwi-collection\"\n      [completed]=\"view.tasks.createProject\"\n    ></sm-onboarding-task>\n    <sm-onboarding-task\n      *ngIf=\"userIsAdmin\"\n      [title]=\"'importSecrets' | i18n\"\n      [route]=\"['settings', 'import']\"\n      icon=\"bwi-download\"\n      [completed]=\"view.tasks.importSecrets\"\n    ></sm-onboarding-task>\n    <sm-onboarding-task\n      *ngIf=\"view.tasks.createProject\"\n      [title]=\"'createSecret' | i18n\"\n      (click)=\"openSecretDialog()\"\n      icon=\"bwi-key\"\n      [completed]=\"view.tasks.createSecret\"\n    ></sm-onboarding-task>\n  </sm-onboarding>\n\n  <div class=\"tw-mt-6 tw-flex tw-flex-col tw-gap-6\">\n    <sm-section>\n      <h2 slot=\"summary\" class=\"tw-mb-0\" bitTypography=\"h2\" noMargin>{{ \"projects\" | i18n }}</h2>\n      <sm-projects-list\n        (newProjectEvent)=\"openNewProjectDialog()\"\n        (editProjectEvent)=\"openEditProject($event)\"\n        (deleteProjectEvent)=\"openDeleteProjectDialog($event)\"\n        [projects]=\"view.latestProjects\"\n      ></sm-projects-list>\n      <div *ngIf=\"view.allProjects.length > 0\" class=\"tw-ml-auto tw-mt-4 tw-max-w-max\">\n        {{ \"showingPortionOfTotal\" | i18n : view.latestProjects.length : view.allProjects.length }}\n        <a bitLink routerLink=\"projects\" class=\"tw-ml-2\">{{ \"viewAll\" | i18n }}</a>\n      </div>\n    </sm-section>\n    <sm-section>\n      <h2 slot=\"summary\" class=\"tw-mb-0\" bitTypography=\"h2\" noMargin>{{ \"secrets\" | i18n }}</h2>\n      <sm-secrets-list\n        baseRoute=\"secrets\"\n        (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n        (newSecretEvent)=\"openNewSecretDialog()\"\n        (editSecretEvent)=\"openEditSecret($event)\"\n        (copySecretNameEvent)=\"copySecretName($event)\"\n        (copySecretValueEvent)=\"copySecretValue($event)\"\n        [secrets]=\"view.latestSecrets\"\n      ></sm-secrets-list>\n      <div *ngIf=\"view.allSecrets.length > 0\" class=\"tw-ml-auto tw-mt-4 tw-max-w-max\">\n        {{ \"showingPortionOfTotal\" | i18n : view.latestSecrets.length : view.allSecrets.length }}\n        <a bitLink routerLink=\"secrets\" class=\"tw-ml-2\">{{ \"viewAll\" | i18n }}</a>\n      </div>\n    </sm-section>\n  </div>\n</div>\n\n<ng-template #spinner>\n  <div class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n  </div>\n</ng-template>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  map,\n  Observable,\n  switchMap,\n  Subject,\n  takeUntil,\n  combineLatest,\n  startWith,\n  distinctUntilChanged,\n  take,\n  share,\n} from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\n\nimport { ProjectListView } from \"../models/view/project-list.view\";\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport {\n  ProjectDeleteDialogComponent,\n  ProjectDeleteOperation,\n} from \"../projects/dialog/project-delete-dialog.component\";\nimport {\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../projects/dialog/project-dialog.component\";\nimport { ProjectService } from \"../projects/project.service\";\nimport {\n  SecretDeleteDialogComponent,\n  SecretDeleteOperation,\n} from \"../secrets/dialog/secret-delete.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"../secrets/dialog/secret-dialog.component\";\nimport { SecretService } from \"../secrets/secret.service\";\nimport {\n  ServiceAccountDialogComponent,\n  ServiceAccountOperation,\n} from \"../service-accounts/dialog/service-account-dialog.component\";\nimport { ServiceAccountService } from \"../service-accounts/service-account.service\";\nimport { SecretsListComponent } from \"../shared/secrets-list.component\";\n\ntype Tasks = {\n  [organizationId: string]: OrganizationTasks;\n};\n\ntype OrganizationTasks = {\n  importSecrets: boolean;\n  createSecret: boolean;\n  createProject: boolean;\n  createServiceAccount: boolean;\n};\n\n@Component({\n  selector: \"sm-overview\",\n  templateUrl: \"./overview.component.html\",\n})\nexport class OverviewComponent implements OnInit, OnDestroy {\n  private destroy$: Subject<void> = new Subject<void>();\n  private tableSize = 10;\n  private organizationId: string;\n  protected organizationName: string;\n  protected userIsAdmin: boolean;\n  protected showOnboarding = false;\n  protected loading = true;\n\n  protected view$: Observable<{\n    allProjects: ProjectListView[];\n    allSecrets: SecretListView[];\n    latestProjects: ProjectListView[];\n    latestSecrets: SecretListView[];\n    tasks: OrganizationTasks;\n  }>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private projectService: ProjectService,\n    private secretService: SecretService,\n    private serviceAccountService: ServiceAccountService,\n    private dialogService: DialogServiceAbstraction,\n    private organizationService: OrganizationService,\n    private stateService: StateService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  ngOnInit() {\n    const orgId$ = this.route.params.pipe(\n      map((p) => p.organizationId),\n      distinctUntilChanged()\n    );\n\n    orgId$\n      .pipe(\n        map((orgId) => this.organizationService.get(orgId)),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((org) => {\n        this.organizationId = org.id;\n        this.organizationName = org.name;\n        this.userIsAdmin = org.isAdmin;\n        this.loading = true;\n      });\n\n    const projects$ = combineLatest([\n      orgId$,\n      this.projectService.project$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(([orgId]) => this.projectService.getProjects(orgId)),\n      share()\n    );\n\n    const secrets$ = combineLatest([\n      orgId$,\n      this.secretService.secret$.pipe(startWith(null)),\n      this.projectService.project$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(([orgId]) => this.secretService.getSecrets(orgId)),\n      share()\n    );\n\n    const serviceAccounts$ = combineLatest([\n      orgId$,\n      this.serviceAccountService.serviceAccount$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(([orgId]) => this.serviceAccountService.getServiceAccounts(orgId)),\n      share()\n    );\n\n    this.view$ = orgId$.pipe(\n      switchMap((orgId) =>\n        combineLatest([projects$, secrets$, serviceAccounts$]).pipe(\n          switchMap(async ([projects, secrets, serviceAccounts]) => ({\n            latestProjects: this.getRecentItems(projects, this.tableSize),\n            latestSecrets: this.getRecentItems(secrets, this.tableSize),\n            allProjects: projects,\n            allSecrets: secrets,\n            tasks: await this.saveCompletedTasks(orgId, {\n              importSecrets: secrets.length > 0,\n              createSecret: secrets.length > 0,\n              createProject: projects.length > 0,\n              createServiceAccount: serviceAccounts.length > 0,\n            }),\n          }))\n        )\n      )\n    );\n\n    // Refresh onboarding status when orgId changes by fetching the first value from view$.\n    orgId$\n      .pipe(\n        switchMap(() => this.view$.pipe(take(1))),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((view) => {\n        this.showOnboarding = Object.values(view.tasks).includes(false);\n        this.loading = false;\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private getRecentItems<T extends { revisionDate: string }[]>(items: T, length: number): T {\n    return items\n      .sort((a, b) => {\n        return new Date(b.revisionDate).getTime() - new Date(a.revisionDate).getTime();\n      })\n      .slice(0, length) as T;\n  }\n\n  private async saveCompletedTasks(\n    organizationId: string,\n    orgTasks: OrganizationTasks\n  ): Promise<OrganizationTasks> {\n    const prevTasks = ((await this.stateService.getSMOnboardingTasks()) || {}) as Tasks;\n    const newlyCompletedOrgTasks = Object.fromEntries(\n      Object.entries(orgTasks).filter(([_k, v]) => v === true)\n    );\n    const nextOrgTasks = {\n      importSecrets: false,\n      createSecret: false,\n      createProject: false,\n      createServiceAccount: false,\n      ...prevTasks[organizationId],\n      ...newlyCompletedOrgTasks,\n    };\n    this.stateService.setSMOnboardingTasks({\n      ...prevTasks,\n      [organizationId]: nextOrgTasks,\n    });\n    return nextOrgTasks as OrganizationTasks;\n  }\n\n  // Projects ---\n\n  openEditProject(projectId: string) {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        projectId: projectId,\n      },\n    });\n  }\n\n  openNewProjectDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openServiceAccountDialog() {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openDeleteProjectDialog(event: ProjectListView[]) {\n    this.dialogService.open<unknown, ProjectDeleteOperation>(ProjectDeleteDialogComponent, {\n      data: {\n        projects: event,\n      },\n    });\n  }\n\n  // Secrets ---\n\n  openSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openEditSecret(secretId: string) {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        secretId: secretId,\n      },\n    });\n  }\n\n  openDeleteSecret(event: SecretListView[]) {\n    this.dialogService.open<unknown, SecretDeleteOperation>(SecretDeleteDialogComponent, {\n      data: {\n        secrets: event,\n      },\n    });\n  }\n\n  openNewSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  copySecretName(name: string) {\n    SecretsListComponent.copySecretName(name, this.platformUtilsService, this.i18nService);\n  }\n\n  copySecretValue(id: string) {\n    SecretsListComponent.copySecretValue(\n      id,\n      this.platformUtilsService,\n      this.i18nService,\n      this.secretService\n    );\n  }\n\n  protected hideOnboarding() {\n    this.showOnboarding = false;\n    this.saveCompletedTasks(this.organizationId, {\n      importSecrets: true,\n      createSecret: true,\n      createProject: true,\n      createServiceAccount: true,\n    });\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { OverviewComponent } from \"./overview.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: OverviewComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OverviewRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { OnboardingModule } from \"./onboarding.module\";\nimport { OverviewRoutingModule } from \"./overview-routing.module\";\nimport { OverviewComponent } from \"./overview.component\";\nimport { SectionComponent } from \"./section.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, OverviewRoutingModule, OnboardingModule],\n  declarations: [OverviewComponent, SectionComponent],\n  providers: [],\n})\nexport class OverviewModule {}\n","export class BaseAccessPolicyView {\n  id: string;\n  read: boolean;\n  write: boolean;\n  creationDate: string;\n  revisionDate: string;\n}\n\nexport class UserProjectAccessPolicyView extends BaseAccessPolicyView {\n  organizationUserId: string;\n  organizationUserName: string;\n  grantedProjectId: string;\n  userId: string;\n}\n\nexport class UserServiceAccountAccessPolicyView extends BaseAccessPolicyView {\n  organizationUserId: string;\n  organizationUserName: string;\n  grantedServiceAccountId: string;\n  userId: string;\n}\n\nexport class GroupProjectAccessPolicyView extends BaseAccessPolicyView {\n  groupId: string;\n  groupName: string;\n  grantedProjectId: string;\n  currentUserInGroup: boolean;\n}\n\nexport class GroupServiceAccountAccessPolicyView extends BaseAccessPolicyView {\n  groupId: string;\n  groupName: string;\n  grantedServiceAccountId: string;\n  currentUserInGroup: boolean;\n}\n\nexport class ServiceAccountProjectAccessPolicyView extends BaseAccessPolicyView {\n  serviceAccountId: string;\n  serviceAccountName: string;\n  grantedProjectId: string;\n  grantedProjectName: string;\n}\n\nexport class ProjectAccessPoliciesView {\n  userAccessPolicies: UserProjectAccessPolicyView[];\n  groupAccessPolicies: GroupProjectAccessPolicyView[];\n  serviceAccountAccessPolicies: ServiceAccountProjectAccessPolicyView[];\n}\n\nexport class ServiceAccountAccessPoliciesView {\n  userAccessPolicies: UserServiceAccountAccessPolicyView[];\n  groupAccessPolicies: GroupServiceAccountAccessPolicyView[];\n}\n","export class PotentialGranteeView {\n  id: string;\n  name: string;\n  type: string;\n  email: string;\n}\n","import { AccessPolicyRequest } from \"./access-policy.request\";\n\nexport class AccessPoliciesCreateRequest {\n  userAccessPolicyRequests?: AccessPolicyRequest[];\n  groupAccessPolicyRequests?: AccessPolicyRequest[];\n  serviceAccountAccessPolicyRequests?: AccessPolicyRequest[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class BaseAccessPolicyResponse extends BaseResponse {\n  id: string;\n  read: boolean;\n  write: boolean;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.read = this.getResponseProperty(\"Read\");\n    this.write = this.getResponseProperty(\"Write\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n\nexport class UserProjectAccessPolicyResponse extends BaseAccessPolicyResponse {\n  organizationUserId: string;\n  organizationUserName: string;\n  grantedProjectId: string;\n  userId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.organizationUserId = this.getResponseProperty(\"OrganizationUserId\");\n    this.organizationUserName = this.getResponseProperty(\"OrganizationUserName\");\n    this.grantedProjectId = this.getResponseProperty(\"GrantedProjectId\");\n    this.userId = this.getResponseProperty(\"UserId\");\n  }\n}\n\nexport class UserServiceAccountAccessPolicyResponse extends BaseAccessPolicyResponse {\n  organizationUserId: string;\n  organizationUserName: string;\n  grantedServiceAccountId: string;\n  userId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.organizationUserId = this.getResponseProperty(\"OrganizationUserId\");\n    this.organizationUserName = this.getResponseProperty(\"OrganizationUserName\");\n    this.grantedServiceAccountId = this.getResponseProperty(\"GrantedServiceAccountId\");\n    this.userId = this.getResponseProperty(\"UserId\");\n  }\n}\n\nexport class GroupProjectAccessPolicyResponse extends BaseAccessPolicyResponse {\n  groupId: string;\n  groupName: string;\n  grantedProjectId: string;\n  currentUserInGroup: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.groupId = this.getResponseProperty(\"GroupId\");\n    this.groupName = this.getResponseProperty(\"GroupName\");\n    this.grantedProjectId = this.getResponseProperty(\"GrantedProjectId\");\n    this.currentUserInGroup = this.getResponseProperty(\"CurrentUserInGroup\");\n  }\n}\n\nexport class GroupServiceAccountAccessPolicyResponse extends BaseAccessPolicyResponse {\n  groupId: string;\n  groupName: string;\n  grantedServiceAccountId: string;\n  currentUserInGroup: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.groupId = this.getResponseProperty(\"GroupId\");\n    this.groupName = this.getResponseProperty(\"GroupName\");\n    this.grantedServiceAccountId = this.getResponseProperty(\"GrantedServiceAccountId\");\n    this.currentUserInGroup = this.getResponseProperty(\"CurrentUserInGroup\");\n  }\n}\n\nexport class ServiceAccountProjectAccessPolicyResponse extends BaseAccessPolicyResponse {\n  serviceAccountId: string;\n  serviceAccountName: string;\n  grantedProjectId: string;\n  grantedProjectName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.serviceAccountId = this.getResponseProperty(\"ServiceAccountId\");\n    this.serviceAccountName = this.getResponseProperty(\"ServiceAccountName\");\n    this.grantedProjectId = this.getResponseProperty(\"GrantedProjectId\");\n    this.grantedProjectName = this.getResponseProperty(\"GrantedProjectName\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport {\n  GroupProjectAccessPolicyResponse,\n  ServiceAccountProjectAccessPolicyResponse,\n  UserProjectAccessPolicyResponse,\n} from \"./access-policy.response\";\n\nexport class ProjectAccessPoliciesResponse extends BaseResponse {\n  userAccessPolicies: UserProjectAccessPolicyResponse[];\n  groupAccessPolicies: GroupProjectAccessPolicyResponse[];\n  serviceAccountAccessPolicies: ServiceAccountProjectAccessPolicyResponse[];\n\n  constructor(response: any) {\n    super(response);\n    const userAccessPolicies = this.getResponseProperty(\"UserAccessPolicies\");\n    this.userAccessPolicies = userAccessPolicies.map(\n      (k: any) => new UserProjectAccessPolicyResponse(k)\n    );\n    const groupAccessPolicies = this.getResponseProperty(\"GroupAccessPolicies\");\n    this.groupAccessPolicies = groupAccessPolicies.map(\n      (k: any) => new GroupProjectAccessPolicyResponse(k)\n    );\n    const serviceAccountAccessPolicies = this.getResponseProperty(\"ServiceAccountAccessPolicies\");\n    this.serviceAccountAccessPolicies = serviceAccountAccessPolicies.map(\n      (k: any) => new ServiceAccountProjectAccessPolicyResponse(k)\n    );\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport {\n  GroupServiceAccountAccessPolicyResponse,\n  UserServiceAccountAccessPolicyResponse,\n} from \"./access-policy.response\";\n\nexport class ServiceAccountAccessPoliciesResponse extends BaseResponse {\n  userAccessPolicies: UserServiceAccountAccessPolicyResponse[];\n  groupAccessPolicies: GroupServiceAccountAccessPolicyResponse[];\n\n  constructor(response: any) {\n    super(response);\n    const userAccessPolicies = this.getResponseProperty(\"UserAccessPolicies\");\n    this.userAccessPolicies = userAccessPolicies.map(\n      (k: any) => new UserServiceAccountAccessPolicyResponse(k)\n    );\n    const groupAccessPolicies = this.getResponseProperty(\"GroupAccessPolicies\");\n    this.groupAccessPolicies = groupAccessPolicies.map(\n      (k: any) => new GroupServiceAccountAccessPolicyResponse(k)\n    );\n  }\n}\n","export class AccessPolicyUpdateRequest {\n  read: boolean;\n  write: boolean;\n}\n","export class AccessPolicyRequest {\n  granteeId: string;\n  read: boolean;\n  write: boolean;\n}\n","export class GrantedPolicyRequest {\n  grantedId: string;\n  read: boolean;\n  write: boolean;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class PotentialGranteeResponse extends BaseResponse {\n  id: string;\n  name: string;\n  type: string;\n  email: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\n\nimport {\n  BaseAccessPolicyView,\n  GroupProjectAccessPolicyView,\n  GroupServiceAccountAccessPolicyView,\n  ProjectAccessPoliciesView,\n  ServiceAccountAccessPoliciesView,\n  ServiceAccountProjectAccessPolicyView,\n  UserProjectAccessPolicyView,\n  UserServiceAccountAccessPolicyView,\n} from \"../../models/view/access-policy.view\";\nimport { PotentialGranteeView } from \"../../models/view/potential-grantee.view\";\nimport { AccessPoliciesCreateRequest } from \"../../shared/access-policies/models/requests/access-policies-create.request\";\nimport { ProjectAccessPoliciesResponse } from \"../../shared/access-policies/models/responses/project-access-policies.response\";\nimport { ServiceAccountAccessPoliciesResponse } from \"../../shared/access-policies/models/responses/service-accounts-access-policies.response\";\n\nimport { AccessSelectorRowView } from \"./access-selector.component\";\nimport { AccessPolicyUpdateRequest } from \"./models/requests/access-policy-update.request\";\nimport { AccessPolicyRequest } from \"./models/requests/access-policy.request\";\nimport { GrantedPolicyRequest } from \"./models/requests/granted-policy.request\";\nimport {\n  GroupServiceAccountAccessPolicyResponse,\n  UserServiceAccountAccessPolicyResponse,\n  GroupProjectAccessPolicyResponse,\n  ServiceAccountProjectAccessPolicyResponse,\n  UserProjectAccessPolicyResponse,\n} from \"./models/responses/access-policy.response\";\nimport { PotentialGranteeResponse } from \"./models/responses/potential-grantee.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AccessPolicyService {\n  private _projectAccessPolicyChanges$ = new Subject<ProjectAccessPoliciesView>();\n  private _serviceAccountAccessPolicyChanges$ = new Subject<ServiceAccountAccessPoliciesView>();\n  private _serviceAccountGrantedPolicyChanges$ = new Subject<\n    ServiceAccountProjectAccessPolicyView[]\n  >();\n\n  /**\n   * Emits when a project access policy is created or deleted.\n   */\n  readonly projectAccessPolicyChanges$ = this._projectAccessPolicyChanges$.asObservable();\n\n  /**\n   * Emits when a service account access policy is created or deleted.\n   */\n  readonly serviceAccountAccessPolicyChanges$ =\n    this._serviceAccountAccessPolicyChanges$.asObservable();\n\n  /**\n   * Emits when a service account granted policy is created or deleted.\n   */\n  readonly serviceAccountGrantedPolicyChanges$ =\n    this._serviceAccountGrantedPolicyChanges$.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private organizationService: OrganizationService,\n    protected apiService: ApiService,\n    protected encryptService: EncryptService\n  ) {}\n\n  refreshProjectAccessPolicyChanges() {\n    this._projectAccessPolicyChanges$.next(null);\n  }\n\n  refreshServiceAccountAccessPolicyChanges() {\n    this._serviceAccountAccessPolicyChanges$.next(null);\n  }\n\n  async getGrantedPolicies(\n    serviceAccountId: string,\n    organizationId: string\n  ): Promise<ServiceAccountProjectAccessPolicyView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId + \"/granted-policies\",\n      null,\n      true,\n      true\n    );\n\n    const results = new ListResponse(r, ServiceAccountProjectAccessPolicyResponse);\n    return await this.createServiceAccountProjectAccessPolicyViews(results.data, organizationId);\n  }\n\n  async createGrantedPolicies(\n    organizationId: string,\n    serviceAccountId: string,\n    policies: ServiceAccountProjectAccessPolicyView[]\n  ): Promise<ServiceAccountProjectAccessPolicyView[]> {\n    const request = this.getGrantedPoliciesCreateRequest(policies);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/service-accounts/\" + serviceAccountId + \"/granted-policies\",\n      request,\n      true,\n      true\n    );\n    const results = new ListResponse(r, ServiceAccountProjectAccessPolicyResponse);\n    const views = await this.createServiceAccountProjectAccessPolicyViews(\n      results.data,\n      organizationId\n    );\n    this._serviceAccountGrantedPolicyChanges$.next(views);\n    return views;\n  }\n\n  async getProjectAccessPolicies(\n    organizationId: string,\n    projectId: string\n  ): Promise<ProjectAccessPoliciesView> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/projects/\" + projectId + \"/access-policies\",\n      null,\n      true,\n      true\n    );\n\n    const results = new ProjectAccessPoliciesResponse(r);\n    return await this.createProjectAccessPoliciesView(organizationId, results);\n  }\n\n  async getServiceAccountAccessPolicies(\n    serviceAccountId: string\n  ): Promise<ServiceAccountAccessPoliciesView> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-policies\",\n      null,\n      true,\n      true\n    );\n\n    const results = new ServiceAccountAccessPoliciesResponse(r);\n    return await this.createServiceAccountAccessPoliciesView(results);\n  }\n\n  async createProjectAccessPolicies(\n    organizationId: string,\n    projectId: string,\n    projectAccessPoliciesView: ProjectAccessPoliciesView\n  ): Promise<ProjectAccessPoliciesView> {\n    const request = this.getAccessPoliciesCreateRequest(projectAccessPoliciesView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/projects/\" + projectId + \"/access-policies\",\n      request,\n      true,\n      true\n    );\n    const results = new ProjectAccessPoliciesResponse(r);\n    const view = await this.createProjectAccessPoliciesView(organizationId, results);\n    this._projectAccessPolicyChanges$.next(view);\n    return view;\n  }\n\n  async createServiceAccountAccessPolicies(\n    serviceAccountId: string,\n    serviceAccountAccessPoliciesView: ServiceAccountAccessPoliciesView\n  ): Promise<ServiceAccountAccessPoliciesView> {\n    const request = this.getServiceAccountAccessPoliciesCreateRequest(\n      serviceAccountAccessPoliciesView\n    );\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-policies\",\n      request,\n      true,\n      true\n    );\n    const results = new ServiceAccountAccessPoliciesResponse(r);\n    const view = await this.createServiceAccountAccessPoliciesView(results);\n    this._serviceAccountAccessPolicyChanges$.next(view);\n    return view;\n  }\n\n  async deleteAccessPolicy(accessPolicyId: string): Promise<void> {\n    await this.apiService.send(\"DELETE\", \"/access-policies/\" + accessPolicyId, null, true, false);\n    this._projectAccessPolicyChanges$.next(null);\n    this._serviceAccountAccessPolicyChanges$.next(null);\n    this._serviceAccountGrantedPolicyChanges$.next(null);\n  }\n\n  async updateAccessPolicy(baseAccessPolicyView: BaseAccessPolicyView): Promise<void> {\n    const payload = new AccessPolicyUpdateRequest();\n    payload.read = baseAccessPolicyView.read;\n    payload.write = baseAccessPolicyView.write;\n    await this.apiService.send(\n      \"PUT\",\n      \"/access-policies/\" + baseAccessPolicyView.id,\n      payload,\n      true,\n      true\n    );\n  }\n\n  async needToShowAccessRemovalWarning(\n    organizationId: string,\n    policy: AccessSelectorRowView,\n    currentPolicies: AccessSelectorRowView[]\n  ): Promise<boolean> {\n    const organization = this.organizationService.get(organizationId);\n    if (organization.isOwner || organization.isAdmin) {\n      return false;\n    }\n    const currentUserId = organization.userId;\n    const readWriteGroupPolicies = currentPolicies\n      .filter((x) => x.accessPolicyId != policy.accessPolicyId)\n      .filter((x) => x.currentUserInGroup && x.read && x.write).length;\n    const readWriteUserPolicies = currentPolicies\n      .filter((x) => x.accessPolicyId != policy.accessPolicyId)\n      .filter((x) => x.userId == currentUserId && x.read && x.write).length;\n\n    if (policy.type === \"user\" && policy.userId == currentUserId && readWriteGroupPolicies == 0) {\n      return true;\n    } else if (\n      policy.type === \"group\" &&\n      policy.currentUserInGroup &&\n      readWriteUserPolicies == 0 &&\n      readWriteGroupPolicies == 0\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  private async createProjectAccessPoliciesView(\n    organizationId: string,\n    projectAccessPoliciesResponse: ProjectAccessPoliciesResponse\n  ): Promise<ProjectAccessPoliciesView> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const view = new ProjectAccessPoliciesView();\n\n    view.userAccessPolicies = projectAccessPoliciesResponse.userAccessPolicies.map((ap) => {\n      return this.createUserProjectAccessPolicyView(ap);\n    });\n    view.groupAccessPolicies = projectAccessPoliciesResponse.groupAccessPolicies.map((ap) => {\n      return this.createGroupProjectAccessPolicyView(ap);\n    });\n    view.serviceAccountAccessPolicies = await Promise.all(\n      projectAccessPoliciesResponse.serviceAccountAccessPolicies.map(async (ap) => {\n        return await this.createServiceAccountProjectAccessPolicyView(orgKey, ap);\n      })\n    );\n    return view;\n  }\n\n  private getAccessPoliciesCreateRequest(\n    projectAccessPoliciesView: ProjectAccessPoliciesView\n  ): AccessPoliciesCreateRequest {\n    const createRequest = new AccessPoliciesCreateRequest();\n\n    if (projectAccessPoliciesView.userAccessPolicies?.length > 0) {\n      createRequest.userAccessPolicyRequests = projectAccessPoliciesView.userAccessPolicies.map(\n        (ap) => {\n          return this.getAccessPolicyRequest(ap.organizationUserId, ap);\n        }\n      );\n    }\n\n    if (projectAccessPoliciesView.groupAccessPolicies?.length > 0) {\n      createRequest.groupAccessPolicyRequests = projectAccessPoliciesView.groupAccessPolicies.map(\n        (ap) => {\n          return this.getAccessPolicyRequest(ap.groupId, ap);\n        }\n      );\n    }\n\n    if (projectAccessPoliciesView.serviceAccountAccessPolicies?.length > 0) {\n      createRequest.serviceAccountAccessPolicyRequests =\n        projectAccessPoliciesView.serviceAccountAccessPolicies.map((ap) => {\n          return this.getAccessPolicyRequest(ap.serviceAccountId, ap);\n        });\n    }\n    return createRequest;\n  }\n\n  private createUserProjectAccessPolicyView(\n    response: UserProjectAccessPolicyResponse\n  ): UserProjectAccessPolicyView {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedProjectId: response.grantedProjectId,\n      organizationUserId: response.organizationUserId,\n      organizationUserName: response.organizationUserName,\n      userId: response.userId,\n    };\n  }\n\n  private createGroupProjectAccessPolicyView(\n    response: GroupProjectAccessPolicyResponse\n  ): GroupProjectAccessPolicyView {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedProjectId: response.grantedProjectId,\n      groupId: response.groupId,\n      groupName: response.groupName,\n      currentUserInGroup: response.currentUserInGroup,\n    };\n  }\n\n  private async createServiceAccountProjectAccessPolicyView(\n    organizationKey: SymmetricCryptoKey,\n    response: ServiceAccountProjectAccessPolicyResponse\n  ): Promise<ServiceAccountProjectAccessPolicyView> {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedProjectId: response.grantedProjectId,\n      serviceAccountId: response.serviceAccountId,\n      grantedProjectName: response.grantedProjectName\n        ? await this.encryptService.decryptToUtf8(\n            new EncString(response.grantedProjectName),\n            organizationKey\n          )\n        : null,\n      serviceAccountName: await this.encryptService.decryptToUtf8(\n        new EncString(response.serviceAccountName),\n        organizationKey\n      ),\n    };\n  }\n\n  private getServiceAccountAccessPoliciesCreateRequest(\n    serviceAccountAccessPoliciesView: ServiceAccountAccessPoliciesView\n  ): AccessPoliciesCreateRequest {\n    const createRequest = new AccessPoliciesCreateRequest();\n\n    if (serviceAccountAccessPoliciesView.userAccessPolicies?.length > 0) {\n      createRequest.userAccessPolicyRequests =\n        serviceAccountAccessPoliciesView.userAccessPolicies.map((ap) => {\n          return this.getAccessPolicyRequest(ap.organizationUserId, ap);\n        });\n    }\n\n    if (serviceAccountAccessPoliciesView.groupAccessPolicies?.length > 0) {\n      createRequest.groupAccessPolicyRequests =\n        serviceAccountAccessPoliciesView.groupAccessPolicies.map((ap) => {\n          return this.getAccessPolicyRequest(ap.groupId, ap);\n        });\n    }\n\n    return createRequest;\n  }\n\n  private async createServiceAccountAccessPoliciesView(\n    serviceAccountAccessPoliciesResponse: ServiceAccountAccessPoliciesResponse\n  ): Promise<ServiceAccountAccessPoliciesView> {\n    const view = new ServiceAccountAccessPoliciesView();\n    view.userAccessPolicies = serviceAccountAccessPoliciesResponse.userAccessPolicies.map((ap) => {\n      return this.createUserServiceAccountAccessPolicyView(ap);\n    });\n    view.groupAccessPolicies = serviceAccountAccessPoliciesResponse.groupAccessPolicies.map(\n      (ap) => {\n        return this.createGroupServiceAccountAccessPolicyView(ap);\n      }\n    );\n    return view;\n  }\n\n  private createUserServiceAccountAccessPolicyView(\n    response: UserServiceAccountAccessPolicyResponse\n  ): UserServiceAccountAccessPolicyView {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedServiceAccountId: response.grantedServiceAccountId,\n      organizationUserId: response.organizationUserId,\n      organizationUserName: response.organizationUserName,\n      userId: response.userId,\n    };\n  }\n\n  private createGroupServiceAccountAccessPolicyView(\n    response: GroupServiceAccountAccessPolicyResponse\n  ): GroupServiceAccountAccessPolicyView {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedServiceAccountId: response.grantedServiceAccountId,\n      groupId: response.groupId,\n      groupName: response.groupName,\n      currentUserInGroup: response.currentUserInGroup,\n    };\n  }\n\n  async getPeoplePotentialGrantees(organizationId: string) {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/access-policies/people/potential-grantees\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, PotentialGranteeResponse);\n    return await this.createPotentialGranteeViews(organizationId, results.data);\n  }\n\n  async getServiceAccountsPotentialGrantees(organizationId: string) {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/access-policies/service-accounts/potential-grantees\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, PotentialGranteeResponse);\n    return await this.createPotentialGranteeViews(organizationId, results.data);\n  }\n\n  async getProjectsPotentialGrantees(organizationId: string) {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/access-policies/projects/potential-grantees\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, PotentialGranteeResponse);\n    return await this.createPotentialGranteeViews(organizationId, results.data);\n  }\n\n  protected async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  protected getAccessPolicyRequest(\n    granteeId: string,\n    view:\n      | UserProjectAccessPolicyView\n      | UserServiceAccountAccessPolicyView\n      | GroupProjectAccessPolicyView\n      | GroupServiceAccountAccessPolicyView\n      | ServiceAccountProjectAccessPolicyView\n  ) {\n    const request = new AccessPolicyRequest();\n    request.granteeId = granteeId;\n    request.read = view.read;\n    request.write = view.write;\n    return request;\n  }\n\n  protected createBaseAccessPolicyView(\n    response:\n      | UserProjectAccessPolicyResponse\n      | UserServiceAccountAccessPolicyResponse\n      | GroupProjectAccessPolicyResponse\n      | GroupServiceAccountAccessPolicyResponse\n      | ServiceAccountProjectAccessPolicyResponse\n  ) {\n    return {\n      id: response.id,\n      read: response.read,\n      write: response.write,\n      creationDate: response.creationDate,\n      revisionDate: response.revisionDate,\n    };\n  }\n\n  private async createPotentialGranteeViews(\n    organizationId: string,\n    results: PotentialGranteeResponse[]\n  ): Promise<PotentialGranteeView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      results.map(async (r) => {\n        const view = new PotentialGranteeView();\n        view.id = r.id;\n        view.type = r.type;\n        view.email = r.email;\n\n        if (r.type === \"serviceAccount\" || r.type === \"project\") {\n          view.name = await this.encryptService.decryptToUtf8(new EncString(r.name), orgKey);\n        } else {\n          view.name = r.name;\n        }\n        return view;\n      })\n    );\n  }\n\n  private getGrantedPoliciesCreateRequest(\n    policies: ServiceAccountProjectAccessPolicyView[]\n  ): GrantedPolicyRequest[] {\n    return policies.map((ap) => {\n      const request = new GrantedPolicyRequest();\n      request.grantedId = ap.grantedProjectId;\n      request.read = ap.read;\n      request.write = ap.write;\n      return request;\n    });\n  }\n\n  private async createServiceAccountProjectAccessPolicyViews(\n    responses: ServiceAccountProjectAccessPolicyResponse[],\n    organizationId: string\n  ): Promise<ServiceAccountProjectAccessPolicyView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      responses.map(async (response: ServiceAccountProjectAccessPolicyResponse) => {\n        const view = new ServiceAccountProjectAccessPolicyView();\n        view.id = response.id;\n        view.read = response.read;\n        view.write = response.write;\n        view.creationDate = response.creationDate;\n        view.revisionDate = response.revisionDate;\n        view.serviceAccountId = response.serviceAccountId;\n        view.grantedProjectId = response.grantedProjectId;\n        view.serviceAccountName = response.serviceAccountName\n          ? await this.encryptService.decryptToUtf8(\n              new EncString(response.serviceAccountName),\n              orgKey\n            )\n          : null;\n        view.grantedProjectName = response.grantedProjectName\n          ? await this.encryptService.decryptToUtf8(\n              new EncString(response.grantedProjectName),\n              orgKey\n            )\n          : null;\n        return view;\n      })\n    );\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\" class=\"tw-mt-5\">\n  <bit-form-field>\n    <bit-label>{{ label }}</bit-label>\n    <bit-multi-select\n      class=\"tw-mr-4 tw-w-full\"\n      formControlName=\"multiSelect\"\n      [baseItems]=\"selectItems$ | async\"\n      [loading]=\"loading\"\n    ></bit-multi-select>\n    <bit-hint>{{ hint }}</bit-hint>\n    <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n      {{ \"add\" | i18n }}\n    </button>\n  </bit-form-field>\n</form>\n\n<ng-container>\n  <bit-table *ngIf=\"rows$ | async as rows; else spinner\">\n    <ng-container header>\n      <tr>\n        <th bitCell colspan=\"2\">{{ columnTitle }}</th>\n        <th bitCell>{{ \"permissions\" | i18n }}</th>\n      </tr>\n    </ng-container>\n\n    <ng-template body>\n      <ng-container *ngIf=\"rows.length > 0; else empty\">\n        <tr bitRow *ngFor=\"let row of rows\">\n          <td bitCell class=\"tw-w-0 tw-pr-0\">\n            <i class=\"bwi {{ row.icon }} tw-text-muted\" aria-hidden=\"true\"></i>\n          </td>\n          <td bitCell class=\"tw-max-w-sm tw-truncate\">{{ row.name }}</td>\n          <td bitCell>\n            <bit-form-field\n              *ngIf=\"!row.static; else staticPermissions\"\n              class=\"tw-mb-auto tw-inline-block tw-w-auto\"\n            >\n              <select bitInput (change)=\"update($event.target, row)\" [disabled]=\"row.static\">\n                <option value=\"canRead\" [selected]=\"row.read && row.write != true\">\n                  {{ \"canRead\" | i18n }}\n                </option>\n                <option value=\"canReadWrite\" [selected]=\"row.read && row.write\">\n                  {{ \"canReadWrite\" | i18n }}\n                </option>\n              </select>\n            </bit-form-field>\n            <ng-template #staticPermissions>\n              <span *ngIf=\"row.read && row.write != true\">{{ \"canRead\" | i18n }}</span>\n              <span *ngIf=\"row.read != true && row.write\">{{ \"canWrite\" | i18n }}</span>\n              <span *ngIf=\"row.read && row.write\">{{ \"canReadWrite\" | i18n }}</span>\n            </ng-template>\n          </td>\n          <td bitCell class=\"tw-w-0\">\n            <button\n              type=\"button\"\n              bitIconButton=\"bwi-close\"\n              buttonType=\"main\"\n              size=\"default\"\n              [attr.title]=\"'remove' | i18n\"\n              [attr.aria-label]=\"'remove' | i18n\"\n              [bitAction]=\"delete(row)\"\n            ></button>\n          </td>\n        </tr>\n      </ng-container>\n    </ng-template>\n  </bit-table>\n</ng-container>\n\n<ng-template #empty>\n  <div class=\"tw-mt-4 tw-text-center\">\n    {{ emptyMessage }}\n  </div>\n</ng-template>\n\n<ng-template #spinner>\n  <div class=\"tw-items-center tw-justify-center tw-pt-10 tw-text-center\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n  </div>\n</ng-template>\n","import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  combineLatest,\n  firstValueFrom,\n  map,\n  Observable,\n  share,\n  Subject,\n  switchMap,\n  tap,\n} from \"rxjs\";\n\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { SelectItemView } from \"@bitwarden/components/src/multi-select/models/select-item-view\";\n\nimport { BaseAccessPolicyView } from \"../../models/view/access-policy.view\";\n\nimport { AccessPolicyService } from \"./access-policy.service\";\n\nexport type AccessSelectorRowView = {\n  type: \"user\" | \"group\" | \"serviceAccount\" | \"project\";\n  name: string;\n  id: string;\n  accessPolicyId: string;\n  read: boolean;\n  write: boolean;\n  icon: string;\n  userId?: string;\n  currentUserInGroup?: boolean;\n  static?: boolean;\n};\n\n@Component({\n  selector: \"sm-access-selector\",\n  templateUrl: \"./access-selector.component.html\",\n})\nexport class AccessSelectorComponent implements OnInit {\n  static readonly userIcon = \"bwi-user\";\n  static readonly groupIcon = \"bwi-family\";\n  static readonly serviceAccountIcon = \"bwi-wrench\";\n  static readonly projectIcon = \"bwi-collection\";\n\n  /**\n   * Emits the selected items on submit.\n   */\n  @Output() onCreateAccessPolicies = new EventEmitter<SelectItemView[]>();\n  @Output() onDeleteAccessPolicy = new EventEmitter<AccessSelectorRowView>();\n  @Output() onUpdateAccessPolicy = new EventEmitter<AccessSelectorRowView>();\n\n  @Input() label: string;\n  @Input() hint: string;\n  @Input() columnTitle: string;\n  @Input() emptyMessage: string;\n  @Input() granteeType: \"people\" | \"serviceAccounts\" | \"projects\";\n\n  protected rows$ = new Subject<AccessSelectorRowView[]>();\n  @Input() private set rows(value: AccessSelectorRowView[]) {\n    const sorted = value.sort((a, b) => {\n      if (a.icon == b.icon) {\n        return a.name.localeCompare(b.name);\n      }\n      if (a.icon == AccessSelectorComponent.userIcon) {\n        return -1;\n      }\n      return 1;\n    });\n    this.rows$.next(sorted);\n  }\n\n  private maxLength = 15;\n  protected formGroup = new FormGroup({\n    multiSelect: new FormControl([], [Validators.required, Validators.maxLength(this.maxLength)]),\n  });\n  protected loading = true;\n\n  protected selectItems$: Observable<SelectItemView[]> = combineLatest([\n    this.rows$,\n    this.route.params,\n  ]).pipe(\n    switchMap(([rows, params]) =>\n      this.getPotentialGrantees(params.organizationId).then((grantees) =>\n        grantees\n          .filter((g) => !rows.some((row) => row.id === g.id))\n          .map((granteeView) => {\n            let icon: string;\n            let listName = granteeView.name;\n            let labelName = granteeView.name;\n            if (granteeView.type === \"user\") {\n              icon = AccessSelectorComponent.userIcon;\n              if (Utils.isNullOrWhitespace(granteeView.name)) {\n                listName = granteeView.email;\n                labelName = granteeView.email;\n              } else {\n                listName = `${granteeView.name} (${granteeView.email})`;\n              }\n            } else if (granteeView.type === \"group\") {\n              icon = AccessSelectorComponent.groupIcon;\n            } else if (granteeView.type === \"serviceAccount\") {\n              icon = AccessSelectorComponent.serviceAccountIcon;\n            } else if (granteeView.type === \"project\") {\n              icon = AccessSelectorComponent.projectIcon;\n            }\n            return {\n              icon: icon,\n              id: granteeView.id,\n              labelName: labelName,\n              listName: listName,\n            };\n          })\n      )\n    ),\n    map((selectItems) => selectItems.sort((a, b) => a.listName.localeCompare(b.listName))),\n    tap(() => {\n      this.loading = false;\n      this.formGroup.reset();\n      this.formGroup.enable();\n    }),\n    share()\n  );\n\n  constructor(private accessPolicyService: AccessPolicyService, private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.formGroup.disable();\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n    if (this.formGroup.invalid) {\n      return;\n    }\n    this.formGroup.disable();\n    this.loading = true;\n\n    this.onCreateAccessPolicies.emit(this.formGroup.value.multiSelect);\n\n    return firstValueFrom(this.selectItems$);\n  };\n\n  async update(target: any, row: AccessSelectorRowView): Promise<void> {\n    if (target.value === \"canRead\") {\n      row.read = true;\n      row.write = false;\n    } else if (target.value === \"canReadWrite\") {\n      row.read = true;\n      row.write = true;\n    }\n    this.onUpdateAccessPolicy.emit(row);\n  }\n\n  delete = (row: AccessSelectorRowView) => async () => {\n    this.loading = true;\n    this.formGroup.disable();\n    this.onDeleteAccessPolicy.emit(row);\n    return firstValueFrom(this.selectItems$);\n  };\n\n  private getPotentialGrantees(organizationId: string) {\n    switch (this.granteeType) {\n      case \"people\":\n        return this.accessPolicyService.getPeoplePotentialGrantees(organizationId);\n      case \"serviceAccounts\":\n        return this.accessPolicyService.getServiceAccountsPotentialGrantees(organizationId);\n      case \"projects\":\n        return this.accessPolicyService.getProjectsPotentialGrantees(organizationId);\n    }\n  }\n\n  static getAccessItemType(item: SelectItemView) {\n    switch (item.icon) {\n      case AccessSelectorComponent.userIcon:\n        return \"user\";\n      case AccessSelectorComponent.groupIcon:\n        return \"group\";\n      case AccessSelectorComponent.serviceAccountIcon:\n        return \"serviceAccount\";\n      case AccessSelectorComponent.projectIcon:\n        return \"project\";\n    }\n  }\n\n  static getBaseAccessPolicyView(row: AccessSelectorRowView) {\n    const view = new BaseAccessPolicyView();\n    view.id = row.accessPolicyId;\n    view.read = row.read;\n    view.write = row.write;\n    return view;\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\n\nimport { AccessPolicyService } from \"../access-policy.service\";\nimport { AccessSelectorComponent, AccessSelectorRowView } from \"../access-selector.component\";\n\nexport interface AccessRemovalDetails {\n  title: string;\n  message: string;\n  operation: \"update\" | \"delete\";\n  type: \"project\" | \"service-account\";\n  returnRoute: string[];\n  policy: AccessSelectorRowView;\n}\n\n@Component({\n  templateUrl: \"./access-removal-dialog.component.html\",\n})\nexport class AccessRemovalDialogComponent implements OnInit {\n  constructor(\n    public dialogRef: DialogRef,\n    private router: Router,\n    private accessPolicyService: AccessPolicyService,\n    @Inject(DIALOG_DATA) public data: AccessRemovalDetails\n  ) {}\n\n  ngOnInit(): void {\n    // TODO remove null checks once strictNullChecks in TypeScript is turned on.\n    if (\n      !this.data.message ||\n      !this.data.title ||\n      !this.data.operation ||\n      !this.data.returnRoute ||\n      !this.data.policy\n    ) {\n      this.dialogRef.close();\n      throw new Error(\n        \"The access removal dialog was not called with the appropriate operation values.\"\n      );\n    }\n  }\n\n  removeAccess = async () => {\n    await this.router.navigate(this.data.returnRoute);\n    if (this.data.operation === \"delete\") {\n      await this.accessPolicyService.deleteAccessPolicy(this.data.policy.accessPolicyId);\n    } else if (this.data.operation == \"update\") {\n      await this.accessPolicyService.updateAccessPolicy(\n        AccessSelectorComponent.getBaseAccessPolicyView(this.data.policy)\n      );\n      this.refreshPolicyChanges();\n    }\n    this.dialogRef.close();\n  };\n\n  cancel = () => {\n    this.refreshPolicyChanges();\n    this.dialogRef.close();\n  };\n\n  private refreshPolicyChanges() {\n    if (this.data.type == \"project\") {\n      this.accessPolicyService.refreshProjectAccessPolicyChanges();\n    } else if (this.data.type == \"service-account\") {\n      this.accessPolicyService.refreshServiceAccountAccessPolicyChanges();\n    }\n  }\n}\n","<bit-simple-dialog>\n  <span bitDialogTitle>{{ data.title | i18n }}</span>\n  <span bitDialogContent>\n    {{ data.message | i18n }}\n  </span>\n  <ng-container bitDialogFooter>\n    <button type=\"button\" bitButton buttonType=\"danger\" [bitAction]=\"removeAccess\">\n      {{ \"removeAccess\" | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" [bitAction]=\"cancel\">\n      {{ \"cancel\" | i18n }}\n    </button>\n  </ng-container>\n</bit-simple-dialog>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { map, Observable, share, startWith, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { ValidationService } from \"@bitwarden/common/platform/abstractions/validation.service\";\nimport { SelectItemView } from \"@bitwarden/components\";\n\nimport {\n  GroupProjectAccessPolicyView,\n  ProjectAccessPoliciesView,\n  UserProjectAccessPolicyView,\n} from \"../../models/view/access-policy.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  AccessSelectorComponent,\n  AccessSelectorRowView,\n} from \"../../shared/access-policies/access-selector.component\";\nimport {\n  AccessRemovalDetails,\n  AccessRemovalDialogComponent,\n} from \"../../shared/access-policies/dialogs/access-removal-dialog.component\";\n\n@Component({\n  selector: \"sm-project-people\",\n  templateUrl: \"./project-people.component.html\",\n})\nexport class ProjectPeopleComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private organizationId: string;\n  private projectId: string;\n  private rows: AccessSelectorRowView[];\n\n  protected rows$: Observable<AccessSelectorRowView[]> =\n    this.accessPolicyService.projectAccessPolicyChanges$.pipe(\n      startWith(null),\n      switchMap(() =>\n        this.accessPolicyService.getProjectAccessPolicies(this.organizationId, this.projectId)\n      ),\n      map((policies) => {\n        const rows: AccessSelectorRowView[] = [];\n        policies.userAccessPolicies.forEach((policy) => {\n          rows.push({\n            type: \"user\",\n            name: policy.organizationUserName,\n            id: policy.organizationUserId,\n            accessPolicyId: policy.id,\n            read: policy.read,\n            write: policy.write,\n            userId: policy.userId,\n            icon: AccessSelectorComponent.userIcon,\n          });\n        });\n\n        policies.groupAccessPolicies.forEach((policy) => {\n          rows.push({\n            type: \"group\",\n            name: policy.groupName,\n            id: policy.groupId,\n            accessPolicyId: policy.id,\n            read: policy.read,\n            write: policy.write,\n            currentUserInGroup: policy.currentUserInGroup,\n            icon: AccessSelectorComponent.groupIcon,\n          });\n        });\n        return rows;\n      }),\n      share()\n    );\n\n  protected handleCreateAccessPolicies(selected: SelectItemView[]) {\n    const projectAccessPoliciesView = new ProjectAccessPoliciesView();\n    projectAccessPoliciesView.userAccessPolicies = selected\n      .filter((selection) => AccessSelectorComponent.getAccessItemType(selection) === \"user\")\n      .map((filtered) => {\n        const view = new UserProjectAccessPolicyView();\n        view.grantedProjectId = this.projectId;\n        view.organizationUserId = filtered.id;\n        view.read = true;\n        view.write = false;\n        return view;\n      });\n\n    projectAccessPoliciesView.groupAccessPolicies = selected\n      .filter((selection) => AccessSelectorComponent.getAccessItemType(selection) === \"group\")\n      .map((filtered) => {\n        const view = new GroupProjectAccessPolicyView();\n        view.grantedProjectId = this.projectId;\n        view.groupId = filtered.id;\n        view.read = true;\n        view.write = false;\n        return view;\n      });\n\n    return this.accessPolicyService.createProjectAccessPolicies(\n      this.organizationId,\n      this.projectId,\n      projectAccessPoliciesView\n    );\n  }\n\n  protected async handleDeleteAccessPolicy(policy: AccessSelectorRowView) {\n    if (\n      await this.accessPolicyService.needToShowAccessRemovalWarning(\n        this.organizationId,\n        policy,\n        this.rows\n      )\n    ) {\n      this.launchDeleteWarningDialog(policy);\n      return;\n    }\n\n    try {\n      await this.accessPolicyService.deleteAccessPolicy(policy.accessPolicyId);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  protected async handleUpdateAccessPolicy(policy: AccessSelectorRowView) {\n    if (\n      policy.read === true &&\n      policy.write === false &&\n      (await this.accessPolicyService.needToShowAccessRemovalWarning(\n        this.organizationId,\n        policy,\n        this.rows\n      ))\n    ) {\n      this.launchUpdateWarningDialog(policy);\n      return;\n    }\n\n    try {\n      return await this.accessPolicyService.updateAccessPolicy(\n        AccessSelectorComponent.getBaseAccessPolicyView(policy)\n      );\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private dialogService: DialogServiceAbstraction,\n    private validationService: ValidationService,\n    private accessPolicyService: AccessPolicyService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.organizationId = params.organizationId;\n      this.projectId = params.projectId;\n    });\n\n    this.rows$.pipe(takeUntil(this.destroy$)).subscribe((rows) => {\n      this.rows = rows;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private async launchDeleteWarningDialog(policy: AccessSelectorRowView) {\n    this.dialogService.open<unknown, AccessRemovalDetails>(AccessRemovalDialogComponent, {\n      data: {\n        title: \"smAccessRemovalWarningProjectTitle\",\n        message: \"smAccessRemovalWarningProjectMessage\",\n        operation: \"delete\",\n        type: \"project\",\n        returnRoute: [\"sm\", this.organizationId, \"projects\"],\n        policy,\n      },\n    });\n  }\n\n  private launchUpdateWarningDialog(policy: AccessSelectorRowView) {\n    this.dialogService.open<unknown, AccessRemovalDetails>(AccessRemovalDialogComponent, {\n      data: {\n        title: \"smAccessRemovalWarningProjectTitle\",\n        message: \"smAccessRemovalWarningProjectMessage\",\n        operation: \"update\",\n        type: \"project\",\n        returnRoute: [\"sm\", this.organizationId, \"projects\"],\n        policy,\n      },\n    });\n  }\n}\n","<div class=\"tw-w-2/5\">\n  <p class=\"tw-mt-8\">\n    {{ \"projectPeopleDescription\" | i18n }}\n  </p>\n  <sm-access-selector\n    [rows]=\"rows$ | async\"\n    granteeType=\"people\"\n    [label]=\"'people' | i18n\"\n    [hint]=\"'projectPeopleSelectHint' | i18n\"\n    [columnTitle]=\"'name' | i18n\"\n    [emptyMessage]=\"'projectEmptyPeopleAccessPolicies' | i18n\"\n    (onCreateAccessPolicies)=\"handleCreateAccessPolicies($event)\"\n    (onDeleteAccessPolicy)=\"handleDeleteAccessPolicy($event)\"\n    (onUpdateAccessPolicy)=\"handleUpdateAccessPolicy($event)\"\n  >\n  </sm-access-selector>\n</div>\n","<ng-container *ngIf=\"{ project: project$ | async, secrets: secrets$ | async } as projectSecrets\">\n  <ng-container *ngIf=\"projectSecrets?.secrets && projectSecrets?.project; else spinner\">\n    <div\n      *ngIf=\"projectSecrets.secrets?.length > 0 && projectSecrets.project?.write\"\n      class=\"float-right tw-mt-3 tw-items-center\"\n    >\n      <button type=\"button\" bitButton buttonType=\"secondary\" (click)=\"openNewSecretDialog()\">\n        <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n        {{ \"newSecret\" | i18n }}\n      </button>\n    </div>\n    <sm-secrets-list\n      *ngIf=\"projectSecrets.secrets?.length > 0 || projectSecrets.project?.write; else contactAdmin\"\n      (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n      (newSecretEvent)=\"openNewSecretDialog()\"\n      (editSecretEvent)=\"openEditSecret($event)\"\n      (copySecretNameEvent)=\"copySecretName($event)\"\n      (copySecretValueEvent)=\"copySecretValue($event)\"\n      [secrets]=\"projectSecrets.secrets\"\n    ></sm-secrets-list>\n  </ng-container>\n</ng-container>\n\n<ng-template #spinner>\n  <div class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n  </div>\n</ng-template>\n\n<ng-template #contactAdmin>\n  <bit-no-items>\n    <ng-container slot=\"title\">{{ \"secretsNoItemsTitle\" | i18n }}</ng-container>\n    <ng-container slot=\"description\">{{ \"smProjectSecretsNoItemsNoAccess\" | i18n }}</ng-container>\n  </bit-no-items>\n</ng-template>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, combineLatestWith, filter, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { ProjectView } from \"../../models/view/project.view\";\nimport { SecretListView } from \"../../models/view/secret-list.view\";\nimport {\n  SecretDeleteDialogComponent,\n  SecretDeleteOperation,\n} from \"../../secrets/dialog/secret-delete.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"../../secrets/dialog/secret-dialog.component\";\nimport { SecretService } from \"../../secrets/secret.service\";\nimport { SecretsListComponent } from \"../../shared/secrets-list.component\";\nimport { ProjectService } from \"../project.service\";\n\n@Component({\n  selector: \"sm-project-secrets\",\n  templateUrl: \"./project-secrets.component.html\",\n})\nexport class ProjectSecretsComponent {\n  secrets$: Observable<SecretListView[]>;\n\n  private organizationId: string;\n  private projectId: string;\n  protected project$: Observable<ProjectView>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private projectService: ProjectService,\n    private secretService: SecretService,\n    private dialogService: DialogServiceAbstraction,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  ngOnInit() {\n    // Refresh list if project is edited\n    const currentProjectEdited = this.projectService.project$.pipe(\n      filter((p) => p?.id === this.projectId),\n      startWith(null)\n    );\n\n    this.project$ = combineLatest([this.route.params, currentProjectEdited]).pipe(\n      switchMap(([params, _]) => {\n        return this.projectService.getByProjectId(params.projectId);\n      })\n    );\n\n    this.secrets$ = this.secretService.secret$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params, currentProjectEdited),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        this.projectId = params.projectId;\n        return await this.getSecretsByProject();\n      })\n    );\n  }\n\n  private async getSecretsByProject(): Promise<SecretListView[]> {\n    return await this.secretService.getSecretsByProject(this.organizationId, this.projectId);\n  }\n\n  openEditSecret(secretId: string) {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        secretId: secretId,\n      },\n    });\n  }\n\n  openDeleteSecret(event: SecretListView[]) {\n    this.dialogService.open<unknown, SecretDeleteOperation>(SecretDeleteDialogComponent, {\n      data: {\n        secrets: event,\n      },\n    });\n  }\n\n  openNewSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n        projectId: this.projectId,\n      },\n    });\n  }\n\n  copySecretName(name: string) {\n    SecretsListComponent.copySecretName(name, this.platformUtilsService, this.i18nService);\n  }\n\n  copySecretValue(id: string) {\n    SecretsListComponent.copySecretValue(\n      id,\n      this.platformUtilsService,\n      this.i18nService,\n      this.secretService\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { map, Observable, startWith, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { ValidationService } from \"@bitwarden/common/platform/abstractions/validation.service\";\nimport { SelectItemView } from \"@bitwarden/components\";\n\nimport {\n  ProjectAccessPoliciesView,\n  ServiceAccountProjectAccessPolicyView,\n} from \"../../models/view/access-policy.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  AccessSelectorComponent,\n  AccessSelectorRowView,\n} from \"../../shared/access-policies/access-selector.component\";\n\n@Component({\n  selector: \"sm-project-service-accounts\",\n  templateUrl: \"./project-service-accounts.component.html\",\n})\nexport class ProjectServiceAccountsComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private organizationId: string;\n  private projectId: string;\n\n  protected rows$: Observable<AccessSelectorRowView[]> =\n    this.accessPolicyService.projectAccessPolicyChanges$.pipe(\n      startWith(null),\n      switchMap(() =>\n        this.accessPolicyService.getProjectAccessPolicies(this.organizationId, this.projectId)\n      ),\n      map((policies) =>\n        policies.serviceAccountAccessPolicies.map((policy) => ({\n          type: \"serviceAccount\",\n          name: policy.serviceAccountName,\n          id: policy.serviceAccountId,\n          accessPolicyId: policy.id,\n          read: policy.read,\n          write: policy.write,\n          icon: AccessSelectorComponent.serviceAccountIcon,\n          static: false,\n        }))\n      )\n    );\n\n  protected async handleUpdateAccessPolicy(policy: AccessSelectorRowView) {\n    try {\n      return await this.accessPolicyService.updateAccessPolicy(\n        AccessSelectorComponent.getBaseAccessPolicyView(policy)\n      );\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  protected handleCreateAccessPolicies(selected: SelectItemView[]) {\n    const projectAccessPoliciesView = new ProjectAccessPoliciesView();\n    projectAccessPoliciesView.serviceAccountAccessPolicies = selected\n      .filter(\n        (selection) => AccessSelectorComponent.getAccessItemType(selection) === \"serviceAccount\"\n      )\n      .map((filtered) => {\n        const view = new ServiceAccountProjectAccessPolicyView();\n        view.grantedProjectId = this.projectId;\n        view.serviceAccountId = filtered.id;\n        view.read = true;\n        view.write = false;\n        return view;\n      });\n\n    return this.accessPolicyService.createProjectAccessPolicies(\n      this.organizationId,\n      this.projectId,\n      projectAccessPoliciesView\n    );\n  }\n\n  protected async handleDeleteAccessPolicy(policy: AccessSelectorRowView) {\n    try {\n      await this.accessPolicyService.deleteAccessPolicy(policy.accessPolicyId);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private validationService: ValidationService,\n    private accessPolicyService: AccessPolicyService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.organizationId = params.organizationId;\n      this.projectId = params.projectId;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","<div class=\"tw-w-2/5\">\n  <p class=\"tw-mt-8\">\n    {{ \"projectServiceAccountsDescription\" | i18n }}\n  </p>\n  <sm-access-selector\n    [rows]=\"rows$ | async\"\n    granteeType=\"serviceAccounts\"\n    [label]=\"'serviceAccounts' | i18n\"\n    [hint]=\"'projectServiceAccountsSelectHint' | i18n\"\n    [columnTitle]=\"'serviceAccounts' | i18n\"\n    [emptyMessage]=\"'projectEmptyServiceAccountAccessPolicies' | i18n\"\n    (onCreateAccessPolicies)=\"handleCreateAccessPolicies($event)\"\n    (onDeleteAccessPolicy)=\"handleDeleteAccessPolicy($event)\"\n    (onUpdateAccessPolicy)=\"handleUpdateAccessPolicy($event)\"\n  >\n  </sm-access-selector>\n</div>\n","<sm-header *ngIf=\"project$ | async as project\" [title]=\"project.name\" icon=\"bwi-collection\">\n  <bit-breadcrumbs slot=\"breadcrumbs\">\n    <bit-breadcrumb [route]=\"['..']\" icon=\"bwi-angle-left\">{{ \"projects\" | i18n }}</bit-breadcrumb>\n  </bit-breadcrumbs>\n  <bit-tab-nav-bar label=\"Main\" slot=\"tabs\">\n    <bit-tab-link [route]=\"['secrets']\">{{ \"secrets\" | i18n }}</bit-tab-link>\n    <ng-container *ngIf=\"project.write\">\n      <bit-tab-link [route]=\"['people']\">{{ \"people\" | i18n }}</bit-tab-link>\n      <bit-tab-link [route]=\"['service-accounts']\">{{ \"serviceAccounts\" | i18n }}</bit-tab-link>\n    </ng-container>\n  </bit-tab-nav-bar>\n  <sm-new-menu></sm-new-menu>\n  <button\n    type=\"button\"\n    slot=\"secondary\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"openEditDialog()\"\n    *ngIf=\"project.write\"\n  >\n    {{ \"editProject\" | i18n }}\n  </button>\n</sm-header>\n<router-outlet></router-outlet>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport {\n  catchError,\n  combineLatest,\n  EMPTY,\n  filter,\n  Observable,\n  startWith,\n  Subject,\n  switchMap,\n  takeUntil,\n} from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { ProjectView } from \"../../models/view/project.view\";\nimport {\n  OperationType,\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../dialog/project-dialog.component\";\nimport { ProjectService } from \"../project.service\";\n\n@Component({\n  selector: \"sm-project\",\n  templateUrl: \"./project.component.html\",\n})\nexport class ProjectComponent implements OnInit, OnDestroy {\n  protected project$: Observable<ProjectView>;\n\n  private organizationId: string;\n  private projectId: string;\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    private route: ActivatedRoute,\n    private projectService: ProjectService,\n    private router: Router,\n    private dialogService: DialogServiceAbstraction,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  ngOnInit(): void {\n    // Update project if it is edited\n    const currentProjectEdited = this.projectService.project$.pipe(\n      filter((p) => p?.id === this.projectId),\n      startWith(null)\n    );\n\n    this.project$ = combineLatest([this.route.params, currentProjectEdited]).pipe(\n      switchMap(([params, _]) => this.projectService.getByProjectId(params.projectId)),\n      catchError(() => {\n        this.router.navigate([\"/sm\", this.organizationId, \"projects\"]).then(() => {\n          this.platformUtilsService.showToast(\n            \"error\",\n            null,\n            this.i18nService.t(\"notFound\", this.i18nService.t(\"project\"))\n          );\n        });\n        return EMPTY;\n      })\n    );\n\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.organizationId = params.organizationId;\n      this.projectId = params.projectId;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  async openEditDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        projectId: this.projectId,\n      },\n    });\n  }\n}\n","<bit-dialog>\n  <ng-container bitDialogTitle>\n    {{ data.title | i18n }}\n  </ng-container>\n\n  <div bitDialogContent>\n    {{ data.message | i18n }}\n    <bit-table>\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ data.columnTitle | i18n }}</th>\n          <th bitCell>{{ \"description\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body>\n        <tr bitRow *ngFor=\"let detail of data.details\">\n          <td bitCell>{{ detail.name }}</td>\n          <td bitCell>{{ detail.description | i18n }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </div>\n\n  <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n    <button\n      type=\"button\"\n      bitButton\n      buttonType=\"primary\"\n      bitFormButton\n      (click)=\"dialogRef.close(bulkConfirmationResult.Continue)\"\n    >\n      {{ \"continue\" | i18n }}\n    </button>\n    <button bitButton buttonType=\"secondary\" bitDialogClose type=\"button\">\n      {{ \"cancel\" | i18n }}\n    </button>\n  </div>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nexport interface BulkConfirmationDetails {\n  title: string;\n  columnTitle: string;\n  message: string;\n  details: BulkConfirmationStatus[];\n}\n\nexport interface BulkConfirmationStatus {\n  id: string;\n  name: string;\n  description: string;\n}\n\nexport enum BulkConfirmationResult {\n  Continue,\n  Cancel,\n}\n\n@Component({\n  selector: \"sm-bulk-confirmation-dialog\",\n  templateUrl: \"./bulk-confirmation-dialog.component.html\",\n})\nexport class BulkConfirmationDialogComponent implements OnInit {\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: BulkConfirmationDetails\n  ) {}\n\n  protected bulkConfirmationResult = BulkConfirmationResult;\n\n  ngOnInit(): void {\n    // TODO remove null checks once strictNullChecks in TypeScript is turned on.\n    if (\n      !this.data.title ||\n      !this.data.columnTitle ||\n      !this.data.message ||\n      !(this.data.details?.length >= 1)\n    ) {\n      this.dialogRef.close();\n      throw new Error(\n        \"The bulk confirmation dialog was not called with the appropriate operation values.\"\n      );\n    }\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, lastValueFrom, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  BulkConfirmationDetails,\n  BulkConfirmationDialogComponent,\n  BulkConfirmationResult,\n  BulkConfirmationStatus,\n} from \"../../shared/dialogs/bulk-confirmation-dialog.component\";\nimport {\n  ProjectDeleteDialogComponent,\n  ProjectDeleteOperation,\n} from \"../dialog/project-delete-dialog.component\";\nimport {\n  OperationType,\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../dialog/project-dialog.component\";\nimport { ProjectService } from \"../project.service\";\n\n@Component({\n  selector: \"sm-projects\",\n  templateUrl: \"./projects.component.html\",\n})\nexport class ProjectsComponent implements OnInit {\n  protected projects$: Observable<ProjectListView[]>;\n  protected search: string;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private projectService: ProjectService,\n    private accessPolicyService: AccessPolicyService,\n    private dialogService: DialogServiceAbstraction\n  ) {}\n\n  ngOnInit() {\n    this.projects$ = combineLatest([\n      this.route.params,\n      this.projectService.project$.pipe(startWith(null)),\n      this.accessPolicyService.projectAccessPolicyChanges$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(async ([params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getProjects();\n      })\n    );\n  }\n\n  private async getProjects(): Promise<ProjectListView[]> {\n    return await this.projectService.getProjects(this.organizationId);\n  }\n\n  openEditProject(projectId: string) {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        projectId: projectId,\n      },\n    });\n  }\n\n  openNewProjectDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  async openDeleteProjectDialog(projects: ProjectListView[]) {\n    if (projects.some((project) => project.write == false)) {\n      const readOnlyProjects = projects.filter((project) => project.write == false);\n      const writeProjects = projects.filter((project) => project.write);\n\n      const dialogRef = this.dialogService.open<unknown, BulkConfirmationDetails>(\n        BulkConfirmationDialogComponent,\n        {\n          data: {\n            title: \"deleteProjects\",\n            columnTitle: \"projectName\",\n            message: \"smProjectsDeleteBulkConfirmation\",\n            details: this.getBulkConfirmationDetails(readOnlyProjects),\n          },\n        }\n      );\n\n      const result = await lastValueFrom(dialogRef.closed);\n\n      if (result == BulkConfirmationResult.Continue) {\n        this.dialogService.open<unknown, ProjectDeleteOperation>(ProjectDeleteDialogComponent, {\n          data: {\n            projects: writeProjects,\n          },\n        });\n      }\n    } else {\n      this.dialogService.open<unknown, ProjectDeleteOperation>(ProjectDeleteDialogComponent, {\n        data: {\n          projects,\n        },\n      });\n    }\n  }\n\n  private getBulkConfirmationDetails(projects: ProjectListView[]): BulkConfirmationStatus[] {\n    return projects.map((project) => {\n      return {\n        id: project.id,\n        name: project.name,\n        description: \"smProjectDeleteAccessRestricted\",\n      };\n    });\n  }\n}\n","<sm-header>\n  <bit-search\n    [placeholder]=\"'searchProjects' | i18n\"\n    [(ngModel)]=\"search\"\n    class=\"tw-w-80\"\n  ></bit-search>\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n<sm-projects-list\n  (newProjectEvent)=\"openNewProjectDialog()\"\n  (editProjectEvent)=\"openEditProject($event)\"\n  (deleteProjectEvent)=\"openDeleteProjectDialog($event)\"\n  [projects]=\"projects$ | async\"\n  [search]=\"search\"\n>\n</sm-projects-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { ProjectPeopleComponent } from \"./project/project-people.component\";\nimport { ProjectSecretsComponent } from \"./project/project-secrets.component\";\nimport { ProjectServiceAccountsComponent } from \"./project/project-service-accounts.component\";\nimport { ProjectComponent } from \"./project/project.component\";\nimport { ProjectsComponent } from \"./projects/projects.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ProjectsComponent,\n  },\n  {\n    path: \":projectId\",\n    component: ProjectComponent,\n    children: [\n      {\n        path: \"\",\n        pathMatch: \"full\",\n        redirectTo: \"secrets\",\n      },\n      {\n        path: \"secrets\",\n        component: ProjectSecretsComponent,\n      },\n      {\n        path: \"people\",\n        component: ProjectPeopleComponent,\n      },\n      {\n        path: \"service-accounts\",\n        component: ProjectServiceAccountsComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ProjectsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { BreadcrumbsModule } from \"@bitwarden/components\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { ProjectDeleteDialogComponent } from \"./dialog/project-delete-dialog.component\";\nimport { ProjectDialogComponent } from \"./dialog/project-dialog.component\";\nimport { ProjectPeopleComponent } from \"./project/project-people.component\";\nimport { ProjectSecretsComponent } from \"./project/project-secrets.component\";\nimport { ProjectServiceAccountsComponent } from \"./project/project-service-accounts.component\";\nimport { ProjectComponent } from \"./project/project.component\";\nimport { ProjectsComponent } from \"./projects/projects.component\";\nimport { ProjectsRoutingModule } from \"./projects-routing.module\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, ProjectsRoutingModule, BreadcrumbsModule],\n  declarations: [\n    ProjectsComponent,\n    ProjectDialogComponent,\n    ProjectDeleteDialogComponent,\n    ProjectPeopleComponent,\n    ProjectServiceAccountsComponent,\n    ProjectComponent,\n    ProjectSecretsComponent,\n  ],\n  providers: [],\n})\nexport class ProjectsModule {}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport { SecretsListComponent } from \"../shared/secrets-list.component\";\n\nimport {\n  SecretDeleteDialogComponent,\n  SecretDeleteOperation,\n} from \"./dialog/secret-delete.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"./dialog/secret-dialog.component\";\nimport { SecretService } from \"./secret.service\";\n\n@Component({\n  selector: \"sm-secrets\",\n  templateUrl: \"./secrets.component.html\",\n})\nexport class SecretsComponent implements OnInit {\n  protected secrets$: Observable<SecretListView[]>;\n  protected search: string;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private secretService: SecretService,\n    private dialogService: DialogServiceAbstraction,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  ngOnInit() {\n    this.secrets$ = this.secretService.secret$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getSecrets();\n      })\n    );\n\n    if (this.route.snapshot.queryParams.search) {\n      this.search = this.route.snapshot.queryParams.search;\n    }\n  }\n\n  private async getSecrets(): Promise<SecretListView[]> {\n    return await this.secretService.getSecrets(this.organizationId);\n  }\n\n  openEditSecret(secretId: string) {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        secretId: secretId,\n      },\n    });\n  }\n\n  openDeleteSecret(event: SecretListView[]) {\n    this.dialogService.open<unknown, SecretDeleteOperation>(SecretDeleteDialogComponent, {\n      data: {\n        secrets: event,\n      },\n    });\n  }\n\n  openNewSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  copySecretName(name: string) {\n    SecretsListComponent.copySecretName(name, this.platformUtilsService, this.i18nService);\n  }\n\n  copySecretValue(id: string) {\n    SecretsListComponent.copySecretValue(\n      id,\n      this.platformUtilsService,\n      this.i18nService,\n      this.secretService\n    );\n  }\n}\n","<sm-header>\n  <bit-search\n    [placeholder]=\"'searchSecrets' | i18n\"\n    [(ngModel)]=\"search\"\n    class=\"tw-w-80\"\n  ></bit-search>\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n<sm-secrets-list\n  (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n  (newSecretEvent)=\"openNewSecretDialog()\"\n  (editSecretEvent)=\"openEditSecret($event)\"\n  (copySecretNameEvent)=\"copySecretName($event)\"\n  (copySecretValueEvent)=\"copySecretValue($event)\"\n  [secrets]=\"secrets$ | async\"\n  [search]=\"search\"\n></sm-secrets-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { SecretsComponent } from \"./secrets.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: SecretsComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SecretsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { SecretDeleteDialogComponent } from \"./dialog/secret-delete.component\";\nimport { SecretDialogComponent } from \"./dialog/secret-dialog.component\";\nimport { SecretsRoutingModule } from \"./secrets-routing.module\";\nimport { SecretsComponent } from \"./secrets.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, SecretsRoutingModule],\n  declarations: [SecretDeleteDialogComponent, SecretDialogComponent, SecretsComponent],\n  providers: [],\n})\nexport class SecretsModule {}\n","import { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nexport class AccessTokenRequest {\n  name: EncString;\n  encryptedPayload: EncString;\n  key: EncString;\n  expireAt: Date;\n}\n","export class RevokeAccessTokensRequest {\n  ids: string[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class AccessTokenCreationResponse extends BaseResponse {\n  id: string;\n  name: string;\n  clientSecret: string;\n  expireAt?: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.clientSecret = this.getResponseProperty(\"ClientSecret\");\n    this.expireAt = this.getResponseProperty(\"ExpireAt\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class AccessTokenResponse extends BaseResponse {\n  id: string;\n  name: string;\n  scopes: string[];\n  expireAt?: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.scopes = this.getResponseProperty(\"Scopes\");\n    this.expireAt = this.getResponseProperty(\"ExpireAt\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","export class AccessTokenView {\n  id: string;\n  name: string;\n  scopes: string[];\n  expireAt?: Date;\n  creationDate: Date;\n  revisionDate: Date;\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\n\nimport { AccessTokenRequest } from \"../models/requests/access-token.request\";\nimport { RevokeAccessTokensRequest } from \"../models/requests/revoke-access-tokens.request\";\nimport { AccessTokenCreationResponse } from \"../models/responses/access-token-creation.response\";\nimport { AccessTokenResponse } from \"../models/responses/access-tokens.response\";\nimport { AccessTokenView } from \"../models/view/access-token.view\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AccessService {\n  private readonly _accessTokenVersion = \"0\";\n  protected _accessToken: Subject<AccessTokenView> = new Subject();\n\n  accessToken$ = this._accessToken.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getAccessTokens(\n    organizationId: string,\n    serviceAccountId: string\n  ): Promise<AccessTokenView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-tokens\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, AccessTokenResponse);\n\n    return await this.createAccessTokenViews(organizationId, results.data);\n  }\n\n  async createAccessToken(\n    organizationId: string,\n    serviceAccountId: string,\n    accessTokenView: AccessTokenView\n  ): Promise<string> {\n    const keyMaterial = await this.cryptoFunctionService.randomBytes(16);\n    const key = await this.cryptoFunctionService.hkdf(\n      keyMaterial,\n      \"bitwarden-accesstoken\",\n      \"sm-access-token\",\n      64,\n      \"sha256\"\n    );\n    const encryptionKey = new SymmetricCryptoKey(key);\n\n    const request = await this.createAccessTokenRequest(\n      organizationId,\n      encryptionKey,\n      accessTokenView\n    );\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-tokens\",\n      request,\n      true,\n      true\n    );\n    const result = new AccessTokenCreationResponse(r);\n    this._accessToken.next(null);\n    const b64Key = Utils.fromBufferToB64(keyMaterial);\n    return `${this._accessTokenVersion}.${result.id}.${result.clientSecret}:${b64Key}`;\n  }\n\n  async revokeAccessTokens(serviceAccountId: string, accessTokenIds: string[]): Promise<void> {\n    const request = new RevokeAccessTokensRequest();\n    request.ids = accessTokenIds;\n\n    await this.apiService.send(\n      \"POST\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-tokens/revoke\",\n      request,\n      true,\n      false\n    );\n\n    this._accessToken.next(null);\n  }\n\n  private async createAccessTokenRequest(\n    organizationId: string,\n    encryptionKey: SymmetricCryptoKey,\n    accessTokenView: AccessTokenView\n  ): Promise<AccessTokenRequest> {\n    const organizationKey = await this.getOrganizationKey(organizationId);\n    const accessTokenRequest = new AccessTokenRequest();\n    const [name, encryptedPayload, key] = await Promise.all([\n      await this.encryptService.encrypt(accessTokenView.name, organizationKey),\n      await this.encryptService.encrypt(\n        JSON.stringify({ encryptionKey: organizationKey.keyB64 }),\n        encryptionKey\n      ),\n      await this.encryptService.encrypt(encryptionKey.keyB64, organizationKey),\n    ]);\n\n    accessTokenRequest.name = name;\n    accessTokenRequest.encryptedPayload = encryptedPayload;\n    accessTokenRequest.key = key;\n    accessTokenRequest.expireAt = accessTokenView.expireAt;\n    return accessTokenRequest;\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async createAccessTokenViews(\n    organizationId: string,\n    accessTokenResponses: AccessTokenResponse[]\n  ): Promise<AccessTokenView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      accessTokenResponses.map(async (s) => {\n        const view = new AccessTokenView();\n        view.id = s.id;\n        view.name = await this.encryptService.decryptToUtf8(new EncString(s.name), orgKey);\n        view.scopes = s.scopes;\n        view.expireAt = s.expireAt ? new Date(s.expireAt) : null;\n        view.creationDate = new Date(s.creationDate);\n        view.revisionDate = new Date(s.revisionDate);\n        return view;\n      })\n    );\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nexport interface AccessTokenDetails {\n  subTitle: string;\n  expirationDate?: Date;\n  accessToken: string;\n}\n\n@Component({\n  templateUrl: \"./access-token-dialog.component.html\",\n})\nexport class AccessTokenDialogComponent implements OnInit {\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: AccessTokenDetails,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {\n    this.dialogRef.disableClose = true;\n  }\n\n  ngOnInit(): void {\n    // TODO remove null checks once strictNullChecks in TypeScript is turned on.\n    if (!this.data.subTitle || !this.data.accessToken) {\n      this.dialogRef.close();\n      throw new Error(\"The access token dialog was not called with the appropriate values.\");\n    }\n  }\n\n  copyAccessToken(): void {\n    this.platformUtilsService.copyToClipboard(this.data.accessToken);\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"accessTokenCreatedAndCopied\")\n    );\n    this.dialogRef.close();\n  }\n}\n","<bit-dialog dialogSize=\"default\">\n  <ng-container bitDialogTitle>\n    <span>{{ \"newAccessToken\" | i18n }}</span>\n    <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n      {{ data.subTitle }}\n    </span>\n  </ng-container>\n\n  <div bitDialogContent>\n    <bit-callout type=\"info\" [title]=\"'accessTokenCallOutTitle' | i18n\">\n      {{ \"downloadAccessToken\" | i18n }}<br />\n      {{ \"expiresOnAccessToken\" | i18n }}\n      {{\n        data.expirationDate === null ? (\"never\" | i18n) : (data.expirationDate | date : \"medium\")\n      }}\n    </bit-callout>\n\n    <bit-form-field class=\"tw-mb-0\">\n      <bit-label>{{ \"accessToken\" | i18n }}</bit-label>\n      <textarea bitInput disabled rows=\"4\">{{ data.accessToken }}</textarea>\n    </bit-form-field>\n    {{ \"expiresOnAccessToken\" | i18n }}\n    {{ data.expirationDate === null ? (\"never\" | i18n) : (data.expirationDate | date : \"medium\") }}\n  </div>\n\n  <ng-container bitDialogFooter>\n    <button type=\"button\" bitButton buttonType=\"primary\" (click)=\"copyAccessToken()\">\n      <i class=\"bwi bwi-clone\" aria-hidden=\"true\"></i>\n      {{ \"copyToken\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","<ng-container [formGroup]=\"form\">\n  <bit-form-field>\n    <bit-label>{{ \"expires\" | i18n }}</bit-label>\n    <select bitInput formControlName=\"expires\">\n      <option ngValue=\"never\">{{ \"never\" | i18n }}</option>\n      <option *ngFor=\"let day of expirationDayOptions\" [ngValue]=\"day\">\n        {{ \"days\" | i18n : day }}\n      </option>\n      <option ngValue=\"custom\">{{ \"custom\" | i18n }}</option>\n    </select>\n  </bit-form-field>\n  <bit-form-field *ngIf=\"form.value.expires === 'custom'\">\n    <bit-label>{{ \"expirationDate\" | i18n }}</bit-label>\n    <input\n      bitInput\n      type=\"datetime-local\"\n      [min]=\"currentDate | date : 'YYYY-MM-ddThh:mm'\"\n      formControlName=\"expireDateTime\"\n    />\n  </bit-form-field>\n</ng-container>\n","import { DatePipe } from \"@angular/common\";\nimport { Component, Input, OnDestroy, OnInit } from \"@angular/core\";\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from \"@angular/forms\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\n\n@Component({\n  selector: \"sm-expiration-options\",\n  templateUrl: \"./expiration-options.component.html\",\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: ExpirationOptionsComponent,\n    },\n    {\n      provide: NG_VALIDATORS,\n      multi: true,\n      useExisting: ExpirationOptionsComponent,\n    },\n  ],\n})\nexport class ExpirationOptionsComponent\n  implements ControlValueAccessor, Validator, OnInit, OnDestroy\n{\n  private destroy$ = new Subject<void>();\n\n  @Input() expirationDayOptions: number[];\n\n  @Input() set touched(val: boolean) {\n    if (val) {\n      this.form.markAllAsTouched();\n    }\n  }\n\n  currentDate = new Date();\n\n  protected form = new FormGroup({\n    expires: new FormControl(\"never\", [Validators.required]),\n    expireDateTime: new FormControl(\"\", [Validators.required, this.expiresInFutureValidator()]),\n  });\n\n  constructor(private datePipe: DatePipe, private i18nService: I18nService) {}\n\n  async ngOnInit() {\n    this.form.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      this._onChange(this.getExpiresDate());\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private _onChange = (_value: Date | null): void => undefined;\n  registerOnChange(fn: (value: Date | null) => void): void {\n    this._onChange = fn;\n  }\n\n  onTouched = (): void => undefined;\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  validate(control: AbstractControl<any, any>): ValidationErrors {\n    if (\n      (this.form.value.expires == \"custom\" && !this.form.invalid) ||\n      this.form.value.expires !== \"custom\"\n    ) {\n      return null;\n    }\n    return {\n      required: true,\n    };\n  }\n\n  writeValue(value: Date | null): void {\n    if (value == null) {\n      this.form.setValue({ expires: \"never\", expireDateTime: null });\n    }\n    if (value) {\n      this.form.setValue({\n        expires: \"custom\",\n        expireDateTime: this.datePipe.transform(value, \"YYYY-MM-ddThh:mm\"),\n      });\n    }\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    isDisabled ? this.form.disable() : this.form.enable();\n  }\n\n  private getExpiresDate(): Date | null {\n    if (this.form.value.expires == \"never\") {\n      return null;\n    }\n    if (this.form.value.expires == \"custom\") {\n      return new Date(this.form.value.expireDateTime);\n    }\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() + Number(this.form.value.expires));\n    return currentDate;\n  }\n\n  expiresInFutureValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const enteredDate = new Date(control.value);\n\n      if (enteredDate > new Date()) {\n        return null;\n      } else {\n        return {\n          ValidationError: {\n            message: this.i18nService.t(\"expirationDateError\"),\n          },\n        };\n      }\n    };\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { BitValidators } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../../../models/view/service-account.view\";\nimport { AccessTokenView } from \"../../models/view/access-token.view\";\nimport { AccessService } from \"../access.service\";\n\nimport { AccessTokenDetails, AccessTokenDialogComponent } from \"./access-token-dialog.component\";\n\nexport interface AccessTokenOperation {\n  serviceAccountView: ServiceAccountView;\n}\n\n@Component({\n  templateUrl: \"./access-token-create-dialog.component.html\",\n})\nexport class AccessTokenCreateDialogComponent implements OnInit {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", {\n      validators: [Validators.required, Validators.maxLength(80), BitValidators.trimValidator],\n      updateOn: \"submit\",\n    }),\n    expirationDateControl: new FormControl(null),\n  });\n  protected loading = false;\n\n  expirationDayOptions = [7, 30, 60];\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: AccessTokenOperation,\n    private dialogService: DialogServiceAbstraction,\n    private accessService: AccessService\n  ) {}\n\n  async ngOnInit() {\n    if (!this.data.serviceAccountView) {\n      this.dialogRef.close();\n      throw new Error(\n        `The access token create dialog was not called with the appropriate operation values.`\n      );\n    }\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const accessTokenView = new AccessTokenView();\n    accessTokenView.name = this.formGroup.value.name;\n    accessTokenView.expireAt = this.formGroup.value.expirationDateControl;\n    const accessToken = await this.accessService.createAccessToken(\n      this.data.serviceAccountView.organizationId,\n      this.data.serviceAccountView.id,\n      accessTokenView\n    );\n    this.openAccessTokenDialog(\n      this.data.serviceAccountView.name,\n      accessToken,\n      accessTokenView.expireAt\n    );\n    this.dialogRef.close();\n  };\n\n  private openAccessTokenDialog(\n    serviceAccountName: string,\n    accessToken: string,\n    expirationDate?: Date\n  ) {\n    this.dialogService.open<unknown, AccessTokenDetails>(AccessTokenDialogComponent, {\n      data: {\n        subTitle: serviceAccountName,\n        expirationDate: expirationDate,\n        accessToken: accessToken,\n      },\n    });\n  }\n\n  static openNewAccessTokenDialog(\n    dialogService: DialogServiceAbstraction,\n    serviceAccountView: ServiceAccountView\n  ) {\n    return dialogService.open<unknown, AccessTokenOperation>(AccessTokenCreateDialogComponent, {\n      data: {\n        serviceAccountView,\n      },\n    });\n  }\n}\n","<div *ngIf=\"!tokens\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<bit-no-items *ngIf=\"tokens?.length == 0\">\n  <ng-container slot=\"title\">{{ \"accessTokensNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container slot=\"description\">{{ \"accessTokensNoItemsDesc\" | i18n }}</ng-container>\n  <button\n    type=\"button\"\n    slot=\"button\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"newAccessTokenEvent.emit()\"\n  >\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newAccessToken\" | i18n }}\n  </button>\n</bit-no-items>\n\n<bit-table *ngIf=\"tokens?.length >= 1\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"tw-m-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell>{{ \"name\" | i18n }}</th>\n      <th bitCell>{{ \"expires\" | i18n }}</th>\n      <th bitCell>{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body>\n    <tr bitRow *ngFor=\"let token of tokens\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(token.id) : null\"\n          [checked]=\"selection.isSelected(token.id)\"\n        />\n      </td>\n      <td bitCell>{{ token.name }}</td>\n      <td bitCell>\n        {{ token.expireAt === null ? (\"never\" | i18n) : (token.expireAt | date : \"medium\") }}\n      </td>\n      <td bitCell>{{ token.revisionDate | date : \"medium\" }}</td>\n      <td bitCell>\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"tokenMenu\"\n        ></button>\n      </td>\n\n      <bit-menu #tokenMenu>\n        <button type=\"button\" bitMenuItem (click)=\"revokeAccessTokensEvent.emit([token])\">\n          <span class=\"tw-text-danger\">\n            <i class=\"bwi bwi-fw bwi-minus-circle\" aria-hidden=\"true\"></i>\n            {{ \"revokeAccessToken\" | i18n }}\n          </span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"revokeSelected()\">\n    <span class=\"tw-text-danger\">\n      <i class=\"bwi bwi-fw bwi-minus-circle\" aria-hidden=\"true\"></i>\n      {{ \"revokeAccessTokens\" | i18n }}\n    </span>\n  </button>\n</bit-menu>\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"default\">\n    <ng-container bitDialogTitle>\n      <span>{{ \"newAccessToken\" | i18n }}</span>\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        {{ data.serviceAccountView.name }}\n      </span>\n    </ng-container>\n\n    <div bitDialogContent>\n      <bit-form-field>\n        <bit-label>{{ \"name\" | i18n }}</bit-label>\n        <input bitInput formControlName=\"name\" />\n      </bit-form-field>\n      <sm-expiration-options\n        formControlName=\"expirationDateControl\"\n        [expirationDayOptions]=\"expirationDayOptions\"\n        [touched]=\"formGroup.controls.expirationDateControl.touched\"\n      ></sm-expiration-options>\n    </div>\n\n    <ng-container bitDialogFooter>\n      <button class=\"tw-normal-case\" type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"newAccessToken\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, Output } from \"@angular/core\";\n\nimport { AccessTokenView } from \"../models/view/access-token.view\";\n\n@Component({\n  selector: \"sm-access-list\",\n  templateUrl: \"./access-list.component.html\",\n})\nexport class AccessListComponent {\n  @Input()\n  get tokens(): AccessTokenView[] {\n    return this._tokens;\n  }\n  set tokens(secrets: AccessTokenView[]) {\n    this.selection.clear();\n    this._tokens = secrets;\n  }\n  private _tokens: AccessTokenView[];\n\n  @Output() newAccessTokenEvent = new EventEmitter();\n  @Output() revokeAccessTokensEvent = new EventEmitter<AccessTokenView[]>();\n\n  protected selection = new SelectionModel<string>(true, []);\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.tokens.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.tokens.map((s) => s.id));\n  }\n\n  protected revokeSelected() {\n    const selected = this.tokens.filter((s) => this.selection.selected.includes(s.id));\n    this.revokeAccessTokensEvent.emit(selected);\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  combineLatestWith,\n  firstValueFrom,\n  Observable,\n  startWith,\n  Subject,\n  switchMap,\n  takeUntil,\n} from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { openUserVerificationPrompt } from \"@bitwarden/web-vault/app/auth/shared/components/user-verification\";\n\nimport { ServiceAccountView } from \"../../models/view/service-account.view\";\nimport { AccessTokenView } from \"../models/view/access-token.view\";\nimport { ServiceAccountService } from \"../service-account.service\";\n\nimport { AccessService } from \"./access.service\";\nimport { AccessTokenCreateDialogComponent } from \"./dialogs/access-token-create-dialog.component\";\n\n@Component({\n  selector: \"sm-access-tokens\",\n  templateUrl: \"./access-tokens.component.html\",\n})\nexport class AccessTokenComponent implements OnInit, OnDestroy {\n  accessTokens$: Observable<AccessTokenView[]>;\n\n  private destroy$ = new Subject<void>();\n  private serviceAccountView: ServiceAccountView;\n\n  constructor(\n    private route: ActivatedRoute,\n    private accessService: AccessService,\n    private dialogService: DialogServiceAbstraction,\n    private modalService: ModalService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService,\n    private serviceAccountService: ServiceAccountService\n  ) {}\n\n  ngOnInit() {\n    this.accessTokens$ = this.accessService.accessToken$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) =>\n        this.accessService.getAccessTokens(params.organizationId, params.serviceAccountId)\n      )\n    );\n\n    this.serviceAccountService.serviceAccount$\n      .pipe(\n        startWith(null),\n        combineLatestWith(this.route.params),\n        switchMap(([_, params]) =>\n          this.serviceAccountService.getByServiceAccountId(\n            params.serviceAccountId,\n            params.organizationId\n          )\n        ),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((serviceAccountView) => {\n        this.serviceAccountView = serviceAccountView;\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  protected async revoke(tokens: AccessTokenView[]) {\n    if (!tokens?.length) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"noAccessTokenSelected\")\n      );\n      return;\n    }\n\n    if (!(await this.verifyUser())) {\n      return;\n    }\n\n    await this.accessService.revokeAccessTokens(\n      this.serviceAccountView.id,\n      tokens.map((t) => t.id)\n    );\n\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"accessTokenRevoked\"));\n  }\n\n  protected openNewAccessTokenDialog() {\n    AccessTokenCreateDialogComponent.openNewAccessTokenDialog(\n      this.dialogService,\n      this.serviceAccountView\n    );\n  }\n\n  private verifyUser() {\n    const ref = openUserVerificationPrompt(this.dialogService, {\n      data: {\n        confirmDescription: \"revokeAccessTokenDesc\",\n        confirmButtonText: \"revokeAccessToken\",\n        modalTitle: \"revokeAccessToken\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return firstValueFrom(ref.closed);\n  }\n}\n","<sm-access-list\n  [tokens]=\"accessTokens$ | async\"\n  (newAccessTokenEvent)=\"openNewAccessTokenDialog()\"\n  (revokeAccessTokensEvent)=\"revoke($event)\"\n></sm-access-list>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  combineLatestWith,\n  map,\n  Observable,\n  share,\n  startWith,\n  Subject,\n  switchMap,\n  takeUntil,\n} from \"rxjs\";\n\nimport {\n  SimpleDialogType,\n  DialogServiceAbstraction,\n  SimpleDialogOptions,\n} from \"@bitwarden/angular/services/dialog\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { ValidationService } from \"@bitwarden/common/platform/abstractions/validation.service\";\nimport { SelectItemView } from \"@bitwarden/components/src/multi-select/models/select-item-view\";\n\nimport {\n  GroupServiceAccountAccessPolicyView,\n  ServiceAccountAccessPoliciesView,\n  UserServiceAccountAccessPolicyView,\n} from \"../../models/view/access-policy.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  AccessSelectorComponent,\n  AccessSelectorRowView,\n} from \"../../shared/access-policies/access-selector.component\";\nimport {\n  AccessRemovalDetails,\n  AccessRemovalDialogComponent,\n} from \"../../shared/access-policies/dialogs/access-removal-dialog.component\";\n\n@Component({\n  selector: \"sm-service-account-people\",\n  templateUrl: \"./service-account-people.component.html\",\n})\nexport class ServiceAccountPeopleComponent {\n  private destroy$ = new Subject<void>();\n  private serviceAccountId: string;\n  private organizationId: string;\n  private rows: AccessSelectorRowView[];\n\n  protected rows$: Observable<AccessSelectorRowView[]> =\n    this.accessPolicyService.serviceAccountAccessPolicyChanges$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(([_, params]) =>\n        this.accessPolicyService.getServiceAccountAccessPolicies(params.serviceAccountId)\n      ),\n      map((policies) => {\n        const rows: AccessSelectorRowView[] = [];\n        policies.userAccessPolicies.forEach((policy) => {\n          rows.push({\n            type: \"user\",\n            name: policy.organizationUserName,\n            id: policy.organizationUserId,\n            accessPolicyId: policy.id,\n            read: policy.read,\n            write: policy.write,\n            userId: policy.userId,\n            icon: AccessSelectorComponent.userIcon,\n            static: true,\n          });\n        });\n\n        policies.groupAccessPolicies.forEach((policy) => {\n          rows.push({\n            type: \"group\",\n            name: policy.groupName,\n            id: policy.groupId,\n            accessPolicyId: policy.id,\n            read: policy.read,\n            write: policy.write,\n            currentUserInGroup: policy.currentUserInGroup,\n            icon: AccessSelectorComponent.groupIcon,\n            static: true,\n          });\n        });\n\n        return rows;\n      }),\n      share()\n    );\n\n  protected handleCreateAccessPolicies(selected: SelectItemView[]) {\n    const serviceAccountAccessPoliciesView = new ServiceAccountAccessPoliciesView();\n    serviceAccountAccessPoliciesView.userAccessPolicies = selected\n      .filter((selection) => AccessSelectorComponent.getAccessItemType(selection) === \"user\")\n      .map((filtered) => {\n        const view = new UserServiceAccountAccessPolicyView();\n        view.grantedServiceAccountId = this.serviceAccountId;\n        view.organizationUserId = filtered.id;\n        view.read = true;\n        view.write = true;\n        return view;\n      });\n\n    serviceAccountAccessPoliciesView.groupAccessPolicies = selected\n      .filter((selection) => AccessSelectorComponent.getAccessItemType(selection) === \"group\")\n      .map((filtered) => {\n        const view = new GroupServiceAccountAccessPolicyView();\n        view.grantedServiceAccountId = this.serviceAccountId;\n        view.groupId = filtered.id;\n        view.read = true;\n        view.write = true;\n        return view;\n      });\n\n    return this.accessPolicyService.createServiceAccountAccessPolicies(\n      this.serviceAccountId,\n      serviceAccountAccessPoliciesView\n    );\n  }\n\n  protected async handleDeleteAccessPolicy(policy: AccessSelectorRowView) {\n    if (\n      await this.accessPolicyService.needToShowAccessRemovalWarning(\n        this.organizationId,\n        policy,\n        this.rows\n      )\n    ) {\n      this.launchDeleteWarningDialog(policy);\n      return;\n    }\n\n    try {\n      await this.accessPolicyService.deleteAccessPolicy(policy.accessPolicyId);\n      const simpleDialogOpts: SimpleDialogOptions = {\n        title: this.i18nService.t(\"saPeopleWarningTitle\"),\n        content: this.i18nService.t(\"saPeopleWarningMessage\"),\n        type: SimpleDialogType.WARNING,\n        acceptButtonText: { key: \"close\" },\n        cancelButtonText: null,\n      };\n      this.dialogService.openSimpleDialogRef(simpleDialogOpts);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private dialogService: DialogServiceAbstraction,\n    private i18nService: I18nService,\n    private validationService: ValidationService,\n    private accessPolicyService: AccessPolicyService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.serviceAccountId = params.serviceAccountId;\n      this.organizationId = params.organizationId;\n    });\n\n    this.rows$.pipe(takeUntil(this.destroy$)).subscribe((rows) => {\n      this.rows = rows;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private launchDeleteWarningDialog(policy: AccessSelectorRowView) {\n    this.dialogService.open<unknown, AccessRemovalDetails>(AccessRemovalDialogComponent, {\n      data: {\n        title: \"smAccessRemovalWarningSaTitle\",\n        message: \"smAccessRemovalWarningSaMessage\",\n        operation: \"delete\",\n        type: \"service-account\",\n        returnRoute: [\"sm\", this.organizationId, \"service-accounts\"],\n        policy,\n      },\n    });\n  }\n}\n","<div class=\"tw-mt-4 tw-w-2/5\">\n  <p class=\"tw-mt-6\">\n    {{ \"serviceAccountPeopleDescription\" | i18n }}\n  </p>\n  <sm-access-selector\n    [rows]=\"rows$ | async\"\n    granteeType=\"people\"\n    [label]=\"'people' | i18n\"\n    [hint]=\"'projectPeopleSelectHint' | i18n\"\n    [columnTitle]=\"'name' | i18n\"\n    [emptyMessage]=\"'projectEmptyPeopleAccessPolicies' | i18n\"\n    (onCreateAccessPolicies)=\"handleCreateAccessPolicies($event)\"\n    (onDeleteAccessPolicy)=\"handleDeleteAccessPolicy($event)\"\n  >\n  </sm-access-selector>\n</div>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, map, Observable, startWith, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { ValidationService } from \"@bitwarden/common/platform/abstractions/validation.service\";\nimport { SelectItemView } from \"@bitwarden/components/src/multi-select/models/select-item-view\";\n\nimport { ServiceAccountProjectAccessPolicyView } from \"../../models/view/access-policy.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  AccessSelectorComponent,\n  AccessSelectorRowView,\n} from \"../../shared/access-policies/access-selector.component\";\n\n@Component({\n  selector: \"sm-service-account-projects\",\n  templateUrl: \"./service-account-projects.component.html\",\n})\nexport class ServiceAccountProjectsComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private serviceAccountId: string;\n  private organizationId: string;\n\n  protected rows$: Observable<AccessSelectorRowView[]> =\n    this.accessPolicyService.serviceAccountGrantedPolicyChanges$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(([_, params]) =>\n        this.accessPolicyService.getGrantedPolicies(params.serviceAccountId, params.organizationId)\n      ),\n      map((policies) => {\n        return policies.map((policy) => {\n          return {\n            type: \"project\",\n            name: policy.grantedProjectName,\n            id: policy.grantedProjectId,\n            accessPolicyId: policy.id,\n            read: policy.read,\n            write: policy.write,\n            icon: AccessSelectorComponent.projectIcon,\n            static: false,\n          } as AccessSelectorRowView;\n        });\n      })\n    );\n\n  protected handleCreateAccessPolicies(selected: SelectItemView[]) {\n    const serviceAccountProjectAccessPolicyView = selected\n      .filter((selection) => AccessSelectorComponent.getAccessItemType(selection) === \"project\")\n      .map((filtered) => {\n        const view = new ServiceAccountProjectAccessPolicyView();\n        view.serviceAccountId = this.serviceAccountId;\n        view.grantedProjectId = filtered.id;\n        view.read = true;\n        view.write = false;\n        return view;\n      });\n\n    return this.accessPolicyService.createGrantedPolicies(\n      this.organizationId,\n      this.serviceAccountId,\n      serviceAccountProjectAccessPolicyView\n    );\n  }\n\n  protected async handleUpdateAccessPolicy(policy: AccessSelectorRowView) {\n    try {\n      return await this.accessPolicyService.updateAccessPolicy(\n        AccessSelectorComponent.getBaseAccessPolicyView(policy)\n      );\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  protected async handleDeleteAccessPolicy(policy: AccessSelectorRowView) {\n    try {\n      await this.accessPolicyService.deleteAccessPolicy(policy.accessPolicyId);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private validationService: ValidationService,\n    private accessPolicyService: AccessPolicyService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.organizationId = params.organizationId;\n      this.serviceAccountId = params.serviceAccountId;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","<div class=\"tw-mt-4 tw-w-2/5\">\n  <p class=\"tw-mt-6\">\n    {{ \"serviceAccountProjectsDescription\" | i18n }}\n  </p>\n  <sm-access-selector\n    [rows]=\"rows$ | async\"\n    granteeType=\"projects\"\n    [label]=\"'projects' | i18n\"\n    [hint]=\"'newSaSelectAccess' | i18n\"\n    [columnTitle]=\"'projects' | i18n\"\n    [emptyMessage]=\"'serviceAccountEmptyProjectAccesspolicies' | i18n\"\n    (onCreateAccessPolicies)=\"handleCreateAccessPolicies($event)\"\n    (onDeleteAccessPolicy)=\"handleDeleteAccessPolicy($event)\"\n    (onUpdateAccessPolicy)=\"handleUpdateAccessPolicy($event)\"\n  >\n  </sm-access-selector>\n</div>\n","<sm-header\n  *ngIf=\"serviceAccount$ | async as serviceAccount\"\n  [title]=\"serviceAccount.name\"\n  icon=\"bwi-wrench\"\n>\n  <bit-breadcrumbs slot=\"breadcrumbs\">\n    <bit-breadcrumb [route]=\"['..']\" icon=\"bwi-angle-left\">{{\n      \"serviceAccounts\" | i18n\n    }}</bit-breadcrumb>\n  </bit-breadcrumbs>\n  <sm-new-menu></sm-new-menu>\n  <bit-tab-nav-bar label=\"Main\" slot=\"tabs\">\n    <bit-tab-link [route]=\"['projects']\">{{ \"projects\" | i18n }}</bit-tab-link>\n    <bit-tab-link [route]=\"['people']\">{{ \"people\" | i18n }}</bit-tab-link>\n    <bit-tab-link [route]=\"['access']\">{{ \"accessTokens\" | i18n }}</bit-tab-link>\n  </bit-tab-nav-bar>\n  <button\n    type=\"button\"\n    slot=\"secondary\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"openNewAccessTokenDialog()\"\n  >\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newAccessToken\" | i18n }}\n  </button>\n</sm-header>\n<router-outlet></router-outlet>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport {\n  EMPTY,\n  Subject,\n  catchError,\n  combineLatest,\n  filter,\n  startWith,\n  switchMap,\n  takeUntil,\n} from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { ServiceAccountView } from \"../models/view/service-account.view\";\n\nimport { AccessTokenCreateDialogComponent } from \"./access/dialogs/access-token-create-dialog.component\";\nimport { ServiceAccountService } from \"./service-account.service\";\n\n@Component({\n  selector: \"sm-service-account\",\n  templateUrl: \"./service-account.component.html\",\n})\nexport class ServiceAccountComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private organizationId: string;\n  private serviceAccountId: string;\n\n  private onChange$ = this.serviceAccountService.serviceAccount$.pipe(\n    filter((sa) => sa?.id === this.serviceAccountId),\n    startWith(null)\n  );\n\n  private serviceAccountView: ServiceAccountView;\n  protected serviceAccount$ = combineLatest([this.route.params, this.onChange$]).pipe(\n    switchMap(([params, _]) =>\n      this.serviceAccountService.getByServiceAccountId(\n        params.serviceAccountId,\n        params.organizationId\n      )\n    ),\n    catchError(() => {\n      this.router.navigate([\"/sm\", this.organizationId, \"service-accounts\"]).then(() => {\n        this.platformUtilsService.showToast(\n          \"error\",\n          null,\n          this.i18nService.t(\"notFound\", this.i18nService.t(\"serviceAccount\"))\n        );\n      });\n      return EMPTY;\n    })\n  );\n\n  constructor(\n    private route: ActivatedRoute,\n    private serviceAccountService: ServiceAccountService,\n    private dialogService: DialogServiceAbstraction,\n    private router: Router,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  ngOnInit(): void {\n    this.serviceAccount$.pipe(takeUntil(this.destroy$)).subscribe((serviceAccountView) => {\n      this.serviceAccountView = serviceAccountView;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  protected openNewAccessTokenDialog() {\n    AccessTokenCreateDialogComponent.openNewAccessTokenDialog(\n      this.dialogService,\n      this.serviceAccountView\n    );\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"small\">\n    <ng-container bitDialogTitle>\n      <span>{{ title }}</span>\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        <ng-container *ngIf=\"data.serviceAccounts.length == 1\">\n          {{ data.serviceAccounts[0].name }}\n        </ng-container>\n        <ng-container *ngIf=\"data.serviceAccounts.length > 1\">\n          {{ data.serviceAccounts.length }}\n          {{ \"serviceAccounts\" | i18n }}\n        </ng-container>\n      </span>\n    </ng-container>\n\n    <div bitDialogContent>\n      <bit-callout type=\"warning\" [title]=\"'warning' | i18n\">\n        {{ dialogContent }}\n      </bit-callout>\n      <bit-form-field>\n        <bit-label>{{ dialogConfirmationLabel }}</bit-label>\n        <input bitInput formControlName=\"confirmDelete\" />\n      </bit-form-field>\n    </div>\n\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton buttonType=\"danger\" bitFormButton>\n        {{ title }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\nimport {\n  FormControl,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  AbstractControl,\n} from \"@angular/forms\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { ServiceAccountView } from \"../../models/view/service-account.view\";\nimport {\n  BulkOperationStatus,\n  BulkStatusDetails,\n  BulkStatusDialogComponent,\n} from \"../../shared/dialogs/bulk-status-dialog.component\";\nimport { ServiceAccountService } from \"../service-account.service\";\n\nexport interface ServiceAccountDeleteOperation {\n  serviceAccounts: ServiceAccountView[];\n}\n\n@Component({\n  templateUrl: \"./service-account-delete-dialog.component.html\",\n})\nexport class ServiceAccountDeleteDialogComponent {\n  formGroup = new FormGroup({\n    confirmDelete: new FormControl(\"\", [this.matchConfirmationMessageValidator()]),\n  });\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: ServiceAccountDeleteOperation,\n    private serviceAccountService: ServiceAccountService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private dialogService: DialogServiceAbstraction\n  ) {}\n\n  get title() {\n    return this.data.serviceAccounts.length === 1\n      ? this.i18nService.t(\"deleteServiceAccount\")\n      : this.i18nService.t(\"deleteServiceAccounts\");\n  }\n\n  get dialogContent() {\n    return this.data.serviceAccounts.length === 1\n      ? this.i18nService.t(\"deleteServiceAccountDialogMessage\", this.data.serviceAccounts[0].name)\n      : this.i18nService.t(\"deleteServiceAccountsDialogMessage\");\n  }\n\n  get dialogConfirmationLabel() {\n    return this.i18nService.t(\"deleteProjectInputLabel\", this.dialogConfirmationMessage);\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    await this.delete();\n    this.dialogRef.close();\n  };\n\n  async delete() {\n    const bulkResponses = await this.serviceAccountService.delete(this.data.serviceAccounts);\n\n    const errors = bulkResponses.filter((response) => response.errorMessage);\n    if (errors.length > 0) {\n      this.openBulkStatusDialog(errors);\n      return;\n    }\n\n    const message =\n      this.data.serviceAccounts.length === 1\n        ? \"deleteServiceAccountToast\"\n        : \"deleteServiceAccountsToast\";\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  }\n\n  openBulkStatusDialog(bulkStatusResults: BulkOperationStatus[]) {\n    this.dialogService.open<unknown, BulkStatusDetails>(BulkStatusDialogComponent, {\n      data: {\n        title: \"deleteServiceAccounts\",\n        subTitle: \"serviceAccounts\",\n        columnTitle: \"serviceAccountName\",\n        message: \"bulkDeleteProjectsErrorMessage\",\n        details: bulkStatusResults,\n      },\n    });\n  }\n\n  private get dialogConfirmationMessage() {\n    return this.data.serviceAccounts?.length === 1\n      ? this.i18nService.t(\"deleteProjectConfirmMessage\", this.data.serviceAccounts[0].name)\n      : this.i18nService.t(\n          \"deleteServiceAccountsConfirmMessage\",\n          this.data.serviceAccounts?.length.toString()\n        );\n  }\n\n  private matchConfirmationMessageValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (this.dialogConfirmationMessage.toLowerCase() == control.value.toLowerCase()) {\n        return null;\n      } else {\n        return {\n          confirmationDoesntMatchError: {\n            message: this.i18nService.t(\"smConfirmationRequired\"),\n          },\n        };\n      }\n    };\n  }\n}\n","<div *ngIf=\"!serviceAccounts\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<bit-no-items *ngIf=\"serviceAccounts?.length == 0\">\n  <ng-container slot=\"title\">{{ \"serviceAccountsNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container slot=\"description\">{{ \"serviceAccountsNoItemsMessage\" | i18n }}</ng-container>\n  <button\n    slot=\"button\"\n    type=\"button\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"newServiceAccountEvent.emit()\"\n  >\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newServiceAccount\" | i18n }}\n  </button>\n</bit-no-items>\n\n<bit-table *ngIf=\"serviceAccounts?.length >= 1\" [dataSource]=\"dataSource\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"!tw-mb-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell colspan=\"2\" bitSortable=\"name\" default>{{ \"name\" | i18n }}</th>\n      <th bitCell>{{ \"secrets\" | i18n }}</th>\n      <th bitCell bitSortable=\"revisionDate\">{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body let-rows$>\n    <tr bitRow *ngFor=\"let serviceAccount of rows$ | async\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(serviceAccount.id) : null\"\n          [checked]=\"selection.isSelected(serviceAccount.id)\"\n        />\n      </td>\n      <td bitCell class=\"tw-w-0 tw-pr-0\">\n        <i class=\"bwi bwi-wrench tw-text-muted\" aria-hidden=\"true\"></i>\n      </td>\n      <td bitCell class=\"tw-break-all\">\n        <a bitLink [routerLink]=\"serviceAccount.id\">\n          {{ serviceAccount.name }}\n        </a>\n      </td>\n      <td bitCell>\n        <!-- TODO add number of secrets once mapping is implemented-->\n        <span> 0 </span>\n      </td>\n      <td bitCell>{{ serviceAccount.revisionDate | date : \"medium\" }}</td>\n      <td bitCell>\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"serviceAccountMenu\"\n        ></button>\n      </td>\n      <bit-menu #serviceAccountMenu>\n        <a type=\"button\" bitMenuItem [routerLink]=\"serviceAccount.id\">\n          <i class=\"bwi bwi-fw bwi-eye\" aria-hidden=\"true\"></i>\n          {{ \"viewServiceAccount\" | i18n }}\n        </a>\n        <button type=\"button\" bitMenuItem (click)=\"editServiceAccountEvent.emit(serviceAccount.id)\">\n          <i class=\"bwi bwi-fw bwi-pencil\" aria-hidden=\"true\"></i>\n          {{ \"editServiceAccount\" | i18n }}\n        </button>\n        <button type=\"button\" bitMenuItem (click)=\"delete(serviceAccount)\">\n          <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n          <span class=\"tw-text-danger\">\n            {{ \"deleteServiceAccount\" | i18n }}\n          </span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"bulkDeleteServiceAccounts()\">\n    <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">\n      {{ \"deleteServiceAccounts\" | i18n }}\n    </span>\n  </button>\n</bit-menu>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, OnDestroy, Output } from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { TableDataSource } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../models/view/service-account.view\";\n\n@Component({\n  selector: \"sm-service-accounts-list\",\n  templateUrl: \"./service-accounts-list.component.html\",\n})\nexport class ServiceAccountsListComponent implements OnDestroy {\n  protected dataSource = new TableDataSource<ServiceAccountView>();\n\n  @Input()\n  get serviceAccounts(): ServiceAccountView[] {\n    return this._serviceAccounts;\n  }\n  set serviceAccounts(serviceAccounts: ServiceAccountView[]) {\n    this.selection.clear();\n    this._serviceAccounts = serviceAccounts;\n    this.dataSource.data = serviceAccounts;\n  }\n  private _serviceAccounts: ServiceAccountView[];\n\n  @Input()\n  set search(search: string) {\n    this.selection.clear();\n    this.dataSource.filter = search;\n  }\n\n  @Output() newServiceAccountEvent = new EventEmitter();\n  @Output() deleteServiceAccountsEvent = new EventEmitter<ServiceAccountView[]>();\n  @Output() onServiceAccountCheckedEvent = new EventEmitter<string[]>();\n  @Output() editServiceAccountEvent = new EventEmitter<string>();\n\n  private destroy$: Subject<void> = new Subject<void>();\n\n  selection = new SelectionModel<string>(true, []);\n\n  constructor(\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService\n  ) {\n    this.selection.changed\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((_) => this.onServiceAccountCheckedEvent.emit(this.selection.selected));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  isAllSelected() {\n    if (this.selection.selected?.length > 0) {\n      const numSelected = this.selection.selected.length;\n      const numRows = this.dataSource.filteredData.length;\n      return numSelected === numRows;\n    }\n    return false;\n  }\n\n  toggleAll() {\n    if (this.isAllSelected()) {\n      this.selection.clear();\n    } else {\n      this.selection.select(...this.dataSource.filteredData.map((s) => s.id));\n    }\n  }\n\n  delete(serviceAccount: ServiceAccountView) {\n    this.deleteServiceAccountsEvent.emit([serviceAccount]);\n  }\n\n  bulkDeleteServiceAccounts() {\n    if (this.selection.selected.length >= 1) {\n      this.deleteServiceAccountsEvent.emit(\n        this.serviceAccounts.filter((sa) => this.selection.isSelected(sa.id))\n      );\n    } else {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\")\n      );\n    }\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\n\nimport { ServiceAccountView } from \"../models/view/service-account.view\";\nimport { AccessPolicyService } from \"../shared/access-policies/access-policy.service\";\n\nimport {\n  ServiceAccountDeleteDialogComponent,\n  ServiceAccountDeleteOperation,\n} from \"./dialog/service-account-delete-dialog.component\";\nimport {\n  OperationType,\n  ServiceAccountDialogComponent,\n  ServiceAccountOperation,\n} from \"./dialog/service-account-dialog.component\";\nimport { ServiceAccountService } from \"./service-account.service\";\n\n@Component({\n  selector: \"sm-service-accounts\",\n  templateUrl: \"./service-accounts.component.html\",\n})\nexport class ServiceAccountsComponent implements OnInit {\n  protected serviceAccounts$: Observable<ServiceAccountView[]>;\n  protected search: string;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private dialogService: DialogServiceAbstraction,\n    private accessPolicyService: AccessPolicyService,\n    private serviceAccountService: ServiceAccountService\n  ) {}\n\n  ngOnInit() {\n    this.serviceAccounts$ = combineLatest([\n      this.route.params,\n      this.serviceAccountService.serviceAccount$.pipe(startWith(null)),\n      this.accessPolicyService.serviceAccountAccessPolicyChanges$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(async ([params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getServiceAccounts();\n      })\n    );\n  }\n\n  openNewServiceAccountDialog() {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openEditServiceAccountDialog(serviceAccountId: string) {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        serviceAccountId: serviceAccountId,\n        operation: OperationType.Edit,\n      },\n    });\n  }\n\n  openDeleteDialog(event: ServiceAccountView[]) {\n    this.dialogService.open<unknown, ServiceAccountDeleteOperation>(\n      ServiceAccountDeleteDialogComponent,\n      {\n        data: {\n          serviceAccounts: event,\n        },\n      }\n    );\n  }\n\n  private async getServiceAccounts(): Promise<ServiceAccountView[]> {\n    return await this.serviceAccountService.getServiceAccounts(this.organizationId);\n  }\n}\n","<sm-header>\n  <bit-search\n    [placeholder]=\"'searchServiceAccounts' | i18n\"\n    [(ngModel)]=\"search\"\n    class=\"tw-w-80\"\n  ></bit-search>\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n<sm-service-accounts-list\n  [serviceAccounts]=\"serviceAccounts$ | async\"\n  (newServiceAccountEvent)=\"openNewServiceAccountDialog()\"\n  (editServiceAccountEvent)=\"openEditServiceAccountDialog($event)\"\n  (deleteServiceAccountsEvent)=\"openDeleteDialog($event)\"\n  [search]=\"search\"\n></sm-service-accounts-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { AccessTokenComponent } from \"./access/access-tokens.component\";\nimport { ServiceAccountPeopleComponent } from \"./people/service-account-people.component\";\nimport { ServiceAccountProjectsComponent } from \"./projects/service-account-projects.component\";\nimport { ServiceAccountComponent } from \"./service-account.component\";\nimport { ServiceAccountsComponent } from \"./service-accounts.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ServiceAccountsComponent,\n  },\n  {\n    path: \":serviceAccountId\",\n    component: ServiceAccountComponent,\n    children: [\n      {\n        path: \"\",\n        pathMatch: \"full\",\n        redirectTo: \"projects\",\n      },\n      {\n        path: \"access\",\n        component: AccessTokenComponent,\n      },\n      {\n        path: \"people\",\n        component: ServiceAccountPeopleComponent,\n      },\n      {\n        path: \"projects\",\n        component: ServiceAccountProjectsComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ServiceAccountsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { BreadcrumbsModule } from \"@bitwarden/components\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { AccessListComponent } from \"./access/access-list.component\";\nimport { AccessTokenComponent } from \"./access/access-tokens.component\";\nimport { AccessTokenCreateDialogComponent } from \"./access/dialogs/access-token-create-dialog.component\";\nimport { AccessTokenDialogComponent } from \"./access/dialogs/access-token-dialog.component\";\nimport { ExpirationOptionsComponent } from \"./access/dialogs/expiration-options.component\";\nimport { ServiceAccountDeleteDialogComponent } from \"./dialog/service-account-delete-dialog.component\";\nimport { ServiceAccountDialogComponent } from \"./dialog/service-account-dialog.component\";\nimport { ServiceAccountPeopleComponent } from \"./people/service-account-people.component\";\nimport { ServiceAccountProjectsComponent } from \"./projects/service-account-projects.component\";\nimport { ServiceAccountComponent } from \"./service-account.component\";\nimport { ServiceAccountsListComponent } from \"./service-accounts-list.component\";\nimport { ServiceAccountsRoutingModule } from \"./service-accounts-routing.module\";\nimport { ServiceAccountsComponent } from \"./service-accounts.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, ServiceAccountsRoutingModule, BreadcrumbsModule],\n  declarations: [\n    AccessListComponent,\n    AccessTokenComponent,\n    AccessTokenCreateDialogComponent,\n    AccessTokenDialogComponent,\n    ExpirationOptionsComponent,\n    ServiceAccountComponent,\n    ServiceAccountDeleteDialogComponent,\n    ServiceAccountDialogComponent,\n    ServiceAccountPeopleComponent,\n    ServiceAccountProjectsComponent,\n    ServiceAccountsComponent,\n    ServiceAccountsListComponent,\n    ServiceAccountPeopleComponent,\n  ],\n  providers: [],\n})\nexport class ServiceAccountsModule {}\n","import { SecretsManagerImportErrorLine } from \"./sm-import-error-line\";\n\nexport class SecretsManagerImportError extends Error {\n  constructor(message?: string) {\n    super(message);\n  }\n\n  lines: SecretsManagerImportErrorLine[];\n}\n","import { SecretsManagerImportedProjectRequest } from \"./sm-imported-project.request\";\nimport { SecretsManagerImportedSecretRequest } from \"./sm-imported-secret.request\";\n\nexport class SecretsManagerImportRequest {\n  projects: SecretsManagerImportedProjectRequest[];\n  secrets: SecretsManagerImportedSecretRequest[];\n}\n","import { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nexport class SecretsManagerImportedProjectRequest {\n  id: string;\n  name: EncString;\n}\n","import { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nexport class SecretsManagerImportedSecretRequest {\n  id: string;\n  key: EncString;\n  value: EncString;\n  note: EncString;\n  projectIds: string[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class SecretsManagerExportedProjectResponse extends BaseResponse {\n  id: string;\n  name: string;\n\n  constructor(response: any) {\n    super(response);\n\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class SecretsManagerExportedSecretResponse extends BaseResponse {\n  id: string;\n  key: string;\n  value: string;\n  note: string;\n  projectIds: string[];\n\n  constructor(response: any) {\n    super(response);\n\n    this.id = this.getResponseProperty(\"Id\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.value = this.getResponseProperty(\"Value\");\n    this.note = this.getResponseProperty(\"Note\");\n\n    const projectIds = this.getResponseProperty(\"ProjectIds\");\n    this.projectIds = projectIds?.map((id: any) => id.toString());\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretsManagerExportedProjectResponse } from \"./sm-exported-project.response\";\nimport { SecretsManagerExportedSecretResponse } from \"./sm-exported-secret.response\";\n\nexport class SecretsManagerExportResponse extends BaseResponse {\n  projects: SecretsManagerExportedProjectResponse[];\n  secrets: SecretsManagerExportedSecretResponse[];\n\n  constructor(response: any) {\n    super(response);\n\n    const projects = this.getResponseProperty(\"Projects\");\n    const secrets = this.getResponseProperty(\"Secrets\");\n\n    this.projects = projects?.map((k: any) => new SecretsManagerExportedProjectResponse(k));\n    this.secrets = secrets?.map((k: any) => new SecretsManagerExportedSecretResponse(k));\n  }\n}\n","export class SecretsManagerExport {\n  projects: SecretsManagerExportProject[];\n  secrets: SecretsManagerExportSecret[];\n}\n\nexport class SecretsManagerExportProject {\n  id: string;\n  name: string;\n}\n\nexport class SecretsManagerExportSecret {\n  id: string;\n  key: string;\n  value: string;\n  note: string;\n  projectIds: string[];\n}\n","import { Injectable } from \"@angular/core\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nimport { SecretsManagerImportError } from \"../models/error/sm-import-error\";\nimport { SecretsManagerImportRequest } from \"../models/requests/sm-import.request\";\nimport { SecretsManagerImportedProjectRequest } from \"../models/requests/sm-imported-project.request\";\nimport { SecretsManagerImportedSecretRequest } from \"../models/requests/sm-imported-secret.request\";\nimport { SecretsManagerExportResponse } from \"../models/responses/sm-export.response\";\nimport {\n  SecretsManagerExport,\n  SecretsManagerExportProject,\n  SecretsManagerExportSecret,\n} from \"../models/sm-export\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SecretsManagerPortingApiService {\n  constructor(\n    private apiService: ApiService,\n    private encryptService: EncryptService,\n    private cryptoService: CryptoService,\n    private i18nService: I18nService\n  ) {}\n\n  async export(organizationId: string): Promise<string> {\n    const response = await this.apiService.send(\n      \"GET\",\n      \"/sm/\" + organizationId + \"/export\",\n      null,\n      true,\n      true\n    );\n\n    return JSON.stringify(\n      await this.decryptExport(organizationId, new SecretsManagerExportResponse(response)),\n      null,\n      \"  \"\n    );\n  }\n\n  async import(organizationId: string, fileContents: string): Promise<SecretsManagerImportError> {\n    let requestObject = {};\n\n    try {\n      requestObject = JSON.parse(fileContents);\n      const requestBody = await this.encryptImport(organizationId, requestObject);\n\n      await this.apiService.send(\n        \"POST\",\n        \"/sm/\" + organizationId + \"/import\",\n        requestBody,\n        true,\n        true\n      );\n    } catch (error) {\n      const errorResponse = new ErrorResponse(error, 400);\n      return this.handleServerError(errorResponse, requestObject);\n    }\n  }\n\n  private async encryptImport(\n    organizationId: string,\n    importData: any\n  ): Promise<SecretsManagerImportRequest> {\n    const encryptedImport = new SecretsManagerImportRequest();\n\n    try {\n      const orgKey = await this.cryptoService.getOrgKey(organizationId);\n      encryptedImport.projects = [];\n      encryptedImport.secrets = [];\n\n      encryptedImport.projects = await Promise.all(\n        importData.projects.map(async (p: any) => {\n          const project = new SecretsManagerImportedProjectRequest();\n          project.id = p.id;\n          project.name = await this.encryptService.encrypt(p.name, orgKey);\n          return project;\n        })\n      );\n\n      encryptedImport.secrets = await Promise.all(\n        importData.secrets.map(async (s: any) => {\n          const secret = new SecretsManagerImportedSecretRequest();\n\n          [secret.key, secret.value, secret.note] = await Promise.all([\n            this.encryptService.encrypt(s.key, orgKey),\n            this.encryptService.encrypt(s.value, orgKey),\n            this.encryptService.encrypt(s.note, orgKey),\n          ]);\n\n          secret.id = s.id;\n          secret.projectIds = s.projectIds;\n\n          return secret;\n        })\n      );\n    } catch (error) {\n      return null;\n    }\n\n    return encryptedImport;\n  }\n\n  private async decryptExport(\n    organizationId: string,\n    exportData: SecretsManagerExportResponse\n  ): Promise<SecretsManagerExport> {\n    const orgKey = await this.cryptoService.getOrgKey(organizationId);\n    const decryptedExport = new SecretsManagerExport();\n    decryptedExport.projects = [];\n    decryptedExport.secrets = [];\n\n    decryptedExport.projects = await Promise.all(\n      exportData.projects.map(async (p) => {\n        const project = new SecretsManagerExportProject();\n        project.id = p.id;\n        project.name = await this.encryptService.decryptToUtf8(new EncString(p.name), orgKey);\n        return project;\n      })\n    );\n\n    decryptedExport.secrets = await Promise.all(\n      exportData.secrets.map(async (s) => {\n        const secret = new SecretsManagerExportSecret();\n\n        [secret.key, secret.value, secret.note] = await Promise.all([\n          this.encryptService.decryptToUtf8(new EncString(s.key), orgKey),\n          this.encryptService.decryptToUtf8(new EncString(s.value), orgKey),\n          this.encryptService.decryptToUtf8(new EncString(s.note), orgKey),\n        ]);\n\n        secret.id = s.id;\n        secret.projectIds = s.projectIds;\n\n        return secret;\n      })\n    );\n\n    return decryptedExport;\n  }\n\n  private handleServerError(\n    errorResponse: ErrorResponse,\n    importResult: any\n  ): SecretsManagerImportError {\n    if (errorResponse.validationErrors == null) {\n      return new SecretsManagerImportError(errorResponse.message);\n    }\n\n    const result = new SecretsManagerImportError();\n    result.lines = [];\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const id = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Projects\":\n          item = importResult.projects[id];\n          itemType = \"Project\";\n          break;\n        case \"Secrets\":\n          item = importResult.secrets[id];\n          itemType = \"Secret\";\n          break;\n        default:\n          return;\n      }\n\n      result.lines.push({\n        id: id + 1,\n        type: itemType == \"Project\" ? \"Project\" : \"Secret\",\n        key: item.key,\n        errorMessage: value.length > 0 ? value[0] : \"\",\n      });\n    });\n\n    return result;\n  }\n}\n","import { formatDate } from \"@angular/common\";\nimport { Injectable } from \"@angular/core\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SecretsManagerPortingService {\n  constructor(private i18nService: I18nService) {}\n\n  async getFileName(prefix: string = null, extension = \"json\"): Promise<string> {\n    const locale = await firstValueFrom(this.i18nService.locale$);\n    const dateString = formatDate(new Date(), \"yyyyMMddHHmmss\", locale);\n    return \"bitwarden\" + (prefix ? \"_\" + prefix : \"\") + \"_export_\" + dateString + \".\" + extension;\n  }\n}\n","<sm-header></sm-header>\n\n<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <div class=\"tw-my-4 tw-max-w-xl\">\n    <app-callout type=\"info\" title=\"{{ 'exportingOrganizationSecretDataTitle' | i18n }}\">\n      {{ \"exportingOrganizationSecretDataDescription\" | i18n : orgName }}\n    </app-callout>\n  </div>\n\n  <bit-form-field class=\"tw-max-w-sm\">\n    <bit-label>{{ \"fileFormat\" | i18n }}</bit-label>\n    <select bitInput formControlName=\"format\">\n      <option *ngFor=\"let format of exportFormats; let i = index\" [value]=\"i\">\n        {{ format.name }}\n      </option>\n    </select>\n  </bit-form-field>\n\n  <button bitButton bitFormButton type=\"submit\" buttonType=\"primary\">\n    {{ \"exportData\" | i18n }}\n  </button>\n</form>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { firstValueFrom, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { openUserVerificationPrompt } from \"@bitwarden/web-vault/app/auth/shared/components/user-verification\";\n\nimport { SecretsManagerPortingApiService } from \"../services/sm-porting-api.service\";\nimport { SecretsManagerPortingService } from \"../services/sm-porting.service\";\n\ntype ExportFormat = {\n  name: string;\n  fileExtension: string;\n};\n\n@Component({\n  selector: \"sm-export\",\n  templateUrl: \"./sm-export.component.html\",\n})\nexport class SecretsManagerExportComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n\n  protected orgName: string;\n  protected orgId: string;\n  protected exportFormats: ExportFormat[] = [{ name: \"Bitwarden (json)\", fileExtension: \"json\" }];\n\n  protected formGroup = new FormGroup({\n    format: new FormControl(0, [Validators.required]),\n  });\n\n  constructor(\n    private route: ActivatedRoute,\n    private i18nService: I18nService,\n    private organizationService: OrganizationService,\n    private platformUtilsService: PlatformUtilsService,\n    private smPortingService: SecretsManagerPortingService,\n    private fileDownloadService: FileDownloadService,\n    private logService: LogService,\n    private dialogService: DialogServiceAbstraction,\n    private secretsManagerApiService: SecretsManagerPortingApiService\n  ) {}\n\n  async ngOnInit() {\n    this.route.params\n      .pipe(\n        switchMap(async (params) => await this.organizationService.get(params.organizationId)),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((organization) => {\n        this.orgName = organization.name;\n        this.orgId = organization.id;\n      });\n\n    this.formGroup.get(\"format\").disable();\n  }\n\n  async ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    await this.doExport();\n  };\n\n  private async doExport() {\n    const fileExtension = this.exportFormats[this.formGroup.get(\"format\").value].fileExtension;\n    const exportData = await this.secretsManagerApiService.export(this.orgId);\n\n    await this.downloadFile(exportData, fileExtension);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"dataExportSuccess\"));\n  }\n\n  private async downloadFile(data: string, format: string) {\n    const fileName = await this.smPortingService.getFileName(null, format);\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: data,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n\n  private verifyUser() {\n    const ref = openUserVerificationPrompt(this.dialogService, {\n      data: {\n        confirmDescription: \"exportSecretsWarningDesc\",\n        confirmButtonText: \"exportSecrets\",\n        modalTitle: \"confirmSecretsExport\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return firstValueFrom(ref.closed);\n  }\n}\n","<bit-dialog dialogSize=\"large\">\n  <span bitDialogTitle>\n    {{ \"importError\" | i18n }}\n  </span>\n  <span bitDialogContent>\n    <div>{{ \"resolveTheErrorsBelowAndTryAgain\" | i18n }}</div>\n    <bit-table>\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"name\" | i18n }}</th>\n          <th bitCell>{{ \"description\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body>\n        <tr bitRow *ngFor=\"let line of errorLines\">\n          <td bitCell class=\"tw-whitespace-nowrap\">\n            [{{ line.id }}] [{{ line.type }}] {{ line.key }}\n          </td>\n          <td bitCell>{{ line.errorMessage }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </span>\n  <ng-container bitDialogFooter>\n    <button bitButton bitDialogClose buttonType=\"primary\" type=\"button\">\n      {{ \"ok\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\n\nimport { SecretsManagerImportError } from \"../models/error/sm-import-error\";\nimport { SecretsManagerImportErrorLine } from \"../models/error/sm-import-error-line\";\n\nexport interface SecretsManagerImportErrorDialogOperation {\n  error: SecretsManagerImportError;\n}\n\n@Component({\n  templateUrl: \"./sm-import-error-dialog.component.html\",\n})\nexport class SecretsManagerImportErrorDialogComponent {\n  errorLines: SecretsManagerImportErrorLine[];\n\n  constructor(\n    public dialogRef: DialogRef,\n    private i18nService: I18nService,\n    @Inject(DIALOG_DATA) public data: SecretsManagerImportErrorDialogOperation\n  ) {\n    this.errorLines = data.error.lines;\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport {\n  SecretsManagerImportErrorDialogComponent,\n  SecretsManagerImportErrorDialogOperation,\n} from \"../dialog/sm-import-error-dialog.component\";\nimport { SecretsManagerImportError } from \"../models/error/sm-import-error\";\nimport { SecretsManagerPortingApiService } from \"../services/sm-porting-api.service\";\n\n@Component({\n  selector: \"sm-import\",\n  templateUrl: \"./sm-import.component.html\",\n})\nexport class SecretsManagerImportComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  protected orgId: string = null;\n  protected selectedFile: File;\n  protected formGroup = new FormGroup({\n    pastedContents: new FormControl(\"\"),\n  });\n\n  constructor(\n    private route: ActivatedRoute,\n    private i18nService: I18nService,\n    private organizationService: OrganizationService,\n    private platformUtilsService: PlatformUtilsService,\n    protected fileDownloadService: FileDownloadService,\n    private logService: LogService,\n    private secretsManagerPortingApiService: SecretsManagerPortingApiService,\n    private dialogService: DialogServiceAbstraction\n  ) {}\n\n  async ngOnInit() {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.orgId = params.organizationId;\n    });\n  }\n\n  async ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    const fileElement = document.getElementById(\"file\") as HTMLInputElement;\n    const importContents = await this.getImportContents(\n      fileElement,\n      this.formGroup.get(\"pastedContents\").value.trim()\n    );\n\n    if (importContents == null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      return;\n    }\n\n    try {\n      const error = await this.secretsManagerPortingApiService.import(this.orgId, importContents);\n\n      if (error?.lines?.length > 0) {\n        this.openImportErrorDialog(error);\n        return;\n      } else if (error != null) {\n        this.platformUtilsService.showToast(\n          \"error\",\n          this.i18nService.t(\"errorOccurred\"),\n          this.i18nService.t(\"errorReadingImportFile\")\n        );\n        return;\n      }\n\n      this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"importSuccess\"));\n      this.clearForm();\n    } catch (error) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"errorReadingImportFile\")\n      );\n      this.logService.error(error);\n    }\n  };\n\n  protected async getImportContents(\n    fileElement: HTMLInputElement,\n    pastedContents: string\n  ): Promise<string> {\n    const files = fileElement.files;\n\n    if (\n      (files == null || files.length === 0) &&\n      (pastedContents == null || pastedContents === \"\")\n    ) {\n      return null;\n    }\n\n    let fileContents = pastedContents;\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      return null;\n    }\n\n    return fileContents;\n  }\n\n  protected setSelectedFile(event: Event) {\n    const fileInputEl = <HTMLInputElement>event.target;\n    const file = fileInputEl.files.length > 0 ? fileInputEl.files[0] : null;\n    this.selectedFile = file;\n  }\n\n  private clearForm() {\n    (document.getElementById(\"file\") as HTMLInputElement).value = \"\";\n    this.selectedFile = null;\n    this.formGroup.reset({\n      pastedContents: \"\",\n    });\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private openImportErrorDialog(error: SecretsManagerImportError) {\n    this.dialogService.open<unknown, SecretsManagerImportErrorDialogOperation>(\n      SecretsManagerImportErrorDialogComponent,\n      {\n        data: {\n          error: error,\n        },\n      }\n    );\n  }\n}\n","<sm-header></sm-header>\n\n<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\" class=\"tw-max-w-xl\">\n  <bit-form-field>\n    <bit-label>{{ \"fileUpload\" | i18n }}</bit-label>\n    <div class=\"file-selector\">\n      <button bitButton type=\"button\" buttonType=\"secondary\" (click)=\"fileSelector.click()\">\n        {{ \"chooseFile\" | i18n }}\n      </button>\n      {{ selectedFile?.name ?? (\"noFileChosen\" | i18n) }}\n    </div>\n    <input\n      #fileSelector\n      hidden\n      bitInput\n      type=\"file\"\n      id=\"file\"\n      class=\"form-control-file\"\n      name=\"file\"\n      (change)=\"setSelectedFile($event)\"\n      accept=\"application/JSON\"\n    />\n    <bit-hint>{{ \"acceptedFormats\" | i18n }} Bitwarden (json)</bit-hint>\n  </bit-form-field>\n  <div class=\"my-4\">\n    {{ \"or\" | i18n }}\n  </div>\n  <bit-form-field>\n    <bit-label for=\"pastedContents\">{{ \"copyPasteImportContents\" | i18n }}</bit-label>\n    <textarea\n      bitInput\n      id=\"pastedContents\"\n      class=\"form-control\"\n      name=\"FileContents\"\n      formControlName=\"pastedContents\"\n    ></textarea>\n    <bit-hint>{{ \"acceptedFormats\" | i18n }} Bitwarden (json)</bit-hint>\n  </bit-form-field>\n  <button bitButton bitFormButton type=\"submit\" buttonType=\"primary\">\n    {{ \"importData\" | i18n }}\n  </button>\n</form>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { OrganizationPermissionsGuard } from \"@bitwarden/web-vault/app/admin-console/organizations/guards/org-permissions.guard\";\n\nimport { SecretsManagerExportComponent } from \"./porting/sm-export.component\";\nimport { SecretsManagerImportComponent } from \"./porting/sm-import.component\";\n\nconst routes: Routes = [\n  {\n    path: \"import\",\n    component: SecretsManagerImportComponent,\n    canActivate: [OrganizationPermissionsGuard],\n    data: {\n      titleId: \"importData\",\n      organizationPermissions: (org: Organization) => org.isAdmin,\n    },\n  },\n  {\n    path: \"export\",\n    component: SecretsManagerExportComponent,\n    canActivate: [OrganizationPermissionsGuard],\n    data: {\n      titleId: \"exportData\",\n      organizationPermissions: (org: Organization) => org.isAdmin,\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { SecretsManagerImportErrorDialogComponent } from \"./dialog/sm-import-error-dialog.component\";\nimport { SecretsManagerExportComponent } from \"./porting/sm-export.component\";\nimport { SecretsManagerImportComponent } from \"./porting/sm-import.component\";\nimport { SecretsManagerPortingApiService } from \"./services/sm-porting-api.service\";\nimport { SecretsManagerPortingService } from \"./services/sm-porting.service\";\nimport { SettingsRoutingModule } from \"./settings-routing.module\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, SettingsRoutingModule],\n  declarations: [\n    SecretsManagerImportComponent,\n    SecretsManagerExportComponent,\n    SecretsManagerImportErrorDialogComponent,\n  ],\n  providers: [SecretsManagerPortingService, SecretsManagerPortingApiService],\n})\nexport class SettingsModule {}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { SecretService } from \"../../secrets/secret.service\";\n\nexport interface SecretHardDeleteOperation {\n  secretIds: string[];\n  organizationId: string;\n}\n\n@Component({\n  templateUrl: \"./secret-hard-delete.component.html\",\n})\nexport class SecretHardDeleteDialogComponent {\n  constructor(\n    public dialogRef: DialogRef,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    @Inject(DIALOG_DATA) public data: SecretHardDeleteOperation\n  ) {}\n\n  get title() {\n    return this.data.secretIds.length === 1 ? \"hardDeleteSecret\" : \"hardDeleteSecrets\";\n  }\n\n  get submitButtonText() {\n    return this.data.secretIds.length === 1 ? \"deleteSecret\" : \"deleteSecrets\";\n  }\n\n  delete = async () => {\n    await this.secretService.deleteTrashed(this.data.organizationId, this.data.secretIds);\n    const message =\n      this.data.secretIds.length === 1 ? \"hardDeleteSuccessToast\" : \"hardDeletesSuccessToast\";\n    this.dialogRef.close(this.data.secretIds);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  };\n}\n","<bit-simple-dialog>\n  <span bitDialogTitle>{{ title | i18n }}</span>\n  <span bitDialogContent>\n    {{\n      data.secretIds.length === 1\n        ? (\"hardDeleteSecretConfirmation\" | i18n)\n        : (\"hardDeleteSecretsConfirmation\" | i18n)\n    }}\n  </span>\n  <ng-container bitDialogFooter>\n    <button type=\"button\" bitButton buttonType=\"primary\" [bitAction]=\"delete\">\n      {{ submitButtonText | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-simple-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { SecretService } from \"../../secrets/secret.service\";\n\nexport interface SecretRestoreOperation {\n  secretIds: string[];\n  organizationId: string;\n}\n\n@Component({\n  templateUrl: \"./secret-restore.component.html\",\n})\nexport class SecretRestoreDialogComponent {\n  constructor(\n    public dialogRef: DialogRef,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    @Inject(DIALOG_DATA) public data: SecretRestoreOperation\n  ) {}\n\n  get title() {\n    return this.data.secretIds.length === 1 ? \"restoreSecret\" : \"restoreSecrets\";\n  }\n\n  restore = async () => {\n    let message = \"\";\n    await this.secretService.restoreTrashed(this.data.organizationId, this.data.secretIds);\n    message =\n      this.data.secretIds.length === 1\n        ? \"secretRestoredSuccessToast\"\n        : \"secretsRestoredSuccessToast\";\n    this.dialogRef.close(this.data.secretIds);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  };\n}\n","<bit-simple-dialog>\n  <span bitDialogTitle>{{ title | i18n }}</span>\n  <span bitDialogContent>\n    {{\n      data.secretIds.length === 1 ? (\"restoreSecretPrompt\" | i18n) : (\"restoreSecretsPrompt\" | i18n)\n    }}\n  </span>\n  <ng-container bitDialogFooter>\n    <button type=\"button\" bitButton buttonType=\"primary\" [bitAction]=\"restore\">\n      {{ title | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-simple-dialog>\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport { SecretService } from \"../secrets/secret.service\";\n\nimport {\n  SecretHardDeleteDialogComponent,\n  SecretHardDeleteOperation,\n} from \"./dialog/secret-hard-delete.component\";\nimport {\n  SecretRestoreDialogComponent,\n  SecretRestoreOperation,\n} from \"./dialog/secret-restore.component\";\n\n@Component({\n  selector: \"sm-trash\",\n  templateUrl: \"./trash.component.html\",\n})\nexport class TrashComponent implements OnInit {\n  secrets$: Observable<SecretListView[]>;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private secretService: SecretService,\n    private dialogService: DialogServiceAbstraction\n  ) {}\n\n  ngOnInit() {\n    this.secrets$ = this.secretService.secret$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getSecrets();\n      })\n    );\n  }\n\n  private async getSecrets(): Promise<SecretListView[]> {\n    return await this.secretService.getTrashedSecrets(this.organizationId);\n  }\n\n  openDeleteSecret(secrets: SecretListView[]) {\n    const secretIds = secrets.map((secret) => secret.id);\n\n    this.dialogService.open<unknown, SecretHardDeleteOperation>(SecretHardDeleteDialogComponent, {\n      data: {\n        secretIds: secretIds,\n        organizationId: this.organizationId,\n      },\n    });\n  }\n\n  openRestoreSecret(secretIds: string[]) {\n    this.dialogService.open<unknown, SecretRestoreOperation>(SecretRestoreDialogComponent, {\n      data: {\n        secretIds: secretIds,\n        organizationId: this.organizationId,\n      },\n    });\n  }\n}\n","<sm-header>\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n<bit-callout type=\"warning\" [title]=\"'warning' | i18n\">{{\n  \"trashCleanupWarning\" | i18n\n}}</bit-callout>\n<sm-secrets-list\n  (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n  (restoreSecretsEvent)=\"openRestoreSecret($event)\"\n  [secrets]=\"secrets$ | async\"\n  [trash]=\"true\"\n></sm-secrets-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { TrashComponent } from \"./trash.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: TrashComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TrashRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { SecretHardDeleteDialogComponent } from \"./dialog/secret-hard-delete.component\";\nimport { SecretRestoreDialogComponent } from \"./dialog/secret-restore.component\";\nimport { TrashRoutingModule } from \"./trash-routing.module\";\nimport { TrashComponent } from \"./trash.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, TrashRoutingModule],\n  declarations: [SecretHardDeleteDialogComponent, SecretRestoreDialogComponent, TrashComponent],\n  providers: [],\n})\nexport class TrashModule {}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { AuthGuard } from \"@bitwarden/angular/auth/guards/auth.guard\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { OrganizationPermissionsGuard } from \"@bitwarden/web-vault/app/admin-console/organizations/guards/org-permissions.guard\";\nimport { buildFlaggedRoute } from \"@bitwarden/web-vault/app/oss-routing.module\";\n\nimport { LayoutComponent } from \"./layout/layout.component\";\nimport { NavigationComponent } from \"./layout/navigation.component\";\nimport { OverviewModule } from \"./overview/overview.module\";\nimport { ProjectsModule } from \"./projects/projects.module\";\nimport { SecretsModule } from \"./secrets/secrets.module\";\nimport { ServiceAccountsModule } from \"./service-accounts/service-accounts.module\";\nimport { SettingsModule } from \"./settings/settings.module\";\nimport { canActivateSM } from \"./sm.guard\";\nimport { TrashModule } from \"./trash/trash.module\";\n\nconst routes: Routes = [\n  buildFlaggedRoute(\"secretsManager\", {\n    path: \"\",\n    children: [\n      {\n        path: \"\",\n        canActivate: [canActivateSM],\n        pathMatch: \"full\",\n        children: [],\n      },\n      {\n        path: \":organizationId\",\n        component: LayoutComponent,\n        canActivate: [AuthGuard, OrganizationPermissionsGuard],\n        data: {\n          organizationPermissions: (org: Organization) => org.canAccessSecretsManager,\n        },\n        children: [\n          {\n            path: \"\",\n            component: NavigationComponent,\n            outlet: \"sidebar\",\n          },\n          {\n            path: \"secrets\",\n            loadChildren: () => SecretsModule,\n            data: {\n              titleId: \"secrets\",\n            },\n          },\n          {\n            path: \"projects\",\n            loadChildren: () => ProjectsModule,\n            data: {\n              titleId: \"projects\",\n            },\n          },\n          {\n            path: \"service-accounts\",\n            loadChildren: () => ServiceAccountsModule,\n            data: {\n              titleId: \"serviceAccounts\",\n            },\n          },\n          {\n            path: \"trash\",\n            loadChildren: () => TrashModule,\n            data: {\n              titleId: \"trash\",\n            },\n          },\n          {\n            path: \"settings\",\n            loadChildren: () => SettingsModule,\n          },\n          {\n            path: \"\",\n            loadChildren: () => OverviewModule,\n            pathMatch: \"full\",\n          },\n        ],\n      },\n    ],\n  }),\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SecretsManagerRoutingModule {}\n","import { inject } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  CanActivateFn,\n  createUrlTreeFromSnapshot,\n  RouterStateSnapshot,\n} from \"@angular/router\";\n\nimport { AuthGuard } from \"@bitwarden/angular/auth/guards/auth.guard\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\n\n/**\n * Redirects from root `/sm` to first organization with access to SM\n */\nexport const canActivateSM: CanActivateFn = async (\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot\n) => {\n  const syncService = inject(SyncService);\n  const authService = inject(AuthService);\n  const orgService = inject(OrganizationService);\n  const authGuard = inject(AuthGuard);\n\n  /** Workaround to avoid service initialization race condition. */\n  if ((await syncService.getLastSync()) == null) {\n    await syncService.fullSync(false);\n  }\n\n  if ((await authService.getAuthStatus()) !== AuthenticationStatus.Unlocked) {\n    return authGuard.canActivate(route, state);\n  }\n\n  const orgs = await orgService.getAll();\n  const smOrg = orgs.find((o) => o.canAccessSecretsManager);\n  if (smOrg) {\n    return createUrlTreeFromSnapshot(route, [\"/sm\", smOrg.id]);\n  }\n  return createUrlTreeFromSnapshot(route, [\"/vault\"]);\n};\n","import { NgModule } from \"@angular/core\";\n\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared\";\n\nimport { LayoutModule } from \"./layout/layout.module\";\nimport { SecretsManagerSharedModule } from \"./shared/sm-shared.module\";\nimport { SecretsManagerRoutingModule } from \"./sm-routing.module\";\n\n@NgModule({\n  imports: [SharedModule, SecretsManagerSharedModule, SecretsManagerRoutingModule, LayoutModule],\n})\nexport class SecretsManagerModule {}\n","<div [ngClass]=\"outerBarStyles\">\n  <div\n    [ngClass]=\"innerBarStyles\"\n    role=\"progressbar\"\n    aria-valuemin=\"0\"\n    aria-valuemax=\"100\"\n    attr.aria-valuenow=\"{{ barWidth }}\"\n    [ngStyle]=\"{ width: barWidth + '%' }\"\n  >\n    <div\n      *ngIf=\"displayText\"\n      class=\"tw-flex tw-h-full tw-flex-wrap tw-items-center tw-overflow-hidden\"\n    >\n      <!-- If text is too long to fit, wrap it below to hide -->\n      <div class=\"tw-h-full\">&nbsp;</div>\n      <div class=\"tw-pr-1\">{{ textContent }}</div>\n    </div>\n  </div>\n</div>\n","import { Component, Input } from \"@angular/core\";\n\ntype SizeTypes = \"small\" | \"default\" | \"large\";\ntype BackgroundTypes = \"danger\" | \"primary\" | \"success\" | \"warning\";\n\nconst SizeClasses: Record<SizeTypes, string[]> = {\n  small: [\"tw-h-1\"],\n  default: [\"tw-h-4\"],\n  large: [\"tw-h-6\"],\n};\n\nconst BackgroundClasses: Record<BackgroundTypes, string[]> = {\n  danger: [\"tw-bg-danger-500\"],\n  primary: [\"tw-bg-primary-500\"],\n  success: [\"tw-bg-success-500\"],\n  warning: [\"tw-bg-warning-500\"],\n};\n\n@Component({\n  selector: \"bit-progress\",\n  templateUrl: \"./progress.component.html\",\n})\nexport class ProgressComponent {\n  @Input() barWidth = 0;\n  @Input() bgColor: BackgroundTypes = \"primary\";\n  @Input() showText = true;\n  @Input() size: SizeTypes = \"default\";\n  @Input() text?: string;\n\n  get displayText() {\n    return this.showText && this.size !== \"small\";\n  }\n\n  get outerBarStyles() {\n    return [\"tw-overflow-hidden\", \"tw-rounded\", \"tw-bg-secondary-100\"].concat(\n      SizeClasses[this.size]\n    );\n  }\n\n  get innerBarStyles() {\n    return [\n      \"tw-flex\",\n      \"tw-justify-center\",\n      \"tw-items-center\",\n      \"tw-whitespace-nowrap\",\n      \"tw-text-xs\",\n      \"tw-font-semibold\",\n      \"tw-text-contrast\",\n      \"tw-transition-all\",\n    ]\n      .concat(SizeClasses[this.size])\n      .concat(BackgroundClasses[this.bgColor]);\n  }\n\n  get textContent() {\n    return this.text || this.barWidth + \"%\";\n  }\n}\n"],"names":["NavigationModule","LayoutModule","SecretsManagerSharedModule","D","LayoutComponent","ngOnInit","document","body","classList","remove","NavBaseComponent","variant","treeDepth","hideActiveStyles","mainContentClicked","setActive","NavItemComponent","_active","rlaOptions","paths","queryParams","fragment","matrixParams","focusVisibleWithin$","BehaviorSubject","fvwStyles$","this","pipe","map","value","isActive","showActiveStyles","exactMatch","val","onFocusIn","target","next","matches","onFocusOut","toggle","NavGroupComponent","contentId","Math","random","toString","substring","open","openChange","event","stopPropagation","emit","initNestedStyles","nestedGroups","nestedItems","forEach","navGroupOrItem","ngAfterContentInit","NavDividerComponent","OrgSwitcherComponent","constructor","route","organizationService","organizations$","orgs","filter","sort","a","b","name","localeCompare","activeOrganization$","combineLatest","paramMap","params","find","org","id","get","hideNewButton","NavigationComponent","logo","orgFilter","canAccessSecretsManager","isAdmin$","organizationId","isAdmin","OnboardingModule","BulkOperationStatus","BulkStatusDialogComponent","dialogRef","data","title","subTitle","columnTitle","message","details","length","close","Error","ProjectListView","ProjectView","ProjectRequest","ProjectListItemResponse","response","super","getResponseProperty","creationDate","revisionDate","read","write","ProjectResponse","ProjectService","cryptoService","apiService","encryptService","_project","Subject","project$","asObservable","getByProjectId","projectId","r","send","projectResponse","createProjectView","getProjects","results","L","createProjectsListView","create","projectView","request","getProjectRequest","project","update","delete","projects","projectIds","element","bulkOperationStatus","errorMessage","error","getOrganizationKey","getOrgKey","orgKey","encrypt","decryptToUtf8","Promise","all","s","projectListView","ProjectDeleteDialogComponent","projectService","i18nService","platformUtilsService","dialogService","formGroup","confirmDelete","matchConfirmationMessageValidator","submit","markAllAsTouched","invalid","dialogContent","t","dialogConfirmationLabel","dialogConfirmationMessage","bulkResponses","openBulkStatusDialog","showToast","bulkStatusResults","control","toLowerCase","confirmationDoesntMatchError","trimValidator","trim","setValue","OperationType","ProjectDialogComponent","router","validators","required","updateOn","loading","getProjectView","operation","Add","newProject","createProject","navigate","updateProject","Edit","loadData","SecretListView","SecretProjectView","SecretView","SecretRequest","SecretProjectResponse","SecretListItemResponse","k","SecretWithProjectsListResponse","secrets","dr","SecretResponse","note","SecretService","_secret","secret$","getBySecretId","secretId","secretResponse","createSecretView","getSecrets","createSecretsListView","getSecretsByProject","secretView","getSecretRequest","secretIds","secret","getTrashedSecrets","deleteTrashed","restoreTrashed","key","encryptedString","e","push","decryptProjectsMappedToSecrets","projectsMappedToSecretsView","secretListView","p","includes","projectsMappedToSecretView","SecretDeleteDialogComponent","secretService","showSoftDeleteSecretWarning","submitButtonText","openDeleteSecretDialog","SecretDialogComponent","notes","newProjectName","destroy$","addNewProject","newProjectGuid","newGuid","getSecretView","getNewProjectView","createSecret","updateSecret","loadProjects","addNewProjectOptionToProjectsDropDown","removeValidators","updateValueAndValidity","disable","enable","filterByPermission","then","ngOnDestroy","complete","valueChanges","takeUntil","subscribe","dropDownSelected","unshift","addValidators","clearValidators","showSpinner","deleteButtonIsVisible","getSecretListView","lastValueFrom","closed","closeData","undefined","secretListViews","emptyProjects","ServiceAccountView","ServiceAccountRequest","ServiceAccountResponse","ServiceAccountService","_serviceAccount","serviceAccount$","getServiceAccounts","createServiceAccountViews","getByServiceAccountId","serviceAccountId","createServiceAccountView","serviceAccountView","getServiceAccountRequest","serviceAccounts","ids","serviceAccount","sa","organizationKey","serviceAccountResponse","serviceAccountResponses","ServiceAccountDialogComponent","serviceAccountService","getServiceAccountView","serviceAccountMessage","patchValue","newSecretEvent","editSecretEvent","copySecretNameEvent","copySecretValueEvent","restoreSecretsEvent","deleteSecretsEvent","$event","selection","toggleAll","bulkRestoreSecrets","SecretsListComponent","_secrets","clear","dataSource","search","onSecretCheckedEvent","sortProjects","aProjects","bProjects","changed","_","selected","isAllSelected","filteredData","select","bulkDeleteSecrets","isSelected","static","copyToClipboard","copyToClipboardAsync","text","isSafari","navigator","clipboard","ClipboardItem","lock","logout","HeaderComponent","stateService","messagingService","routeData$","titleId","account$","activeAccount$","accounts$","activeAccount","accounts","profile","NewMenuComponent","openSecretDialog","openProjectDialog","openServiceAccountDialog","newProjectEvent","editProjectEvent","deleteProject","ProjectsListComponent","_projects","deleteProjectEvent","hasWriteAccessOnSelected$","selectedHasWriteAccess","bulkDeleteProjects","some","OnboardingTaskComponent","completed","icon","handleClick","ev","OnboardingComponent","dismiss","visible","amountCompleted","tasks","task","barWidth","SectionComponent","openNewProjectDialog","hideOnboarding","openEditProject","openDeleteProjectDialog","openDeleteSecret","openNewSecretDialog","openEditSecret","copySecretName","copySecretValue","OverviewComponent","tableSize","showOnboarding","orgId$","distinctUntilChanged","orgId","organizationName","userIsAdmin","projects$","startWith","switchMap","share","secrets$","serviceAccounts$","view$","latestProjects","getRecentItems","latestSecrets","allProjects","allSecrets","saveCompletedTasks","importSecrets","createServiceAccount","take","view","Object","values","items","Date","getTime","slice","orgTasks","prevTasks","getSMOnboardingTasks","newlyCompletedOrgTasks","fromEntries","entries","_k","v","nextOrgTasks","setSMOnboardingTasks","routes","path","component","OverviewRoutingModule","forChild","OverviewModule","BaseAccessPolicyView","UserProjectAccessPolicyView","UserServiceAccountAccessPolicyView","GroupProjectAccessPolicyView","GroupServiceAccountAccessPolicyView","ServiceAccountProjectAccessPolicyView","ProjectAccessPoliciesView","ServiceAccountAccessPoliciesView","PotentialGranteeView","AccessPoliciesCreateRequest","BaseAccessPolicyResponse","UserProjectAccessPolicyResponse","organizationUserId","organizationUserName","grantedProjectId","userId","UserServiceAccountAccessPolicyResponse","grantedServiceAccountId","GroupProjectAccessPolicyResponse","groupId","groupName","currentUserInGroup","GroupServiceAccountAccessPolicyResponse","ServiceAccountProjectAccessPolicyResponse","serviceAccountName","grantedProjectName","ProjectAccessPoliciesResponse","userAccessPolicies","groupAccessPolicies","serviceAccountAccessPolicies","ServiceAccountAccessPoliciesResponse","AccessPolicyUpdateRequest","AccessPolicyRequest","GrantedPolicyRequest","PotentialGranteeResponse","type","email","AccessPolicyService","_projectAccessPolicyChanges$","_serviceAccountAccessPolicyChanges$","_serviceAccountGrantedPolicyChanges$","projectAccessPolicyChanges$","serviceAccountAccessPolicyChanges$","serviceAccountGrantedPolicyChanges$","refreshProjectAccessPolicyChanges","refreshServiceAccountAccessPolicyChanges","getGrantedPolicies","createServiceAccountProjectAccessPolicyViews","createGrantedPolicies","policies","getGrantedPoliciesCreateRequest","views","getProjectAccessPolicies","createProjectAccessPoliciesView","getServiceAccountAccessPolicies","createServiceAccountAccessPoliciesView","createProjectAccessPolicies","projectAccessPoliciesView","getAccessPoliciesCreateRequest","createServiceAccountAccessPolicies","serviceAccountAccessPoliciesView","getServiceAccountAccessPoliciesCreateRequest","deleteAccessPolicy","accessPolicyId","updateAccessPolicy","baseAccessPolicyView","payload","needToShowAccessRemovalWarning","policy","currentPolicies","organization","isOwner","currentUserId","readWriteGroupPolicies","x","readWriteUserPolicies","projectAccessPoliciesResponse","ap","createUserProjectAccessPolicyView","createGroupProjectAccessPolicyView","createServiceAccountProjectAccessPolicyView","createRequest","userAccessPolicyRequests","getAccessPolicyRequest","groupAccessPolicyRequests","serviceAccountAccessPolicyRequests","createBaseAccessPolicyView","serviceAccountAccessPoliciesResponse","createUserServiceAccountAccessPolicyView","createGroupServiceAccountAccessPolicyView","getPeoplePotentialGrantees","createPotentialGranteeViews","getServiceAccountsPotentialGrantees","getProjectsPotentialGrantees","granteeId","grantedId","responses","AccessSelectorComponent","rows","sorted","userIcon","rows$","accessPolicyService","onCreateAccessPolicies","onDeleteAccessPolicy","onUpdateAccessPolicy","maxLength","multiSelect","selectItems$","getPotentialGrantees","grantees","g","row","granteeView","listName","labelName","isNullOrWhitespace","groupIcon","serviceAccountIcon","projectIcon","selectItems","tap","reset","firstValueFrom","granteeType","item","AccessRemovalDialogComponent","removeAccess","returnRoute","getBaseAccessPolicyView","refreshPolicyChanges","cancel","ProjectPeopleComponent","handleCreateAccessPolicies","getAccessItemType","filtered","handleDeleteAccessPolicy","launchDeleteWarningDialog","validationService","showError","handleUpdateAccessPolicy","launchUpdateWarningDialog","ProjectSecretsComponent","currentProjectEdited","combineLatestWith","ProjectServiceAccountsComponent","openEditDialog","ProjectComponent","catchError","E","BulkConfirmationResult","BulkConfirmationDialogComponent","bulkConfirmationResult","ProjectsComponent","readOnlyProjects","writeProjects","getBulkConfirmationDetails","Continue","description","children","pathMatch","redirectTo","ProjectsRoutingModule","ProjectsModule","SecretsComponent","snapshot","SecretsRoutingModule","SecretsModule","AccessTokenRequest","RevokeAccessTokensRequest","AccessTokenCreationResponse","clientSecret","expireAt","AccessTokenResponse","scopes","AccessTokenView","AccessService","cryptoFunctionService","_accessTokenVersion","_accessToken","accessToken$","getAccessTokens","createAccessTokenViews","createAccessToken","accessTokenView","keyMaterial","randomBytes","hkdf","encryptionKey","createAccessTokenRequest","result","b64Key","fromBufferToB64","revokeAccessTokens","accessTokenIds","accessTokenRequest","encryptedPayload","JSON","stringify","keyB64","accessTokenResponses","AccessTokenDialogComponent","disableClose","accessToken","copyAccessToken","ExpirationOptionsComponent","touched","form","datePipe","currentDate","expires","expireDateTime","expiresInFutureValidator","_onChange","_value","onTouched","getExpiresDate","registerOnChange","fn","registerOnTouched","validate","writeValue","transform","setDisabledState","isDisabled","setDate","getDate","Number","ValidationError","provide","multi","useExisting","AccessTokenCreateDialogComponent","accessService","expirationDateControl","expirationDayOptions","openAccessTokenDialog","expirationDate","newAccessTokenEvent","revokeAccessTokensEvent","AccessListComponent","tokens","_tokens","revokeSelected","AccessTokenComponent","modalService","accessTokens$","revoke","verifyUser","openNewAccessTokenDialog","ref","confirmDescription","confirmButtonText","modalTitle","ServiceAccountPeopleComponent","simpleDialogOpts","content","WARNING","acceptButtonText","cancelButtonText","openSimpleDialogRef","ServiceAccountProjectsComponent","serviceAccountProjectAccessPolicyView","ServiceAccountComponent","onChange$","ServiceAccountDeleteDialogComponent","errors","newServiceAccountEvent","editServiceAccountEvent","ServiceAccountsListComponent","_serviceAccounts","deleteServiceAccountsEvent","onServiceAccountCheckedEvent","bulkDeleteServiceAccounts","ServiceAccountsComponent","openNewServiceAccountDialog","openEditServiceAccountDialog","openDeleteDialog","ServiceAccountsRoutingModule","ServiceAccountsModule","SecretsManagerImportError","SecretsManagerImportRequest","SecretsManagerImportedProjectRequest","SecretsManagerImportedSecretRequest","SecretsManagerExportedProjectResponse","SecretsManagerExportedSecretResponse","SecretsManagerExportResponse","SecretsManagerExport","SecretsManagerExportProject","SecretsManagerExportSecret","SecretsManagerPortingApiService","export","decryptExport","import","fileContents","requestObject","parse","requestBody","encryptImport","errorResponse","handleServerError","importData","encryptedImport","exportData","decryptedExport","importResult","validationErrors","lines","index","itemType","match","SecretsManagerPortingService","getFileName","prefix","extension","locale","locale$","dateString","SecretsManagerExportComponent","smPortingService","fileDownloadService","logService","secretsManagerApiService","exportFormats","fileExtension","format","doExport","orgName","downloadFile","fileName","download","blobData","blobOptions","SecretsManagerImportErrorDialogComponent","errorLines","SecretsManagerImportComponent","secretsManagerPortingApiService","pastedContents","fileElement","getElementById","importContents","getImportContents","openImportErrorDialog","clearForm","files","getFileContents","setSelectedFile","fileInputEl","file","selectedFile","resolve","reject","reader","FileReader","readAsText","onload","evt","onerror","canActivate","organizationPermissions","SettingsRoutingModule","SettingsModule","SecretHardDeleteDialogComponent","SecretRestoreDialogComponent","restore","TrashComponent","openRestoreSecret","TrashRoutingModule","TrashModule","state","syncService","authService","orgService","authGuard","getLastSync","fullSync","getAuthStatus","Unlocked","smOrg","getAll","o","outlet","loadChildren","SecretsManagerRoutingModule","SecretsManagerModule","SizeClasses","small","default","large","BackgroundClasses","danger","primary","success","warning","ProgressComponent","bgColor","showText","size","displayText","outerBarStyles","concat","innerBarStyles","textContent"],"sourceRoot":""}