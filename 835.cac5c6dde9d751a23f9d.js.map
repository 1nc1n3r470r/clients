{"version":3,"file":"835.cac5c6dde9d751a23f9d.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/../../libs/components/src/navigation/navigation.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/layout.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/sm-shared.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/layout.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/layout.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/secrets-manager-logo.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-base.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-item.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-item.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-group.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-group.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-divider.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/navigation/nav-divider.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/org-switcher.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/org-switcher.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/navigation.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/layout/navigation.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/progress/progress.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/dialogs/bulk-status-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/dialogs/bulk-status-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/project-list.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/project.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/models/requests/project.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/models/responses/project-list-item.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/models/responses/project.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-delete-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-delete-dialog.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/form-field/bit-validators/trim.validator.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/dialog/project-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/secret-list.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/secret-project.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/secret.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/requests/secret.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret-project.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret-list-item.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret-with-projects-list.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/responses/secret.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secret.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-delete.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-delete.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/dialog/secret-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/service-account.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/requests/service-account.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/responses/service-account.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-account.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-dialog.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/table/sortable.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/secrets-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/secrets-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/header.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/header.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/new-menu.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/projects-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/new-menu.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/projects-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding-task.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding-task.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/progress/progress.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/progress/progress.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/onboarding.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/section.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/section.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/overview/overview.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/access-policy.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/models/view/potential-grantee.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/access-policies-create.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/access-policy.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/project-access-policies.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/service-accounts-access-policies.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/access-policy-update.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/access-policy.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/requests/granted-policy.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/models/responses/potential-grantee.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-policy.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-selector.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/access-selector.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/dialogs/access-removal-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/access-policies/dialogs/access-removal-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-people.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-people.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-secrets.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-secrets.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-service-accounts.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project-service-accounts.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/project/project.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/dialogs/bulk-confirmation-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/shared/dialogs/bulk-confirmation-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects/projects.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects/projects.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/projects/projects.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets/secrets.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/requests/access-token.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/requests/revoke-access-tokens.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/responses/access-token-creation.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/responses/access-tokens.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/models/view/access-token.view.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/expiration-options.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/expiration-options.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-create-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/dialogs/access-token-create-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-tokens.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/access/access-tokens.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/people/service-account-people.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/people/service-account-people.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/projects/service-account-projects.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/projects/service-account-projects.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-account.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-account.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-delete-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/dialog/service-account-delete-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts-list.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts-list.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/service-accounts/service-accounts.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/error/sm-import-error.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/requests/sm-import.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/requests/sm-imported-project.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/requests/sm-imported-secret.request.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/responses/sm-exported-project.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/responses/sm-exported-secret.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/responses/sm-export.response.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/models/sm-export.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/services/sm-porting-api.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/services/sm-porting.service.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-export.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-export.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/dialog/sm-import-error-dialog.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/dialog/sm-import-error-dialog.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-import.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/porting/sm-import.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/settings-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/settings/settings.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/dialog/secret-hard-delete.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/dialog/secret-hard-delete.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/dialog/secret-restore.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/dialog/secret-restore.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/trash.component.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/trash.component.html","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/trash-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/trash/trash.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/sm-routing.module.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/sm.guard.ts","webpack://@bitwarden/web-vault/../../bitwarden_license/bit-web/src/app/secrets-manager/secrets-manager.module.ts","webpack://@bitwarden/web-vault/../../libs/components/src/multi-select/multi-select.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/multi-select/multi-select.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/search/search.component.ts","webpack://@bitwarden/web-vault/../../libs/components/src/search/search.component.html","webpack://@bitwarden/web-vault/../../libs/components/src/search/search.module.ts"],"sourcesContent":["import { OverlayModule } from \"@angular/cdk/overlay\";\nimport { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { RouterModule } from \"@angular/router\";\n\nimport { IconButtonModule } from \"../icon-button/icon-button.module\";\nimport { SharedModule } from \"../shared/shared.module\";\n\nimport { NavDividerComponent } from \"./nav-divider.component\";\nimport { NavGroupComponent } from \"./nav-group.component\";\nimport { NavItemComponent } from \"./nav-item.component\";\n\n@NgModule({\n  imports: [CommonModule, SharedModule, IconButtonModule, OverlayModule, RouterModule],\n  declarations: [NavDividerComponent, NavGroupComponent, NavItemComponent],\n  exports: [NavDividerComponent, NavGroupComponent, NavItemComponent],\n})\nexport class NavigationModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { NavigationModule } from \"@bitwarden/components\";\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared/shared.module\";\n\nimport { LayoutComponent } from \"./layout.component\";\nimport { NavigationComponent } from \"./navigation.component\";\nimport { OrgSwitcherComponent } from \"./org-switcher.component\";\n\n@NgModule({\n  imports: [SharedModule, NavigationModule],\n  declarations: [LayoutComponent, NavigationComponent, OrgSwitcherComponent],\n})\nexport class LayoutModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport {\n  MultiSelectModule,\n  SearchModule,\n  SelectModule,\n  NoItemsModule,\n} from \"@bitwarden/components\";\nimport { CoreOrganizationModule } from \"@bitwarden/web-vault/app/admin-console/organizations/core\";\nimport { DynamicAvatarComponent } from \"@bitwarden/web-vault/app/components/dynamic-avatar.component\";\nimport { ProductSwitcherModule } from \"@bitwarden/web-vault/app/layouts/product-switcher/product-switcher.module\";\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared\";\n\nimport { AccessSelectorComponent } from \"./access-policies/access-selector.component\";\nimport { AccessRemovalDialogComponent } from \"./access-policies/dialogs/access-removal-dialog.component\";\nimport { BulkConfirmationDialogComponent } from \"./dialogs/bulk-confirmation-dialog.component\";\nimport { BulkStatusDialogComponent } from \"./dialogs/bulk-status-dialog.component\";\nimport { HeaderComponent } from \"./header.component\";\nimport { NewMenuComponent } from \"./new-menu.component\";\nimport { ProjectsListComponent } from \"./projects-list.component\";\nimport { SecretsListComponent } from \"./secrets-list.component\";\n\n@NgModule({\n  imports: [\n    SharedModule,\n    ProductSwitcherModule,\n    MultiSelectModule,\n    CoreOrganizationModule,\n    NoItemsModule,\n    SelectModule,\n    DynamicAvatarComponent,\n    SearchModule,\n  ],\n  exports: [\n    SharedModule,\n    NoItemsModule,\n    AccessRemovalDialogComponent,\n    AccessSelectorComponent,\n    BulkStatusDialogComponent,\n    BulkConfirmationDialogComponent,\n    HeaderComponent,\n    NewMenuComponent,\n    ProjectsListComponent,\n    SearchModule,\n    SecretsListComponent,\n    SelectModule,\n    SharedModule,\n  ],\n  declarations: [\n    AccessRemovalDialogComponent,\n    BulkStatusDialogComponent,\n    BulkConfirmationDialogComponent,\n    HeaderComponent,\n    NewMenuComponent,\n    ProjectsListComponent,\n    SecretsListComponent,\n    AccessSelectorComponent,\n  ],\n  providers: [],\n  bootstrap: [],\n})\nexport class SecretsManagerSharedModule {}\n","import { Component, OnInit } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-layout\",\n  templateUrl: \"./layout.component.html\",\n})\nexport class LayoutComponent implements OnInit {\n  ngOnInit() {\n    document.body.classList.remove(\"layout_frontend\");\n  }\n}\n","<div class=\"tw-flex tw-w-full\">\n  <nav\n    class=\"tw-fixed tw-max-h-screen tw-min-h-screen tw-w-60 tw-overflow-auto tw-bg-background-alt3\"\n  >\n    <router-outlet name=\"sidebar\"></router-outlet>\n  </nav>\n  <main class=\"tw-ml-60 tw-min-h-screen tw-min-w-0 tw-flex-1 tw-p-6\">\n    <router-outlet></router-outlet>\n  </main>\n</div>\n","import { svgIcon } from \"@bitwarden/components\";\n\nexport const SecretsManagerLogo = svgIcon`\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 580 104\" fill=\"none\"><path fill=\"#fff\" d=\"M102.539 52.27c0 28.315-22.954 51.269-51.27 51.269C22.955 103.539 0 80.585 0 52.269 0 23.955 22.954 1 51.27 1c28.315 0 51.269 22.954 51.269 51.27Z\"/><path fill=\"#175DDC\" fill-rule=\"evenodd\" d=\"M75.971 26.765c-.516-.49-1.111-.777-1.786-.777H28.39c-.675 0-1.31.287-1.786.777-.516.49-.754 1.145-.754 1.84v31.47c0 2.371.437 4.66 1.31 6.95.873 2.288 1.984 4.332 3.294 6.13s2.897 3.515 4.682 5.232a62.036 62.036 0 0 0 5 4.25 82.731 82.731 0 0 0 4.802 3.188c1.667.981 2.857 1.676 3.572 2.003.714.368 1.27.613 1.706.817a2.26 2.26 0 0 0 1.032.246 2.26 2.26 0 0 0 1.032-.246c.436-.204.992-.45 1.706-.817.715-.368 1.905-1.022 3.572-2.003a54.848 54.848 0 0 0 4.801-3.188c1.548-1.103 3.215-2.534 5.04-4.25 1.826-1.717 3.373-3.434 4.683-5.232 1.31-1.798 2.42-3.842 3.294-6.13.912-2.29 1.31-4.62 1.31-6.95v-31.47c.04-.695-.239-1.309-.715-1.84Zm-5.913 33.597c0 11.403-18.77 21.172-18.77 21.172V32.732h18.77v27.63Z\" clip-rule=\"evenodd\"/><path fill=\"#fff\" d=\"M142.208 70.81c-2.804 0-5.243-.511-7.319-1.533-2.075-1.023-3.678-2.447-4.806-4.272-1.129-1.826-1.694-3.943-1.694-6.353h4.807c0 1.497.346 2.884 1.038 4.162.692 1.241 1.693 2.246 3.004 3.012 1.347.73 3.004 1.096 4.97 1.096 2.585 0 4.588-.621 6.008-1.862 1.42-1.242 2.13-2.794 2.13-4.656 0-1.533-.327-2.756-.983-3.669-.655-.95-1.547-1.716-2.676-2.3-1.092-.585-2.367-1.096-3.823-1.534a126.43 126.43 0 0 1-4.479-1.479c-2.95-1.022-5.134-2.281-6.555-3.778-1.42-1.534-2.13-3.524-2.13-5.97-.036-2.045.437-3.852 1.42-5.422.984-1.607 2.367-2.848 4.151-3.724 1.821-.913 3.969-1.37 6.446-1.37 2.439 0 4.551.457 6.335 1.37 1.821.913 3.223 2.172 4.206 3.779 1.02 1.606 1.548 3.432 1.584 5.476h-4.806c0-1.058-.274-2.099-.82-3.121-.546-1.06-1.383-1.917-2.512-2.574-1.093-.658-2.476-.986-4.151-.986-2.076-.037-3.787.493-5.135 1.588-1.31 1.095-1.966 2.61-1.966 4.546 0 1.643.455 2.903 1.366 3.779.946.876 2.257 1.606 3.932 2.19 1.675.548 3.605 1.187 5.79 1.917 1.821.657 3.459 1.424 4.916 2.3 1.456.877 2.585 2.009 3.386 3.396.838 1.388 1.256 3.158 1.256 5.313 0 1.825-.473 3.56-1.42 5.203-.946 1.606-2.385 2.92-4.315 3.943-1.893 1.022-4.278 1.533-7.155 1.533ZM172.42 70.81c-2.586 0-4.88-.584-6.882-1.752-2.003-1.205-3.587-2.867-4.752-4.984-1.129-2.118-1.694-4.619-1.694-7.503 0-2.848.565-5.331 1.694-7.449 1.128-2.154 2.694-3.815 4.697-4.983 2.039-1.205 4.388-1.808 7.046-1.808 2.622 0 4.879.603 6.773 1.807 1.93 1.169 3.404 2.72 4.424 4.656a13.201 13.201 0 0 1 1.529 6.243c0 .402-.018.803-.054 1.205v1.37h-21.575c.109 2.08.582 3.815 1.42 5.202.874 1.351 1.948 2.373 3.222 3.067a8.754 8.754 0 0 0 4.152 1.04c1.893 0 3.477-.437 4.751-1.314 1.275-.876 2.203-2.063 2.786-3.56h4.533c-.728 2.52-2.13 4.62-4.205 6.299-2.039 1.643-4.661 2.464-7.865 2.464Zm0-24.59c-2.185 0-4.133.675-5.845 2.026-1.675 1.314-2.64 3.25-2.895 5.805h17.042c-.11-2.446-.947-4.363-2.513-5.75-1.566-1.388-3.495-2.081-5.789-2.081ZM202.697 70.81c-2.585 0-4.916-.584-6.991-1.752-2.039-1.205-3.66-2.867-4.861-4.984-1.166-2.154-1.748-4.655-1.748-7.503s.582-5.331 1.748-7.449c1.201-2.154 2.822-3.815 4.861-4.983 2.075-1.205 4.406-1.808 6.991-1.808 3.204 0 5.899.84 8.084 2.52 2.221 1.679 3.623 3.924 4.206 6.736h-4.698c-.364-1.68-1.256-2.976-2.676-3.889-1.42-.949-3.077-1.424-4.97-1.424-1.53 0-2.968.384-4.315 1.15-1.348.767-2.44 1.917-3.278 3.45-.837 1.534-1.256 3.433-1.256 5.697 0 2.263.419 4.162 1.256 5.696.838 1.533 1.93 2.701 3.278 3.505a8.584 8.584 0 0 0 4.315 1.15c1.893 0 3.55-.457 4.97-1.37 1.42-.949 2.312-2.282 2.676-3.998h4.698c-.547 2.739-1.93 4.966-4.152 6.682-2.221 1.716-4.934 2.574-8.138 2.574ZM220.302 70.153V42.988h4.151l.382 5.203c.838-1.789 2.112-3.213 3.823-4.272 1.712-1.058 3.824-1.588 6.336-1.588v4.82h-1.256c-1.602 0-3.077.292-4.424.876-1.347.548-2.422 1.497-3.223 2.848-.801 1.35-1.201 3.213-1.201 5.586v13.692h-4.588ZM250.218 70.81c-2.585 0-4.879-.584-6.882-1.752-2.003-1.205-3.587-2.867-4.752-4.984-1.129-2.118-1.693-4.619-1.693-7.503 0-2.848.564-5.331 1.693-7.449 1.129-2.154 2.695-3.815 4.698-4.983 2.039-1.205 4.387-1.808 7.045-1.808 2.622 0 4.88.603 6.773 1.807 1.93 1.169 3.405 2.72 4.424 4.656 1.02 1.935 1.53 4.016 1.53 6.243 0 .402-.018.803-.055 1.205v1.37h-21.575c.11 2.08.583 3.815 1.421 5.202.874 1.351 1.948 2.373 3.222 3.067a8.753 8.753 0 0 0 4.151 1.04c1.894 0 3.478-.437 4.752-1.314 1.275-.876 2.203-2.063 2.786-3.56h4.533c-.728 2.52-2.13 4.62-4.206 6.299-2.039 1.643-4.66 2.464-7.865 2.464Zm0-24.59c-2.185 0-4.133.675-5.844 2.026-1.675 1.314-2.64 3.25-2.895 5.805h17.041c-.109-2.446-.946-4.363-2.512-5.75-1.566-1.388-3.496-2.081-5.79-2.081ZM277.841 70.153c-2.476 0-4.424-.603-5.844-1.807-1.42-1.205-2.13-3.378-2.13-6.518V46.877h-4.698v-3.889h4.698l.601-6.517h3.987v6.517h7.974v3.889h-7.974v14.951c0 1.716.346 2.885 1.038 3.505.691.585 1.911.877 3.659.877h2.84v3.943h-4.151ZM297.544 70.81c-3.241 0-5.936-.821-8.084-2.464-2.149-1.643-3.405-3.87-3.769-6.682h4.697c.292 1.424 1.038 2.665 2.24 3.724 1.238 1.022 2.895 1.534 4.97 1.534 1.93 0 3.35-.402 4.26-1.205.911-.84 1.366-1.826 1.366-2.958 0-1.643-.601-2.738-1.803-3.286-1.165-.547-2.822-1.04-4.97-1.478a28.114 28.114 0 0 1-4.369-1.26c-1.457-.548-2.677-1.315-3.66-2.3-.983-1.023-1.475-2.355-1.475-3.998 0-2.373.874-4.309 2.622-5.806 1.784-1.533 4.188-2.3 7.21-2.3 2.876 0 5.225.73 7.046 2.19 1.857 1.425 2.931 3.47 3.222 6.135h-4.533c-.182-1.388-.783-2.465-1.803-3.231-.983-.804-2.312-1.205-3.987-1.205-1.638 0-2.913.346-3.823 1.04-.874.694-1.311 1.607-1.311 2.739 0 1.095.564 1.953 1.693 2.574 1.165.62 2.731 1.15 4.697 1.588 1.675.365 3.259.821 4.752 1.37 1.53.51 2.768 1.295 3.714 2.354.984 1.022 1.475 2.52 1.475 4.491.037 2.446-.892 4.473-2.785 6.08-1.857 1.57-4.388 2.354-7.592 2.354ZM327.019 70.153V31.816h5.353l13.764 26.726 13.655-26.726h5.407v38.337h-4.588V40.031l-12.781 24.645h-3.441l-12.781-24.59v30.067h-4.588ZM380.911 70.81c-2.258 0-4.133-.383-5.626-1.15-1.493-.767-2.604-1.789-3.332-3.067a8.266 8.266 0 0 1-1.092-4.162c0-2.775 1.056-4.911 3.168-6.408 2.112-1.497 4.988-2.245 8.63-2.245h7.319v-.33c0-2.372-.619-4.161-1.857-5.366-1.238-1.242-2.895-1.862-4.971-1.862-1.784 0-3.332.456-4.642 1.369-1.275.876-2.076 2.172-2.404 3.888h-4.697c.182-1.971.838-3.633 1.966-4.983 1.166-1.352 2.604-2.374 4.315-3.068 1.712-.73 3.532-1.095 5.462-1.095 3.787 0 6.627 1.022 8.521 3.067 1.93 2.008 2.895 4.692 2.895 8.05v16.705h-4.097l-.273-4.874c-.765 1.533-1.893 2.848-3.386 3.943-1.457 1.059-3.423 1.588-5.899 1.588Zm.71-3.888c1.748 0 3.241-.457 4.479-1.37a8.66 8.66 0 0 0 2.895-3.56c.655-1.46.983-2.993.983-4.6v-.055h-6.937c-2.695 0-4.606.475-5.735 1.424-1.092.913-1.639 2.063-1.639 3.45 0 1.425.51 2.575 1.53 3.451 1.056.84 2.53 1.26 4.424 1.26ZM400.356 70.153V42.988h4.151l.273 4.875a9.86 9.86 0 0 1 3.769-4.053c1.639-.986 3.496-1.479 5.571-1.479 3.205 0 5.754.986 7.647 2.958 1.93 1.935 2.895 4.929 2.895 8.981v15.883h-4.588v-15.39c0-5.659-2.331-8.489-6.991-8.489-2.331 0-4.279.858-5.845 2.575-1.529 1.679-2.294 4.089-2.294 7.229v14.075h-4.588ZM439.533 70.81c-2.258 0-4.133-.383-5.626-1.15-1.493-.767-2.603-1.789-3.332-3.067a8.266 8.266 0 0 1-1.092-4.162c0-2.775 1.056-4.911 3.168-6.408 2.112-1.497 4.988-2.245 8.63-2.245h7.319v-.33c0-2.372-.619-4.161-1.857-5.366-1.238-1.242-2.895-1.862-4.971-1.862-1.784 0-3.331.456-4.642 1.369-1.275.876-2.076 2.172-2.404 3.888h-4.697c.182-1.971.838-3.633 1.966-4.983 1.166-1.352 2.604-2.374 4.315-3.068 1.712-.73 3.532-1.095 5.462-1.095 3.787 0 6.627 1.022 8.521 3.067 1.93 2.008 2.895 4.692 2.895 8.05v16.705h-4.097l-.273-4.874c-.764 1.533-1.893 2.848-3.386 3.943-1.457 1.059-3.423 1.588-5.899 1.588Zm.71-3.888c1.748 0 3.241-.457 4.479-1.37a8.66 8.66 0 0 0 2.895-3.56c.655-1.46.983-2.993.983-4.6v-.055h-6.937c-2.694 0-4.606.475-5.735 1.424-1.092.913-1.639 2.063-1.639 3.45 0 1.425.51 2.575 1.53 3.451 1.056.84 2.531 1.26 4.424 1.26ZM469.684 61.61c-1.53 0-2.931-.202-4.206-.603l-2.731 2.574c.401.292.892.548 1.475.767.619.182 1.493.365 2.622.547 1.128.146 2.712.31 4.751.493 3.642.256 6.245 1.096 7.811 2.52 1.566 1.424 2.349 3.286 2.349 5.586 0 1.57-.437 3.067-1.311 4.49-.838 1.425-2.149 2.593-3.933 3.506-1.748.913-4.005 1.369-6.773 1.369-2.439 0-4.606-.329-6.499-.986-1.894-.62-3.369-1.588-4.425-2.903-1.055-1.277-1.583-2.902-1.583-4.874 0-1.022.273-2.136.819-3.34.546-1.169 1.566-2.282 3.059-3.341a13.725 13.725 0 0 1-2.076-1.041 13.173 13.173 0 0 1-1.529-1.314V63.8l4.642-4.6c-2.148-1.826-3.222-4.236-3.222-7.23 0-1.789.418-3.414 1.256-4.874.837-1.46 2.057-2.61 3.66-3.45 1.602-.877 3.55-1.315 5.844-1.315 1.566 0 2.986.22 4.26.657h9.995v3.45l-5.079.22c1.056 1.533 1.584 3.304 1.584 5.312 0 1.79-.437 3.414-1.311 4.874-.838 1.461-2.057 2.63-3.66 3.506-1.565.84-3.495 1.26-5.789 1.26Zm0-3.78c1.93 0 3.459-.493 4.588-1.478 1.165-1.023 1.748-2.483 1.748-4.382 0-1.862-.583-3.286-1.748-4.272-1.129-1.022-2.658-1.533-4.588-1.533-1.967 0-3.532.511-4.698 1.533-1.128.986-1.693 2.41-1.693 4.272 0 1.899.565 3.36 1.693 4.382 1.166.985 2.731 1.478 4.698 1.478Zm-7.975 15.828c0 1.826.765 3.177 2.294 4.053 1.53.913 3.441 1.37 5.735 1.37 2.258 0 4.06-.494 5.408-1.48 1.383-.986 2.075-2.3 2.075-3.943 0-1.168-.473-2.19-1.42-3.067-.947-.84-2.694-1.332-5.243-1.479-2.003-.146-3.733-.328-5.189-.547-1.493.803-2.476 1.661-2.95 2.574-.473.95-.71 1.789-.71 2.52ZM499.136 70.81c-2.585 0-4.879-.584-6.882-1.752-2.003-1.205-3.587-2.867-4.752-4.984-1.129-2.118-1.693-4.619-1.693-7.503 0-2.848.564-5.331 1.693-7.449 1.129-2.154 2.695-3.815 4.697-4.983 2.04-1.205 4.388-1.808 7.046-1.808 2.622 0 4.88.603 6.773 1.807 1.93 1.169 3.405 2.72 4.424 4.656 1.02 1.935 1.53 4.016 1.53 6.243 0 .402-.019.803-.055 1.205v1.37h-21.575c.11 2.08.583 3.815 1.42 5.202.874 1.351 1.949 2.373 3.223 3.067a8.753 8.753 0 0 0 4.151 1.04c1.894 0 3.478-.437 4.752-1.314 1.274-.876 2.203-2.063 2.786-3.56h4.533c-.728 2.52-2.13 4.62-4.206 6.299-2.039 1.643-4.661 2.464-7.865 2.464Zm0-24.59c-2.185 0-4.133.675-5.844 2.026-1.675 1.314-2.64 3.25-2.895 5.805h17.041c-.109-2.446-.947-4.363-2.512-5.75-1.566-1.388-3.496-2.081-5.79-2.081ZM516.96 70.153V42.988h4.151l.383 5.203c.837-1.789 2.112-3.213 3.823-4.272 1.712-1.058 3.824-1.588 6.336-1.588v4.82h-1.256c-1.602 0-3.077.292-4.424.876-1.348.548-2.422 1.497-3.223 2.848-.801 1.35-1.202 3.213-1.202 5.586v13.692h-4.588Z\"/></svg>\n`;\n","import { Directive, EventEmitter, Input, Output } from \"@angular/core\";\n\n/**\n * Base class used in `NavGroupComponent` and `NavItemComponent`\n */\n@Directive()\nexport abstract class NavBaseComponent {\n  /**\n   * Text to display in main content\n   */\n  @Input() text: string;\n\n  /**\n   * `aria-label` for main content\n   */\n  @Input() ariaLabel: string;\n\n  /**\n   * Optional icon, e.g. `\"bwi-collection\"`\n   */\n  @Input() icon: string;\n\n  /**\n   * Route to be passed to internal `routerLink`\n   */\n  @Input() route: string | any[];\n\n  /**\n   * If this item is used within a tree, set `variant` to `\"tree\"`\n   */\n  @Input() variant: \"default\" | \"tree\" = \"default\";\n\n  /**\n   * Depth level when nested inside of a `'tree'` variant\n   */\n  @Input() treeDepth = 0;\n\n  /**\n   * If `true`, do not change styles when nav item is active.\n   */\n  @Input() hideActiveStyles = false;\n\n  /**\n   * Fires when main content is clicked\n   */\n  @Output() mainContentClicked: EventEmitter<MouseEvent> = new EventEmitter();\n}\n","<div\n  class=\"tw-relative\"\n  [ngClass]=\"[\n    showActiveStyles ? 'tw-bg-background-alt4' : 'tw-bg-background-alt3',\n    fvwStyles$ | async\n  ]\"\n>\n  <div\n    [ngStyle]=\"{\n      'padding-left': (variant === 'tree' ? 2.5 : 1) + treeDepth * 1.5 + 'rem'\n    }\"\n    class=\"tw-relative tw-flex tw-items-center tw-pr-4\"\n    [ngClass]=\"[variant === 'tree' ? 'tw-py-1' : 'tw-py-2']\"\n  >\n    <div\n      #slotStart\n      class=\"[&>*:focus-visible::before]:!tw-ring-text-alt2 [&>*:hover]:!tw-border-text-alt2 [&>*]:!tw-text-alt2\"\n    >\n      <ng-content select=\"[slot-start]\"></ng-content>\n    </div>\n    <!-- Default content for #slotStart (for consistent sizing) -->\n    <div\n      *ngIf=\"slotStart.childElementCount === 0\"\n      [ngClass]=\"{\n        'tw-w-0': variant !== 'tree'\n      }\"\n    >\n      <button\n        type=\"button\"\n        class=\"tw-invisible\"\n        [bitIconButton]=\"'bwi-angle-down'\"\n        size=\"small\"\n        aria-hidden=\"true\"\n      ></button>\n    </div>\n\n    <ng-container *ngIf=\"route; then isAnchor; else isButton\"></ng-container>\n\n    <!-- Main content of `NavItem` -->\n    <ng-template #anchorAndButtonContent>\n      <i class=\"bwi bwi-fw tw-text-alt2 tw-mx-1 {{ icon }}\"></i\n      ><span [ngClass]=\"showActiveStyles ? 'tw-font-bold' : 'tw-font-semibold'\">{{ text }}</span>\n    </ng-template>\n\n    <!-- Show if a value was passed to `this.to` -->\n    <ng-template #isAnchor>\n      <!-- The `fvw` class passes focus to `this.focusVisibleWithin$` -->\n      <!-- The following `class` field should match the `#isButton` class field below -->\n      <a\n        class=\"fvw tw-w-full tw-overflow-hidden tw-text-ellipsis tw-whitespace-nowrap tw-border-none tw-bg-transparent tw-p-0 tw-text-start !tw-text-alt2 hover:tw-text-alt2 hover:tw-no-underline focus:tw-outline-none [&>:not(.bwi)]:hover:tw-underline\"\n        [routerLink]=\"route\"\n        [attr.aria-label]=\"ariaLabel || text\"\n        routerLinkActive\n        [routerLinkActiveOptions]=\"rlaOptions\"\n        [ariaCurrentWhenActive]=\"'page'\"\n        (isActiveChange)=\"setActive($event)\"\n        (click)=\"mainContentClicked.emit()\"\n      >\n        <ng-container *ngTemplateOutlet=\"anchorAndButtonContent\"></ng-container>\n      </a>\n    </ng-template>\n\n    <!-- Show if `this.to` is falsy -->\n    <ng-template #isButton>\n      <!-- Class field should match `#isAnchor` class field above -->\n      <button\n        type=\"button\"\n        class=\"fvw tw-w-full tw-overflow-hidden tw-text-ellipsis tw-whitespace-nowrap tw-border-none tw-bg-transparent tw-p-0 tw-text-start !tw-text-alt2 hover:tw-text-alt2 hover:tw-no-underline focus:tw-outline-none [&>:not(.bwi)]:hover:tw-underline\"\n        (click)=\"mainContentClicked.emit()\"\n      >\n        <ng-container *ngTemplateOutlet=\"anchorAndButtonContent\"></ng-container>\n      </button>\n    </ng-template>\n\n    <div\n      class=\"tw-flex tw-gap-1 [&>*:focus-visible::before]:!tw-ring-text-alt2 [&>*:hover]:!tw-border-text-alt2 [&>*]:!tw-text-alt2\"\n    >\n      <ng-content select=\"[slot-end]\"></ng-content>\n    </div>\n  </div>\n</div>\n","import { Component, HostListener, Input } from \"@angular/core\";\nimport { IsActiveMatchOptions } from \"@angular/router\";\nimport { BehaviorSubject, map } from \"rxjs\";\n\nimport { NavBaseComponent } from \"./nav-base.component\";\n\n@Component({\n  selector: \"bit-nav-item\",\n  templateUrl: \"./nav-item.component.html\",\n})\nexport class NavItemComponent extends NavBaseComponent {\n  /**\n   * Is `true` if `to` matches the current route\n   */\n  private _active = false;\n  protected setActive(isActive: boolean) {\n    this._active = isActive;\n  }\n  protected get showActiveStyles() {\n    return this._active && !this.hideActiveStyles;\n  }\n  protected rlaOptions: IsActiveMatchOptions = {\n    paths: \"subset\",\n    queryParams: \"exact\",\n    fragment: \"ignored\",\n    matrixParams: \"ignored\",\n  };\n\n  /**\n   * if `true`, use `exact` match for path instead of `subset`.\n   */\n  @Input() set exactMatch(val: boolean) {\n    this.rlaOptions.paths = val ? \"exact\" : \"subset\";\n  }\n\n  /**\n   * The design spec calls for the an outline to wrap the entire element when the template's anchor/button has :focus-visible.\n   * Usually, we would use :focus-within for this. However, that matches when a child element has :focus instead of :focus-visible.\n   *\n   * Currently, the browser does not have a pseudo selector that combines these two, e.g. :focus-visible-within (WICG/focus-visible#151)\n   * To make our own :focus-visible-within functionality, we use event delegation on the host and manually check if the focus target (denoted with the .fvw class) matches :focus-visible. We then map that state to some styles, so the entire component can have an outline.\n   */\n  protected focusVisibleWithin$ = new BehaviorSubject(false);\n  protected fvwStyles$ = this.focusVisibleWithin$.pipe(\n    map((value) => (value ? \"tw-z-10 tw-rounded tw-outline-none tw-ring tw-ring-text-alt2\" : \"\"))\n  );\n  @HostListener(\"focusin\", [\"$event.target\"])\n  onFocusIn(target: HTMLElement) {\n    this.focusVisibleWithin$.next(target.matches(\".fvw:focus-visible\"));\n  }\n  @HostListener(\"focusout\")\n  onFocusOut() {\n    this.focusVisibleWithin$.next(false);\n  }\n}\n","<!-- This a higher order component that composes `NavItemComponent`  -->\n<bit-nav-item\n  [text]=\"text\"\n  [icon]=\"icon\"\n  [route]=\"route\"\n  [variant]=\"variant\"\n  (mainContentClicked)=\"toggle()\"\n  [treeDepth]=\"treeDepth\"\n  (mainContentClicked)=\"mainContentClicked.emit()\"\n  [ariaLabel]=\"ariaLabel\"\n  [exactMatch]=\"exactMatch\"\n>\n  <ng-template #button>\n    <button\n      type=\"button\"\n      class=\"tw-ml-auto\"\n      [bitIconButton]=\"\n        open ? 'bwi-angle-up' : variant === 'tree' ? 'bwi-angle-right' : 'bwi-angle-down'\n      \"\n      [buttonType]=\"'main'\"\n      (click)=\"toggle($event)\"\n      size=\"small\"\n      [title]=\"'toggleCollapse' | i18n\"\n      aria-haspopup=\"true\"\n      [attr.aria-expanded]=\"open.toString()\"\n      [attr.aria-controls]=\"contentId\"\n      [attr.aria-label]=\"['toggleCollapse' | i18n, text].join(' ')\"\n    ></button>\n  </ng-template>\n\n  <!-- Show toggle to the left for trees otherwise to the right -->\n  <ng-container slot-start *ngIf=\"variant === 'tree'\">\n    <ng-container *ngTemplateOutlet=\"button\"></ng-container>\n  </ng-container>\n  <ng-container slot-end *ngIf=\"variant !== 'tree'\">\n    <ng-container *ngTemplateOutlet=\"button\"></ng-container>\n  </ng-container>\n</bit-nav-item>\n\n<!-- [attr.aria-controls] of the above button expects a unique ID on the controlled element -->\n<div\n  *ngIf=\"open\"\n  [attr.id]=\"contentId\"\n  [attr.aria-label]=\"[text, 'submenu' | i18n].join(' ')\"\n  role=\"group\"\n>\n  <ng-content></ng-content>\n</div>\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  QueryList,\n} from \"@angular/core\";\n\nimport { NavBaseComponent } from \"./nav-base.component\";\nimport { NavItemComponent } from \"./nav-item.component\";\n\n@Component({\n  selector: \"bit-nav-group\",\n  templateUrl: \"./nav-group.component.html\",\n})\nexport class NavGroupComponent extends NavBaseComponent implements AfterContentInit {\n  @ContentChildren(forwardRef(() => NavGroupComponent), {\n    descendants: true,\n  })\n  nestedGroups!: QueryList<NavGroupComponent>;\n\n  @ContentChildren(NavItemComponent, {\n    descendants: true,\n  })\n  nestedItems!: QueryList<NavItemComponent>;\n\n  /**\n   * UID for `[attr.aria-controls]`\n   */\n  protected contentId = Math.random().toString(36).substring(2);\n\n  /**\n   * Is `true` if the expanded content is visible\n   */\n  @Input()\n  open = false;\n\n  /**\n   * if `true`, use `exact` match for path instead of `subset`.\n   */\n  @Input() exactMatch: boolean;\n\n  @Output()\n  openChange = new EventEmitter<boolean>();\n\n  protected toggle(event?: MouseEvent) {\n    event?.stopPropagation();\n    this.open = !this.open;\n    this.openChange.emit(this.open);\n  }\n\n  /**\n   * - For any nested NavGroupComponents or NavItemComponents, increment the `treeDepth` by 1.\n   */\n  private initNestedStyles() {\n    if (this.variant !== \"tree\") {\n      return;\n    }\n    [...this.nestedGroups, ...this.nestedItems].forEach((navGroupOrItem) => {\n      navGroupOrItem.treeDepth += 1;\n    });\n  }\n\n  ngAfterContentInit(): void {\n    this.initNestedStyles();\n  }\n}\n","import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"bit-nav-divider\",\n  templateUrl: \"./nav-divider.component.html\",\n})\nexport class NavDividerComponent {}\n","<div class=\"tw-h-px tw-w-full tw-bg-secondary-300\"></div>\n","<bit-nav-group\n  *ngIf=\"activeOrganization$ | async as activeOrganization\"\n  [text]=\"activeOrganization.name\"\n  [ariaLabel]=\"['organization' | i18n, activeOrganization.name].join(' ')\"\n  icon=\"bwi-business\"\n  [route]=\"['../', activeOrganization.id]\"\n  [(open)]=\"open\"\n  [exactMatch]=\"true\"\n>\n  <ng-container *ngIf=\"organizations$ | async as organizations\">\n    <bit-nav-item\n      *ngFor=\"let org of organizations\"\n      [text]=\"org.name\"\n      [ariaLabel]=\"['organization' | i18n, org.name].join(' ')\"\n      [route]=\"['../', org.id]\"\n      (mainContentClicked)=\"toggle()\"\n      [hideActiveStyles]=\"true\"\n    >\n    </bit-nav-item>\n  </ng-container>\n  <bit-nav-item\n    *ngIf=\"!hideNewButton\"\n    icon=\"bwi-plus\"\n    [text]=\"'newOrganization' | i18n\"\n    route=\"/create-organization\"\n  ></bit-nav-item>\n  <bit-nav-divider></bit-nav-divider>\n</bit-nav-group>\n","import { Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, map, Observable } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport type { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\n\n@Component({\n  selector: \"org-switcher\",\n  templateUrl: \"org-switcher.component.html\",\n})\nexport class OrgSwitcherComponent {\n  protected organizations$: Observable<Organization[]> =\n    this.organizationService.organizations$.pipe(\n      map((orgs) => orgs.filter(this.filter).sort((a, b) => a.name.localeCompare(b.name)))\n    );\n  protected activeOrganization$: Observable<Organization> = combineLatest([\n    this.route.paramMap,\n    this.organizations$,\n  ]).pipe(map(([params, orgs]) => orgs.find((org) => org.id === params.get(\"organizationId\"))));\n\n  /**\n   * Filter function for displayed organizations in the `org-switcher`\n   * @example\n   * const smFilter = (org: Organization) => org.canAccessSecretsManager\n   * // <org-switcher [filter]=\"smFilter\">\n   */\n  @Input()\n  filter: (org: Organization) => boolean = () => true;\n\n  /**\n   * Is `true` if the expanded content is visible\n   */\n  @Input()\n  open = false;\n  @Output()\n  openChange = new EventEmitter<boolean>();\n\n  /**\n   * Visibility of the New Organization button\n   * (Temporary; will be removed when ability to create organizations is added to SM.)\n   */\n  @Input()\n  hideNewButton = false;\n\n  constructor(private route: ActivatedRoute, private organizationService: OrganizationService) {}\n\n  protected toggle(event?: MouseEvent) {\n    event?.stopPropagation();\n    this.open = !this.open;\n    this.openChange.emit(this.open);\n  }\n}\n","<a routerLink=\".\" class=\"tw-m-5 tw-mt-7 tw-block\">\n  <bit-icon [icon]=\"logo\"></bit-icon>\n</a>\n\n<org-switcher [filter]=\"orgFilter\" [hideNewButton]=\"true\"></org-switcher>\n<bit-nav-item icon=\"bwi-collection\" [text]=\"'projects' | i18n\" route=\"projects\"></bit-nav-item>\n<bit-nav-item icon=\"bwi-key\" [text]=\"'secrets' | i18n\" route=\"secrets\"></bit-nav-item>\n<bit-nav-item\n  icon=\"bwi-wrench\"\n  [text]=\"'serviceAccounts' | i18n\"\n  route=\"service-accounts\"\n></bit-nav-item>\n<bit-nav-item\n  icon=\"bwi-trash\"\n  [text]=\"'trash' | i18n\"\n  route=\"trash\"\n  *ngIf=\"isAdmin$ | async\"\n></bit-nav-item>\n<bit-nav-group icon=\"bwi-cog\" [text]=\"'settings' | i18n\" *ngIf=\"isAdmin$ | async\">\n  <bit-nav-item [text]=\"'importData' | i18n\" route=\"settings/import\"></bit-nav-item>\n  <bit-nav-item [text]=\"'exportData' | i18n\" route=\"settings/export\"></bit-nav-item>\n</bit-nav-group>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { map } from \"rxjs\";\n\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\n\nimport { SecretsManagerLogo } from \"./secrets-manager-logo\";\n\n@Component({\n  selector: \"sm-navigation\",\n  templateUrl: \"./navigation.component.html\",\n})\nexport class NavigationComponent {\n  protected readonly logo = SecretsManagerLogo;\n  protected orgFilter = (org: Organization) => org.canAccessSecretsManager;\n  protected isAdmin$ = this.route.params.pipe(\n    map((params) => this.organizationService.get(params.organizationId)?.isAdmin)\n  );\n\n  constructor(private route: ActivatedRoute, private organizationService: OrganizationService) {}\n}\n","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\n\nimport { ProgressComponent } from \"./progress.component\";\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [ProgressComponent],\n  declarations: [ProgressComponent],\n})\nexport class ProgressModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { ProgressModule } from \"@bitwarden/components\";\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared\";\n\nimport { OnboardingTaskComponent } from \"./onboarding-task.component\";\nimport { OnboardingComponent } from \"./onboarding.component\";\n\n@NgModule({\n  imports: [SharedModule, ProgressModule],\n  exports: [OnboardingComponent, OnboardingTaskComponent],\n  declarations: [OnboardingComponent, OnboardingTaskComponent],\n})\nexport class OnboardingModule {}\n","<bit-dialog dialogSize=\"default\">\n  <ng-container bitDialogTitle>\n    <span>{{ data.title | i18n }}</span>\n    <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n      {{ data.details.length }}\n      {{ data.subTitle | i18n }}\n    </span>\n  </ng-container>\n\n  <div bitDialogContent>\n    {{ data.message | i18n }}\n    <bit-table>\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ data.columnTitle | i18n }}</th>\n          <th bitCell>{{ \"error\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body>\n        <tr bitRow *ngFor=\"let detail of data.details\">\n          <td bitCell>{{ detail.name }}</td>\n          <td bitCell>{{ detail.errorMessage }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </div>\n\n  <ng-container bitDialogFooter>\n    <button bitButton buttonType=\"primary\" bitDialogClose type=\"button\">\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nexport interface BulkStatusDetails {\n  title: string;\n  subTitle: string;\n  columnTitle: string;\n  message: string;\n  details: BulkOperationStatus[];\n}\n\nexport class BulkOperationStatus {\n  id: string;\n  name: string;\n  errorMessage?: string;\n}\n\n@Component({\n  templateUrl: \"./bulk-status-dialog.component.html\",\n})\nexport class BulkStatusDialogComponent implements OnInit {\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) public data: BulkStatusDetails) {}\n\n  ngOnInit(): void {\n    // TODO remove null checks once strictNullChecks in TypeScript is turned on.\n    if (\n      !this.data.title ||\n      !this.data.subTitle ||\n      !this.data.columnTitle ||\n      !this.data.message ||\n      !(this.data.details?.length >= 1)\n    ) {\n      this.dialogRef.close();\n      throw new Error(\n        \"The bulk status dialog was not called with the appropriate operation values.\"\n      );\n    }\n  }\n}\n","export class ProjectListView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  read: boolean;\n  write: boolean;\n}\n","export class ProjectView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  read: boolean;\n  write: boolean;\n}\n","import { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nexport class ProjectRequest {\n  name: EncString;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class ProjectListItemResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  read: boolean;\n  write: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.read = this.getResponseProperty(\"Read\");\n    this.write = this.getResponseProperty(\"Write\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class ProjectResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  read: boolean;\n  write: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.read = this.getResponseProperty(\"Read\");\n    this.write = this.getResponseProperty(\"Write\");\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\n\nimport { ProjectListView } from \"../models/view/project-list.view\";\nimport { ProjectView } from \"../models/view/project.view\";\nimport { BulkOperationStatus } from \"../shared/dialogs/bulk-status-dialog.component\";\n\nimport { ProjectRequest } from \"./models/requests/project.request\";\nimport { ProjectListItemResponse } from \"./models/responses/project-list-item.response\";\nimport { ProjectResponse } from \"./models/responses/project.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ProjectService {\n  protected _project = new Subject<ProjectView>();\n  project$ = this._project.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getByProjectId(projectId: string): Promise<ProjectView> {\n    const r = await this.apiService.send(\"GET\", \"/projects/\" + projectId, null, true, true);\n    const projectResponse = new ProjectResponse(r);\n    return await this.createProjectView(projectResponse);\n  }\n\n  async getProjects(organizationId: string): Promise<ProjectListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/projects\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, ProjectListItemResponse);\n    return await this.createProjectsListView(organizationId, results.data);\n  }\n\n  async create(organizationId: string, projectView: ProjectView): Promise<ProjectView> {\n    const request = await this.getProjectRequest(organizationId, projectView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/projects\",\n      request,\n      true,\n      true\n    );\n\n    const project = await this.createProjectView(new ProjectResponse(r));\n    this._project.next(project);\n    return project;\n  }\n\n  async update(organizationId: string, projectView: ProjectView) {\n    const request = await this.getProjectRequest(organizationId, projectView);\n    const r = await this.apiService.send(\"PUT\", \"/projects/\" + projectView.id, request, true, true);\n    this._project.next(await this.createProjectView(new ProjectResponse(r)));\n  }\n\n  async delete(projects: ProjectListView[]): Promise<BulkOperationStatus[]> {\n    const projectIds = projects.map((project) => project.id);\n    const r = await this.apiService.send(\"POST\", \"/projects/delete\", projectIds, true, true);\n    this._project.next(null);\n    return r.data.map((element: { id: string; error: string }) => {\n      const bulkOperationStatus = new BulkOperationStatus();\n      bulkOperationStatus.id = element.id;\n      bulkOperationStatus.name = projects.find((project) => project.id == element.id).name;\n      bulkOperationStatus.errorMessage = element.error;\n      return bulkOperationStatus;\n    });\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async getProjectRequest(\n    organizationId: string,\n    projectView: ProjectView\n  ): Promise<ProjectRequest> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = new ProjectRequest();\n    request.name = await this.encryptService.encrypt(projectView.name, orgKey);\n\n    return request;\n  }\n\n  private async createProjectView(projectResponse: ProjectResponse) {\n    const orgKey = await this.getOrganizationKey(projectResponse.organizationId);\n\n    const projectView = new ProjectView();\n    projectView.id = projectResponse.id;\n    projectView.organizationId = projectResponse.organizationId;\n    projectView.creationDate = projectResponse.creationDate;\n    projectView.revisionDate = projectResponse.revisionDate;\n    projectView.read = projectResponse.read;\n    projectView.write = projectResponse.write;\n    projectView.name = await this.encryptService.decryptToUtf8(\n      new EncString(projectResponse.name),\n      orgKey\n    );\n    return projectView;\n  }\n\n  private async createProjectsListView(\n    organizationId: string,\n    projects: ProjectListItemResponse[]\n  ): Promise<ProjectListView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      projects.map(async (s: ProjectListItemResponse) => {\n        const projectListView = new ProjectListView();\n        projectListView.id = s.id;\n        projectListView.organizationId = s.organizationId;\n        projectListView.read = s.read;\n        projectListView.write = s.write;\n        projectListView.name = await this.encryptService.decryptToUtf8(\n          new EncString(s.name),\n          orgKey\n        );\n        projectListView.creationDate = s.creationDate;\n        projectListView.revisionDate = s.revisionDate;\n        return projectListView;\n      })\n    );\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"small\">\n    <ng-container bitDialogTitle>\n      <span>{{ title | i18n }}</span>\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        <ng-container *ngIf=\"data.projects.length == 1\">\n          {{ data.projects[0].name }}\n        </ng-container>\n        <ng-container *ngIf=\"data.projects.length > 1\">\n          {{ data.projects.length }}\n          {{ \"projects\" | i18n }}\n        </ng-container>\n      </span>\n    </ng-container>\n\n    <div bitDialogContent>\n      <bit-callout type=\"warning\" [title]=\"'warning' | i18n\">\n        {{ dialogContent }}\n      </bit-callout>\n      <bit-form-field>\n        <bit-label>{{ dialogConfirmationLabel }}</bit-label>\n        <input bitInput formControlName=\"confirmDelete\" />\n      </bit-form-field>\n    </div>\n\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton buttonType=\"danger\" bitFormButton>\n        {{ title | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport {\n  FormControl,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  AbstractControl,\n} from \"@angular/forms\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport {\n  BulkOperationStatus,\n  BulkStatusDetails,\n  BulkStatusDialogComponent,\n} from \"../../shared/dialogs/bulk-status-dialog.component\";\nimport { ProjectService } from \"../project.service\";\n\nexport interface ProjectDeleteOperation {\n  projects: ProjectListView[];\n}\n\n@Component({\n  templateUrl: \"./project-delete-dialog.component.html\",\n})\nexport class ProjectDeleteDialogComponent implements OnInit {\n  formGroup = new FormGroup({\n    confirmDelete: new FormControl(\"\", [this.matchConfirmationMessageValidator()]),\n  });\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: ProjectDeleteOperation,\n    private projectService: ProjectService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private dialogService: DialogServiceAbstraction\n  ) {}\n\n  ngOnInit(): void {\n    if (!(this.data.projects?.length >= 1)) {\n      this.dialogRef.close();\n      throw new Error(\n        \"The project delete dialog was not called with the appropriate operation values.\"\n      );\n    }\n  }\n\n  get title() {\n    return this.data.projects.length === 1 ? \"deleteProject\" : \"deleteProjects\";\n  }\n\n  get dialogContent() {\n    return this.data.projects.length === 1\n      ? this.i18nService.t(\"deleteProjectDialogMessage\", this.data.projects[0].name)\n      : this.i18nService.t(\"deleteProjectsDialogMessage\");\n  }\n\n  get dialogConfirmationLabel() {\n    return this.i18nService.t(\"deleteProjectInputLabel\", this.dialogConfirmationMessage);\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    await this.delete();\n    this.dialogRef.close();\n  };\n\n  async delete() {\n    const bulkResponses = await this.projectService.delete(this.data.projects);\n\n    if (bulkResponses.find((response) => response.errorMessage)) {\n      this.openBulkStatusDialog(bulkResponses.filter((response) => response.errorMessage));\n      return;\n    }\n\n    const message = this.data.projects.length === 1 ? \"deleteProjectToast\" : \"deleteProjectsToast\";\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  }\n\n  openBulkStatusDialog(bulkStatusResults: BulkOperationStatus[]) {\n    this.dialogService.open<unknown, BulkStatusDetails>(BulkStatusDialogComponent, {\n      data: {\n        title: \"deleteProjects\",\n        subTitle: \"projects\",\n        columnTitle: \"projectName\",\n        message: \"bulkDeleteProjectsErrorMessage\",\n        details: bulkStatusResults,\n      },\n    });\n  }\n\n  private get dialogConfirmationMessage() {\n    return this.data.projects?.length === 1\n      ? this.i18nService.t(\"deleteProjectConfirmMessage\", this.data.projects[0].name)\n      : this.i18nService.t(\"deleteProjectsConfirmMessage\", this.data.projects?.length.toString());\n  }\n\n  private matchConfirmationMessageValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (this.dialogConfirmationMessage.toLowerCase() == control.value.toLowerCase()) {\n        return null;\n      } else {\n        return {\n          confirmationDoesntMatchError: {\n            message: this.i18nService.t(\"smConfirmationRequired\"),\n          },\n        };\n      }\n    };\n  }\n}\n","import { AbstractControl, FormControl, ValidatorFn } from \"@angular/forms\";\n\n/**\n * Automatically trims FormControl value. Errors if value only contains whitespace.\n *\n * Should be used with `updateOn: \"submit\"`\n */\nexport const trimValidator: ValidatorFn = (control: AbstractControl<string>) => {\n  if (!(control instanceof FormControl)) {\n    throw new Error(\"trimValidator only supports validating FormControls\");\n  }\n  const value = control.value;\n  if (value === null || value === undefined || value === \"\") {\n    return null;\n  }\n  if (!value.trim().length) {\n    return {\n      trim: {\n        message: \"input is only whitespace\",\n      },\n    };\n  }\n  if (value !== value.trim()) {\n    control.setValue(value.trim());\n  }\n  return null;\n};\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { BitValidators } from \"@bitwarden/components\";\n\nimport { ProjectView } from \"../../models/view/project.view\";\nimport { ProjectService } from \"../../projects/project.service\";\n\nexport enum OperationType {\n  Add,\n  Edit,\n}\n\nexport interface ProjectOperation {\n  organizationId: string;\n  operation: OperationType;\n  projectId?: string;\n}\n\n@Component({\n  templateUrl: \"./project-dialog.component.html\",\n})\nexport class ProjectDialogComponent implements OnInit {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", {\n      validators: [Validators.required, BitValidators.trimValidator],\n      updateOn: \"submit\",\n    }),\n  });\n  protected loading = false;\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: ProjectOperation,\n    private projectService: ProjectService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private router: Router\n  ) {}\n\n  async ngOnInit() {\n    if (this.data.operation === OperationType.Edit && this.data.projectId) {\n      await this.loadData();\n    } else if (this.data.operation !== OperationType.Add) {\n      this.dialogRef.close();\n      throw new Error(`The project dialog was not called with the appropriate operation values.`);\n    }\n  }\n\n  async loadData() {\n    this.loading = true;\n    const project: ProjectView = await this.projectService.getByProjectId(this.data.projectId);\n    this.loading = false;\n    this.formGroup.setValue({ name: project.name });\n  }\n\n  get title() {\n    return this.data.operation === OperationType.Add ? \"newProject\" : \"editProject\";\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const projectView = this.getProjectView();\n    if (this.data.operation === OperationType.Add) {\n      const newProject = await this.createProject(projectView);\n      this.router.navigate([\"sm\", this.data.organizationId, \"projects\", newProject.id]);\n    } else {\n      projectView.id = this.data.projectId;\n      await this.updateProject(projectView);\n    }\n    this.dialogRef.close();\n  };\n\n  private async createProject(projectView: ProjectView) {\n    const newProject = await this.projectService.create(this.data.organizationId, projectView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"projectCreated\"));\n    return newProject;\n  }\n\n  private async updateProject(projectView: ProjectView) {\n    await this.projectService.update(this.data.organizationId, projectView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"projectSaved\"));\n  }\n\n  private getProjectView() {\n    const projectView = new ProjectView();\n    projectView.organizationId = this.data.organizationId;\n    projectView.name = this.formGroup.value.name;\n    return projectView;\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"small\">\n    <span bitDialogTitle>{{ title | i18n }}</span>\n    <span bitDialogContent>\n      <div *ngIf=\"loading\" class=\"tw-text-center\">\n        <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n      </div>\n      <bit-form-field *ngIf=\"!loading\">\n        <bit-label>{{ \"projectName\" | i18n }}</bit-label>\n        <input formControlName=\"name\" maxlength=\"1000\" bitInput />\n      </bit-form-field>\n    </span>\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"save\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","import { SecretProjectView } from \"./secret-project.view\";\n\nexport class SecretListView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectView[];\n  read: boolean;\n  write: boolean;\n}\n","export class SecretProjectView {\n  id: string;\n  name: string;\n}\n","import { SecretProjectView } from \"./secret-project.view\";\n\nexport class SecretView {\n  id: string;\n  organizationId: string;\n  name: string;\n  value: string;\n  note: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectView[];\n\n  read: boolean;\n  write: boolean;\n}\n","export class SecretRequest {\n  key: string;\n  value: string;\n  note: string;\n  projectIds?: string[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class SecretProjectResponse extends BaseResponse {\n  id: string;\n  name: string;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.id = this.getResponseProperty(\"Id\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretProjectResponse } from \"./secret-project.response\";\n\nexport class SecretListItemResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n  projects: SecretProjectResponse[];\n  read: boolean;\n  write: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Key\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.read = this.getResponseProperty(\"Read\");\n    this.write = this.getResponseProperty(\"Write\");\n\n    const project = this.getResponseProperty(\"projects\");\n    this.projects = project == null ? null : project.map((k: any) => new SecretProjectResponse(k));\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretListItemResponse } from \"./secret-list-item.response\";\nimport { SecretProjectResponse } from \"./secret-project.response\";\n\nexport class SecretWithProjectsListResponse extends BaseResponse {\n  secrets: SecretListItemResponse[];\n  projects: SecretProjectResponse[];\n\n  constructor(response: any) {\n    super(response);\n    const secrets = this.getResponseProperty(\"secrets\");\n    const projects = this.getResponseProperty(\"projects\");\n    this.projects =\n      projects == null ? null : projects.map((k: any) => new SecretProjectResponse(k));\n    this.secrets = secrets == null ? [] : secrets.map((dr: any) => new SecretListItemResponse(dr));\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretProjectResponse } from \"./secret-project.response\";\n\nexport class SecretResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  value: string;\n  note: string;\n  creationDate: string;\n  revisionDate: string;\n\n  read: boolean;\n  write: boolean;\n\n  projects: SecretProjectResponse[];\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Key\");\n    this.value = this.getResponseProperty(\"Value\");\n    this.note = this.getResponseProperty(\"Note\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n\n    this.read = this.getResponseProperty(\"Read\");\n    this.write = this.getResponseProperty(\"Write\");\n\n    const projects = this.getResponseProperty(\"Projects\");\n    this.projects =\n      projects == null ? null : projects.map((k: any) => new SecretProjectResponse(k));\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport { SecretProjectView } from \"../models/view/secret-project.view\";\nimport { SecretView } from \"../models/view/secret.view\";\nimport { BulkOperationStatus } from \"../shared/dialogs/bulk-status-dialog.component\";\n\nimport { SecretRequest } from \"./requests/secret.request\";\nimport { SecretListItemResponse } from \"./responses/secret-list-item.response\";\nimport { SecretProjectResponse } from \"./responses/secret-project.response\";\nimport { SecretWithProjectsListResponse } from \"./responses/secret-with-projects-list.response\";\nimport { SecretResponse } from \"./responses/secret.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SecretService {\n  protected _secret: Subject<SecretView> = new Subject();\n\n  secret$ = this._secret.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getBySecretId(secretId: string): Promise<SecretView> {\n    const r = await this.apiService.send(\"GET\", \"/secrets/\" + secretId, null, true, true);\n    const secretResponse = new SecretResponse(r);\n\n    return await this.createSecretView(secretResponse);\n  }\n\n  async getSecrets(organizationId: string): Promise<SecretListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/secrets\",\n      null,\n      true,\n      true\n    );\n\n    const results = new SecretWithProjectsListResponse(r);\n    return await this.createSecretsListView(organizationId, results);\n  }\n\n  async getSecretsByProject(organizationId: string, projectId: string): Promise<SecretListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/projects/\" + projectId + \"/secrets\",\n      null,\n      true,\n      true\n    );\n\n    const results = new SecretWithProjectsListResponse(r);\n    return await this.createSecretsListView(organizationId, results);\n  }\n\n  async create(organizationId: string, secretView: SecretView) {\n    const request = await this.getSecretRequest(organizationId, secretView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/secrets\",\n      request,\n      true,\n      true\n    );\n    this._secret.next(await this.createSecretView(new SecretResponse(r)));\n  }\n\n  async update(organizationId: string, secretView: SecretView) {\n    const request = await this.getSecretRequest(organizationId, secretView);\n    const r = await this.apiService.send(\"PUT\", \"/secrets/\" + secretView.id, request, true, true);\n    this._secret.next(await this.createSecretView(new SecretResponse(r)));\n  }\n\n  async delete(secrets: SecretListView[]): Promise<BulkOperationStatus[]> {\n    const secretIds = secrets.map((secret) => secret.id);\n    const r = await this.apiService.send(\"POST\", \"/secrets/delete\", secretIds, true, true);\n\n    this._secret.next(null);\n    return r.data.map((element: { id: string; error: string }) => {\n      const bulkOperationStatus = new BulkOperationStatus();\n      bulkOperationStatus.id = element.id;\n      bulkOperationStatus.name = secrets.find((secret) => secret.id == element.id).name;\n      bulkOperationStatus.errorMessage = element.error;\n      return bulkOperationStatus;\n    });\n  }\n\n  async getTrashedSecrets(organizationId: string): Promise<SecretListView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/secrets/\" + organizationId + \"/trash\",\n      null,\n      true,\n      true\n    );\n\n    return await this.createSecretsListView(organizationId, new SecretWithProjectsListResponse(r));\n  }\n\n  async deleteTrashed(organizationId: string, secretIds: string[]) {\n    await this.apiService.send(\n      \"POST\",\n      \"/secrets/\" + organizationId + \"/trash/empty\",\n      secretIds,\n      true,\n      true\n    );\n\n    this._secret.next(null);\n  }\n\n  async restoreTrashed(organizationId: string, secretIds: string[]) {\n    await this.apiService.send(\n      \"POST\",\n      \"/secrets/\" + organizationId + \"/trash/restore\",\n      secretIds,\n      true,\n      true\n    );\n\n    this._secret.next(null);\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async getSecretRequest(\n    organizationId: string,\n    secretView: SecretView\n  ): Promise<SecretRequest> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = new SecretRequest();\n    const [key, value, note] = await Promise.all([\n      this.encryptService.encrypt(secretView.name, orgKey),\n      this.encryptService.encrypt(secretView.value, orgKey),\n      this.encryptService.encrypt(secretView.note, orgKey),\n    ]);\n    request.key = key.encryptedString;\n    request.value = value.encryptedString;\n    request.note = note.encryptedString;\n    request.projectIds = [];\n\n    secretView.projects?.forEach((e) => request.projectIds.push(e.id));\n\n    return request;\n  }\n\n  private async createSecretView(secretResponse: SecretResponse): Promise<SecretView> {\n    const orgKey = await this.getOrganizationKey(secretResponse.organizationId);\n\n    const secretView = new SecretView();\n    secretView.id = secretResponse.id;\n    secretView.organizationId = secretResponse.organizationId;\n    secretView.creationDate = secretResponse.creationDate;\n    secretView.revisionDate = secretResponse.revisionDate;\n\n    const [name, value, note] = await Promise.all([\n      this.encryptService.decryptToUtf8(new EncString(secretResponse.name), orgKey),\n      this.encryptService.decryptToUtf8(new EncString(secretResponse.value), orgKey),\n      this.encryptService.decryptToUtf8(new EncString(secretResponse.note), orgKey),\n    ]);\n    secretView.name = name;\n    secretView.value = value;\n    secretView.note = note;\n\n    secretView.read = secretResponse.read;\n    secretView.write = secretResponse.write;\n\n    if (secretResponse.projects != null) {\n      secretView.projects = await this.decryptProjectsMappedToSecrets(\n        orgKey,\n        secretResponse.projects\n      );\n    }\n\n    return secretView;\n  }\n\n  private async createSecretsListView(\n    organizationId: string,\n    secrets: SecretWithProjectsListResponse\n  ): Promise<SecretListView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n\n    const projectsMappedToSecretsView = await this.decryptProjectsMappedToSecrets(\n      orgKey,\n      secrets.projects\n    );\n\n    return await Promise.all(\n      secrets.secrets.map(async (s: SecretListItemResponse) => {\n        const secretListView = new SecretListView();\n        secretListView.id = s.id;\n        secretListView.organizationId = s.organizationId;\n        secretListView.name = await this.encryptService.decryptToUtf8(\n          new EncString(s.name),\n          orgKey\n        );\n        secretListView.creationDate = s.creationDate;\n        secretListView.revisionDate = s.revisionDate;\n\n        const projectIds = s.projects?.map((p) => p.id);\n        secretListView.projects = projectsMappedToSecretsView.filter((p) =>\n          projectIds.includes(p.id)\n        );\n\n        secretListView.read = s.read;\n        secretListView.write = s.write;\n\n        return secretListView;\n      })\n    );\n  }\n\n  private async decryptProjectsMappedToSecrets(\n    orgKey: SymmetricCryptoKey,\n    projects: SecretProjectResponse[]\n  ): Promise<SecretProjectView[]> {\n    return await Promise.all(\n      projects.map(async (s: SecretProjectResponse) => {\n        const projectsMappedToSecretView = new SecretProjectView();\n        projectsMappedToSecretView.id = s.id;\n        projectsMappedToSecretView.name = s.name\n          ? await this.encryptService.decryptToUtf8(new EncString(s.name), orgKey)\n          : null;\n        return projectsMappedToSecretView;\n      })\n    );\n  }\n}\n","<bit-simple-dialog>\n  <span bitDialogTitle>{{ title | i18n }}</span>\n  <span bitDialogContent>\n    <div *ngIf=\"showSoftDeleteSecretWarning\">\n      {{ \"softDeleteSecretWarning\" | i18n }}\n    </div>\n    {{ \"deleteItemConfirmation\" | i18n }}\n  </span>\n  <ng-container bitDialogFooter>\n    <button type=\"button\" bitButton buttonType=\"primary\" [bitAction]=\"delete\">\n      {{ submitButtonText | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-simple-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { SecretListView } from \"../../models/view/secret-list.view\";\nimport {\n  BulkOperationStatus,\n  BulkStatusDetails,\n  BulkStatusDialogComponent,\n} from \"../../shared/dialogs/bulk-status-dialog.component\";\nimport { SecretService } from \"../secret.service\";\n\nexport interface SecretDeleteOperation {\n  secrets: SecretListView[];\n}\n\n@Component({\n  templateUrl: \"./secret-delete.component.html\",\n})\nexport class SecretDeleteDialogComponent {\n  constructor(\n    public dialogRef: DialogRef,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    @Inject(DIALOG_DATA) private data: SecretDeleteOperation,\n    private dialogService: DialogServiceAbstraction\n  ) {}\n\n  showSoftDeleteSecretWarning = this.data.secrets.length === 1;\n\n  get title() {\n    return this.data.secrets.length === 1 ? \"deleteSecret\" : \"deleteSecrets\";\n  }\n\n  get submitButtonText() {\n    return this.data.secrets.length === 1 ? \"deleteSecret\" : \"deleteSecrets\";\n  }\n\n  delete = async () => {\n    const bulkResponses = await this.secretService.delete(this.data.secrets);\n\n    if (bulkResponses.find((response) => response.errorMessage)) {\n      this.openBulkStatusDialog(bulkResponses.filter((response) => response.errorMessage));\n      this.dialogRef.close(true);\n      return;\n    }\n\n    const message =\n      this.data.secrets.length === 1 ? \"softDeleteSuccessToast\" : \"softDeletesSuccessToast\";\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n\n    this.dialogRef.close(true);\n  };\n\n  openBulkStatusDialog(bulkStatusResults: BulkOperationStatus[]) {\n    this.dialogService.open<unknown, BulkStatusDetails>(BulkStatusDialogComponent, {\n      data: {\n        title: \"deleteSecrets\",\n        subTitle: \"secrets\",\n        columnTitle: \"name\",\n        message: \"bulkDeleteSecretsErrorMessage\",\n        details: bulkStatusResults,\n      },\n    });\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { lastValueFrom, Subject, takeUntil } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { BitValidators } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport { ProjectView } from \"../../models/view/project.view\";\nimport { SecretListView } from \"../../models/view/secret-list.view\";\nimport { SecretProjectView } from \"../../models/view/secret-project.view\";\nimport { SecretView } from \"../../models/view/secret.view\";\nimport { ProjectService } from \"../../projects/project.service\";\nimport { SecretService } from \"../secret.service\";\n\nimport { SecretDeleteDialogComponent, SecretDeleteOperation } from \"./secret-delete.component\";\n\nexport enum OperationType {\n  Add,\n  Edit,\n}\n\nexport interface SecretOperation {\n  organizationId: string;\n  operation: OperationType;\n  projectId?: string;\n  secretId?: string;\n}\n\n@Component({\n  templateUrl: \"./secret-dialog.component.html\",\n})\nexport class SecretDialogComponent implements OnInit {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", {\n      validators: [Validators.required, BitValidators.trimValidator],\n      updateOn: \"submit\",\n    }),\n    value: new FormControl(\"\", [Validators.required]),\n    notes: new FormControl(\"\", {\n      validators: [BitValidators.trimValidator],\n      updateOn: \"submit\",\n    }),\n    project: new FormControl(\"\", [Validators.required]),\n    newProjectName: new FormControl(\"\", {\n      validators: [BitValidators.trimValidator],\n      updateOn: \"submit\",\n    }),\n  });\n\n  private destroy$ = new Subject<void>();\n  private loading = true;\n  projects: ProjectListView[];\n  addNewProject = false;\n  newProjectGuid = Utils.newGuid();\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: SecretOperation,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private projectService: ProjectService,\n    private dialogService: DialogServiceAbstraction,\n    private organizationService: OrganizationService\n  ) {}\n\n  async ngOnInit() {\n    if (this.data.operation === OperationType.Edit && this.data.secretId) {\n      await this.loadData();\n    } else if (this.data.operation !== OperationType.Add) {\n      this.dialogRef.close();\n      throw new Error(`The secret dialog was not called with the appropriate operation values.`);\n    } else if (this.data.operation == OperationType.Add) {\n      await this.loadProjects(true);\n      if (this.data.projectId == null || this.data.projectId == \"\") {\n        this.addNewProjectOptionToProjectsDropDown();\n      }\n    }\n\n    if (this.data.projectId) {\n      this.formGroup.get(\"project\").setValue(this.data.projectId);\n    }\n\n    if (this.organizationService.get(this.data.organizationId)?.isAdmin) {\n      this.formGroup.get(\"project\").removeValidators(Validators.required);\n      this.formGroup.get(\"project\").updateValueAndValidity();\n    }\n  }\n\n  async loadData() {\n    this.formGroup.disable();\n    const secret: SecretView = await this.secretService.getBySecretId(this.data.secretId);\n\n    await this.loadProjects(secret.write);\n\n    this.formGroup.setValue({\n      name: secret.name,\n      value: secret.value,\n      notes: secret.note,\n      project: secret.projects[0]?.id ?? \"\",\n      newProjectName: \"\",\n    });\n\n    this.loading = false;\n\n    if (secret.write) {\n      this.formGroup.enable();\n    }\n  }\n\n  async loadProjects(filterByPermission: boolean) {\n    this.projects = await this.projectService\n      .getProjects(this.data.organizationId)\n      .then((projects) => projects.sort((a, b) => a.name.localeCompare(b.name)));\n\n    if (filterByPermission) {\n      this.projects = this.projects.filter((p) => p.write);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private addNewProjectOptionToProjectsDropDown() {\n    this.formGroup\n      .get(\"project\")\n      .valueChanges.pipe(takeUntil(this.destroy$))\n      .subscribe((val: string) => {\n        this.dropDownSelected(val);\n      });\n\n    const addNewProject = new ProjectListView();\n    addNewProject.name = this.i18nService.t(\"newProject\");\n    addNewProject.id = this.newProjectGuid;\n    this.projects.unshift(addNewProject);\n  }\n\n  private dropDownSelected(val: string) {\n    this.addNewProject = val == this.newProjectGuid;\n\n    if (this.addNewProject) {\n      this.formGroup.get(\"newProjectName\").addValidators([Validators.required]);\n    } else {\n      this.formGroup.get(\"newProjectName\").clearValidators();\n    }\n\n    this.formGroup.get(\"newProjectName\").updateValueAndValidity();\n  }\n\n  get title() {\n    return this.data.operation === OperationType.Add ? \"newSecret\" : \"editSecret\";\n  }\n\n  get showSpinner() {\n    return this.data.operation === OperationType.Edit && this.loading;\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const secretView = this.getSecretView();\n\n    if (this.addNewProject) {\n      const newProject = await this.createProject(this.getNewProjectView());\n      secretView.projects = [newProject];\n    }\n\n    if (this.data.operation === OperationType.Add) {\n      await this.createSecret(secretView);\n    } else {\n      secretView.id = this.data.secretId;\n      await this.updateSecret(secretView);\n    }\n    this.dialogRef.close();\n  };\n\n  get deleteButtonIsVisible(): boolean {\n    return this.data.operation === OperationType.Edit;\n  }\n\n  private async createProject(projectView: ProjectView) {\n    return await this.projectService.create(this.data.organizationId, projectView);\n  }\n\n  protected openDeleteSecretDialog() {\n    const secretListView: SecretListView[] = this.getSecretListView();\n\n    const dialogRef = this.dialogService.open<unknown, SecretDeleteOperation>(\n      SecretDeleteDialogComponent,\n      {\n        data: {\n          secrets: secretListView,\n        },\n      }\n    );\n\n    // If the secret is deleted, chain close this dialog after the delete dialog\n    lastValueFrom(dialogRef.closed).then(\n      (closeData) => closeData !== undefined && this.dialogRef.close()\n    );\n  }\n\n  private async createSecret(secretView: SecretView) {\n    await this.secretService.create(this.data.organizationId, secretView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"secretCreated\"));\n  }\n\n  private getNewProjectView() {\n    const projectView = new ProjectView();\n    projectView.organizationId = this.data.organizationId;\n    projectView.name = this.formGroup.value.newProjectName;\n    return projectView;\n  }\n\n  private async updateSecret(secretView: SecretView) {\n    await this.secretService.update(this.data.organizationId, secretView);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"secretEdited\"));\n  }\n\n  private getSecretView() {\n    const secretView = new SecretView();\n    secretView.organizationId = this.data.organizationId;\n    secretView.name = this.formGroup.value.name;\n    secretView.value = this.formGroup.value.value;\n    secretView.note = this.formGroup.value.notes;\n\n    const project = this.projects.find((p) => p.id == this.formGroup.value.project);\n    secretView.projects = project != undefined ? [project] : [];\n\n    return secretView;\n  }\n\n  private getSecretListView() {\n    const secretListViews: SecretListView[] = [];\n    const emptyProjects: SecretProjectView[] = [];\n\n    const secretListView = new SecretListView();\n\n    if (this.formGroup.value.project) {\n      secretListView.projects = [this.projects.find((p) => p.id == this.formGroup.value.project)];\n    } else {\n      secretListView.projects = emptyProjects;\n    }\n\n    secretListView.organizationId = this.data.organizationId;\n    secretListView.id = this.data.secretId;\n    secretListView.name = this.formGroup.value.name;\n    secretListViews.push(secretListView);\n    return secretListViews;\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"large\">\n    <ng-container bitDialogTitle>{{ title | i18n }}</ng-container>\n    <div bitDialogContent class=\"tw-relative\">\n      <div\n        *ngIf=\"showSpinner\"\n        class=\"tw-absolute tw-flex tw-h-full tw-w-full tw-items-center tw-justify-center tw-bg-text-contrast\"\n      >\n        <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n      </div>\n      <div class=\"tw-flex tw-gap-4 tw-pt-4\">\n        <bit-form-field class=\"tw-w-1/3\">\n          <bit-label for=\"secret-name\">{{ \"name\" | i18n }}</bit-label>\n          <input formControlName=\"name\" bitInput />\n        </bit-form-field>\n        <bit-form-field class=\"tw-w-full\">\n          <bit-label>{{ \"value\" | i18n }}</bit-label>\n          <textarea bitInput rows=\"4\" formControlName=\"value\"></textarea>\n        </bit-form-field>\n      </div>\n      <bit-form-field>\n        <bit-label>{{ \"notes\" | i18n }}</bit-label>\n        <textarea bitInput rows=\"4\" formControlName=\"notes\"></textarea>\n      </bit-form-field>\n\n      <hr />\n\n      <bit-form-field class=\"tw-mb-0 tw-mt-3\">\n        <bit-label>{{ \"project\" | i18n }}</bit-label>\n        <bit-select bitInput name=\"project\" formControlName=\"project\">\n          <bit-option value=\"\" [label]=\"'selectPlaceholder' | i18n\"></bit-option>\n          <bit-option\n            *ngFor=\"let p of projects\"\n            [icon]=\"p.id === this.newProjectGuid ? 'bwi-plus-circle' : ''\"\n            [value]=\"p.id\"\n            [label]=\"p.name\"\n          >\n          </bit-option>\n        </bit-select>\n      </bit-form-field>\n\n      <bit-form-field *ngIf=\"addNewProject == true\">\n        <bit-label>{{ \"projectName\" | i18n }}</bit-label>\n        <input formControlName=\"newProjectName\" maxlength=\"1000\" bitInput />\n      </bit-form-field>\n    </div>\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"save\" | i18n }}\n      </button>\n      <button\n        type=\"button\"\n        bitButton\n        buttonType=\"secondary\"\n        bitFormButton\n        bitDialogClose\n        [disabled]=\"false\"\n      >\n        {{ \"cancel\" | i18n }}\n      </button>\n      <button\n        *ngIf=\"deleteButtonIsVisible\"\n        class=\"tw-ml-auto\"\n        type=\"button\"\n        bitIconButton=\"bwi-trash\"\n        buttonType=\"danger\"\n        bitFormButton\n        (click)=\"openDeleteSecretDialog()\"\n      ></button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","export class ServiceAccountView {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n}\n","import { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nexport class ServiceAccountRequest {\n  name: EncString;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class ServiceAccountResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  name: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\n\nimport { ServiceAccountView } from \"../models/view/service-account.view\";\nimport { BulkOperationStatus } from \"../shared/dialogs/bulk-status-dialog.component\";\n\nimport { ServiceAccountRequest } from \"./models/requests/service-account.request\";\nimport { ServiceAccountResponse } from \"./models/responses/service-account.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ServiceAccountService {\n  protected _serviceAccount: Subject<ServiceAccountView> = new Subject();\n\n  serviceAccount$ = this._serviceAccount.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getServiceAccounts(organizationId: string): Promise<ServiceAccountView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/service-accounts\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, ServiceAccountResponse);\n    return await this.createServiceAccountViews(organizationId, results.data);\n  }\n\n  async getByServiceAccountId(\n    serviceAccountId: string,\n    organizationId: string\n  ): Promise<ServiceAccountView> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId,\n      null,\n      true,\n      true\n    );\n\n    return await this.createServiceAccountView(orgKey, new ServiceAccountResponse(r));\n  }\n\n  async update(\n    serviceAccountId: string,\n    organizationId: string,\n    serviceAccountView: ServiceAccountView\n  ) {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = await this.getServiceAccountRequest(orgKey, serviceAccountView);\n    const r = await this.apiService.send(\n      \"PUT\",\n      \"/service-accounts/\" + serviceAccountId,\n      request,\n      true,\n      true\n    );\n    this._serviceAccount.next(\n      await this.createServiceAccountView(orgKey, new ServiceAccountResponse(r))\n    );\n  }\n\n  async create(organizationId: string, serviceAccountView: ServiceAccountView) {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const request = await this.getServiceAccountRequest(orgKey, serviceAccountView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/service-accounts\",\n      request,\n      true,\n      true\n    );\n    this._serviceAccount.next(\n      await this.createServiceAccountView(orgKey, new ServiceAccountResponse(r))\n    );\n  }\n\n  async delete(serviceAccounts: ServiceAccountView[]): Promise<BulkOperationStatus[]> {\n    const ids = serviceAccounts.map((serviceAccount) => serviceAccount.id);\n    const r = await this.apiService.send(\"POST\", \"/service-accounts/delete\", ids, true, true);\n\n    this._serviceAccount.next(null);\n\n    return r.data.map((element: { id: string; error: string }) => {\n      const bulkOperationStatus = new BulkOperationStatus();\n      bulkOperationStatus.id = element.id;\n      bulkOperationStatus.name = serviceAccounts.find((sa) => sa.id == element.id).name;\n      bulkOperationStatus.errorMessage = element.error;\n      return bulkOperationStatus;\n    });\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async getServiceAccountRequest(\n    organizationKey: SymmetricCryptoKey,\n    serviceAccountView: ServiceAccountView\n  ) {\n    const request = new ServiceAccountRequest();\n    request.name = await this.encryptService.encrypt(serviceAccountView.name, organizationKey);\n    return request;\n  }\n\n  private async createServiceAccountView(\n    organizationKey: SymmetricCryptoKey,\n    serviceAccountResponse: ServiceAccountResponse\n  ): Promise<ServiceAccountView> {\n    const serviceAccountView = new ServiceAccountView();\n    serviceAccountView.id = serviceAccountResponse.id;\n    serviceAccountView.organizationId = serviceAccountResponse.organizationId;\n    serviceAccountView.creationDate = serviceAccountResponse.creationDate;\n    serviceAccountView.revisionDate = serviceAccountResponse.revisionDate;\n    serviceAccountView.name = await this.encryptService.decryptToUtf8(\n      new EncString(serviceAccountResponse.name),\n      organizationKey\n    );\n    return serviceAccountView;\n  }\n\n  private async createServiceAccountViews(\n    organizationId: string,\n    serviceAccountResponses: ServiceAccountResponse[]\n  ): Promise<ServiceAccountView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      serviceAccountResponses.map(async (s: ServiceAccountResponse) => {\n        return await this.createServiceAccountView(orgKey, s);\n      })\n    );\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { BitValidators } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../../models/view/service-account.view\";\nimport { ServiceAccountService } from \"../service-account.service\";\n\nexport enum OperationType {\n  Add,\n  Edit,\n}\n\nexport interface ServiceAccountOperation {\n  organizationId: string;\n  serviceAccountId?: string;\n  operation: OperationType;\n}\n\n@Component({\n  templateUrl: \"./service-account-dialog.component.html\",\n})\nexport class ServiceAccountDialogComponent {\n  protected formGroup = new FormGroup(\n    {\n      name: new FormControl(\"\", {\n        validators: [Validators.required, BitValidators.trimValidator],\n        updateOn: \"submit\",\n      }),\n    },\n    {}\n  );\n\n  protected loading = false;\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) private data: ServiceAccountOperation,\n    private serviceAccountService: ServiceAccountService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService\n  ) {}\n\n  async ngOnInit() {\n    if (this.data.operation == OperationType.Edit) {\n      this.loadData();\n    }\n  }\n\n  async loadData() {\n    this.loading = true;\n    const serviceAccount: ServiceAccountView =\n      await this.serviceAccountService.getByServiceAccountId(\n        this.data.serviceAccountId,\n        this.data.organizationId\n      );\n    this.formGroup.patchValue({ name: serviceAccount.name });\n    this.loading = false;\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const serviceAccountView = this.getServiceAccountView();\n    let serviceAccountMessage: string;\n\n    if (this.data.operation == OperationType.Add) {\n      await this.serviceAccountService.create(this.data.organizationId, serviceAccountView);\n      serviceAccountMessage = this.i18nService.t(\"serviceAccountCreated\");\n    } else {\n      await this.serviceAccountService.update(\n        this.data.serviceAccountId,\n        this.data.organizationId,\n        serviceAccountView\n      );\n      serviceAccountMessage = this.i18nService.t(\"serviceAccountUpdated\");\n    }\n\n    this.platformUtilsService.showToast(\"success\", null, serviceAccountMessage);\n    this.dialogRef.close();\n  };\n\n  private getServiceAccountView() {\n    const serviceAccountView = new ServiceAccountView();\n    serviceAccountView.organizationId = this.data.organizationId;\n    serviceAccountView.name = this.formGroup.value.name;\n    return serviceAccountView;\n  }\n\n  get title() {\n    return this.data.operation === OperationType.Add ? \"newServiceAccount\" : \"editServiceAccount\";\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"small\">\n    <ng-container bitDialogTitle>{{ title | i18n }}</ng-container>\n    <div bitDialogContent>\n      <div *ngIf=\"loading\" class=\"tw-text-center\">\n        <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n      </div>\n      <div *ngIf=\"!loading\">\n        <bit-form-field>\n          <bit-label>{{ \"serviceAccountName\" | i18n }}</bit-label>\n          <input formControlName=\"name\" maxlength=\"1000\" bitInput />\n        </bit-form-field>\n      </div>\n    </div>\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"save\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","import { coerceBooleanProperty } from \"@angular/cdk/coercion\";\nimport { Component, HostBinding, Input, OnInit } from \"@angular/core\";\n\nimport type { SortFn } from \"./table-data-source\";\nimport { TableComponent } from \"./table.component\";\n\n@Component({\n  selector: \"th[bitSortable]\",\n  template: `\n    <button [ngClass]=\"classList\" [attr.aria-pressed]=\"isActive\" (click)=\"setActive()\">\n      <ng-content></ng-content>\n      <i class=\"bwi tw-ml-2\" [ngClass]=\"icon\"></i>\n    </button>\n  `,\n})\nexport class SortableComponent implements OnInit {\n  /**\n   * Mark the column as sortable and specify the key to sort by\n   */\n  @Input() bitSortable: string;\n\n  private _default: boolean;\n  /**\n   * Mark the column as the default sort column\n   */\n  @Input() set default(value: boolean | \"\") {\n    this._default = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Custom sorting function\n   *\n   * @example\n   * fn = (a, b) => a.name.localeCompare(b.name)\n   */\n  @Input() fn: SortFn;\n\n  constructor(private table: TableComponent) {}\n\n  ngOnInit(): void {\n    if (this._default && !this.isActive) {\n      this.setActive();\n    }\n  }\n\n  @HostBinding(\"attr.aria-sort\") get ariaSort() {\n    if (!this.isActive) {\n      return undefined;\n    }\n    return this.sort.direction === \"asc\" ? \"ascending\" : \"descending\";\n  }\n\n  protected setActive() {\n    if (this.table.dataSource) {\n      const direction = this.isActive && this.direction === \"asc\" ? \"desc\" : \"asc\";\n      this.table.dataSource.sort = { column: this.bitSortable, direction: direction, fn: this.fn };\n    }\n  }\n\n  private get sort() {\n    return this.table.dataSource?.sort;\n  }\n\n  get isActive() {\n    return this.sort?.column === this.bitSortable;\n  }\n\n  get direction() {\n    return this.sort?.direction;\n  }\n\n  get icon() {\n    if (!this.isActive) {\n      return \"bwi-up-down-btn\";\n    }\n    return this.direction === \"asc\" ? \"bwi-up-solid\" : \"bwi-down-solid\";\n  }\n\n  get classList() {\n    return [\n      \"tw-group\",\n      \"tw-min-w-max\",\n\n      // Offset to border and padding\n      \"-tw-m-1.5\",\n      \"tw-font-bold\",\n\n      // Below is copied from BitIconButtonComponent\n      \"tw-border\",\n      \"tw-border-solid\",\n      \"tw-rounded\",\n      \"tw-transition\",\n      \"hover:tw-no-underline\",\n      \"focus:tw-outline-none\",\n\n      \"tw-bg-transparent\",\n      \"!tw-text-muted\",\n      \"tw-border-transparent\",\n      \"hover:tw-bg-transparent-hover\",\n      \"hover:tw-border-primary-700\",\n      \"focus-visible:before:tw-ring-primary-700\",\n      \"disabled:tw-opacity-60\",\n      \"disabled:hover:tw-border-transparent\",\n      \"disabled:hover:tw-bg-transparent\",\n\n      // Workaround for box-shadow with transparent offset issue:\n      // https://github.com/tailwindlabs/tailwindcss/issues/3595\n      // Remove `before:` and use regular `tw-ring` when browser no longer has bug, or better:\n      // switch to `outline` with `outline-offset` when Safari supports border radius on outline.\n      // Using `box-shadow` to create outlines is a hack and as such `outline` should be preferred.\n      \"tw-relative\",\n      \"before:tw-content-['']\",\n      \"before:tw-block\",\n      \"before:tw-absolute\",\n      \"before:-tw-inset-[3px]\",\n      \"before:tw-rounded-md\",\n      \"before:tw-transition\",\n      \"before:tw-ring\",\n      \"before:tw-ring-transparent\",\n      \"focus-visible:tw-z-10\",\n    ];\n  }\n}\n","<div *ngIf=\"!secrets\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<ng-container *ngIf=\"secrets?.length == 0\">\n  <bit-no-items *ngIf=\"trash\">\n    <ng-container slot=\"title\">{{ \"secretsNoItemsTitle\" | i18n }}</ng-container>\n    <ng-container slot=\"description\">{{ \"secretsTrashNoItemsMessage\" | i18n }}</ng-container>\n  </bit-no-items>\n  <bit-no-items *ngIf=\"!trash\">\n    <ng-container slot=\"title\">{{ \"secretsNoItemsTitle\" | i18n }}</ng-container>\n    <ng-container slot=\"description\">{{ \"secretsNoItemsMessage\" | i18n }}</ng-container>\n    <button\n      type=\"button\"\n      slot=\"button\"\n      bitButton\n      buttonType=\"secondary\"\n      (click)=\"newSecretEvent.emit()\"\n    >\n      <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n      {{ \"newSecret\" | i18n }}\n    </button>\n  </bit-no-items>\n</ng-container>\n\n<bit-table *ngIf=\"secrets?.length >= 1\" [dataSource]=\"dataSource\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"!tw-mb-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell bitSortable=\"name\" default>{{ \"name\" | i18n }}</th>\n      <th bitCell bitSortable=\"projects\" [fn]=\"sortProjects\">{{ \"project\" | i18n }}</th>\n      <th bitCell bitSortable=\"revisionDate\">{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body let-rows$>\n    <tr bitRow *ngFor=\"let secret of rows$ | async\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(secret.id) : null\"\n          [checked]=\"selection.isSelected(secret.id)\"\n        />\n      </td>\n      <td bitCell>\n        <div class=\"tw-flex tw-items-center tw-gap-4 tw-break-all\">\n          <i class=\"bwi bwi-key tw-text-muted\" aria-hidden=\"true\"></i>\n          <button type=\"button\" bitLink (click)=\"editSecretEvent.emit(secret.id)\" *ngIf=\"!trash\">\n            {{ secret.name }}\n          </button>\n          <div *ngIf=\"trash\">{{ secret.name }}</div>\n        </div>\n      </td>\n      <td bitCell>\n        <span\n          *ngFor=\"let project of secret.projects\"\n          bitBadge\n          badgeType=\"secondary\"\n          class=\"tw-ml-1\"\n          [title]=\"project.name\"\n        >\n          {{ project.name | ellipsis : 32 }}\n        </span>\n        <span *ngIf=\"secret.projects.length === 0\" bitBadge badgeType=\"warning\" class=\"tw-ml-1\"\n          ><i class=\"bwi bwi-fw bwi-exclamation-triangle tw-mr-1\" aria-hidden=\"true\"></i\n          >{{ \"unassigned\" | i18n }}</span\n        >\n      </td>\n      <td bitCell class=\"tw-whitespace-nowrap\">{{ secret.revisionDate | date : \"medium\" }}</td>\n      <td bitCell>\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"secretMenu\"\n        ></button>\n      </td>\n\n      <bit-menu #secretMenu>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"editSecretEvent.emit(secret.id)\"\n          *ngIf=\"secret.write && !trash\"\n        >\n          <i class=\"bwi bwi-fw bwi-pencil\" aria-hidden=\"true\"></i>\n          {{ \"editSecret\" | i18n }}\n        </button>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"copySecretNameEvent.emit(secret.name)\"\n          *ngIf=\"!trash\"\n        >\n          <i class=\"bwi bwi-fw bwi-clone\" aria-hidden=\"true\"></i>\n          {{ \"copySecretName\" | i18n }}\n        </button>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"copySecretValueEvent.emit(secret.id)\"\n          *ngIf=\"!trash\"\n        >\n          <i class=\"bwi bwi-fw bwi-clone\" aria-hidden=\"true\"></i>\n          {{ \"copySecretValue\" | i18n }}\n        </button>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"restoreSecretsEvent.emit([secret.id])\"\n          *ngIf=\"trash\"\n        >\n          <i class=\"bwi bwi-fw bwi-refresh\" aria-hidden=\"true\"></i>\n          {{ \"restoreSecret\" | i18n }}\n        </button>\n        <button\n          type=\"button\"\n          bitMenuItem\n          (click)=\"deleteSecretsEvent.emit([secret])\"\n          *ngIf=\"secret.write\"\n        >\n          <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n          <span class=\"tw-text-danger\">{{\n            (trash ? \"permanentlyDelete\" : \"deleteSecret\") | i18n\n          }}</span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"bulkRestoreSecrets()\" *ngIf=\"trash\">\n    <i class=\"bwi bwi-fw bwi-refresh\" aria-hidden=\"true\"></i>\n    <span>{{ \"restoreSelected\" | i18n }}</span>\n  </button>\n  <button type=\"button\" bitMenuItem (click)=\"bulkDeleteSecrets()\">\n    <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">{{ \"deleteSecrets\" | i18n }}</span>\n  </button>\n</bit-menu>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, OnDestroy, Output } from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { TableDataSource } from \"@bitwarden/components\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport { SecretService } from \"../secrets/secret.service\";\n\n@Component({\n  selector: \"sm-secrets-list\",\n  templateUrl: \"./secrets-list.component.html\",\n})\nexport class SecretsListComponent implements OnDestroy {\n  protected dataSource = new TableDataSource<SecretListView>();\n\n  @Input()\n  get secrets(): SecretListView[] {\n    return this._secrets;\n  }\n  set secrets(secrets: SecretListView[]) {\n    this.selection.clear();\n    this._secrets = secrets;\n    this.dataSource.data = secrets;\n  }\n  private _secrets: SecretListView[];\n\n  @Input()\n  set search(search: string) {\n    this.dataSource.filter = search;\n  }\n\n  @Input() trash: boolean;\n\n  @Output() editSecretEvent = new EventEmitter<string>();\n  @Output() copySecretNameEvent = new EventEmitter<string>();\n  @Output() copySecretValueEvent = new EventEmitter<string>();\n  @Output() onSecretCheckedEvent = new EventEmitter<string[]>();\n  @Output() deleteSecretsEvent = new EventEmitter<SecretListView[]>();\n  @Output() newSecretEvent = new EventEmitter();\n  @Output() restoreSecretsEvent = new EventEmitter();\n\n  private destroy$: Subject<void> = new Subject<void>();\n\n  selection = new SelectionModel<string>(true, []);\n\n  constructor(\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService\n  ) {\n    this.selection.changed\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((_) => this.onSecretCheckedEvent.emit(this.selection.selected));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.secrets.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.secrets.map((s) => s.id));\n  }\n\n  bulkDeleteSecrets() {\n    if (this.selection.selected.length >= 1) {\n      this.deleteSecretsEvent.emit(\n        this.secrets.filter((secret) => this.selection.isSelected(secret.id))\n      );\n    } else {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\")\n      );\n    }\n  }\n\n  bulkRestoreSecrets() {\n    if (this.selection.selected.length >= 1) {\n      this.restoreSecretsEvent.emit(this.selection.selected);\n    } else {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\")\n      );\n    }\n  }\n\n  sortProjects = (a: SecretListView, b: SecretListView): number => {\n    const aProjects = a.projects;\n    const bProjects = b.projects;\n    if (aProjects.length !== bProjects.length) {\n      return aProjects.length - bProjects.length;\n    }\n\n    return aProjects[0]?.name.localeCompare(bProjects[0].name);\n  };\n\n  /**\n   * TODO: Refactor to smart component and remove\n   */\n  static copySecretName(\n    name: string,\n    platformUtilsService: PlatformUtilsService,\n    i18nService: I18nService\n  ) {\n    platformUtilsService.copyToClipboard(name);\n    platformUtilsService.showToast(\n      \"success\",\n      null,\n      i18nService.t(\"valueCopied\", i18nService.t(\"name\"))\n    );\n  }\n\n  /**\n   * TODO: Refactor to smart component and remove\n   */\n  static copySecretValue(\n    id: string,\n    platformUtilsService: PlatformUtilsService,\n    i18nService: I18nService,\n    secretService: SecretService\n  ) {\n    const value = secretService.getBySecretId(id).then((secret) => secret.value);\n    SecretsListComponent.copyToClipboardAsync(value, platformUtilsService).then(() => {\n      platformUtilsService.showToast(\n        \"success\",\n        null,\n        i18nService.t(\"valueCopied\", i18nService.t(\"value\"))\n      );\n    });\n  }\n\n  /**\n   * TODO: Remove in favor of updating `PlatformUtilsService.copyToClipboard`\n   */\n  private static copyToClipboardAsync(\n    text: Promise<string>,\n    platformUtilsService: PlatformUtilsService\n  ) {\n    if (platformUtilsService.isSafari()) {\n      return navigator.clipboard.write([\n        new ClipboardItem({\n          [\"text/plain\"]: text,\n        }),\n      ]);\n    }\n\n    return text.then((t) => platformUtilsService.copyToClipboard(t));\n  }\n}\n","<header\n  *ngIf=\"routeData$ | async as routeData\"\n  class=\"-tw-m-6 tw-mb-3 tw-flex tw-flex-col tw-p-6\"\n  [ngClass]=\"{\n    'tw-border-0 tw-border-b tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-pb-0':\n      tabsContainer.childElementCount !== 0\n  }\"\n>\n  <div class=\"tw-flex\">\n    <div class=\"tw-flex tw-min-w-0 tw-flex-1 tw-flex-col tw-gap-2\">\n      <ng-content select=\"[slot=breadcrumbs]\"></ng-content>\n      <div #titleContainer [ngClass]=\"{ 'tw-hidden': titleContainer.childElementCount === 0 }\">\n        <ng-content select=\"[slot=title]\"></ng-content>\n      </div>\n      <h1\n        *ngIf=\"titleContainer.childElementCount === 0\"\n        bitTypography=\"h1\"\n        noMargin\n        class=\"tw-m-0 tw-mr-2 tw-truncate tw-leading-10\"\n        [title]=\"title || (routeData.titleId | i18n)\"\n      >\n        <i *ngIf=\"icon\" class=\"bwi {{ icon }}\" aria-hidden=\"true\"></i>\n        {{ title || (routeData.titleId | i18n) }}\n      </h1>\n    </div>\n    <div class=\"tw-ml-auto tw-flex tw-flex-col tw-gap-4\">\n      <div class=\"tw-flex tw-min-w-max tw-items-center tw-justify-end tw-gap-2\">\n        <ng-content></ng-content>\n        <product-switcher></product-switcher>\n        <ng-container *ngIf=\"account$ | async as account\">\n          <button\n            type=\"button\"\n            [bitMenuTriggerFor]=\"accountMenu\"\n            class=\"tw-border-0 tw-bg-transparent tw-p-0\"\n          >\n            <dynamic-avatar [id]=\"account.userId\" [text]=\"account | userName\"></dynamic-avatar>\n          </button>\n\n          <bit-menu #accountMenu>\n            <div class=\"tw-flex tw-min-w-52 tw-max-w-72 tw-flex-col\">\n              <div\n                class=\"tw-flex tw-items-center tw-px-4 tw-py-1 tw-leading-tight tw-text-info\"\n                appStopProp\n              >\n                <dynamic-avatar [id]=\"account.userId\" [text]=\"account | userName\"></dynamic-avatar>\n                <div class=\"tw-ml-2 tw-block tw-overflow-hidden tw-whitespace-nowrap\">\n                  <span>{{ \"loggedInAs\" | i18n }}</span>\n                  <small class=\"tw-block tw-overflow-hidden tw-whitespace-nowrap tw-text-muted\">\n                    {{ account | userName }}\n                  </small>\n                </div>\n              </div>\n\n              <bit-menu-divider></bit-menu-divider>\n\n              <a bitMenuItem routerLink=\"/settings/account\">\n                <i class=\"bwi bwi-fw bwi-user\" aria-hidden=\"true\"></i>\n                {{ \"accountSettings\" | i18n }}\n              </a>\n              <a bitMenuItem href=\"https://bitwarden.com/help/\" target=\"_blank\" rel=\"noopener\">\n                <i class=\"bwi bwi-fw bwi-question-circle\" aria-hidden=\"true\"></i>\n                {{ \"getHelp\" | i18n }}\n              </a>\n              <a bitMenuItem href=\"https://bitwarden.com/download/\" target=\"_blank\" rel=\"noopener\">\n                <i class=\"bwi bwi-fw bwi-download\" aria-hidden=\"true\"></i>\n                {{ \"getApps\" | i18n }}\n              </a>\n\n              <bit-menu-divider></bit-menu-divider>\n\n              <button bitMenuItem type=\"button\" (click)=\"lock()\">\n                <i class=\"bwi bwi-fw bwi-lock\" aria-hidden=\"true\"></i>\n                {{ \"lockNow\" | i18n }}\n              </button>\n              <button bitMenuItem type=\"button\" (click)=\"logout()\">\n                <i class=\"bwi bwi-fw bwi-sign-out\" aria-hidden=\"true\"></i>\n                {{ \"logOut\" | i18n }}\n              </button>\n            </div>\n          </bit-menu>\n        </ng-container>\n      </div>\n      <div\n        class=\"tw-ml-auto\"\n        #contentContainer\n        [ngClass]=\"{ 'tw-hidden': contentContainer.childElementCount === 0 }\"\n      >\n        <ng-content select=\"[slot=secondary]\"></ng-content>\n      </div>\n    </div>\n  </div>\n  <div\n    #tabsContainer\n    class=\"-tw-mx-4 -tw-mb-px\"\n    [ngClass]=\"{ 'tw-hidden': tabsContainer.childElementCount === 0 }\"\n  >\n    <ng-content select=\"[slot=tabs]\"></ng-content>\n  </div>\n</header>\n","import { Component, Input } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, map, Observable } from \"rxjs\";\n\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { AccountProfile } from \"@bitwarden/common/platform/models/domain/account\";\n\n@Component({\n  selector: \"sm-header\",\n  templateUrl: \"./header.component.html\",\n})\nexport class HeaderComponent {\n  /**\n   * Custom title that overrides the route data `titleId`\n   */\n  @Input() title: string;\n\n  /**\n   * Icon to show before the title\n   */\n  @Input() icon: string;\n\n  protected routeData$: Observable<{ titleId: string }>;\n  protected account$: Observable<AccountProfile>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private stateService: StateService,\n    private messagingService: MessagingService\n  ) {\n    this.routeData$ = this.route.data.pipe(\n      map((params) => {\n        return {\n          titleId: params.titleId,\n        };\n      })\n    );\n\n    this.account$ = combineLatest([\n      this.stateService.activeAccount$,\n      this.stateService.accounts$,\n    ]).pipe(\n      map(([activeAccount, accounts]) => {\n        return accounts[activeAccount]?.profile;\n      })\n    );\n  }\n\n  protected lock() {\n    this.messagingService.send(\"lockVault\");\n  }\n\n  protected logout() {\n    this.messagingService.send(\"logout\");\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\n\nimport {\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../projects/dialog/project-dialog.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"../secrets/dialog/secret-dialog.component\";\nimport {\n  ServiceAccountDialogComponent,\n  ServiceAccountOperation,\n} from \"../service-accounts/dialog/service-account-dialog.component\";\n\n@Component({\n  selector: \"sm-new-menu\",\n  templateUrl: \"./new-menu.component.html\",\n})\nexport class NewMenuComponent implements OnInit, OnDestroy {\n  private organizationId: string;\n  private destroy$: Subject<void> = new Subject<void>();\n\n  constructor(private route: ActivatedRoute, private dialogService: DialogServiceAbstraction) {}\n\n  ngOnInit() {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params: any) => {\n      this.organizationId = params.organizationId;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  openSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openProjectDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openServiceAccountDialog() {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n}\n","<div *ngIf=\"!projects\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<bit-no-items *ngIf=\"projects?.length == 0\">\n  <ng-container slot=\"title\">{{ \"projectsNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container slot=\"description\">{{ \"projectsNoItemsMessage\" | i18n }}</ng-container>\n  <button\n    type=\"button\"\n    slot=\"button\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"newProjectEvent.emit()\"\n  >\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newProject\" | i18n }}\n  </button>\n</bit-no-items>\n\n<bit-table *ngIf=\"projects?.length >= 1\" [dataSource]=\"dataSource\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"!tw-mb-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell bitSortable=\"name\" default>{{ \"name\" | i18n }}</th>\n      <th bitCell bitSortable=\"revisionDate\">{{ \"lastEdited\" | i18n }}</th>\n      <th\n        bitCell\n        class=\"tw-w-0\"\n        [ngClass]=\"{ 'tw-invisible': !(hasWriteAccessOnSelected$ | async) }\"\n      >\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body let-rows$>\n    <tr bitRow *ngFor=\"let project of rows$ | async\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(project.id) : null\"\n          [checked]=\"selection.isSelected(project.id)\"\n        />\n      </td>\n      <td bitCell>\n        <div class=\"tw-flex tw-items-center tw-gap-4 tw-break-all\">\n          <i class=\"bwi bwi-collection tw-text-muted\" aria-hidden=\"true\"></i>\n          <a bitLink [routerLink]=\"['/sm', project.organizationId, 'projects', project.id]\">{{\n            project.name\n          }}</a>\n        </div>\n      </td>\n      <td bitCell class=\"tw-whitespace-nowrap\">{{ project.revisionDate | date : \"medium\" }}</td>\n      <td bitCell>\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [bitMenuTriggerFor]=\"projectMenu\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n        ></button>\n      </td>\n      <bit-menu #projectMenu>\n        <button\n          *ngIf=\"project.write\"\n          type=\"button\"\n          bitMenuItem\n          (click)=\"editProjectEvent.emit(project.id)\"\n        >\n          <i class=\"bwi bwi-fw bwi-pencil\" aria-hidden=\"true\"></i>\n          {{ \"editProject\" | i18n }}\n        </button>\n        <a bitMenuItem [routerLink]=\"['/sm', project.organizationId, 'projects', project.id]\">\n          <i class=\"bwi bwi-fw bwi-eye\" aria-hidden=\"true\"></i>\n          {{ \"viewProject\" | i18n }}\n        </a>\n        <button *ngIf=\"project.write\" type=\"button\" bitMenuItem (click)=\"deleteProject(project.id)\">\n          <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n          <span class=\"tw-text-danger\">{{ \"deleteProject\" | i18n }}</span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"bulkDeleteProjects()\">\n    <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">{{ \"deleteProjects\" | i18n }}</span>\n  </button>\n</bit-menu>\n","<button\n  type=\"button\"\n  bitButton\n  class=\"tw-min-w-max\"\n  buttonType=\"primary\"\n  [bitMenuTriggerFor]=\"newMenu\"\n>\n  {{ \"new\" | i18n }} <i class=\"bwi bwi-angle-down\" aria-hidden=\"true\"></i>\n</button>\n\n<bit-menu #newMenu>\n  <button type=\"button\" bitMenuItem (click)=\"openProjectDialog()\">\n    <i class=\"bwi bwi-fw bwi-sitemap\" aria-hidden=\"true\"></i>\n    {{ \"project\" | i18n }}\n  </button>\n  <button type=\"button\" bitMenuItem (click)=\"openSecretDialog()\">\n    <i class=\"bwi bwi-fw bwi-key\" aria-hidden=\"true\"></i>\n    {{ \"secret\" | i18n }}\n  </button>\n  <button type=\"button\" bitMenuItem (click)=\"openServiceAccountDialog()\">\n    <i class=\"bwi bwi-fw bwi-wrench\" aria-hidden=\"true\"></i>\n    {{ \"serviceAccount\" | i18n }}\n  </button>\n</bit-menu>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, Output } from \"@angular/core\";\nimport { map } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { TableDataSource } from \"@bitwarden/components\";\n\nimport { ProjectListView } from \"../models/view/project-list.view\";\n\n@Component({\n  selector: \"sm-projects-list\",\n  templateUrl: \"./projects-list.component.html\",\n})\nexport class ProjectsListComponent {\n  @Input()\n  get projects(): ProjectListView[] {\n    return this._projects;\n  }\n  set projects(projects: ProjectListView[]) {\n    this.selection.clear();\n    this._projects = projects;\n    this.dataSource.data = projects;\n  }\n  private _projects: ProjectListView[];\n\n  @Input()\n  set search(search: string) {\n    this.dataSource.filter = search;\n  }\n\n  @Output() editProjectEvent = new EventEmitter<string>();\n  @Output() deleteProjectEvent = new EventEmitter<ProjectListView[]>();\n  @Output() newProjectEvent = new EventEmitter();\n\n  selection = new SelectionModel<string>(true, []);\n  protected dataSource = new TableDataSource<ProjectListView>();\n  protected hasWriteAccessOnSelected$ = this.selection.changed.pipe(\n    map((_) => this.selectedHasWriteAccess())\n  );\n\n  constructor(\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService\n  ) {}\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.projects.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.projects.map((s) => s.id));\n  }\n\n  deleteProject(projectId: string) {\n    this.deleteProjectEvent.emit(this.projects.filter((p) => p.id == projectId));\n  }\n\n  bulkDeleteProjects() {\n    if (this.selection.selected.length >= 1) {\n      this.deleteProjectEvent.emit(\n        this.projects.filter((project) => this.selection.isSelected(project.id))\n      );\n    } else {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\")\n      );\n    }\n  }\n\n  private selectedHasWriteAccess() {\n    const selectedProjects = this.projects.filter((project) =>\n      this.selection.isSelected(project.id)\n    );\n    if (selectedProjects.some((project) => project.write)) {\n      return true;\n    }\n    return false;\n  }\n}\n","<ng-template #content>\n  <i class=\"bwi bwi-fw !tw-mr-4\" [ngClass]=\"completed ? 'bwi-check tw-text-success' : icon\"></i\n  ><span\n    [ngClass]=\"{\n      'tw-text-primary-700 tw-line-through tw-decoration-primary-700 tw-opacity-50': completed\n    }\"\n    >{{ title }}<i class=\"bwi bwi-angle-right tw-ml-1\"></i\n  ></span>\n</ng-template>\n\n<li class=\"tw-list-none\">\n  <a bitLink *ngIf=\"route\" [routerLink]=\"route\">\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </a>\n  <button type=\"button\" bitLink *ngIf=\"!route\">\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </button>\n  <div\n    class=\"tw-ml-8 tw-mt-1 tw-text-sm\"\n    [ngClass]=\"{ 'tw-opacity-50': completed }\"\n    (click)=\"handleClick($event)\"\n  >\n    <ng-content></ng-content>\n  </div>\n</li>\n","import { Component, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-onboarding-task\",\n  templateUrl: \"./onboarding-task.component.html\",\n  host: {\n    class: \"tw-max-w-max\",\n  },\n})\nexport class OnboardingTaskComponent {\n  @Input()\n  completed = false;\n\n  @Input()\n  icon = \"bwi-info-circle\";\n\n  @Input()\n  title: string;\n\n  @Input()\n  route: string | any[];\n\n  handleClick(ev: MouseEvent) {\n    /**\n     * If the main `ng-content` is clicked, we don't want to trigger the task's click handler.\n     */\n    ev.stopPropagation();\n  }\n}\n","<div [ngClass]=\"outerBarStyles\">\n  <div\n    [ngClass]=\"innerBarStyles\"\n    role=\"progressbar\"\n    aria-valuemin=\"0\"\n    aria-valuemax=\"100\"\n    attr.aria-valuenow=\"{{ barWidth }}\"\n    [ngStyle]=\"{ width: barWidth + '%' }\"\n  >\n    <div\n      *ngIf=\"displayText\"\n      class=\"tw-flex tw-h-full tw-flex-wrap tw-items-center tw-overflow-hidden\"\n    >\n      <!-- If text is too long to fit, wrap it below to hide -->\n      <div class=\"tw-h-full\">&nbsp;</div>\n      <div class=\"tw-pr-1\">{{ textContent }}</div>\n    </div>\n  </div>\n</div>\n","import { Component, Input } from \"@angular/core\";\n\ntype SizeTypes = \"small\" | \"default\" | \"large\";\ntype BackgroundTypes = \"danger\" | \"primary\" | \"success\" | \"warning\";\n\nconst SizeClasses: Record<SizeTypes, string[]> = {\n  small: [\"tw-h-1\"],\n  default: [\"tw-h-4\"],\n  large: [\"tw-h-6\"],\n};\n\nconst BackgroundClasses: Record<BackgroundTypes, string[]> = {\n  danger: [\"tw-bg-danger-500\"],\n  primary: [\"tw-bg-primary-500\"],\n  success: [\"tw-bg-success-500\"],\n  warning: [\"tw-bg-warning-500\"],\n};\n\n@Component({\n  selector: \"bit-progress\",\n  templateUrl: \"./progress.component.html\",\n})\nexport class ProgressComponent {\n  @Input() barWidth = 0;\n  @Input() bgColor: BackgroundTypes = \"primary\";\n  @Input() showText = true;\n  @Input() size: SizeTypes = \"default\";\n  @Input() text?: string;\n\n  get displayText() {\n    return this.showText && this.size !== \"small\";\n  }\n\n  get outerBarStyles() {\n    return [\"tw-overflow-hidden\", \"tw-rounded\", \"tw-bg-secondary-100\"].concat(\n      SizeClasses[this.size]\n    );\n  }\n\n  get innerBarStyles() {\n    return [\n      \"tw-flex\",\n      \"tw-justify-center\",\n      \"tw-items-center\",\n      \"tw-whitespace-nowrap\",\n      \"tw-text-xs\",\n      \"tw-font-semibold\",\n      \"tw-text-contrast\",\n      \"tw-transition-all\",\n    ]\n      .concat(SizeClasses[this.size])\n      .concat(BackgroundClasses[this.bgColor]);\n  }\n\n  get textContent() {\n    return this.text || this.barWidth + \"%\";\n  }\n}\n","<details #details class=\"tw-rounded-sm tw-bg-background-alt tw-text-main\" (toggle)=\"toggle()\" open>\n  <summary class=\"tw-list-none tw-p-2 tw-px-4\">\n    <div class=\"tw-flex tw-select-none tw-items-center tw-gap-4\">\n      <i class=\"bwi bwi-dashboard tw-text-3xl tw-text-primary-500\" aria-hidden=\"true\"></i>\n      <div class=\"tw-text-lg\">{{ title }}</div>\n      <bit-progress class=\"tw-flex-1\" [showText]=\"false\" [barWidth]=\"barWidth\"></bit-progress>\n      <span *ngIf=\"tasks.length > 0; else spinner\">\n        {{ \"complete\" | i18n : amountCompleted : tasks.length }}\n      </span>\n      <i\n        class=\"bwi tw-my-auto\"\n        [ngClass]=\"open ? 'bwi-angle-down' : 'bwi-angle-up'\"\n        aria-hidden=\"true\"\n      ></i>\n    </div>\n  </summary>\n  <ul class=\"tw-mb-0 tw-ml-6 tw-flex tw-flex-col tw-gap-4\">\n    <ng-content></ng-content>\n  </ul>\n  <div class=\"tw-p-4 tw-pt-0\">\n    <button bitLink type=\"button\" class=\"tw-ml-auto tw-block\" (click)=\"dismiss.emit()\">\n      {{ \"dismiss\" | i18n }}\n    </button>\n  </div>\n</details>\n\n<ng-template #spinner>\n  <i class=\"bwi bwi-spinner bwi-spin\"></i>\n</ng-template>\n","import { Component, ContentChildren, EventEmitter, Input, Output, QueryList } from \"@angular/core\";\n\nimport { OnboardingTaskComponent } from \"./onboarding-task.component\";\n\n@Component({\n  selector: \"sm-onboarding\",\n  templateUrl: \"./onboarding.component.html\",\n})\nexport class OnboardingComponent {\n  @ContentChildren(OnboardingTaskComponent) tasks: QueryList<OnboardingTaskComponent>;\n  @Input() title: string;\n\n  @Output() dismiss = new EventEmitter<void>();\n\n  protected open = true;\n  protected visible = false;\n\n  protected get amountCompleted(): number {\n    return this.tasks.filter((task) => task.completed).length;\n  }\n\n  protected get barWidth(): number {\n    return this.tasks.length === 0 ? 0 : (this.amountCompleted / this.tasks.length) * 100;\n  }\n\n  protected toggle() {\n    this.open = !this.open;\n  }\n}\n","<section>\n  <header class=\"tw-flex tw-max-w-min tw-items-center tw-gap-2\">\n    <div><ng-content select=\"[slot=summary]\"></ng-content></div>\n    <button\n      type=\"button\"\n      [bitIconButton]=\"open ? 'bwi-angle-up' : 'bwi-angle-down'\"\n      (click)=\"toggle()\"\n      [attr.aria-expanded]=\"open\"\n      [attr.aria-controls]=\"contentId\"\n    ></button>\n  </header>\n  <div *ngIf=\"open\" [attr.id]=\"contentId\" class=\"tw-mt-4\">\n    <ng-content></ng-content>\n  </div>\n</section>\n","import { Component, Input } from \"@angular/core\";\n\n@Component({\n  selector: \"sm-section\",\n  templateUrl: \"./section.component.html\",\n})\nexport class SectionComponent {\n  @Input() open = true;\n\n  /**\n   * UID for `[attr.aria-controls]`\n   */\n  protected contentId = Math.random().toString(36).substring(2);\n\n  protected toggle() {\n    this.open = !this.open;\n  }\n}\n","<sm-header [title]=\"organizationName\">\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n\n<div *ngIf=\"!loading && view$ | async as view; else spinner\">\n  <sm-onboarding [title]=\"'getStarted' | i18n\" *ngIf=\"showOnboarding\" (dismiss)=\"hideOnboarding()\">\n    <sm-onboarding-task\n      [title]=\"'createServiceAccount' | i18n\"\n      (click)=\"openServiceAccountDialog()\"\n      icon=\"bwi-cli\"\n      [completed]=\"view.tasks.createServiceAccount\"\n    >\n      <span class=\"tw-pl-1\">\n        {{ \"downloadThe\" | i18n }}\n        <a bitLink href=\"https://bitwarden.com/help/secrets-manager-cli/\" target=\"_blank\">{{\n          \"smCLI\" | i18n\n        }}</a>\n      </span>\n    </sm-onboarding-task>\n    <sm-onboarding-task\n      *ngIf=\"userIsAdmin\"\n      [title]=\"'createProject' | i18n\"\n      (click)=\"openNewProjectDialog()\"\n      icon=\"bwi-collection\"\n      [completed]=\"view.tasks.createProject\"\n    ></sm-onboarding-task>\n    <sm-onboarding-task\n      *ngIf=\"userIsAdmin\"\n      [title]=\"'importSecrets' | i18n\"\n      [route]=\"['settings', 'import']\"\n      icon=\"bwi-download\"\n      [completed]=\"view.tasks.importSecrets\"\n    ></sm-onboarding-task>\n    <sm-onboarding-task\n      *ngIf=\"view.tasks.createProject\"\n      [title]=\"'createSecret' | i18n\"\n      (click)=\"openSecretDialog()\"\n      icon=\"bwi-key\"\n      [completed]=\"view.tasks.createSecret\"\n    ></sm-onboarding-task>\n  </sm-onboarding>\n\n  <div class=\"tw-mt-6 tw-flex tw-flex-col tw-gap-6\">\n    <sm-section>\n      <h2 slot=\"summary\" class=\"tw-mb-0\" bitTypography=\"h2\" noMargin>{{ \"projects\" | i18n }}</h2>\n      <sm-projects-list\n        (newProjectEvent)=\"openNewProjectDialog()\"\n        (editProjectEvent)=\"openEditProject($event)\"\n        (deleteProjectEvent)=\"openDeleteProjectDialog($event)\"\n        [projects]=\"view.latestProjects\"\n      ></sm-projects-list>\n      <div *ngIf=\"view.allProjects.length > 0\" class=\"tw-ml-auto tw-mt-4 tw-max-w-max\">\n        {{ \"showingPortionOfTotal\" | i18n : view.latestProjects.length : view.allProjects.length }}\n        <a bitLink routerLink=\"projects\" class=\"tw-ml-2\">{{ \"viewAll\" | i18n }}</a>\n      </div>\n    </sm-section>\n    <sm-section>\n      <h2 slot=\"summary\" class=\"tw-mb-0\" bitTypography=\"h2\" noMargin>{{ \"secrets\" | i18n }}</h2>\n      <sm-secrets-list\n        baseRoute=\"secrets\"\n        (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n        (newSecretEvent)=\"openNewSecretDialog()\"\n        (editSecretEvent)=\"openEditSecret($event)\"\n        (copySecretNameEvent)=\"copySecretName($event)\"\n        (copySecretValueEvent)=\"copySecretValue($event)\"\n        [secrets]=\"view.latestSecrets\"\n      ></sm-secrets-list>\n      <div *ngIf=\"view.allSecrets.length > 0\" class=\"tw-ml-auto tw-mt-4 tw-max-w-max\">\n        {{ \"showingPortionOfTotal\" | i18n : view.latestSecrets.length : view.allSecrets.length }}\n        <a bitLink routerLink=\"secrets\" class=\"tw-ml-2\">{{ \"viewAll\" | i18n }}</a>\n      </div>\n    </sm-section>\n  </div>\n</div>\n\n<ng-template #spinner>\n  <div class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n  </div>\n</ng-template>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  map,\n  Observable,\n  switchMap,\n  Subject,\n  takeUntil,\n  combineLatest,\n  startWith,\n  distinctUntilChanged,\n  take,\n  share,\n} from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\n\nimport { ProjectListView } from \"../models/view/project-list.view\";\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport {\n  ProjectDeleteDialogComponent,\n  ProjectDeleteOperation,\n} from \"../projects/dialog/project-delete-dialog.component\";\nimport {\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../projects/dialog/project-dialog.component\";\nimport { ProjectService } from \"../projects/project.service\";\nimport {\n  SecretDeleteDialogComponent,\n  SecretDeleteOperation,\n} from \"../secrets/dialog/secret-delete.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"../secrets/dialog/secret-dialog.component\";\nimport { SecretService } from \"../secrets/secret.service\";\nimport {\n  ServiceAccountDialogComponent,\n  ServiceAccountOperation,\n} from \"../service-accounts/dialog/service-account-dialog.component\";\nimport { ServiceAccountService } from \"../service-accounts/service-account.service\";\nimport { SecretsListComponent } from \"../shared/secrets-list.component\";\n\ntype Tasks = {\n  [organizationId: string]: OrganizationTasks;\n};\n\ntype OrganizationTasks = {\n  importSecrets: boolean;\n  createSecret: boolean;\n  createProject: boolean;\n  createServiceAccount: boolean;\n};\n\n@Component({\n  selector: \"sm-overview\",\n  templateUrl: \"./overview.component.html\",\n})\nexport class OverviewComponent implements OnInit, OnDestroy {\n  private destroy$: Subject<void> = new Subject<void>();\n  private tableSize = 10;\n  private organizationId: string;\n  protected organizationName: string;\n  protected userIsAdmin: boolean;\n  protected showOnboarding = false;\n  protected loading = true;\n\n  protected view$: Observable<{\n    allProjects: ProjectListView[];\n    allSecrets: SecretListView[];\n    latestProjects: ProjectListView[];\n    latestSecrets: SecretListView[];\n    tasks: OrganizationTasks;\n  }>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private projectService: ProjectService,\n    private secretService: SecretService,\n    private serviceAccountService: ServiceAccountService,\n    private dialogService: DialogServiceAbstraction,\n    private organizationService: OrganizationService,\n    private stateService: StateService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  ngOnInit() {\n    const orgId$ = this.route.params.pipe(\n      map((p) => p.organizationId),\n      distinctUntilChanged()\n    );\n\n    orgId$\n      .pipe(\n        map((orgId) => this.organizationService.get(orgId)),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((org) => {\n        this.organizationId = org.id;\n        this.organizationName = org.name;\n        this.userIsAdmin = org.isAdmin;\n        this.loading = true;\n      });\n\n    const projects$ = combineLatest([\n      orgId$,\n      this.projectService.project$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(([orgId]) => this.projectService.getProjects(orgId)),\n      share()\n    );\n\n    const secrets$ = combineLatest([\n      orgId$,\n      this.secretService.secret$.pipe(startWith(null)),\n      this.projectService.project$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(([orgId]) => this.secretService.getSecrets(orgId)),\n      share()\n    );\n\n    const serviceAccounts$ = combineLatest([\n      orgId$,\n      this.serviceAccountService.serviceAccount$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(([orgId]) => this.serviceAccountService.getServiceAccounts(orgId)),\n      share()\n    );\n\n    this.view$ = orgId$.pipe(\n      switchMap((orgId) =>\n        combineLatest([projects$, secrets$, serviceAccounts$]).pipe(\n          switchMap(async ([projects, secrets, serviceAccounts]) => ({\n            latestProjects: this.getRecentItems(projects, this.tableSize),\n            latestSecrets: this.getRecentItems(secrets, this.tableSize),\n            allProjects: projects,\n            allSecrets: secrets,\n            tasks: await this.saveCompletedTasks(orgId, {\n              importSecrets: secrets.length > 0,\n              createSecret: secrets.length > 0,\n              createProject: projects.length > 0,\n              createServiceAccount: serviceAccounts.length > 0,\n            }),\n          }))\n        )\n      )\n    );\n\n    // Refresh onboarding status when orgId changes by fetching the first value from view$.\n    orgId$\n      .pipe(\n        switchMap(() => this.view$.pipe(take(1))),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((view) => {\n        this.showOnboarding = Object.values(view.tasks).includes(false);\n        this.loading = false;\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private getRecentItems<T extends { revisionDate: string }[]>(items: T, length: number): T {\n    return items\n      .sort((a, b) => {\n        return new Date(b.revisionDate).getTime() - new Date(a.revisionDate).getTime();\n      })\n      .slice(0, length) as T;\n  }\n\n  private async saveCompletedTasks(\n    organizationId: string,\n    orgTasks: OrganizationTasks\n  ): Promise<OrganizationTasks> {\n    const prevTasks = ((await this.stateService.getSMOnboardingTasks()) || {}) as Tasks;\n    const newlyCompletedOrgTasks = Object.fromEntries(\n      Object.entries(orgTasks).filter(([_k, v]) => v === true)\n    );\n    const nextOrgTasks = {\n      importSecrets: false,\n      createSecret: false,\n      createProject: false,\n      createServiceAccount: false,\n      ...prevTasks[organizationId],\n      ...newlyCompletedOrgTasks,\n    };\n    this.stateService.setSMOnboardingTasks({\n      ...prevTasks,\n      [organizationId]: nextOrgTasks,\n    });\n    return nextOrgTasks as OrganizationTasks;\n  }\n\n  // Projects ---\n\n  openEditProject(projectId: string) {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        projectId: projectId,\n      },\n    });\n  }\n\n  openNewProjectDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openServiceAccountDialog() {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openDeleteProjectDialog(event: ProjectListView[]) {\n    this.dialogService.open<unknown, ProjectDeleteOperation>(ProjectDeleteDialogComponent, {\n      data: {\n        projects: event,\n      },\n    });\n  }\n\n  // Secrets ---\n\n  openSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openEditSecret(secretId: string) {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        secretId: secretId,\n      },\n    });\n  }\n\n  openDeleteSecret(event: SecretListView[]) {\n    this.dialogService.open<unknown, SecretDeleteOperation>(SecretDeleteDialogComponent, {\n      data: {\n        secrets: event,\n      },\n    });\n  }\n\n  openNewSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  copySecretName(name: string) {\n    SecretsListComponent.copySecretName(name, this.platformUtilsService, this.i18nService);\n  }\n\n  copySecretValue(id: string) {\n    SecretsListComponent.copySecretValue(\n      id,\n      this.platformUtilsService,\n      this.i18nService,\n      this.secretService\n    );\n  }\n\n  protected hideOnboarding() {\n    this.showOnboarding = false;\n    this.saveCompletedTasks(this.organizationId, {\n      importSecrets: true,\n      createSecret: true,\n      createProject: true,\n      createServiceAccount: true,\n    });\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { OverviewComponent } from \"./overview.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: OverviewComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class OverviewRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { OnboardingModule } from \"./onboarding.module\";\nimport { OverviewRoutingModule } from \"./overview-routing.module\";\nimport { OverviewComponent } from \"./overview.component\";\nimport { SectionComponent } from \"./section.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, OverviewRoutingModule, OnboardingModule],\n  declarations: [OverviewComponent, SectionComponent],\n  providers: [],\n})\nexport class OverviewModule {}\n","export class BaseAccessPolicyView {\n  id: string;\n  read: boolean;\n  write: boolean;\n  creationDate: string;\n  revisionDate: string;\n}\n\nexport class UserProjectAccessPolicyView extends BaseAccessPolicyView {\n  organizationUserId: string;\n  organizationUserName: string;\n  grantedProjectId: string;\n  userId: string;\n}\n\nexport class UserServiceAccountAccessPolicyView extends BaseAccessPolicyView {\n  organizationUserId: string;\n  organizationUserName: string;\n  grantedServiceAccountId: string;\n  userId: string;\n}\n\nexport class GroupProjectAccessPolicyView extends BaseAccessPolicyView {\n  groupId: string;\n  groupName: string;\n  grantedProjectId: string;\n  currentUserInGroup: boolean;\n}\n\nexport class GroupServiceAccountAccessPolicyView extends BaseAccessPolicyView {\n  groupId: string;\n  groupName: string;\n  grantedServiceAccountId: string;\n  currentUserInGroup: boolean;\n}\n\nexport class ServiceAccountProjectAccessPolicyView extends BaseAccessPolicyView {\n  serviceAccountId: string;\n  serviceAccountName: string;\n  grantedProjectId: string;\n  grantedProjectName: string;\n}\n\nexport class ProjectAccessPoliciesView {\n  userAccessPolicies: UserProjectAccessPolicyView[];\n  groupAccessPolicies: GroupProjectAccessPolicyView[];\n  serviceAccountAccessPolicies: ServiceAccountProjectAccessPolicyView[];\n}\n\nexport class ServiceAccountAccessPoliciesView {\n  userAccessPolicies: UserServiceAccountAccessPolicyView[];\n  groupAccessPolicies: GroupServiceAccountAccessPolicyView[];\n}\n","export class PotentialGranteeView {\n  id: string;\n  name: string;\n  type: string;\n  email: string;\n}\n","import { AccessPolicyRequest } from \"./access-policy.request\";\n\nexport class AccessPoliciesCreateRequest {\n  userAccessPolicyRequests?: AccessPolicyRequest[];\n  groupAccessPolicyRequests?: AccessPolicyRequest[];\n  serviceAccountAccessPolicyRequests?: AccessPolicyRequest[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class BaseAccessPolicyResponse extends BaseResponse {\n  id: string;\n  read: boolean;\n  write: boolean;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.read = this.getResponseProperty(\"Read\");\n    this.write = this.getResponseProperty(\"Write\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n\nexport class UserProjectAccessPolicyResponse extends BaseAccessPolicyResponse {\n  organizationUserId: string;\n  organizationUserName: string;\n  grantedProjectId: string;\n  userId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.organizationUserId = this.getResponseProperty(\"OrganizationUserId\");\n    this.organizationUserName = this.getResponseProperty(\"OrganizationUserName\");\n    this.grantedProjectId = this.getResponseProperty(\"GrantedProjectId\");\n    this.userId = this.getResponseProperty(\"UserId\");\n  }\n}\n\nexport class UserServiceAccountAccessPolicyResponse extends BaseAccessPolicyResponse {\n  organizationUserId: string;\n  organizationUserName: string;\n  grantedServiceAccountId: string;\n  userId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.organizationUserId = this.getResponseProperty(\"OrganizationUserId\");\n    this.organizationUserName = this.getResponseProperty(\"OrganizationUserName\");\n    this.grantedServiceAccountId = this.getResponseProperty(\"GrantedServiceAccountId\");\n    this.userId = this.getResponseProperty(\"UserId\");\n  }\n}\n\nexport class GroupProjectAccessPolicyResponse extends BaseAccessPolicyResponse {\n  groupId: string;\n  groupName: string;\n  grantedProjectId: string;\n  currentUserInGroup: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.groupId = this.getResponseProperty(\"GroupId\");\n    this.groupName = this.getResponseProperty(\"GroupName\");\n    this.grantedProjectId = this.getResponseProperty(\"GrantedProjectId\");\n    this.currentUserInGroup = this.getResponseProperty(\"CurrentUserInGroup\");\n  }\n}\n\nexport class GroupServiceAccountAccessPolicyResponse extends BaseAccessPolicyResponse {\n  groupId: string;\n  groupName: string;\n  grantedServiceAccountId: string;\n  currentUserInGroup: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.groupId = this.getResponseProperty(\"GroupId\");\n    this.groupName = this.getResponseProperty(\"GroupName\");\n    this.grantedServiceAccountId = this.getResponseProperty(\"GrantedServiceAccountId\");\n    this.currentUserInGroup = this.getResponseProperty(\"CurrentUserInGroup\");\n  }\n}\n\nexport class ServiceAccountProjectAccessPolicyResponse extends BaseAccessPolicyResponse {\n  serviceAccountId: string;\n  serviceAccountName: string;\n  grantedProjectId: string;\n  grantedProjectName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.serviceAccountId = this.getResponseProperty(\"ServiceAccountId\");\n    this.serviceAccountName = this.getResponseProperty(\"ServiceAccountName\");\n    this.grantedProjectId = this.getResponseProperty(\"GrantedProjectId\");\n    this.grantedProjectName = this.getResponseProperty(\"GrantedProjectName\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport {\n  GroupProjectAccessPolicyResponse,\n  ServiceAccountProjectAccessPolicyResponse,\n  UserProjectAccessPolicyResponse,\n} from \"./access-policy.response\";\n\nexport class ProjectAccessPoliciesResponse extends BaseResponse {\n  userAccessPolicies: UserProjectAccessPolicyResponse[];\n  groupAccessPolicies: GroupProjectAccessPolicyResponse[];\n  serviceAccountAccessPolicies: ServiceAccountProjectAccessPolicyResponse[];\n\n  constructor(response: any) {\n    super(response);\n    const userAccessPolicies = this.getResponseProperty(\"UserAccessPolicies\");\n    this.userAccessPolicies = userAccessPolicies.map(\n      (k: any) => new UserProjectAccessPolicyResponse(k)\n    );\n    const groupAccessPolicies = this.getResponseProperty(\"GroupAccessPolicies\");\n    this.groupAccessPolicies = groupAccessPolicies.map(\n      (k: any) => new GroupProjectAccessPolicyResponse(k)\n    );\n    const serviceAccountAccessPolicies = this.getResponseProperty(\"ServiceAccountAccessPolicies\");\n    this.serviceAccountAccessPolicies = serviceAccountAccessPolicies.map(\n      (k: any) => new ServiceAccountProjectAccessPolicyResponse(k)\n    );\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport {\n  GroupServiceAccountAccessPolicyResponse,\n  UserServiceAccountAccessPolicyResponse,\n} from \"./access-policy.response\";\n\nexport class ServiceAccountAccessPoliciesResponse extends BaseResponse {\n  userAccessPolicies: UserServiceAccountAccessPolicyResponse[];\n  groupAccessPolicies: GroupServiceAccountAccessPolicyResponse[];\n\n  constructor(response: any) {\n    super(response);\n    const userAccessPolicies = this.getResponseProperty(\"UserAccessPolicies\");\n    this.userAccessPolicies = userAccessPolicies.map(\n      (k: any) => new UserServiceAccountAccessPolicyResponse(k)\n    );\n    const groupAccessPolicies = this.getResponseProperty(\"GroupAccessPolicies\");\n    this.groupAccessPolicies = groupAccessPolicies.map(\n      (k: any) => new GroupServiceAccountAccessPolicyResponse(k)\n    );\n  }\n}\n","export class AccessPolicyUpdateRequest {\n  read: boolean;\n  write: boolean;\n}\n","export class AccessPolicyRequest {\n  granteeId: string;\n  read: boolean;\n  write: boolean;\n}\n","export class GrantedPolicyRequest {\n  grantedId: string;\n  read: boolean;\n  write: boolean;\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class PotentialGranteeResponse extends BaseResponse {\n  id: string;\n  name: string;\n  type: string;\n  email: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\n\nimport {\n  BaseAccessPolicyView,\n  GroupProjectAccessPolicyView,\n  GroupServiceAccountAccessPolicyView,\n  ProjectAccessPoliciesView,\n  ServiceAccountAccessPoliciesView,\n  ServiceAccountProjectAccessPolicyView,\n  UserProjectAccessPolicyView,\n  UserServiceAccountAccessPolicyView,\n} from \"../../models/view/access-policy.view\";\nimport { PotentialGranteeView } from \"../../models/view/potential-grantee.view\";\nimport { AccessPoliciesCreateRequest } from \"../../shared/access-policies/models/requests/access-policies-create.request\";\nimport { ProjectAccessPoliciesResponse } from \"../../shared/access-policies/models/responses/project-access-policies.response\";\nimport { ServiceAccountAccessPoliciesResponse } from \"../../shared/access-policies/models/responses/service-accounts-access-policies.response\";\n\nimport { AccessSelectorRowView } from \"./access-selector.component\";\nimport { AccessPolicyUpdateRequest } from \"./models/requests/access-policy-update.request\";\nimport { AccessPolicyRequest } from \"./models/requests/access-policy.request\";\nimport { GrantedPolicyRequest } from \"./models/requests/granted-policy.request\";\nimport {\n  GroupServiceAccountAccessPolicyResponse,\n  UserServiceAccountAccessPolicyResponse,\n  GroupProjectAccessPolicyResponse,\n  ServiceAccountProjectAccessPolicyResponse,\n  UserProjectAccessPolicyResponse,\n} from \"./models/responses/access-policy.response\";\nimport { PotentialGranteeResponse } from \"./models/responses/potential-grantee.response\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AccessPolicyService {\n  private _projectAccessPolicyChanges$ = new Subject<ProjectAccessPoliciesView>();\n  private _serviceAccountAccessPolicyChanges$ = new Subject<ServiceAccountAccessPoliciesView>();\n  private _serviceAccountGrantedPolicyChanges$ = new Subject<\n    ServiceAccountProjectAccessPolicyView[]\n  >();\n\n  /**\n   * Emits when a project access policy is created or deleted.\n   */\n  readonly projectAccessPolicyChanges$ = this._projectAccessPolicyChanges$.asObservable();\n\n  /**\n   * Emits when a service account access policy is created or deleted.\n   */\n  readonly serviceAccountAccessPolicyChanges$ =\n    this._serviceAccountAccessPolicyChanges$.asObservable();\n\n  /**\n   * Emits when a service account granted policy is created or deleted.\n   */\n  readonly serviceAccountGrantedPolicyChanges$ =\n    this._serviceAccountGrantedPolicyChanges$.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private organizationService: OrganizationService,\n    protected apiService: ApiService,\n    protected encryptService: EncryptService\n  ) {}\n\n  refreshProjectAccessPolicyChanges() {\n    this._projectAccessPolicyChanges$.next(null);\n  }\n\n  refreshServiceAccountAccessPolicyChanges() {\n    this._serviceAccountAccessPolicyChanges$.next(null);\n  }\n\n  async getGrantedPolicies(\n    serviceAccountId: string,\n    organizationId: string\n  ): Promise<ServiceAccountProjectAccessPolicyView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId + \"/granted-policies\",\n      null,\n      true,\n      true\n    );\n\n    const results = new ListResponse(r, ServiceAccountProjectAccessPolicyResponse);\n    return await this.createServiceAccountProjectAccessPolicyViews(results.data, organizationId);\n  }\n\n  async createGrantedPolicies(\n    organizationId: string,\n    serviceAccountId: string,\n    policies: ServiceAccountProjectAccessPolicyView[]\n  ): Promise<ServiceAccountProjectAccessPolicyView[]> {\n    const request = this.getGrantedPoliciesCreateRequest(policies);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/service-accounts/\" + serviceAccountId + \"/granted-policies\",\n      request,\n      true,\n      true\n    );\n    const results = new ListResponse(r, ServiceAccountProjectAccessPolicyResponse);\n    const views = await this.createServiceAccountProjectAccessPolicyViews(\n      results.data,\n      organizationId\n    );\n    this._serviceAccountGrantedPolicyChanges$.next(views);\n    return views;\n  }\n\n  async getProjectAccessPolicies(\n    organizationId: string,\n    projectId: string\n  ): Promise<ProjectAccessPoliciesView> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/projects/\" + projectId + \"/access-policies\",\n      null,\n      true,\n      true\n    );\n\n    const results = new ProjectAccessPoliciesResponse(r);\n    return await this.createProjectAccessPoliciesView(organizationId, results);\n  }\n\n  async getServiceAccountAccessPolicies(\n    serviceAccountId: string\n  ): Promise<ServiceAccountAccessPoliciesView> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-policies\",\n      null,\n      true,\n      true\n    );\n\n    const results = new ServiceAccountAccessPoliciesResponse(r);\n    return await this.createServiceAccountAccessPoliciesView(results);\n  }\n\n  async createProjectAccessPolicies(\n    organizationId: string,\n    projectId: string,\n    projectAccessPoliciesView: ProjectAccessPoliciesView\n  ): Promise<ProjectAccessPoliciesView> {\n    const request = this.getAccessPoliciesCreateRequest(projectAccessPoliciesView);\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/projects/\" + projectId + \"/access-policies\",\n      request,\n      true,\n      true\n    );\n    const results = new ProjectAccessPoliciesResponse(r);\n    const view = await this.createProjectAccessPoliciesView(organizationId, results);\n    this._projectAccessPolicyChanges$.next(view);\n    return view;\n  }\n\n  async createServiceAccountAccessPolicies(\n    serviceAccountId: string,\n    serviceAccountAccessPoliciesView: ServiceAccountAccessPoliciesView\n  ): Promise<ServiceAccountAccessPoliciesView> {\n    const request = this.getServiceAccountAccessPoliciesCreateRequest(\n      serviceAccountAccessPoliciesView\n    );\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-policies\",\n      request,\n      true,\n      true\n    );\n    const results = new ServiceAccountAccessPoliciesResponse(r);\n    const view = await this.createServiceAccountAccessPoliciesView(results);\n    this._serviceAccountAccessPolicyChanges$.next(view);\n    return view;\n  }\n\n  async deleteAccessPolicy(accessPolicyId: string): Promise<void> {\n    await this.apiService.send(\"DELETE\", \"/access-policies/\" + accessPolicyId, null, true, false);\n    this._projectAccessPolicyChanges$.next(null);\n    this._serviceAccountAccessPolicyChanges$.next(null);\n    this._serviceAccountGrantedPolicyChanges$.next(null);\n  }\n\n  async updateAccessPolicy(baseAccessPolicyView: BaseAccessPolicyView): Promise<void> {\n    const payload = new AccessPolicyUpdateRequest();\n    payload.read = baseAccessPolicyView.read;\n    payload.write = baseAccessPolicyView.write;\n    await this.apiService.send(\n      \"PUT\",\n      \"/access-policies/\" + baseAccessPolicyView.id,\n      payload,\n      true,\n      true\n    );\n  }\n\n  async needToShowAccessRemovalWarning(\n    organizationId: string,\n    policy: AccessSelectorRowView,\n    currentPolicies: AccessSelectorRowView[]\n  ): Promise<boolean> {\n    const organization = this.organizationService.get(organizationId);\n    if (organization.isOwner || organization.isAdmin) {\n      return false;\n    }\n    const currentUserId = organization.userId;\n    const readWriteGroupPolicies = currentPolicies\n      .filter((x) => x.accessPolicyId != policy.accessPolicyId)\n      .filter((x) => x.currentUserInGroup && x.read && x.write).length;\n    const readWriteUserPolicies = currentPolicies\n      .filter((x) => x.accessPolicyId != policy.accessPolicyId)\n      .filter((x) => x.userId == currentUserId && x.read && x.write).length;\n\n    if (policy.type === \"user\" && policy.userId == currentUserId && readWriteGroupPolicies == 0) {\n      return true;\n    } else if (\n      policy.type === \"group\" &&\n      policy.currentUserInGroup &&\n      readWriteUserPolicies == 0 &&\n      readWriteGroupPolicies == 0\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  private async createProjectAccessPoliciesView(\n    organizationId: string,\n    projectAccessPoliciesResponse: ProjectAccessPoliciesResponse\n  ): Promise<ProjectAccessPoliciesView> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    const view = new ProjectAccessPoliciesView();\n\n    view.userAccessPolicies = projectAccessPoliciesResponse.userAccessPolicies.map((ap) => {\n      return this.createUserProjectAccessPolicyView(ap);\n    });\n    view.groupAccessPolicies = projectAccessPoliciesResponse.groupAccessPolicies.map((ap) => {\n      return this.createGroupProjectAccessPolicyView(ap);\n    });\n    view.serviceAccountAccessPolicies = await Promise.all(\n      projectAccessPoliciesResponse.serviceAccountAccessPolicies.map(async (ap) => {\n        return await this.createServiceAccountProjectAccessPolicyView(orgKey, ap);\n      })\n    );\n    return view;\n  }\n\n  private getAccessPoliciesCreateRequest(\n    projectAccessPoliciesView: ProjectAccessPoliciesView\n  ): AccessPoliciesCreateRequest {\n    const createRequest = new AccessPoliciesCreateRequest();\n\n    if (projectAccessPoliciesView.userAccessPolicies?.length > 0) {\n      createRequest.userAccessPolicyRequests = projectAccessPoliciesView.userAccessPolicies.map(\n        (ap) => {\n          return this.getAccessPolicyRequest(ap.organizationUserId, ap);\n        }\n      );\n    }\n\n    if (projectAccessPoliciesView.groupAccessPolicies?.length > 0) {\n      createRequest.groupAccessPolicyRequests = projectAccessPoliciesView.groupAccessPolicies.map(\n        (ap) => {\n          return this.getAccessPolicyRequest(ap.groupId, ap);\n        }\n      );\n    }\n\n    if (projectAccessPoliciesView.serviceAccountAccessPolicies?.length > 0) {\n      createRequest.serviceAccountAccessPolicyRequests =\n        projectAccessPoliciesView.serviceAccountAccessPolicies.map((ap) => {\n          return this.getAccessPolicyRequest(ap.serviceAccountId, ap);\n        });\n    }\n    return createRequest;\n  }\n\n  private createUserProjectAccessPolicyView(\n    response: UserProjectAccessPolicyResponse\n  ): UserProjectAccessPolicyView {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedProjectId: response.grantedProjectId,\n      organizationUserId: response.organizationUserId,\n      organizationUserName: response.organizationUserName,\n      userId: response.userId,\n    };\n  }\n\n  private createGroupProjectAccessPolicyView(\n    response: GroupProjectAccessPolicyResponse\n  ): GroupProjectAccessPolicyView {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedProjectId: response.grantedProjectId,\n      groupId: response.groupId,\n      groupName: response.groupName,\n      currentUserInGroup: response.currentUserInGroup,\n    };\n  }\n\n  private async createServiceAccountProjectAccessPolicyView(\n    organizationKey: SymmetricCryptoKey,\n    response: ServiceAccountProjectAccessPolicyResponse\n  ): Promise<ServiceAccountProjectAccessPolicyView> {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedProjectId: response.grantedProjectId,\n      serviceAccountId: response.serviceAccountId,\n      grantedProjectName: response.grantedProjectName\n        ? await this.encryptService.decryptToUtf8(\n            new EncString(response.grantedProjectName),\n            organizationKey\n          )\n        : null,\n      serviceAccountName: await this.encryptService.decryptToUtf8(\n        new EncString(response.serviceAccountName),\n        organizationKey\n      ),\n    };\n  }\n\n  private getServiceAccountAccessPoliciesCreateRequest(\n    serviceAccountAccessPoliciesView: ServiceAccountAccessPoliciesView\n  ): AccessPoliciesCreateRequest {\n    const createRequest = new AccessPoliciesCreateRequest();\n\n    if (serviceAccountAccessPoliciesView.userAccessPolicies?.length > 0) {\n      createRequest.userAccessPolicyRequests =\n        serviceAccountAccessPoliciesView.userAccessPolicies.map((ap) => {\n          return this.getAccessPolicyRequest(ap.organizationUserId, ap);\n        });\n    }\n\n    if (serviceAccountAccessPoliciesView.groupAccessPolicies?.length > 0) {\n      createRequest.groupAccessPolicyRequests =\n        serviceAccountAccessPoliciesView.groupAccessPolicies.map((ap) => {\n          return this.getAccessPolicyRequest(ap.groupId, ap);\n        });\n    }\n\n    return createRequest;\n  }\n\n  private async createServiceAccountAccessPoliciesView(\n    serviceAccountAccessPoliciesResponse: ServiceAccountAccessPoliciesResponse\n  ): Promise<ServiceAccountAccessPoliciesView> {\n    const view = new ServiceAccountAccessPoliciesView();\n    view.userAccessPolicies = serviceAccountAccessPoliciesResponse.userAccessPolicies.map((ap) => {\n      return this.createUserServiceAccountAccessPolicyView(ap);\n    });\n    view.groupAccessPolicies = serviceAccountAccessPoliciesResponse.groupAccessPolicies.map(\n      (ap) => {\n        return this.createGroupServiceAccountAccessPolicyView(ap);\n      }\n    );\n    return view;\n  }\n\n  private createUserServiceAccountAccessPolicyView(\n    response: UserServiceAccountAccessPolicyResponse\n  ): UserServiceAccountAccessPolicyView {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedServiceAccountId: response.grantedServiceAccountId,\n      organizationUserId: response.organizationUserId,\n      organizationUserName: response.organizationUserName,\n      userId: response.userId,\n    };\n  }\n\n  private createGroupServiceAccountAccessPolicyView(\n    response: GroupServiceAccountAccessPolicyResponse\n  ): GroupServiceAccountAccessPolicyView {\n    return {\n      ...this.createBaseAccessPolicyView(response),\n      grantedServiceAccountId: response.grantedServiceAccountId,\n      groupId: response.groupId,\n      groupName: response.groupName,\n      currentUserInGroup: response.currentUserInGroup,\n    };\n  }\n\n  async getPeoplePotentialGrantees(organizationId: string) {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/access-policies/people/potential-grantees\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, PotentialGranteeResponse);\n    return await this.createPotentialGranteeViews(organizationId, results.data);\n  }\n\n  async getServiceAccountsPotentialGrantees(organizationId: string) {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/access-policies/service-accounts/potential-grantees\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, PotentialGranteeResponse);\n    return await this.createPotentialGranteeViews(organizationId, results.data);\n  }\n\n  async getProjectsPotentialGrantees(organizationId: string) {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/access-policies/projects/potential-grantees\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, PotentialGranteeResponse);\n    return await this.createPotentialGranteeViews(organizationId, results.data);\n  }\n\n  protected async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  protected getAccessPolicyRequest(\n    granteeId: string,\n    view:\n      | UserProjectAccessPolicyView\n      | UserServiceAccountAccessPolicyView\n      | GroupProjectAccessPolicyView\n      | GroupServiceAccountAccessPolicyView\n      | ServiceAccountProjectAccessPolicyView\n  ) {\n    const request = new AccessPolicyRequest();\n    request.granteeId = granteeId;\n    request.read = view.read;\n    request.write = view.write;\n    return request;\n  }\n\n  protected createBaseAccessPolicyView(\n    response:\n      | UserProjectAccessPolicyResponse\n      | UserServiceAccountAccessPolicyResponse\n      | GroupProjectAccessPolicyResponse\n      | GroupServiceAccountAccessPolicyResponse\n      | ServiceAccountProjectAccessPolicyResponse\n  ) {\n    return {\n      id: response.id,\n      read: response.read,\n      write: response.write,\n      creationDate: response.creationDate,\n      revisionDate: response.revisionDate,\n    };\n  }\n\n  private async createPotentialGranteeViews(\n    organizationId: string,\n    results: PotentialGranteeResponse[]\n  ): Promise<PotentialGranteeView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      results.map(async (r) => {\n        const view = new PotentialGranteeView();\n        view.id = r.id;\n        view.type = r.type;\n        view.email = r.email;\n\n        if (r.type === \"serviceAccount\" || r.type === \"project\") {\n          view.name = await this.encryptService.decryptToUtf8(new EncString(r.name), orgKey);\n        } else {\n          view.name = r.name;\n        }\n        return view;\n      })\n    );\n  }\n\n  private getGrantedPoliciesCreateRequest(\n    policies: ServiceAccountProjectAccessPolicyView[]\n  ): GrantedPolicyRequest[] {\n    return policies.map((ap) => {\n      const request = new GrantedPolicyRequest();\n      request.grantedId = ap.grantedProjectId;\n      request.read = ap.read;\n      request.write = ap.write;\n      return request;\n    });\n  }\n\n  private async createServiceAccountProjectAccessPolicyViews(\n    responses: ServiceAccountProjectAccessPolicyResponse[],\n    organizationId: string\n  ): Promise<ServiceAccountProjectAccessPolicyView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      responses.map(async (response: ServiceAccountProjectAccessPolicyResponse) => {\n        const view = new ServiceAccountProjectAccessPolicyView();\n        view.id = response.id;\n        view.read = response.read;\n        view.write = response.write;\n        view.creationDate = response.creationDate;\n        view.revisionDate = response.revisionDate;\n        view.serviceAccountId = response.serviceAccountId;\n        view.grantedProjectId = response.grantedProjectId;\n        view.serviceAccountName = response.serviceAccountName\n          ? await this.encryptService.decryptToUtf8(\n              new EncString(response.serviceAccountName),\n              orgKey\n            )\n          : null;\n        view.grantedProjectName = response.grantedProjectName\n          ? await this.encryptService.decryptToUtf8(\n              new EncString(response.grantedProjectName),\n              orgKey\n            )\n          : null;\n        return view;\n      })\n    );\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\" class=\"tw-mt-5\">\n  <bit-form-field>\n    <bit-label>{{ label }}</bit-label>\n    <bit-multi-select\n      class=\"tw-mr-4 tw-w-full\"\n      formControlName=\"multiSelect\"\n      [baseItems]=\"selectItems$ | async\"\n      [loading]=\"loading\"\n    ></bit-multi-select>\n    <bit-hint>{{ hint }}</bit-hint>\n    <button type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n      {{ \"add\" | i18n }}\n    </button>\n  </bit-form-field>\n</form>\n\n<ng-container>\n  <bit-table *ngIf=\"rows$ | async as rows; else spinner\">\n    <ng-container header>\n      <tr>\n        <th bitCell colspan=\"2\">{{ columnTitle }}</th>\n        <th bitCell>{{ \"permissions\" | i18n }}</th>\n      </tr>\n    </ng-container>\n\n    <ng-template body>\n      <ng-container *ngIf=\"rows.length > 0; else empty\">\n        <tr bitRow *ngFor=\"let row of rows\">\n          <td bitCell class=\"tw-w-0 tw-pr-0\">\n            <i class=\"bwi {{ row.icon }} tw-text-muted\" aria-hidden=\"true\"></i>\n          </td>\n          <td bitCell class=\"tw-max-w-sm tw-truncate\">{{ row.name }}</td>\n          <td bitCell>\n            <bit-form-field\n              *ngIf=\"!row.static; else staticPermissions\"\n              class=\"tw-mb-auto tw-inline-block tw-w-auto\"\n            >\n              <select bitInput (change)=\"update($event.target, row)\" [disabled]=\"row.static\">\n                <option value=\"canRead\" [selected]=\"row.read && row.write != true\">\n                  {{ \"canRead\" | i18n }}\n                </option>\n                <option value=\"canReadWrite\" [selected]=\"row.read && row.write\">\n                  {{ \"canReadWrite\" | i18n }}\n                </option>\n              </select>\n            </bit-form-field>\n            <ng-template #staticPermissions>\n              <span *ngIf=\"row.read && row.write != true\">{{ \"canRead\" | i18n }}</span>\n              <span *ngIf=\"row.read != true && row.write\">{{ \"canWrite\" | i18n }}</span>\n              <span *ngIf=\"row.read && row.write\">{{ \"canReadWrite\" | i18n }}</span>\n            </ng-template>\n          </td>\n          <td bitCell class=\"tw-w-0\">\n            <button\n              type=\"button\"\n              bitIconButton=\"bwi-close\"\n              buttonType=\"main\"\n              size=\"default\"\n              [attr.title]=\"'remove' | i18n\"\n              [attr.aria-label]=\"'remove' | i18n\"\n              [bitAction]=\"delete(row)\"\n            ></button>\n          </td>\n        </tr>\n      </ng-container>\n    </ng-template>\n  </bit-table>\n</ng-container>\n\n<ng-template #empty>\n  <div class=\"tw-mt-4 tw-text-center\">\n    {{ emptyMessage }}\n  </div>\n</ng-template>\n\n<ng-template #spinner>\n  <div class=\"tw-items-center tw-justify-center tw-pt-10 tw-text-center\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n  </div>\n</ng-template>\n","import { Component, EventEmitter, Input, OnInit, Output } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  combineLatest,\n  firstValueFrom,\n  map,\n  Observable,\n  share,\n  Subject,\n  switchMap,\n  tap,\n} from \"rxjs\";\n\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { SelectItemView } from \"@bitwarden/components/src/multi-select/models/select-item-view\";\n\nimport { BaseAccessPolicyView } from \"../../models/view/access-policy.view\";\n\nimport { AccessPolicyService } from \"./access-policy.service\";\n\nexport type AccessSelectorRowView = {\n  type: \"user\" | \"group\" | \"serviceAccount\" | \"project\";\n  name: string;\n  id: string;\n  accessPolicyId: string;\n  read: boolean;\n  write: boolean;\n  icon: string;\n  userId?: string;\n  currentUserInGroup?: boolean;\n  static?: boolean;\n};\n\n@Component({\n  selector: \"sm-access-selector\",\n  templateUrl: \"./access-selector.component.html\",\n})\nexport class AccessSelectorComponent implements OnInit {\n  static readonly userIcon = \"bwi-user\";\n  static readonly groupIcon = \"bwi-family\";\n  static readonly serviceAccountIcon = \"bwi-wrench\";\n  static readonly projectIcon = \"bwi-collection\";\n\n  /**\n   * Emits the selected items on submit.\n   */\n  @Output() onCreateAccessPolicies = new EventEmitter<SelectItemView[]>();\n  @Output() onDeleteAccessPolicy = new EventEmitter<AccessSelectorRowView>();\n  @Output() onUpdateAccessPolicy = new EventEmitter<AccessSelectorRowView>();\n\n  @Input() label: string;\n  @Input() hint: string;\n  @Input() columnTitle: string;\n  @Input() emptyMessage: string;\n  @Input() granteeType: \"people\" | \"serviceAccounts\" | \"projects\";\n\n  protected rows$ = new Subject<AccessSelectorRowView[]>();\n  @Input() private set rows(value: AccessSelectorRowView[]) {\n    this.rows$.next(value);\n  }\n\n  private maxLength = 15;\n  protected formGroup = new FormGroup({\n    multiSelect: new FormControl([], [Validators.required, Validators.maxLength(this.maxLength)]),\n  });\n  protected loading = true;\n\n  protected selectItems$: Observable<SelectItemView[]> = combineLatest([\n    this.rows$,\n    this.route.params,\n  ]).pipe(\n    switchMap(([rows, params]) =>\n      this.getPotentialGrantees(params.organizationId).then((grantees) =>\n        grantees\n          .filter((g) => !rows.some((row) => row.id === g.id))\n          .map((granteeView) => {\n            let icon: string;\n            let listName = granteeView.name;\n            let labelName = granteeView.name;\n            if (granteeView.type === \"user\") {\n              icon = AccessSelectorComponent.userIcon;\n              if (Utils.isNullOrWhitespace(granteeView.name)) {\n                listName = granteeView.email;\n                labelName = granteeView.email;\n              } else {\n                listName = `${granteeView.name} (${granteeView.email})`;\n              }\n            } else if (granteeView.type === \"group\") {\n              icon = AccessSelectorComponent.groupIcon;\n            } else if (granteeView.type === \"serviceAccount\") {\n              icon = AccessSelectorComponent.serviceAccountIcon;\n            } else if (granteeView.type === \"project\") {\n              icon = AccessSelectorComponent.projectIcon;\n            }\n            return {\n              icon: icon,\n              id: granteeView.id,\n              labelName: labelName,\n              listName: listName,\n            };\n          })\n      )\n    ),\n    map((selectItems) => selectItems.sort((a, b) => a.listName.localeCompare(b.listName))),\n    tap(() => {\n      this.loading = false;\n      this.formGroup.reset();\n      this.formGroup.enable();\n    }),\n    share()\n  );\n\n  constructor(private accessPolicyService: AccessPolicyService, private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.formGroup.disable();\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n    if (this.formGroup.invalid) {\n      return;\n    }\n    this.formGroup.disable();\n    this.loading = true;\n\n    this.onCreateAccessPolicies.emit(this.formGroup.value.multiSelect);\n\n    return firstValueFrom(this.selectItems$);\n  };\n\n  async update(target: any, row: AccessSelectorRowView): Promise<void> {\n    if (target.value === \"canRead\") {\n      row.read = true;\n      row.write = false;\n    } else if (target.value === \"canReadWrite\") {\n      row.read = true;\n      row.write = true;\n    }\n    this.onUpdateAccessPolicy.emit(row);\n  }\n\n  delete = (row: AccessSelectorRowView) => async () => {\n    this.loading = true;\n    this.formGroup.disable();\n    this.onDeleteAccessPolicy.emit(row);\n    return firstValueFrom(this.selectItems$);\n  };\n\n  private getPotentialGrantees(organizationId: string) {\n    switch (this.granteeType) {\n      case \"people\":\n        return this.accessPolicyService.getPeoplePotentialGrantees(organizationId);\n      case \"serviceAccounts\":\n        return this.accessPolicyService.getServiceAccountsPotentialGrantees(organizationId);\n      case \"projects\":\n        return this.accessPolicyService.getProjectsPotentialGrantees(organizationId);\n    }\n  }\n\n  static getAccessItemType(item: SelectItemView) {\n    switch (item.icon) {\n      case AccessSelectorComponent.userIcon:\n        return \"user\";\n      case AccessSelectorComponent.groupIcon:\n        return \"group\";\n      case AccessSelectorComponent.serviceAccountIcon:\n        return \"serviceAccount\";\n      case AccessSelectorComponent.projectIcon:\n        return \"project\";\n    }\n  }\n\n  static getBaseAccessPolicyView(row: AccessSelectorRowView) {\n    const view = new BaseAccessPolicyView();\n    view.id = row.accessPolicyId;\n    view.read = row.read;\n    view.write = row.write;\n    return view;\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\n\nimport { AccessPolicyService } from \"../access-policy.service\";\nimport { AccessSelectorComponent, AccessSelectorRowView } from \"../access-selector.component\";\n\nexport interface AccessRemovalDetails {\n  title: string;\n  message: string;\n  operation: \"update\" | \"delete\";\n  type: \"project\" | \"service-account\";\n  returnRoute: string[];\n  policy: AccessSelectorRowView;\n}\n\n@Component({\n  templateUrl: \"./access-removal-dialog.component.html\",\n})\nexport class AccessRemovalDialogComponent implements OnInit {\n  constructor(\n    public dialogRef: DialogRef,\n    private router: Router,\n    private accessPolicyService: AccessPolicyService,\n    @Inject(DIALOG_DATA) public data: AccessRemovalDetails\n  ) {}\n\n  ngOnInit(): void {\n    // TODO remove null checks once strictNullChecks in TypeScript is turned on.\n    if (\n      !this.data.message ||\n      !this.data.title ||\n      !this.data.operation ||\n      !this.data.returnRoute ||\n      !this.data.policy\n    ) {\n      this.dialogRef.close();\n      throw new Error(\n        \"The access removal dialog was not called with the appropriate operation values.\"\n      );\n    }\n  }\n\n  removeAccess = async () => {\n    await this.router.navigate(this.data.returnRoute);\n    if (this.data.operation === \"delete\") {\n      await this.accessPolicyService.deleteAccessPolicy(this.data.policy.accessPolicyId);\n    } else if (this.data.operation == \"update\") {\n      await this.accessPolicyService.updateAccessPolicy(\n        AccessSelectorComponent.getBaseAccessPolicyView(this.data.policy)\n      );\n      this.refreshPolicyChanges();\n    }\n    this.dialogRef.close();\n  };\n\n  cancel = () => {\n    this.refreshPolicyChanges();\n    this.dialogRef.close();\n  };\n\n  private refreshPolicyChanges() {\n    if (this.data.type == \"project\") {\n      this.accessPolicyService.refreshProjectAccessPolicyChanges();\n    } else if (this.data.type == \"service-account\") {\n      this.accessPolicyService.refreshServiceAccountAccessPolicyChanges();\n    }\n  }\n}\n","<bit-simple-dialog>\n  <span bitDialogTitle>{{ data.title | i18n }}</span>\n  <span bitDialogContent>\n    {{ data.message | i18n }}\n  </span>\n  <ng-container bitDialogFooter>\n    <button type=\"button\" bitButton buttonType=\"danger\" [bitAction]=\"removeAccess\">\n      {{ \"removeAccess\" | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" [bitAction]=\"cancel\">\n      {{ \"cancel\" | i18n }}\n    </button>\n  </ng-container>\n</bit-simple-dialog>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { map, Observable, share, startWith, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { ValidationService } from \"@bitwarden/common/platform/abstractions/validation.service\";\nimport { SelectItemView } from \"@bitwarden/components\";\n\nimport {\n  GroupProjectAccessPolicyView,\n  ProjectAccessPoliciesView,\n  UserProjectAccessPolicyView,\n} from \"../../models/view/access-policy.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  AccessSelectorComponent,\n  AccessSelectorRowView,\n} from \"../../shared/access-policies/access-selector.component\";\nimport {\n  AccessRemovalDetails,\n  AccessRemovalDialogComponent,\n} from \"../../shared/access-policies/dialogs/access-removal-dialog.component\";\n\n@Component({\n  selector: \"sm-project-people\",\n  templateUrl: \"./project-people.component.html\",\n})\nexport class ProjectPeopleComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private organizationId: string;\n  private projectId: string;\n  private rows: AccessSelectorRowView[];\n\n  protected rows$: Observable<AccessSelectorRowView[]> =\n    this.accessPolicyService.projectAccessPolicyChanges$.pipe(\n      startWith(null),\n      switchMap(() =>\n        this.accessPolicyService.getProjectAccessPolicies(this.organizationId, this.projectId)\n      ),\n      map((policies) => {\n        const rows: AccessSelectorRowView[] = [];\n        policies.userAccessPolicies.forEach((policy) => {\n          rows.push({\n            type: \"user\",\n            name: policy.organizationUserName,\n            id: policy.organizationUserId,\n            accessPolicyId: policy.id,\n            read: policy.read,\n            write: policy.write,\n            userId: policy.userId,\n            icon: AccessSelectorComponent.userIcon,\n          });\n        });\n\n        policies.groupAccessPolicies.forEach((policy) => {\n          rows.push({\n            type: \"group\",\n            name: policy.groupName,\n            id: policy.groupId,\n            accessPolicyId: policy.id,\n            read: policy.read,\n            write: policy.write,\n            currentUserInGroup: policy.currentUserInGroup,\n            icon: AccessSelectorComponent.groupIcon,\n          });\n        });\n        return rows;\n      }),\n      share()\n    );\n\n  protected handleCreateAccessPolicies(selected: SelectItemView[]) {\n    const projectAccessPoliciesView = new ProjectAccessPoliciesView();\n    projectAccessPoliciesView.userAccessPolicies = selected\n      .filter((selection) => AccessSelectorComponent.getAccessItemType(selection) === \"user\")\n      .map((filtered) => {\n        const view = new UserProjectAccessPolicyView();\n        view.grantedProjectId = this.projectId;\n        view.organizationUserId = filtered.id;\n        view.read = true;\n        view.write = false;\n        return view;\n      });\n\n    projectAccessPoliciesView.groupAccessPolicies = selected\n      .filter((selection) => AccessSelectorComponent.getAccessItemType(selection) === \"group\")\n      .map((filtered) => {\n        const view = new GroupProjectAccessPolicyView();\n        view.grantedProjectId = this.projectId;\n        view.groupId = filtered.id;\n        view.read = true;\n        view.write = false;\n        return view;\n      });\n\n    return this.accessPolicyService.createProjectAccessPolicies(\n      this.organizationId,\n      this.projectId,\n      projectAccessPoliciesView\n    );\n  }\n\n  protected async handleDeleteAccessPolicy(policy: AccessSelectorRowView) {\n    if (\n      await this.accessPolicyService.needToShowAccessRemovalWarning(\n        this.organizationId,\n        policy,\n        this.rows\n      )\n    ) {\n      this.launchDeleteWarningDialog(policy);\n      return;\n    }\n\n    try {\n      await this.accessPolicyService.deleteAccessPolicy(policy.accessPolicyId);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  protected async handleUpdateAccessPolicy(policy: AccessSelectorRowView) {\n    if (\n      policy.read === true &&\n      policy.write === false &&\n      (await this.accessPolicyService.needToShowAccessRemovalWarning(\n        this.organizationId,\n        policy,\n        this.rows\n      ))\n    ) {\n      this.launchUpdateWarningDialog(policy);\n      return;\n    }\n\n    try {\n      return await this.accessPolicyService.updateAccessPolicy(\n        AccessSelectorComponent.getBaseAccessPolicyView(policy)\n      );\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private dialogService: DialogServiceAbstraction,\n    private validationService: ValidationService,\n    private accessPolicyService: AccessPolicyService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.organizationId = params.organizationId;\n      this.projectId = params.projectId;\n    });\n\n    this.rows$.pipe(takeUntil(this.destroy$)).subscribe((rows) => {\n      this.rows = rows;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private async launchDeleteWarningDialog(policy: AccessSelectorRowView) {\n    this.dialogService.open<unknown, AccessRemovalDetails>(AccessRemovalDialogComponent, {\n      data: {\n        title: \"smAccessRemovalWarningProjectTitle\",\n        message: \"smAccessRemovalWarningProjectMessage\",\n        operation: \"delete\",\n        type: \"project\",\n        returnRoute: [\"sm\", this.organizationId, \"projects\"],\n        policy,\n      },\n    });\n  }\n\n  private launchUpdateWarningDialog(policy: AccessSelectorRowView) {\n    this.dialogService.open<unknown, AccessRemovalDetails>(AccessRemovalDialogComponent, {\n      data: {\n        title: \"smAccessRemovalWarningProjectTitle\",\n        message: \"smAccessRemovalWarningProjectMessage\",\n        operation: \"update\",\n        type: \"project\",\n        returnRoute: [\"sm\", this.organizationId, \"projects\"],\n        policy,\n      },\n    });\n  }\n}\n","<div class=\"tw-w-2/5\">\n  <p class=\"tw-mt-8\">\n    {{ \"projectPeopleDescription\" | i18n }}\n  </p>\n  <sm-access-selector\n    [rows]=\"rows$ | async\"\n    granteeType=\"people\"\n    [label]=\"'people' | i18n\"\n    [hint]=\"'projectPeopleSelectHint' | i18n\"\n    [columnTitle]=\"'groupSlashUser' | i18n\"\n    [emptyMessage]=\"'projectEmptyPeopleAccessPolicies' | i18n\"\n    (onCreateAccessPolicies)=\"handleCreateAccessPolicies($event)\"\n    (onDeleteAccessPolicy)=\"handleDeleteAccessPolicy($event)\"\n    (onUpdateAccessPolicy)=\"handleUpdateAccessPolicy($event)\"\n  >\n  </sm-access-selector>\n</div>\n","<ng-container *ngIf=\"{ project: project$ | async, secrets: secrets$ | async } as projectSecrets\">\n  <ng-container *ngIf=\"projectSecrets?.secrets && projectSecrets?.project; else spinner\">\n    <div\n      *ngIf=\"projectSecrets.secrets?.length > 0 && projectSecrets.project?.write\"\n      class=\"float-right tw-mt-3 tw-items-center\"\n    >\n      <button type=\"button\" bitButton buttonType=\"secondary\" (click)=\"openNewSecretDialog()\">\n        <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n        {{ \"newSecret\" | i18n }}\n      </button>\n    </div>\n    <sm-secrets-list\n      *ngIf=\"projectSecrets.secrets?.length > 0 || projectSecrets.project?.write; else contactAdmin\"\n      (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n      (newSecretEvent)=\"openNewSecretDialog()\"\n      (editSecretEvent)=\"openEditSecret($event)\"\n      (copySecretNameEvent)=\"copySecretName($event)\"\n      (copySecretValueEvent)=\"copySecretValue($event)\"\n      [secrets]=\"projectSecrets.secrets\"\n    ></sm-secrets-list>\n  </ng-container>\n</ng-container>\n\n<ng-template #spinner>\n  <div class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n    <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n  </div>\n</ng-template>\n\n<ng-template #contactAdmin>\n  <bit-no-items>\n    <ng-container slot=\"title\">{{ \"secretsNoItemsTitle\" | i18n }}</ng-container>\n    <ng-container slot=\"description\">{{ \"smProjectSecretsNoItemsNoAccess\" | i18n }}</ng-container>\n  </bit-no-items>\n</ng-template>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, combineLatestWith, filter, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { ProjectView } from \"../../models/view/project.view\";\nimport { SecretListView } from \"../../models/view/secret-list.view\";\nimport {\n  SecretDeleteDialogComponent,\n  SecretDeleteOperation,\n} from \"../../secrets/dialog/secret-delete.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"../../secrets/dialog/secret-dialog.component\";\nimport { SecretService } from \"../../secrets/secret.service\";\nimport { SecretsListComponent } from \"../../shared/secrets-list.component\";\nimport { ProjectService } from \"../project.service\";\n\n@Component({\n  selector: \"sm-project-secrets\",\n  templateUrl: \"./project-secrets.component.html\",\n})\nexport class ProjectSecretsComponent {\n  secrets$: Observable<SecretListView[]>;\n\n  private organizationId: string;\n  private projectId: string;\n  protected project$: Observable<ProjectView>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private projectService: ProjectService,\n    private secretService: SecretService,\n    private dialogService: DialogServiceAbstraction,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  ngOnInit() {\n    // Refresh list if project is edited\n    const currentProjectEdited = this.projectService.project$.pipe(\n      filter((p) => p?.id === this.projectId),\n      startWith(null)\n    );\n\n    this.project$ = combineLatest([this.route.params, currentProjectEdited]).pipe(\n      switchMap(([params, _]) => {\n        return this.projectService.getByProjectId(params.projectId);\n      })\n    );\n\n    this.secrets$ = this.secretService.secret$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params, currentProjectEdited),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        this.projectId = params.projectId;\n        return await this.getSecretsByProject();\n      })\n    );\n  }\n\n  private async getSecretsByProject(): Promise<SecretListView[]> {\n    return await this.secretService.getSecretsByProject(this.organizationId, this.projectId);\n  }\n\n  openEditSecret(secretId: string) {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        secretId: secretId,\n      },\n    });\n  }\n\n  openDeleteSecret(event: SecretListView[]) {\n    this.dialogService.open<unknown, SecretDeleteOperation>(SecretDeleteDialogComponent, {\n      data: {\n        secrets: event,\n      },\n    });\n  }\n\n  openNewSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n        projectId: this.projectId,\n      },\n    });\n  }\n\n  copySecretName(name: string) {\n    SecretsListComponent.copySecretName(name, this.platformUtilsService, this.i18nService);\n  }\n\n  copySecretValue(id: string) {\n    SecretsListComponent.copySecretValue(\n      id,\n      this.platformUtilsService,\n      this.i18nService,\n      this.secretService\n    );\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { map, Observable, startWith, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { ValidationService } from \"@bitwarden/common/platform/abstractions/validation.service\";\nimport { SelectItemView } from \"@bitwarden/components\";\n\nimport {\n  ProjectAccessPoliciesView,\n  ServiceAccountProjectAccessPolicyView,\n} from \"../../models/view/access-policy.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  AccessSelectorComponent,\n  AccessSelectorRowView,\n} from \"../../shared/access-policies/access-selector.component\";\n\n@Component({\n  selector: \"sm-project-service-accounts\",\n  templateUrl: \"./project-service-accounts.component.html\",\n})\nexport class ProjectServiceAccountsComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private organizationId: string;\n  private projectId: string;\n\n  protected rows$: Observable<AccessSelectorRowView[]> =\n    this.accessPolicyService.projectAccessPolicyChanges$.pipe(\n      startWith(null),\n      switchMap(() =>\n        this.accessPolicyService.getProjectAccessPolicies(this.organizationId, this.projectId)\n      ),\n      map((policies) =>\n        policies.serviceAccountAccessPolicies.map((policy) => ({\n          type: \"serviceAccount\",\n          name: policy.serviceAccountName,\n          id: policy.serviceAccountId,\n          accessPolicyId: policy.id,\n          read: policy.read,\n          write: policy.write,\n          icon: AccessSelectorComponent.serviceAccountIcon,\n          static: true,\n        }))\n      )\n    );\n\n  protected handleCreateAccessPolicies(selected: SelectItemView[]) {\n    const projectAccessPoliciesView = new ProjectAccessPoliciesView();\n    projectAccessPoliciesView.serviceAccountAccessPolicies = selected\n      .filter(\n        (selection) => AccessSelectorComponent.getAccessItemType(selection) === \"serviceAccount\"\n      )\n      .map((filtered) => {\n        const view = new ServiceAccountProjectAccessPolicyView();\n        view.grantedProjectId = this.projectId;\n        view.serviceAccountId = filtered.id;\n        view.read = true;\n        view.write = false;\n        return view;\n      });\n\n    return this.accessPolicyService.createProjectAccessPolicies(\n      this.organizationId,\n      this.projectId,\n      projectAccessPoliciesView\n    );\n  }\n\n  protected async handleDeleteAccessPolicy(policy: AccessSelectorRowView) {\n    try {\n      await this.accessPolicyService.deleteAccessPolicy(policy.accessPolicyId);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private validationService: ValidationService,\n    private accessPolicyService: AccessPolicyService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.organizationId = params.organizationId;\n      this.projectId = params.projectId;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","<div class=\"tw-w-2/5\">\n  <p class=\"tw-mt-8\">\n    {{ \"projectServiceAccountsDescription\" | i18n }}\n  </p>\n  <sm-access-selector\n    [rows]=\"rows$ | async\"\n    granteeType=\"serviceAccounts\"\n    [label]=\"'serviceAccounts' | i18n\"\n    [hint]=\"'projectServiceAccountsSelectHint' | i18n\"\n    [columnTitle]=\"'serviceAccounts' | i18n\"\n    [emptyMessage]=\"'projectEmptyServiceAccountAccessPolicies' | i18n\"\n    (onCreateAccessPolicies)=\"handleCreateAccessPolicies($event)\"\n    (onDeleteAccessPolicy)=\"handleDeleteAccessPolicy($event)\"\n  >\n  </sm-access-selector>\n</div>\n","<sm-header *ngIf=\"project$ | async as project\" [title]=\"project.name\" icon=\"bwi-collection\">\n  <bit-breadcrumbs slot=\"breadcrumbs\">\n    <bit-breadcrumb [route]=\"['..']\" icon=\"bwi-angle-left\">{{ \"projects\" | i18n }}</bit-breadcrumb>\n  </bit-breadcrumbs>\n  <bit-tab-nav-bar label=\"Main\" slot=\"tabs\">\n    <bit-tab-link [route]=\"['secrets']\">{{ \"secrets\" | i18n }}</bit-tab-link>\n    <ng-container *ngIf=\"project.write\">\n      <bit-tab-link [route]=\"['people']\">{{ \"people\" | i18n }}</bit-tab-link>\n      <bit-tab-link [route]=\"['service-accounts']\">{{ \"serviceAccounts\" | i18n }}</bit-tab-link>\n    </ng-container>\n  </bit-tab-nav-bar>\n  <sm-new-menu></sm-new-menu>\n  <button\n    type=\"button\"\n    slot=\"secondary\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"openEditDialog()\"\n    *ngIf=\"project.write\"\n  >\n    {{ \"editProject\" | i18n }}\n  </button>\n</sm-header>\n<router-outlet></router-outlet>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport {\n  catchError,\n  combineLatest,\n  EMPTY,\n  filter,\n  Observable,\n  startWith,\n  Subject,\n  switchMap,\n  takeUntil,\n} from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { ProjectView } from \"../../models/view/project.view\";\nimport {\n  OperationType,\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../dialog/project-dialog.component\";\nimport { ProjectService } from \"../project.service\";\n\n@Component({\n  selector: \"sm-project\",\n  templateUrl: \"./project.component.html\",\n})\nexport class ProjectComponent implements OnInit, OnDestroy {\n  protected project$: Observable<ProjectView>;\n\n  private organizationId: string;\n  private projectId: string;\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    private route: ActivatedRoute,\n    private projectService: ProjectService,\n    private router: Router,\n    private dialogService: DialogServiceAbstraction,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  ngOnInit(): void {\n    // Update project if it is edited\n    const currentProjectEdited = this.projectService.project$.pipe(\n      filter((p) => p?.id === this.projectId),\n      startWith(null)\n    );\n\n    this.project$ = combineLatest([this.route.params, currentProjectEdited]).pipe(\n      switchMap(([params, _]) => this.projectService.getByProjectId(params.projectId)),\n      catchError(() => {\n        this.router.navigate([\"/sm\", this.organizationId, \"projects\"]).then(() => {\n          this.platformUtilsService.showToast(\n            \"error\",\n            null,\n            this.i18nService.t(\"notFound\", this.i18nService.t(\"project\"))\n          );\n        });\n        return EMPTY;\n      })\n    );\n\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.organizationId = params.organizationId;\n      this.projectId = params.projectId;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  async openEditDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        projectId: this.projectId,\n      },\n    });\n  }\n}\n","<bit-dialog>\n  <ng-container bitDialogTitle>\n    {{ data.title | i18n }}\n  </ng-container>\n\n  <div bitDialogContent>\n    {{ data.message | i18n }}\n    <bit-table>\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ data.columnTitle | i18n }}</th>\n          <th bitCell>{{ \"description\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body>\n        <tr bitRow *ngFor=\"let detail of data.details\">\n          <td bitCell>{{ detail.name }}</td>\n          <td bitCell>{{ detail.description | i18n }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </div>\n\n  <div bitDialogFooter class=\"tw-flex tw-gap-2\">\n    <button\n      type=\"button\"\n      bitButton\n      buttonType=\"primary\"\n      bitFormButton\n      (click)=\"dialogRef.close(bulkConfirmationResult.Continue)\"\n    >\n      {{ \"continue\" | i18n }}\n    </button>\n    <button bitButton buttonType=\"secondary\" bitDialogClose type=\"button\">\n      {{ \"cancel\" | i18n }}\n    </button>\n  </div>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nexport interface BulkConfirmationDetails {\n  title: string;\n  columnTitle: string;\n  message: string;\n  details: BulkConfirmationStatus[];\n}\n\nexport interface BulkConfirmationStatus {\n  id: string;\n  name: string;\n  description: string;\n}\n\nexport enum BulkConfirmationResult {\n  Continue,\n  Cancel,\n}\n\n@Component({\n  selector: \"sm-bulk-confirmation-dialog\",\n  templateUrl: \"./bulk-confirmation-dialog.component.html\",\n})\nexport class BulkConfirmationDialogComponent implements OnInit {\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: BulkConfirmationDetails\n  ) {}\n\n  protected bulkConfirmationResult = BulkConfirmationResult;\n\n  ngOnInit(): void {\n    // TODO remove null checks once strictNullChecks in TypeScript is turned on.\n    if (\n      !this.data.title ||\n      !this.data.columnTitle ||\n      !this.data.message ||\n      !(this.data.details?.length >= 1)\n    ) {\n      this.dialogRef.close();\n      throw new Error(\n        \"The bulk confirmation dialog was not called with the appropriate operation values.\"\n      );\n    }\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, lastValueFrom, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\n\nimport { ProjectListView } from \"../../models/view/project-list.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  BulkConfirmationDetails,\n  BulkConfirmationDialogComponent,\n  BulkConfirmationResult,\n  BulkConfirmationStatus,\n} from \"../../shared/dialogs/bulk-confirmation-dialog.component\";\nimport {\n  ProjectDeleteDialogComponent,\n  ProjectDeleteOperation,\n} from \"../dialog/project-delete-dialog.component\";\nimport {\n  OperationType,\n  ProjectDialogComponent,\n  ProjectOperation,\n} from \"../dialog/project-dialog.component\";\nimport { ProjectService } from \"../project.service\";\n\n@Component({\n  selector: \"sm-projects\",\n  templateUrl: \"./projects.component.html\",\n})\nexport class ProjectsComponent implements OnInit {\n  protected projects$: Observable<ProjectListView[]>;\n  protected search: string;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private projectService: ProjectService,\n    private accessPolicyService: AccessPolicyService,\n    private dialogService: DialogServiceAbstraction\n  ) {}\n\n  ngOnInit() {\n    this.projects$ = combineLatest([\n      this.route.params,\n      this.projectService.project$.pipe(startWith(null)),\n      this.accessPolicyService.projectAccessPolicyChanges$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(async ([params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getProjects();\n      })\n    );\n  }\n\n  private async getProjects(): Promise<ProjectListView[]> {\n    return await this.projectService.getProjects(this.organizationId);\n  }\n\n  openEditProject(projectId: string) {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        projectId: projectId,\n      },\n    });\n  }\n\n  openNewProjectDialog() {\n    this.dialogService.open<unknown, ProjectOperation>(ProjectDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  async openDeleteProjectDialog(projects: ProjectListView[]) {\n    if (projects.some((project) => project.write == false)) {\n      const readOnlyProjects = projects.filter((project) => project.write == false);\n      const writeProjects = projects.filter((project) => project.write);\n\n      const dialogRef = this.dialogService.open<unknown, BulkConfirmationDetails>(\n        BulkConfirmationDialogComponent,\n        {\n          data: {\n            title: \"deleteProjects\",\n            columnTitle: \"projectName\",\n            message: \"smProjectsDeleteBulkConfirmation\",\n            details: this.getBulkConfirmationDetails(readOnlyProjects),\n          },\n        }\n      );\n\n      const result = await lastValueFrom(dialogRef.closed);\n\n      if (result == BulkConfirmationResult.Continue) {\n        this.dialogService.open<unknown, ProjectDeleteOperation>(ProjectDeleteDialogComponent, {\n          data: {\n            projects: writeProjects,\n          },\n        });\n      }\n    } else {\n      this.dialogService.open<unknown, ProjectDeleteOperation>(ProjectDeleteDialogComponent, {\n        data: {\n          projects,\n        },\n      });\n    }\n  }\n\n  private getBulkConfirmationDetails(projects: ProjectListView[]): BulkConfirmationStatus[] {\n    return projects.map((project) => {\n      return {\n        id: project.id,\n        name: project.name,\n        description: \"smProjectDeleteAccessRestricted\",\n      };\n    });\n  }\n}\n","<sm-header>\n  <bit-search\n    [placeholder]=\"'searchProjects' | i18n\"\n    [(ngModel)]=\"search\"\n    class=\"tw-w-80\"\n  ></bit-search>\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n<sm-projects-list\n  (newProjectEvent)=\"openNewProjectDialog()\"\n  (editProjectEvent)=\"openEditProject($event)\"\n  (deleteProjectEvent)=\"openDeleteProjectDialog($event)\"\n  [projects]=\"projects$ | async\"\n  [search]=\"search\"\n>\n</sm-projects-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { ProjectPeopleComponent } from \"./project/project-people.component\";\nimport { ProjectSecretsComponent } from \"./project/project-secrets.component\";\nimport { ProjectServiceAccountsComponent } from \"./project/project-service-accounts.component\";\nimport { ProjectComponent } from \"./project/project.component\";\nimport { ProjectsComponent } from \"./projects/projects.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ProjectsComponent,\n  },\n  {\n    path: \":projectId\",\n    component: ProjectComponent,\n    children: [\n      {\n        path: \"\",\n        pathMatch: \"full\",\n        redirectTo: \"secrets\",\n      },\n      {\n        path: \"secrets\",\n        component: ProjectSecretsComponent,\n      },\n      {\n        path: \"people\",\n        component: ProjectPeopleComponent,\n      },\n      {\n        path: \"service-accounts\",\n        component: ProjectServiceAccountsComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ProjectsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { BreadcrumbsModule } from \"@bitwarden/components\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { ProjectDeleteDialogComponent } from \"./dialog/project-delete-dialog.component\";\nimport { ProjectDialogComponent } from \"./dialog/project-dialog.component\";\nimport { ProjectPeopleComponent } from \"./project/project-people.component\";\nimport { ProjectSecretsComponent } from \"./project/project-secrets.component\";\nimport { ProjectServiceAccountsComponent } from \"./project/project-service-accounts.component\";\nimport { ProjectComponent } from \"./project/project.component\";\nimport { ProjectsComponent } from \"./projects/projects.component\";\nimport { ProjectsRoutingModule } from \"./projects-routing.module\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, ProjectsRoutingModule, BreadcrumbsModule],\n  declarations: [\n    ProjectsComponent,\n    ProjectDialogComponent,\n    ProjectDeleteDialogComponent,\n    ProjectPeopleComponent,\n    ProjectServiceAccountsComponent,\n    ProjectComponent,\n    ProjectSecretsComponent,\n  ],\n  providers: [],\n})\nexport class ProjectsModule {}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport { SecretsListComponent } from \"../shared/secrets-list.component\";\n\nimport {\n  SecretDeleteDialogComponent,\n  SecretDeleteOperation,\n} from \"./dialog/secret-delete.component\";\nimport {\n  OperationType,\n  SecretDialogComponent,\n  SecretOperation,\n} from \"./dialog/secret-dialog.component\";\nimport { SecretService } from \"./secret.service\";\n\n@Component({\n  selector: \"sm-secrets\",\n  templateUrl: \"./secrets.component.html\",\n})\nexport class SecretsComponent implements OnInit {\n  protected secrets$: Observable<SecretListView[]>;\n  protected search: string;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private secretService: SecretService,\n    private dialogService: DialogServiceAbstraction,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  ngOnInit() {\n    this.secrets$ = this.secretService.secret$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getSecrets();\n      })\n    );\n\n    if (this.route.snapshot.queryParams.search) {\n      this.search = this.route.snapshot.queryParams.search;\n    }\n  }\n\n  private async getSecrets(): Promise<SecretListView[]> {\n    return await this.secretService.getSecrets(this.organizationId);\n  }\n\n  openEditSecret(secretId: string) {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Edit,\n        secretId: secretId,\n      },\n    });\n  }\n\n  openDeleteSecret(event: SecretListView[]) {\n    this.dialogService.open<unknown, SecretDeleteOperation>(SecretDeleteDialogComponent, {\n      data: {\n        secrets: event,\n      },\n    });\n  }\n\n  openNewSecretDialog() {\n    this.dialogService.open<unknown, SecretOperation>(SecretDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  copySecretName(name: string) {\n    SecretsListComponent.copySecretName(name, this.platformUtilsService, this.i18nService);\n  }\n\n  copySecretValue(id: string) {\n    SecretsListComponent.copySecretValue(\n      id,\n      this.platformUtilsService,\n      this.i18nService,\n      this.secretService\n    );\n  }\n}\n","<sm-header>\n  <bit-search\n    [placeholder]=\"'searchSecrets' | i18n\"\n    [(ngModel)]=\"search\"\n    class=\"tw-w-80\"\n  ></bit-search>\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n<sm-secrets-list\n  (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n  (newSecretEvent)=\"openNewSecretDialog()\"\n  (editSecretEvent)=\"openEditSecret($event)\"\n  (copySecretNameEvent)=\"copySecretName($event)\"\n  (copySecretValueEvent)=\"copySecretValue($event)\"\n  [secrets]=\"secrets$ | async\"\n  [search]=\"search\"\n></sm-secrets-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { SecretsComponent } from \"./secrets.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: SecretsComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SecretsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { SecretDeleteDialogComponent } from \"./dialog/secret-delete.component\";\nimport { SecretDialogComponent } from \"./dialog/secret-dialog.component\";\nimport { SecretsRoutingModule } from \"./secrets-routing.module\";\nimport { SecretsComponent } from \"./secrets.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, SecretsRoutingModule],\n  declarations: [SecretDeleteDialogComponent, SecretDialogComponent, SecretsComponent],\n  providers: [],\n})\nexport class SecretsModule {}\n","import { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nexport class AccessTokenRequest {\n  name: EncString;\n  encryptedPayload: EncString;\n  key: EncString;\n  expireAt: Date;\n}\n","export class RevokeAccessTokensRequest {\n  ids: string[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class AccessTokenCreationResponse extends BaseResponse {\n  id: string;\n  name: string;\n  clientSecret: string;\n  expireAt?: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.clientSecret = this.getResponseProperty(\"ClientSecret\");\n    this.expireAt = this.getResponseProperty(\"ExpireAt\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class AccessTokenResponse extends BaseResponse {\n  id: string;\n  name: string;\n  scopes: string[];\n  expireAt?: string;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.scopes = this.getResponseProperty(\"Scopes\");\n    this.expireAt = this.getResponseProperty(\"ExpireAt\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","export class AccessTokenView {\n  id: string;\n  name: string;\n  scopes: string[];\n  expireAt?: Date;\n  creationDate: Date;\n  revisionDate: Date;\n}\n","import { Injectable } from \"@angular/core\";\nimport { Subject } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ListResponse } from \"@bitwarden/common/models/response/list.response\";\nimport { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\n\nimport { AccessTokenRequest } from \"../models/requests/access-token.request\";\nimport { RevokeAccessTokensRequest } from \"../models/requests/revoke-access-tokens.request\";\nimport { AccessTokenCreationResponse } from \"../models/responses/access-token-creation.response\";\nimport { AccessTokenResponse } from \"../models/responses/access-tokens.response\";\nimport { AccessTokenView } from \"../models/view/access-token.view\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AccessService {\n  private readonly _accessTokenVersion = \"0\";\n  protected _accessToken: Subject<AccessTokenView> = new Subject();\n\n  accessToken$ = this._accessToken.asObservable();\n\n  constructor(\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private encryptService: EncryptService\n  ) {}\n\n  async getAccessTokens(\n    organizationId: string,\n    serviceAccountId: string\n  ): Promise<AccessTokenView[]> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-tokens\",\n      null,\n      true,\n      true\n    );\n    const results = new ListResponse(r, AccessTokenResponse);\n\n    return await this.createAccessTokenViews(organizationId, results.data);\n  }\n\n  async createAccessToken(\n    organizationId: string,\n    serviceAccountId: string,\n    accessTokenView: AccessTokenView\n  ): Promise<string> {\n    const keyMaterial = await this.cryptoFunctionService.randomBytes(16);\n    const key = await this.cryptoFunctionService.hkdf(\n      keyMaterial,\n      \"bitwarden-accesstoken\",\n      \"sm-access-token\",\n      64,\n      \"sha256\"\n    );\n    const encryptionKey = new SymmetricCryptoKey(key);\n\n    const request = await this.createAccessTokenRequest(\n      organizationId,\n      encryptionKey,\n      accessTokenView\n    );\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-tokens\",\n      request,\n      true,\n      true\n    );\n    const result = new AccessTokenCreationResponse(r);\n    this._accessToken.next(null);\n    const b64Key = Utils.fromBufferToB64(keyMaterial);\n    return `${this._accessTokenVersion}.${result.id}.${result.clientSecret}:${b64Key}`;\n  }\n\n  async revokeAccessTokens(serviceAccountId: string, accessTokenIds: string[]): Promise<void> {\n    const request = new RevokeAccessTokensRequest();\n    request.ids = accessTokenIds;\n\n    await this.apiService.send(\n      \"POST\",\n      \"/service-accounts/\" + serviceAccountId + \"/access-tokens/revoke\",\n      request,\n      true,\n      false\n    );\n\n    this._accessToken.next(null);\n  }\n\n  private async createAccessTokenRequest(\n    organizationId: string,\n    encryptionKey: SymmetricCryptoKey,\n    accessTokenView: AccessTokenView\n  ): Promise<AccessTokenRequest> {\n    const organizationKey = await this.getOrganizationKey(organizationId);\n    const accessTokenRequest = new AccessTokenRequest();\n    const [name, encryptedPayload, key] = await Promise.all([\n      await this.encryptService.encrypt(accessTokenView.name, organizationKey),\n      await this.encryptService.encrypt(\n        JSON.stringify({ encryptionKey: organizationKey.keyB64 }),\n        encryptionKey\n      ),\n      await this.encryptService.encrypt(encryptionKey.keyB64, organizationKey),\n    ]);\n\n    accessTokenRequest.name = name;\n    accessTokenRequest.encryptedPayload = encryptedPayload;\n    accessTokenRequest.key = key;\n    accessTokenRequest.expireAt = accessTokenView.expireAt;\n    return accessTokenRequest;\n  }\n\n  private async getOrganizationKey(organizationId: string): Promise<SymmetricCryptoKey> {\n    return await this.cryptoService.getOrgKey(organizationId);\n  }\n\n  private async createAccessTokenViews(\n    organizationId: string,\n    accessTokenResponses: AccessTokenResponse[]\n  ): Promise<AccessTokenView[]> {\n    const orgKey = await this.getOrganizationKey(organizationId);\n    return await Promise.all(\n      accessTokenResponses.map(async (s) => {\n        const view = new AccessTokenView();\n        view.id = s.id;\n        view.name = await this.encryptService.decryptToUtf8(new EncString(s.name), orgKey);\n        view.scopes = s.scopes;\n        view.expireAt = s.expireAt ? new Date(s.expireAt) : null;\n        view.creationDate = new Date(s.creationDate);\n        view.revisionDate = new Date(s.revisionDate);\n        return view;\n      })\n    );\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nexport interface AccessTokenDetails {\n  subTitle: string;\n  expirationDate?: Date;\n  accessToken: string;\n}\n\n@Component({\n  templateUrl: \"./access-token-dialog.component.html\",\n})\nexport class AccessTokenDialogComponent implements OnInit {\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: AccessTokenDetails,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {\n    this.dialogRef.disableClose = true;\n  }\n\n  ngOnInit(): void {\n    // TODO remove null checks once strictNullChecks in TypeScript is turned on.\n    if (!this.data.subTitle || !this.data.accessToken) {\n      this.dialogRef.close();\n      throw new Error(\"The access token dialog was not called with the appropriate values.\");\n    }\n  }\n\n  copyAccessToken(): void {\n    this.platformUtilsService.copyToClipboard(this.data.accessToken);\n    this.platformUtilsService.showToast(\n      \"success\",\n      null,\n      this.i18nService.t(\"accessTokenCreatedAndCopied\")\n    );\n    this.dialogRef.close();\n  }\n}\n","<bit-dialog dialogSize=\"default\">\n  <ng-container bitDialogTitle>\n    <span>{{ \"newAccessToken\" | i18n }}</span>\n    <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n      {{ data.subTitle }}\n    </span>\n  </ng-container>\n\n  <div bitDialogContent>\n    <bit-callout type=\"info\" [title]=\"'accessTokenCallOutTitle' | i18n\">\n      {{ \"downloadAccessToken\" | i18n }}<br />\n      {{ \"expiresOnAccessToken\" | i18n }}\n      {{\n        data.expirationDate === null ? (\"never\" | i18n) : (data.expirationDate | date : \"medium\")\n      }}\n    </bit-callout>\n\n    <bit-form-field class=\"tw-mb-0\">\n      <bit-label>{{ \"accessToken\" | i18n }}</bit-label>\n      <textarea bitInput disabled rows=\"4\">{{ data.accessToken }}</textarea>\n    </bit-form-field>\n    {{ \"expiresOnAccessToken\" | i18n }}\n    {{ data.expirationDate === null ? (\"never\" | i18n) : (data.expirationDate | date : \"medium\") }}\n  </div>\n\n  <ng-container bitDialogFooter>\n    <button type=\"button\" bitButton buttonType=\"primary\" (click)=\"copyAccessToken()\">\n      <i class=\"bwi bwi-clone\" aria-hidden=\"true\"></i>\n      {{ \"copyToken\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","<ng-container [formGroup]=\"form\">\n  <bit-form-field>\n    <bit-label>{{ \"expires\" | i18n }}</bit-label>\n    <select bitInput formControlName=\"expires\">\n      <option ngValue=\"never\">{{ \"never\" | i18n }}</option>\n      <option *ngFor=\"let day of expirationDayOptions\" [ngValue]=\"day\">\n        {{ \"days\" | i18n : day }}\n      </option>\n      <option ngValue=\"custom\">{{ \"custom\" | i18n }}</option>\n    </select>\n  </bit-form-field>\n  <bit-form-field *ngIf=\"form.value.expires === 'custom'\">\n    <bit-label>{{ \"expirationDate\" | i18n }}</bit-label>\n    <input\n      bitInput\n      type=\"datetime-local\"\n      [min]=\"currentDate | date : 'YYYY-MM-ddThh:mm'\"\n      formControlName=\"expireDateTime\"\n    />\n  </bit-form-field>\n</ng-container>\n","import { DatePipe } from \"@angular/common\";\nimport { Component, Input, OnDestroy, OnInit } from \"@angular/core\";\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  FormControl,\n  FormGroup,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  Validators,\n} from \"@angular/forms\";\nimport { Subject, takeUntil } from \"rxjs\";\n\n@Component({\n  selector: \"sm-expiration-options\",\n  templateUrl: \"./expiration-options.component.html\",\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: ExpirationOptionsComponent,\n    },\n    {\n      provide: NG_VALIDATORS,\n      multi: true,\n      useExisting: ExpirationOptionsComponent,\n    },\n  ],\n})\nexport class ExpirationOptionsComponent\n  implements ControlValueAccessor, Validator, OnInit, OnDestroy\n{\n  private destroy$ = new Subject<void>();\n\n  @Input() expirationDayOptions: number[];\n\n  @Input() set touched(val: boolean) {\n    if (val) {\n      this.form.markAllAsTouched();\n    }\n  }\n\n  currentDate = new Date();\n\n  protected form = new FormGroup({\n    expires: new FormControl(\"never\", [Validators.required]),\n    expireDateTime: new FormControl(\"\", [Validators.required]),\n  });\n\n  constructor(private datePipe: DatePipe) {}\n\n  async ngOnInit() {\n    this.form.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(() => {\n      this._onChange(this.getExpiresDate());\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private _onChange = (_value: Date | null): void => undefined;\n  registerOnChange(fn: (value: Date | null) => void): void {\n    this._onChange = fn;\n  }\n\n  onTouched = (): void => undefined;\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  validate(control: AbstractControl<any, any>): ValidationErrors {\n    if (\n      (this.form.value.expires == \"custom\" && this.form.value.expireDateTime) ||\n      this.form.value.expires !== \"custom\"\n    ) {\n      return null;\n    }\n    return {\n      required: true,\n    };\n  }\n\n  writeValue(value: Date | null): void {\n    if (value == null) {\n      this.form.setValue({ expires: \"never\", expireDateTime: null });\n    }\n    if (value) {\n      this.form.setValue({\n        expires: \"custom\",\n        expireDateTime: this.datePipe.transform(value, \"YYYY-MM-ddThh:mm\"),\n      });\n    }\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    isDisabled ? this.form.disable() : this.form.enable();\n  }\n\n  private getExpiresDate(): Date | null {\n    if (this.form.value.expires == \"never\") {\n      return null;\n    }\n    if (this.form.value.expires == \"custom\") {\n      return new Date(this.form.value.expireDateTime);\n    }\n    const currentDate = new Date();\n    currentDate.setDate(currentDate.getDate() + Number(this.form.value.expires));\n    return currentDate;\n  }\n}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { BitValidators } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../../../models/view/service-account.view\";\nimport { AccessTokenView } from \"../../models/view/access-token.view\";\nimport { AccessService } from \"../access.service\";\n\nimport { AccessTokenDetails, AccessTokenDialogComponent } from \"./access-token-dialog.component\";\n\nexport interface AccessTokenOperation {\n  organizationId: string;\n  serviceAccountView: ServiceAccountView;\n}\n\n@Component({\n  templateUrl: \"./access-token-create-dialog.component.html\",\n})\nexport class AccessTokenCreateDialogComponent implements OnInit {\n  protected formGroup = new FormGroup({\n    name: new FormControl(\"\", {\n      validators: [Validators.required, Validators.maxLength(80), BitValidators.trimValidator],\n      updateOn: \"submit\",\n    }),\n    expirationDateControl: new FormControl(null),\n  });\n  protected loading = false;\n\n  expirationDayOptions = [7, 30, 60];\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: AccessTokenOperation,\n    private i18nService: I18nService,\n    private dialogService: DialogServiceAbstraction,\n    private accessService: AccessService\n  ) {}\n\n  async ngOnInit() {\n    if (\n      !this.data.organizationId ||\n      !this.data.serviceAccountView?.id ||\n      !this.data.serviceAccountView?.name\n    ) {\n      this.dialogRef.close();\n      throw new Error(\n        `The access token create dialog was not called with the appropriate operation values.`\n      );\n    }\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n    if (this.formGroup.invalid) {\n      return;\n    }\n    const accessTokenView = new AccessTokenView();\n    accessTokenView.name = this.formGroup.value.name;\n    accessTokenView.expireAt = this.formGroup.value.expirationDateControl;\n    const accessToken = await this.accessService.createAccessToken(\n      this.data.organizationId,\n      this.data.serviceAccountView.id,\n      accessTokenView\n    );\n    this.openAccessTokenDialog(\n      this.data.serviceAccountView.name,\n      accessToken,\n      accessTokenView.expireAt\n    );\n    this.dialogRef.close();\n  };\n\n  private openAccessTokenDialog(\n    serviceAccountName: string,\n    accessToken: string,\n    expirationDate?: Date\n  ) {\n    this.dialogService.open<unknown, AccessTokenDetails>(AccessTokenDialogComponent, {\n      data: {\n        subTitle: serviceAccountName,\n        expirationDate: expirationDate,\n        accessToken: accessToken,\n      },\n    });\n  }\n\n  static openNewAccessTokenDialog(\n    dialogService: DialogServiceAbstraction,\n    serviceAccountId: string,\n    organizationId: string\n  ) {\n    // TODO once service account names are implemented in service account contents page pass in here.\n    const serviceAccountView = new ServiceAccountView();\n    serviceAccountView.id = serviceAccountId;\n    serviceAccountView.name = \"placeholder\";\n\n    return dialogService.open<unknown, AccessTokenOperation>(AccessTokenCreateDialogComponent, {\n      data: {\n        organizationId: organizationId,\n        serviceAccountView: serviceAccountView,\n      },\n    });\n  }\n}\n","<div *ngIf=\"!tokens\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<bit-no-items *ngIf=\"tokens?.length == 0\">\n  <ng-container slot=\"title\">{{ \"accessTokensNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container slot=\"description\">{{ \"accessTokensNoItemsDesc\" | i18n }}</ng-container>\n  <button\n    type=\"button\"\n    slot=\"button\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"newAccessTokenEvent.emit()\"\n  >\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newAccessToken\" | i18n }}\n  </button>\n</bit-no-items>\n\n<bit-table *ngIf=\"tokens?.length >= 1\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"tw-m-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell>{{ \"name\" | i18n }}</th>\n      <th bitCell>{{ \"permissions\" | i18n }}</th>\n      <th bitCell>{{ \"expires\" | i18n }}</th>\n      <th bitCell>{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body>\n    <tr bitRow *ngFor=\"let token of tokens\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(token.id) : null\"\n          [checked]=\"selection.isSelected(token.id)\"\n        />\n      </td>\n      <td bitCell>{{ token.name }}</td>\n      <td bitCell>{{ permission(token) | i18n }}</td>\n      <td bitCell>\n        {{ token.expireAt === null ? (\"never\" | i18n) : (token.expireAt | date : \"medium\") }}\n      </td>\n      <td bitCell>{{ token.revisionDate | date : \"medium\" }}</td>\n      <td bitCell>\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"tokenMenu\"\n        ></button>\n      </td>\n\n      <bit-menu #tokenMenu>\n        <button type=\"button\" bitMenuItem (click)=\"revokeAccessTokensEvent.emit([token])\">\n          <span class=\"tw-text-danger\">\n            <i class=\"bwi bwi-fw bwi-minus-circle\" aria-hidden=\"true\"></i>\n            {{ \"revokeAccessToken\" | i18n }}\n          </span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"revokeSelected()\">\n    <span class=\"tw-text-danger\">\n      <i class=\"bwi bwi-fw bwi-minus-circle\" aria-hidden=\"true\"></i>\n      {{ \"revokeAccessTokens\" | i18n }}\n    </span>\n  </button>\n</bit-menu>\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"default\">\n    <ng-container bitDialogTitle>\n      <span>{{ \"newAccessToken\" | i18n }}</span>\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        {{ data.serviceAccountView.name }}\n      </span>\n    </ng-container>\n\n    <div bitDialogContent>\n      <bit-form-field>\n        <bit-label>{{ \"name\" | i18n }}</bit-label>\n        <input bitInput formControlName=\"name\" />\n      </bit-form-field>\n      <div class=\"tw-mb-6\">\n        <bit-form-field class=\"tw-mb-0\">\n          <bit-label>{{ \"permissions\" | i18n }}</bit-label>\n          <select bitInput disabled>\n            <option selected value=\"canRead\">\n              {{ \"canRead\" | i18n }}\n            </option>\n          </select>\n        </bit-form-field>\n        <span class=\"tw-text-sm tw-text-muted\">\n          {{ \"accessTokenPermissionsBetaNotification\" | i18n }}\n        </span>\n      </div>\n      <sm-expiration-options\n        formControlName=\"expirationDateControl\"\n        [expirationDayOptions]=\"expirationDayOptions\"\n        [touched]=\"formGroup.controls.expirationDateControl.touched\"\n      ></sm-expiration-options>\n    </div>\n\n    <ng-container bitDialogFooter>\n      <button class=\"tw-normal-case\" type=\"submit\" bitButton buttonType=\"primary\" bitFormButton>\n        {{ \"newAccessToken\" | i18n }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, Output } from \"@angular/core\";\n\nimport { AccessTokenView } from \"../models/view/access-token.view\";\n\n@Component({\n  selector: \"sm-access-list\",\n  templateUrl: \"./access-list.component.html\",\n})\nexport class AccessListComponent {\n  @Input()\n  get tokens(): AccessTokenView[] {\n    return this._tokens;\n  }\n  set tokens(secrets: AccessTokenView[]) {\n    this.selection.clear();\n    this._tokens = secrets;\n  }\n  private _tokens: AccessTokenView[];\n\n  @Output() newAccessTokenEvent = new EventEmitter();\n  @Output() revokeAccessTokensEvent = new EventEmitter<AccessTokenView[]>();\n\n  protected selection = new SelectionModel<string>(true, []);\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.tokens.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.tokens.map((s) => s.id));\n  }\n\n  protected revokeSelected() {\n    const selected = this.tokens.filter((s) => this.selection.selected.includes(s.id));\n    this.revokeAccessTokensEvent.emit(selected);\n  }\n\n  protected permission(token: AccessTokenView) {\n    return \"canRead\";\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { UserVerificationPromptComponent } from \"@bitwarden/web-vault/app/shared/components/user-verification\";\n\nimport { AccessTokenView } from \"../models/view/access-token.view\";\n\nimport { AccessService } from \"./access.service\";\nimport { AccessTokenCreateDialogComponent } from \"./dialogs/access-token-create-dialog.component\";\n\n@Component({\n  selector: \"sm-access-tokens\",\n  templateUrl: \"./access-tokens.component.html\",\n})\nexport class AccessTokenComponent implements OnInit {\n  accessTokens$: Observable<AccessTokenView[]>;\n\n  private serviceAccountId: string;\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private accessService: AccessService,\n    private dialogService: DialogServiceAbstraction,\n    private modalService: ModalService,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  ngOnInit() {\n    this.accessTokens$ = this.accessService.accessToken$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        this.serviceAccountId = params.serviceAccountId;\n        return await this.getAccessTokens();\n      })\n    );\n  }\n\n  protected async revoke(tokens: AccessTokenView[]) {\n    if (!tokens?.length) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"noAccessTokenSelected\")\n      );\n      return;\n    }\n\n    if (!(await this.verifyUser())) {\n      return;\n    }\n\n    await this.accessService.revokeAccessTokens(\n      this.serviceAccountId,\n      tokens.map((t) => t.id)\n    );\n\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"accessTokenRevoked\"));\n  }\n\n  protected openNewAccessTokenDialog() {\n    AccessTokenCreateDialogComponent.openNewAccessTokenDialog(\n      this.dialogService,\n      this.serviceAccountId,\n      this.organizationId\n    );\n  }\n\n  private verifyUser() {\n    const ref = this.modalService.open(UserVerificationPromptComponent, {\n      allowMultipleModals: true,\n      data: {\n        confirmDescription: \"revokeAccessTokenDesc\",\n        confirmButtonText: \"revokeAccessToken\",\n        modalTitle: \"revokeAccessToken\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return ref.onClosedPromise();\n  }\n\n  private async getAccessTokens(): Promise<AccessTokenView[]> {\n    return await this.accessService.getAccessTokens(this.organizationId, this.serviceAccountId);\n  }\n}\n","<sm-access-list\n  [tokens]=\"accessTokens$ | async\"\n  (newAccessTokenEvent)=\"openNewAccessTokenDialog()\"\n  (revokeAccessTokensEvent)=\"revoke($event)\"\n></sm-access-list>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport {\n  combineLatestWith,\n  map,\n  Observable,\n  share,\n  startWith,\n  Subject,\n  switchMap,\n  takeUntil,\n} from \"rxjs\";\n\nimport {\n  SimpleDialogType,\n  DialogServiceAbstraction,\n  SimpleDialogOptions,\n} from \"@bitwarden/angular/services/dialog\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { ValidationService } from \"@bitwarden/common/platform/abstractions/validation.service\";\nimport { SelectItemView } from \"@bitwarden/components/src/multi-select/models/select-item-view\";\n\nimport {\n  GroupServiceAccountAccessPolicyView,\n  ServiceAccountAccessPoliciesView,\n  UserServiceAccountAccessPolicyView,\n} from \"../../models/view/access-policy.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  AccessSelectorComponent,\n  AccessSelectorRowView,\n} from \"../../shared/access-policies/access-selector.component\";\nimport {\n  AccessRemovalDetails,\n  AccessRemovalDialogComponent,\n} from \"../../shared/access-policies/dialogs/access-removal-dialog.component\";\n\n@Component({\n  selector: \"sm-service-account-people\",\n  templateUrl: \"./service-account-people.component.html\",\n})\nexport class ServiceAccountPeopleComponent {\n  private destroy$ = new Subject<void>();\n  private serviceAccountId: string;\n  private organizationId: string;\n  private rows: AccessSelectorRowView[];\n\n  protected rows$: Observable<AccessSelectorRowView[]> =\n    this.accessPolicyService.serviceAccountAccessPolicyChanges$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(([_, params]) =>\n        this.accessPolicyService.getServiceAccountAccessPolicies(params.serviceAccountId)\n      ),\n      map((policies) => {\n        const rows: AccessSelectorRowView[] = [];\n        policies.userAccessPolicies.forEach((policy) => {\n          rows.push({\n            type: \"user\",\n            name: policy.organizationUserName,\n            id: policy.organizationUserId,\n            accessPolicyId: policy.id,\n            read: policy.read,\n            write: policy.write,\n            userId: policy.userId,\n            icon: AccessSelectorComponent.userIcon,\n            static: true,\n          });\n        });\n\n        policies.groupAccessPolicies.forEach((policy) => {\n          rows.push({\n            type: \"group\",\n            name: policy.groupName,\n            id: policy.groupId,\n            accessPolicyId: policy.id,\n            read: policy.read,\n            write: policy.write,\n            currentUserInGroup: policy.currentUserInGroup,\n            icon: AccessSelectorComponent.groupIcon,\n            static: true,\n          });\n        });\n\n        return rows;\n      }),\n      share()\n    );\n\n  protected handleCreateAccessPolicies(selected: SelectItemView[]) {\n    const serviceAccountAccessPoliciesView = new ServiceAccountAccessPoliciesView();\n    serviceAccountAccessPoliciesView.userAccessPolicies = selected\n      .filter((selection) => AccessSelectorComponent.getAccessItemType(selection) === \"user\")\n      .map((filtered) => {\n        const view = new UserServiceAccountAccessPolicyView();\n        view.grantedServiceAccountId = this.serviceAccountId;\n        view.organizationUserId = filtered.id;\n        view.read = true;\n        view.write = true;\n        return view;\n      });\n\n    serviceAccountAccessPoliciesView.groupAccessPolicies = selected\n      .filter((selection) => AccessSelectorComponent.getAccessItemType(selection) === \"group\")\n      .map((filtered) => {\n        const view = new GroupServiceAccountAccessPolicyView();\n        view.grantedServiceAccountId = this.serviceAccountId;\n        view.groupId = filtered.id;\n        view.read = true;\n        view.write = true;\n        return view;\n      });\n\n    return this.accessPolicyService.createServiceAccountAccessPolicies(\n      this.serviceAccountId,\n      serviceAccountAccessPoliciesView\n    );\n  }\n\n  protected async handleDeleteAccessPolicy(policy: AccessSelectorRowView) {\n    if (\n      await this.accessPolicyService.needToShowAccessRemovalWarning(\n        this.organizationId,\n        policy,\n        this.rows\n      )\n    ) {\n      this.launchDeleteWarningDialog(policy);\n      return;\n    }\n\n    try {\n      await this.accessPolicyService.deleteAccessPolicy(policy.accessPolicyId);\n      const simpleDialogOpts: SimpleDialogOptions = {\n        title: this.i18nService.t(\"saPeopleWarningTitle\"),\n        content: this.i18nService.t(\"saPeopleWarningMessage\"),\n        type: SimpleDialogType.WARNING,\n        acceptButtonText: { key: \"close\" },\n        cancelButtonText: null,\n      };\n      this.dialogService.openSimpleDialogRef(simpleDialogOpts);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private dialogService: DialogServiceAbstraction,\n    private i18nService: I18nService,\n    private validationService: ValidationService,\n    private accessPolicyService: AccessPolicyService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.serviceAccountId = params.serviceAccountId;\n      this.organizationId = params.organizationId;\n    });\n\n    this.rows$.pipe(takeUntil(this.destroy$)).subscribe((rows) => {\n      this.rows = rows;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private launchDeleteWarningDialog(policy: AccessSelectorRowView) {\n    this.dialogService.open<unknown, AccessRemovalDetails>(AccessRemovalDialogComponent, {\n      data: {\n        title: \"smAccessRemovalWarningSaTitle\",\n        message: \"smAccessRemovalWarningSaMessage\",\n        operation: \"delete\",\n        type: \"service-account\",\n        returnRoute: [\"sm\", this.organizationId, \"service-accounts\"],\n        policy,\n      },\n    });\n  }\n}\n","<div class=\"tw-mt-4 tw-w-2/5\">\n  <p class=\"tw-mt-6\">\n    {{ \"serviceAccountPeopleDescription\" | i18n }}\n  </p>\n  <sm-access-selector\n    [rows]=\"rows$ | async\"\n    granteeType=\"people\"\n    [label]=\"'people' | i18n\"\n    [hint]=\"'projectPeopleSelectHint' | i18n\"\n    [columnTitle]=\"'groupSlashUser' | i18n\"\n    [emptyMessage]=\"'projectEmptyPeopleAccessPolicies' | i18n\"\n    (onCreateAccessPolicies)=\"handleCreateAccessPolicies($event)\"\n    (onDeleteAccessPolicy)=\"handleDeleteAccessPolicy($event)\"\n  >\n  </sm-access-selector>\n</div>\n","import { Component } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, map, Observable, startWith, Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { ValidationService } from \"@bitwarden/common/platform/abstractions/validation.service\";\nimport { SelectItemView } from \"@bitwarden/components/src/multi-select/models/select-item-view\";\n\nimport { ServiceAccountProjectAccessPolicyView } from \"../../models/view/access-policy.view\";\nimport { AccessPolicyService } from \"../../shared/access-policies/access-policy.service\";\nimport {\n  AccessSelectorComponent,\n  AccessSelectorRowView,\n} from \"../../shared/access-policies/access-selector.component\";\n\n@Component({\n  selector: \"sm-service-account-projects\",\n  templateUrl: \"./service-account-projects.component.html\",\n})\nexport class ServiceAccountProjectsComponent {\n  private destroy$ = new Subject<void>();\n  private serviceAccountId: string;\n  private organizationId: string;\n\n  protected rows$: Observable<AccessSelectorRowView[]> =\n    this.accessPolicyService.serviceAccountGrantedPolicyChanges$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(([_, params]) =>\n        this.accessPolicyService.getGrantedPolicies(params.serviceAccountId, params.organizationId)\n      ),\n      map((policies) => {\n        return policies.map((policy) => {\n          return {\n            type: \"project\",\n            name: policy.grantedProjectName,\n            id: policy.grantedProjectId,\n            accessPolicyId: policy.id,\n            read: policy.read,\n            write: policy.write,\n            icon: AccessSelectorComponent.projectIcon,\n            static: true,\n          } as AccessSelectorRowView;\n        });\n      })\n    );\n\n  protected handleCreateAccessPolicies(selected: SelectItemView[]) {\n    const serviceAccountProjectAccessPolicyView = selected\n      .filter((selection) => AccessSelectorComponent.getAccessItemType(selection) === \"project\")\n      .map((filtered) => {\n        const view = new ServiceAccountProjectAccessPolicyView();\n        view.serviceAccountId = this.serviceAccountId;\n        view.grantedProjectId = filtered.id;\n        view.read = true;\n        view.write = false;\n        return view;\n      });\n\n    return this.accessPolicyService.createGrantedPolicies(\n      this.organizationId,\n      this.serviceAccountId,\n      serviceAccountProjectAccessPolicyView\n    );\n  }\n\n  protected async handleDeleteAccessPolicy(policy: AccessSelectorRowView) {\n    try {\n      await this.accessPolicyService.deleteAccessPolicy(policy.accessPolicyId);\n    } catch (e) {\n      this.validationService.showError(e);\n    }\n  }\n\n  constructor(\n    private route: ActivatedRoute,\n    private validationService: ValidationService,\n    private accessPolicyService: AccessPolicyService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.organizationId = params.organizationId;\n      this.serviceAccountId = params.serviceAccountId;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n","<div class=\"tw-mt-4 tw-w-2/5\">\n  <p class=\"tw-mt-6\">\n    {{ \"serviceAccountProjectsDescription\" | i18n }}\n  </p>\n  <sm-access-selector\n    [rows]=\"rows$ | async\"\n    granteeType=\"projects\"\n    [label]=\"'projects' | i18n\"\n    [hint]=\"'newSaSelectAccess' | i18n\"\n    [columnTitle]=\"'projects' | i18n\"\n    [emptyMessage]=\"'serviceAccountEmptyProjectAccesspolicies' | i18n\"\n    (onCreateAccessPolicies)=\"handleCreateAccessPolicies($event)\"\n    (onDeleteAccessPolicy)=\"handleDeleteAccessPolicy($event)\"\n  >\n  </sm-access-selector>\n</div>\n","<sm-header\n  *ngIf=\"serviceAccount$ | async as serviceAccount\"\n  [title]=\"serviceAccount.name\"\n  icon=\"bwi-wrench\"\n>\n  <bit-breadcrumbs slot=\"breadcrumbs\">\n    <bit-breadcrumb [route]=\"['..']\" icon=\"bwi-angle-left\">{{\n      \"serviceAccounts\" | i18n\n    }}</bit-breadcrumb>\n  </bit-breadcrumbs>\n  <sm-new-menu></sm-new-menu>\n  <bit-tab-nav-bar label=\"Main\" slot=\"tabs\">\n    <bit-tab-link [route]=\"['projects']\">{{ \"projects\" | i18n }}</bit-tab-link>\n    <bit-tab-link [route]=\"['people']\">{{ \"people\" | i18n }}</bit-tab-link>\n    <bit-tab-link [route]=\"['access']\">{{ \"accessTokens\" | i18n }}</bit-tab-link>\n  </bit-tab-nav-bar>\n  <button\n    type=\"button\"\n    slot=\"secondary\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"openNewAccessTokenDialog()\"\n  >\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newAccessToken\" | i18n }}\n  </button>\n</sm-header>\n<router-outlet></router-outlet>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport {\n  EMPTY,\n  Subject,\n  catchError,\n  combineLatest,\n  filter,\n  startWith,\n  switchMap,\n  takeUntil,\n} from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { AccessTokenCreateDialogComponent } from \"./access/dialogs/access-token-create-dialog.component\";\nimport { ServiceAccountService } from \"./service-account.service\";\n\n@Component({\n  selector: \"sm-service-account\",\n  templateUrl: \"./service-account.component.html\",\n})\nexport class ServiceAccountComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  private organizationId: string;\n  private serviceAccountId: string;\n\n  private onChange$ = this.serviceAccountService.serviceAccount$.pipe(\n    filter((sa) => sa?.id === this.serviceAccountId),\n    startWith(null)\n  );\n\n  protected serviceAccount$ = combineLatest([this.route.params, this.onChange$]).pipe(\n    switchMap(([params, _]) =>\n      this.serviceAccountService.getByServiceAccountId(\n        params.serviceAccountId,\n        params.organizationId\n      )\n    ),\n    catchError(() => {\n      this.router.navigate([\"/sm\", this.organizationId, \"service-accounts\"]).then(() => {\n        this.platformUtilsService.showToast(\n          \"error\",\n          null,\n          this.i18nService.t(\"notFound\", this.i18nService.t(\"serviceAccount\"))\n        );\n      });\n      return EMPTY;\n    })\n  );\n\n  constructor(\n    private route: ActivatedRoute,\n    private serviceAccountService: ServiceAccountService,\n    private dialogService: DialogServiceAbstraction,\n    private router: Router,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  ngOnInit(): void {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.serviceAccountId = params.serviceAccountId;\n      this.organizationId = params.organizationId;\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  protected openNewAccessTokenDialog() {\n    AccessTokenCreateDialogComponent.openNewAccessTokenDialog(\n      this.dialogService,\n      this.serviceAccountId,\n      this.organizationId\n    );\n  }\n}\n","<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <bit-dialog dialogSize=\"small\">\n    <ng-container bitDialogTitle>\n      <span>{{ title }}</span>\n      <span class=\"tw-text-sm tw-normal-case tw-text-muted\">\n        <ng-container *ngIf=\"data.serviceAccounts.length == 1\">\n          {{ data.serviceAccounts[0].name }}\n        </ng-container>\n        <ng-container *ngIf=\"data.serviceAccounts.length > 1\">\n          {{ data.serviceAccounts.length }}\n          {{ \"serviceAccounts\" | i18n }}\n        </ng-container>\n      </span>\n    </ng-container>\n\n    <div bitDialogContent>\n      <bit-callout type=\"warning\" [title]=\"'warning' | i18n\">\n        {{ dialogContent }}\n      </bit-callout>\n      <bit-form-field>\n        <bit-label>{{ dialogConfirmationLabel }}</bit-label>\n        <input bitInput formControlName=\"confirmDelete\" />\n      </bit-form-field>\n    </div>\n\n    <ng-container bitDialogFooter>\n      <button type=\"submit\" bitButton buttonType=\"danger\" bitFormButton>\n        {{ title }}\n      </button>\n      <button type=\"button\" bitButton buttonType=\"secondary\" bitFormButton bitDialogClose>\n        {{ \"cancel\" | i18n }}\n      </button>\n    </ng-container>\n  </bit-dialog>\n</form>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\nimport {\n  FormControl,\n  FormGroup,\n  ValidationErrors,\n  ValidatorFn,\n  AbstractControl,\n} from \"@angular/forms\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { ServiceAccountView } from \"../../models/view/service-account.view\";\nimport {\n  BulkOperationStatus,\n  BulkStatusDetails,\n  BulkStatusDialogComponent,\n} from \"../../shared/dialogs/bulk-status-dialog.component\";\nimport { ServiceAccountService } from \"../service-account.service\";\n\nexport interface ServiceAccountDeleteOperation {\n  serviceAccounts: ServiceAccountView[];\n}\n\n@Component({\n  templateUrl: \"./service-account-delete-dialog.component.html\",\n})\nexport class ServiceAccountDeleteDialogComponent {\n  formGroup = new FormGroup({\n    confirmDelete: new FormControl(\"\", [this.matchConfirmationMessageValidator()]),\n  });\n\n  constructor(\n    public dialogRef: DialogRef,\n    @Inject(DIALOG_DATA) public data: ServiceAccountDeleteOperation,\n    private serviceAccountService: ServiceAccountService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private dialogService: DialogServiceAbstraction\n  ) {}\n\n  get title() {\n    return this.data.serviceAccounts.length === 1\n      ? this.i18nService.t(\"deleteServiceAccount\")\n      : this.i18nService.t(\"deleteServiceAccounts\");\n  }\n\n  get dialogContent() {\n    return this.data.serviceAccounts.length === 1\n      ? this.i18nService.t(\"deleteServiceAccountDialogMessage\", this.data.serviceAccounts[0].name)\n      : this.i18nService.t(\"deleteServiceAccountsDialogMessage\");\n  }\n\n  get dialogConfirmationLabel() {\n    return this.i18nService.t(\"deleteProjectInputLabel\", this.dialogConfirmationMessage);\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    await this.delete();\n    this.dialogRef.close();\n  };\n\n  async delete() {\n    const bulkResponses = await this.serviceAccountService.delete(this.data.serviceAccounts);\n\n    const errors = bulkResponses.filter((response) => response.errorMessage);\n    if (errors.length > 0) {\n      this.openBulkStatusDialog(errors);\n      return;\n    }\n\n    const message =\n      this.data.serviceAccounts.length === 1\n        ? \"deleteServiceAccountToast\"\n        : \"deleteServiceAccountsToast\";\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  }\n\n  openBulkStatusDialog(bulkStatusResults: BulkOperationStatus[]) {\n    this.dialogService.open<unknown, BulkStatusDetails>(BulkStatusDialogComponent, {\n      data: {\n        title: \"deleteServiceAccounts\",\n        subTitle: \"serviceAccounts\",\n        columnTitle: \"serviceAccountName\",\n        message: \"bulkDeleteProjectsErrorMessage\",\n        details: bulkStatusResults,\n      },\n    });\n  }\n\n  private get dialogConfirmationMessage() {\n    return this.data.serviceAccounts?.length === 1\n      ? this.i18nService.t(\"deleteProjectConfirmMessage\", this.data.serviceAccounts[0].name)\n      : this.i18nService.t(\n          \"deleteServiceAccountsConfirmMessage\",\n          this.data.serviceAccounts?.length.toString()\n        );\n  }\n\n  private matchConfirmationMessageValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (this.dialogConfirmationMessage.toLowerCase() == control.value.toLowerCase()) {\n        return null;\n      } else {\n        return {\n          confirmationDoesntMatchError: {\n            message: this.i18nService.t(\"smConfirmationRequired\"),\n          },\n        };\n      }\n    };\n  }\n}\n","<div *ngIf=\"!serviceAccounts\" class=\"tw-items-center tw-justify-center tw-pt-64 tw-text-center\">\n  <i class=\"bwi bwi-spinner bwi-spin bwi-3x\"></i>\n</div>\n\n<bit-no-items *ngIf=\"serviceAccounts?.length == 0\">\n  <ng-container slot=\"title\">{{ \"serviceAccountsNoItemsTitle\" | i18n }}</ng-container>\n  <ng-container slot=\"description\">{{ \"serviceAccountsNoItemsMessage\" | i18n }}</ng-container>\n  <button\n    slot=\"button\"\n    type=\"button\"\n    bitButton\n    buttonType=\"secondary\"\n    (click)=\"newServiceAccountEvent.emit()\"\n  >\n    <i class=\"bwi bwi-plus\" aria-hidden=\"true\"></i>\n    {{ \"newServiceAccount\" | i18n }}\n  </button>\n</bit-no-items>\n\n<bit-table *ngIf=\"serviceAccounts?.length >= 1\" [dataSource]=\"dataSource\">\n  <ng-container header>\n    <tr>\n      <th bitCell class=\"tw-w-0\">\n        <label class=\"!tw-mb-0 tw-flex tw-w-fit tw-gap-2 !tw-font-bold !tw-text-muted\">\n          <input\n            type=\"checkbox\"\n            (change)=\"$event ? toggleAll() : null\"\n            [checked]=\"selection.hasValue() && isAllSelected()\"\n            [indeterminate]=\"selection.hasValue() && !isAllSelected()\"\n          />\n          {{ \"all\" | i18n }}\n        </label>\n      </th>\n      <th bitCell colspan=\"2\" bitSortable=\"name\" default>{{ \"name\" | i18n }}</th>\n      <th bitCell>{{ \"secrets\" | i18n }}</th>\n      <th bitCell bitSortable=\"revisionDate\">{{ \"lastEdited\" | i18n }}</th>\n      <th bitCell class=\"tw-w-0\">\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"tableMenu\"\n        ></button>\n      </th>\n    </tr>\n  </ng-container>\n  <ng-template body let-rows$>\n    <tr bitRow *ngFor=\"let serviceAccount of rows$ | async\">\n      <td bitCell>\n        <input\n          type=\"checkbox\"\n          (change)=\"$event ? selection.toggle(serviceAccount.id) : null\"\n          [checked]=\"selection.isSelected(serviceAccount.id)\"\n        />\n      </td>\n      <td bitCell class=\"tw-w-0 tw-pr-0\">\n        <i class=\"bwi bwi-wrench tw-text-muted\" aria-hidden=\"true\"></i>\n      </td>\n      <td bitCell class=\"tw-break-all\">\n        <a bitLink [routerLink]=\"serviceAccount.id\">\n          {{ serviceAccount.name }}\n        </a>\n      </td>\n      <td bitCell>\n        <!-- TODO add number of secrets once mapping is implemented-->\n        <span> 0 </span>\n      </td>\n      <td bitCell>{{ serviceAccount.revisionDate | date : \"medium\" }}</td>\n      <td bitCell>\n        <button\n          type=\"button\"\n          bitIconButton=\"bwi-ellipsis-v\"\n          buttonType=\"main\"\n          [title]=\"'options' | i18n\"\n          [attr.aria-label]=\"'options' | i18n\"\n          [bitMenuTriggerFor]=\"serviceAccountMenu\"\n        ></button>\n      </td>\n      <bit-menu #serviceAccountMenu>\n        <a type=\"button\" bitMenuItem [routerLink]=\"serviceAccount.id\">\n          <i class=\"bwi bwi-fw bwi-eye\" aria-hidden=\"true\"></i>\n          {{ \"viewServiceAccount\" | i18n }}\n        </a>\n        <button type=\"button\" bitMenuItem (click)=\"editServiceAccountEvent.emit(serviceAccount.id)\">\n          <i class=\"bwi bwi-fw bwi-pencil\" aria-hidden=\"true\"></i>\n          {{ \"editServiceAccount\" | i18n }}\n        </button>\n        <button type=\"button\" bitMenuItem (click)=\"delete(serviceAccount)\">\n          <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n          <span class=\"tw-text-danger\">\n            {{ \"deleteServiceAccount\" | i18n }}\n          </span>\n        </button>\n      </bit-menu>\n    </tr>\n  </ng-template>\n</bit-table>\n\n<bit-menu #tableMenu>\n  <button type=\"button\" bitMenuItem (click)=\"bulkDeleteServiceAccounts()\">\n    <i class=\"bwi bwi-fw bwi-trash tw-text-danger\" aria-hidden=\"true\"></i>\n    <span class=\"tw-text-danger\">\n      {{ \"deleteServiceAccounts\" | i18n }}\n    </span>\n  </button>\n</bit-menu>\n","import { SelectionModel } from \"@angular/cdk/collections\";\nimport { Component, EventEmitter, Input, OnDestroy, Output } from \"@angular/core\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { TableDataSource } from \"@bitwarden/components\";\n\nimport { ServiceAccountView } from \"../models/view/service-account.view\";\n\n@Component({\n  selector: \"sm-service-accounts-list\",\n  templateUrl: \"./service-accounts-list.component.html\",\n})\nexport class ServiceAccountsListComponent implements OnDestroy {\n  protected dataSource = new TableDataSource<ServiceAccountView>();\n\n  @Input()\n  get serviceAccounts(): ServiceAccountView[] {\n    return this._serviceAccounts;\n  }\n  set serviceAccounts(serviceAccounts: ServiceAccountView[]) {\n    this.selection.clear();\n    this._serviceAccounts = serviceAccounts;\n    this.dataSource.data = serviceAccounts;\n  }\n  private _serviceAccounts: ServiceAccountView[];\n\n  @Input()\n  set search(search: string) {\n    this.dataSource.filter = search;\n  }\n\n  @Output() newServiceAccountEvent = new EventEmitter();\n  @Output() deleteServiceAccountsEvent = new EventEmitter<ServiceAccountView[]>();\n  @Output() onServiceAccountCheckedEvent = new EventEmitter<string[]>();\n  @Output() editServiceAccountEvent = new EventEmitter<string>();\n\n  private destroy$: Subject<void> = new Subject<void>();\n\n  selection = new SelectionModel<string>(true, []);\n\n  constructor(\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService\n  ) {\n    this.selection.changed\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((_) => this.onServiceAccountCheckedEvent.emit(this.selection.selected));\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  isAllSelected() {\n    const numSelected = this.selection.selected.length;\n    const numRows = this.serviceAccounts.length;\n    return numSelected === numRows;\n  }\n\n  toggleAll() {\n    this.isAllSelected()\n      ? this.selection.clear()\n      : this.selection.select(...this.serviceAccounts.map((s) => s.id));\n  }\n\n  delete(serviceAccount: ServiceAccountView) {\n    this.deleteServiceAccountsEvent.emit([serviceAccount]);\n  }\n\n  bulkDeleteServiceAccounts() {\n    if (this.selection.selected.length >= 1) {\n      this.deleteServiceAccountsEvent.emit(\n        this.serviceAccounts.filter((sa) => this.selection.isSelected(sa.id))\n      );\n    } else {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"nothingSelected\")\n      );\n    }\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatest, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\n\nimport { ServiceAccountView } from \"../models/view/service-account.view\";\nimport { AccessPolicyService } from \"../shared/access-policies/access-policy.service\";\n\nimport {\n  ServiceAccountDeleteDialogComponent,\n  ServiceAccountDeleteOperation,\n} from \"./dialog/service-account-delete-dialog.component\";\nimport {\n  OperationType,\n  ServiceAccountDialogComponent,\n  ServiceAccountOperation,\n} from \"./dialog/service-account-dialog.component\";\nimport { ServiceAccountService } from \"./service-account.service\";\n\n@Component({\n  selector: \"sm-service-accounts\",\n  templateUrl: \"./service-accounts.component.html\",\n})\nexport class ServiceAccountsComponent implements OnInit {\n  protected serviceAccounts$: Observable<ServiceAccountView[]>;\n  protected search: string;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private dialogService: DialogServiceAbstraction,\n    private accessPolicyService: AccessPolicyService,\n    private serviceAccountService: ServiceAccountService\n  ) {}\n\n  ngOnInit() {\n    this.serviceAccounts$ = combineLatest([\n      this.route.params,\n      this.serviceAccountService.serviceAccount$.pipe(startWith(null)),\n      this.accessPolicyService.serviceAccountAccessPolicyChanges$.pipe(startWith(null)),\n    ]).pipe(\n      switchMap(async ([params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getServiceAccounts();\n      })\n    );\n  }\n\n  openNewServiceAccountDialog() {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        operation: OperationType.Add,\n      },\n    });\n  }\n\n  openEditServiceAccountDialog(serviceAccountId: string) {\n    this.dialogService.open<unknown, ServiceAccountOperation>(ServiceAccountDialogComponent, {\n      data: {\n        organizationId: this.organizationId,\n        serviceAccountId: serviceAccountId,\n        operation: OperationType.Edit,\n      },\n    });\n  }\n\n  openDeleteDialog(event: ServiceAccountView[]) {\n    this.dialogService.open<unknown, ServiceAccountDeleteOperation>(\n      ServiceAccountDeleteDialogComponent,\n      {\n        data: {\n          serviceAccounts: event,\n        },\n      }\n    );\n  }\n\n  private async getServiceAccounts(): Promise<ServiceAccountView[]> {\n    return await this.serviceAccountService.getServiceAccounts(this.organizationId);\n  }\n}\n","<sm-header>\n  <bit-search\n    [placeholder]=\"'searchServiceAccounts' | i18n\"\n    [(ngModel)]=\"search\"\n    class=\"tw-w-80\"\n  ></bit-search>\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n<sm-service-accounts-list\n  [serviceAccounts]=\"serviceAccounts$ | async\"\n  (newServiceAccountEvent)=\"openNewServiceAccountDialog()\"\n  (editServiceAccountEvent)=\"openEditServiceAccountDialog($event)\"\n  (deleteServiceAccountsEvent)=\"openDeleteDialog($event)\"\n  [search]=\"search\"\n></sm-service-accounts-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { AccessTokenComponent } from \"./access/access-tokens.component\";\nimport { ServiceAccountPeopleComponent } from \"./people/service-account-people.component\";\nimport { ServiceAccountProjectsComponent } from \"./projects/service-account-projects.component\";\nimport { ServiceAccountComponent } from \"./service-account.component\";\nimport { ServiceAccountsComponent } from \"./service-accounts.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: ServiceAccountsComponent,\n  },\n  {\n    path: \":serviceAccountId\",\n    component: ServiceAccountComponent,\n    children: [\n      {\n        path: \"\",\n        pathMatch: \"full\",\n        redirectTo: \"projects\",\n      },\n      {\n        path: \"access\",\n        component: AccessTokenComponent,\n      },\n      {\n        path: \"people\",\n        component: ServiceAccountPeopleComponent,\n      },\n      {\n        path: \"projects\",\n        component: ServiceAccountProjectsComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ServiceAccountsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { BreadcrumbsModule } from \"@bitwarden/components\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { AccessListComponent } from \"./access/access-list.component\";\nimport { AccessTokenComponent } from \"./access/access-tokens.component\";\nimport { AccessTokenCreateDialogComponent } from \"./access/dialogs/access-token-create-dialog.component\";\nimport { AccessTokenDialogComponent } from \"./access/dialogs/access-token-dialog.component\";\nimport { ExpirationOptionsComponent } from \"./access/dialogs/expiration-options.component\";\nimport { ServiceAccountDeleteDialogComponent } from \"./dialog/service-account-delete-dialog.component\";\nimport { ServiceAccountDialogComponent } from \"./dialog/service-account-dialog.component\";\nimport { ServiceAccountPeopleComponent } from \"./people/service-account-people.component\";\nimport { ServiceAccountProjectsComponent } from \"./projects/service-account-projects.component\";\nimport { ServiceAccountComponent } from \"./service-account.component\";\nimport { ServiceAccountsListComponent } from \"./service-accounts-list.component\";\nimport { ServiceAccountsRoutingModule } from \"./service-accounts-routing.module\";\nimport { ServiceAccountsComponent } from \"./service-accounts.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, ServiceAccountsRoutingModule, BreadcrumbsModule],\n  declarations: [\n    AccessListComponent,\n    AccessTokenComponent,\n    AccessTokenCreateDialogComponent,\n    AccessTokenDialogComponent,\n    ExpirationOptionsComponent,\n    ServiceAccountComponent,\n    ServiceAccountDeleteDialogComponent,\n    ServiceAccountDialogComponent,\n    ServiceAccountPeopleComponent,\n    ServiceAccountProjectsComponent,\n    ServiceAccountsComponent,\n    ServiceAccountsListComponent,\n    ServiceAccountPeopleComponent,\n  ],\n  providers: [],\n})\nexport class ServiceAccountsModule {}\n","import { SecretsManagerImportErrorLine } from \"./sm-import-error-line\";\n\nexport class SecretsManagerImportError extends Error {\n  constructor(message?: string) {\n    super(message);\n  }\n\n  lines: SecretsManagerImportErrorLine[];\n}\n","import { SecretsManagerImportedProjectRequest } from \"./sm-imported-project.request\";\nimport { SecretsManagerImportedSecretRequest } from \"./sm-imported-secret.request\";\n\nexport class SecretsManagerImportRequest {\n  projects: SecretsManagerImportedProjectRequest[];\n  secrets: SecretsManagerImportedSecretRequest[];\n}\n","import { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nexport class SecretsManagerImportedProjectRequest {\n  id: string;\n  name: EncString;\n}\n","import { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nexport class SecretsManagerImportedSecretRequest {\n  id: string;\n  key: EncString;\n  value: EncString;\n  note: EncString;\n  projectIds: string[];\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class SecretsManagerExportedProjectResponse extends BaseResponse {\n  id: string;\n  name: string;\n\n  constructor(response: any) {\n    super(response);\n\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class SecretsManagerExportedSecretResponse extends BaseResponse {\n  id: string;\n  key: string;\n  value: string;\n  note: string;\n  projectIds: string[];\n\n  constructor(response: any) {\n    super(response);\n\n    this.id = this.getResponseProperty(\"Id\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.value = this.getResponseProperty(\"Value\");\n    this.note = this.getResponseProperty(\"Note\");\n\n    const projectIds = this.getResponseProperty(\"ProjectIds\");\n    this.projectIds = projectIds?.map((id: any) => id.toString());\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nimport { SecretsManagerExportedProjectResponse } from \"./sm-exported-project.response\";\nimport { SecretsManagerExportedSecretResponse } from \"./sm-exported-secret.response\";\n\nexport class SecretsManagerExportResponse extends BaseResponse {\n  projects: SecretsManagerExportedProjectResponse[];\n  secrets: SecretsManagerExportedSecretResponse[];\n\n  constructor(response: any) {\n    super(response);\n\n    const projects = this.getResponseProperty(\"Projects\");\n    const secrets = this.getResponseProperty(\"Secrets\");\n\n    this.projects = projects?.map((k: any) => new SecretsManagerExportedProjectResponse(k));\n    this.secrets = secrets?.map((k: any) => new SecretsManagerExportedSecretResponse(k));\n  }\n}\n","export class SecretsManagerExport {\n  projects: SecretsManagerExportProject[];\n  secrets: SecretsManagerExportSecret[];\n}\n\nexport class SecretsManagerExportProject {\n  id: string;\n  name: string;\n}\n\nexport class SecretsManagerExportSecret {\n  id: string;\n  key: string;\n  value: string;\n  note: string;\n  projectIds: string[];\n}\n","import { Injectable } from \"@angular/core\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nimport { SecretsManagerImportError } from \"../models/error/sm-import-error\";\nimport { SecretsManagerImportRequest } from \"../models/requests/sm-import.request\";\nimport { SecretsManagerImportedProjectRequest } from \"../models/requests/sm-imported-project.request\";\nimport { SecretsManagerImportedSecretRequest } from \"../models/requests/sm-imported-secret.request\";\nimport { SecretsManagerExportResponse } from \"../models/responses/sm-export.response\";\nimport {\n  SecretsManagerExport,\n  SecretsManagerExportProject,\n  SecretsManagerExportSecret,\n} from \"../models/sm-export\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SecretsManagerPortingApiService {\n  constructor(\n    private apiService: ApiService,\n    private encryptService: EncryptService,\n    private cryptoService: CryptoService,\n    private i18nService: I18nService\n  ) {}\n\n  async export(organizationId: string): Promise<string> {\n    const response = await this.apiService.send(\n      \"GET\",\n      \"/sm/\" + organizationId + \"/export\",\n      null,\n      true,\n      true\n    );\n\n    return JSON.stringify(\n      await this.decryptExport(organizationId, new SecretsManagerExportResponse(response)),\n      null,\n      \"  \"\n    );\n  }\n\n  async import(organizationId: string, fileContents: string): Promise<SecretsManagerImportError> {\n    let requestObject = {};\n\n    try {\n      requestObject = JSON.parse(fileContents);\n      const requestBody = await this.encryptImport(organizationId, requestObject);\n\n      await this.apiService.send(\n        \"POST\",\n        \"/sm/\" + organizationId + \"/import\",\n        requestBody,\n        true,\n        true\n      );\n    } catch (error) {\n      const errorResponse = new ErrorResponse(error, 400);\n      return this.handleServerError(errorResponse, requestObject);\n    }\n  }\n\n  private async encryptImport(\n    organizationId: string,\n    importData: any\n  ): Promise<SecretsManagerImportRequest> {\n    const encryptedImport = new SecretsManagerImportRequest();\n\n    try {\n      const orgKey = await this.cryptoService.getOrgKey(organizationId);\n      encryptedImport.projects = [];\n      encryptedImport.secrets = [];\n\n      encryptedImport.projects = await Promise.all(\n        importData.projects.map(async (p: any) => {\n          const project = new SecretsManagerImportedProjectRequest();\n          project.id = p.id;\n          project.name = await this.encryptService.encrypt(p.name, orgKey);\n          return project;\n        })\n      );\n\n      encryptedImport.secrets = await Promise.all(\n        importData.secrets.map(async (s: any) => {\n          const secret = new SecretsManagerImportedSecretRequest();\n\n          [secret.key, secret.value, secret.note] = await Promise.all([\n            this.encryptService.encrypt(s.key, orgKey),\n            this.encryptService.encrypt(s.value, orgKey),\n            this.encryptService.encrypt(s.note, orgKey),\n          ]);\n\n          secret.id = s.id;\n          secret.projectIds = s.projectIds;\n\n          return secret;\n        })\n      );\n    } catch (error) {\n      return null;\n    }\n\n    return encryptedImport;\n  }\n\n  private async decryptExport(\n    organizationId: string,\n    exportData: SecretsManagerExportResponse\n  ): Promise<SecretsManagerExport> {\n    const orgKey = await this.cryptoService.getOrgKey(organizationId);\n    const decryptedExport = new SecretsManagerExport();\n    decryptedExport.projects = [];\n    decryptedExport.secrets = [];\n\n    decryptedExport.projects = await Promise.all(\n      exportData.projects.map(async (p) => {\n        const project = new SecretsManagerExportProject();\n        project.id = p.id;\n        project.name = await this.encryptService.decryptToUtf8(new EncString(p.name), orgKey);\n        return project;\n      })\n    );\n\n    decryptedExport.secrets = await Promise.all(\n      exportData.secrets.map(async (s) => {\n        const secret = new SecretsManagerExportSecret();\n\n        [secret.key, secret.value, secret.note] = await Promise.all([\n          this.encryptService.decryptToUtf8(new EncString(s.key), orgKey),\n          this.encryptService.decryptToUtf8(new EncString(s.value), orgKey),\n          this.encryptService.decryptToUtf8(new EncString(s.note), orgKey),\n        ]);\n\n        secret.id = s.id;\n        secret.projectIds = s.projectIds;\n\n        return secret;\n      })\n    );\n\n    return decryptedExport;\n  }\n\n  private handleServerError(\n    errorResponse: ErrorResponse,\n    importResult: any\n  ): SecretsManagerImportError {\n    if (errorResponse.validationErrors == null) {\n      return new SecretsManagerImportError(errorResponse.message);\n    }\n\n    const result = new SecretsManagerImportError();\n    result.lines = [];\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const id = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Projects\":\n          item = importResult.projects[id];\n          itemType = \"Project\";\n          break;\n        case \"Secrets\":\n          item = importResult.secrets[id];\n          itemType = \"Secret\";\n          break;\n        default:\n          return;\n      }\n\n      result.lines.push({\n        id: id + 1,\n        type: itemType == \"Project\" ? \"Project\" : \"Secret\",\n        key: item.key,\n        errorMessage: value.length > 0 ? value[0] : \"\",\n      });\n    });\n\n    return result;\n  }\n}\n","import { formatDate } from \"@angular/common\";\nimport { Injectable } from \"@angular/core\";\nimport { firstValueFrom } from \"rxjs\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SecretsManagerPortingService {\n  constructor(private i18nService: I18nService) {}\n\n  async getFileName(prefix: string = null, extension = \"json\"): Promise<string> {\n    const locale = await firstValueFrom(this.i18nService.locale$);\n    const dateString = formatDate(new Date(), \"yyyyMMddHHmmss\", locale);\n    return \"bitwarden\" + (prefix ? \"_\" + prefix : \"\") + \"_export_\" + dateString + \".\" + extension;\n  }\n}\n","<sm-header></sm-header>\n\n<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\">\n  <div class=\"tw-my-4 tw-max-w-xl\">\n    <app-callout type=\"info\" title=\"{{ 'exportingOrganizationSecretDataTitle' | i18n }}\">\n      {{ \"exportingOrganizationSecretDataDescription\" | i18n : orgName }}\n    </app-callout>\n  </div>\n\n  <bit-form-field class=\"tw-max-w-sm\">\n    <bit-label>{{ \"fileFormat\" | i18n }}</bit-label>\n    <select bitInput formControlName=\"format\">\n      <option *ngFor=\"let format of exportFormats; let i = index\" [value]=\"i\">\n        {{ format.name }}\n      </option>\n    </select>\n  </bit-form-field>\n\n  <button bitButton bitFormButton type=\"submit\" buttonType=\"primary\">\n    {{ \"exportData\" | i18n }}\n  </button>\n</form>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Subject, switchMap, takeUntil } from \"rxjs\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { UserVerificationPromptComponent } from \"@bitwarden/web-vault/app/shared/components/user-verification\";\n\nimport { SecretsManagerPortingApiService } from \"../services/sm-porting-api.service\";\nimport { SecretsManagerPortingService } from \"../services/sm-porting.service\";\n\ntype ExportFormat = {\n  name: string;\n  fileExtension: string;\n};\n\n@Component({\n  selector: \"sm-export\",\n  templateUrl: \"./sm-export.component.html\",\n})\nexport class SecretsManagerExportComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n\n  protected orgName: string;\n  protected orgId: string;\n  protected exportFormats: ExportFormat[] = [{ name: \"Bitwarden (json)\", fileExtension: \"json\" }];\n\n  protected formGroup = new FormGroup({\n    format: new FormControl(0, [Validators.required]),\n  });\n\n  constructor(\n    private route: ActivatedRoute,\n    private i18nService: I18nService,\n    private organizationService: OrganizationService,\n    private platformUtilsService: PlatformUtilsService,\n    private smPortingService: SecretsManagerPortingService,\n    private fileDownloadService: FileDownloadService,\n    private logService: LogService,\n    private modalService: ModalService,\n    private secretsManagerApiService: SecretsManagerPortingApiService\n  ) {}\n\n  async ngOnInit() {\n    this.route.params\n      .pipe(\n        switchMap(async (params) => await this.organizationService.get(params.organizationId)),\n        takeUntil(this.destroy$)\n      )\n      .subscribe((organization) => {\n        this.orgName = organization.name;\n        this.orgId = organization.id;\n      });\n\n    this.formGroup.get(\"format\").disable();\n  }\n\n  async ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    this.formGroup.markAllAsTouched();\n\n    if (this.formGroup.invalid) {\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    await this.doExport();\n  };\n\n  private async doExport() {\n    const fileExtension = this.exportFormats[this.formGroup.get(\"format\").value].fileExtension;\n    const exportData = await this.secretsManagerApiService.export(this.orgId);\n\n    await this.downloadFile(exportData, fileExtension);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"dataExportSuccess\"));\n  }\n\n  private async downloadFile(data: string, format: string) {\n    const fileName = await this.smPortingService.getFileName(null, format);\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: data,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n\n  private verifyUser() {\n    const ref = this.modalService.open(UserVerificationPromptComponent, {\n      allowMultipleModals: true,\n      data: {\n        confirmDescription: \"exportWarningDesc\",\n        confirmButtonText: \"exportVault\",\n        modalTitle: \"confirmVaultExport\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return ref.onClosedPromise();\n  }\n}\n","<bit-dialog dialogSize=\"large\">\n  <span bitDialogTitle>\n    {{ \"importError\" | i18n }}\n  </span>\n  <span bitDialogContent>\n    <div>{{ \"resolveTheErrorsBelowAndTryAgain\" | i18n }}</div>\n    <bit-table>\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"name\" | i18n }}</th>\n          <th bitCell>{{ \"description\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body>\n        <tr bitRow *ngFor=\"let line of errorLines\">\n          <td bitCell class=\"tw-whitespace-nowrap\">\n            [{{ line.id }}] [{{ line.type }}] {{ line.key }}\n          </td>\n          <td bitCell>{{ line.errorMessage }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </span>\n  <ng-container bitDialogFooter>\n    <button bitButton bitDialogClose buttonType=\"primary\" type=\"button\">\n      {{ \"ok\" | i18n }}\n    </button>\n  </ng-container>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\n\nimport { SecretsManagerImportError } from \"../models/error/sm-import-error\";\nimport { SecretsManagerImportErrorLine } from \"../models/error/sm-import-error-line\";\n\nexport interface SecretsManagerImportErrorDialogOperation {\n  error: SecretsManagerImportError;\n}\n\n@Component({\n  templateUrl: \"./sm-import-error-dialog.component.html\",\n})\nexport class SecretsManagerImportErrorDialogComponent {\n  errorLines: SecretsManagerImportErrorLine[];\n\n  constructor(\n    public dialogRef: DialogRef,\n    private i18nService: I18nService,\n    @Inject(DIALOG_DATA) public data: SecretsManagerImportErrorDialogOperation\n  ) {\n    this.errorLines = data.error.lines;\n  }\n}\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { Subject, takeUntil } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { FileDownloadService } from \"@bitwarden/common/platform/abstractions/file-download/file-download.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport {\n  SecretsManagerImportErrorDialogComponent,\n  SecretsManagerImportErrorDialogOperation,\n} from \"../dialog/sm-import-error-dialog.component\";\nimport { SecretsManagerImportError } from \"../models/error/sm-import-error\";\nimport { SecretsManagerPortingApiService } from \"../services/sm-porting-api.service\";\n\n@Component({\n  selector: \"sm-import\",\n  templateUrl: \"./sm-import.component.html\",\n})\nexport class SecretsManagerImportComponent implements OnInit, OnDestroy {\n  private destroy$ = new Subject<void>();\n  protected orgId: string = null;\n  protected selectedFile: File;\n  protected formGroup = new FormGroup({\n    pastedContents: new FormControl(\"\"),\n  });\n\n  constructor(\n    private route: ActivatedRoute,\n    private i18nService: I18nService,\n    private organizationService: OrganizationService,\n    private platformUtilsService: PlatformUtilsService,\n    protected fileDownloadService: FileDownloadService,\n    private logService: LogService,\n    private secretsManagerPortingApiService: SecretsManagerPortingApiService,\n    private dialogService: DialogServiceAbstraction\n  ) {}\n\n  async ngOnInit() {\n    this.route.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\n      this.orgId = params.organizationId;\n    });\n  }\n\n  async ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  submit = async () => {\n    const fileElement = document.getElementById(\"file\") as HTMLInputElement;\n    const importContents = await this.getImportContents(\n      fileElement,\n      this.formGroup.get(\"pastedContents\").value.trim()\n    );\n\n    if (importContents == null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      return;\n    }\n\n    try {\n      const error = await this.secretsManagerPortingApiService.import(this.orgId, importContents);\n\n      if (error?.lines?.length > 0) {\n        this.openImportErrorDialog(error);\n        return;\n      } else if (error != null) {\n        this.platformUtilsService.showToast(\n          \"error\",\n          this.i18nService.t(\"errorOccurred\"),\n          this.i18nService.t(\"errorReadingImportFile\")\n        );\n        return;\n      }\n\n      this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"importSuccess\"));\n      this.clearForm();\n    } catch (error) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"errorReadingImportFile\")\n      );\n      this.logService.error(error);\n    }\n  };\n\n  protected async getImportContents(\n    fileElement: HTMLInputElement,\n    pastedContents: string\n  ): Promise<string> {\n    const files = fileElement.files;\n\n    if (\n      (files == null || files.length === 0) &&\n      (pastedContents == null || pastedContents === \"\")\n    ) {\n      return null;\n    }\n\n    let fileContents = pastedContents;\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      return null;\n    }\n\n    return fileContents;\n  }\n\n  protected setSelectedFile(event: Event) {\n    const fileInputEl = <HTMLInputElement>event.target;\n    const file = fileInputEl.files.length > 0 ? fileInputEl.files[0] : null;\n    this.selectedFile = file;\n  }\n\n  private clearForm() {\n    (document.getElementById(\"file\") as HTMLInputElement).value = \"\";\n    this.selectedFile = null;\n    this.formGroup.reset({\n      pastedContents: \"\",\n    });\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private openImportErrorDialog(error: SecretsManagerImportError) {\n    this.dialogService.open<unknown, SecretsManagerImportErrorDialogOperation>(\n      SecretsManagerImportErrorDialogComponent,\n      {\n        data: {\n          error: error,\n        },\n      }\n    );\n  }\n}\n","<sm-header></sm-header>\n\n<form [formGroup]=\"formGroup\" [bitSubmit]=\"submit\" class=\"tw-max-w-xl\">\n  <bit-form-field>\n    <bit-label>{{ \"fileUpload\" | i18n }}</bit-label>\n    <div class=\"file-selector\">\n      <button bitButton type=\"button\" buttonType=\"secondary\" (click)=\"fileSelector.click()\">\n        {{ \"chooseFile\" | i18n }}\n      </button>\n      {{ selectedFile?.name ?? (\"noFileChosen\" | i18n) }}\n    </div>\n    <input\n      #fileSelector\n      hidden\n      bitInput\n      type=\"file\"\n      id=\"file\"\n      class=\"form-control-file\"\n      name=\"file\"\n      (change)=\"setSelectedFile($event)\"\n      accept=\"application/JSON\"\n    />\n    <bit-hint>{{ \"acceptedFormats\" | i18n }} Bitwarden (json)</bit-hint>\n  </bit-form-field>\n  <div class=\"my-4\">\n    {{ \"or\" | i18n }}\n  </div>\n  <bit-form-field>\n    <bit-label for=\"pastedContents\">{{ \"copyPasteImportContents\" | i18n }}</bit-label>\n    <textarea\n      bitInput\n      id=\"pastedContents\"\n      class=\"form-control\"\n      name=\"FileContents\"\n      formControlName=\"pastedContents\"\n    ></textarea>\n    <bit-hint>{{ \"acceptedFormats\" | i18n }} Bitwarden (json)</bit-hint>\n  </bit-form-field>\n  <button bitButton bitFormButton type=\"submit\" buttonType=\"primary\">\n    {{ \"importData\" | i18n }}\n  </button>\n</form>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { OrganizationPermissionsGuard } from \"@bitwarden/web-vault/app/admin-console/organizations/guards/org-permissions.guard\";\n\nimport { SecretsManagerExportComponent } from \"./porting/sm-export.component\";\nimport { SecretsManagerImportComponent } from \"./porting/sm-import.component\";\n\nconst routes: Routes = [\n  {\n    path: \"import\",\n    component: SecretsManagerImportComponent,\n    canActivate: [OrganizationPermissionsGuard],\n    data: {\n      titleId: \"importData\",\n      organizationPermissions: (org: Organization) => org.isAdmin,\n    },\n  },\n  {\n    path: \"export\",\n    component: SecretsManagerExportComponent,\n    canActivate: [OrganizationPermissionsGuard],\n    data: {\n      titleId: \"exportData\",\n      organizationPermissions: (org: Organization) => org.isAdmin,\n    },\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SettingsRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { SecretsManagerImportErrorDialogComponent } from \"./dialog/sm-import-error-dialog.component\";\nimport { SecretsManagerExportComponent } from \"./porting/sm-export.component\";\nimport { SecretsManagerImportComponent } from \"./porting/sm-import.component\";\nimport { SecretsManagerPortingApiService } from \"./services/sm-porting-api.service\";\nimport { SecretsManagerPortingService } from \"./services/sm-porting.service\";\nimport { SettingsRoutingModule } from \"./settings-routing.module\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, SettingsRoutingModule],\n  declarations: [\n    SecretsManagerImportComponent,\n    SecretsManagerExportComponent,\n    SecretsManagerImportErrorDialogComponent,\n  ],\n  providers: [SecretsManagerPortingService, SecretsManagerPortingApiService],\n})\nexport class SettingsModule {}\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { SecretService } from \"../../secrets/secret.service\";\n\nexport interface SecretHardDeleteOperation {\n  secretIds: string[];\n  organizationId: string;\n}\n\n@Component({\n  templateUrl: \"./secret-hard-delete.component.html\",\n})\nexport class SecretHardDeleteDialogComponent {\n  constructor(\n    public dialogRef: DialogRef,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    @Inject(DIALOG_DATA) public data: SecretHardDeleteOperation\n  ) {}\n\n  get title() {\n    return this.data.secretIds.length === 1 ? \"hardDeleteSecret\" : \"hardDeleteSecrets\";\n  }\n\n  get submitButtonText() {\n    return this.data.secretIds.length === 1 ? \"deleteSecret\" : \"deleteSecrets\";\n  }\n\n  delete = async () => {\n    await this.secretService.deleteTrashed(this.data.organizationId, this.data.secretIds);\n    const message =\n      this.data.secretIds.length === 1 ? \"hardDeleteSuccessToast\" : \"hardDeletesSuccessToast\";\n    this.dialogRef.close(this.data.secretIds);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  };\n}\n","<bit-simple-dialog>\n  <span bitDialogTitle>{{ title | i18n }}</span>\n  <span bitDialogContent>\n    {{\n      data.secretIds.length === 1\n        ? (\"hardDeleteSecretConfirmation\" | i18n)\n        : (\"hardDeleteSecretsConfirmation\" | i18n)\n    }}\n  </span>\n  <ng-container bitDialogFooter>\n    <button type=\"button\" bitButton buttonType=\"primary\" [bitAction]=\"delete\">\n      {{ submitButtonText | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-simple-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject } from \"@angular/core\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { SecretService } from \"../../secrets/secret.service\";\n\nexport interface SecretRestoreOperation {\n  secretIds: string[];\n  organizationId: string;\n}\n\n@Component({\n  templateUrl: \"./secret-restore.component.html\",\n})\nexport class SecretRestoreDialogComponent {\n  constructor(\n    public dialogRef: DialogRef,\n    private secretService: SecretService,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    @Inject(DIALOG_DATA) public data: SecretRestoreOperation\n  ) {}\n\n  get title() {\n    return this.data.secretIds.length === 1 ? \"restoreSecret\" : \"restoreSecrets\";\n  }\n\n  restore = async () => {\n    let message = \"\";\n    await this.secretService.restoreTrashed(this.data.organizationId, this.data.secretIds);\n    message =\n      this.data.secretIds.length === 1\n        ? \"secretRestoredSuccessToast\"\n        : \"secretsRestoredSuccessToast\";\n    this.dialogRef.close(this.data.secretIds);\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(message));\n  };\n}\n","<bit-simple-dialog>\n  <span bitDialogTitle>{{ title | i18n }}</span>\n  <span bitDialogContent>\n    {{\n      data.secretIds.length === 1 ? (\"restoreSecretPrompt\" | i18n) : (\"restoreSecretsPrompt\" | i18n)\n    }}\n  </span>\n  <ng-container bitDialogFooter>\n    <button type=\"button\" bitButton buttonType=\"primary\" [bitAction]=\"restore\">\n      {{ title | i18n }}\n    </button>\n    <button type=\"button\" bitButton buttonType=\"secondary\" bitDialogClose>\n      {{ \"close\" | i18n }}\n    </button>\n  </ng-container>\n</bit-simple-dialog>\n","import { Component, OnInit } from \"@angular/core\";\nimport { ActivatedRoute } from \"@angular/router\";\nimport { combineLatestWith, Observable, startWith, switchMap } from \"rxjs\";\n\nimport { DialogServiceAbstraction } from \"@bitwarden/angular/services/dialog\";\n\nimport { SecretListView } from \"../models/view/secret-list.view\";\nimport { SecretService } from \"../secrets/secret.service\";\n\nimport {\n  SecretHardDeleteDialogComponent,\n  SecretHardDeleteOperation,\n} from \"./dialog/secret-hard-delete.component\";\nimport {\n  SecretRestoreDialogComponent,\n  SecretRestoreOperation,\n} from \"./dialog/secret-restore.component\";\n\n@Component({\n  selector: \"sm-trash\",\n  templateUrl: \"./trash.component.html\",\n})\nexport class TrashComponent implements OnInit {\n  secrets$: Observable<SecretListView[]>;\n\n  private organizationId: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private secretService: SecretService,\n    private dialogService: DialogServiceAbstraction\n  ) {}\n\n  ngOnInit() {\n    this.secrets$ = this.secretService.secret$.pipe(\n      startWith(null),\n      combineLatestWith(this.route.params),\n      switchMap(async ([_, params]) => {\n        this.organizationId = params.organizationId;\n        return await this.getSecrets();\n      })\n    );\n  }\n\n  private async getSecrets(): Promise<SecretListView[]> {\n    return await this.secretService.getTrashedSecrets(this.organizationId);\n  }\n\n  openDeleteSecret(secrets: SecretListView[]) {\n    const secretIds = secrets.map((secret) => secret.id);\n\n    this.dialogService.open<unknown, SecretHardDeleteOperation>(SecretHardDeleteDialogComponent, {\n      data: {\n        secretIds: secretIds,\n        organizationId: this.organizationId,\n      },\n    });\n  }\n\n  openRestoreSecret(secretIds: string[]) {\n    this.dialogService.open<unknown, SecretRestoreOperation>(SecretRestoreDialogComponent, {\n      data: {\n        secretIds: secretIds,\n        organizationId: this.organizationId,\n      },\n    });\n  }\n}\n","<sm-header>\n  <sm-new-menu></sm-new-menu>\n</sm-header>\n<bit-callout type=\"warning\" [title]=\"'warning' | i18n\">{{\n  \"trashCleanupWarning\" | i18n\n}}</bit-callout>\n<sm-secrets-list\n  (deleteSecretsEvent)=\"openDeleteSecret($event)\"\n  (restoreSecretsEvent)=\"openRestoreSecret($event)\"\n  [secrets]=\"secrets$ | async\"\n  [trash]=\"true\"\n></sm-secrets-list>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { TrashComponent } from \"./trash.component\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: TrashComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TrashRoutingModule {}\n","import { NgModule } from \"@angular/core\";\n\nimport { SecretsManagerSharedModule } from \"../shared/sm-shared.module\";\n\nimport { SecretHardDeleteDialogComponent } from \"./dialog/secret-hard-delete.component\";\nimport { SecretRestoreDialogComponent } from \"./dialog/secret-restore.component\";\nimport { TrashRoutingModule } from \"./trash-routing.module\";\nimport { TrashComponent } from \"./trash.component\";\n\n@NgModule({\n  imports: [SecretsManagerSharedModule, TrashRoutingModule],\n  declarations: [SecretHardDeleteDialogComponent, SecretRestoreDialogComponent, TrashComponent],\n  providers: [],\n})\nexport class TrashModule {}\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\n\nimport { AuthGuard } from \"@bitwarden/angular/auth/guards/auth.guard\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { OrganizationPermissionsGuard } from \"@bitwarden/web-vault/app/admin-console/organizations/guards/org-permissions.guard\";\nimport { buildFlaggedRoute } from \"@bitwarden/web-vault/app/oss-routing.module\";\n\nimport { LayoutComponent } from \"./layout/layout.component\";\nimport { NavigationComponent } from \"./layout/navigation.component\";\nimport { OverviewModule } from \"./overview/overview.module\";\nimport { ProjectsModule } from \"./projects/projects.module\";\nimport { SecretsModule } from \"./secrets/secrets.module\";\nimport { ServiceAccountsModule } from \"./service-accounts/service-accounts.module\";\nimport { SettingsModule } from \"./settings/settings.module\";\nimport { canActivateSM } from \"./sm.guard\";\nimport { TrashModule } from \"./trash/trash.module\";\n\nconst routes: Routes = [\n  buildFlaggedRoute(\"secretsManager\", {\n    path: \"\",\n    children: [\n      {\n        path: \"\",\n        canActivate: [canActivateSM],\n        pathMatch: \"full\",\n        children: [],\n      },\n      {\n        path: \":organizationId\",\n        component: LayoutComponent,\n        canActivate: [AuthGuard, OrganizationPermissionsGuard],\n        data: {\n          organizationPermissions: (org: Organization) => org.canAccessSecretsManager,\n        },\n        children: [\n          {\n            path: \"\",\n            component: NavigationComponent,\n            outlet: \"sidebar\",\n          },\n          {\n            path: \"secrets\",\n            loadChildren: () => SecretsModule,\n            data: {\n              titleId: \"secrets\",\n            },\n          },\n          {\n            path: \"projects\",\n            loadChildren: () => ProjectsModule,\n            data: {\n              titleId: \"projects\",\n            },\n          },\n          {\n            path: \"service-accounts\",\n            loadChildren: () => ServiceAccountsModule,\n            data: {\n              titleId: \"serviceAccounts\",\n            },\n          },\n          {\n            path: \"trash\",\n            loadChildren: () => TrashModule,\n            data: {\n              titleId: \"trash\",\n            },\n          },\n          {\n            path: \"settings\",\n            loadChildren: () => SettingsModule,\n          },\n          {\n            path: \"\",\n            loadChildren: () => OverviewModule,\n            pathMatch: \"full\",\n          },\n        ],\n      },\n    ],\n  }),\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SecretsManagerRoutingModule {}\n","import { inject } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  CanActivateFn,\n  createUrlTreeFromSnapshot,\n  RouterStateSnapshot,\n} from \"@angular/router\";\n\nimport { AuthGuard } from \"@bitwarden/angular/auth/guards/auth.guard\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\n\n/**\n * Redirects from root `/sm` to first organization with access to SM\n */\nexport const canActivateSM: CanActivateFn = async (\n  route: ActivatedRouteSnapshot,\n  state: RouterStateSnapshot\n) => {\n  const syncService = inject(SyncService);\n  const authService = inject(AuthService);\n  const orgService = inject(OrganizationService);\n  const authGuard = inject(AuthGuard);\n\n  /** Workaround to avoid service initialization race condition. */\n  if ((await syncService.getLastSync()) == null) {\n    await syncService.fullSync(false);\n  }\n\n  if ((await authService.getAuthStatus()) !== AuthenticationStatus.Unlocked) {\n    return authGuard.canActivate(route, state);\n  }\n\n  const orgs = await orgService.getAll();\n  const smOrg = orgs.find((o) => o.canAccessSecretsManager);\n  if (smOrg) {\n    return createUrlTreeFromSnapshot(route, [\"/sm\", smOrg.id]);\n  }\n  return createUrlTreeFromSnapshot(route, [\"/vault\"]);\n};\n","import { NgModule } from \"@angular/core\";\n\nimport { SharedModule } from \"@bitwarden/web-vault/app/shared\";\n\nimport { LayoutModule } from \"./layout/layout.module\";\nimport { SecretsManagerSharedModule } from \"./shared/sm-shared.module\";\nimport { SecretsManagerRoutingModule } from \"./sm-routing.module\";\n\n@NgModule({\n  imports: [SharedModule, SecretsManagerSharedModule, SecretsManagerRoutingModule, LayoutModule],\n})\nexport class SecretsManagerModule {}\n","<ng-select\n  [items]=\"baseItems\"\n  [(ngModel)]=\"selectedItems\"\n  (ngModelChange)=\"onChange($event)\"\n  (blur)=\"onBlur()\"\n  bindLabel=\"listName\"\n  groupBy=\"parentGrouping\"\n  [placeholder]=\"placeholder\"\n  [loading]=\"loading\"\n  [loadingText]=\"loadingText\"\n  notFoundText=\"{{ 'multiSelectNotFound' | i18n }}\"\n  clearAllText=\"{{ 'multiSelectClearAll' | i18n }}\"\n  [multiple]=\"true\"\n  [selectOnTab]=\"true\"\n  [closeOnSelect]=\"false\"\n  (close)=\"onDropdownClosed()\"\n  [disabled]=\"disabled\"\n  [clearSearchOnAdd]=\"true\"\n  [labelForId]=\"labelForId\"\n  [keyDownFn]=\"keyDown\"\n  appendTo=\"body\"\n>\n  <ng-template ng-loadingspinner-tmp>\n    <i class=\"bwi bwi-spinner bwi-spin tw-mr-1\" [title]=\"loadingText\" aria-hidden=\"true\"></i>\n  </ng-template>\n  <ng-template ng-label-tmp let-item=\"item\" let-clear=\"clear\">\n    <button\n      type=\"button\"\n      bitBadge\n      badgeType=\"primary\"\n      class=\"tw-mr-1 disabled:tw-border-0\"\n      [disabled]=\"disabled\"\n      (click)=\"clear(item)\"\n    >\n      <i\n        *ngIf=\"item.icon != null\"\n        class=\"tw-mr-1 bwi bwi-fw {{ item.icon }}\"\n        aria-hidden=\"true\"\n      ></i>\n      {{ item.labelName }}\n      <i class=\"bwi bwi-fw bwi-close bwi-sm tw-ml-1\" aria-hidden=\"true\"></i>\n    </button>\n  </ng-template>\n  <ng-template ng-option-tmp let-item=\"item\">\n    <div class=\"tw-flex\">\n      <div class=\"tw-w-7 tw-flex-none\">\n        <i *ngIf=\"isSelected(item)\" class=\"bwi bwi-fw bwi-check\" aria-hidden=\"true\"></i>\n      </div>\n      <div class=\"tw-mr-2 tw-flex-initial\">\n        <i *ngIf=\"item.icon != null\" class=\"bwi bwi-fw {{ item.icon }}\" aria-hidden=\"true\"></i>\n      </div>\n      <div class=\"tw-flex-1\">\n        {{ item.listName }}\n      </div>\n    </div>\n  </ng-template>\n</ng-select>\n","import { hasModifierKey } from \"@angular/cdk/keycodes\";\nimport {\n  Component,\n  Input,\n  OnInit,\n  Output,\n  ViewChild,\n  EventEmitter,\n  HostBinding,\n  Optional,\n  Self,\n} from \"@angular/core\";\nimport { ControlValueAccessor, NgControl, Validators } from \"@angular/forms\";\nimport { NgSelectComponent } from \"@ng-select/ng-select\";\n\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\n\nimport { BitFormFieldControl } from \"../form-field/form-field-control\";\n\nimport { SelectItemView } from \"./models/select-item-view\";\n\n// Increments for each instance of this component\nlet nextId = 0;\n\n@Component({\n  selector: \"bit-multi-select\",\n  templateUrl: \"./multi-select.component.html\",\n  providers: [{ provide: BitFormFieldControl, useExisting: MultiSelectComponent }],\n})\n/**\n * This component has been implemented to only support Multi-select list events\n */\nexport class MultiSelectComponent implements OnInit, BitFormFieldControl, ControlValueAccessor {\n  @ViewChild(NgSelectComponent) select: NgSelectComponent;\n\n  // Parent component should only pass selectable items (complete list - selected items = baseItems)\n  @Input() baseItems: SelectItemView[];\n  // Defaults to native ng-select behavior - set to \"true\" to clear selected items on dropdown close\n  @Input() removeSelectedItems = false;\n  @Input() placeholder: string;\n  @Input() loading = false;\n  @Input() disabled = false;\n\n  // Internal tracking of selected items\n  @Input() selectedItems: SelectItemView[];\n\n  // Default values for our implementation\n  loadingText: string;\n\n  protected searchInputId = `search-input-${nextId++}`;\n\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  private notifyOnChange?: (value: SelectItemView[]) => void;\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  private notifyOnTouched?: () => void;\n\n  @Output() onItemsConfirmed = new EventEmitter<any[]>();\n\n  constructor(private i18nService: I18nService, @Optional() @Self() private ngControl?: NgControl) {\n    if (ngControl != null) {\n      ngControl.valueAccessor = this;\n    }\n  }\n\n  ngOnInit(): void {\n    // Default Text Values\n    this.placeholder = this.placeholder ?? this.i18nService.t(\"multiSelectPlaceholder\");\n    this.loadingText = this.i18nService.t(\"multiSelectLoading\");\n  }\n\n  /** Function for customizing keyboard navigation */\n  /** Needs to be arrow function to retain `this` scope. */\n  keyDown = (event: KeyboardEvent) => {\n    if (!this.select.isOpen && event.key === \"Enter\" && !hasModifierKey(event)) {\n      return false;\n    }\n\n    if (this.select.isOpen && event.key === \"Enter\" && !hasModifierKey(event)) {\n      this.select.close();\n      event.preventDefault();\n      return false;\n    }\n\n    if (this.select.isOpen && event.key === \"Escape\" && !hasModifierKey(event)) {\n      this.selectedItems = [];\n      this.select.close();\n      event.stopPropagation();\n      return false;\n    }\n\n    return true;\n  };\n\n  /** Helper method for showing selected state in custom template */\n  isSelected(item: any): boolean {\n    return this.selectedItems?.find((selected) => selected.id === item.id) != undefined;\n  }\n\n  /**\n   * The `close` callback will act as the only trigger for signifying the user's intent of completing the selection\n   * of items. Selected items will be emitted to the parent component in order to allow for separate data handling.\n   */\n  onDropdownClosed(): void {\n    // Early exit\n    if (this.selectedItems == null || this.selectedItems.length == 0) {\n      return;\n    }\n\n    // Emit results to parent component\n    this.onItemsConfirmed.emit(this.selectedItems);\n\n    // Remove selected items from base list based on input property\n    if (this.removeSelectedItems) {\n      let updatedBaseItems = this.baseItems;\n      this.selectedItems.forEach((selectedItem) => {\n        updatedBaseItems = updatedBaseItems.filter((item) => selectedItem.id !== item.id);\n      });\n\n      // Reset Lists\n      this.selectedItems = null;\n      this.baseItems = updatedBaseItems;\n    }\n  }\n\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  writeValue(obj: SelectItemView[]): void {\n    this.selectedItems = obj;\n  }\n\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  registerOnChange(fn: (value: SelectItemView[]) => void): void {\n    this.notifyOnChange = fn;\n  }\n\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  registerOnTouched(fn: any): void {\n    this.notifyOnTouched = fn;\n  }\n\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  protected onChange(items: SelectItemView[]) {\n    if (!this.notifyOnChange) {\n      return;\n    }\n\n    this.notifyOnChange(items);\n  }\n\n  /**Implemented as part of NG_VALUE_ACCESSOR */\n  protected onBlur() {\n    if (!this.notifyOnTouched) {\n      return;\n    }\n\n    this.notifyOnTouched();\n  }\n\n  /**Implemented as part of BitFormFieldControl */\n  @HostBinding(\"attr.aria-describedby\")\n  get ariaDescribedBy() {\n    return this._ariaDescribedBy;\n  }\n  set ariaDescribedBy(value: string) {\n    this._ariaDescribedBy = value;\n    this.select?.searchInput.nativeElement.setAttribute(\"aria-describedby\", value);\n  }\n  private _ariaDescribedBy: string;\n\n  /**Implemented as part of BitFormFieldControl */\n  get labelForId() {\n    return this.searchInputId;\n  }\n\n  /**Implemented as part of BitFormFieldControl */\n  @HostBinding() @Input() id = `bit-multi-select-${nextId++}`;\n\n  /**Implemented as part of BitFormFieldControl */\n  @HostBinding(\"attr.required\")\n  @Input()\n  get required() {\n    return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n  }\n  set required(value: any) {\n    this._required = value != null && value !== false;\n  }\n  private _required: boolean;\n\n  /**Implemented as part of BitFormFieldControl */\n  get hasError() {\n    return this.ngControl?.status === \"INVALID\" && this.ngControl?.touched;\n  }\n\n  /**Implemented as part of BitFormFieldControl */\n  get error(): [string, any] {\n    const key = Object.keys(this.ngControl?.errors)[0];\n    return [key, this.ngControl?.errors[key]];\n  }\n}\n","import { Component, Input } from \"@angular/core\";\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\nlet nextId = 0;\n\n@Component({\n  selector: \"bit-search\",\n  templateUrl: \"./search.component.html\",\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      multi: true,\n      useExisting: SearchComponent,\n    },\n  ],\n})\nexport class SearchComponent implements ControlValueAccessor {\n  private notifyOnChange: (v: string) => void;\n  private notifyOnTouch: () => void;\n\n  protected id = `search-id-${nextId++}`;\n  protected searchText: string;\n\n  @Input() disabled: boolean;\n  @Input() placeholder: string;\n\n  onChange(searchText: string) {\n    if (this.notifyOnChange != undefined) {\n      this.notifyOnChange(searchText);\n    }\n  }\n\n  onTouch() {\n    if (this.notifyOnTouch != undefined) {\n      this.notifyOnTouch();\n    }\n  }\n\n  registerOnChange(fn: (v: string) => void): void {\n    this.notifyOnChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.notifyOnTouch = fn;\n  }\n\n  writeValue(searchText: string): void {\n    this.searchText = searchText;\n  }\n\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","<label class=\"tw-sr-only\" [for]=\"id\">{{ \"search\" | i18n }}</label>\n<div class=\"tw-relative tw-flex tw-items-center\">\n  <label\n    [for]=\"id\"\n    aria-hidden=\"true\"\n    class=\"tw-absolute tw-left-2 tw-z-20 !tw-mb-0 tw-cursor-text\"\n  >\n    <i class=\"bwi bwi-search bwi-fw tw-text-muted\"></i>\n  </label>\n  <input\n    bitInput\n    type=\"search\"\n    [id]=\"id\"\n    [placeholder]=\"placeholder ?? ('search' | i18n)\"\n    class=\"tw-rounded-l tw-pl-9\"\n    [ngModel]=\"searchText\"\n    (ngModelChange)=\"onChange($event)\"\n    (blur)=\"onTouch()\"\n    [disabled]=\"disabled\"\n  />\n</div>\n","import { NgModule } from \"@angular/core\";\nimport { FormsModule } from \"@angular/forms\";\n\nimport { InputModule } from \"../input/input.module\";\nimport { SharedModule } from \"../shared\";\n\nimport { SearchComponent } from \"./search.component\";\n\n@NgModule({\n  imports: [SharedModule, InputModule, FormsModule],\n  declarations: [SearchComponent],\n  exports: [SearchComponent],\n})\nexport class SearchModule {}\n"],"names":["NavigationModule","LayoutModule","SecretsManagerSharedModule","D","LayoutComponent","ngOnInit","document","body","classList","remove","SecretsManagerLogo","NavBaseComponent","variant","treeDepth","hideActiveStyles","mainContentClicked","setActive","NavItemComponent","_active","rlaOptions","paths","queryParams","fragment","matrixParams","focusVisibleWithin$","BehaviorSubject","fvwStyles$","this","pipe","map","value","isActive","showActiveStyles","exactMatch","val","onFocusIn","target","next","matches","onFocusOut","toggle","NavGroupComponent","contentId","Math","random","toString","substring","open","openChange","event","stopPropagation","emit","initNestedStyles","nestedGroups","nestedItems","forEach","navGroupOrItem","ngAfterContentInit","NavDividerComponent","OrgSwitcherComponent","constructor","route","organizationService","organizations$","orgs","filter","sort","a","b","name","localeCompare","activeOrganization$","combineLatest","paramMap","params","find","org","id","get","hideNewButton","NavigationComponent","logo","orgFilter","canAccessSecretsManager","isAdmin$","organizationId","isAdmin","ProgressModule","OnboardingModule","BulkOperationStatus","BulkStatusDialogComponent","dialogRef","data","title","subTitle","columnTitle","message","details","length","close","Error","ProjectListView","ProjectView","ProjectRequest","ProjectListItemResponse","response","super","getResponseProperty","creationDate","revisionDate","read","write","ProjectResponse","ProjectService","cryptoService","apiService","encryptService","_project","Subject","project$","asObservable","getByProjectId","projectId","r","send","projectResponse","createProjectView","getProjects","results","L","createProjectsListView","create","projectView","request","getProjectRequest","project","update","delete","projects","projectIds","element","bulkOperationStatus","errorMessage","error","getOrganizationKey","getOrgKey","orgKey","encrypt","decryptToUtf8","Promise","all","s","projectListView","ProjectDeleteDialogComponent","projectService","i18nService","platformUtilsService","dialogService","formGroup","confirmDelete","matchConfirmationMessageValidator","submit","markAllAsTouched","invalid","dialogContent","t","dialogConfirmationLabel","dialogConfirmationMessage","bulkResponses","openBulkStatusDialog","showToast","bulkStatusResults","control","toLowerCase","confirmationDoesntMatchError","trimValidator","trim","setValue","OperationType","ProjectDialogComponent","router","validators","required","updateOn","loading","getProjectView","operation","Add","newProject","createProject","navigate","updateProject","Edit","loadData","SecretListView","SecretProjectView","SecretView","SecretRequest","SecretProjectResponse","SecretListItemResponse","k","SecretWithProjectsListResponse","secrets","dr","SecretResponse","note","SecretService","_secret","secret$","getBySecretId","secretId","secretResponse","createSecretView","getSecrets","createSecretsListView","getSecretsByProject","secretView","getSecretRequest","secretIds","secret","getTrashedSecrets","deleteTrashed","restoreTrashed","key","encryptedString","e","push","decryptProjectsMappedToSecrets","projectsMappedToSecretsView","secretListView","p","includes","projectsMappedToSecretView","SecretDeleteDialogComponent","secretService","showSoftDeleteSecretWarning","submitButtonText","openDeleteSecretDialog","SecretDialogComponent","notes","newProjectName","destroy$","addNewProject","newProjectGuid","newGuid","getSecretView","getNewProjectView","createSecret","updateSecret","loadProjects","addNewProjectOptionToProjectsDropDown","removeValidators","updateValueAndValidity","disable","enable","filterByPermission","then","ngOnDestroy","complete","valueChanges","takeUntil","subscribe","dropDownSelected","unshift","addValidators","clearValidators","showSpinner","deleteButtonIsVisible","getSecretListView","lastValueFrom","closed","closeData","undefined","secretListViews","emptyProjects","ServiceAccountView","ServiceAccountRequest","ServiceAccountResponse","ServiceAccountService","_serviceAccount","serviceAccount$","getServiceAccounts","createServiceAccountViews","getByServiceAccountId","serviceAccountId","createServiceAccountView","serviceAccountView","getServiceAccountRequest","serviceAccounts","ids","serviceAccount","sa","organizationKey","serviceAccountResponse","serviceAccountResponses","ServiceAccountDialogComponent","serviceAccountService","getServiceAccountView","serviceAccountMessage","patchValue","SortableComponent","default","_default","table","ariaSort","direction","dataSource","column","bitSortable","fn","icon","newSecretEvent","editSecretEvent","copySecretNameEvent","copySecretValueEvent","restoreSecretsEvent","deleteSecretsEvent","$event","selection","toggleAll","bulkRestoreSecrets","SecretsListComponent","_secrets","clear","search","onSecretCheckedEvent","sortProjects","aProjects","bProjects","changed","_","selected","isAllSelected","select","bulkDeleteSecrets","isSelected","static","copyToClipboard","copyToClipboardAsync","text","isSafari","navigator","clipboard","ClipboardItem","lock","logout","HeaderComponent","stateService","messagingService","routeData$","titleId","account$","activeAccount$","accounts$","activeAccount","accounts","profile","NewMenuComponent","openSecretDialog","openProjectDialog","openServiceAccountDialog","newProjectEvent","editProjectEvent","deleteProject","ProjectsListComponent","_projects","deleteProjectEvent","hasWriteAccessOnSelected$","selectedHasWriteAccess","bulkDeleteProjects","some","OnboardingTaskComponent","completed","handleClick","ev","SizeClasses","small","large","BackgroundClasses","danger","primary","success","warning","ProgressComponent","barWidth","bgColor","showText","size","displayText","outerBarStyles","concat","innerBarStyles","textContent","OnboardingComponent","dismiss","visible","amountCompleted","tasks","task","SectionComponent","openNewProjectDialog","hideOnboarding","openEditProject","openDeleteProjectDialog","openDeleteSecret","openNewSecretDialog","openEditSecret","copySecretName","copySecretValue","OverviewComponent","tableSize","showOnboarding","orgId$","distinctUntilChanged","orgId","organizationName","userIsAdmin","projects$","startWith","switchMap","share","secrets$","serviceAccounts$","view$","latestProjects","getRecentItems","latestSecrets","allProjects","allSecrets","saveCompletedTasks","importSecrets","createServiceAccount","take","view","Object","values","items","Date","getTime","slice","orgTasks","prevTasks","getSMOnboardingTasks","newlyCompletedOrgTasks","fromEntries","entries","_k","v","nextOrgTasks","setSMOnboardingTasks","routes","path","component","OverviewRoutingModule","forChild","OverviewModule","BaseAccessPolicyView","UserProjectAccessPolicyView","UserServiceAccountAccessPolicyView","GroupProjectAccessPolicyView","GroupServiceAccountAccessPolicyView","ServiceAccountProjectAccessPolicyView","ProjectAccessPoliciesView","ServiceAccountAccessPoliciesView","PotentialGranteeView","AccessPoliciesCreateRequest","BaseAccessPolicyResponse","UserProjectAccessPolicyResponse","organizationUserId","organizationUserName","grantedProjectId","userId","UserServiceAccountAccessPolicyResponse","grantedServiceAccountId","GroupProjectAccessPolicyResponse","groupId","groupName","currentUserInGroup","GroupServiceAccountAccessPolicyResponse","ServiceAccountProjectAccessPolicyResponse","serviceAccountName","grantedProjectName","ProjectAccessPoliciesResponse","userAccessPolicies","groupAccessPolicies","serviceAccountAccessPolicies","ServiceAccountAccessPoliciesResponse","AccessPolicyUpdateRequest","AccessPolicyRequest","GrantedPolicyRequest","PotentialGranteeResponse","type","email","AccessPolicyService","_projectAccessPolicyChanges$","_serviceAccountAccessPolicyChanges$","_serviceAccountGrantedPolicyChanges$","projectAccessPolicyChanges$","serviceAccountAccessPolicyChanges$","serviceAccountGrantedPolicyChanges$","refreshProjectAccessPolicyChanges","refreshServiceAccountAccessPolicyChanges","getGrantedPolicies","createServiceAccountProjectAccessPolicyViews","createGrantedPolicies","policies","getGrantedPoliciesCreateRequest","views","getProjectAccessPolicies","createProjectAccessPoliciesView","getServiceAccountAccessPolicies","createServiceAccountAccessPoliciesView","createProjectAccessPolicies","projectAccessPoliciesView","getAccessPoliciesCreateRequest","createServiceAccountAccessPolicies","serviceAccountAccessPoliciesView","getServiceAccountAccessPoliciesCreateRequest","deleteAccessPolicy","accessPolicyId","updateAccessPolicy","baseAccessPolicyView","payload","needToShowAccessRemovalWarning","policy","currentPolicies","organization","isOwner","currentUserId","readWriteGroupPolicies","x","readWriteUserPolicies","projectAccessPoliciesResponse","ap","createUserProjectAccessPolicyView","createGroupProjectAccessPolicyView","createServiceAccountProjectAccessPolicyView","createRequest","userAccessPolicyRequests","getAccessPolicyRequest","groupAccessPolicyRequests","serviceAccountAccessPolicyRequests","createBaseAccessPolicyView","serviceAccountAccessPoliciesResponse","createUserServiceAccountAccessPolicyView","createGroupServiceAccountAccessPolicyView","getPeoplePotentialGrantees","createPotentialGranteeViews","getServiceAccountsPotentialGrantees","getProjectsPotentialGrantees","granteeId","grantedId","responses","AccessSelectorComponent","rows","rows$","accessPolicyService","onCreateAccessPolicies","onDeleteAccessPolicy","onUpdateAccessPolicy","maxLength","multiSelect","selectItems$","getPotentialGrantees","grantees","g","row","granteeView","listName","labelName","userIcon","isNullOrWhitespace","groupIcon","serviceAccountIcon","projectIcon","selectItems","tap","reset","firstValueFrom","granteeType","item","AccessRemovalDialogComponent","removeAccess","returnRoute","getBaseAccessPolicyView","refreshPolicyChanges","cancel","ProjectPeopleComponent","handleCreateAccessPolicies","getAccessItemType","filtered","handleDeleteAccessPolicy","launchDeleteWarningDialog","validationService","showError","handleUpdateAccessPolicy","launchUpdateWarningDialog","ProjectSecretsComponent","currentProjectEdited","combineLatestWith","ProjectServiceAccountsComponent","openEditDialog","ProjectComponent","catchError","E","BulkConfirmationResult","BulkConfirmationDialogComponent","bulkConfirmationResult","ProjectsComponent","readOnlyProjects","writeProjects","getBulkConfirmationDetails","Continue","description","children","pathMatch","redirectTo","ProjectsRoutingModule","ProjectsModule","SecretsComponent","snapshot","SecretsRoutingModule","SecretsModule","AccessTokenRequest","RevokeAccessTokensRequest","AccessTokenCreationResponse","clientSecret","expireAt","AccessTokenResponse","scopes","AccessTokenView","AccessService","cryptoFunctionService","_accessTokenVersion","_accessToken","accessToken$","getAccessTokens","createAccessTokenViews","createAccessToken","accessTokenView","keyMaterial","randomBytes","hkdf","encryptionKey","createAccessTokenRequest","result","b64Key","fromBufferToB64","revokeAccessTokens","accessTokenIds","accessTokenRequest","encryptedPayload","JSON","stringify","keyB64","accessTokenResponses","AccessTokenDialogComponent","disableClose","accessToken","copyAccessToken","ExpirationOptionsComponent","touched","form","datePipe","currentDate","expires","expireDateTime","_onChange","_value","onTouched","getExpiresDate","registerOnChange","registerOnTouched","validate","writeValue","transform","setDisabledState","isDisabled","setDate","getDate","Number","provide","multi","useExisting","AccessTokenCreateDialogComponent","accessService","expirationDateControl","expirationDayOptions","openAccessTokenDialog","expirationDate","newAccessTokenEvent","revokeAccessTokensEvent","AccessListComponent","tokens","_tokens","revokeSelected","permission","token","AccessTokenComponent","modalService","accessTokens$","revoke","verifyUser","openNewAccessTokenDialog","ref","allowMultipleModals","confirmDescription","confirmButtonText","modalTitle","onClosedPromise","ServiceAccountPeopleComponent","simpleDialogOpts","content","WARNING","acceptButtonText","cancelButtonText","openSimpleDialogRef","ServiceAccountProjectsComponent","serviceAccountProjectAccessPolicyView","ServiceAccountComponent","onChange$","ServiceAccountDeleteDialogComponent","errors","newServiceAccountEvent","editServiceAccountEvent","ServiceAccountsListComponent","_serviceAccounts","deleteServiceAccountsEvent","onServiceAccountCheckedEvent","bulkDeleteServiceAccounts","ServiceAccountsComponent","openNewServiceAccountDialog","openEditServiceAccountDialog","openDeleteDialog","ServiceAccountsRoutingModule","ServiceAccountsModule","SecretsManagerImportError","SecretsManagerImportRequest","SecretsManagerImportedProjectRequest","SecretsManagerImportedSecretRequest","SecretsManagerExportedProjectResponse","SecretsManagerExportedSecretResponse","SecretsManagerExportResponse","SecretsManagerExport","SecretsManagerExportProject","SecretsManagerExportSecret","SecretsManagerPortingApiService","export","decryptExport","import","fileContents","requestObject","parse","requestBody","encryptImport","errorResponse","handleServerError","importData","encryptedImport","exportData","decryptedExport","importResult","validationErrors","lines","index","itemType","match","SecretsManagerPortingService","getFileName","prefix","extension","locale","locale$","dateString","SecretsManagerExportComponent","smPortingService","fileDownloadService","logService","secretsManagerApiService","exportFormats","fileExtension","format","doExport","orgName","downloadFile","fileName","download","blobData","blobOptions","SecretsManagerImportErrorDialogComponent","errorLines","SecretsManagerImportComponent","secretsManagerPortingApiService","pastedContents","fileElement","getElementById","importContents","getImportContents","openImportErrorDialog","clearForm","files","getFileContents","setSelectedFile","fileInputEl","file","selectedFile","resolve","reject","reader","FileReader","readAsText","onload","evt","onerror","canActivate","organizationPermissions","SettingsRoutingModule","SettingsModule","SecretHardDeleteDialogComponent","SecretRestoreDialogComponent","restore","TrashComponent","openRestoreSecret","TrashRoutingModule","TrashModule","state","syncService","authService","orgService","authGuard","getLastSync","fullSync","getAuthStatus","Unlocked","smOrg","getAll","o","outlet","loadChildren","SecretsManagerRoutingModule","SecretsManagerModule","nextId","MultiSelectComponent","ngControl","removeSelectedItems","disabled","searchInputId","onItemsConfirmed","keyDown","isOpen","preventDefault","selectedItems","valueAccessor","placeholder","loadingText","onDropdownClosed","updatedBaseItems","baseItems","selectedItem","obj","notifyOnChange","notifyOnTouched","onChange","onBlur","ariaDescribedBy","_ariaDescribedBy","searchInput","nativeElement","setAttribute","labelForId","_required","hasValidator","hasError","status","keys","SearchComponent","searchText","onTouch","notifyOnTouch","SearchModule"],"sourceRoot":""}