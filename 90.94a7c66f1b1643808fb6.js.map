{"version":3,"file":"90.94a7c66f1b1643808fb6.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/../../libs/angular/src/auth/components/user-verification-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/components/user-verification-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/components/user-verification-prompt.component.html","webpack://@bitwarden/web-vault/../../libs/angular/src/components/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/import-success-dialog.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/import-success-dialog.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/file-password-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/dialog/file-password-prompt.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/components/export-scope-callout.component.html","webpack://@bitwarden/web-vault/../../libs/angular/src/components/export-scope-callout.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/directives/box-row.directive.ts","webpack://@bitwarden/web-vault/../../libs/components/src/table/table-data-source.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import-api.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import-api.service.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import.service.abstraction.ts","webpack://@bitwarden/web-vault/../../libs/common/src/admin-console/models/request/collection-with-id.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-organization-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/kvp.request.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-result.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/base-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/ascendo-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avast/avast-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avast/avast-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/avira-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/blackberry-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/chrome-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/bitwarden/bitwarden-password-protected-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/blur-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/buttercup-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/clipperz-html-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/codebook-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/dashlane/dashlane-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/dashlane/dashlane-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/encryptr-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/enpass/enpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/enpass/enpass-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/firefox-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/fsecure/fsecure-fsk-types.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/fsecure/fsecure-fsk-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/gnome-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/kaspersky-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keepass2-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keepassx-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/keeper/keeper-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/lastpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/logmeonce-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/meldium-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/msecure-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/myki-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/nordpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/types/onepassword-1pux-importer-types.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-1pif-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-1pux-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/cipher-import-context.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-mac-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/onepassword/onepassword-win-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/padlock-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passkeep-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passky/passky-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passman-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passpack-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordagent-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordboss-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passworddragon-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordsafe-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/passwordwallet-txt-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/psono/psono-json-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/remembear-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/roboform-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/safari-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/safeincloud-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/saferpass-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/securesafe-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/splashid-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/stickypassword-xml-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/truekey-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/upm-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/yoti-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/importers/zohovault-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/models/import-options.ts","webpack://@bitwarden/web-vault/../../libs/importer/src/services/import.service.ts"],"sourcesContent":["import { Directive } from \"@angular/core\";\nimport { FormBuilder, FormControl } from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\n\nimport { ModalRef } from \"../../components/modal/modal.ref\";\nimport { ModalConfig } from \"../../services/modal.service\";\n\n/**\n * Used to verify the user's identity (using their master password or email-based OTP for Key Connector users). You can customize all of the text in the modal.\n */\n@Directive()\nexport class UserVerificationPromptComponent {\n  confirmDescription = this.config.data.confirmDescription;\n  confirmButtonText = this.config.data.confirmButtonText;\n  modalTitle = this.config.data.modalTitle;\n  secret = new FormControl();\n\n  constructor(\n    private modalRef: ModalRef,\n    protected config: ModalConfig,\n    protected userVerificationService: UserVerificationService,\n    private formBuilder: FormBuilder,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  async submit() {\n    try {\n      //Incorrect secret will throw an invalid password error.\n      await this.userVerificationService.verifyUser(this.secret.value);\n    } catch (e) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"error\"),\n        this.i18nService.t(\"invalidMasterPassword\")\n      );\n      return;\n    }\n\n    this.modalRef.close(true);\n  }\n}\n","import { Component } from \"@angular/core\";\n\nimport { UserVerificationPromptComponent as BaseUserVerificationPrompt } from \"@bitwarden/angular/auth/components/user-verification-prompt.component\";\n\n@Component({\n  templateUrl: \"user-verification-prompt.component.html\",\n})\nexport class UserVerificationPromptComponent extends BaseUserVerificationPrompt {}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable @angular-eslint/template/button-has-type -->\n<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"confirmUserTitle\">\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form class=\"modal-content\" #form (ngSubmit)=\"submit()\">\n      <h2 class=\"tw-my-6 tw-px-3.5 tw-font-semibold\" id=\"modalTitle | i18n \">\n        {{ modalTitle | i18n | uppercase }}\n      </h2>\n      <div class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-p-3.5\">\n        {{ confirmDescription | i18n }}\n      </div>\n      <div class=\"tw-p-3.5\">\n        <app-user-verification ngDefaultControl [formControl]=\"secret\" name=\"secret\">\n        </app-user-verification>\n      </div>\n      <div\n        class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-p-3.5\"\n      >\n        <button bitButton buttonType=\"primary\" type=\"submit\" appBlurClick>\n          <span>{{ confirmButtonText | i18n }}</span>\n        </button>\n        <button bitButton buttonType=\"secondary\" data-dismiss=\"modal\">\n          {{ \"cancel\" | i18n }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","import { Directive, EventEmitter, OnDestroy, OnInit, Output } from \"@angular/core\";\nimport { UntypedFormBuilder, Validators } from \"@angular/forms\";\nimport { merge, takeUntil, Subject, startWith } from \"rxjs\";\n\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { ExportService } from \"@bitwarden/common/abstractions/export.service\";\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { EncryptedExportType, EventType } from \"@bitwarden/common/enums\";\n\n@Directive()\nexport class ExportComponent implements OnInit, OnDestroy {\n  @Output() onSaved = new EventEmitter();\n\n  formPromise: Promise<string>;\n  disabledByPolicy = false;\n\n  exportForm = this.formBuilder.group({\n    format: [\"json\"],\n    secret: [\"\"],\n    filePassword: [\"\", Validators.required],\n    confirmFilePassword: [\"\", Validators.required],\n    fileEncryptionType: [EncryptedExportType.AccountEncrypted],\n  });\n\n  formatOptions = [\n    { name: \".json\", value: \"json\" },\n    { name: \".csv\", value: \"csv\" },\n    { name: \".json (Encrypted)\", value: \"encrypted_json\" },\n  ];\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected exportService: ExportService,\n    protected eventCollectionService: EventCollectionService,\n    private policyService: PolicyService,\n    protected win: Window,\n    private logService: LogService,\n    private userVerificationService: UserVerificationService,\n    private formBuilder: UntypedFormBuilder,\n    protected fileDownloadService: FileDownloadService\n  ) {}\n\n  async ngOnInit() {\n    this.policyService\n      .policyAppliesToActiveUser$(PolicyType.DisablePersonalVaultExport)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((policyAppliesToActiveUser) => {\n        this.disabledByPolicy = policyAppliesToActiveUser;\n      });\n\n    await this.checkExportDisabled();\n\n    merge(\n      this.exportForm.get(\"format\").valueChanges,\n      this.exportForm.get(\"fileEncryptionType\").valueChanges\n    )\n      .pipe(takeUntil(this.destroy$))\n      .pipe(startWith(0))\n      .subscribe(() => this.adjustValidators());\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n  }\n\n  async checkExportDisabled() {\n    if (this.disabledByPolicy) {\n      this.exportForm.disable();\n    }\n  }\n\n  get encryptedFormat() {\n    return this.format === \"encrypted_json\";\n  }\n\n  protected async doExport() {\n    try {\n      this.formPromise = this.getExportData();\n      const data = await this.formPromise;\n      this.downloadFile(data);\n      this.saved();\n      await this.collectEvent();\n      this.exportForm.get(\"secret\").setValue(\"\");\n      this.exportForm.clearValidators();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async submit() {\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const acceptedWarning = await this.warningDialog();\n    if (!acceptedWarning) {\n      return;\n    }\n    const secret = this.exportForm.get(\"secret\").value;\n\n    try {\n      await this.userVerificationService.verifyUser(secret);\n    } catch (e) {\n      this.platformUtilsService.showToast(\"error\", this.i18nService.t(\"errorOccurred\"), e.message);\n      return;\n    }\n\n    this.doExport();\n  }\n\n  async warningDialog() {\n    if (this.encryptedFormat) {\n      return await this.platformUtilsService.showDialog(\n        \"<p>\" +\n          this.i18nService.t(\"encExportKeyWarningDesc\") +\n          \"<p>\" +\n          this.i18nService.t(\"encExportAccountWarningDesc\"),\n        this.i18nService.t(\"confirmVaultExport\"),\n        this.i18nService.t(\"exportVault\"),\n        this.i18nService.t(\"cancel\"),\n        \"warning\",\n        true\n      );\n    } else {\n      return await this.platformUtilsService.showDialog(\n        this.i18nService.t(\"exportWarningDesc\"),\n        this.i18nService.t(\"confirmVaultExport\"),\n        this.i18nService.t(\"exportVault\"),\n        this.i18nService.t(\"cancel\"),\n        \"warning\"\n      );\n    }\n  }\n\n  protected saved() {\n    this.onSaved.emit();\n  }\n\n  protected getExportData() {\n    if (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    ) {\n      return this.exportService.getPasswordProtectedExport(this.filePassword);\n    } else {\n      return this.exportService.getExport(this.format, null);\n    }\n  }\n\n  protected getFileName(prefix?: string) {\n    let extension = this.format;\n    if (this.format === \"encrypted_json\") {\n      if (prefix == null) {\n        prefix = \"encrypted\";\n      } else {\n        prefix = \"encrypted_\" + prefix;\n      }\n      extension = \"json\";\n    }\n    return this.exportService.getFileName(prefix, extension);\n  }\n\n  protected async collectEvent(): Promise<void> {\n    await this.eventCollectionService.collect(EventType.User_ClientExportedVault);\n  }\n\n  get format() {\n    return this.exportForm.get(\"format\").value;\n  }\n\n  get filePassword() {\n    return this.exportForm.get(\"filePassword\").value;\n  }\n\n  get confirmFilePassword() {\n    return this.exportForm.get(\"confirmFilePassword\").value;\n  }\n\n  get fileEncryptionType() {\n    return this.exportForm.get(\"fileEncryptionType\").value;\n  }\n\n  adjustValidators() {\n    this.exportForm.get(\"confirmFilePassword\").reset();\n    this.exportForm.get(\"filePassword\").reset();\n\n    if (this.encryptedFormat && this.fileEncryptionType == EncryptedExportType.FileEncrypted) {\n      this.exportForm.controls.filePassword.enable();\n      this.exportForm.controls.confirmFilePassword.enable();\n    } else {\n      this.exportForm.controls.filePassword.disable();\n      this.exportForm.controls.confirmFilePassword.disable();\n    }\n  }\n\n  private downloadFile(csv: string): void {\n    const fileName = this.getFileName();\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: csv,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable tailwindcss/no-custom-classname -->\n<form\n  #form\n  (ngSubmit)=\"submit()\"\n  [appApiAction]=\"formPromise\"\n  [formGroup]=\"exportForm\"\n  *ngIf=\"exportForm\"\n>\n  <div class=\"page-header\">\n    <h1>{{ \"exportVault\" | i18n }}</h1>\n  </div>\n\n  <app-callout type=\"error\" title=\"{{ 'vaultExportDisabled' | i18n }}\" *ngIf=\"disabledByPolicy\">\n    {{ \"personalVaultExportPolicyInEffect\" | i18n }}\n  </app-callout>\n  <app-export-scope-callout\n    [organizationId]=\"organizationId\"\n    *ngIf=\"!disabledByPolicy\"\n  ></app-export-scope-callout>\n\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <bit-form-field>\n        <bit-label class=\"tw-text-lg\" for=\"format\">{{ \"fileFormat\" | i18n }}</bit-label>\n        <select bitInput name=\"format\" formControlName=\"format\">\n          <option *ngFor=\"let f of formatOptions\" [value]=\"f.value\">{{ f.name }}</option>\n        </select>\n      </bit-form-field>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"form-group col-6\">\n      <ng-container *ngIf=\"format === 'encrypted_json'\">\n        <div role=\"radiogroup\" aria-labelledby=\"exportTypeHeading\">\n          <label id=\"exportTypeHeading\" class=\"tw-semi-bold tw-text-lg\">\n            {{ \"exportTypeHeading\" | i18n }}\n          </label>\n\n          <div appBoxRow name=\"FileTypeOptions\" class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"AccountEncrypted\"\n                [value]=\"encryptedExportType.AccountEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.AccountEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"AccountEncrypted\">\n                {{ \"accountRestricted\" | i18n }}\n              </label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 pb-2 tw-text-sm\">\n            {{ \"accountRestrictedOptionDescription\" | i18n }}\n          </div>\n\n          <div class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"FileEncrypted\"\n                [value]=\"encryptedExportType.FileEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.FileEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-my-1 tw-ml-1\" for=\"FileEncrypted\">{{\n                \"passwordProtected\" | i18n\n              }}</label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 tw-text-sm\">\n            {{ \"passwordProtectedOptionDescription\" | i18n }}\n          </div>\n        </div>\n        <br />\n\n        <ng-container *ngIf=\"fileEncryptionType == encryptedExportType.FileEncrypted\">\n          <bit-form-field>\n            <bit-label>{{ \"filePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"filePassword\"\n              formControlName=\"filePassword\"\n              name=\"password\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n            <bit-hint>{{ \"exportPasswordDescription\" | i18n }}</bit-hint>\n          </bit-form-field>\n          <bit-form-field>\n            <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              id=\"confirmFilePassword\"\n              formControlName=\"confirmFilePassword\"\n              name=\"confirmFilePassword\"\n            />\n            <button\n              type=\"button\"\n              bitSuffix\n              bitIconButton\n              bitPasswordInputToggle\n              [(toggled)]=\"showFilePassword\"\n            ></button>\n          </bit-form-field>\n        </ng-container>\n      </ng-container>\n\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary btn-submit\"\n        [disabled]=\"form.loading || disabledByPolicy\"\n        [ngClass]=\"{ manual: disabledByPolicy }\"\n      >\n        <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n        <span>{{ \"confirmFormat\" | i18n }}</span>\n      </button>\n    </div>\n  </div>\n</form>\n","import { Component } from \"@angular/core\";\nimport { UntypedFormBuilder } from \"@angular/forms\";\n\nimport { ExportComponent as BaseExportComponent } from \"@bitwarden/angular/components/export.component\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { ExportService } from \"@bitwarden/common/abstractions/export.service\";\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { EncryptedExportType } from \"@bitwarden/common/enums\";\n\nimport { UserVerificationPromptComponent } from \"../../components/user-verification-prompt.component\";\n\n@Component({\n  selector: \"app-export\",\n  templateUrl: \"export.component.html\",\n})\nexport class ExportComponent extends BaseExportComponent {\n  organizationId: string;\n  encryptedExportType = EncryptedExportType;\n  protected showFilePassword: boolean;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    platformUtilsService: PlatformUtilsService,\n    exportService: ExportService,\n    eventCollectionService: EventCollectionService,\n    policyService: PolicyService,\n    logService: LogService,\n    userVerificationService: UserVerificationService,\n    formBuilder: UntypedFormBuilder,\n    fileDownloadService: FileDownloadService,\n    private modalService: ModalService\n  ) {\n    super(\n      cryptoService,\n      i18nService,\n      platformUtilsService,\n      exportService,\n      eventCollectionService,\n      policyService,\n      window,\n      logService,\n      userVerificationService,\n      formBuilder,\n      fileDownloadService\n    );\n  }\n\n  async submit() {\n    if (this.isFileEncryptedExport && this.filePassword != this.confirmFilePassword) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"filePasswordAndConfirmFilePasswordDoNotMatch\")\n      );\n      return;\n    }\n\n    this.exportForm.markAllAsTouched();\n    if (!this.exportForm.valid) {\n      return;\n    }\n\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    this.doExport();\n  }\n\n  protected saved() {\n    super.saved();\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"exportSuccess\"));\n  }\n\n  private verifyUser() {\n    let confirmDescription = \"exportWarningDesc\";\n    if (this.isFileEncryptedExport) {\n      confirmDescription = \"fileEncryptedExportWarningDesc\";\n    } else if (this.isAccountEncryptedExport) {\n      confirmDescription = \"encExportKeyWarningDesc\";\n    }\n\n    const ref = this.modalService.open(UserVerificationPromptComponent, {\n      allowMultipleModals: true,\n      data: {\n        confirmDescription: confirmDescription,\n        confirmButtonText: \"exportVault\",\n        modalTitle: \"confirmVaultExport\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return ref.onClosedPromise();\n  }\n\n  get isFileEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    );\n  }\n\n  get isAccountEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.AccountEncrypted\n    );\n  }\n}\n","<bit-dialog dialogSize=\"small\">\n  <span bitDialogTitle>\n    {{ \"importSuccess\" | i18n }}\n  </span>\n\n  <div bitDialogContent>\n    <span>{{ \"importSuccessNumberOfItems\" | i18n : this.data.ciphers.length }}</span>\n    <bit-table [dataSource]=\"dataSource\">\n      <ng-container header>\n        <tr>\n          <th bitCell>{{ \"type\" | i18n }}</th>\n          <th bitCell>{{ \"total\" | i18n }}</th>\n        </tr>\n      </ng-container>\n      <ng-template body let-rows$>\n        <tr bitRow *ngFor=\"let r of rows$ | async\">\n          <td bitCell>\n            <i class=\"bwi bwi-fw bwi-{{ r.icon }}\" aria-hidden=\"true\"></i>\n            {{ r.type | i18n }}\n          </td>\n          <td bitCell>{{ r.count }}</td>\n        </tr>\n      </ng-template>\n    </bit-table>\n  </div>\n\n  <div bitDialogFooter>\n    <button bitButton bitDialogClose buttonType=\"primary\" type=\"button\">\n      {{ \"ok\" | i18n }}\n    </button>\n  </div>\n</bit-dialog>\n","import { DialogRef, DIALOG_DATA } from \"@angular/cdk/dialog\";\nimport { Component, Inject, OnInit } from \"@angular/core\";\n\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { TableDataSource } from \"@bitwarden/components\";\nimport { ImportResult } from \"@bitwarden/importer\";\n\nexport interface ResultList {\n  icon: string;\n  type: string;\n  count: number;\n}\n\n@Component({\n  selector: \"app-import-success-dialog\",\n  templateUrl: \"./import-success-dialog.component.html\",\n})\nexport class ImportSuccessDialogComponent implements OnInit {\n  protected dataSource = new TableDataSource<ResultList>();\n\n  constructor(public dialogRef: DialogRef, @Inject(DIALOG_DATA) public data: ImportResult) {}\n\n  ngOnInit(): void {\n    if (this.data != null) {\n      this.dataSource.data = this.buildResultList();\n    }\n  }\n\n  private buildResultList(): ResultList[] {\n    let logins = 0;\n    let cards = 0;\n    let identities = 0;\n    let secureNotes = 0;\n    this.data.ciphers.map((c) => {\n      switch (c.type) {\n        case CipherType.Login:\n          logins++;\n          break;\n        case CipherType.Card:\n          cards++;\n          break;\n        case CipherType.SecureNote:\n          secureNotes++;\n          break;\n        case CipherType.Identity:\n          identities++;\n          break;\n        default:\n          break;\n      }\n    });\n\n    const list: ResultList[] = [];\n    if (logins > 0) {\n      list.push({ icon: \"globe\", type: \"typeLogin\", count: logins });\n    }\n    if (cards > 0) {\n      list.push({ icon: \"credit-card\", type: \"typeCard\", count: cards });\n    }\n    if (identities > 0) {\n      list.push({ icon: \"id-card\", type: \"typeIdentity\", count: identities });\n    }\n    if (secureNotes > 0) {\n      list.push({ icon: \"sticky-note\", type: \"typeSecureNote\", count: secureNotes });\n    }\n    if (this.data.folders.length > 0) {\n      list.push({ icon: \"folder\", type: \"folders\", count: this.data.folders.length });\n    }\n    if (this.data.collections.length > 0) {\n      list.push({\n        icon: \"collection\",\n        type: \"collections\",\n        count: this.data.collections.length,\n      });\n    }\n    return list;\n  }\n}\n","import { Component } from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\n\nimport { ModalRef } from \"@bitwarden/angular/components/modal/modal.ref\";\n\n@Component({\n  templateUrl: \"file-password-prompt.component.html\",\n})\nexport class FilePasswordPromptComponent {\n  filePassword = new FormControl(\"\", Validators.required);\n\n  constructor(private modalRef: ModalRef) {}\n\n  submit() {\n    this.filePassword.markAsTouched();\n    if (!this.filePassword.valid) {\n      return;\n    }\n\n    this.modalRef.close(this.filePassword.value);\n  }\n\n  cancel() {\n    this.modalRef.close(null);\n  }\n}\n","<!-- Please remove this disable statement when editing this file! -->\n<!-- eslint-disable tailwindcss/no-custom-classname -->\n<div\n  class=\"modal fade\"\n  role=\"dialog\"\n  aria-modal=\"true\"\n  [attr.aria-labelledby]=\"'confirmVaultImport' | i18n\"\n>\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form #form (ngSubmit)=\"submit()\">\n      <div class=\"form-group modal-content\">\n        <h2 class=\"tw-my-6 tw-ml-3.5 tw-font-semibold\" id=\"confirmVaultImport\">\n          {{ \"confirmVaultImport\" | i18n | uppercase }}\n        </h2>\n        <div\n          class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-px-3.5 tw-pt-3.5\"\n        >\n          {{ \"confirmVaultImportDesc\" | i18n }}\n          <bit-form-field class=\"tw-pt-3.5\">\n            <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              type=\"password\"\n              name=\"filePassword\"\n              [formControl]=\"filePassword\"\n              appAutofocus\n              appInputVerbatim\n            />\n            <button type=\"button\" bitSuffix bitIconButton bitPasswordInputToggle></button>\n          </bit-form-field>\n        </div>\n        <div\n          class=\"tw-flex tw-w-full tw-flex-wrap tw-items-center tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-px-3.5 tw-pb-3.5 tw-pt-4\"\n        >\n          <button bitButton buttonType=\"primary\" class=\"tw-mr-2\" type=\"submit\" appBlurClick>\n            <span>{{ \"importData\" | i18n }}</span>\n          </button>\n          <button bitButton buttonType=\"secondary\" type=\"button\" (click)=\"cancel()\">\n            <span>{{ \"cancel\" | i18n }}</span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n","<div class=\"page-header\">\n  <h1>{{ \"importData\" | i18n }}</h1>\n</div>\n<app-callout type=\"info\" *ngIf=\"importBlockedByPolicy\">\n  {{ \"personalOwnershipPolicyInEffectImports\" | i18n }}\n</app-callout>\n<form #form (ngSubmit)=\"submit()\" ngNativeValidate>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"form-group\">\n        <label for=\"type\">1. {{ \"selectFormat\" | i18n }}</label>\n        <select\n          id=\"type\"\n          name=\"Format\"\n          [(ngModel)]=\"format\"\n          class=\"form-control\"\n          [disabled]=\"importBlockedByPolicy\"\n          required\n        >\n          <option *ngFor=\"let o of featuredImportOptions\" [ngValue]=\"o.id\">{{ o.name }}</option>\n          <ng-container *ngIf=\"importOptions && importOptions.length\">\n            <option value=\"-\" disabled></option>\n            <option *ngFor=\"let o of importOptions\" [ngValue]=\"o.id\">{{ o.name }}</option>\n          </ng-container>\n        </select>\n      </div>\n    </div>\n  </div>\n  <app-callout type=\"info\" title=\"{{ getFormatInstructionTitle() }}\" *ngIf=\"format\">\n    <ng-container *ngIf=\"format === 'bitwardencsv' || format === 'bitwardenjson'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/export-your-data/\">\n        https://bitwarden.com/help/export-your-data/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'lastpasscsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-lastpass/\">\n        https://bitwarden.com/help/import-from-lastpass/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepassxcsv'\">\n      Using the KeePassX desktop application, navigate to \"Database\" &rarr; \"Export to CSV file\" and\n      save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'aviracsv'\">\n      In the Avira web vault, go to \"Settings\" &rarr; \"My Data\" &rarr; \"Export data\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blurcsv'\">\n      In the Blur web vault, click your username at the top and go to \"Settings\" &rarr; \"Export\n      Data\", then click \"Export CSV\" for your \"Accounts\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safeincloudxml'\">\n      Using the SaveInCloud desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As XML\"\n      and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'padlockcsv'\">\n      Using the Padlock desktop application, click the hamburger icon in the top left corner and\n      navigate to \"Settings\" &rarr; \"Export\" button and save the file \"As CSV\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepass2xml'\">\n      Using the KeePass 2 desktop application, navigate to \"File\" &rarr; \"Export\" and select the\n      \"KeePass XML (2.x)\" option.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'upmcsv'\">\n      Using the Universal Password Manager desktop application, navigate to \"Database\" &rarr;\n      \"Export\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'saferpasscsv'\">\n      Using the SaferPass browser extension, click the hamburger icon in the top left corner and\n      navigate to \"Settings\". Click the \"Export accounts\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'meldiumcsv'\">\n      Using the Meldium web vault, navigate to \"Settings\". Locate the \"Export data\" function and\n      click \"Show me my data\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepercsv'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .csv File\" option. Click\n      \"Export\" to save the CSV file.\n    </ng-container>\n    <!--\n    <ng-container *ngIf=\"format === 'keeperjson'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .json File\" option. Click\n      \"Export\" to save the JSON file.\n    </ng-container>\n    -->\n    <ng-container\n      *ngIf=\"format === 'chromecsv' || format === 'operacsv' || format === 'vivaldicsv'\"\n    >\n      <span *ngIf=\"format !== 'chromecsv'\">\n        The process is exactly the same as importing from Google Chrome.\n      </span>\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-chrome/\">\n        https://bitwarden.com/help/import-from-chrome/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'firefoxcsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-firefox/\">\n        https://bitwarden.com/help/import-from-firefox/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safaricsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-safari/\">\n        https://bitwarden.com/help/import-from-safari/</a\n      >.\n    </ng-container>\n    <ng-container\n      *ngIf=\"\n        format === '1password1pux' ||\n        format === '1password1pif' ||\n        format === '1passwordwincsv' ||\n        format === '1passwordmaccsv'\n      \"\n    >\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-1password/\">\n        https://bitwarden.com/help/import-from-1password/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passworddragonxml'\">\n      Using the Password Dragon desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"To\n      XML\". In the dialog that pops up select \"All Rows\" and check all fields. Click the \"Export\"\n      button and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpasscsv'\">\n      Using the Enpass desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As CSV\".\n      Select \"OK\" to the warning alert and save the CSV file. Note that the importer only supports\n      files exported while Enpass is set to the English language, so adjust your settings\n      accordingly.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpassjson'\">\n      Using the Enpass 6 desktop application, click the menu button and navigate to \"File\" &rarr;\n      \"Export\". Select the \".json\" file format option and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'pwsafexml'\">\n      Using the Password Safe desktop application, navigate to \"File\" &rarr; \"Export To\" &rarr; \"XML\n      format...\" and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanecsv'\">\n      Log in to Dashlane, click on \"My Account\" &rarr; \"Settings\" &rarr; \"Export file\" and select\n      \"Export as a CSV file\". This will download a zip archive containing various CSV files. Unzip\n      the archive and import each CSV file individually.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanejson'\">\n      Dashlane no longer supports the JSON format. Only use this if you have an existing JSON for\n      import. Use the CSV importer when creating new exports.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'msecurecsv'\">\n      Using the mSecure desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"CSV File...\"\n      and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'stickypasswordxml'\">\n      Using the Sticky Password desktop application, navigate to \"Menu\" (top right) &rarr; \"Export\"\n      &rarr; \"Export all\". Select the unencrypted format XML option and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'truekeycsv'\">\n      Using the True Key desktop application, click the gear icon (top right) and then navigate to\n      \"App Settings\". Click the \"Export\" button, enter your password and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'clipperzhtml'\">\n      Log into the Clipperz web application (clipperz.is/app). Click the hamburger menu icon in the\n      top right to expand the navigation bar. Navigate to \"Data\" &rarr; \"Export\". Click the\n      \"download HTML+JSON\" button to save the HTML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'roboformcsv'\">\n      Using the RoboForm Editor desktop application, navigate to \"RoboForm\" (top left) &rarr;\n      \"Options\" &rarr; \"Account &amp; Data\" and click the \"Export\" button. Select all of your data,\n      change the \"Format\" to \"CSV file\" and then click the \"Export\" button to save the CSV file.\n      Note: RoboForm only allows you to export Logins. Other items will not be exported.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passboltcsv'\">\n      Log into the Passbolt web vault and navigate to the \"Passwords\" listing. Select all of the\n      passwords you would like to export and click the \"Export\" button at the top of the listing.\n      Choose the \"csv (lastpass)\" export format and click the \"Export\" button.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'ascendocsv'\">\n      Using the Ascendo DataVault desktop application, navigate to \"Tools\" &rarr; \"Export\". In the\n      dialog that pops up, select the \"All Items (DVX, CSV)\" option. Click the \"Ok\" button to save\n      the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordbossjson'\">\n      Using the Password Boss desktop application, navigate to \"File\" &rarr; \"Export data\" &rarr;\n      \"Password Boss JSON - not encrypted\" and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'zohovaultcsv'\">\n      Log into the Zoho web vault (vault.zoho.com). Navigate to \"Tools\" &rarr; \"Export Secrets\".\n      Select \"All Secrets\" and click the \"Zoho Vault Format CSV\" button. Highlight and copy the data\n      from the textarea. Open a text editor like Notepad and paste the data. Save the data from the\n      text editor as\n      <code>zoho_export.csv</code>.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'splashidcsv'\">\n      Using the SplashID Safe desktop application, click on the SplashID blue lock logo in the top\n      right corner. Navigate to \"Export\" &rarr; \"Export as CSV\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkeepcsv'\">\n      Using the PassKeep mobile app, navigate to \"Backup/Restore\". Locate the \"CSV Backup/Restore\"\n      section and click \"Backup to CSV\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'gnomejson'\">\n      Make sure you have python-keyring and python-gnomekeyring installed. Save the\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bit.ly/2GpOMTg\"\n        >GNOME Keyring Import/Export</a\n      >\n      python script to your desktop as <code>pw_helper.py</code>. Open terminal and run\n      <code>chmod +rx Desktop/pw_helper.py</code> and then\n      <code>python Desktop/pw_helper.py export Desktop/my_passwords.json</code>. Then upload the\n      resulting <code>my_passwords.json</code> file here to Bitwarden.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordagentcsv'\">\n      Using the Password Agent desktop application navigate to \"File\" &rarr; \"Export\", select the\n      \"Fields to export\" button and check all of the fields, change the \"Output format\" to \"CSV\",\n      and then click the \"Start\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passpackcsv'\">\n      Log into the Passpack website vault and navigate to \"Settings\" &rarr; \"Export\", then click the\n      \"Download\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passmanjson'\">\n      Open your Passman vault and click on \"Settings\" in the bottom left corner. In the \"Settings\"\n      window switch to the \"Export credentials\" tab and choose \"JSON\" as the export type. Enter your\n      vault's passphrase and click the \"Export\" button to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastcsv'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to CSV file\" option to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastjson'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to JSON file\" option to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'fsecurefsk'\">\n      Open the F-Secure KEY desktop application and navigate to \"Settings\" &rarr; \"Export\n      Passwords\". Select the \"Export\" button, enter your master password, and save the FSK file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'kasperskytxt'\">\n      Open the Kaspersky Password Manager desktop application and navigate to \"Settings\" &rarr;\n      \"Import/Export\". Locate the \"Export to text file\" section and select the \"Export\" button to\n      save the TXT file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'remembearcsv'\">\n      Open the RememBear desktop application and navigate to \"Settings\" &rarr; \"Account\" &rarr;\n      \"Export\". Enter your master password and select the \"Export Anyway\" button to save the CSV\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordwallettxt'\">\n      Open the PasswordWallet desktop application and navigate to \"File\" &rarr; \"Export\" &rarr;\n      \"Visible entries to text file\". Enter your password and select the \"Ok\" button to save the TXT\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'mykicsv'\">\n      Open the Myki desktop browser extension and navigate to \"Advanced\" &rarr; \"Export Accounts\"\n      and then scan the QR code with your mobile device. Various CSV files will then be saved to\n      your computer's downloads folder.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'securesafecsv'\">\n      Export your SecureSafe password safe to a CSV file with a comma delimiter.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'logmeoncecsv'\">\n      Open the LogMeOnce browser extension, then navigate to \"Open Menu\" &rarr; \"Export To\" and\n      select \"CSV File\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blackberrycsv'\">\n      Open the BlackBerry Password Keeper application, then navigate to \"Settings\" &rarr;\n      \"Import/Export\". Select \"Export Passwords\" and follow the instructions on screen to save the\n      unencrypted CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'buttercupcsv'\">\n      Open the Buttercup desktop application and unlock your vault. Right click on your vault's icon\n      and select \"Export\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'codebookcsv'\">\n      Open the Codebook desktop application and log in. Navigate to \"File\" &rarr; \"Export all\", then\n      click \"Yes\" on the dialog and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'encryptrcsv'\">\n      Open the newest version of the Encryptr desktop application and allow all of your data to\n      sync. Once syncing of your data is complete, the download icon in the top right corner will\n      turn pink. Click the download icon and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'yoticsv'\">\n      From the Yoti browser extension, click on \"Settings\", then \"Export Saved Logins\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'psonojson'\">\n      Log in to the Psono web vault, click on the \"Signed in as\"-dropdown, select \"Others\". Go to\n      the \"Export\"-tab and select the json type export and then click on Export.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkyjson'\">\n      Log in to \"https://vault.passky.org\" &rarr; \"Import & Export\" &rarr; \"Export\" in the Passky\n      section. (\"Backup\" is unsupported as it is encrypted).\n    </ng-container>\n  </app-callout>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"form-group\">\n        <label for=\"file\">2. {{ \"selectImportFile\" | i18n }}</label>\n        <br />\n        <div class=\"file-selector\">\n          <button\n            type=\"button\"\n            class=\"btn btn-outline-primary\"\n            (click)=\"fileSelector.click()\"\n            [disabled]=\"importBlockedByPolicy\"\n          >\n            {{ \"chooseFile\" | i18n }}\n          </button>\n          {{ this.fileSelected ? this.fileSelected.name : (\"noFileChosen\" | i18n) }}\n        </div>\n        <input\n          #fileSelector\n          type=\"file\"\n          id=\"file\"\n          class=\"form-control-file\"\n          name=\"file\"\n          (change)=\"setSelectedFile($event)\"\n          hidden\n          [disabled]=\"importBlockedByPolicy\"\n        />\n      </div>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"fileContents\">{{ \"orCopyPasteFileContents\" | i18n }}</label>\n    <textarea\n      id=\"fileContents\"\n      class=\"form-control\"\n      name=\"FileContents\"\n      [(ngModel)]=\"fileContents\"\n      [disabled]=\"importBlockedByPolicy\"\n    ></textarea>\n  </div>\n  <button\n    type=\"submit\"\n    class=\"btn btn-primary btn-submit\"\n    [disabled]=\"loading || importBlockedByPolicy\"\n    [ngClass]=\"{ manual: importBlockedByPolicy }\"\n  >\n    <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n    <span>{{ \"importData\" | i18n }}</span>\n  </button>\n</form>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport * as JSZip from \"jszip\";\nimport { firstValueFrom } from \"rxjs\";\nimport Swal, { SweetAlertIcon } from \"sweetalert2\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { DialogService } from \"@bitwarden/components\";\nimport {\n  ImportOption,\n  ImportType,\n  ImportResult,\n  ImportServiceAbstraction,\n} from \"@bitwarden/importer\";\n\nimport { ImportSuccessDialogComponent, FilePasswordPromptComponent } from \"./dialog\";\n\n@Component({\n  selector: \"app-import\",\n  templateUrl: \"import.component.html\",\n})\nexport class ImportComponent implements OnInit {\n  featuredImportOptions: ImportOption[];\n  importOptions: ImportOption[];\n  format: ImportType = null;\n  fileContents: string;\n  fileSelected: File;\n  loading = false;\n  importBlockedByPolicy = false;\n\n  protected organizationId: string = null;\n  protected successNavigate: any[] = [\"vault\"];\n\n  constructor(\n    protected i18nService: I18nService,\n    protected importService: ImportServiceAbstraction,\n    protected router: Router,\n    protected platformUtilsService: PlatformUtilsService,\n    protected policyService: PolicyService,\n    private logService: LogService,\n    protected modalService: ModalService,\n    protected syncService: SyncService,\n    protected dialogService: DialogService\n  ) {}\n\n  async ngOnInit() {\n    this.setImportOptions();\n\n    this.importBlockedByPolicy = await firstValueFrom(\n      this.policyService.policyAppliesToActiveUser$(PolicyType.PersonalOwnership)\n    );\n  }\n\n  async submit() {\n    if (this.importBlockedByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalOwnershipPolicyInEffectImports\")\n      );\n      return;\n    }\n\n    this.loading = true;\n\n    const promptForPassword_callback = async () => {\n      return await this.getFilePassword();\n    };\n\n    const importer = this.importService.getImporter(\n      this.format,\n      promptForPassword_callback,\n      this.organizationId\n    );\n    if (importer === null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFormat\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    const fileEl = document.getElementById(\"file\") as HTMLInputElement;\n    const files = fileEl.files;\n    if (\n      (files == null || files.length === 0) &&\n      (this.fileContents == null || this.fileContents === \"\")\n    ) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    let fileContents = this.fileContents;\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    try {\n      const result = await this.importService.import(importer, fileContents, this.organizationId);\n\n      //No errors, display success message\n      this.dialogService.open<unknown, ImportResult>(ImportSuccessDialogComponent, {\n        data: result,\n      });\n\n      this.syncService.fullSync(true);\n      this.router.navigate(this.successNavigate);\n    } catch (e) {\n      this.error(e);\n      this.logService.error(e);\n    }\n\n    this.loading = false;\n  }\n\n  getFormatInstructionTitle() {\n    if (this.format == null) {\n      return null;\n    }\n\n    const results = this.featuredImportOptions\n      .concat(this.importOptions)\n      .filter((o) => o.id === this.format);\n    if (results.length > 0) {\n      return this.i18nService.t(\"instructionsFor\", results[0].name);\n    }\n    return null;\n  }\n\n  protected setImportOptions() {\n    this.featuredImportOptions = [\n      {\n        id: null,\n        name: \"-- \" + this.i18nService.t(\"select\") + \" --\",\n      },\n      ...this.importService.featuredImportOptions,\n    ];\n    this.importOptions = [...this.importService.regularImportOptions].sort((a, b) => {\n      if (a.name == null && b.name != null) {\n        return -1;\n      }\n      if (a.name != null && b.name == null) {\n        return 1;\n      }\n      if (a.name == null && b.name == null) {\n        return 0;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(a.name, b.name)\n        : a.name.localeCompare(b.name);\n    });\n  }\n\n  setSelectedFile(event: Event) {\n    const fileInputEl = <HTMLInputElement>event.target;\n    this.fileSelected = fileInputEl.files.length > 0 ? fileInputEl.files[0] : null;\n  }\n\n  private async error(error: Error) {\n    await Swal.fire({\n      heightAuto: false,\n      buttonsStyling: false,\n      icon: \"error\" as SweetAlertIcon,\n      iconHtml: `<i class=\"swal-custom-icon bwi bwi-error text-danger\"></i>`,\n      input: \"textarea\",\n      inputValue: error.message,\n      inputAttributes: {\n        readonly: \"true\",\n      },\n      titleText: this.i18nService.t(\"importError\"),\n      text: this.i18nService.t(\"importErrorDesc\"),\n      showConfirmButton: true,\n      confirmButtonText: this.i18nService.t(\"ok\"),\n      onOpen: (popupEl) => {\n        popupEl.querySelector(\".swal2-textarea\").scrollTo(0, 0);\n      },\n    });\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    if (this.format === \"1password1pux\") {\n      return this.extract1PuxContent(file);\n    }\n\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        if (this.format === \"lastpasscsv\" && file.type === \"text/html\") {\n          const parser = new DOMParser();\n          const doc = parser.parseFromString((evt.target as any).result, \"text/html\");\n          const pre = doc.querySelector(\"pre\");\n          if (pre != null) {\n            resolve(pre.textContent);\n            return;\n          }\n          reject();\n          return;\n        }\n\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private extract1PuxContent(file: File): Promise<string> {\n    return new JSZip()\n      .loadAsync(file)\n      .then((zip) => {\n        return zip.file(\"export.data\").async(\"string\");\n      })\n      .then(\n        function success(content) {\n          return content;\n        },\n        function error(e) {\n          return \"\";\n        }\n      );\n  }\n\n  async getFilePassword(): Promise<string> {\n    const ref = this.modalService.open(FilePasswordPromptComponent, {\n      allowMultipleModals: true,\n    });\n\n    if (ref == null) {\n      return null;\n    }\n\n    return await ref.onClosedPromise();\n  }\n}\n","<ng-container *ngIf=\"show\">\n  <app-callout type=\"info\" title=\"{{ scopeConfig.title | i18n }}\">\n    {{ scopeConfig.description | i18n : scopeConfig.scopeIdentifier }}\n  </app-callout>\n</ng-container>\n","import { Component, Input, OnInit } from \"@angular/core\";\n\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\n\n@Component({\n  selector: \"app-export-scope-callout\",\n  templateUrl: \"export-scope-callout.component.html\",\n})\nexport class ExportScopeCalloutComponent implements OnInit {\n  @Input() organizationId: string = null;\n\n  show = false;\n  scopeConfig: {\n    title: string;\n    description: string;\n    scopeIdentifier: string;\n  };\n\n  constructor(\n    protected organizationService: OrganizationService,\n    protected stateService: StateService\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    if (!this.organizationService.hasOrganizations()) {\n      return;\n    }\n    this.scopeConfig =\n      this.organizationId != null\n        ? {\n            title: \"exportingOrganizationVaultTitle\",\n            description: \"exportingOrganizationVaultDescription\",\n            scopeIdentifier: this.organizationService.get(this.organizationId).name,\n          }\n        : {\n            title: \"exportingPersonalVaultTitle\",\n            description: \"exportingPersonalVaultDescription\",\n            scopeIdentifier: await this.stateService.getEmail(),\n          };\n    this.show = true;\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from \"@angular/core\";\n\n@Directive({\n  selector: \"[appBoxRow]\",\n})\nexport class BoxRowDirective implements OnInit {\n  el: HTMLElement = null;\n  formEls: Element[];\n\n  constructor(elRef: ElementRef) {\n    this.el = elRef.nativeElement;\n  }\n\n  ngOnInit(): void {\n    this.formEls = Array.from(\n      this.el.querySelectorAll('input:not([type=\"hidden\"]), select, textarea')\n    );\n    this.formEls.forEach((formEl) => {\n      formEl.addEventListener(\n        \"focus\",\n        () => {\n          this.el.classList.add(\"active\");\n        },\n        false\n      );\n\n      formEl.addEventListener(\n        \"blur\",\n        () => {\n          this.el.classList.remove(\"active\");\n        },\n        false\n      );\n    });\n  }\n\n  @HostListener(\"click\", [\"$event\"]) onClick(event: Event) {\n    const target = event.target as HTMLElement;\n    if (\n      target !== this.el &&\n      !target.classList.contains(\"progress\") &&\n      !target.classList.contains(\"progress-bar\")\n    ) {\n      return;\n    }\n\n    if (this.formEls.length > 0) {\n      const formEl = this.formEls[0] as HTMLElement;\n      if (formEl.tagName.toLowerCase() === \"input\") {\n        const inputEl = formEl as HTMLInputElement;\n        if (inputEl.type != null && inputEl.type.toLowerCase() === \"checkbox\") {\n          inputEl.click();\n          return;\n        }\n      }\n      formEl.focus();\n    }\n  }\n}\n","import { _isNumberValue } from \"@angular/cdk/coercion\";\nimport { DataSource } from \"@angular/cdk/collections\";\nimport { BehaviorSubject, combineLatest, map, Observable, Subscription } from \"rxjs\";\n\nexport type SortDirection = \"asc\" | \"desc\";\nexport type SortFn = (a: any, b: any) => number;\nexport type Sort = {\n  column?: string;\n  direction: SortDirection;\n  fn?: SortFn;\n};\n\n// Loosely based on CDK TableDataSource\n//  https://github.com/angular/components/blob/main/src/material/table/table-data-source.ts\nexport class TableDataSource<T> extends DataSource<T> {\n  private readonly _data: BehaviorSubject<T[]>;\n  private readonly _sort: BehaviorSubject<Sort>;\n  private readonly _filter = new BehaviorSubject<string>(\"\");\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  private _renderChangesSubscription: Subscription | null = null;\n\n  constructor() {\n    super();\n    this._data = new BehaviorSubject([]);\n    this._sort = new BehaviorSubject({ direction: \"asc\" });\n  }\n\n  get data() {\n    return this._data.value;\n  }\n\n  set data(data: T[]) {\n    this._data.next(data ? [...data] : []);\n  }\n\n  set sort(sort: Sort) {\n    this._sort.next(sort);\n  }\n\n  get sort() {\n    return this._sort.value;\n  }\n\n  get filter() {\n    return this._filter.value;\n  }\n\n  set filter(filter: string) {\n    this._filter.next(filter);\n  }\n\n  connect(): Observable<readonly T[]> {\n    if (!this._renderChangesSubscription) {\n      this.updateChangeSubscription();\n    }\n\n    return this._renderData;\n  }\n\n  disconnect(): void {\n    this._renderChangesSubscription?.unsubscribe();\n    this._renderChangesSubscription = null;\n  }\n\n  private updateChangeSubscription() {\n    const filteredData = combineLatest([this._data, this._filter]).pipe(\n      map(([data, filter]) => this.filterData(data, filter))\n    );\n\n    const orderedData = combineLatest([filteredData, this._sort]).pipe(\n      map(([data, sort]) => this.orderData(data, sort))\n    );\n\n    this._renderChangesSubscription?.unsubscribe();\n    this._renderChangesSubscription = orderedData.subscribe((data) => this._renderData.next(data));\n  }\n\n  private filterData(data: T[], filter: string): T[] {\n    if (filter == null || filter == \"\") {\n      return data;\n    }\n\n    return data.filter((obj) => this.filterPredicate(obj, filter));\n  }\n\n  private orderData(data: T[], sort: Sort): T[] {\n    if (!sort) {\n      return data;\n    }\n\n    return this.sortData(data, sort);\n  }\n\n  /**\n   * Copied from https://github.com/angular/components/blob/main/src/material/table/table-data-source.ts\n   * License: MIT\n   * Copyright (c) 2022 Google LLC.\n   *\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  protected sortingDataAccessor(data: T, sortHeaderId: string): string | number {\n    const value = (data as unknown as Record<string, any>)[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      return numberValue < Number.MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Copied from https://github.com/angular/components/blob/main/src/material/table/table-data-source.ts\n   * License: MIT\n   * Copyright (c) 2022 Google LLC.\n   *\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  protected sortData(data: T[], sort: Sort): T[] {\n    const column = sort.column;\n    const directionModifier = sort.direction === \"asc\" ? 1 : -1;\n    if (!column) {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      // If a custom sort function is provided, use it instead of the default.\n      if (sort.fn) {\n        return sort.fn(a, b) * directionModifier;\n      }\n\n      let valueA = this.sortingDataAccessor(a, column);\n      let valueB = this.sortingDataAccessor(b, column);\n\n      // If there are data in the column that can be converted to a number,\n      // it must be ensured that the rest of the data\n      // is of the same type so as not to order incorrectly.\n      const valueAType = typeof valueA;\n      const valueBType = typeof valueB;\n\n      if (valueAType !== valueBType) {\n        if (valueAType === \"number\") {\n          valueA += \"\";\n        }\n        if (valueBType === \"number\") {\n          valueB += \"\";\n        }\n      }\n\n      if (typeof valueA === \"string\" && typeof valueB === \"string\") {\n        return valueA.localeCompare(valueB) * directionModifier;\n      }\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come last.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * directionModifier;\n    });\n  }\n\n  /**\n   * Copied from https://github.com/angular/components/blob/main/src/material/table/table-data-source.ts\n   * License: MIT\n   * Copyright (c) 2022 Google LLC.\n   *\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  protected filterPredicate(data: T, filter: string): boolean {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data as unknown as Record<string, any>)\n      .reduce((currentTerm: string, key: string) => {\n        // Use an obscure Unicode character to delimit the words in the concatenated string.\n        // This avoids matches where the values of two columns combined will match the user's query\n        // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n        // that has a very low chance of being typed in by somebody in a text field. This one in\n        // particular is \"White up-pointing triangle with dot\" from\n        // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n        return currentTerm + (data as unknown as Record<string, any>)[key] + \"◬\";\n      }, \"\")\n      .toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n}\n","import { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nexport abstract class ImportApiServiceAbstraction {\n  postImportCiphers: (request: ImportCiphersRequest) => Promise<any>;\n  postImportOrganizationCiphers: (\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ) => Promise<any>;\n}\n","import { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nimport { ImportApiServiceAbstraction } from \"./import-api.service.abstraction\";\n\nexport class ImportApiService implements ImportApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  async postImportCiphers(request: ImportCiphersRequest): Promise<any> {\n    return await this.apiService.send(\"POST\", \"/ciphers/import\", request, true, false);\n  }\n\n  async postImportOrganizationCiphers(\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest\n  ): Promise<any> {\n    return await this.apiService.send(\n      \"POST\",\n      \"/ciphers/import-organization?organizationId=\" + organizationId,\n      request,\n      true,\n      false\n    );\n  }\n}\n","import { Importer } from \"../importers/importer\";\nimport { ImportOption, ImportType } from \"../models/import-options\";\nimport { ImportResult } from \"../models/import-result\";\n\nexport abstract class ImportServiceAbstraction {\n  featuredImportOptions: readonly ImportOption[];\n  regularImportOptions: readonly ImportOption[];\n  getImportOptions: () => ImportOption[];\n  import: (\n    importer: Importer,\n    fileContents: string,\n    organizationId?: string\n  ) => Promise<ImportResult>;\n  getImporter: (\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>,\n    organizationId: string\n  ) => Importer;\n}\n","import { Collection } from \"../domain/collection\";\nimport { CollectionRequest } from \"../request/collection.request\";\n\nexport class CollectionWithIdRequest extends CollectionRequest {\n  id: string;\n\n  constructor(collection?: Collection) {\n    if (collection == null) {\n      return;\n    }\n    super(collection);\n    this.id = collection.id;\n  }\n}\n","import { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { FolderWithIdRequest } from \"../../vault/models/request/folder-with-id.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  folders: FolderWithIdRequest[] = [];\n  folderRelationships: KvpRequest<number, number>[] = [];\n}\n","import { CollectionWithIdRequest } from \"../../admin-console/models/request/collection-with-id.request\";\nimport { CipherRequest } from \"../../vault/models/request/cipher.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportOrganizationCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  collections: CollectionWithIdRequest[] = [];\n  collectionRelationships: KvpRequest<number, number>[] = [];\n}\n","export class KvpRequest<TK, TV> {\n  key: TK;\n  value: TV;\n\n  constructor(key: TK, value: TV) {\n    this.key = key;\n    this.value = value;\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nexport class ImportResult {\n  success = false;\n  errorMessage: string;\n  ciphers: CipherView[] = [];\n  folders: FolderView[] = [];\n  folderRelationships: [number, number][] = [];\n  collections: CollectionView[] = [];\n  collectionRelationships: [number, number][] = [];\n}\n","import * as papa from \"papaparse\";\n\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\nimport { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { ConsoleLogService } from \"@bitwarden/common/services/consoleLog.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { LoginUriView } from \"@bitwarden/common/vault/models/view/login-uri.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nexport abstract class BaseImporter {\n  organizationId: string = null;\n\n  protected logService: LogService = new ConsoleLogService(false);\n\n  protected newLineRegex = /(?:\\r\\n|\\r|\\n)/;\n\n  protected passwordFieldNames = [\n    \"password\",\n    \"pass word\",\n    \"passphrase\",\n    \"pass phrase\",\n    \"pass\",\n    \"code\",\n    \"code word\",\n    \"codeword\",\n    \"secret\",\n    \"secret word\",\n    \"personpwd\",\n    \"key\",\n    \"keyword\",\n    \"key word\",\n    \"keyphrase\",\n    \"key phrase\",\n    \"form_pw\",\n    \"wppassword\",\n    \"pin\",\n    \"pwd\",\n    \"pw\",\n    \"pword\",\n    \"passwd\",\n    \"p\",\n    \"serial\",\n    \"serial#\",\n    \"license key\",\n    \"reg #\",\n\n    // Non-English names\n    \"passwort\",\n  ];\n\n  protected usernameFieldNames = [\n    \"user\",\n    \"name\",\n    \"user name\",\n    \"username\",\n    \"login name\",\n    \"email\",\n    \"e-mail\",\n    \"id\",\n    \"userid\",\n    \"user id\",\n    \"login\",\n    \"form_loginname\",\n    \"wpname\",\n    \"mail\",\n    \"loginid\",\n    \"login id\",\n    \"log\",\n    \"personlogin\",\n    \"first name\",\n    \"last name\",\n    \"card#\",\n    \"account #\",\n    \"member\",\n    \"member #\",\n\n    // Non-English names\n    \"nom\",\n    \"benutzername\",\n  ];\n\n  protected notesFieldNames = [\n    \"note\",\n    \"notes\",\n    \"comment\",\n    \"comments\",\n    \"memo\",\n    \"description\",\n    \"free form\",\n    \"freeform\",\n    \"free text\",\n    \"freetext\",\n    \"free\",\n\n    // Non-English names\n    \"kommentar\",\n  ];\n\n  protected uriFieldNames: string[] = [\n    \"url\",\n    \"hyper link\",\n    \"hyperlink\",\n    \"link\",\n    \"host\",\n    \"hostname\",\n    \"host name\",\n    \"server\",\n    \"address\",\n    \"hyper ref\",\n    \"href\",\n    \"web\",\n    \"website\",\n    \"web site\",\n    \"site\",\n    \"web-site\",\n    \"uri\",\n\n    // Non-English names\n    \"ort\",\n    \"adresse\",\n  ];\n\n  protected parseCsvOptions = {\n    encoding: \"UTF-8\",\n    skipEmptyLines: false,\n  };\n\n  protected get organization() {\n    return this.organizationId != null;\n  }\n\n  protected parseXml(data: string): Document {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(data, \"application/xml\");\n    return doc != null && doc.querySelector(\"parsererror\") == null ? doc : null;\n  }\n\n  protected parseCsv(data: string, header: boolean, options: any = {}): any[] {\n    const parseOptions: papa.ParseConfig<string> = Object.assign(\n      { header: header },\n      this.parseCsvOptions,\n      options\n    );\n    data = this.splitNewLine(data).join(\"\\n\").trim();\n    const result = papa.parse(data, parseOptions);\n    if (result.errors != null && result.errors.length > 0) {\n      result.errors.forEach((e) => {\n        if (e.row != null) {\n          this.logService.warning(\"Error parsing row \" + e.row + \": \" + e.message);\n        }\n      });\n    }\n    return result.data && result.data.length > 0 ? result.data : null;\n  }\n\n  protected parseSingleRowCsv(rowData: string) {\n    if (this.isNullOrWhitespace(rowData)) {\n      return null;\n    }\n    const parsedRow = this.parseCsv(rowData, false);\n    if (parsedRow != null && parsedRow.length > 0 && parsedRow[0].length > 0) {\n      return parsedRow[0];\n    }\n    return null;\n  }\n\n  protected makeUriArray(uri: string | string[]): LoginUriView[] {\n    if (uri == null) {\n      return null;\n    }\n\n    if (typeof uri === \"string\") {\n      const loginUri = new LoginUriView();\n      loginUri.uri = this.fixUri(uri);\n      if (this.isNullOrWhitespace(loginUri.uri)) {\n        return null;\n      }\n      loginUri.match = null;\n      return [loginUri];\n    }\n\n    if (uri.length > 0) {\n      const returnArr: LoginUriView[] = [];\n      uri.forEach((u) => {\n        const loginUri = new LoginUriView();\n        loginUri.uri = this.fixUri(u);\n        if (this.isNullOrWhitespace(loginUri.uri)) {\n          return;\n        }\n        loginUri.match = null;\n        returnArr.push(loginUri);\n      });\n      return returnArr.length === 0 ? null : returnArr;\n    }\n\n    return null;\n  }\n\n  protected fixUri(uri: string) {\n    if (uri == null) {\n      return null;\n    }\n    uri = uri.trim();\n    if (uri.indexOf(\"://\") === -1 && uri.indexOf(\".\") >= 0) {\n      uri = \"http://\" + uri;\n    }\n    if (uri.length > 1000) {\n      return uri.substring(0, 1000);\n    }\n    return uri;\n  }\n\n  protected nameFromUrl(url: string) {\n    const hostname = Utils.getHostname(url);\n    if (this.isNullOrWhitespace(hostname)) {\n      return null;\n    }\n    return hostname.startsWith(\"www.\") ? hostname.replace(\"www.\", \"\") : hostname;\n  }\n\n  protected isNullOrWhitespace(str: string): boolean {\n    return Utils.isNullOrWhitespace(str);\n  }\n\n  protected getValueOrDefault(str: string, defaultValue: string = null): string {\n    if (this.isNullOrWhitespace(str)) {\n      return defaultValue;\n    }\n    return str;\n  }\n\n  protected splitNewLine(str: string): string[] {\n    return str.split(this.newLineRegex);\n  }\n\n  // ref https://stackoverflow.com/a/5911300\n  protected getCardBrand(cardNum: string) {\n    if (this.isNullOrWhitespace(cardNum)) {\n      return null;\n    }\n\n    // Visa\n    let re = new RegExp(\"^4\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    // Mastercard\n    // Updated for Mastercard 2017 BINs expansion\n    if (\n      /^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$/.test(\n        cardNum\n      )\n    ) {\n      return \"Mastercard\";\n    }\n\n    // AMEX\n    re = new RegExp(\"^3[47]\");\n    if (cardNum.match(re) != null) {\n      return \"Amex\";\n    }\n\n    // Discover\n    re = new RegExp(\n      \"^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)\"\n    );\n    if (cardNum.match(re) != null) {\n      return \"Discover\";\n    }\n\n    // Diners\n    re = new RegExp(\"^36\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // Diners - Carte Blanche\n    re = new RegExp(\"^30[0-5]\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // JCB\n    re = new RegExp(\"^35(2[89]|[3-8][0-9])\");\n    if (cardNum.match(re) != null) {\n      return \"JCB\";\n    }\n\n    // Visa Electron\n    re = new RegExp(\"^(4026|417500|4508|4844|491(3|7))\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    return null;\n  }\n\n  protected setCardExpiration(cipher: CipherView, expiration: string): boolean {\n    if (!this.isNullOrWhitespace(expiration)) {\n      expiration = expiration.replace(/\\s/g, \"\");\n      const parts = expiration.split(\"/\");\n      if (parts.length === 2) {\n        let month: string = null;\n        let year: string = null;\n        if (parts[0].length === 1 || parts[0].length === 2) {\n          month = parts[0];\n          if (month.length === 2 && month[0] === \"0\") {\n            month = month.substr(1, 1);\n          }\n        }\n        if (parts[1].length === 2 || parts[1].length === 4) {\n          year = month.length === 2 ? \"20\" + parts[1] : parts[1];\n        }\n        if (month != null && year != null) {\n          cipher.card.expMonth = month;\n          cipher.card.expYear = year;\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  protected moveFoldersToCollections(result: ImportResult) {\n    result.folderRelationships.forEach((r) => result.collectionRelationships.push(r));\n    result.collections = result.folders.map((f) => {\n      const collection = new CollectionView();\n      collection.name = f.name;\n      collection.id = f.id;\n      return collection;\n    });\n    result.folderRelationships = [];\n    result.folders = [];\n  }\n\n  protected querySelectorDirectChild(parentEl: Element, query: string) {\n    const els = this.querySelectorAllDirectChild(parentEl, query);\n    return els.length === 0 ? null : els[0];\n  }\n\n  protected querySelectorAllDirectChild(parentEl: Element, query: string) {\n    return Array.from(parentEl.querySelectorAll(query)).filter((el) => el.parentNode === parentEl);\n  }\n\n  protected initLoginCipher() {\n    const cipher = new CipherView();\n    cipher.favorite = false;\n    cipher.notes = \"\";\n    cipher.fields = [];\n    cipher.login = new LoginView();\n    cipher.type = CipherType.Login;\n    return cipher;\n  }\n\n  protected cleanupCipher(cipher: CipherView) {\n    if (cipher == null) {\n      return;\n    }\n    if (cipher.type !== CipherType.Login) {\n      cipher.login = null;\n    }\n    if (this.isNullOrWhitespace(cipher.name)) {\n      cipher.name = \"--\";\n    }\n    if (this.isNullOrWhitespace(cipher.notes)) {\n      cipher.notes = null;\n    } else {\n      cipher.notes = cipher.notes.trim();\n    }\n    if (cipher.fields != null && cipher.fields.length === 0) {\n      cipher.fields = null;\n    }\n  }\n\n  protected processKvp(\n    cipher: CipherView,\n    key: string,\n    value: string,\n    type: FieldType = FieldType.Text\n  ) {\n    if (this.isNullOrWhitespace(value)) {\n      return;\n    }\n    if (this.isNullOrWhitespace(key)) {\n      key = \"\";\n    }\n    if (value.length > 200 || value.trim().search(this.newLineRegex) > -1) {\n      if (cipher.notes == null) {\n        cipher.notes = \"\";\n      }\n      cipher.notes += key + \": \" + this.splitNewLine(value).join(\"\\n\") + \"\\n\";\n    } else {\n      if (cipher.fields == null) {\n        cipher.fields = [];\n      }\n      const field = new FieldView();\n      field.type = type;\n      field.name = key;\n      field.value = value;\n      cipher.fields.push(field);\n    }\n  }\n\n  protected processFolder(result: ImportResult, folderName: string) {\n    if (this.isNullOrWhitespace(folderName)) {\n      return;\n    }\n\n    let folderIndex = result.folders.length;\n    // Replace backslashes with forward slashes, ensuring we create sub-folders\n    folderName = folderName.replace(\"\\\\\", \"/\");\n    let addFolder = true;\n\n    for (let i = 0; i < result.folders.length; i++) {\n      if (result.folders[i].name === folderName) {\n        addFolder = false;\n        folderIndex = i;\n        break;\n      }\n    }\n\n    if (addFolder) {\n      const f = new FolderView();\n      f.name = folderName;\n      result.folders.push(f);\n    }\n\n    result.folderRelationships.push([result.ciphers.length, folderIndex]);\n  }\n\n  protected convertToNoteIfNeeded(cipher: CipherView) {\n    if (\n      cipher.type === CipherType.Login &&\n      this.isNullOrWhitespace(cipher.login.username) &&\n      this.isNullOrWhitespace(cipher.login.password) &&\n      (cipher.login.uris == null || cipher.login.uris.length === 0)\n    ) {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    }\n  }\n\n  protected processFullName(cipher: CipherView, fullName: string) {\n    if (this.isNullOrWhitespace(fullName)) {\n      return;\n    }\n\n    const nameParts = fullName.split(\" \");\n    if (nameParts.length > 0) {\n      cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n    }\n    if (nameParts.length === 2) {\n      cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n    } else if (nameParts.length >= 3) {\n      cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n      cipher.identity.lastName = nameParts.slice(2, nameParts.length).join(\" \");\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AscendoCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 2) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const val: string = value[i + 2];\n          const field: string = value[i + 1];\n          if (this.isNullOrWhitespace(val) || this.isNullOrWhitespace(field)) {\n            continue;\n          }\n\n          const fieldLower = field.toLowerCase();\n          if (cipher.login.password == null && this.passwordFieldNames.indexOf(fieldLower) > -1) {\n            cipher.login.password = this.getValueOrDefault(val);\n          } else if (\n            cipher.login.username == null &&\n            this.usernameFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.username = this.getValueOrDefault(val);\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n          } else {\n            this.processKvp(cipher, field, val);\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.login.uris = this.makeUriArray(value.web);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.username = this.getValueOrDefault(value.login);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.logins != null) {\n      results.logins.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.pwd);\n        cipher.login.username = this.getValueOrDefault(value.loginName);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.notes != null) {\n      results.notes.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.name = this.getValueOrDefault(value.label);\n        cipher.notes = this.getValueOrDefault(value.text);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.cards != null) {\n      results.cards.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Card;\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.card.cardholderName = this.getValueOrDefault(value.holderName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        if (value.expirationDate != null) {\n          if (value.expirationDate.month != null) {\n            cipher.card.expMonth = value.expirationDate.month + \"\";\n          }\n          if (value.expirationDate.year != null) {\n            cipher.card.expYear = value.expirationDate.year + \"\";\n          }\n        }\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AviraCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.name,\n        this.getValueOrDefault(this.nameFromUrl(value.website), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.website);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (\n        this.isNullOrWhitespace(value.username) &&\n        !this.isNullOrWhitespace(value.secondary_username)\n      ) {\n        cipher.login.username = value.secondary_username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.notes = this.getValueOrDefault(value.secondary_username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlackBerryCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.grouping === \"list\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.favorite = value.fav === \"1\";\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.extra);\n      if (value.grouping !== \"note\") {\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ChromeCsvImporter extends BaseImporter implements Importer {\n  private androidPatternRegex = new RegExp(\"^android:\\\\/\\\\/.*(?<=@)(.*)(?=\\\\/)\");\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      let name = value.name;\n      if (!name && this.androidPatternRegex.test(value.url)) {\n        name = value.url.match(this.androidPatternRegex)[1];\n      }\n      cipher.name = this.getValueOrDefault(name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\nimport { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.organization && !this.isNullOrWhitespace(value.collections)) {\n        const collections = (value.collections as string).split(\",\");\n        collections.forEach((col) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === col) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = col;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization) {\n        this.processFolder(result, value.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.favorite =\n        !this.organization && this.getValueOrDefault(value.favorite, \"0\") !== \"0\" ? true : false;\n      cipher.type = CipherType.Login;\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      try {\n        cipher.reprompt = parseInt(\n          this.getValueOrDefault(value.reprompt, CipherRepromptType.None.toString()),\n          10\n        );\n      } catch (e) {\n        // eslint-disable-next-line\n        console.error(\"Unable to parse reprompt value\", e);\n        cipher.reprompt = CipherRepromptType.None;\n      }\n\n      if (!this.isNullOrWhitespace(value.fields)) {\n        const fields = this.splitNewLine(value.fields);\n        for (let i = 0; i < fields.length; i++) {\n          if (this.isNullOrWhitespace(fields[i])) {\n            continue;\n          }\n\n          const delimPosition = fields[i].lastIndexOf(\": \");\n          if (delimPosition === -1) {\n            continue;\n          }\n\n          if (cipher.fields == null) {\n            cipher.fields = [];\n          }\n\n          const field = new FieldView();\n          field.name = fields[i].substr(0, delimPosition);\n          field.value = null;\n          field.type = FieldType.Text;\n          if (fields[i].length > delimPosition + 2) {\n            field.value = fields[i].substr(delimPosition + 2);\n          }\n          cipher.fields.push(field);\n        }\n      }\n\n      const valueType = value.type != null ? value.type.toLowerCase() : null;\n      switch (valueType) {\n        case \"note\":\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote = new SecureNoteView();\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default: {\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.totp = this.getValueOrDefault(value.login_totp || value.totp);\n          cipher.login.username = this.getValueOrDefault(value.login_username || value.username);\n          cipher.login.password = this.getValueOrDefault(value.login_password || value.password);\n          const uris = this.parseSingleRowCsv(value.login_uri || value.uri);\n          cipher.login.uris = this.makeUriArray(uris);\n          break;\n        }\n      }\n\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { CipherWithIdExport } from \"@bitwarden/common/models/export/cipher-with-ids.export\";\nimport { CollectionWithIdExport } from \"@bitwarden/common/models/export/collection-with-id.export\";\nimport { FolderWithIdExport } from \"@bitwarden/common/models/export/folder-with-id.export\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenJsonImporter extends BaseImporter implements Importer {\n  private results: any;\n  private result: ImportResult;\n\n  protected constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService\n  ) {\n    super();\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    this.results = JSON.parse(data);\n    if (this.results == null || this.results.items == null) {\n      this.result.success = false;\n      return this.result;\n    }\n\n    if (this.results.encrypted) {\n      await this.parseEncrypted();\n    } else {\n      this.parseDecrypted();\n    }\n\n    return this.result;\n  }\n\n  private async parseEncrypted() {\n    if (this.results.encKeyValidation_DO_NOT_EDIT != null) {\n      const orgKey = await this.cryptoService.getOrgKey(this.organizationId);\n      const encKeyValidation = new EncString(this.results.encKeyValidation_DO_NOT_EDIT);\n      const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n        encKeyValidation,\n        orgKey\n      );\n      if (encKeyValidationDecrypt === null) {\n        this.result.success = false;\n        this.result.errorMessage = this.i18nService.t(\"importEncKeyError\");\n        return;\n      }\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    if (this.organization && this.results.collections != null) {\n      for (const c of this.results.collections as CollectionWithIdExport[]) {\n        const collection = CollectionWithIdExport.toDomain(c);\n        if (collection != null) {\n          collection.organizationId = this.organizationId;\n          const view = await collection.decrypt();\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(view);\n        }\n      }\n    } else if (!this.organization && this.results.folders != null) {\n      for (const f of this.results.folders as FolderWithIdExport[]) {\n        const folder = FolderWithIdExport.toDomain(f);\n        if (folder != null) {\n          const view = await folder.decrypt();\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(view);\n        }\n      }\n    }\n\n    for (const c of this.results.items as CipherWithIdExport[]) {\n      const cipher = CipherWithIdExport.toDomain(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = this.organizationId;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      const view = await cipher.decrypt();\n      this.cleanupCipher(view);\n      this.result.ciphers.push(view);\n    }\n\n    this.result.success = true;\n  }\n\n  private parseDecrypted() {\n    const groupingsMap = new Map<string, number>();\n    if (this.organization && this.results.collections != null) {\n      this.results.collections.forEach((c: CollectionWithIdExport) => {\n        const collection = CollectionWithIdExport.toView(c);\n        if (collection != null) {\n          collection.organizationId = null;\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(collection);\n        }\n      });\n    } else if (!this.organization && this.results.folders != null) {\n      this.results.folders.forEach((f: FolderWithIdExport) => {\n        const folder = FolderWithIdExport.toView(f);\n        if (folder != null) {\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(folder);\n        }\n      });\n    }\n\n    this.results.items.forEach((c: CipherWithIdExport) => {\n      const cipher = CipherWithIdExport.toView(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = null;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n  }\n}\n","import { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { KdfConfig } from \"@bitwarden/common/auth/models/domain/kdf-config\";\nimport { KdfType } from \"@bitwarden/common/enums\";\nimport { EncString } from \"@bitwarden/common/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/models/domain/symmetric-crypto-key\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { Importer } from \"../importer\";\n\nimport { BitwardenJsonImporter } from \"./bitwarden-json-importer\";\nimport { BitwardenPasswordProtectedFileFormat } from \"./bitwarden-password-protected-types\";\nexport class BitwardenPasswordProtectedImporter extends BitwardenJsonImporter implements Importer {\n  private key: SymmetricCryptoKey;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    private promptForPassword_callback: () => Promise<string>\n  ) {\n    super(cryptoService, i18nService);\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const parsedData: BitwardenPasswordProtectedFileFormat = JSON.parse(data);\n\n    if (!parsedData) {\n      result.success = false;\n      return result;\n    }\n\n    // File is unencrypted\n    if (!parsedData?.encrypted) {\n      return await super.parse(data);\n    }\n\n    // File is account-encrypted\n    if (!parsedData?.passwordProtected) {\n      return await super.parse(data);\n    }\n\n    if (this.cannotParseFile(parsedData)) {\n      result.success = false;\n      return result;\n    }\n\n    // File is password-protected\n    const password = await this.promptForPassword_callback();\n    if (!(await this.checkPassword(parsedData, password))) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"invalidFilePassword\");\n      return result;\n    }\n\n    const encData = new EncString(parsedData.data);\n    const clearTextData = await this.cryptoService.decryptToUtf8(encData, this.key);\n    return await super.parse(clearTextData);\n  }\n\n  private async checkPassword(\n    jdoc: BitwardenPasswordProtectedFileFormat,\n    password: string\n  ): Promise<boolean> {\n    this.key = await this.cryptoService.makePinKey(\n      password,\n      jdoc.salt,\n      jdoc.kdfType,\n      new KdfConfig(jdoc.kdfIterations, jdoc.kdfMemory, jdoc.kdfParallelism)\n    );\n\n    const encKeyValidation = new EncString(jdoc.encKeyValidation_DO_NOT_EDIT);\n\n    const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n      encKeyValidation,\n      this.key\n    );\n    if (encKeyValidationDecrypt === null) {\n      return false;\n    }\n    return true;\n  }\n\n  private cannotParseFile(jdoc: BitwardenPasswordProtectedFileFormat): boolean {\n    return (\n      !jdoc ||\n      !jdoc.encrypted ||\n      !jdoc.passwordProtected ||\n      !jdoc.salt ||\n      !jdoc.kdfIterations ||\n      typeof jdoc.kdfIterations !== \"number\" ||\n      jdoc.kdfType == null ||\n      KdfType[jdoc.kdfType] == null ||\n      !jdoc.encKeyValidation_DO_NOT_EDIT ||\n      !jdoc.data\n    );\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlurCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.label === \"null\") {\n        value.label = null;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.label,\n        this.getValueOrDefault(this.nameFromUrl(value.domain), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.domain);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (this.isNullOrWhitespace(value.email) && !this.isNullOrWhitespace(value.username)) {\n        cipher.login.username = value.username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.email);\n        cipher.notes = this.getValueOrDefault(value.username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst OfficialProps = [\"!group_id\", \"!group_name\", \"title\", \"username\", \"password\", \"URL\", \"id\"];\n\nexport class ButtercupCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value[\"!group_name\"]));\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      let processingCustomFields = false;\n      for (const prop in value) {\n        // eslint-disable-next-line\n        if (value.hasOwnProperty(prop)) {\n          if (!processingCustomFields && OfficialProps.indexOf(prop) === -1) {\n            processingCustomFields = true;\n          }\n          if (processingCustomFields) {\n            this.processKvp(cipher, prop, value[prop]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ClipperzHtmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const textarea = doc.querySelector(\"textarea\");\n    if (textarea == null || this.isNullOrWhitespace(textarea.textContent)) {\n      result.errorMessage = \"Missing textarea.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const entries = JSON.parse(textarea.textContent);\n    entries.forEach((entry: any) => {\n      const cipher = this.initLoginCipher();\n      if (!this.isNullOrWhitespace(entry.label)) {\n        cipher.name = entry.label.split(\" \")[0];\n      }\n      if (entry.data != null && !this.isNullOrWhitespace(entry.data.notes)) {\n        cipher.notes = entry.data.notes.split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (entry.currentVersion != null && entry.currentVersion.fields != null) {\n        for (const property in entry.currentVersion.fields) {\n          // eslint-disable-next-line\n          if (!entry.currentVersion.fields.hasOwnProperty(property)) {\n            continue;\n          }\n\n          const field = entry.currentVersion.fields[property];\n          const actionType = field.actionType != null ? field.actionType.toLowerCase() : null;\n          switch (actionType) {\n            case \"password\":\n              cipher.login.password = this.getValueOrDefault(field.value);\n              break;\n            case \"email\":\n            case \"username\":\n            case \"user\":\n            case \"name\":\n              cipher.login.username = this.getValueOrDefault(field.value);\n              break;\n            case \"url\":\n              cipher.login.uris = this.makeUriArray(field.value);\n              break;\n            default: {\n              const labelLower = field.label != null ? field.label.toLowerCase() : null;\n              if (\n                cipher.login.password == null &&\n                this.passwordFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.password = this.getValueOrDefault(field.value);\n              } else if (\n                cipher.login.username == null &&\n                this.usernameFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.username = this.getValueOrDefault(field.value);\n              } else if (\n                (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n                this.uriFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.uris = this.makeUriArray(field.value);\n              } else {\n                this.processKvp(cipher, field.label, field.value);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class CodebookCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value.Category));\n\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite) === \"True\";\n      cipher.name = this.getValueOrDefault(value.Entry, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.login.username = this.getValueOrDefault(value.Username, value.Email);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.totp = this.getValueOrDefault(value.TOTP);\n      cipher.login.uris = this.makeUriArray(value.Website);\n\n      if (!this.isNullOrWhitespace(value.Username)) {\n        this.processKvp(cipher, \"Email\", value.Email);\n      }\n      this.processKvp(cipher, \"Phone\", value.Phone);\n      this.processKvp(cipher, \"PIN\", value.PIN);\n      this.processKvp(cipher, \"Account\", value.Account);\n      this.processKvp(cipher, \"Date\", value.Date);\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CredentialsRecord,\n  IdRecord,\n  PaymentsRecord,\n  PersonalInformationRecord,\n  SecureNoteRecord,\n} from \"./types/dashlane-csv-types\";\n\nconst _mappedCredentialsColums = new Set([\n  \"title\",\n  \"note\",\n  \"username\",\n  \"password\",\n  \"url\",\n  \"otpSecret\",\n  \"category\",\n]);\n\nconst _mappedPersonalInfoAsIdentiyColumns = new Set([\n  \"type\",\n  \"title\",\n  \"first_name\",\n  \"middle_name\",\n  \"last_name\",\n  \"login\",\n  \"email\",\n  \"phone_number\",\n  \"address\",\n  \"country\",\n  \"state\",\n  \"city\",\n  \"zip\",\n  // Skip item_name as we already have set a combined name\n  \"item_name\",\n]);\n\nconst _mappedSecureNoteColumns = new Set([\"title\", \"note\"]);\n\nexport class DashlaneCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results[0].type != null && results[0].title != null) {\n      const personalRecords = results as PersonalInformationRecord[];\n\n      // If personalRecords has only one \"name\" then create an Identity-Cipher\n      if (personalRecords.filter((x) => x.type === \"name\").length === 1) {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        results.forEach((row) => {\n          this.parsePersonalInformationRecordAsIdentity(cipher, row);\n        });\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n        result.success = true;\n        return Promise.resolve(result);\n      }\n    }\n\n    results.forEach((row) => {\n      const cipher = this.initLoginCipher();\n\n      const rowKeys = Object.keys(row);\n      if (rowKeys[0] === \"username\") {\n        this.processFolder(result, row.category);\n        this.parseCredentialsRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"account_name\") {\n        this.parsePaymentRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"number\") {\n        this.parseIdRecord(cipher, row);\n      }\n\n      if ((rowKeys[0] === \"type\") != null && rowKeys[1] === \"title\") {\n        this.parsePersonalInformationRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"title\" && rowKeys[1] === \"note\") {\n        this.parseSecureNoteRecords(cipher, row);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  parseCredentialsRecord(cipher: CipherView, row: CredentialsRecord) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    cipher.name = row.title;\n    cipher.notes = row.note;\n    cipher.login.username = row.username;\n    cipher.login.password = row.password;\n    cipher.login.totp = row.otpSecret;\n    cipher.login.uris = this.makeUriArray(row.url);\n\n    this.importUnmappedFields(cipher, row, _mappedCredentialsColums);\n  }\n\n  parsePaymentRecord(cipher: CipherView, row: PaymentsRecord) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n\n    cipher.name = row.account_name;\n    let mappedValues: string[] = [];\n    switch (row.type) {\n      case \"credit_card\":\n        cipher.card.cardholderName = row.account_name;\n        cipher.card.number = row.cc_number;\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = row.code;\n        this.setCardExpiration(cipher, `${row.expiration_month}/${row.expiration_year}`);\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\n          \"account_name\",\n          \"account_holder\",\n          \"cc_number\",\n          \"code\",\n          \"expiration_month\",\n          \"expiration_year\",\n        ];\n        break;\n      case \"bank\":\n        cipher.card.cardholderName = row.account_holder;\n        cipher.card.number = row.account_number;\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\"account_name\", \"account_holder\", \"account_number\"];\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parseIdRecord(cipher: CipherView, row: IdRecord) {\n    cipher.type = CipherType.Identity;\n    cipher.identity = new IdentityView();\n\n    const mappedValues: string[] = [\"name\", \"number\"];\n    switch (row.type) {\n      case \"card\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        break;\n      case \"passport\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.passportNumber = row.number;\n        break;\n      case \"license\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        cipher.identity.state = row.state;\n\n        mappedValues.push(\"state\");\n        break;\n      case \"social_security\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.ssn = row.number;\n        break;\n      case \"tax_number\":\n        cipher.name = row.type;\n        cipher.identity.licenseNumber = row.number;\n        break;\n\n      default:\n        break;\n    }\n\n    // If you add more mapped fields please extend this\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parsePersonalInformationRecord(cipher: CipherView, row: PersonalInformationRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    if (row.type === \"name\") {\n      cipher.name = `${row.title} ${row.first_name} ${row.middle_name} ${row.last_name}`\n        .replace(\"  \", \" \")\n        .trim();\n    } else {\n      cipher.name = row.item_name;\n    }\n\n    const dataRow = row as any;\n    Object.keys(row).forEach((key) => {\n      this.processKvp(cipher, key, dataRow[key]);\n    });\n  }\n\n  parsePersonalInformationRecordAsIdentity(cipher: CipherView, row: PersonalInformationRecord) {\n    switch (row.type) {\n      case \"name\":\n        this.processFullName(cipher, `${row.first_name} ${row.middle_name} ${row.last_name}`);\n        cipher.identity.title = row.title;\n        cipher.name = cipher.identity.fullName;\n\n        cipher.identity.username = row.login;\n        break;\n      case \"email\":\n        cipher.identity.email = row.email;\n        break;\n      case \"number\":\n        cipher.identity.phone = row.phone_number;\n        break;\n      case \"address\":\n        cipher.identity.address1 = row.address;\n        cipher.identity.city = row.city;\n        cipher.identity.postalCode = row.zip;\n        cipher.identity.state = row.state;\n        cipher.identity.country = row.country;\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, _mappedPersonalInfoAsIdentiyColumns);\n  }\n\n  parseSecureNoteRecords(cipher: CipherView, row: SecureNoteRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = row.title;\n    cipher.notes = row.note;\n\n    this.importUnmappedFields(cipher, row, _mappedSecureNoteColumns);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nconst HandledResults = new Set([\n  \"ADDRESS\",\n  \"AUTHENTIFIANT\",\n  \"BANKSTATEMENT\",\n  \"IDCARD\",\n  \"IDENTITY\",\n  \"PAYMENTMEANS_CREDITCARD\",\n  \"PAYMENTMEAN_PAYPAL\",\n  \"EMAIL\",\n]);\n\nexport class DashlaneJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    if (results.ADDRESS != null) {\n      this.processAddress(results.ADDRESS);\n    }\n    if (results.AUTHENTIFIANT != null) {\n      this.processAuth(results.AUTHENTIFIANT);\n    }\n    if (results.BANKSTATEMENT != null) {\n      this.processNote(results.BANKSTATEMENT, \"BankAccountName\");\n    }\n    if (results.IDCARD != null) {\n      this.processNote(results.IDCARD, \"Fullname\");\n    }\n    if (results.PAYMENTMEANS_CREDITCARD != null) {\n      this.processCard(results.PAYMENTMEANS_CREDITCARD);\n    }\n    if (results.IDENTITY != null) {\n      this.processIdentity(results.IDENTITY);\n    }\n\n    for (const key in results) {\n      // eslint-disable-next-line\n      if (results.hasOwnProperty(key) && !HandledResults.has(key)) {\n        this.processNote(results[key], null, \"Generic Note\");\n      }\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processAuth(results: any[]) {\n    results.forEach((credential: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(credential.title);\n\n      cipher.login.username = this.getValueOrDefault(\n        credential.login,\n        this.getValueOrDefault(credential.secondaryLogin)\n      );\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.domain);\n      cipher.notes += this.getValueOrDefault(credential.note, \"\");\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processIdentity(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.fullName, \"\");\n      const nameParts = cipher.name.split(\" \");\n      if (nameParts.length > 0) {\n        cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n      }\n      if (nameParts.length === 2) {\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n      } else if (nameParts.length === 3) {\n        cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[2]);\n      }\n      cipher.identity.username = this.getValueOrDefault(obj.pseudo);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processAddress(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.addressName);\n      cipher.identity.address1 = this.getValueOrDefault(obj.addressFull);\n      cipher.identity.city = this.getValueOrDefault(obj.city);\n      cipher.identity.state = this.getValueOrDefault(obj.state);\n      cipher.identity.postalCode = this.getValueOrDefault(obj.zipcode);\n      cipher.identity.country = this.getValueOrDefault(obj.country);\n      if (cipher.identity.country != null) {\n        cipher.identity.country = cipher.identity.country.toUpperCase();\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processCard(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.card = new CardView();\n      cipher.type = CipherType.Card;\n      cipher.name = this.getValueOrDefault(obj.bank);\n      cipher.card.number = this.getValueOrDefault(obj.cardNumber);\n      cipher.card.brand = this.getCardBrand(cipher.card.number);\n      cipher.card.cardholderName = this.getValueOrDefault(obj.owner);\n      if (!this.isNullOrWhitespace(cipher.card.brand)) {\n        if (this.isNullOrWhitespace(cipher.name)) {\n          cipher.name = cipher.card.brand;\n        } else {\n          cipher.name += \" - \" + cipher.card.brand;\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processNote(results: any[], nameProperty: string, name: string = null) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.secureNote = new SecureNoteView();\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote.type = SecureNoteType.Generic;\n      if (name != null) {\n        cipher.name = name;\n      } else {\n        cipher.name = this.getValueOrDefault(obj[nameProperty]);\n      }\n      for (const key in obj) {\n        // eslint-disable-next-line\n        if (obj.hasOwnProperty(key) && key !== nameProperty) {\n          this.processKvp(cipher, key, obj[key].toString());\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class EncryptrCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Label, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      const text = this.getValueOrDefault(value.Text);\n      if (!this.isNullOrWhitespace(text)) {\n        if (this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = text;\n        } else {\n          cipher.notes += \"\\n\\n\" + text;\n        }\n      }\n\n      const type = value[\"Entry Type\"];\n      if (type === \"Password\") {\n        cipher.login.username = this.getValueOrDefault(value.Username);\n        cipher.login.password = this.getValueOrDefault(value.Password);\n        cipher.login.uris = this.makeUriArray(value[\"Site URL\"]);\n      } else if (type === \"Credit Card\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value[\"Name on card\"]);\n        cipher.card.number = this.getValueOrDefault(value[\"Card Number\"]);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.CVV);\n        const expiry = this.getValueOrDefault(value.Expiry);\n        if (!this.isNullOrWhitespace(expiry)) {\n          const expParts = expiry.split(\"/\");\n          if (expParts.length > 1) {\n            cipher.card.expMonth = parseInt(expParts[0], null).toString();\n            cipher.card.expYear = (2000 + parseInt(expParts[1], null)).toString();\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class EnpassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let firstRow = true;\n    results.forEach((value) => {\n      if (value.length < 2 || (firstRow && (value[0] === \"Title\" || value[0] === \"title\"))) {\n        firstRow = false;\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (\n        value.length === 2 ||\n        (!this.containsField(value, \"username\") &&\n          !this.containsField(value, \"password\") &&\n          !this.containsField(value, \"email\") &&\n          !this.containsField(value, \"url\"))\n      ) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      }\n\n      if (\n        this.containsField(value, \"cardholder\") &&\n        this.containsField(value, \"number\") &&\n        this.containsField(value, \"expiry date\")\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      }\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const fieldValue: string = value[i + 2];\n          if (this.isNullOrWhitespace(fieldValue)) {\n            continue;\n          }\n\n          const fieldName: string = value[i + 1];\n          const fieldNameLower = fieldName.toLowerCase();\n\n          if (cipher.type === CipherType.Login) {\n            if (\n              fieldNameLower === \"url\" &&\n              (cipher.login.uris == null || cipher.login.uris.length === 0)\n            ) {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              continue;\n            } else if (\n              (fieldNameLower === \"username\" || fieldNameLower === \"email\") &&\n              this.isNullOrWhitespace(cipher.login.username)\n            ) {\n              cipher.login.username = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"password\" &&\n              this.isNullOrWhitespace(cipher.login.password)\n            ) {\n              cipher.login.password = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n              cipher.login.totp = fieldValue;\n              continue;\n            }\n          } else if (cipher.type === CipherType.Card) {\n            if (\n              fieldNameLower === \"cardholder\" &&\n              this.isNullOrWhitespace(cipher.card.cardholderName)\n            ) {\n              cipher.card.cardholderName = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"number\" && this.isNullOrWhitespace(cipher.card.number)) {\n              cipher.card.number = fieldValue;\n              cipher.card.brand = this.getCardBrand(fieldValue);\n              continue;\n            } else if (fieldNameLower === \"cvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n              cipher.card.code = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"expiry date\" &&\n              this.isNullOrWhitespace(cipher.card.expMonth) &&\n              this.isNullOrWhitespace(cipher.card.expYear)\n            ) {\n              if (this.setCardExpiration(cipher, fieldValue)) {\n                continue;\n              }\n            } else if (fieldNameLower === \"type\") {\n              // Skip since brand was determined from number above\n              continue;\n            }\n          }\n\n          this.processKvp(cipher, fieldName, fieldValue);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private containsField(fields: any[], name: string) {\n    if (fields == null || name == null) {\n      return false;\n    }\n    return (\n      fields.filter((f) => !this.isNullOrWhitespace(f) && f.toLowerCase() === name.toLowerCase())\n        .length > 0\n    );\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { EnpassJsonFile, EnpassFolder, EnpassField } from \"./types/enpass-json-type\";\n\ntype EnpassFolderTreeItem = EnpassFolder & { children: EnpassFolderTreeItem[] };\nconst androidUrlRegex = new RegExp(\"androidapp://.*==@\", \"g\");\n\nexport class EnpassJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: EnpassJsonFile = JSON.parse(data);\n    if (results == null || results.items == null || results.items.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    const foldersIndexMap = new Map<string, number>();\n    const folderTree = this.buildFolderTree(results.folders);\n    this.flattenFolderTree(null, folderTree, foldersMap);\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((item) => {\n      if (item.folders != null && item.folders.length > 0 && foldersIndexMap.has(item.folders[0])) {\n        result.folderRelationships.push([\n          result.ciphers.length,\n          foldersIndexMap.get(item.folders[0]),\n        ]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(item.title);\n      cipher.favorite = item.favorite > 0;\n\n      if (item.template_type != null && item.fields != null && item.fields.length > 0) {\n        if (\n          item.template_type.indexOf(\"login.\") === 0 ||\n          item.template_type.indexOf(\"password.\") === 0\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else if (item.template_type.indexOf(\"creditcard.\") === 0) {\n          this.processCard(cipher, item.fields);\n        } else if (\n          item.template_type.indexOf(\"identity.\") < 0 &&\n          item.fields.some((f) => f.type === \"password\" && !this.isNullOrWhitespace(f.value))\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else {\n          this.processNote(cipher, item.fields);\n        }\n      }\n\n      cipher.notes += \"\\n\" + this.getValueOrDefault(item.note, \"\");\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private processLogin(cipher: CipherView, fields: EnpassField[]) {\n    const urls: string[] = [];\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n\n      if (\n        (field.type === \"username\" || field.type === \"email\") &&\n        this.isNullOrWhitespace(cipher.login.username)\n      ) {\n        cipher.login.username = field.value;\n      } else if (field.type === \"password\" && this.isNullOrWhitespace(cipher.login.password)) {\n        cipher.login.password = field.value;\n      } else if (field.type === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n        cipher.login.totp = field.value;\n      } else if (field.type === \"url\") {\n        urls.push(field.value);\n      } else if (field.type === \".Android#\") {\n        let cleanedValue = field.value.startsWith(\"androidapp://\")\n          ? field.value\n          : \"androidapp://\" + field.value;\n        cleanedValue = cleanedValue.replace(\"android://\", \"\");\n        cleanedValue = cleanedValue.replace(androidUrlRegex, \"androidapp://\");\n        urls.push(cleanedValue);\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n    cipher.login.uris = this.makeUriArray(urls);\n  }\n\n  private processCard(cipher: CipherView, fields: EnpassField[]) {\n    cipher.card = new CardView();\n    cipher.type = CipherType.Card;\n    fields.forEach((field) => {\n      if (\n        this.isNullOrWhitespace(field.value) ||\n        field.type === \"section\" ||\n        field.type === \"ccType\"\n      ) {\n        return;\n      }\n\n      if (field.type === \"ccName\" && this.isNullOrWhitespace(cipher.card.cardholderName)) {\n        cipher.card.cardholderName = field.value;\n      } else if (field.type === \"ccNumber\" && this.isNullOrWhitespace(cipher.card.number)) {\n        cipher.card.number = field.value;\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n      } else if (field.type === \"ccCvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n        cipher.card.code = field.value;\n      } else if (field.type === \"ccExpiry\" && this.isNullOrWhitespace(cipher.card.expYear)) {\n        if (!this.setCardExpiration(cipher, field.value)) {\n          this.processKvp(\n            cipher,\n            field.label,\n            field.value,\n            field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n          );\n        }\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n  }\n\n  private processNote(cipher: CipherView, fields: EnpassField[]) {\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n      this.processKvp(\n        cipher,\n        field.label,\n        field.value,\n        field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n      );\n    });\n  }\n\n  private buildFolderTree(folders: EnpassFolder[]): EnpassFolderTreeItem[] {\n    if (folders == null) {\n      return [];\n    }\n    const folderTree: EnpassFolderTreeItem[] = [];\n    const map = new Map<string, EnpassFolderTreeItem>([]);\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      map.set(obj.uuid, obj);\n      obj.children = [];\n    });\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      if (obj.parent_uuid != null && obj.parent_uuid !== \"\" && map.has(obj.parent_uuid)) {\n        map.get(obj.parent_uuid).children.push(obj);\n      } else {\n        folderTree.push(obj);\n      }\n    });\n    return folderTree;\n  }\n\n  private flattenFolderTree(\n    titlePrefix: string,\n    tree: EnpassFolderTreeItem[],\n    map: Map<string, string>\n  ) {\n    if (tree == null) {\n      return;\n    }\n    tree.forEach((f) => {\n      if (f.title != null && f.title.trim() !== \"\") {\n        let title = f.title.trim();\n        if (titlePrefix != null && titlePrefix.trim() !== \"\") {\n          title = titlePrefix + \"/\" + title;\n        }\n        map.set(f.uuid, title);\n        if (f.children != null && f.children.length !== 0) {\n          this.flattenFolderTree(title, f.children, map);\n        }\n      }\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class FirefoxCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results\n      .filter((value) => {\n        return value.url !== \"chrome://FirefoxAccounts\";\n      })\n      .forEach((value) => {\n        const cipher = this.initLoginCipher();\n        const url = this.getValueOrDefault(value.url, this.getValueOrDefault(value.hostname));\n        cipher.name = this.getValueOrDefault(this.nameFromUrl(url), \"--\");\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.uris = this.makeUriArray(url);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export interface FskFile {\n  data: Data;\n}\n\nexport interface Data {\n  [key: string]: FskEntry;\n}\n\nexport enum FskEntryTypesEnum {\n  Login = 1,\n  CreditCard = 2,\n}\n\nexport interface FskEntry {\n  color: string;\n  creditCvv: string;\n  creditExpiry: string;\n  creditNumber: string;\n  favorite: number; // UNIX timestamp\n  notes: string;\n  password: string;\n  passwordList: PasswordList[];\n  passwordModifiedDate: number; // UNIX timestamp\n  rev: string | number;\n  service: string;\n  style: string;\n  type: FskEntryTypesEnum;\n  url: string;\n  username: string;\n  createdDate: number; // UNIX timestamp\n  modifiedDate: number; // UNIX timestamp\n}\n\nexport interface PasswordList {\n  changedate: string;\n  password: string;\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { FskEntry, FskEntryTypesEnum, FskFile } from \"./fsecure-fsk-types\";\n\nexport class FSecureFskImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: FskFile = JSON.parse(data);\n    if (results == null || results.data == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const key in results.data) {\n      // eslint-disable-next-line\n      if (!results.data.hasOwnProperty(key)) {\n        continue;\n      }\n\n      const value = results.data[key];\n      const cipher = this.parseEntry(value);\n      result.ciphers.push(cipher);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseEntry(entry: FskEntry): CipherView {\n    const cipher = this.initLoginCipher();\n    cipher.name = this.getValueOrDefault(entry.service);\n    cipher.notes = this.getValueOrDefault(entry.notes);\n    cipher.favorite = entry.favorite > 0;\n\n    switch (entry.type) {\n      case FskEntryTypesEnum.Login:\n        this.handleLoginEntry(entry, cipher);\n        break;\n      case FskEntryTypesEnum.CreditCard:\n        this.handleCreditCardEntry(entry, cipher);\n        break;\n      default:\n        return;\n        break;\n    }\n\n    this.convertToNoteIfNeeded(cipher);\n    this.cleanupCipher(cipher);\n    return cipher;\n  }\n\n  private handleLoginEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.login.username = this.getValueOrDefault(entry.username);\n    cipher.login.password = this.getValueOrDefault(entry.password);\n    cipher.login.uris = this.makeUriArray(entry.url);\n  }\n\n  private handleCreditCardEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n    cipher.card.cardholderName = this.getValueOrDefault(entry.username);\n    cipher.card.number = this.getValueOrDefault(entry.creditNumber);\n    cipher.card.brand = this.getCardBrand(cipher.card.number);\n    cipher.card.code = this.getValueOrDefault(entry.creditCvv);\n    if (!this.isNullOrWhitespace(entry.creditExpiry)) {\n      if (!this.setCardExpiration(cipher, entry.creditExpiry)) {\n        this.processKvp(cipher, \"Expiration\", entry.creditExpiry);\n      }\n    }\n    if (!this.isNullOrWhitespace(entry.password)) {\n      this.processKvp(cipher, \"PIN\", entry.password);\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class GnomeJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || Object.keys(results).length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const keyRing in results) {\n      if (\n        !results.hasOwnProperty(keyRing) || // eslint-disable-line\n        this.isNullOrWhitespace(keyRing) ||\n        results[keyRing].length === 0\n      ) {\n        continue;\n      }\n\n      results[keyRing].forEach((value: any) => {\n        if (\n          this.isNullOrWhitespace(value.display_name) ||\n          value.display_name.indexOf(\"http\") !== 0\n        ) {\n          return;\n        }\n\n        this.processFolder(result, keyRing);\n        const cipher = this.initLoginCipher();\n        cipher.name = value.display_name.replace(\"http://\", \"\").replace(\"https://\", \"\");\n        if (cipher.name.length > 30) {\n          cipher.name = cipher.name.substring(0, 30);\n        }\n        cipher.login.password = this.getValueOrDefault(value.secret);\n        cipher.login.uris = this.makeUriArray(value.display_name);\n\n        if (value.attributes != null) {\n          cipher.login.username =\n            value.attributes != null\n              ? this.getValueOrDefault(value.attributes.username_value)\n              : null;\n          for (const attr in value.attributes) {\n            if (\n              !value.attributes.hasOwnProperty(attr) || // eslint-disable-line\n              attr === \"username_value\" ||\n              attr === \"xdg:schema\"\n            ) {\n              continue;\n            }\n            this.processKvp(cipher, attr, value.attributes[attr]);\n          }\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst NotesHeader = \"Notes\\n\\n\";\nconst ApplicationsHeader = \"Applications\\n\\n\";\nconst WebsitesHeader = \"Websites\\n\\n\";\nconst Delimiter = \"\\n---\\n\";\n\nexport class KasperskyTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n\n    let notesData: string;\n    let applicationsData: string;\n    let websitesData: string;\n    let workingData = this.splitNewLine(data).join(\"\\n\");\n\n    if (workingData.indexOf(NotesHeader) !== -1) {\n      const parts = workingData.split(NotesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        notesData = parts[1];\n      }\n    }\n    if (workingData.indexOf(ApplicationsHeader) !== -1) {\n      const parts = workingData.split(ApplicationsHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        applicationsData = parts[1];\n      }\n    }\n    if (workingData.indexOf(WebsitesHeader) === 0) {\n      const parts = workingData.split(WebsitesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        websitesData = parts[1];\n      }\n    }\n\n    const notes = this.parseDataCategory(notesData);\n    const applications = this.parseDataCategory(applicationsData);\n    const websites = this.parseDataCategory(websitesData);\n\n    notes.forEach((n) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(n.get(\"Name\"));\n      cipher.notes = this.getValueOrDefault(n.get(\"Text\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    websites.concat(applications).forEach((w) => {\n      const cipher = this.initLoginCipher();\n      const nameKey = w.has(\"Website name\") ? \"Website name\" : \"Application\";\n      cipher.name = this.getValueOrDefault(w.get(nameKey), \"\");\n      if (!this.isNullOrWhitespace(w.get(\"Login name\"))) {\n        if (!this.isNullOrWhitespace(cipher.name)) {\n          cipher.name += \": \";\n        }\n        cipher.name += w.get(\"Login name\");\n      }\n      cipher.notes = this.getValueOrDefault(w.get(\"Comment\"));\n      if (w.has(\"Website URL\")) {\n        cipher.login.uris = this.makeUriArray(w.get(\"Website URL\"));\n      }\n      cipher.login.username = this.getValueOrDefault(w.get(\"Login\"));\n      cipher.login.password = this.getValueOrDefault(w.get(\"Password\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseDataCategory(data: string): Map<string, string>[] {\n    if (this.isNullOrWhitespace(data) || data.indexOf(Delimiter) === -1) {\n      return [];\n    }\n    const items: Map<string, string>[] = [];\n    data.split(Delimiter).forEach((p) => {\n      if (p.indexOf(\"\\n\") === -1) {\n        return;\n      }\n      const item = new Map<string, string>();\n      let itemComment: string;\n      let itemCommentKey: string;\n      p.split(\"\\n\").forEach((l) => {\n        if (itemComment != null) {\n          itemComment += \"\\n\" + l;\n          return;\n        }\n        const colonIndex = l.indexOf(\":\");\n        let key: string;\n        let val: string;\n        if (colonIndex === -1) {\n          return;\n        } else {\n          key = l.substring(0, colonIndex);\n          if (l.length > colonIndex + 1) {\n            val = l.substring(colonIndex + 2);\n          }\n        }\n        if (key != null) {\n          item.set(key, val);\n        }\n        if (key === \"Comment\" || key === \"Text\") {\n          itemComment = val;\n          itemCommentKey = key;\n        }\n      });\n      if (itemComment != null && itemCommentKey != null) {\n        item.set(itemCommentKey, itemComment);\n      }\n      if (item.size === 0) {\n        return;\n      }\n      items.push(item);\n    });\n    return items;\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePass2XmlImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    //Note: The doc.querySelector(\"KeePassFile > Root > Group\") no longers works on node and we have to breakdown the query by nodes\n    const KeePassFileNode = doc.querySelector(\"KeePassFile\");\n\n    if (KeePassFileNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const RootNode = KeePassFileNode.querySelector(\"Root\");\n    if (RootNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const rootGroup = RootNode.querySelector(\"Group\");\n    if (rootGroup == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root > Group` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    this.traverse(rootGroup, true, \"\");\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  traverse(node: Element, isRootNode: boolean, groupPrefixName: string) {\n    const folderIndex = this.result.folders.length;\n    let groupName = groupPrefixName;\n\n    if (!isRootNode) {\n      if (groupName !== \"\") {\n        groupName += \"/\";\n      }\n      const nameEl = this.querySelectorDirectChild(node, \"Name\");\n      groupName += nameEl == null ? \"-\" : nameEl.textContent;\n      const folder = new FolderView();\n      folder.name = groupName;\n      this.result.folders.push(folder);\n    }\n\n    this.querySelectorAllDirectChild(node, \"Entry\").forEach((entry) => {\n      const cipherIndex = this.result.ciphers.length;\n\n      const cipher = this.initLoginCipher();\n      this.querySelectorAllDirectChild(entry, \"String\").forEach((entryString) => {\n        const valueEl = this.querySelectorDirectChild(entryString, \"Value\");\n        const value = valueEl != null ? valueEl.textContent : null;\n        if (this.isNullOrWhitespace(value)) {\n          return;\n        }\n        const keyEl = this.querySelectorDirectChild(entryString, \"Key\");\n        const key = keyEl != null ? keyEl.textContent : null;\n\n        if (key === \"URL\") {\n          cipher.login.uris = this.makeUriArray(value);\n        } else if (key === \"UserName\") {\n          cipher.login.username = value;\n        } else if (key === \"Password\") {\n          cipher.login.password = value;\n        } else if (key === \"otp\") {\n          cipher.login.totp = value.replace(\"key=\", \"\");\n        } else if (key === \"Title\") {\n          cipher.name = value;\n        } else if (key === \"Notes\") {\n          cipher.notes += value + \"\\n\";\n        } else {\n          let type = FieldType.Text;\n          const attrs = valueEl.attributes as any;\n          if (\n            attrs.length > 0 &&\n            attrs.ProtectInMemory != null &&\n            attrs.ProtectInMemory.value === \"True\"\n          ) {\n            type = FieldType.Hidden;\n          }\n          this.processKvp(cipher, key, value, type);\n        }\n      });\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n\n      if (!isRootNode) {\n        this.result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    this.querySelectorAllDirectChild(node, \"Group\").forEach((group) => {\n      this.traverse(group, false, groupName);\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePassXCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(value.Title)) {\n        return;\n      }\n\n      value.Group =\n        !this.isNullOrWhitespace(value.Group) && value.Group.startsWith(\"Root/\")\n          ? value.Group.replace(\"Root/\", \"\")\n          : value.Group;\n      const groupName = !this.isNullOrWhitespace(value.Group) ? value.Group : null;\n      this.processFolder(result, groupName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class KeeperCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 6) {\n        return;\n      }\n\n      this.processFolder(result, value[0]);\n      const cipher = this.initLoginCipher();\n\n      const notes = this.getValueOrDefault(value[5]);\n      if (notes) {\n        cipher.notes = `${notes}\\n`;\n      }\n\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[4]);\n\n      if (value.length > 7) {\n        // we have some custom fields.\n        for (let i = 7; i < value.length; i = i + 2) {\n          if (value[i] == \"TFC:Keeper\") {\n            cipher.login.totp = value[i + 1];\n          } else {\n            this.processKvp(cipher, value[i], value[i + 1]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LastPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipherIndex = result.ciphers.length;\n      let folderIndex = result.folders.length;\n      let grouping = value.grouping;\n      if (grouping != null) {\n        // eslint-disable-next-line\n        grouping = grouping.replace(/\\\\/g, \"/\").replace(/[\\x00-\\x1F\\x7F-\\x9F]/g, \"\");\n      }\n      const hasFolder = this.getValueOrDefault(grouping, \"(none)\") !== \"(none)\";\n      let addFolder = hasFolder;\n\n      if (hasFolder) {\n        for (let i = 0; i < result.folders.length; i++) {\n          if (result.folders[i].name === grouping) {\n            addFolder = false;\n            folderIndex = i;\n            break;\n          }\n        }\n      }\n\n      const cipher = this.buildBaseCipher(value);\n      if (cipher.type === CipherType.Login) {\n        cipher.notes = this.getValueOrDefault(value.extra);\n        cipher.login = new LoginView();\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.totp);\n      } else if (cipher.type === CipherType.SecureNote) {\n        this.parseSecureNote(value, cipher);\n      } else if (cipher.type === CipherType.Card) {\n        cipher.card = this.parseCard(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n      } else if (cipher.type === CipherType.Identity) {\n        cipher.identity = this.parseIdentity(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n        if (!this.isNullOrWhitespace(value.ccnum)) {\n          // there is a card on this identity too\n          const cardCipher = this.buildBaseCipher(value);\n          cardCipher.identity = null;\n          cardCipher.type = CipherType.Card;\n          cardCipher.card = this.parseCard(value);\n          result.ciphers.push(cardCipher);\n        }\n      }\n\n      result.ciphers.push(cipher);\n\n      if (addFolder) {\n        const f = new FolderView();\n        f.name = grouping;\n        result.folders.push(f);\n      }\n      if (hasFolder) {\n        result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private buildBaseCipher(value: any) {\n    const cipher = new CipherView();\n    // eslint-disable-next-line\n    if (value.hasOwnProperty(\"profilename\") && value.hasOwnProperty(\"profilelanguage\")) {\n      // form fill\n      cipher.favorite = false;\n      cipher.name = this.getValueOrDefault(value.profilename, \"--\");\n      cipher.type = CipherType.Card;\n\n      if (\n        !this.isNullOrWhitespace(value.title) ||\n        !this.isNullOrWhitespace(value.firstname) ||\n        !this.isNullOrWhitespace(value.lastname) ||\n        !this.isNullOrWhitespace(value.address1) ||\n        !this.isNullOrWhitespace(value.phone) ||\n        !this.isNullOrWhitespace(value.username) ||\n        !this.isNullOrWhitespace(value.email)\n      ) {\n        cipher.type = CipherType.Identity;\n      }\n    } else {\n      // site or secure note\n      cipher.favorite = !this.organization && this.getValueOrDefault(value.fav, \"0\") === \"1\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.type = value.url === \"http://sn\" ? CipherType.SecureNote : CipherType.Login;\n    }\n    return cipher;\n  }\n\n  private parseCard(value: any): CardView {\n    const card = new CardView();\n    card.cardholderName = this.getValueOrDefault(value.ccname);\n    card.number = this.getValueOrDefault(value.ccnum);\n    card.code = this.getValueOrDefault(value.cccsc);\n    card.brand = this.getCardBrand(value.ccnum);\n\n    if (!this.isNullOrWhitespace(value.ccexp) && value.ccexp.indexOf(\"-\") > -1) {\n      const ccexpParts = (value.ccexp as string).split(\"-\");\n      if (ccexpParts.length > 1) {\n        card.expYear = ccexpParts[0];\n        card.expMonth = ccexpParts[1];\n        if (card.expMonth.length === 2 && card.expMonth[0] === \"0\") {\n          card.expMonth = card.expMonth[1];\n        }\n      }\n    }\n\n    return card;\n  }\n\n  private parseIdentity(value: any): IdentityView {\n    const identity = new IdentityView();\n    identity.title = this.getValueOrDefault(value.title);\n    identity.firstName = this.getValueOrDefault(value.firstname);\n    identity.middleName = this.getValueOrDefault(value.middlename);\n    identity.lastName = this.getValueOrDefault(value.lastname);\n    identity.username = this.getValueOrDefault(value.username);\n    identity.company = this.getValueOrDefault(value.company);\n    identity.ssn = this.getValueOrDefault(value.ssn);\n    identity.address1 = this.getValueOrDefault(value.address1);\n    identity.address2 = this.getValueOrDefault(value.address2);\n    identity.address3 = this.getValueOrDefault(value.address3);\n    identity.city = this.getValueOrDefault(value.city);\n    identity.state = this.getValueOrDefault(value.state);\n    identity.postalCode = this.getValueOrDefault(value.zip);\n    identity.country = this.getValueOrDefault(value.country);\n    identity.email = this.getValueOrDefault(value.email);\n    identity.phone = this.getValueOrDefault(value.phone);\n\n    if (!this.isNullOrWhitespace(identity.title)) {\n      identity.title = identity.title.charAt(0).toUpperCase() + identity.title.slice(1);\n    }\n\n    return identity;\n  }\n\n  private parseSecureNote(value: any, cipher: CipherView) {\n    const extraParts = this.splitNewLine(value.extra);\n    let processedNote = false;\n\n    if (extraParts.length) {\n      const typeParts = extraParts[0].split(\":\");\n      if (\n        typeParts.length > 1 &&\n        typeParts[0] === \"NoteType\" &&\n        (typeParts[1] === \"Credit Card\" || typeParts[1] === \"Address\")\n      ) {\n        if (typeParts[1] === \"Credit Card\") {\n          const mappedData = this.parseSecureNoteMapping<CardView>(cipher, extraParts, {\n            Number: \"number\",\n            \"Name on Card\": \"cardholderName\",\n            \"Security Code\": \"code\",\n            // LP provides date in a format like 'June,2020'\n            // Store in expMonth, then parse and modify\n            \"Expiration Date\": \"expMonth\",\n          });\n\n          if (this.isNullOrWhitespace(mappedData.expMonth) || mappedData.expMonth === \",\") {\n            // No expiration data\n            mappedData.expMonth = undefined;\n          } else {\n            const [monthString, year] = mappedData.expMonth.split(\",\");\n            // Parse month name into number\n            if (!this.isNullOrWhitespace(monthString)) {\n              const month = new Date(Date.parse(monthString.trim() + \" 1, 2012\")).getMonth() + 1;\n              if (isNaN(month)) {\n                mappedData.expMonth = undefined;\n              } else {\n                mappedData.expMonth = month.toString();\n              }\n            } else {\n              mappedData.expMonth = undefined;\n            }\n            if (!this.isNullOrWhitespace(year)) {\n              mappedData.expYear = year;\n            }\n          }\n\n          cipher.type = CipherType.Card;\n          cipher.card = mappedData;\n        } else if (typeParts[1] === \"Address\") {\n          const mappedData = this.parseSecureNoteMapping<IdentityView>(cipher, extraParts, {\n            Title: \"title\",\n            \"First Name\": \"firstName\",\n            \"Last Name\": \"lastName\",\n            \"Middle Name\": \"middleName\",\n            Company: \"company\",\n            \"Address 1\": \"address1\",\n            \"Address 2\": \"address2\",\n            \"Address 3\": \"address3\",\n            \"City / Town\": \"city\",\n            State: \"state\",\n            \"Zip / Postal Code\": \"postalCode\",\n            Country: \"country\",\n            \"Email Address\": \"email\",\n            Username: \"username\",\n          });\n          cipher.type = CipherType.Identity;\n          cipher.identity = mappedData;\n        }\n        processedNote = true;\n      }\n    }\n\n    if (!processedNote) {\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n      cipher.notes = this.getValueOrDefault(value.extra);\n    }\n  }\n\n  private parseSecureNoteMapping<T>(cipher: CipherView, extraParts: string[], map: any): T {\n    const dataObj: any = {};\n\n    let processingNotes = false;\n    extraParts.forEach((extraPart) => {\n      let key: string = null;\n      let val: string = null;\n      if (!processingNotes) {\n        if (this.isNullOrWhitespace(extraPart)) {\n          return;\n        }\n        const colonIndex = extraPart.indexOf(\":\");\n        if (colonIndex === -1) {\n          key = extraPart;\n        } else {\n          key = extraPart.substring(0, colonIndex);\n          if (extraPart.length > colonIndex) {\n            val = extraPart.substring(colonIndex + 1);\n          }\n        }\n        if (this.isNullOrWhitespace(key) || this.isNullOrWhitespace(val) || key === \"NoteType\") {\n          return;\n        }\n      }\n\n      if (processingNotes) {\n        cipher.notes += \"\\n\" + extraPart;\n      } else if (key === \"Notes\") {\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes += \"\\n\" + val;\n        } else {\n          cipher.notes = val;\n        }\n        processingNotes = true;\n        // eslint-disable-next-line\n      } else if (map.hasOwnProperty(key)) {\n        dataObj[map[key]] = val;\n      } else {\n        this.processKvp(cipher, key, val);\n      }\n    });\n\n    return dataObj;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LogMeOnceCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 4) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[1]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MeldiumCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.DisplayName, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.login.username = this.getValueOrDefault(value.UserName);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MSecureCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      const folderName =\n        this.getValueOrDefault(value[0], \"Unassigned\") !== \"Unassigned\" ? value[0] : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[2], \"--\");\n\n      if (value[1] === \"Web Logins\" || value[1] === \"Login\") {\n        cipher.login.uris = this.makeUriArray(value[4]);\n        cipher.login.username = this.getValueOrDefault(value[5]);\n        cipher.login.password = this.getValueOrDefault(value[6]);\n        cipher.notes = !this.isNullOrWhitespace(value[3]) ? value[3].split(\"\\\\n\").join(\"\\n\") : null;\n      } else if (value.length > 3) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        for (let i = 3; i < value.length; i++) {\n          if (!this.isNullOrWhitespace(value[i])) {\n            cipher.notes += value[i] + \"\\n\";\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(value[1]) && cipher.type !== CipherType.Login) {\n        cipher.name = value[1] + \": \" + cipher.name;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst mappedBaseColumns = [\"nickname\", \"additionalInfo\"];\nconst _mappedUserAccountColumns = new Set(\n  mappedBaseColumns.concat([\"url\", \"username\", \"password\", \"twofaSecret\"])\n);\nconst _mappedCreditCardColumns = new Set(\n  mappedBaseColumns.concat([\"cardNumber\", \"cardName\", \"exp_month\", \"exp_year\", \"cvv\"])\n);\n\nconst _mappedIdentityColumns = new Set(\n  mappedBaseColumns.concat([\n    \"title\",\n    \"firstName\",\n    \"middleName\",\n    \"lastName\",\n    \"email\",\n    \"firstAddressLine\",\n    \"secondAddressLine\",\n    \"city\",\n    \"country\",\n    \"zipCode\",\n  ])\n);\n\nconst _mappedIdCardColumns = new Set(mappedBaseColumns.concat([\"idName\", \"idNumber\", \"idCountry\"]));\n\nconst _mappedTwoFaColumns = new Set(mappedBaseColumns.concat([\"authToken\"]));\n\nconst _mappedUserNoteColumns = new Set(mappedBaseColumns.concat([\"content\"]));\n\nexport class MykiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.nickname, \"--\");\n      cipher.notes = this.getValueOrDefault(value.additionalInfo);\n\n      if (value.url !== undefined) {\n        // Accounts\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.twofaSecret);\n\n        this.importUnmappedFields(cipher, value, _mappedUserAccountColumns);\n      } else if (value.authToken !== undefined) {\n        // TwoFA\n        cipher.login.totp = this.getValueOrDefault(value.authToken);\n\n        this.importUnmappedFields(cipher, value, _mappedTwoFaColumns);\n      } else if (value.cardNumber !== undefined) {\n        // Cards\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.expMonth = this.getValueOrDefault(value.exp_month);\n        cipher.card.expYear = this.getValueOrDefault(value.exp_year);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n\n        this.importUnmappedFields(cipher, value, _mappedCreditCardColumns);\n      } else if (value.firstName !== undefined) {\n        // Identities\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        cipher.identity.title = this.getValueOrDefault(value.title);\n        cipher.identity.firstName = this.getValueOrDefault(value.firstName);\n        cipher.identity.middleName = this.getValueOrDefault(value.middleName);\n        cipher.identity.lastName = this.getValueOrDefault(value.lastName);\n        cipher.identity.phone = this.getValueOrDefault(value.number);\n        cipher.identity.email = this.getValueOrDefault(value.email);\n        cipher.identity.address1 = this.getValueOrDefault(value.firstAddressLine);\n        cipher.identity.address2 = this.getValueOrDefault(value.secondAddressLine);\n        cipher.identity.city = this.getValueOrDefault(value.city);\n        cipher.identity.country = this.getValueOrDefault(value.country);\n        cipher.identity.postalCode = this.getValueOrDefault(value.zipCode);\n\n        this.importUnmappedFields(cipher, value, _mappedIdentityColumns);\n      } else if (value.idType !== undefined) {\n        // IdCards\n\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        this.processFullName(cipher, value.idName);\n        cipher.identity.country = this.getValueOrDefault(value.idCountry);\n\n        switch (value.idType) {\n          // case \"Driver's License\":\n          // case \"ID Card\":\n          // case \"Outdoor License\":\n          // case \"Software License\":\n          // case \"Tax Number\":\n          // case \"Bank Account\":\n          // case \"Insurance Card\":\n          // case \"Health Card\":\n          // case \"Membership\":\n          // case \"Database\":\n          // case \"Reward Program\":\n          // case \"Tour Visa\":\n          case \"Passport\":\n            cipher.identity.passportNumber = value.idNumber;\n            break;\n          case \"Social Security\":\n            cipher.identity.ssn = value.idNumber;\n            break;\n          default:\n            cipher.identity.licenseNumber = value.idNumber;\n            break;\n        }\n\n        this.importUnmappedFields(cipher, value, _mappedIdCardColumns);\n      } else if (value.content !== undefined) {\n        // Notes\n        cipher.secureNote = new SecureNoteView();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.notes = this.getValueOrDefault(value.content);\n\n        this.importUnmappedFields(cipher, value, _mappedUserNoteColumns);\n      } else {\n        return;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\ntype nodePassCsvParsed = {\n  name: string;\n  url: string;\n  username: string;\n  password: string;\n  note: string;\n  cardholdername: string;\n  cardnumber: string;\n  cvc: string;\n  expirydate: string;\n  zipcode: string;\n  folder: string;\n  full_name: string;\n  phone_number: string;\n  email: string;\n  address1: string;\n  address2: string;\n  city: string;\n  country: string;\n  state: string;\n};\n\nexport class NordPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: nodePassCsvParsed[] = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((record) => {\n      const recordType = this.evaluateType(record);\n      if (recordType === undefined) {\n        return;\n      }\n\n      if (!this.organization) {\n        this.processFolder(result, record.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.name = this.getValueOrDefault(record.name, \"--\");\n      cipher.notes = this.getValueOrDefault(record.note);\n\n      switch (recordType) {\n        case CipherType.Login:\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.username = this.getValueOrDefault(record.username);\n          cipher.login.password = this.getValueOrDefault(record.password);\n          cipher.login.uris = this.makeUriArray(record.url);\n          break;\n        case CipherType.Card:\n          cipher.type = CipherType.Card;\n          cipher.card.cardholderName = this.getValueOrDefault(record.cardholdername);\n          cipher.card.number = this.getValueOrDefault(record.cardnumber);\n          cipher.card.code = this.getValueOrDefault(record.cvc);\n          cipher.card.brand = this.getCardBrand(cipher.card.number);\n          this.setCardExpiration(cipher, record.expirydate);\n          break;\n\n        case CipherType.Identity:\n          cipher.type = CipherType.Identity;\n\n          this.processFullName(cipher, this.getValueOrDefault(record.full_name));\n          cipher.identity.address1 = this.getValueOrDefault(record.address1);\n          cipher.identity.address2 = this.getValueOrDefault(record.address2);\n          cipher.identity.city = this.getValueOrDefault(record.city);\n          cipher.identity.state = this.getValueOrDefault(record.state);\n          cipher.identity.postalCode = this.getValueOrDefault(record.zipcode);\n          cipher.identity.country = this.getValueOrDefault(record.country);\n          if (cipher.identity.country != null) {\n            cipher.identity.country = cipher.identity.country.toUpperCase();\n          }\n          cipher.identity.email = this.getValueOrDefault(record.email);\n          cipher.identity.phone = this.getValueOrDefault(record.phone_number);\n          break;\n        case CipherType.SecureNote:\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default:\n          break;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private evaluateType(record: nodePassCsvParsed): CipherType {\n    if (!this.isNullOrWhitespace(record.username)) {\n      return CipherType.Login;\n    }\n\n    if (!this.isNullOrWhitespace(record.cardnumber)) {\n      return CipherType.Card;\n    }\n\n    if (!this.isNullOrWhitespace(record.full_name)) {\n      return CipherType.Identity;\n    }\n\n    if (!this.isNullOrWhitespace(record.note)) {\n      return CipherType.SecureNote;\n    }\n\n    return undefined;\n  }\n}\n","export interface ExportData {\n  accounts?: AccountsEntity[] | null;\n}\nexport interface AccountsEntity {\n  attrs: AccountAttributes;\n  vaults?: VaultsEntity[] | null;\n}\nexport interface AccountAttributes {\n  accountName: string;\n  name: string;\n  avatar: string;\n  email: string;\n  uuid: string;\n  domain: string;\n}\nexport interface VaultsEntity {\n  attrs: VaultAttributes;\n  items?: Item[] | null;\n}\nexport interface VaultAttributes {\n  uuid: string;\n  desc: string;\n  avatar: string;\n  name: string;\n  type: string;\n}\n\nexport enum CategoryEnum {\n  Login = \"001\",\n  CreditCard = \"002\",\n  SecureNote = \"003\",\n  Identity = \"004\",\n  Password = \"005\",\n  Document = \"006\",\n  SoftwareLicense = \"100\",\n  BankAccount = \"101\",\n  Database = \"102\",\n  DriversLicense = \"103\",\n  OutdoorLicense = \"104\",\n  Membership = \"105\",\n  Passport = \"106\",\n  RewardsProgram = \"107\",\n  SocialSecurityNumber = \"108\",\n  WirelessRouter = \"109\",\n  Server = \"110\",\n  EmailAccount = \"111\",\n  API_Credential = \"112\",\n  MedicalRecord = \"113\",\n}\n\nexport interface Item {\n  uuid: string;\n  favIndex: number;\n  createdAt: number;\n  updatedAt: number;\n  trashed?: boolean;\n  categoryUuid: string;\n  details: Details;\n  overview: Overview;\n}\nexport interface Details {\n  loginFields?: (LoginFieldsEntity | null)[] | null;\n  notesPlain?: string | null;\n  sections?: (SectionsEntity | null)[] | null;\n  passwordHistory?: (PasswordHistoryEntity | null)[] | null;\n  documentAttributes?: DocumentAttributes | null;\n  password?: string | null;\n}\n\nexport enum LoginFieldTypeEnum {\n  TextOrHtml = \"T\",\n  EmailAddress = \"E\",\n  URL = \"U\",\n  Number = \"N\",\n  Password = \"P\",\n  TextArea = \"A\",\n  PhoneNumber = \"T\",\n  CheckBox = \"C\",\n}\nexport interface LoginFieldsEntity {\n  value: string;\n  id: string;\n  name: string;\n  fieldType: LoginFieldTypeEnum | string;\n  designation?: string | null;\n}\nexport interface SectionsEntity {\n  title: string;\n  name?: string | null;\n  fields?: FieldsEntity[] | null;\n}\nexport interface FieldsEntity {\n  title: string;\n  id: string;\n  value: Value;\n  indexAtSource: number;\n  guarded: boolean;\n  multiline: boolean;\n  dontGenerate: boolean;\n  placeholder?: string;\n  inputTraits: InputTraits;\n  clipboardFilter?: string | null;\n}\nexport interface Value {\n  totp?: string | null;\n  date?: number | null;\n  string?: string | null;\n  concealed?: string | null;\n  email?: Email | null;\n  phone?: string | null;\n  menu?: string | null;\n  gender?: string | null;\n  monthYear?: number | null;\n  url?: string | null;\n  address?: Address | null;\n  creditCardType?: string | null;\n  creditCardNumber?: string | null;\n  reference?: string | null;\n}\n\nexport interface Email {\n  email_address: string;\n  provider: string;\n}\n\nexport interface Address {\n  street: string;\n  city: string;\n  country: string;\n  zip: string;\n  state: string;\n}\nexport interface InputTraits {\n  keyboard: string;\n  correction: string;\n  capitalization: string;\n}\nexport interface PasswordHistoryEntity {\n  value: string;\n  time: number;\n}\nexport interface DocumentAttributes {\n  fileName: string;\n  documentId: string;\n  decryptedSize: number;\n}\nexport interface Overview {\n  subtitle: string;\n  title: string;\n  url: string;\n  urls?: UrlsEntity[] | null;\n  ps?: number | null;\n  pbe?: number | null;\n  pgrng?: boolean | null;\n  tags?: string[] | null;\n}\nexport interface UrlsEntity {\n  label: string;\n  url: string;\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class OnePassword1PifImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    data.split(this.newLineRegex).forEach((line) => {\n      if (this.isNullOrWhitespace(line) || line[0] !== \"{\") {\n        return;\n      }\n      const item = JSON.parse(line);\n      if (item.trashed === true) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n\n      if (this.isNullOrWhitespace(item.hmac)) {\n        this.processStandardItem(item, cipher);\n      } else {\n        this.processWinOpVaultItem(item, cipher);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processWinOpVaultItem(item: any, cipher: CipherView) {\n    if (item.overview != null) {\n      cipher.name = this.getValueOrDefault(item.overview.title);\n      if (item.overview.URLs != null) {\n        const urls: string[] = [];\n        item.overview.URLs.forEach((url: any) => {\n          if (!this.isNullOrWhitespace(url.u)) {\n            urls.push(url.u);\n          }\n        });\n        cipher.login.uris = this.makeUriArray(urls);\n      }\n    }\n\n    if (item.details != null) {\n      if (item.details.passwordHistory != null) {\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n      }\n      if (\n        !this.isNullOrWhitespace(item.details.ccnum) ||\n        !this.isNullOrWhitespace(item.details.cvv)\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      } else if (\n        !this.isNullOrWhitespace(item.details.firstname) ||\n        !this.isNullOrWhitespace(item.details.address1)\n      ) {\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n      }\n      if (cipher.type === CipherType.Login && !this.isNullOrWhitespace(item.details.password)) {\n        cipher.login.password = item.details.password;\n      }\n      if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n        cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (item.details.fields != null) {\n        this.parseFields(item.details.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.details.sections != null) {\n        item.details.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private processStandardItem(item: any, cipher: CipherView) {\n    cipher.favorite = item.openContents && item.openContents.faveIndex ? true : false;\n    cipher.name = this.getValueOrDefault(item.title);\n\n    if (item.typeName === \"securenotes.SecureNote\") {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    } else if (item.typeName === \"wallet.financial.CreditCard\") {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    } else if (item.typeName === \"identities.Identity\") {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    } else {\n      cipher.login.uris = this.makeUriArray(item.location);\n    }\n\n    if (item.secureContents != null) {\n      if (item.secureContents.passwordHistory != null) {\n        this.parsePasswordHistory(item.secureContents.passwordHistory, cipher);\n      }\n      if (!this.isNullOrWhitespace(item.secureContents.notesPlain)) {\n        cipher.notes = item.secureContents.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (cipher.type === CipherType.Login) {\n        if (!this.isNullOrWhitespace(item.secureContents.password)) {\n          cipher.login.password = item.secureContents.password;\n        }\n        if (item.secureContents.URLs != null) {\n          const urls: string[] = [];\n          item.secureContents.URLs.forEach((u: any) => {\n            if (!this.isNullOrWhitespace(u.url)) {\n              urls.push(u.url);\n            }\n          });\n          if (urls.length > 0) {\n            cipher.login.uris = this.makeUriArray(urls);\n          }\n        }\n      }\n      if (item.secureContents.fields != null) {\n        this.parseFields(item.secureContents.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.secureContents.sections != null) {\n        item.secureContents.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private parsePasswordHistory(items: any[], cipher: CipherView) {\n    const maxSize = items.length > 5 ? 5 : items.length;\n    cipher.passwordHistory = items\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n\n  private parseFields(\n    fields: any[],\n    cipher: CipherView,\n    designationKey: string,\n    valueKey: string,\n    nameKey: string\n  ) {\n    fields.forEach((field: any) => {\n      if (field[valueKey] == null || field[valueKey].toString().trim() === \"\") {\n        return;\n      }\n\n      // TODO: when date FieldType exists, store this as a date field type instead of formatted Text if k is 'date'\n      const fieldValue =\n        field.k === \"date\"\n          ? new Date(field[valueKey] * 1000).toUTCString()\n          : field[valueKey].toString();\n      const fieldDesignation =\n        field[designationKey] != null ? field[designationKey].toString() : null;\n\n      if (cipher.type === CipherType.Login) {\n        if (this.isNullOrWhitespace(cipher.login.username) && fieldDesignation === \"username\") {\n          cipher.login.username = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.password) &&\n          fieldDesignation === \"password\"\n        ) {\n          cipher.login.password = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.totp) &&\n          fieldDesignation != null &&\n          fieldDesignation.startsWith(\"TOTP_\")\n        ) {\n          cipher.login.totp = fieldValue;\n          return;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.isNullOrWhitespace(cipher.card.number) && fieldDesignation === \"ccnum\") {\n          cipher.card.number = fieldValue;\n          cipher.card.brand = this.getCardBrand(fieldValue);\n          return;\n        } else if (this.isNullOrWhitespace(cipher.card.code) && fieldDesignation === \"cvv\") {\n          cipher.card.code = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.cardholderName) &&\n          fieldDesignation === \"cardholder\"\n        ) {\n          cipher.card.cardholderName = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.expiration) &&\n          fieldDesignation === \"expiry\" &&\n          fieldValue.length === 6\n        ) {\n          cipher.card.expMonth = (fieldValue as string).substr(4, 2);\n          if (cipher.card.expMonth[0] === \"0\") {\n            cipher.card.expMonth = cipher.card.expMonth.substr(1, 1);\n          }\n          cipher.card.expYear = (fieldValue as string).substr(0, 4);\n          return;\n        } else if (fieldDesignation === \"type\") {\n          // Skip since brand was determined from number above\n          return;\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        const identity = cipher.identity;\n        if (this.isNullOrWhitespace(identity.firstName) && fieldDesignation === \"firstname\") {\n          identity.firstName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.lastName) && fieldDesignation === \"lastname\") {\n          identity.lastName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.middleName) && fieldDesignation === \"initial\") {\n          identity.middleName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.phone) && fieldDesignation === \"defphone\") {\n          identity.phone = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.company) && fieldDesignation === \"company\") {\n          identity.company = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.email) && fieldDesignation === \"email\") {\n          identity.email = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.username) && fieldDesignation === \"username\") {\n          identity.username = fieldValue;\n          return;\n        } else if (fieldDesignation === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip } = field[valueKey];\n          identity.address1 = this.getValueOrDefault(street);\n          identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            identity.country = country.toUpperCase();\n          }\n          identity.postalCode = this.getValueOrDefault(zip);\n          return;\n        }\n      }\n\n      const fieldName = this.isNullOrWhitespace(field[nameKey]) ? \"no_name\" : field[nameKey];\n      if (\n        fieldName === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      const fieldType = field.k === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CategoryEnum,\n  Details,\n  ExportData,\n  FieldsEntity,\n  Item,\n  LoginFieldTypeEnum,\n  Overview,\n  PasswordHistoryEntity,\n  SectionsEntity,\n  UrlsEntity,\n  Value,\n  VaultsEntity,\n} from \"./types/onepassword-1pux-importer-types\";\n\nexport class OnePassword1PuxImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const exportData: ExportData = JSON.parse(data);\n\n    const account = exportData.accounts[0];\n    // TODO Add handling of multiple vaults\n    // const personalVaults = account.vaults[0].filter((v) => v.attrs.type === VaultAttributeTypeEnum.Personal);\n    account.vaults.forEach((vault: VaultsEntity) => {\n      vault.items.forEach((item: Item) => {\n        if (item.trashed === true) {\n          return;\n        }\n\n        const cipher = this.initLoginCipher();\n\n        const category = item.categoryUuid as CategoryEnum;\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.Password:\n          case CategoryEnum.WirelessRouter:\n          case CategoryEnum.Server:\n          case CategoryEnum.API_Credential:\n            cipher.type = CipherType.Login;\n            cipher.login = new LoginView();\n            break;\n          case CategoryEnum.CreditCard:\n          case CategoryEnum.BankAccount:\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            break;\n          case CategoryEnum.SecureNote:\n          case CategoryEnum.SoftwareLicense:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.MedicalRecord:\n            // case CategoryEnum.Document:\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case CategoryEnum.Identity:\n          case CategoryEnum.DriversLicense:\n          case CategoryEnum.OutdoorLicense:\n          case CategoryEnum.Membership:\n          case CategoryEnum.Passport:\n          case CategoryEnum.RewardsProgram:\n          case CategoryEnum.SocialSecurityNumber:\n            cipher.type = CipherType.Identity;\n            cipher.identity = new IdentityView();\n            break;\n          default:\n            break;\n        }\n\n        cipher.favorite = item.favIndex === 1 ? true : false;\n\n        this.processOverview(item.overview, cipher);\n\n        this.processLoginFields(item, cipher);\n\n        this.processDetails(category, item.details, cipher);\n\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n\n        this.processSections(category, item.details.sections, cipher);\n\n        if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n          cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        this.result.ciphers.push(cipher);\n      });\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processOverview(overview: Overview, cipher: CipherView) {\n    if (overview == null) {\n      return;\n    }\n\n    cipher.name = this.getValueOrDefault(overview.title);\n\n    if (overview.urls != null) {\n      const urls: string[] = [];\n      overview.urls.forEach((url: UrlsEntity) => {\n        if (!this.isNullOrWhitespace(url.url)) {\n          urls.push(url.url);\n        }\n      });\n      cipher.login.uris = this.makeUriArray(urls);\n    }\n\n    if (overview.tags != null && overview.tags.length > 0) {\n      const folderName = this.capitalize(overview.tags[0]);\n      this.processFolder(this.result, folderName);\n    }\n  }\n\n  private capitalize(inputString: string): string {\n    return inputString.trim().replace(/\\w\\S*/g, (w) => w.replace(/^\\w/, (c) => c.toUpperCase()));\n  }\n\n  private processLoginFields(item: Item, cipher: CipherView) {\n    if (item.details == null) {\n      return;\n    }\n\n    if (item.details.loginFields == null || item.details.loginFields.length === 0) {\n      return;\n    }\n\n    item.details.loginFields.forEach((loginField) => {\n      if (loginField.designation === \"username\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.username = loginField.value;\n        return;\n      }\n\n      if (loginField.designation === \"password\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.password = loginField.value;\n        return;\n      }\n\n      let fieldValue = loginField.value;\n      let fieldType: FieldType = FieldType.Text;\n      switch (loginField.fieldType) {\n        case LoginFieldTypeEnum.Password:\n          fieldType = FieldType.Hidden;\n          break;\n        case LoginFieldTypeEnum.CheckBox:\n          fieldValue = loginField.value !== \"\" ? \"true\" : \"false\";\n          fieldType = FieldType.Boolean;\n          break;\n        default:\n          break;\n      }\n      this.processKvp(cipher, loginField.name, fieldValue, fieldType);\n    });\n  }\n\n  private processDetails(category: CategoryEnum, details: Details, cipher: CipherView) {\n    if (category !== CategoryEnum.Password) {\n      return;\n    }\n\n    if (details == null) {\n      return;\n    }\n    cipher.login.password = details.password;\n  }\n\n  private processSections(category: CategoryEnum, sections: SectionsEntity[], cipher: CipherView) {\n    if (sections == null || sections.length === 0) {\n      return;\n    }\n\n    sections.forEach((section: SectionsEntity) => {\n      if (section.fields == null) {\n        return;\n      }\n\n      this.parseSectionFields(category, section.fields, cipher);\n    });\n  }\n\n  private parseSectionFields(category: CategoryEnum, fields: FieldsEntity[], cipher: CipherView) {\n    fields.forEach((field: FieldsEntity) => {\n      const valueKey = Object.keys(field.value)[0];\n      const anyField = field as any;\n\n      if (\n        anyField.value == null ||\n        anyField.value[valueKey] == null ||\n        anyField.value[valueKey] === \"\"\n      ) {\n        return;\n      }\n\n      const fieldName = this.getFieldName(field.id, field.title);\n      const fieldValue = this.extractValue(field.value, valueKey);\n\n      if (cipher.type === CipherType.Login) {\n        if (this.fillLogin(field, fieldValue, cipher)) {\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.WirelessRouter:\n            break;\n\n          case CategoryEnum.Server:\n            if (this.isNullOrWhitespace(cipher.login.uri) && field.id === \"url\") {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              return;\n            }\n            break;\n\n          case CategoryEnum.API_Credential:\n            if (this.fillApiCredentials(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.fillCreditCard(field, fieldValue, cipher)) {\n          return;\n        }\n\n        if (category === CategoryEnum.BankAccount) {\n          if (this.fillBankAccount(field, fieldValue, cipher)) {\n            return;\n          }\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        if (this.fillIdentity(field, fieldValue, cipher, valueKey)) {\n          return;\n        }\n        if (valueKey === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip, state } = field.value.address;\n          cipher.identity.address1 = this.getValueOrDefault(street);\n          cipher.identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            cipher.identity.country = country.toUpperCase();\n          }\n          cipher.identity.postalCode = this.getValueOrDefault(zip);\n          cipher.identity.state = this.getValueOrDefault(state);\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Identity:\n            break;\n          case CategoryEnum.DriversLicense:\n            if (this.fillDriversLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.OutdoorLicense:\n            if (this.fillOutdoorLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Membership:\n            if (this.fillMembership(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Passport:\n            if (this.fillPassport(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.RewardsProgram:\n            if (this.fillRewardsProgram(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.SocialSecurityNumber:\n            if (this.fillSSN(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (valueKey === \"email\") {\n        // fieldValue is an object casted into a string, so access the plain value instead\n        const { email_address, provider } = field.value.email;\n        this.processKvp(cipher, fieldName, email_address, FieldType.Text);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return;\n      }\n\n      // Do not include a password field if it's already in the history\n      if (\n        field.title === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      // TODO ?? If one of the fields is marked as guarded, then activate Password-Reprompt for the entire item\n      if (field.guarded && cipher.reprompt === CipherRepromptType.None) {\n        cipher.reprompt = CipherRepromptType.Password;\n      }\n\n      const fieldType = valueKey === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n\n  private getFieldName(id: string, title: string): string {\n    if (this.isNullOrWhitespace(title)) {\n      return id;\n    }\n\n    // Naive approach of checking if the fields id is usable\n    if (id.length > 25 && RegExp(/[0-9]{2}[A-Z]{2}/, \"i\").test(id)) {\n      return title;\n    }\n    return id;\n  }\n\n  private extractValue(value: Value, valueKey: string): string {\n    if (valueKey === \"date\") {\n      return new Date(value.date * 1000).toUTCString();\n    }\n\n    if (valueKey === \"monthYear\") {\n      return value.monthYear.toString();\n    }\n\n    return (value as any)[valueKey];\n  }\n\n  private fillLogin(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.username) && fieldName === \"username\") {\n      cipher.login.username = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"password\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (\n      this.isNullOrWhitespace(cipher.login.totp) &&\n      field.id != null &&\n      field.id.startsWith(\"TOTP_\")\n    ) {\n      cipher.login.totp = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillApiCredentials(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"credential\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.uri) && fieldName === \"hostname\") {\n      cipher.login.uris = this.makeUriArray(fieldValue);\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillCreditCard(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.number) && field.id === \"ccnum\") {\n      cipher.card.number = fieldValue;\n      cipher.card.brand = this.getCardBrand(fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.code) && field.id === \"cvv\") {\n      cipher.card.code = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"cardholder\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.expiration) && field.id === \"expiry\") {\n      const monthYear: string = fieldValue.toString().trim();\n      cipher.card.expMonth = monthYear.substring(4, 6);\n      if (cipher.card.expMonth[0] === \"0\") {\n        cipher.card.expMonth = cipher.card.expMonth.substring(1, 2);\n      }\n      cipher.card.expYear = monthYear.substring(0, 4);\n      return true;\n    }\n\n    if (field.id === \"type\") {\n      // Skip since brand was determined from number above\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillBankAccount(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"owner\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillIdentity(\n    field: FieldsEntity,\n    fieldValue: string,\n    cipher: CipherView,\n    valueKey: string\n  ): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"firstname\") {\n      cipher.identity.firstName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.lastName) && field.id === \"lastname\") {\n      cipher.identity.lastName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.middleName) && field.id === \"initial\") {\n      cipher.identity.middleName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"defphone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.email)) {\n      if (valueKey === \"email\") {\n        const { email_address, provider } = field.value.email;\n        cipher.identity.email = this.getValueOrDefault(email_address);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return true;\n      }\n\n      if (field.id === \"email\") {\n        cipher.identity.email = fieldValue;\n        return true;\n      }\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.username) && field.id === \"username\") {\n      cipher.identity.username = fieldValue;\n      return true;\n    }\n    return false;\n  }\n\n  private fillDriversLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.address1) && field.id === \"address\") {\n      cipher.identity.address1 = fieldValue;\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.licenseNumber) && field.id === \"number\") {\n      cipher.identity.licenseNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillOutdoorLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillMembership(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"org_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"phone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillPassport(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO Iso\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"issuing_country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.passportNumber) && field.id === \"number\") {\n      cipher.identity.passportNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillRewardsProgram(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillSSN(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.ssn) && field.id === \"number\") {\n      cipher.identity.ssn = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private parsePasswordHistory(historyItems: PasswordHistoryEntity[], cipher: CipherView) {\n    if (historyItems == null || historyItems.length === 0) {\n      return;\n    }\n\n    const maxSize = historyItems.length > 5 ? 5 : historyItems.length;\n    cipher.passwordHistory = historyItems\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nexport class CipherImportContext {\n  lowerProperty: string;\n  constructor(public importRecord: any, public property: string, public cipher: CipherView) {\n    this.lowerProperty = property.toLowerCase();\n  }\n}\n","import { FieldType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\n\nexport const IgnoredProperties = [\n  \"ainfo\",\n  \"autosubmit\",\n  \"notesplain\",\n  \"ps\",\n  \"scope\",\n  \"tags\",\n  \"title\",\n  \"uuid\",\n  \"notes\",\n];\n\nexport abstract class OnePasswordCsvImporter extends BaseImporter implements Importer {\n  protected loginPropertyParsers = [\n    this.setLoginUsername,\n    this.setLoginPassword,\n    this.setLoginUris,\n  ];\n  protected creditCardPropertyParsers = [\n    this.setCreditCardNumber,\n    this.setCreditCardVerification,\n    this.setCreditCardCardholderName,\n    this.setCreditCardExpiry,\n  ];\n  protected identityPropertyParsers = [\n    this.setIdentityFirstName,\n    this.setIdentityInitial,\n    this.setIdentityLastName,\n    this.setIdentityUserName,\n    this.setIdentityEmail,\n    this.setIdentityPhone,\n    this.setIdentityCompany,\n  ];\n\n  abstract setCipherType(value: any, cipher: CipherView): void;\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true, {\n      quoteChar: '\"',\n      escapeChar: \"\\\\\",\n    });\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(this.getProp(value, \"title\"))) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.getProp(value, \"title\"), \"--\");\n\n      this.setNotes(value, cipher);\n\n      this.setCipherType(value, cipher);\n\n      let altUsername: string = null;\n      for (const property in value) {\n        // eslint-disable-next-line\n        if (!value.hasOwnProperty(property) || this.isNullOrWhitespace(value[property])) {\n          continue;\n        }\n\n        const context = new CipherImportContext(value, property, cipher);\n        if (cipher.type === CipherType.Login && this.setKnownLoginValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Card && this.setKnownCreditCardValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Identity && this.setKnownIdentityValue(context)) {\n          continue;\n        }\n\n        altUsername = this.setUnknownValue(context, altUsername);\n      }\n\n      if (\n        cipher.type === CipherType.Login &&\n        !this.isNullOrWhitespace(altUsername) &&\n        this.isNullOrWhitespace(cipher.login.username) &&\n        altUsername.indexOf(\"://\") === -1\n      ) {\n        cipher.login.username = altUsername;\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  protected getProp(obj: any, name: string): any {\n    const lowerObj = Object.entries(obj).reduce((agg: any, entry: [string, any]) => {\n      agg[entry[0].toLowerCase()] = entry[1];\n      return agg;\n    }, {});\n    return lowerObj[name.toLowerCase()];\n  }\n\n  protected getPropByRegexp(obj: any, regexp: RegExp): any {\n    const matchingKeys = Object.keys(obj).reduce((agg: string[], key: string) => {\n      if (key.match(regexp)) {\n        agg.push(key);\n      }\n      return agg;\n    }, []);\n    if (matchingKeys.length === 0) {\n      return null;\n    } else {\n      return obj[matchingKeys[0]];\n    }\n  }\n\n  protected getPropIncluding(obj: any, name: string): any {\n    const includesMap = Object.keys(obj).reduce((agg: string[], entry: string) => {\n      if (entry.toLowerCase().includes(name.toLowerCase())) {\n        agg.push(entry);\n      }\n      return agg;\n    }, []);\n    if (includesMap.length === 0) {\n      return null;\n    } else {\n      return obj[includesMap[0]];\n    }\n  }\n\n  protected setNotes(importRecord: any, cipher: CipherView) {\n    cipher.notes =\n      this.getValueOrDefault(this.getProp(importRecord, \"notesPlain\"), \"\") +\n      \"\\n\" +\n      this.getValueOrDefault(this.getProp(importRecord, \"notes\"), \"\") +\n      \"\\n\";\n    cipher.notes.trim();\n  }\n\n  protected setKnownLoginValue(context: CipherImportContext): boolean {\n    return this.loginPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownCreditCardValue(context: CipherImportContext): boolean {\n    return this.creditCardPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownIdentityValue(context: CipherImportContext): boolean {\n    return this.identityPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setUnknownValue(context: CipherImportContext, altUsername: string): string {\n    if (\n      IgnoredProperties.indexOf(context.lowerProperty) === -1 &&\n      !context.lowerProperty.startsWith(\"section:\") &&\n      !context.lowerProperty.startsWith(\"section \")\n    ) {\n      if (altUsername == null && context.lowerProperty === \"email\") {\n        return context.importRecord[context.property];\n      } else if (\n        context.lowerProperty === \"created date\" ||\n        context.lowerProperty === \"modified date\"\n      ) {\n        const readableDate = new Date(\n          parseInt(context.importRecord[context.property], 10) * 1000\n        ).toUTCString();\n        this.processKvp(context.cipher, \"1Password \" + context.property, readableDate);\n        return null;\n      }\n      if (\n        context.lowerProperty.includes(\"password\") ||\n        context.lowerProperty.includes(\"key\") ||\n        context.lowerProperty.includes(\"secret\")\n      ) {\n        this.processKvp(\n          context.cipher,\n          context.property,\n          context.importRecord[context.property],\n          FieldType.Hidden\n        );\n      } else {\n        this.processKvp(context.cipher, context.property, context.importRecord[context.property]);\n      }\n    }\n    return null;\n  }\n\n  protected setIdentityFirstName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.firstName) &&\n      context.lowerProperty.includes(\"first name\")\n    ) {\n      context.cipher.identity.firstName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityInitial(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.middleName) &&\n      context.lowerProperty.includes(\"initial\")\n    ) {\n      context.cipher.identity.middleName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityLastName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.lastName) &&\n      context.lowerProperty.includes(\"last name\")\n    ) {\n      context.cipher.identity.lastName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityUserName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.username) &&\n      context.lowerProperty.includes(\"username\")\n    ) {\n      context.cipher.identity.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityCompany(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.company) &&\n      context.lowerProperty.includes(\"company\")\n    ) {\n      context.cipher.identity.company = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityPhone(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.phone) &&\n      context.lowerProperty.includes(\"default phone\")\n    ) {\n      context.cipher.identity.phone = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityEmail(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.email) &&\n      context.lowerProperty.includes(\"email\")\n    ) {\n      context.cipher.identity.email = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardNumber(context: CipherImportContext): boolean {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.number) &&\n      context.lowerProperty.includes(\"number\")\n    ) {\n      context.cipher.card.number = context.importRecord[context.property];\n      context.cipher.card.brand = this.getCardBrand(context.cipher.card.number);\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardVerification(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.code) &&\n      context.lowerProperty.includes(\"verification number\")\n    ) {\n      context.cipher.card.code = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardCardholderName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.cardholderName) &&\n      context.lowerProperty.includes(\"cardholder name\")\n    ) {\n      context.cipher.card.cardholderName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\") &&\n      context.importRecord[context.property].length === 7\n    ) {\n      context.cipher.card.expMonth = (context.importRecord[context.property] as string).substr(\n        0,\n        2\n      );\n      if (context.cipher.card.expMonth[0] === \"0\") {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = (context.importRecord[context.property] as string).substr(3, 4);\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginPassword(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.password) &&\n      context.lowerProperty === \"password\"\n    ) {\n      context.cipher.login.password = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUsername(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.username) &&\n      context.lowerProperty === \"username\"\n    ) {\n      context.cipher.login.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUris(context: CipherImportContext) {\n    if (\n      (context.cipher.login.uris == null || context.cipher.login.uris.length === 0) &&\n      context.lowerProperty === \"urls\"\n    ) {\n      const urls = context.importRecord[context.property].split(this.newLineRegex);\n      context.cipher.login.uris = this.makeUriArray(urls);\n      return true;\n    } else if (context.lowerProperty === \"url\") {\n      if (context.cipher.login.uris == null) {\n        context.cipher.login.uris = [];\n      }\n      context.cipher.login.uris.concat(this.makeUriArray(context.importRecord[context.property]));\n      return true;\n    }\n    return false;\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { IgnoredProperties, OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordMacCsvImporter extends OnePasswordCsvImporter implements Importer {\n  setCipherType(value: any, cipher: CipherView) {\n    const onePassType = this.getValueOrDefault(this.getProp(value, \"type\"), \"Login\");\n    switch (onePassType) {\n      case \"Credit Card\":\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Identity\":\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Login\":\n      case \"Secure Note\":\n        IgnoredProperties.push(\"type\");\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\nimport { OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordWinCsvImporter extends OnePasswordCsvImporter implements Importer {\n  constructor() {\n    super();\n    this.identityPropertyParsers.push(this.setIdentityAddress);\n  }\n\n  setCipherType(value: any, cipher: CipherView) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: number/i)) &&\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: expiry date/i))\n    ) {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    }\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: first name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: initial/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: last name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /internet \\d+: email/i))\n    ) {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    }\n  }\n\n  setIdentityAddress(context: CipherImportContext) {\n    if (context.lowerProperty.match(/address \\d+: address/i)) {\n      this.processKvp(context.cipher, \"address\", context.importRecord[context.property]);\n      return true;\n    }\n    return false;\n  }\n\n  setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\")\n    ) {\n      const expSplit = (context.importRecord[context.property] as string).split(\"/\");\n      context.cipher.card.expMonth = expSplit[0];\n      if (context.cipher.card.expMonth[0] === \"0\" && context.cipher.card.expMonth.length === 2) {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = expSplit[2].length > 4 ? expSplit[2].substr(0, 4) : expSplit[2];\n      return true;\n    }\n    return false;\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PadlockCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let headers: string[] = null;\n    results.forEach((value) => {\n      if (headers == null) {\n        headers = value.map((v: string) => v);\n        return;\n      }\n\n      if (value.length < 2 || value.length !== headers.length) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value[1])) {\n        if (this.organization) {\n          const tags = (value[1] as string).split(\",\");\n          tags.forEach((tag) => {\n            tag = tag.trim();\n            let addCollection = true;\n            let collectionIndex = result.collections.length;\n\n            for (let i = 0; i < result.collections.length; i++) {\n              if (result.collections[i].name === tag) {\n                addCollection = false;\n                collectionIndex = i;\n                break;\n              }\n            }\n\n            if (addCollection) {\n              const collection = new CollectionView();\n              collection.name = tag;\n              result.collections.push(collection);\n            }\n\n            result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n          });\n        } else {\n          const tags = (value[1] as string).split(\",\");\n          const tag = tags.length > 0 ? tags[0].trim() : null;\n          this.processFolder(result, tag);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      for (let i = 2; i < value.length; i++) {\n        const header = headers[i].trim().toLowerCase();\n        if (this.isNullOrWhitespace(value[i]) || this.isNullOrWhitespace(header)) {\n          continue;\n        }\n\n        if (this.usernameFieldNames.indexOf(header) > -1) {\n          cipher.login.username = value[i];\n        } else if (this.passwordFieldNames.indexOf(header) > -1) {\n          cipher.login.password = value[i];\n        } else if (this.uriFieldNames.indexOf(header) > -1) {\n          cipher.login.uris = this.makeUriArray(value[i]);\n        } else {\n          this.processKvp(cipher, headers[i], value[i]);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassKeepCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValue(\"category\", value));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValue(\"description\", value);\n      cipher.name = this.getValueOrDefault(this.getValue(\"title\", value), \"--\");\n      cipher.login.username = this.getValue(\"username\", value);\n      cipher.login.password = this.getValue(\"password\", value);\n      cipher.login.uris = this.makeUriArray(this.getValue(\"site\", value));\n      this.processKvp(cipher, \"Password 2\", this.getValue(\"password2\", value));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private getValue(key: string, value: any) {\n    return this.getValueOrDefault(value[key], this.getValueOrDefault(value[\" \" + key]));\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { PasskyJsonExport } from \"./passky-json-types\";\n\nexport class PasskyJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const passkyExport: PasskyJsonExport = JSON.parse(data);\n    if (\n      passkyExport == null ||\n      passkyExport.passwords == null ||\n      passkyExport.passwords.length === 0\n    ) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (passkyExport.encrypted == true) {\n      result.success = false;\n      result.errorMessage = \"Unable to import an encrypted passky backup.\";\n      return Promise.resolve(result);\n    }\n\n    passkyExport.passwords.forEach((record) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = record.website;\n      cipher.login.username = record.username;\n      cipher.login.password = record.password;\n\n      cipher.login.uris = this.makeUriArray(record.website);\n      cipher.notes = record.message;\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassmanJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((credential: any) => {\n      if (credential.tags != null && credential.tags.length > 0) {\n        const folderName = credential.tags[0].text;\n        this.processFolder(result, folderName);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = credential.label;\n\n      cipher.login.username = this.getValueOrDefault(credential.username);\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.url);\n      cipher.notes += this.getValueOrDefault(credential.description, \"\");\n      if (credential.otp != null) {\n        cipher.login.totp = this.getValueOrDefault(credential.otp.secret);\n      }\n\n      if (credential.custom_fields != null) {\n        credential.custom_fields.forEach((customField: any) => {\n          switch (customField.field_type) {\n            case \"text\":\n            case \"password\":\n              this.processKvp(cipher, customField.label, customField.value);\n              break;\n          }\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/admin-console/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasspackCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const tagsJson = !this.isNullOrWhitespace(value.Tags) ? JSON.parse(value.Tags) : null;\n      const tags: string[] =\n        tagsJson != null && tagsJson.tags != null && tagsJson.tags.length > 0\n          ? tagsJson.tags\n              .map((tagJson: string) => {\n                try {\n                  const t = JSON.parse(tagJson);\n                  return this.getValueOrDefault(t.tag);\n                } catch {\n                  // Ignore error\n                }\n                return null;\n              })\n              .filter((t: string) => !this.isNullOrWhitespace(t))\n          : null;\n\n      if (this.organization && tags != null && tags.length > 0) {\n        tags.forEach((tag) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === tag) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = tag;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization && tags != null && tags.length > 0) {\n        this.processFolder(result, tags[0]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes, \"\");\n      cipher.notes += \"\\n\\n\" + this.getValueOrDefault(value[\"Shared Notes\"], \"\") + \"\\n\";\n      cipher.name = this.getValueOrDefault(value[\"Entry Name\"], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User ID\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n        value.__parsed_extra.forEach((extra: string) => {\n          if (!this.isNullOrWhitespace(extra)) {\n            cipher.notes += \"\\n\" + extra;\n          }\n        });\n      }\n\n      const fieldsJson = !this.isNullOrWhitespace(value[\"Extra Fields\"])\n        ? JSON.parse(value[\"Extra Fields\"])\n        : null;\n      const fields =\n        fieldsJson != null && fieldsJson.extraFields != null && fieldsJson.extraFields.length > 0\n          ? fieldsJson.extraFields.map((fieldJson: string) => {\n              try {\n                return JSON.parse(fieldJson);\n              } catch {\n                // Ignore error\n              }\n              return null;\n            })\n          : null;\n      if (fields != null) {\n        fields.forEach((f: any) => {\n          if (f != null) {\n            this.processKvp(cipher, f.name, f.data);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordAgentCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let newVersion = true;\n    results.forEach((value) => {\n      if (value.length !== 5 && value.length < 9) {\n        return;\n      }\n      const altFormat = value.length === 10 && value[0] === \"0\";\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[altFormat ? 1 : 0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[altFormat ? 2 : 1]);\n      cipher.login.password = this.getValueOrDefault(value[altFormat ? 3 : 2]);\n      if (value.length === 5) {\n        newVersion = false;\n        cipher.notes = this.getValueOrDefault(value[4]);\n        cipher.login.uris = this.makeUriArray(value[3]);\n      } else {\n        const folder = this.getValueOrDefault(value[altFormat ? 9 : 8], \"(None)\");\n        let folderName = folder !== \"(None)\" ? folder.split(\"\\\\\").join(\"/\") : null;\n        if (folderName != null) {\n          folderName = folder.split(\" > \").join(\"/\");\n          folderName = folder.split(\">\").join(\"/\");\n        }\n        this.processFolder(result, folderName);\n        cipher.notes = this.getValueOrDefault(value[altFormat ? 5 : 3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (newVersion && this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordBossJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.items == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    results.folders.forEach((value: any) => {\n      foldersMap.set(value.id, value.name);\n    });\n    const foldersIndexMap = new Map<string, number>();\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((value: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.login.uris = this.makeUriArray(value.login_url);\n\n      if (value.folder != null && foldersIndexMap.has(value.folder)) {\n        result.folderRelationships.push([result.ciphers.length, foldersIndexMap.get(value.folder)]);\n      }\n\n      if (value.identifiers == null) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value.identifiers.notes)) {\n        cipher.notes = value.identifiers.notes.split(\"\\\\r\\\\n\").join(\"\\n\").split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (value.type === \"CreditCard\") {\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n      }\n\n      for (const property in value.identifiers) {\n        // eslint-disable-next-line\n        if (!value.identifiers.hasOwnProperty(property)) {\n          continue;\n        }\n        const valObj = value.identifiers[property];\n        const val = valObj != null ? valObj.toString() : null;\n        if (\n          this.isNullOrWhitespace(val) ||\n          property === \"notes\" ||\n          property === \"ignoreItemInSecurityScore\"\n        ) {\n          continue;\n        }\n\n        if (property === \"custom_fields\") {\n          valObj.forEach((cf: any) => {\n            this.processKvp(cipher, cf.name, cf.value);\n          });\n          continue;\n        }\n\n        if (cipher.type === CipherType.Card) {\n          if (property === \"cardNumber\") {\n            cipher.card.number = val;\n            cipher.card.brand = this.getCardBrand(val);\n            continue;\n          } else if (property === \"nameOnCard\") {\n            cipher.card.cardholderName = val;\n            continue;\n          } else if (property === \"security_code\") {\n            cipher.card.code = val;\n            continue;\n          } else if (property === \"expires\") {\n            try {\n              const expDate = new Date(val);\n              cipher.card.expYear = expDate.getFullYear().toString();\n              cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n            } catch {\n              // Ignore error\n            }\n            continue;\n          } else if (property === \"cardType\") {\n            continue;\n          }\n        } else {\n          if (\n            (property === \"username\" || property === \"email\") &&\n            this.isNullOrWhitespace(cipher.login.username)\n          ) {\n            cipher.login.username = val;\n            continue;\n          } else if (property === \"password\") {\n            cipher.login.password = val;\n            continue;\n          } else if (property === \"totp\") {\n            cipher.login.totp = val;\n            continue;\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(property) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n            continue;\n          }\n        }\n\n        this.processKvp(cipher, property, val);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordDragonXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const records = doc.querySelectorAll(\"PasswordManager > record\");\n    Array.from(records).forEach((record) => {\n      const category = this.querySelectorDirectChild(record, \"Category\");\n      const categoryText =\n        category != null &&\n        !this.isNullOrWhitespace(category.textContent) &&\n        category.textContent !== \"Unfiled\"\n          ? category.textContent\n          : null;\n      this.processFolder(result, categoryText);\n\n      const accountName = this.querySelectorDirectChild(record, \"Account-Name\");\n      const userId = this.querySelectorDirectChild(record, \"User-Id\");\n      const password = this.querySelectorDirectChild(record, \"Password\");\n      const url = this.querySelectorDirectChild(record, \"URL\");\n      const notes = this.querySelectorDirectChild(record, \"Notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name =\n        accountName != null ? this.getValueOrDefault(accountName.textContent, \"--\") : \"--\";\n      cipher.notes = notes != null ? this.getValueOrDefault(notes.textContent) : \"\";\n      cipher.login.username = userId != null ? this.getValueOrDefault(userId.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      const attributes: string[] = [];\n      for (let i = 1; i <= 10; i++) {\n        attributes.push(\"Attribute-\" + i);\n      }\n\n      this.querySelectorAllDirectChild(record, attributes.join(\",\")).forEach((attr) => {\n        if (this.isNullOrWhitespace(attr.textContent) || attr.textContent === \"null\") {\n          return;\n        }\n        this.processKvp(cipher, attr.tagName, attr.textContent);\n      });\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordSafeXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const passwordSafe = doc.querySelector(\"passwordsafe\");\n    if (passwordSafe == null) {\n      result.errorMessage = \"Missing `passwordsafe` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const notesDelimiter = passwordSafe.getAttribute(\"delimiter\");\n    const entries = doc.querySelectorAll(\"passwordsafe > entry\");\n    Array.from(entries).forEach((entry) => {\n      const group = this.querySelectorDirectChild(entry, \"group\");\n      const groupText =\n        group != null && !this.isNullOrWhitespace(group.textContent)\n          ? group.textContent.split(\".\").join(\"/\")\n          : null;\n      this.processFolder(result, groupText);\n\n      const title = this.querySelectorDirectChild(entry, \"title\");\n      const username = this.querySelectorDirectChild(entry, \"username\");\n      const email = this.querySelectorDirectChild(entry, \"email\");\n      const password = this.querySelectorDirectChild(entry, \"password\");\n      const url = this.querySelectorDirectChild(entry, \"url\");\n      const notes = this.querySelectorDirectChild(entry, \"notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name = title != null ? this.getValueOrDefault(title.textContent, \"--\") : \"--\";\n      cipher.notes =\n        notes != null\n          ? this.getValueOrDefault(notes.textContent, \"\").split(notesDelimiter).join(\"\\n\")\n          : null;\n      cipher.login.username =\n        username != null ? this.getValueOrDefault(username.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      if (this.isNullOrWhitespace(cipher.login.username) && email != null) {\n        cipher.login.username = this.getValueOrDefault(email.textContent);\n      } else if (email != null && !this.isNullOrWhitespace(email.textContent)) {\n        cipher.notes = this.isNullOrWhitespace(cipher.notes)\n          ? \"Email: \" + email.textContent\n          : cipher.notes + \"\\n\" + \"Email: \" + email.textContent;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordWalletTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 1) {\n        return;\n      }\n      if (value.length > 5) {\n        this.processFolder(result, value[5]);\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      if (value.length > 4) {\n        cipher.notes = this.getValueOrDefault(value[4], \"\").split(\"¬\").join(\"\\n\");\n      }\n      if (value.length > 2) {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n      }\n      if (value.length > 3) {\n        cipher.login.password = this.getValueOrDefault(value[3]);\n      }\n      if (value.length > 1) {\n        cipher.login.uris = this.makeUriArray(value[1]);\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  AppPasswordEntry,\n  BookmarkEntry,\n  EnvironmentVariablesEntry,\n  FoldersEntity,\n  GPGEntry,\n  NotesEntry,\n  PsonoItemTypes,\n  PsonoJsonExport,\n  TOTPEntry,\n  WebsitePasswordEntry,\n} from \"./psono-json-types\";\n\nexport class PsonoJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const psonoExport: PsonoJsonExport = JSON.parse(data);\n    if (psonoExport == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    this.parseFolders(result, psonoExport.folders);\n    this.handleItemParsing(result, psonoExport.items);\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFolders(result: ImportResult, folders: FoldersEntity[]) {\n    if (folders == null || folders.length === 0) {\n      return;\n    }\n\n    folders.forEach((folder) => {\n      if (folder.items == null || folder.items.length == 0) {\n        return;\n      }\n\n      this.processFolder(result, folder.name);\n\n      this.handleItemParsing(result, folder.items);\n    });\n  }\n\n  private handleItemParsing(result: ImportResult, items?: PsonoItemTypes[]) {\n    if (items == null || items.length === 0) {\n      return;\n    }\n\n    items.forEach((record) => {\n      const cipher = this.parsePsonoItem(record);\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n  }\n\n  private parsePsonoItem(item: PsonoItemTypes): CipherView {\n    const cipher = this.initLoginCipher();\n\n    switch (item.type) {\n      case \"website_password\":\n        this.parseWebsiteLogins(item, cipher);\n        break;\n      case \"application_password\":\n        this.parseApplicationPasswords(item, cipher);\n        break;\n      case \"environment_variables\":\n        this.parseEnvironmentVariables(item, cipher);\n        break;\n      case \"totp\":\n        this.parseTOTP(item, cipher);\n        break;\n      case \"bookmark\":\n        this.parseBookmarks(item, cipher);\n        break;\n      // Skipping this until we can save GPG into notes/custom fields\n      // case \"mail_gpg_own_key\":\n      //   this.parseGPG(item, cipher);\n      //   break;\n      case \"note\":\n        this.parseNotes(item, cipher);\n        break;\n      default:\n        break;\n    }\n\n    return cipher;\n  }\n\n  readonly WEBSITE_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"website_password_title\",\n    \"website_password_notes\",\n    \"website_password_username\",\n    \"website_password_password\",\n    \"website_password_url\",\n    \"autosubmit\",\n    \"website_password_auto_submit\",\n    \"urlfilter\",\n    \"website_password_url_filter\",\n  ]);\n  private parseWebsiteLogins(entry: WebsitePasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"website_password\") {\n      return;\n    }\n\n    cipher.name = entry.website_password_title;\n    cipher.notes = entry.website_password_notes;\n\n    cipher.login.username = entry.website_password_username;\n    cipher.login.password = entry.website_password_password;\n\n    cipher.login.uris = this.makeUriArray(entry.website_password_url);\n\n    this.processKvp(\n      cipher,\n      \"website_password_auto_submit\",\n      entry.website_password_auto_submit.toString(),\n      FieldType.Boolean\n    );\n\n    this.processKvp(cipher, \"website_password_url_filter\", entry.website_password_url_filter);\n\n    this.importUnmappedFields(cipher, entry, this.WEBSITE_mappedValues);\n  }\n\n  readonly APP_PWD_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"application_password_title\",\n    \"application_password_notes\",\n    \"application_password_username\",\n    \"application_password_password\",\n  ]);\n  private parseApplicationPasswords(entry: AppPasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"application_password\") {\n      return;\n    }\n\n    cipher.name = entry.application_password_title;\n    cipher.notes = entry.application_password_notes;\n\n    cipher.login.username = entry.application_password_username;\n    cipher.login.password = entry.application_password_password;\n\n    this.importUnmappedFields(cipher, entry, this.APP_PWD_mappedValues);\n  }\n\n  readonly BOOKMARK_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"bookmark_title\",\n    \"bookmark_notes\",\n    \"bookmark_url\",\n  ]);\n  private parseBookmarks(entry: BookmarkEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"bookmark\") {\n      return;\n    }\n\n    cipher.name = entry.bookmark_title;\n    cipher.notes = entry.bookmark_notes;\n\n    cipher.login.uris = this.makeUriArray(entry.bookmark_url);\n\n    this.importUnmappedFields(cipher, entry, this.BOOKMARK_mappedValues);\n  }\n\n  readonly NOTES_mappedValues = new Set([\"type\", \"name\", \"note_title\", \"note_notes\"]);\n  private parseNotes(entry: NotesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"note\") {\n      return;\n    }\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.note_title;\n    cipher.notes = entry.note_notes;\n\n    this.importUnmappedFields(cipher, entry, this.NOTES_mappedValues);\n  }\n\n  readonly TOTP_mappedValues = new Set([\"type\", \"name\", \"totp_title\", \"totp_notes\", \"totp_code\"]);\n  private parseTOTP(entry: TOTPEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"totp\") {\n      return;\n    }\n\n    cipher.name = entry.totp_title;\n    cipher.notes = entry.totp_notes;\n\n    cipher.login.totp = entry.totp_code;\n\n    this.importUnmappedFields(cipher, entry, this.TOTP_mappedValues);\n  }\n\n  readonly ENV_VARIABLES_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"environment_variables_title\",\n    \"environment_variables_notes\",\n    \"environment_variables_variables\",\n  ]);\n  private parseEnvironmentVariables(entry: EnvironmentVariablesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"environment_variables\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.environment_variables_title;\n    cipher.notes = entry.environment_variables_notes;\n\n    entry.environment_variables_variables.forEach((KvPair) => {\n      this.processKvp(cipher, KvPair.key, KvPair.value);\n    });\n\n    this.importUnmappedFields(cipher, entry, this.ENV_VARIABLES_mappedValues);\n  }\n\n  readonly GPG_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"mail_gpg_own_key_title\",\n    \"mail_gpg_own_key_public\",\n    \"mail_gpg_own_key_name\",\n    \"mail_gpg_own_key_email\",\n    \"mail_gpg_own_key_private\",\n  ]);\n  private parseGPG(entry: GPGEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"mail_gpg_own_key\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.mail_gpg_own_key_title;\n    cipher.notes = entry.mail_gpg_own_key_public;\n\n    this.processKvp(cipher, \"mail_gpg_own_key_name\", entry.mail_gpg_own_key_name);\n    this.processKvp(cipher, \"mail_gpg_own_key_email\", entry.mail_gpg_own_key_email);\n    this.processKvp(\n      cipher,\n      \"mail_gpg_own_key_private\",\n      entry.mail_gpg_own_key_private,\n      FieldType.Hidden\n    );\n\n    this.importUnmappedFields(cipher, entry, this.GPG_mappedValues);\n  }\n\n  private importUnmappedFields(\n    cipher: CipherView,\n    entry: PsonoItemTypes,\n    mappedValues: Set<string>\n  ) {\n    const unmappedFields = Object.keys(entry).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = entry as any;\n      this.processKvp(cipher, key, item[key].toString());\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RememBearCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.trash === \"true\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.notes);\n      if (value.type === \"LoginItem\") {\n        cipher.login.uris = this.makeUriArray(value.website);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      } else if (value.type === \"CreditCardItem\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.verification);\n\n        try {\n          const expMonth = this.getValueOrDefault(value.expiryMonth);\n          if (expMonth != null) {\n            const expMonthNumber = parseInt(expMonth, null);\n            if (expMonthNumber != null && expMonthNumber >= 1 && expMonthNumber <= 12) {\n              cipher.card.expMonth = expMonthNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n        try {\n          const expYear = this.getValueOrDefault(value.expiryYear);\n          if (expYear != null) {\n            const expYearNumber = parseInt(expYear, null);\n            if (expYearNumber != null) {\n              cipher.card.expYear = expYearNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n\n        const pin = this.getValueOrDefault(value.pin);\n        if (pin != null) {\n          this.processKvp(cipher, \"PIN\", pin);\n        }\n        const zip = this.getValueOrDefault(value.zipCode);\n        if (zip != null) {\n          this.processKvp(cipher, \"Zip Code\", zip);\n        }\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RoboFormCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let i = 1;\n    results.forEach((value) => {\n      const folder =\n        !this.isNullOrWhitespace(value.Folder) && value.Folder.startsWith(\"/\")\n          ? value.Folder.replace(\"/\", \"\")\n          : value.Folder;\n      const folderName = !this.isNullOrWhitespace(folder) ? folder : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Login);\n      cipher.login.password = this.getValueOrDefault(value.Pwd);\n      cipher.login.uris = this.makeUriArray(value.Url);\n\n      if (!this.isNullOrWhitespace(value.Rf_fields)) {\n        let fields: string[] = [value.Rf_fields];\n        if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n          fields = fields.concat(value.__parsed_extra);\n        }\n        fields.forEach((field: string) => {\n          const parts = field.split(\":\");\n          if (parts.length < 3) {\n            return;\n          }\n          const key = parts[0] === \"-no-name-\" ? null : parts[0];\n          const val = parts.length === 4 && parts[2] === \"rck\" ? parts[1] : parts[2];\n          this.processKvp(cipher, key, val);\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n\n      if (\n        i === results.length &&\n        cipher.name === \"--\" &&\n        this.isNullOrWhitespace(cipher.login.password)\n      ) {\n        return;\n      }\n\n      result.ciphers.push(cipher);\n      i++;\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafariCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url ?? value.URL);\n      cipher.login.totp = this.getValueOrDefault(value.OTPAuth);\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafeInCloudXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const db = doc.querySelector(\"database\");\n    if (db == null) {\n      result.errorMessage = \"Missing `database` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, number>();\n\n    Array.from(doc.querySelectorAll(\"database > label\")).forEach((labelEl) => {\n      const name = labelEl.getAttribute(\"name\");\n      const id = labelEl.getAttribute(\"id\");\n      if (!this.isNullOrWhitespace(name) && !this.isNullOrWhitespace(id)) {\n        foldersMap.set(id, result.folders.length);\n        const folder = new FolderView();\n        folder.name = name;\n        result.folders.push(folder);\n      }\n    });\n\n    Array.from(doc.querySelectorAll(\"database > card\")).forEach((cardEl) => {\n      if (cardEl.getAttribute(\"template\") === \"true\" || cardEl.getAttribute(\"deleted\") === \"true\") {\n        return;\n      }\n\n      const labelIdEl = this.querySelectorDirectChild(cardEl, \"label_id\");\n      if (labelIdEl != null) {\n        const labelId = labelIdEl.textContent;\n        if (!this.isNullOrWhitespace(labelId) && foldersMap.has(labelId)) {\n          result.folderRelationships.push([result.ciphers.length, foldersMap.get(labelId)]);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(cardEl.getAttribute(\"title\"), \"--\");\n\n      if (cardEl.getAttribute(\"star\") === \"true\") {\n        cipher.favorite = true;\n      }\n\n      const cardType = cardEl.getAttribute(\"type\");\n      if (cardType === \"note\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      } else {\n        Array.from(this.querySelectorAllDirectChild(cardEl, \"field\")).forEach((fieldEl) => {\n          const text = fieldEl.textContent;\n          if (this.isNullOrWhitespace(text)) {\n            return;\n          }\n          const name = fieldEl.getAttribute(\"name\");\n          const fieldType = this.getValueOrDefault(fieldEl.getAttribute(\"type\"), \"\").toLowerCase();\n          if (fieldType === \"login\") {\n            cipher.login.username = text;\n          } else if (fieldType === \"password\" || fieldType === \"secret\") {\n            // safeInCloud allows for more than one password. we just insert them here and find the one used as password later\n            this.processKvp(cipher, name, text, FieldType.Hidden);\n          } else if (fieldType === \"one_time_password\") {\n            cipher.login.totp = text;\n          } else if (fieldType === \"notes\") {\n            cipher.notes += text + \"\\n\";\n          } else if (fieldType === \"weblogin\" || fieldType === \"website\") {\n            cipher.login.uris = this.makeUriArray(text);\n          } else {\n            this.processKvp(cipher, name, text);\n          }\n        });\n      }\n\n      Array.from(this.querySelectorAllDirectChild(cardEl, \"notes\")).forEach((notesEl) => {\n        cipher.notes += notesEl.textContent + \"\\n\";\n      });\n\n      this.setPassword(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  // Choose a password from all passwords. Take one that has password in its name, or the first one if there is no such entry\n  // if its name is password, we can safely remove it form the fields. otherwise, it would maybe be best to keep it as a hidden field\n  setPassword(cipher: CipherView) {\n    const candidates = cipher.fields.filter((field) => field.type === FieldType.Hidden);\n    if (!candidates.length) {\n      return;\n    }\n\n    let choice: FieldView;\n    for (const field of candidates) {\n      if (this.passwordFieldNames.includes(field.name.toLowerCase())) {\n        choice = field;\n        cipher.fields = cipher.fields.filter((f) => f !== choice);\n        break;\n      }\n    }\n\n    if (!choice) {\n      choice = candidates[0];\n    }\n\n    cipher.login.password = choice.value;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SaferPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.nameFromUrl(value.url), \"--\");\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SecureSafeCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title);\n      cipher.notes = this.getValueOrDefault(value.Comment);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SplashIdCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      this.processFolder(result, this.getValueOrDefault(value[value.length - 1]));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 2], \"\");\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n\n      if (value[0] === \"Web Logins\" || value[0] === \"Servers\" || value[0] === \"Email Accounts\") {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n        cipher.login.password = this.getValueOrDefault(value[3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n        this.parseFieldsToNotes(cipher, 5, value);\n      } else {\n        this.parseFieldsToNotes(cipher, 2, value);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFieldsToNotes(cipher: CipherView, startIndex: number, value: any) {\n    // last 3 rows do not get parsed\n    for (let i = startIndex; i < value.length - 3; i++) {\n      if (this.isNullOrWhitespace(value[i])) {\n        continue;\n      }\n      cipher.notes += value[i] + \"\\n\";\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class StickyPasswordXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const loginNodes = doc.querySelectorAll(\"root > Database > Logins > Login\");\n    Array.from(loginNodes).forEach((loginNode) => {\n      const accountId = loginNode.getAttribute(\"ID\");\n      if (this.isNullOrWhitespace(accountId)) {\n        return;\n      }\n\n      const usernameText = loginNode.getAttribute(\"Name\");\n      const passwordText = loginNode.getAttribute(\"Password\");\n      let titleText: string = null;\n      let linkText: string = null;\n      let notesText: string = null;\n      let groupId: string = null;\n      let groupText: string = null;\n\n      const accountLogin = doc.querySelector(\n        \"root > Database > Accounts > Account > \" +\n          'LoginLinks > Login[SourceLoginID=\"' +\n          accountId +\n          '\"]'\n      );\n      if (accountLogin != null) {\n        const account = accountLogin.parentElement.parentElement;\n        if (account != null) {\n          titleText = account.getAttribute(\"Name\");\n          linkText = account.getAttribute(\"Link\");\n          groupId = account.getAttribute(\"ParentID\");\n          notesText = account.getAttribute(\"Comments\");\n          if (!this.isNullOrWhitespace(notesText)) {\n            notesText = notesText.split(\"/n\").join(\"\\n\");\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(groupId)) {\n        groupText = this.buildGroupText(doc, groupId, \"\");\n        this.processFolder(result, groupText);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(titleText, \"--\");\n      cipher.notes = this.getValueOrDefault(notesText);\n      cipher.login.username = this.getValueOrDefault(usernameText);\n      cipher.login.password = this.getValueOrDefault(passwordText);\n      cipher.login.uris = this.makeUriArray(linkText);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  buildGroupText(doc: Document, groupId: string, groupText: string): string {\n    const group = doc.querySelector('root > Database > Groups > Group[ID=\"' + groupId + '\"]');\n    if (group == null) {\n      return groupText;\n    }\n    if (!this.isNullOrWhitespace(groupText)) {\n      groupText = \"/\" + groupText;\n    }\n    groupText = group.getAttribute(\"Name\") + groupText;\n    return this.buildGroupText(doc, group.getAttribute(\"ParentID\"), groupText);\n  }\n}\n","import { SecureNoteType } from \"@bitwarden/common/enums\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst PropertiesToIgnore = [\n  \"kind\",\n  \"autologin\",\n  \"favorite\",\n  \"hexcolor\",\n  \"protectedwithpassword\",\n  \"subdomainonly\",\n  \"type\",\n  \"tk_export_version\",\n  \"note\",\n  \"title\",\n  \"document_content\",\n];\n\nexport class TrueKeyCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.favorite, \"\").toLowerCase() === \"true\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.notes = this.getValueOrDefault(value.memo, \"\");\n      cipher.login.username = this.getValueOrDefault(value.login);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n\n      if (value.kind !== \"login\") {\n        cipher.name = this.getValueOrDefault(value.title, \"--\");\n        cipher.notes = this.getValueOrDefault(value.note, \"\");\n      }\n\n      if (value.kind === \"cc\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        if (!this.isNullOrWhitespace(value.expiryDate)) {\n          try {\n            const expDate = new Date(value.expiryDate);\n            cipher.card.expYear = expDate.getFullYear().toString();\n            cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n          } catch {\n            // Ignore error\n          }\n        }\n      } else if (value.kind !== \"login\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = this.getValueOrDefault(value.document_content, \"\");\n        }\n        for (const property in value) {\n          if (\n            value.hasOwnProperty(property) && // eslint-disable-line\n            PropertiesToIgnore.indexOf(property.toLowerCase()) < 0 &&\n            !this.isNullOrWhitespace(value[property])\n          ) {\n            this.processKvp(cipher, property, value[property]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class UpmCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length !== 5) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.notes = this.getValueOrDefault(value[4]);\n      cipher.login.username = this.getValueOrDefault(value[1]);\n      cipher.login.password = this.getValueOrDefault(value[2]);\n      cipher.login.uris = this.makeUriArray(value[3]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class YotiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User name\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ZohoVaultCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (\n        this.isNullOrWhitespace(value[\"Password Name\"]) &&\n        this.isNullOrWhitespace(value[\"Secret Name\"])\n      ) {\n        return;\n      }\n      this.processFolder(result, this.getValueOrDefault(value.ChamberName));\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite, \"0\") === \"1\";\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(\n        value[\"Password Name\"],\n        this.getValueOrDefault(value[\"Secret Name\"], \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(\n        this.getValueOrDefault(value[\"Password URL\"], this.getValueOrDefault(value[\"Secret URL\"]))\n      );\n      this.parseData(cipher, value.SecretData);\n      this.parseData(cipher, value.CustomData);\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseData(cipher: CipherView, data: string) {\n    if (this.isNullOrWhitespace(data)) {\n      return;\n    }\n    const dataLines = this.splitNewLine(data);\n    dataLines.forEach((line) => {\n      const delimPosition = line.indexOf(\":\");\n      if (delimPosition < 0) {\n        return;\n      }\n      const field = line.substring(0, delimPosition);\n      const value = line.length > delimPosition ? line.substring(delimPosition + 1) : null;\n      if (\n        this.isNullOrWhitespace(field) ||\n        this.isNullOrWhitespace(value) ||\n        field === \"SecretType\"\n      ) {\n        return;\n      }\n      const fieldLower = field.toLowerCase();\n      if (cipher.login.username == null && this.usernameFieldNames.indexOf(fieldLower) > -1) {\n        cipher.login.username = value;\n      } else if (\n        cipher.login.password == null &&\n        this.passwordFieldNames.indexOf(fieldLower) > -1\n      ) {\n        cipher.login.password = value;\n      } else {\n        this.processKvp(cipher, field, value);\n      }\n    });\n  }\n}\n","export interface ImportOption {\n  id: string;\n  name: string;\n}\n\nexport const featuredImportOptions = [\n  { id: \"bitwardenjson\", name: \"Bitwarden (json)\" },\n  { id: \"bitwardencsv\", name: \"Bitwarden (csv)\" },\n  { id: \"chromecsv\", name: \"Chrome (csv)\" },\n  { id: \"dashlanecsv\", name: \"Dashlane (csv)\" },\n  { id: \"firefoxcsv\", name: \"Firefox (csv)\" },\n  { id: \"keepass2xml\", name: \"KeePass 2 (xml)\" },\n  { id: \"lastpasscsv\", name: \"LastPass (csv)\" },\n  { id: \"safaricsv\", name: \"Safari and macOS (csv)\" },\n  { id: \"1password1pux\", name: \"1Password (1pux)\" },\n] as const;\n\nexport const regularImportOptions = [\n  { id: \"keepassxcsv\", name: \"KeePassX (csv)\" },\n  { id: \"1password1pif\", name: \"1Password (1pif)\" },\n  { id: \"1passwordwincsv\", name: \"1Password 6 and 7 Windows (csv)\" },\n  { id: \"1passwordmaccsv\", name: \"1Password 6 and 7 Mac (csv)\" },\n  { id: \"dashlanejson\", name: \"Dashlane (json)\" },\n  { id: \"roboformcsv\", name: \"RoboForm (csv)\" },\n  { id: \"keepercsv\", name: \"Keeper (csv)\" },\n  // Temporarily remove this option for the Feb release\n  // { id: \"keeperjson\", name: \"Keeper (json)\" },\n  { id: \"enpasscsv\", name: \"Enpass (csv)\" },\n  { id: \"enpassjson\", name: \"Enpass (json)\" },\n  { id: \"safeincloudxml\", name: \"SafeInCloud (xml)\" },\n  { id: \"pwsafexml\", name: \"Password Safe (xml)\" },\n  { id: \"stickypasswordxml\", name: \"Sticky Password (xml)\" },\n  { id: \"msecurecsv\", name: \"mSecure (csv)\" },\n  { id: \"truekeycsv\", name: \"True Key (csv)\" },\n  { id: \"passwordbossjson\", name: \"Password Boss (json)\" },\n  { id: \"zohovaultcsv\", name: \"Zoho Vault (csv)\" },\n  { id: \"splashidcsv\", name: \"SplashID (csv)\" },\n  { id: \"passworddragonxml\", name: \"Password Dragon (xml)\" },\n  { id: \"padlockcsv\", name: \"Padlock (csv)\" },\n  { id: \"passboltcsv\", name: \"Passbolt (csv)\" },\n  { id: \"clipperzhtml\", name: \"Clipperz (html)\" },\n  { id: \"aviracsv\", name: \"Avira (csv)\" },\n  { id: \"saferpasscsv\", name: \"SaferPass (csv)\" },\n  { id: \"upmcsv\", name: \"Universal Password Manager (csv)\" },\n  { id: \"ascendocsv\", name: \"Ascendo DataVault (csv)\" },\n  { id: \"meldiumcsv\", name: \"Meldium (csv)\" },\n  { id: \"passkeepcsv\", name: \"PassKeep (csv)\" },\n  { id: \"operacsv\", name: \"Opera (csv)\" },\n  { id: \"vivaldicsv\", name: \"Vivaldi (csv)\" },\n  { id: \"gnomejson\", name: \"GNOME Passwords and Keys/Seahorse (json)\" },\n  { id: \"blurcsv\", name: \"Blur (csv)\" },\n  { id: \"passwordagentcsv\", name: \"Password Agent (csv)\" },\n  { id: \"passpackcsv\", name: \"Passpack (csv)\" },\n  { id: \"passmanjson\", name: \"Passman (json)\" },\n  { id: \"avastcsv\", name: \"Avast Passwords (csv)\" },\n  { id: \"avastjson\", name: \"Avast Passwords (json)\" },\n  { id: \"fsecurefsk\", name: \"F-Secure KEY (fsk)\" },\n  { id: \"kasperskytxt\", name: \"Kaspersky Password Manager (txt)\" },\n  { id: \"remembearcsv\", name: \"RememBear (csv)\" },\n  { id: \"passwordwallettxt\", name: \"PasswordWallet (txt)\" },\n  { id: \"mykicsv\", name: \"Myki (csv)\" },\n  { id: \"securesafecsv\", name: \"SecureSafe (csv)\" },\n  { id: \"logmeoncecsv\", name: \"LogMeOnce (csv)\" },\n  { id: \"blackberrycsv\", name: \"BlackBerry Password Keeper (csv)\" },\n  { id: \"buttercupcsv\", name: \"Buttercup (csv)\" },\n  { id: \"codebookcsv\", name: \"Codebook (csv)\" },\n  { id: \"encryptrcsv\", name: \"Encryptr (csv)\" },\n  { id: \"yoticsv\", name: \"Yoti (csv)\" },\n  { id: \"nordpasscsv\", name: \"Nordpass (csv)\" },\n  { id: \"psonojson\", name: \"Psono (json)\" },\n  { id: \"passkyjson\", name: \"Passky (json)\" },\n] as const;\n\nexport type ImportType =\n  | (typeof featuredImportOptions)[number][\"id\"]\n  | (typeof regularImportOptions)[number][\"id\"];\n","import { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { CollectionService } from \"@bitwarden/common/admin-console/abstractions/collection.service\";\nimport { CollectionWithIdRequest } from \"@bitwarden/common/admin-console/models/request/collection-with-id.request\";\nimport { Utils } from \"@bitwarden/common/misc/utils\";\nimport { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\nimport { KvpRequest } from \"@bitwarden/common/models/request/kvp.request\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"@bitwarden/common/vault/enums/cipher-type\";\nimport { CipherRequest } from \"@bitwarden/common/vault/models/request/cipher.request\";\nimport { FolderWithIdRequest } from \"@bitwarden/common/vault/models/request/folder-with-id.request\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport {\n  AscendoCsvImporter,\n  AvastCsvImporter,\n  AvastJsonImporter,\n  AviraCsvImporter,\n  BitwardenCsvImporter,\n  BitwardenPasswordProtectedImporter,\n  BlackBerryCsvImporter,\n  BlurCsvImporter,\n  ButtercupCsvImporter,\n  ChromeCsvImporter,\n  ClipperzHtmlImporter,\n  CodebookCsvImporter,\n  DashlaneCsvImporter,\n  DashlaneJsonImporter,\n  EncryptrCsvImporter,\n  EnpassCsvImporter,\n  EnpassJsonImporter,\n  FirefoxCsvImporter,\n  FSecureFskImporter,\n  GnomeJsonImporter,\n  KasperskyTxtImporter,\n  KeePass2XmlImporter,\n  KeePassXCsvImporter,\n  KeeperCsvImporter,\n  // KeeperJsonImporter,\n  LastPassCsvImporter,\n  LogMeOnceCsvImporter,\n  MSecureCsvImporter,\n  MeldiumCsvImporter,\n  MykiCsvImporter,\n  NordPassCsvImporter,\n  OnePassword1PifImporter,\n  OnePassword1PuxImporter,\n  OnePasswordMacCsvImporter,\n  OnePasswordWinCsvImporter,\n  PadlockCsvImporter,\n  PassKeepCsvImporter,\n  PasskyJsonImporter,\n  PassmanJsonImporter,\n  PasspackCsvImporter,\n  PasswordAgentCsvImporter,\n  PasswordBossJsonImporter,\n  PasswordDragonXmlImporter,\n  PasswordSafeXmlImporter,\n  PasswordWalletTxtImporter,\n  PsonoJsonImporter,\n  RememBearCsvImporter,\n  RoboFormCsvImporter,\n  SafariCsvImporter,\n  SafeInCloudXmlImporter,\n  SaferPassCsvImporter,\n  SecureSafeCsvImporter,\n  SplashIdCsvImporter,\n  StickyPasswordXmlImporter,\n  TrueKeyCsvImporter,\n  UpmCsvImporter,\n  YotiCsvImporter,\n  ZohoVaultCsvImporter,\n} from \"../importers\";\nimport { Importer } from \"../importers/importer\";\nimport {\n  featuredImportOptions,\n  ImportOption,\n  ImportType,\n  regularImportOptions,\n} from \"../models/import-options\";\nimport { ImportResult } from \"../models/import-result\";\nimport { ImportApiServiceAbstraction } from \"../services/import-api.service.abstraction\";\nimport { ImportServiceAbstraction } from \"../services/import.service.abstraction\";\n\nexport class ImportService implements ImportServiceAbstraction {\n  featuredImportOptions = featuredImportOptions as readonly ImportOption[];\n\n  regularImportOptions = regularImportOptions as readonly ImportOption[];\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private importApiService: ImportApiServiceAbstraction,\n    private i18nService: I18nService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService\n  ) {}\n\n  getImportOptions(): ImportOption[] {\n    return this.featuredImportOptions.concat(this.regularImportOptions);\n  }\n\n  async import(\n    importer: Importer,\n    fileContents: string,\n    organizationId: string = null\n  ): Promise<ImportResult> {\n    const importResult = await importer.parse(fileContents);\n    if (!importResult.success) {\n      if (!Utils.isNullOrWhitespace(importResult.errorMessage)) {\n        throw new Error(importResult.errorMessage);\n      }\n      throw new Error(this.i18nService.t(\"importFormatError\"));\n    }\n\n    if (importResult.folders.length === 0 && importResult.ciphers.length === 0) {\n      throw new Error(this.i18nService.t(\"importNothingError\"));\n    }\n\n    if (importResult.ciphers.length > 0) {\n      const halfway = Math.floor(importResult.ciphers.length / 2);\n      const last = importResult.ciphers.length - 1;\n\n      if (\n        this.badData(importResult.ciphers[0]) &&\n        this.badData(importResult.ciphers[halfway]) &&\n        this.badData(importResult.ciphers[last])\n      ) {\n        throw new Error(this.i18nService.t(\"importFormatError\"));\n      }\n    }\n\n    try {\n      if (organizationId != null) {\n        await this.handleOrganizationalImport(importResult, organizationId);\n      } else {\n        await this.handleIndividualImport(importResult);\n      }\n    } catch (error) {\n      const errorResponse = new ErrorResponse(error, 400);\n      throw this.handleServerError(errorResponse, importResult);\n    }\n    return importResult;\n  }\n\n  getImporter(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>,\n    organizationId: string = null\n  ): Importer {\n    if (promptForPassword_callback == null) {\n      return null;\n    }\n\n    const importer = this.getImporterInstance(format, promptForPassword_callback);\n    if (importer == null) {\n      return null;\n    }\n    importer.organizationId = organizationId;\n    return importer;\n  }\n\n  private getImporterInstance(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>\n  ) {\n    if (format == null) {\n      return null;\n    }\n\n    switch (format) {\n      case \"bitwardencsv\":\n        return new BitwardenCsvImporter();\n      case \"bitwardenjson\":\n      case \"bitwardenpasswordprotected\":\n        return new BitwardenPasswordProtectedImporter(\n          this.cryptoService,\n          this.i18nService,\n          promptForPassword_callback\n        );\n      case \"lastpasscsv\":\n      case \"passboltcsv\":\n        return new LastPassCsvImporter();\n      case \"keepassxcsv\":\n        return new KeePassXCsvImporter();\n      case \"aviracsv\":\n        return new AviraCsvImporter();\n      case \"blurcsv\":\n        return new BlurCsvImporter();\n      case \"safeincloudxml\":\n        return new SafeInCloudXmlImporter();\n      case \"padlockcsv\":\n        return new PadlockCsvImporter();\n      case \"keepass2xml\":\n        return new KeePass2XmlImporter();\n      case \"chromecsv\":\n      case \"operacsv\":\n      case \"vivaldicsv\":\n        return new ChromeCsvImporter();\n      case \"firefoxcsv\":\n        return new FirefoxCsvImporter();\n      case \"upmcsv\":\n        return new UpmCsvImporter();\n      case \"saferpasscsv\":\n        return new SaferPassCsvImporter();\n      case \"safaricsv\":\n        return new SafariCsvImporter();\n      case \"meldiumcsv\":\n        return new MeldiumCsvImporter();\n      case \"1password1pif\":\n        return new OnePassword1PifImporter();\n      case \"1password1pux\":\n        return new OnePassword1PuxImporter();\n      case \"1passwordwincsv\":\n        return new OnePasswordWinCsvImporter();\n      case \"1passwordmaccsv\":\n        return new OnePasswordMacCsvImporter();\n      case \"keepercsv\":\n        return new KeeperCsvImporter();\n      // case \"keeperjson\":\n      //   return new KeeperJsonImporter();\n      case \"passworddragonxml\":\n        return new PasswordDragonXmlImporter();\n      case \"enpasscsv\":\n        return new EnpassCsvImporter();\n      case \"enpassjson\":\n        return new EnpassJsonImporter();\n      case \"pwsafexml\":\n        return new PasswordSafeXmlImporter();\n      case \"dashlanecsv\":\n        return new DashlaneCsvImporter();\n      case \"dashlanejson\":\n        return new DashlaneJsonImporter();\n      case \"msecurecsv\":\n        return new MSecureCsvImporter();\n      case \"stickypasswordxml\":\n        return new StickyPasswordXmlImporter();\n      case \"truekeycsv\":\n        return new TrueKeyCsvImporter();\n      case \"clipperzhtml\":\n        return new ClipperzHtmlImporter();\n      case \"roboformcsv\":\n        return new RoboFormCsvImporter();\n      case \"ascendocsv\":\n        return new AscendoCsvImporter();\n      case \"passwordbossjson\":\n        return new PasswordBossJsonImporter();\n      case \"zohovaultcsv\":\n        return new ZohoVaultCsvImporter();\n      case \"splashidcsv\":\n        return new SplashIdCsvImporter();\n      case \"passkeepcsv\":\n        return new PassKeepCsvImporter();\n      case \"gnomejson\":\n        return new GnomeJsonImporter();\n      case \"passwordagentcsv\":\n        return new PasswordAgentCsvImporter();\n      case \"passpackcsv\":\n        return new PasspackCsvImporter();\n      case \"passmanjson\":\n        return new PassmanJsonImporter();\n      case \"avastcsv\":\n        return new AvastCsvImporter();\n      case \"avastjson\":\n        return new AvastJsonImporter();\n      case \"fsecurefsk\":\n        return new FSecureFskImporter();\n      case \"kasperskytxt\":\n        return new KasperskyTxtImporter();\n      case \"remembearcsv\":\n        return new RememBearCsvImporter();\n      case \"passwordwallettxt\":\n        return new PasswordWalletTxtImporter();\n      case \"mykicsv\":\n        return new MykiCsvImporter();\n      case \"securesafecsv\":\n        return new SecureSafeCsvImporter();\n      case \"logmeoncecsv\":\n        return new LogMeOnceCsvImporter();\n      case \"blackberrycsv\":\n        return new BlackBerryCsvImporter();\n      case \"buttercupcsv\":\n        return new ButtercupCsvImporter();\n      case \"codebookcsv\":\n        return new CodebookCsvImporter();\n      case \"encryptrcsv\":\n        return new EncryptrCsvImporter();\n      case \"yoticsv\":\n        return new YotiCsvImporter();\n      case \"nordpasscsv\":\n        return new NordPassCsvImporter();\n      case \"psonojson\":\n        return new PsonoJsonImporter();\n      case \"passkyjson\":\n        return new PasskyJsonImporter();\n      default:\n        return null;\n    }\n  }\n\n  private async handleIndividualImport(importResult: ImportResult) {\n    const request = new ImportCiphersRequest();\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.folders != null) {\n      for (let i = 0; i < importResult.folders.length; i++) {\n        const f = await this.folderService.encrypt(importResult.folders[i]);\n        request.folders.push(new FolderWithIdRequest(f));\n      }\n    }\n    if (importResult.folderRelationships != null) {\n      importResult.folderRelationships.forEach((r) =>\n        request.folderRelationships.push(new KvpRequest(r[0], r[1]))\n      );\n    }\n    return await this.importApiService.postImportCiphers(request);\n  }\n\n  private async handleOrganizationalImport(importResult: ImportResult, organizationId: string) {\n    const request = new ImportOrganizationCiphersRequest();\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      importResult.ciphers[i].organizationId = organizationId;\n      const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.collections != null) {\n      for (let i = 0; i < importResult.collections.length; i++) {\n        importResult.collections[i].organizationId = organizationId;\n        const c = await this.collectionService.encrypt(importResult.collections[i]);\n        request.collections.push(new CollectionWithIdRequest(c));\n      }\n    }\n    if (importResult.collectionRelationships != null) {\n      importResult.collectionRelationships.forEach((r) =>\n        request.collectionRelationships.push(new KvpRequest(r[0], r[1]))\n      );\n    }\n    return await this.importApiService.postImportOrganizationCiphers(organizationId, request);\n  }\n\n  private badData(c: CipherView) {\n    return (\n      (c.name == null || c.name === \"--\") &&\n      c.type === CipherType.Login &&\n      c.login != null &&\n      Utils.isNullOrWhitespace(c.login.password)\n    );\n  }\n\n  private handleServerError(errorResponse: ErrorResponse, importResult: ImportResult): Error {\n    if (errorResponse.validationErrors == null) {\n      return new Error(errorResponse.message);\n    }\n\n    let errorMessage = \"\";\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const i = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Ciphers\":\n          item = importResult.ciphers[i];\n          itemType = CipherType[item.type];\n          break;\n        case \"Folders\":\n          item = importResult.folders[i];\n          itemType = \"Folder\";\n          break;\n        case \"Collections\":\n          item = importResult.collections[i];\n          itemType = \"Collection\";\n          break;\n        default:\n          return;\n      }\n\n      if (index > 0) {\n        errorMessage += \"\\n\\n\";\n      }\n\n      if (itemType !== \"Folder\" && itemType !== \"Collection\") {\n        errorMessage += \"[\" + (i + 1) + \"] \";\n      }\n\n      errorMessage += \"[\" + itemType + '] \"' + item.name + '\": ' + value;\n    });\n\n    return new Error(errorMessage);\n  }\n}\n"],"names":["constructor","modalRef","config","userVerificationService","formBuilder","platformUtilsService","i18nService","confirmDescription","this","data","confirmButtonText","modalTitle","secret","submit","verifyUser","value","e","showToast","t","close","UserVerificationPromptComponent","cryptoService","exportService","eventCollectionService","policyService","win","logService","fileDownloadService","onSaved","disabledByPolicy","exportForm","group","format","filePassword","confirmFilePassword","fileEncryptionType","formatOptions","name","destroy$","Subject","ngOnInit","policyAppliesToActiveUser$","pipe","takeUntil","subscribe","policyAppliesToActiveUser","checkExportDisabled","merge","get","valueChanges","startWith","adjustValidators","ngOnDestroy","next","disable","encryptedFormat","doExport","formPromise","getExportData","downloadFile","saved","collectEvent","setValue","clearValidators","error","warningDialog","message","showDialog","emit","getPasswordProtectedExport","getExport","getFileName","prefix","extension","collect","reset","controls","enable","csv","fileName","download","blobData","blobOptions","type","ExportComponent","modalService","super","window","encryptedExportType","isFileEncryptedExport","markAllAsTouched","valid","isAccountEncryptedExport","ref","open","allowMultipleModals","onClosedPromise","ImportSuccessDialogComponent","dialogRef","dataSource","buildResultList","logins","cards","identities","secureNotes","ciphers","map","c","list","push","icon","count","folders","length","collections","FilePasswordPromptComponent","markAsTouched","cancel","ImportComponent","importService","router","syncService","dialogService","loading","importBlockedByPolicy","organizationId","successNavigate","setImportOptions","firstValueFrom","importer","getImporter","getFilePassword","files","document","getElementById","fileContents","content","getFileContents","result","import","fullSync","navigate","getFormatInstructionTitle","results","featuredImportOptions","concat","importOptions","filter","o","id","regularImportOptions","sort","a","b","collator","compare","localeCompare","setSelectedFile","event","fileInputEl","target","fileSelected","heightAuto","buttonsStyling","iconHtml","input","inputValue","inputAttributes","readonly","titleText","text","showConfirmButton","onOpen","popupEl","querySelector","scrollTo","file","extract1PuxContent","Promise","resolve","reject","reader","FileReader","readAsText","onload","evt","pre","DOMParser","parseFromString","textContent","onerror","loadAsync","then","zip","async","title","ExportScopeCalloutComponent","organizationService","stateService","show","hasOrganizations","scopeConfig","description","scopeIdentifier","getEmail","BoxRowDirective","elRef","el","nativeElement","formEls","Array","from","querySelectorAll","forEach","formEl","addEventListener","classList","add","remove","onClick","contains","tagName","toLowerCase","inputEl","click","focus","TableDataSource","_filter","_renderData","_renderChangesSubscription","_data","_sort","direction","connect","updateChangeSubscription","disconnect","unsubscribe","filteredData","filterData","orderedData","orderData","obj","filterPredicate","sortData","sortingDataAccessor","sortHeaderId","numberValue","Number","MAX_SAFE_INTEGER","column","directionModifier","fn","valueA","valueB","valueAType","valueBType","comparatorResult","dataStr","Object","keys","reduce","currentTerm","key","transformedFilter","trim","indexOf","ImportApiServiceAbstraction","ImportApiService","apiService","postImportCiphers","request","send","postImportOrganizationCiphers","ImportServiceAbstraction","CollectionWithIdRequest","collection","ImportCiphersRequest","folderRelationships","ImportOrganizationCiphersRequest","collectionRelationships","KvpRequest","success","newLineRegex","passwordFieldNames","usernameFieldNames","notesFieldNames","uriFieldNames","parseCsvOptions","encoding","skipEmptyLines","organization","parseXml","doc","parseCsv","header","options","parseOptions","assign","splitNewLine","join","errors","row","warning","parseSingleRowCsv","rowData","isNullOrWhitespace","parsedRow","makeUriArray","uri","loginUri","fixUri","match","returnArr","u","substring","nameFromUrl","url","hostname","startsWith","replace","str","getValueOrDefault","defaultValue","split","getCardBrand","cardNum","re","RegExp","test","setCardExpiration","cipher","expiration","parts","month","year","substr","card","expMonth","expYear","moveFoldersToCollections","r","f","querySelectorDirectChild","parentEl","query","els","querySelectorAllDirectChild","parentNode","initLoginCipher","favorite","notes","fields","login","cleanupCipher","processKvp","search","field","processFolder","folderName","folderIndex","addFolder","i","convertToNoteIfNeeded","username","password","uris","secureNote","processFullName","fullName","nameParts","identity","firstName","lastName","middleName","slice","AscendoCsvImporter","parse","val","fieldLower","AvastCsvImporter","web","AvastJsonImporter","JSON","custName","note","pwd","loginName","label","cardholderName","holderName","number","cardNumber","code","cvv","brand","expirationDate","AviraCsvImporter","website","secondary_username","BlackBerryCsvImporter","grouping","fav","extra","ChromeCsvImporter","androidPatternRegex","BitwardenCsvImporter","col","addCollection","collectionIndex","folder","reprompt","parseInt","console","delimPosition","lastIndexOf","totp","login_totp","login_username","login_password","login_uri","BitwardenJsonImporter","items","encrypted","parseEncrypted","parseDecrypted","encKeyValidation_DO_NOT_EDIT","orgKey","getOrgKey","encKeyValidation","decryptToUtf8","errorMessage","groupingsMap","Map","view","decrypt","set","collectionIds","passwordHistory","folderId","has","cId","BitwardenPasswordProtectedImporter","promptForPassword_callback","parsedData","passwordProtected","cannotParseFile","checkPassword","encData","clearTextData","jdoc","makePinKey","salt","kdfType","kdfIterations","kdfMemory","kdfParallelism","BlurCsvImporter","domain","email","OfficialProps","ButtercupCsvImporter","URL","processingCustomFields","prop","hasOwnProperty","ClipperzHtmlImporter","textarea","entry","currentVersion","property","actionType","labelLower","CodebookCsvImporter","Category","Favorite","Entry","Note","Username","Email","Password","TOTP","Website","Phone","PIN","Account","Date","_mappedCredentialsColums","Set","_mappedPersonalInfoAsIdentiyColumns","_mappedSecureNoteColumns","DashlaneCsvImporter","x","parsePersonalInformationRecordAsIdentity","rowKeys","category","parseCredentialsRecord","parsePaymentRecord","parseIdRecord","parsePersonalInformationRecord","parseSecureNoteRecords","otpSecret","importUnmappedFields","account_name","mappedValues","cc_number","expiration_month","expiration_year","account_holder","account_number","licenseNumber","passportNumber","state","ssn","first_name","middle_name","last_name","item_name","dataRow","phone","phone_number","address1","address","city","postalCode","country","item","HandledResults","DashlaneJsonImporter","ADDRESS","processAddress","AUTHENTIFIANT","processAuth","BANKSTATEMENT","processNote","IDCARD","PAYMENTMEANS_CREDITCARD","processCard","IDENTITY","processIdentity","credential","secondaryLogin","pseudo","addressName","addressFull","zipcode","toUpperCase","bank","owner","nameProperty","toString","EncryptrCsvImporter","Label","Notes","Text","CVV","expiry","Expiry","expParts","EnpassCsvImporter","firstRow","containsField","fieldValue","fieldName","fieldNameLower","androidUrlRegex","EnpassJsonImporter","foldersMap","foldersIndexMap","folderTree","buildFolderTree","flattenFolderTree","template_type","processLogin","some","urls","cleanedValue","sensitive","uuid","children","parent_uuid","titlePrefix","tree","FirefoxCsvImporter","FskEntryTypesEnum","FSecureFskImporter","parseEntry","service","Login","handleLoginEntry","CreditCard","handleCreditCardEntry","creditNumber","creditCvv","creditExpiry","GnomeJsonImporter","keyRing","display_name","attributes","username_value","attr","NotesHeader","ApplicationsHeader","WebsitesHeader","Delimiter","KasperskyTxtImporter","notesData","applicationsData","websitesData","workingData","parseDataCategory","applications","websites","n","w","nameKey","p","itemComment","itemCommentKey","l","colonIndex","size","KeePass2XmlImporter","KeePassFileNode","RootNode","rootGroup","traverse","node","isRootNode","groupPrefixName","groupName","nameEl","cipherIndex","entryString","valueEl","keyEl","attrs","ProtectInMemory","KeePassXCsvImporter","Title","Group","KeeperCsvImporter","LastPassCsvImporter","hasFolder","buildBaseCipher","parseSecureNote","parseCard","parseIdentity","ccnum","cardCipher","profilename","firstname","lastname","ccname","cccsc","ccexp","ccexpParts","middlename","company","address2","address3","charAt","extraParts","processedNote","typeParts","mappedData","parseSecureNoteMapping","undefined","monthString","getMonth","isNaN","Company","State","Country","dataObj","processingNotes","extraPart","LogMeOnceCsvImporter","MeldiumCsvImporter","DisplayName","UserName","Url","MSecureCsvImporter","mappedBaseColumns","_mappedUserAccountColumns","_mappedCreditCardColumns","_mappedIdentityColumns","_mappedIdCardColumns","_mappedTwoFaColumns","_mappedUserNoteColumns","MykiCsvImporter","nickname","additionalInfo","twofaSecret","authToken","cardName","exp_month","exp_year","firstAddressLine","secondAddressLine","zipCode","idType","idName","idCountry","idNumber","NordPassCsvImporter","record","recordType","evaluateType","cardholdername","cardnumber","cvc","expirydate","full_name","CategoryEnum","LoginFieldTypeEnum","OnePassword1PifImporter","line","trashed","hmac","processStandardItem","processWinOpVaultItem","overview","URLs","details","parsePasswordHistory","notesPlain","parseFields","sections","section","openContents","faveIndex","typeName","location","secureContents","maxSize","h","time","ph","lastUsedDate","designationKey","valueKey","k","toUTCString","fieldDesignation","street","fieldType","OnePassword1PuxImporter","accounts","vaults","vault","categoryUuid","Database","WirelessRouter","Server","API_Credential","BankAccount","SecureNote","SoftwareLicense","EmailAccount","MedicalRecord","Identity","DriversLicense","OutdoorLicense","Membership","Passport","RewardsProgram","SocialSecurityNumber","favIndex","processOverview","processLoginFields","processDetails","processSections","tags","capitalize","inputString","loginFields","loginField","designation","CheckBox","parseSectionFields","anyField","getFieldName","extractValue","fillLogin","fillApiCredentials","fillCreditCard","fillBankAccount","fillIdentity","fillDriversLicense","fillOutdoorLicense","fillMembership","fillPassport","fillRewardsProgram","fillSSN","email_address","provider","guarded","date","monthYear","historyItems","CipherImportContext","importRecord","lowerProperty","IgnoredProperties","OnePasswordCsvImporter","loginPropertyParsers","setLoginUsername","setLoginPassword","setLoginUris","creditCardPropertyParsers","setCreditCardNumber","setCreditCardVerification","setCreditCardCardholderName","setCreditCardExpiry","identityPropertyParsers","setIdentityFirstName","setIdentityInitial","setIdentityLastName","setIdentityUserName","setIdentityEmail","setIdentityPhone","setIdentityCompany","quoteChar","escapeChar","getProp","setNotes","setCipherType","altUsername","context","setKnownLoginValue","setKnownCreditCardValue","setKnownIdentityValue","setUnknownValue","entries","agg","getPropByRegexp","regexp","matchingKeys","getPropIncluding","includesMap","includes","func","bind","readableDate","OnePasswordMacCsvImporter","OnePasswordWinCsvImporter","setIdentityAddress","expSplit","PadlockCsvImporter","headers","v","tag","PassKeepCsvImporter","getValue","PasskyJsonImporter","passkyExport","passwords","PassmanJsonImporter","otp","custom_fields","customField","field_type","PasspackCsvImporter","tagsJson","Tags","tagJson","__parsed_extra","fieldsJson","extraFields","fieldJson","PasswordAgentCsvImporter","newVersion","altFormat","PasswordBossJsonImporter","login_url","identifiers","valObj","expDate","getFullYear","cf","PasswordDragonXmlImporter","records","categoryText","accountName","userId","PasswordSafeXmlImporter","passwordSafe","notesDelimiter","getAttribute","groupText","PasswordWalletTxtImporter","PsonoJsonImporter","WEBSITE_mappedValues","APP_PWD_mappedValues","BOOKMARK_mappedValues","NOTES_mappedValues","TOTP_mappedValues","ENV_VARIABLES_mappedValues","GPG_mappedValues","psonoExport","parseFolders","handleItemParsing","parsePsonoItem","parseWebsiteLogins","parseApplicationPasswords","parseEnvironmentVariables","parseTOTP","parseBookmarks","parseNotes","website_password_title","website_password_notes","website_password_username","website_password_password","website_password_url","website_password_auto_submit","website_password_url_filter","application_password_title","application_password_notes","application_password_username","application_password_password","bookmark_title","bookmark_notes","bookmark_url","note_title","note_notes","totp_title","totp_notes","totp_code","environment_variables_title","environment_variables_notes","environment_variables_variables","KvPair","parseGPG","mail_gpg_own_key_title","mail_gpg_own_key_public","mail_gpg_own_key_name","mail_gpg_own_key_email","mail_gpg_own_key_private","RememBearCsvImporter","trash","cardholder","verification","expiryMonth","expMonthNumber","expiryYear","expYearNumber","pin","RoboFormCsvImporter","Folder","Name","Pwd","Rf_fields","SafariCsvImporter","OTPAuth","SafeInCloudXmlImporter","labelEl","cardEl","labelIdEl","labelId","fieldEl","notesEl","setPassword","candidates","choice","SaferPassCsvImporter","SecureSafeCsvImporter","Comment","SplashIdCsvImporter","parseFieldsToNotes","startIndex","StickyPasswordXmlImporter","loginNodes","loginNode","accountId","usernameText","passwordText","linkText","notesText","groupId","accountLogin","account","parentElement","buildGroupText","PropertiesToIgnore","TrueKeyCsvImporter","memo","kind","expiryDate","document_content","UpmCsvImporter","YotiCsvImporter","ZohoVaultCsvImporter","ChamberName","parseData","SecretData","CustomData","ImportService","cipherService","folderService","importApiService","collectionService","getImportOptions","importResult","Error","halfway","Math","floor","last","badData","handleOrganizationalImport","handleIndividualImport","errorResponse","handleServerError","getImporterInstance","encrypt","validationErrors","index","itemType"],"sourceRoot":""}