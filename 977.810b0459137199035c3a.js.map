{"version":3,"file":"977.810b0459137199035c3a.js","mappings":"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","sources":["webpack://@bitwarden/web-vault/../../libs/common/src/enums/encryptedExportType.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/components/export.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/components/user-verification-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/components/user-verification-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/components/user-verification-prompt.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/export.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/file-password-prompt.component.ts","webpack://@bitwarden/web-vault/./src/app/tools/import-export/file-password-prompt.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.html","webpack://@bitwarden/web-vault/./src/app/tools/import-export/import.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/components/export-scope-callout.component.html","webpack://@bitwarden/web-vault/../../libs/angular/src/components/export-scope-callout.component.ts","webpack://@bitwarden/web-vault/../../libs/angular/src/directives/box-row.directive.ts","webpack://@bitwarden/web-vault/../../libs/common/src/abstractions/import.service.ts","webpack://@bitwarden/web-vault/../../libs/common/src/enums/importOptions.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/domain/import-result.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/baseImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/ascendoCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/avastCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/avastJsonImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/aviraCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/bitwardenCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/bitwardenJsonImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/bitwardenPasswordProtectedImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/blackBerryCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/blurCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/buttercupCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/chrome-csv-importer.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/clipperzHtmlImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/codebookCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/dashlaneImporters/dashlaneCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/dashlaneImporters/dashlaneJsonImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/encryptrCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/enpassCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/enpassJsonImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/firefoxCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/fsecureFskImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/gnomeJsonImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/importError.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/kasperskyTxtImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/keepass2XmlImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/keepassxCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/keeperImporters/keeperCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/lastpassCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/logMeOnceCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/meldiumCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/msecureCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/mykiCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/nordpassCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepasswordImporters/types/onepassword1PuxImporterTypes.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepasswordImporters/onepassword1PifImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepasswordImporters/onepassword1PuxImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepasswordImporters/cipherImportContext.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepasswordImporters/onepasswordCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepasswordImporters/onepasswordMacCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/onepasswordImporters/onepasswordWinCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/padlockCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passkeepCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passmanJsonImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passpackCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passwordAgentCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passwordBossJsonImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passwordDragonXmlImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passwordSafeXmlImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/passwordWalletTxtImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/rememBearCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/roboformCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/safariCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/safeInCloudXmlImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/saferpassCsvImport.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/secureSafeCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/splashIdCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/stickyPasswordXmlImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/truekeyCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/upmCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/yotiCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/importers/zohoVaultCsvImporter.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/import-organization-ciphers.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/models/request/kvp.request.ts","webpack://@bitwarden/web-vault/../../libs/common/src/services/import.service.ts"],"sourcesContent":["export enum EncryptedExportType {\n  AccountEncrypted = 0,\n  FileEncrypted = 1,\n}\n","import { Directive, EventEmitter, OnDestroy, OnInit, Output } from \"@angular/core\";\nimport { UntypedFormBuilder, Validators } from \"@angular/forms\";\nimport { merge, takeUntil, Subject, startWith } from \"rxjs\";\n\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EventService } from \"@bitwarden/common/abstractions/event.service\";\nimport { ExportService } from \"@bitwarden/common/abstractions/export.service\";\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { PolicyService } from \"@bitwarden/common/abstractions/policy/policy.service.abstraction\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\nimport { EncryptedExportType } from \"@bitwarden/common/enums/encryptedExportType\";\nimport { EventType } from \"@bitwarden/common/enums/eventType\";\nimport { PolicyType } from \"@bitwarden/common/enums/policyType\";\n\n@Directive()\nexport class ExportComponent implements OnInit, OnDestroy {\n  @Output() onSaved = new EventEmitter();\n\n  formPromise: Promise<string>;\n  disabledByPolicy = false;\n  showFilePassword: boolean;\n  showConfirmFilePassword: boolean;\n\n  exportForm = this.formBuilder.group({\n    format: [\"json\"],\n    secret: [\"\"],\n    filePassword: [\"\", Validators.required],\n    confirmFilePassword: [\"\", Validators.required],\n    fileEncryptionType: [EncryptedExportType.AccountEncrypted],\n  });\n\n  formatOptions = [\n    { name: \".json\", value: \"json\" },\n    { name: \".csv\", value: \"csv\" },\n    { name: \".json (Encrypted)\", value: \"encrypted_json\" },\n  ];\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService,\n    protected platformUtilsService: PlatformUtilsService,\n    protected exportService: ExportService,\n    protected eventService: EventService,\n    private policyService: PolicyService,\n    protected win: Window,\n    private logService: LogService,\n    private userVerificationService: UserVerificationService,\n    private formBuilder: UntypedFormBuilder,\n    protected fileDownloadService: FileDownloadService\n  ) {}\n\n  async ngOnInit() {\n    this.policyService\n      .policyAppliesToActiveUser$(PolicyType.DisablePersonalVaultExport)\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((policyAppliesToActiveUser) => {\n        this.disabledByPolicy = policyAppliesToActiveUser;\n      });\n\n    await this.checkExportDisabled();\n\n    merge(\n      this.exportForm.get(\"format\").valueChanges,\n      this.exportForm.get(\"fileEncryptionType\").valueChanges\n    )\n      .pipe(takeUntil(this.destroy$))\n      .pipe(startWith(0))\n      .subscribe(() => this.adjustValidators());\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n  }\n\n  async checkExportDisabled() {\n    if (this.disabledByPolicy) {\n      this.exportForm.disable();\n    }\n  }\n\n  get encryptedFormat() {\n    return this.format === \"encrypted_json\";\n  }\n\n  protected async doExport() {\n    try {\n      this.formPromise = this.getExportData();\n      const data = await this.formPromise;\n      this.downloadFile(data);\n      this.saved();\n      await this.collectEvent();\n      this.exportForm.get(\"secret\").setValue(\"\");\n      this.exportForm.clearValidators();\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  async submit() {\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const acceptedWarning = await this.warningDialog();\n    if (!acceptedWarning) {\n      return;\n    }\n    const secret = this.exportForm.get(\"secret\").value;\n\n    try {\n      await this.userVerificationService.verifyUser(secret);\n    } catch (e) {\n      this.platformUtilsService.showToast(\"error\", this.i18nService.t(\"errorOccurred\"), e.message);\n      return;\n    }\n\n    this.doExport();\n  }\n\n  async warningDialog() {\n    if (this.encryptedFormat) {\n      return await this.platformUtilsService.showDialog(\n        \"<p>\" +\n          this.i18nService.t(\"encExportKeyWarningDesc\") +\n          \"<p>\" +\n          this.i18nService.t(\"encExportAccountWarningDesc\"),\n        this.i18nService.t(\"confirmVaultExport\"),\n        this.i18nService.t(\"exportVault\"),\n        this.i18nService.t(\"cancel\"),\n        \"warning\",\n        true\n      );\n    } else {\n      return await this.platformUtilsService.showDialog(\n        this.i18nService.t(\"exportWarningDesc\"),\n        this.i18nService.t(\"confirmVaultExport\"),\n        this.i18nService.t(\"exportVault\"),\n        this.i18nService.t(\"cancel\"),\n        \"warning\"\n      );\n    }\n  }\n\n  protected saved() {\n    this.onSaved.emit();\n  }\n\n  protected getExportData() {\n    if (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    ) {\n      return this.exportService.getPasswordProtectedExport(this.filePassword);\n    } else {\n      return this.exportService.getExport(this.format, null);\n    }\n  }\n\n  protected getFileName(prefix?: string) {\n    let extension = this.format;\n    if (this.format === \"encrypted_json\") {\n      if (prefix == null) {\n        prefix = \"encrypted\";\n      } else {\n        prefix = \"encrypted_\" + prefix;\n      }\n      extension = \"json\";\n    }\n    return this.exportService.getFileName(prefix, extension);\n  }\n\n  protected async collectEvent(): Promise<void> {\n    await this.eventService.collect(EventType.User_ClientExportedVault);\n  }\n\n  get format() {\n    return this.exportForm.get(\"format\").value;\n  }\n\n  get filePassword() {\n    return this.exportForm.get(\"filePassword\").value;\n  }\n\n  get confirmFilePassword() {\n    return this.exportForm.get(\"confirmFilePassword\").value;\n  }\n\n  get fileEncryptionType() {\n    return this.exportForm.get(\"fileEncryptionType\").value;\n  }\n\n  toggleFilePassword() {\n    this.showFilePassword = !this.showFilePassword;\n    document.getElementById(\"filePassword\").focus();\n  }\n\n  toggleConfirmFilePassword() {\n    this.showConfirmFilePassword = !this.showConfirmFilePassword;\n    document.getElementById(\"confirmFilePassword\").focus();\n  }\n\n  adjustValidators() {\n    this.exportForm.get(\"confirmFilePassword\").reset();\n    this.exportForm.get(\"filePassword\").reset();\n\n    if (this.encryptedFormat && this.fileEncryptionType == EncryptedExportType.FileEncrypted) {\n      this.exportForm.controls.filePassword.enable();\n      this.exportForm.controls.confirmFilePassword.enable();\n    } else {\n      this.exportForm.controls.filePassword.disable();\n      this.exportForm.controls.confirmFilePassword.disable();\n    }\n  }\n\n  private downloadFile(csv: string): void {\n    const fileName = this.getFileName();\n    this.fileDownloadService.download({\n      fileName: fileName,\n      blobData: csv,\n      blobOptions: { type: \"text/plain\" },\n    });\n  }\n}\n","import { Directive } from \"@angular/core\";\nimport { FormBuilder, FormControl } from \"@angular/forms\";\n\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\n\nimport { ModalConfig } from \"../services/modal.service\";\n\nimport { ModalRef } from \"./modal/modal.ref\";\n\n/**\n * Used to verify the user's identity (using their master password or email-based OTP for Key Connector users). You can customize all of the text in the modal.\n */\n@Directive()\nexport class UserVerificationPromptComponent {\n  confirmDescription = this.config.data.confirmDescription;\n  confirmButtonText = this.config.data.confirmButtonText;\n  modalTitle = this.config.data.modalTitle;\n  secret = new FormControl();\n\n  constructor(\n    private modalRef: ModalRef,\n    protected config: ModalConfig,\n    protected userVerificationService: UserVerificationService,\n    private formBuilder: FormBuilder,\n    private platformUtilsService: PlatformUtilsService,\n    private i18nService: I18nService\n  ) {}\n\n  async submit() {\n    try {\n      //Incorrect secret will throw an invalid password error.\n      await this.userVerificationService.verifyUser(this.secret.value);\n    } catch (e) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"error\"),\n        this.i18nService.t(\"invalidMasterPassword\")\n      );\n      return;\n    }\n\n    this.modalRef.close(true);\n  }\n}\n","import { Component } from \"@angular/core\";\n\nimport { UserVerificationPromptComponent as BaseUserVerificationPrompt } from \"@bitwarden/angular/components/user-verification-prompt.component\";\n\n@Component({\n  templateUrl: \"user-verification-prompt.component.html\",\n})\nexport class UserVerificationPromptComponent extends BaseUserVerificationPrompt {}\n","<div class=\"modal fade\" role=\"dialog\" aria-modal=\"true\" aria-labelledby=\"confirmUserTitle\">\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form class=\"modal-content\" #form (ngSubmit)=\"submit()\">\n      <h2 class=\"tw-mt-6 tw-mb-6 tw-pl-3.5 tw-pr-3.5 tw-font-semibold\" id=\"modalTitle | i18n \">\n        {{ modalTitle | i18n | uppercase }}\n      </h2>\n      <div class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-p-3.5\">\n        {{ confirmDescription | i18n }}\n      </div>\n      <div class=\"tw-p-3.5\">\n        <app-user-verification ngDefaultControl [formControl]=\"secret\" name=\"secret\">\n        </app-user-verification>\n      </div>\n      <div\n        class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-p-3.5\"\n      >\n        <button bitButton buttonType=\"primary\" type=\"submit\" appBlurClick>\n          <span>{{ confirmButtonText | i18n }}</span>\n        </button>\n        <button bitButton buttonType=\"secondary\" data-dismiss=\"modal\">\n          {{ \"cancel\" | i18n }}\n        </button>\n      </div>\n    </form>\n  </div>\n</div>\n","<form\n  #form\n  (ngSubmit)=\"submit()\"\n  [appApiAction]=\"formPromise\"\n  [formGroup]=\"exportForm\"\n  *ngIf=\"exportForm\"\n>\n  <div class=\"page-header\">\n    <h1>{{ \"exportVault\" | i18n }}</h1>\n  </div>\n\n  <app-callout type=\"error\" title=\"{{ 'vaultExportDisabled' | i18n }}\" *ngIf=\"disabledByPolicy\">\n    {{ \"personalVaultExportPolicyInEffect\" | i18n }}\n  </app-callout>\n  <app-export-scope-callout\n    [organizationId]=\"organizationId\"\n    *ngIf=\"!disabledByPolicy\"\n  ></app-export-scope-callout>\n\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <bit-form-field>\n        <bit-label class=\"tw-text-lg\" for=\"format\">{{ \"fileFormat\" | i18n }}</bit-label>\n        <select bitInput name=\"format\" formControlName=\"format\">\n          <option *ngFor=\"let f of formatOptions\" [value]=\"f.value\">{{ f.name }}</option>\n        </select>\n      </bit-form-field>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"form-group col-6\">\n      <ng-container *ngIf=\"format === 'encrypted_json'\">\n        <div role=\"radiogroup\" aria-labelledby=\"fileTypeHeading\">\n          <label id=\"fileTypeHeading\" class=\"tw-semi-bold tw-text-lg\">\n            {{ \"fileTypeHeading\" | i18n }}\n          </label>\n\n          <div appBoxRow name=\"FileTypeOptions\" class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"AccountEncrypted\"\n                [value]=\"encryptedExportType.AccountEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.AccountEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-ml-1 tw-mt-1 tw-mb-1\" for=\"AccountEncrypted\">\n                {{ \"accountBackup\" | i18n }}\n              </label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 pb-2 tw-text-sm\">\n            {{ \"accountBackupOptionDescription\" | i18n }}\n          </div>\n\n          <div class=\"tw-flex tw-items-center\">\n            <div>\n              <input\n                type=\"radio\"\n                class=\"radio\"\n                name=\"fileEncryptionType\"\n                id=\"FileEncrypted\"\n                [value]=\"encryptedExportType.FileEncrypted\"\n                formControlName=\"fileEncryptionType\"\n                [checked]=\"fileEncryptionType === encryptedExportType.FileEncrypted\"\n              />\n            </div>\n            <div>\n              <label class=\"tw-semi-bold tw-text-md tw-ml-1 tw-mt-1 tw-mb-1\" for=\"FileEncrypted\">{{\n                \"passwordProtected\" | i18n\n              }}</label>\n            </div>\n          </div>\n\n          <div class=\"tw-regular ml-3 tw-text-sm\">\n            {{ \"passwordProtectedOptionDescription\" | i18n }}\n          </div>\n        </div>\n        <br />\n\n        <ng-container *ngIf=\"fileEncryptionType == encryptedExportType.FileEncrypted\">\n          <div class=\"input-group\">\n            <bit-form-field class=\"tw-w-full\">\n              <bit-label>{{ \"filePassword\" | i18n }}</bit-label>\n              <input\n                bitInput\n                type=\"{{ showFilePassword ? 'text' : 'password' }}\"\n                id=\"filePassword\"\n                formControlName=\"filePassword\"\n                name=\"password\"\n              />\n\n              <div class=\"input-group-append\">\n                <button\n                  bitSuffix\n                  bitButton\n                  buttonType=\"secondary\"\n                  appStopClick\n                  appA11yTitle=\"{{ 'toggleVisibility' | i18n }}\"\n                  [attr.aria-pressed]=\"showFilePassword\"\n                  (click)=\"toggleFilePassword()\"\n                  type=\"button\"\n                >\n                  <i\n                    class=\"bwi bwi-lg\"\n                    aria-hidden=\"true\"\n                    [ngClass]=\"{ 'bwi-eye': !showFilePassword, 'bwi-eye-slash': showFilePassword }\"\n                  ></i>\n                </button>\n              </div>\n            </bit-form-field>\n            <div class=\"small text-muted\">\n              {{ \"exportPasswordDescription\" | i18n }}\n            </div>\n          </div>\n          <div class=\"input-group tw-mt-4\">\n            <bit-form-field class=\"tw-w-full\">\n              <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n              <input\n                bitInput\n                type=\"{{ showConfirmFilePassword ? 'text' : 'password' }}\"\n                id=\"confirmFilePassword\"\n                formControlName=\"confirmFilePassword\"\n                name=\"confirmFilePassword\"\n              />\n              <div class=\"input-group-append\">\n                <button\n                  bitSuffix\n                  bitButton\n                  buttonType=\"secondary\"\n                  appStopClick\n                  appA11yTitle=\"{{ 'toggleVisibility' | i18n }}\"\n                  [attr.aria-pressed]=\"showConfirmFilePassword\"\n                  (click)=\"toggleConfirmFilePassword()\"\n                  type=\"button\"\n                >\n                  <i\n                    class=\"bwi bwi-lg\"\n                    aria-hidden=\"true\"\n                    [ngClass]=\"{\n                      'bwi-eye': !showConfirmFilePassword,\n                      'bwi-eye-slash': showConfirmFilePassword\n                    }\"\n                  ></i>\n                </button>\n              </div>\n            </bit-form-field>\n          </div>\n        </ng-container>\n      </ng-container>\n\n      <button\n        type=\"submit\"\n        class=\"btn btn-primary btn-submit\"\n        [disabled]=\"form.loading || disabled\"\n      >\n        <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n        <span>{{ \"confirmFormat\" | i18n }}</span>\n      </button>\n    </div>\n  </div>\n</form>\n","import { Component } from \"@angular/core\";\nimport { UntypedFormBuilder } from \"@angular/forms\";\n\nimport { ExportComponent as BaseExportComponent } from \"@bitwarden/angular/components/export.component\";\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { CryptoService } from \"@bitwarden/common/abstractions/crypto.service\";\nimport { EventService } from \"@bitwarden/common/abstractions/event.service\";\nimport { ExportService } from \"@bitwarden/common/abstractions/export.service\";\nimport { FileDownloadService } from \"@bitwarden/common/abstractions/fileDownload/fileDownload.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { PolicyService } from \"@bitwarden/common/abstractions/policy/policy.service.abstraction\";\nimport { UserVerificationService } from \"@bitwarden/common/abstractions/userVerification/userVerification.service.abstraction\";\nimport { EncryptedExportType } from \"@bitwarden/common/enums/encryptedExportType\";\n\nimport { UserVerificationPromptComponent } from \"../../components/user-verification-prompt.component\";\n\n@Component({\n  selector: \"app-export\",\n  templateUrl: \"export.component.html\",\n})\nexport class ExportComponent extends BaseExportComponent {\n  organizationId: string;\n  encryptedExportType = EncryptedExportType;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    platformUtilsService: PlatformUtilsService,\n    exportService: ExportService,\n    eventService: EventService,\n    policyService: PolicyService,\n    logService: LogService,\n    userVerificationService: UserVerificationService,\n    formBuilder: UntypedFormBuilder,\n    fileDownloadService: FileDownloadService,\n    private modalService: ModalService\n  ) {\n    super(\n      cryptoService,\n      i18nService,\n      platformUtilsService,\n      exportService,\n      eventService,\n      policyService,\n      window,\n      logService,\n      userVerificationService,\n      formBuilder,\n      fileDownloadService\n    );\n  }\n\n  async submit() {\n    if (this.isFileEncryptedExport && this.filePassword != this.confirmFilePassword) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"filePasswordAndConfirmFilePasswordDoNotMatch\")\n      );\n      return;\n    }\n\n    this.exportForm.markAllAsTouched();\n    if (!this.exportForm.valid) {\n      return;\n    }\n\n    if (this.disabledByPolicy) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalVaultExportPolicyInEffect\")\n      );\n      return;\n    }\n\n    const userVerified = await this.verifyUser();\n    if (!userVerified) {\n      return;\n    }\n\n    this.doExport();\n  }\n\n  protected saved() {\n    super.saved();\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"exportSuccess\"));\n  }\n\n  private verifyUser() {\n    let confirmDescription = \"exportWarningDesc\";\n    if (this.isFileEncryptedExport) {\n      confirmDescription = \"fileEncryptedExportWarningDesc\";\n    } else if (this.isAccountEncryptedExport) {\n      confirmDescription = \"encExportKeyWarningDesc\";\n    }\n\n    const ref = this.modalService.open(UserVerificationPromptComponent, {\n      allowMultipleModals: true,\n      data: {\n        confirmDescription: confirmDescription,\n        confirmButtonText: \"exportVault\",\n        modalTitle: \"confirmVaultExport\",\n      },\n    });\n\n    if (ref == null) {\n      return;\n    }\n\n    return ref.onClosedPromise();\n  }\n\n  get isFileEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.FileEncrypted\n    );\n  }\n\n  get isAccountEncryptedExport() {\n    return (\n      this.format === \"encrypted_json\" &&\n      this.fileEncryptionType === EncryptedExportType.AccountEncrypted\n    );\n  }\n}\n","import { Component } from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\n\nimport { ModalRef } from \"@bitwarden/angular/components/modal/modal.ref\";\n\n@Component({\n  templateUrl: \"file-password-prompt.component.html\",\n})\nexport class FilePasswordPromptComponent {\n  showFilePassword: boolean;\n  filePassword = new FormControl(\"\", Validators.required);\n\n  constructor(private modalRef: ModalRef) {}\n\n  toggleFilePassword() {\n    this.showFilePassword = !this.showFilePassword;\n  }\n\n  submit() {\n    this.filePassword.markAsTouched();\n    if (!this.filePassword.valid) {\n      return;\n    }\n\n    this.modalRef.close(this.filePassword.value);\n  }\n\n  cancel() {\n    this.modalRef.close(null);\n  }\n}\n","<div\n  class=\"modal fade\"\n  role=\"dialog\"\n  aria-modal=\"true\"\n  [attr.aria-labelledby]=\"'confirmVaultImport' | i18n\"\n>\n  <div class=\"modal-dialog modal-dialog-scrollable\" role=\"document\">\n    <form #form (ngSubmit)=\"submit()\">\n      <div class=\"form-group modal-content\">\n        <h2 class=\"tw-mt-6 tw-mb-6 tw-ml-3.5 tw-font-semibold\" id=\"confirmVaultImport\">\n          {{ \"confirmVaultImport\" | i18n | uppercase }}\n        </h2>\n        <div\n          class=\"tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-pr-3.5 tw-pt-3.5 tw-pl-3.5\"\n        >\n          {{ \"confirmVaultImportDesc\" | i18n }}\n          <bit-form-field class=\"tw-w-full tw-pt-3.5\">\n            <bit-label>{{ \"confirmFilePassword\" | i18n }}</bit-label>\n            <input\n              bitInput\n              required\n              type=\"{{ showFilePassword ? 'text' : 'password' }}\"\n              name=\"filePassword\"\n              [formControl]=\"filePassword\"\n              appAutofocus\n              appInputVerbatim\n            />\n            <button\n              bitSuffix\n              bitButton\n              appStopClick\n              appA11yTitle=\"{{ 'toggleVisibility' | i18n }}\"\n              [attr.aria-pressed]=\"showFilePassword\"\n              (click)=\"toggleFilePassword()\"\n              type=\"button\"\n            >\n              <i\n                class=\"bwi bwi-lg\"\n                aria-hidden=\"true\"\n                [ngClass]=\"{ 'bwi-eye': !showFilePassword, 'bwi-eye-slash': showFilePassword }\"\n              ></i>\n            </button>\n          </bit-form-field>\n        </div>\n        <div\n          class=\"tw-flex tw-w-full tw-flex-wrap tw-items-center tw-border-0 tw-border-t tw-border-solid tw-border-secondary-300 tw-bg-background-alt tw-pl-3.5 tw-pr-3.5 tw-pb-3.5 tw-pt-4 tw-pl-4 tw-pr-4\"\n        >\n          <button bitButton buttonType=\"primary\" class=\"tw-mr-2\" type=\"submit\" appBlurClick>\n            <span>{{ \"importData\" | i18n }}</span>\n          </button>\n          <button bitButton buttonType=\"secondary\" type=\"button\" (click)=\"cancel()\">\n            <span>{{ \"cancel\" | i18n }}</span>\n          </button>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n","<div class=\"page-header\">\n  <h1>{{ \"importData\" | i18n }}</h1>\n</div>\n<app-callout type=\"info\" *ngIf=\"importBlockedByPolicy$ | async\">\n  {{ \"personalOwnershipPolicyInEffectImports\" | i18n }}\n</app-callout>\n<form #form (ngSubmit)=\"submit()\" ngNativeValidate>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"form-group\">\n        <label for=\"type\">1. {{ \"selectFormat\" | i18n }}</label>\n        <select\n          id=\"type\"\n          name=\"Format\"\n          [(ngModel)]=\"format\"\n          class=\"form-control\"\n          [disabled]=\"importBlockedByPolicy$ | async\"\n          required\n        >\n          <option *ngFor=\"let o of featuredImportOptions\" [ngValue]=\"o.id\">{{ o.name }}</option>\n          <ng-container *ngIf=\"importOptions && importOptions.length\">\n            <option value=\"-\" disabled></option>\n            <option *ngFor=\"let o of importOptions\" [ngValue]=\"o.id\">{{ o.name }}</option>\n          </ng-container>\n        </select>\n      </div>\n    </div>\n  </div>\n  <app-callout type=\"info\" title=\"{{ getFormatInstructionTitle() }}\" *ngIf=\"format\">\n    <ng-container *ngIf=\"format === 'bitwardencsv' || format === 'bitwardenjson'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/export-your-data/\">\n        https://bitwarden.com/help/export-your-data/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'lastpasscsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-lastpass/\">\n        https://bitwarden.com/help/import-from-lastpass/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepassxcsv'\">\n      Using the KeePassX desktop application, navigate to \"Database\" &rarr; \"Export to CSV file\" and\n      save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'aviracsv'\">\n      In the Avira web vault, go to \"Settings\" &rarr; \"My Data\" &rarr; \"Export data\" and save the\n      CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blurcsv'\">\n      In the Blur web vault, click your username at the top and go to \"Settings\" &rarr; \"Export\n      Data\", then click \"Export CSV\" for your \"Accounts\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safeincloudxml'\">\n      Using the SaveInCloud desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As XML\"\n      and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'padlockcsv'\">\n      Using the Padlock desktop application, click the hamburger icon in the top left corner and\n      navigate to \"Settings\" &rarr; \"Export\" button and save the file \"As CSV\".\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepass2xml'\">\n      Using the KeePass 2 desktop application, navigate to \"File\" &rarr; \"Export\" and select the\n      \"KeePass XML (2.x)\" option.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'upmcsv'\">\n      Using the Universal Password Manager desktop application, navigate to \"Database\" &rarr;\n      \"Export\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'saferpasscsv'\">\n      Using the SaferPass browser extension, click the hamburger icon in the top left corner and\n      navigate to \"Settings\". Click the \"Export accounts\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'meldiumcsv'\">\n      Using the Meldium web vault, navigate to \"Settings\". Locate the \"Export data\" function and\n      click \"Show me my data\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keepercsv'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .csv File\" option. Click\n      \"Export\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'keeperjson'\">\n      Log into the Keeper web vault (keepersecurity.com/vault). Click on your \"account email\" (top\n      right) and select \"Settings\". Go to \"Export\" and find the \"Export to .json File\" option. Click\n      \"Export\" to save the JSON file.\n    </ng-container>\n    <ng-container\n      *ngIf=\"format === 'chromecsv' || format === 'operacsv' || format === 'vivaldicsv'\"\n    >\n      <span *ngIf=\"format !== 'chromecsv'\">\n        The process is exactly the same as importing from Google Chrome.\n      </span>\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-chrome/\">\n        https://bitwarden.com/help/import-from-chrome/</a\n      >\n    </ng-container>\n    <ng-container *ngIf=\"format === 'firefoxcsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-firefox/\">\n        https://bitwarden.com/help/import-from-firefox/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'safaricsv'\">\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-safari/\">\n        https://bitwarden.com/help/import-from-safari/</a\n      >.\n    </ng-container>\n    <ng-container\n      *ngIf=\"\n        format === '1password1pux' ||\n        format === '1password1pif' ||\n        format === '1passwordwincsv' ||\n        format === '1passwordmaccsv'\n      \"\n    >\n      See detailed instructions on our help site at\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bitwarden.com/help/import-from-1password/\">\n        https://bitwarden.com/help/import-from-1password/</a\n      >.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passworddragonxml'\">\n      Using the Password Dragon desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"To\n      XML\". In the dialog that pops up select \"All Rows\" and check all fields. Click the \"Export\"\n      button and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpasscsv'\">\n      Using the Enpass desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"As CSV\".\n      Select \"OK\" to the warning alert and save the CSV file. Note that the importer only supports\n      files exported while Enpass is set to the English language, so adjust your settings\n      accordingly.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'enpassjson'\">\n      Using the Enpass 6 desktop application, click the menu button and navigate to \"File\" &rarr;\n      \"Export\". Select the \".json\" file format option and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'pwsafexml'\">\n      Using the Password Safe desktop application, navigate to \"File\" &rarr; \"Export To\" &rarr; \"XML\n      format...\" and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanecsv'\">\n      Log in to Dashlane, click on \"My Account\" &rarr; \"Settings\" &rarr; \"Export file\" and select\n      \"Export as a CSV file\". This will download a zip archive containing various CSV files. Unzip\n      the archive and import each CSV file individually.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'dashlanejson'\">\n      Dashlane no longer supports the JSON format. Only use this if you have an existing JSON for\n      import. Use the CSV importer when creating new exports.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'msecurecsv'\">\n      Using the mSecure desktop application, navigate to \"File\" &rarr; \"Export\" &rarr; \"CSV File...\"\n      and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'stickypasswordxml'\">\n      Using the Sticky Password desktop application, navigate to \"Menu\" (top right) &rarr; \"Export\"\n      &rarr; \"Export all\". Select the unencrypted format XML option and save the XML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'truekeycsv'\">\n      Using the True Key desktop application, click the gear icon (top right) and then navigate to\n      \"App Settings\". Click the \"Export\" button, enter your password and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'clipperzhtml'\">\n      Log into the Clipperz web application (clipperz.is/app). Click the hamburger menu icon in the\n      top right to expand the navigation bar. Navigate to \"Data\" &rarr; \"Export\". Click the\n      \"download HTML+JSON\" button to save the HTML file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'roboformcsv'\">\n      Using the RoboForm Editor desktop application, navigate to \"RoboForm\" (top left) &rarr;\n      \"Options\" &rarr; \"Account &amp; Data\" and click the \"Export\" button. Select all of your data,\n      change the \"Format\" to \"CSV file\" and then click the \"Export\" button to save the CSV file.\n      Note: RoboForm only allows you to export Logins. Other items will not be exported.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passboltcsv'\">\n      Log into the Passbolt web vault and navigate to the \"Passwords\" listing. Select all of the\n      passwords you would like to export and click the \"Export\" button at the top of the listing.\n      Choose the \"csv (lastpass)\" export format and click the \"Export\" button.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'ascendocsv'\">\n      Using the Ascendo DataVault desktop application, navigate to \"Tools\" &rarr; \"Export\". In the\n      dialog that pops up, select the \"All Items (DVX, CSV)\" option. Click the \"Ok\" button to save\n      the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordbossjson'\">\n      Using the Password Boss desktop application, navigate to \"File\" &rarr; \"Export data\" &rarr;\n      \"Password Boss JSON - not encrypted\" and save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'zohovaultcsv'\">\n      Log into the Zoho web vault (vault.zoho.com). Navigate to \"Tools\" &rarr; \"Export Secrets\".\n      Select \"All Secrets\" and click the \"Zoho Vault Format CSV\" button. Highlight and copy the data\n      from the textarea. Open a text editor like Notepad and paste the data. Save the data from the\n      text editor as\n      <code>zoho_export.csv</code>.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'splashidcsv'\">\n      Using the SplashID Safe desktop application, click on the SplashID blue lock logo in the top\n      right corner. Navigate to \"Export\" &rarr; \"Export as CSV\" and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passkeepcsv'\">\n      Using the PassKeep mobile app, navigate to \"Backup/Restore\". Locate the \"CSV Backup/Restore\"\n      section and click \"Backup to CSV\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'gnomejson'\">\n      Make sure you have python-keyring and python-gnomekeyring installed. Save the\n      <a target=\"_blank\" rel=\"noopener\" href=\"https://bit.ly/2GpOMTg\"\n        >GNOME Keyring Import/Export</a\n      >\n      python script to your desktop as <code>pw_helper.py</code>. Open terminal and run\n      <code>chmod +rx Desktop/pw_helper.py</code> and then\n      <code>python Desktop/pw_helper.py export Desktop/my_passwords.json</code>. Then upload the\n      resulting <code>my_passwords.json</code> file here to Bitwarden.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordagentcsv'\">\n      Using the Password Agent desktop application navigate to \"File\" &rarr; \"Export\", select the\n      \"Fields to export\" button and check all of the fields, change the \"Output format\" to \"CSV\",\n      and then click the \"Start\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passpackcsv'\">\n      Log into the Passpack website vault and navigate to \"Settings\" &rarr; \"Export\", then click the\n      \"Download\" button to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passmanjson'\">\n      Open your Passman vault and click on \"Settings\" in the bottom left corner. In the \"Settings\"\n      window switch to the \"Export credentials\" tab and choose \"JSON\" as the export type. Enter your\n      vault's passphrase and click the \"Export\" button to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastcsv'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to CSV file\" option to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'avastjson'\">\n      Open the Avast Passwords desktop application and navigate to \"Settings\" &rarr; \"Import/export\n      data\". Select the \"Export\" button for the \"Export to JSON file\" option to save the JSON file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'fsecurefsk'\">\n      Open the F-Secure KEY desktop application and navigate to \"Settings\" &rarr; \"Export\n      Passwords\". Select the \"Export\" button, enter your master password, and save the FSK file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'kasperskytxt'\">\n      Open the Kaspersky Password Manager desktop application and navigate to \"Settings\" &rarr;\n      \"Import/Export\". Locate the \"Export to text file\" section and select the \"Export\" button to\n      save the TXT file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'remembearcsv'\">\n      Open the RememBear desktop application and navigate to \"Settings\" &rarr; \"Account\" &rarr;\n      \"Export\". Enter your master password and select the \"Export Anyway\" button to save the CSV\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'passwordwallettxt'\">\n      Open the PasswordWallet desktop application and navigate to \"File\" &rarr; \"Export\" &rarr;\n      \"Visible entries to text file\". Enter your password and select the \"Ok\" button to save the TXT\n      file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'mykicsv'\">\n      Open the Myki desktop browser extension and navigate to \"Advanced\" &rarr; \"Export Accounts\"\n      and then scan the QR code with your mobile device. Various CSV files will then be saved to\n      your computer's downloads folder.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'securesafecsv'\">\n      Export your SecureSafe password safe to a CSV file with a comma delimiter.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'logmeoncecsv'\">\n      Open the LogMeOnce browser extension, then navigate to \"Open Menu\" &rarr; \"Export To\" and\n      select \"CSV File\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'blackberrycsv'\">\n      Open the BlackBerry Password Keeper application, then navigate to \"Settings\" &rarr;\n      \"Import/Export\". Select \"Export Passwords\" and follow the instructions on screen to save the\n      unencrypted CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'buttercupcsv'\">\n      Open the Buttercup desktop application and unlock your vault. Right click on your vault's icon\n      and select \"Export\" to save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'codebookcsv'\">\n      Open the Codebook desktop application and log in. Navigate to \"File\" &rarr; \"Export all\", then\n      click \"Yes\" on the dialog and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'encryptrcsv'\">\n      Open the newest version of the Encryptr desktop application and allow all of your data to\n      sync. Once syncing of your data is complete, the download icon in the top right corner will\n      turn pink. Click the download icon and save the CSV file.\n    </ng-container>\n    <ng-container *ngIf=\"format === 'yoticsv'\">\n      From the Yoti browser extension, click on \"Settings\", then \"Export Saved Logins\" and save the\n      CSV file.\n    </ng-container>\n  </app-callout>\n  <div class=\"row\">\n    <div class=\"col-6\">\n      <div class=\"form-group\">\n        <label for=\"file\">2. {{ \"selectImportFile\" | i18n }}</label>\n        <input\n          type=\"file\"\n          id=\"file\"\n          class=\"form-control-file\"\n          name=\"file\"\n          [disabled]=\"importBlockedByPolicy$ | async\"\n        />\n      </div>\n    </div>\n  </div>\n  <div class=\"form-group\">\n    <label for=\"fileContents\">{{ \"orCopyPasteFileContents\" | i18n }}</label>\n    <textarea\n      id=\"fileContents\"\n      class=\"form-control\"\n      name=\"FileContents\"\n      [(ngModel)]=\"fileContents\"\n      [disabled]=\"importBlockedByPolicy$ | async\"\n    ></textarea>\n  </div>\n  <button\n    type=\"submit\"\n    class=\"btn btn-primary btn-submit\"\n    [disabled]=\"loading || (importBlockedByPolicy$ | async)\"\n    [ngClass]=\"{ manual: importBlockedByPolicy$ | async }\"\n  >\n    <i class=\"bwi bwi-spinner bwi-spin\" title=\"{{ 'loading' | i18n }}\" aria-hidden=\"true\"></i>\n    <span>{{ \"importData\" | i18n }}</span>\n  </button>\n</form>\n","import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport * as JSZip from \"jszip\";\nimport { firstValueFrom, Subject } from \"rxjs\";\nimport Swal, { SweetAlertIcon } from \"sweetalert2\";\n\nimport { ModalService } from \"@bitwarden/angular/services/modal.service\";\nimport { I18nService } from \"@bitwarden/common/abstractions/i18n.service\";\nimport { ImportService } from \"@bitwarden/common/abstractions/import.service\";\nimport { LogService } from \"@bitwarden/common/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/abstractions/platformUtils.service\";\nimport { PolicyService } from \"@bitwarden/common/abstractions/policy/policy.service.abstraction\";\nimport { ImportOption, ImportType } from \"@bitwarden/common/enums/importOptions\";\nimport { PolicyType } from \"@bitwarden/common/enums/policyType\";\nimport { ImportError } from \"@bitwarden/common/importers/importError\";\n\nimport { FilePasswordPromptComponent } from \"./file-password-prompt.component\";\n\n@Component({\n  selector: \"app-import\",\n  templateUrl: \"import.component.html\",\n})\nexport class ImportComponent implements OnInit, OnDestroy {\n  featuredImportOptions: ImportOption[];\n  importOptions: ImportOption[];\n  format: ImportType = null;\n  fileContents: string;\n  formPromise: Promise<ImportError>;\n  loading = false;\n  importBlockedByPolicy$ = this.policyService.policyAppliesToActiveUser$(\n    PolicyType.PersonalOwnership\n  );\n\n  protected organizationId: string = null;\n  protected successNavigate: any[] = [\"vault\"];\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    protected i18nService: I18nService,\n    protected importService: ImportService,\n    protected router: Router,\n    protected platformUtilsService: PlatformUtilsService,\n    protected policyService: PolicyService,\n    private logService: LogService,\n    protected modalService: ModalService\n  ) {}\n\n  async ngOnInit() {\n    this.setImportOptions();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  async submit() {\n    if (await firstValueFrom(this.importBlockedByPolicy$)) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        null,\n        this.i18nService.t(\"personalOwnershipPolicyInEffectImports\")\n      );\n      return;\n    }\n\n    this.loading = true;\n\n    const importer = this.importService.getImporter(this.format, this.organizationId);\n    if (importer === null) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFormat\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    const fileEl = document.getElementById(\"file\") as HTMLInputElement;\n    const files = fileEl.files;\n    if (\n      (files == null || files.length === 0) &&\n      (this.fileContents == null || this.fileContents === \"\")\n    ) {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    let fileContents = this.fileContents;\n    if (files != null && files.length > 0) {\n      try {\n        const content = await this.getFileContents(files[0]);\n        if (content != null) {\n          fileContents = content;\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    if (fileContents == null || fileContents === \"\") {\n      this.platformUtilsService.showToast(\n        \"error\",\n        this.i18nService.t(\"errorOccurred\"),\n        this.i18nService.t(\"selectFile\")\n      );\n      this.loading = false;\n      return;\n    }\n\n    try {\n      this.formPromise = this.importService.import(importer, fileContents, this.organizationId);\n      let error = await this.formPromise;\n\n      if (error?.passwordRequired) {\n        const filePassword = await this.getFilePassword();\n        if (filePassword == null) {\n          this.loading = false;\n          return;\n        }\n\n        error = await this.doPasswordProtectedImport(filePassword, fileContents);\n      }\n\n      if (error != null) {\n        this.error(error);\n        this.loading = false;\n        return;\n      }\n\n      //No errors, display success message\n      this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"importSuccess\"));\n      this.router.navigate(this.successNavigate);\n    } catch (e) {\n      this.logService.error(e);\n    }\n\n    this.loading = false;\n  }\n\n  getFormatInstructionTitle() {\n    if (this.format == null) {\n      return null;\n    }\n\n    const results = this.featuredImportOptions\n      .concat(this.importOptions)\n      .filter((o) => o.id === this.format);\n    if (results.length > 0) {\n      return this.i18nService.t(\"instructionsFor\", results[0].name);\n    }\n    return null;\n  }\n\n  protected setImportOptions() {\n    this.featuredImportOptions = [\n      {\n        id: null,\n        name: \"-- \" + this.i18nService.t(\"select\") + \" --\",\n      },\n      ...this.importService.featuredImportOptions,\n    ];\n    this.importOptions = [...this.importService.regularImportOptions].sort((a, b) => {\n      if (a.name == null && b.name != null) {\n        return -1;\n      }\n      if (a.name != null && b.name == null) {\n        return 1;\n      }\n      if (a.name == null && b.name == null) {\n        return 0;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(a.name, b.name)\n        : a.name.localeCompare(b.name);\n    });\n  }\n\n  private async error(error: Error) {\n    await Swal.fire({\n      heightAuto: false,\n      buttonsStyling: false,\n      icon: \"error\" as SweetAlertIcon,\n      iconHtml: `<i class=\"swal-custom-icon bwi bwi-error text-danger\"></i>`,\n      input: \"textarea\",\n      inputValue: error.message,\n      inputAttributes: {\n        readonly: \"true\",\n      },\n      titleText: this.i18nService.t(\"importError\"),\n      text: this.i18nService.t(\"importErrorDesc\"),\n      showConfirmButton: true,\n      confirmButtonText: this.i18nService.t(\"ok\"),\n      onOpen: (popupEl) => {\n        popupEl.querySelector(\".swal2-textarea\").scrollTo(0, 0);\n      },\n    });\n  }\n\n  private getFileContents(file: File): Promise<string> {\n    if (this.format === \"1password1pux\") {\n      return this.extract1PuxContent(file);\n    }\n\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsText(file, \"utf-8\");\n      reader.onload = (evt) => {\n        if (this.format === \"lastpasscsv\" && file.type === \"text/html\") {\n          const parser = new DOMParser();\n          const doc = parser.parseFromString((evt.target as any).result, \"text/html\");\n          const pre = doc.querySelector(\"pre\");\n          if (pre != null) {\n            resolve(pre.textContent);\n            return;\n          }\n          reject();\n          return;\n        }\n\n        resolve((evt.target as any).result);\n      };\n      reader.onerror = () => {\n        reject();\n      };\n    });\n  }\n\n  private extract1PuxContent(file: File): Promise<string> {\n    return new JSZip()\n      .loadAsync(file)\n      .then((zip) => {\n        return zip.file(\"export.data\").async(\"string\");\n      })\n      .then(\n        function success(content) {\n          return content;\n        },\n        function error(e) {\n          return \"\";\n        }\n      );\n  }\n\n  async getFilePassword(): Promise<string> {\n    const ref = this.modalService.open(FilePasswordPromptComponent, {\n      allowMultipleModals: true,\n    });\n\n    if (ref == null) {\n      return null;\n    }\n\n    return await ref.onClosedPromise();\n  }\n\n  async doPasswordProtectedImport(\n    filePassword: string,\n    fileContents: string\n  ): Promise<ImportError> {\n    const passwordProtectedImporter = this.importService.getImporter(\n      \"bitwardenpasswordprotected\",\n      this.organizationId,\n      filePassword\n    );\n\n    return this.importService.import(passwordProtectedImporter, fileContents, this.organizationId);\n  }\n}\n","<ng-container *ngIf=\"show\">\n  <app-callout type=\"info\" title=\"{{ scopeConfig.title | i18n }}\">\n    {{ scopeConfig.description | i18n: scopeConfig.scopeIdentifier }}\n  </app-callout>\n</ng-container>\n","import { Component, Input, OnInit } from \"@angular/core\";\n\nimport { OrganizationService } from \"@bitwarden/common/abstractions/organization/organization.service.abstraction\";\nimport { StateService } from \"@bitwarden/common/abstractions/state.service\";\n\n@Component({\n  selector: \"app-export-scope-callout\",\n  templateUrl: \"export-scope-callout.component.html\",\n})\nexport class ExportScopeCalloutComponent implements OnInit {\n  @Input() organizationId: string = null;\n\n  show = false;\n  scopeConfig: {\n    title: string;\n    description: string;\n    scopeIdentifier: string;\n  };\n\n  constructor(\n    protected organizationService: OrganizationService,\n    protected stateService: StateService\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    if (!this.organizationService.hasOrganizations()) {\n      return;\n    }\n    this.scopeConfig =\n      this.organizationId != null\n        ? {\n            title: \"exportingOrganizationVaultTitle\",\n            description: \"exportingOrganizationVaultDescription\",\n            scopeIdentifier: this.organizationService.get(this.organizationId).name,\n          }\n        : {\n            title: \"exportingPersonalVaultTitle\",\n            description: \"exportingPersonalVaultDescription\",\n            scopeIdentifier: await this.stateService.getEmail(),\n          };\n    this.show = true;\n  }\n}\n","import { Directive, ElementRef, HostListener, OnInit } from \"@angular/core\";\n\n@Directive({\n  selector: \"[appBoxRow]\",\n})\nexport class BoxRowDirective implements OnInit {\n  el: HTMLElement = null;\n  formEls: Element[];\n\n  constructor(elRef: ElementRef) {\n    this.el = elRef.nativeElement;\n  }\n\n  ngOnInit(): void {\n    this.formEls = Array.from(\n      this.el.querySelectorAll('input:not([type=\"hidden\"]), select, textarea')\n    );\n    this.formEls.forEach((formEl) => {\n      formEl.addEventListener(\n        \"focus\",\n        () => {\n          this.el.classList.add(\"active\");\n        },\n        false\n      );\n\n      formEl.addEventListener(\n        \"blur\",\n        () => {\n          this.el.classList.remove(\"active\");\n        },\n        false\n      );\n    });\n  }\n\n  @HostListener(\"click\", [\"$event\"]) onClick(event: Event) {\n    const target = event.target as HTMLElement;\n    if (\n      target !== this.el &&\n      !target.classList.contains(\"progress\") &&\n      !target.classList.contains(\"progress-bar\")\n    ) {\n      return;\n    }\n\n    if (this.formEls.length > 0) {\n      const formEl = this.formEls[0] as HTMLElement;\n      if (formEl.tagName.toLowerCase() === \"input\") {\n        const inputEl = formEl as HTMLInputElement;\n        if (inputEl.type != null && inputEl.type.toLowerCase() === \"checkbox\") {\n          inputEl.click();\n          return;\n        }\n      }\n      formEl.focus();\n    }\n  }\n}\n","import { ImportOption, ImportType } from \"../enums/importOptions\";\nimport { ImportError } from \"../importers/importError\";\nimport { Importer } from \"../importers/importer\";\n\nexport abstract class ImportService {\n  featuredImportOptions: readonly ImportOption[];\n  regularImportOptions: readonly ImportOption[];\n  getImportOptions: () => ImportOption[];\n  import: (\n    importer: Importer,\n    fileContents: string,\n    organizationId?: string\n  ) => Promise<ImportError>;\n  getImporter: (\n    format: ImportType | \"bitwardenpasswordprotected\",\n    organizationId: string,\n    password?: string\n  ) => Importer;\n}\n","export interface ImportOption {\n  id: string;\n  name: string;\n}\n\nexport const featuredImportOptions = [\n  { id: \"bitwardenjson\", name: \"Bitwarden (json)\" },\n  { id: \"bitwardencsv\", name: \"Bitwarden (csv)\" },\n  { id: \"chromecsv\", name: \"Chrome (csv)\" },\n  { id: \"dashlanecsv\", name: \"Dashlane (csv)\" },\n  { id: \"firefoxcsv\", name: \"Firefox (csv)\" },\n  { id: \"keepass2xml\", name: \"KeePass 2 (xml)\" },\n  { id: \"lastpasscsv\", name: \"LastPass (csv)\" },\n  { id: \"safaricsv\", name: \"Safari and macOS (csv)\" },\n  { id: \"1password1pux\", name: \"1Password (1pux)\" },\n] as const;\n\nexport const regularImportOptions = [\n  { id: \"keepassxcsv\", name: \"KeePassX (csv)\" },\n  { id: \"1password1pif\", name: \"1Password (1pif)\" },\n  { id: \"1passwordwincsv\", name: \"1Password 6 and 7 Windows (csv)\" },\n  { id: \"1passwordmaccsv\", name: \"1Password 6 and 7 Mac (csv)\" },\n  { id: \"dashlanejson\", name: \"Dashlane (json)\" },\n  { id: \"roboformcsv\", name: \"RoboForm (csv)\" },\n  { id: \"keepercsv\", name: \"Keeper (csv)\" },\n  // Temporarily remove this option for the Feb release\n  // { id: \"keeperjson\", name: \"Keeper (json)\" },\n  { id: \"enpasscsv\", name: \"Enpass (csv)\" },\n  { id: \"enpassjson\", name: \"Enpass (json)\" },\n  { id: \"safeincloudxml\", name: \"SafeInCloud (xml)\" },\n  { id: \"pwsafexml\", name: \"Password Safe (xml)\" },\n  { id: \"stickypasswordxml\", name: \"Sticky Password (xml)\" },\n  { id: \"msecurecsv\", name: \"mSecure (csv)\" },\n  { id: \"truekeycsv\", name: \"True Key (csv)\" },\n  { id: \"passwordbossjson\", name: \"Password Boss (json)\" },\n  { id: \"zohovaultcsv\", name: \"Zoho Vault (csv)\" },\n  { id: \"splashidcsv\", name: \"SplashID (csv)\" },\n  { id: \"passworddragonxml\", name: \"Password Dragon (xml)\" },\n  { id: \"padlockcsv\", name: \"Padlock (csv)\" },\n  { id: \"passboltcsv\", name: \"Passbolt (csv)\" },\n  { id: \"clipperzhtml\", name: \"Clipperz (html)\" },\n  { id: \"aviracsv\", name: \"Avira (csv)\" },\n  { id: \"saferpasscsv\", name: \"SaferPass (csv)\" },\n  { id: \"upmcsv\", name: \"Universal Password Manager (csv)\" },\n  { id: \"ascendocsv\", name: \"Ascendo DataVault (csv)\" },\n  { id: \"meldiumcsv\", name: \"Meldium (csv)\" },\n  { id: \"passkeepcsv\", name: \"PassKeep (csv)\" },\n  { id: \"operacsv\", name: \"Opera (csv)\" },\n  { id: \"vivaldicsv\", name: \"Vivaldi (csv)\" },\n  { id: \"gnomejson\", name: \"GNOME Passwords and Keys/Seahorse (json)\" },\n  { id: \"blurcsv\", name: \"Blur (csv)\" },\n  { id: \"passwordagentcsv\", name: \"Password Agent (csv)\" },\n  { id: \"passpackcsv\", name: \"Passpack (csv)\" },\n  { id: \"passmanjson\", name: \"Passman (json)\" },\n  { id: \"avastcsv\", name: \"Avast Passwords (csv)\" },\n  { id: \"avastjson\", name: \"Avast Passwords (json)\" },\n  { id: \"fsecurefsk\", name: \"F-Secure KEY (fsk)\" },\n  { id: \"kasperskytxt\", name: \"Kaspersky Password Manager (txt)\" },\n  { id: \"remembearcsv\", name: \"RememBear (csv)\" },\n  { id: \"passwordwallettxt\", name: \"PasswordWallet (txt)\" },\n  { id: \"mykicsv\", name: \"Myki (csv)\" },\n  { id: \"securesafecsv\", name: \"SecureSafe (csv)\" },\n  { id: \"logmeoncecsv\", name: \"LogMeOnce (csv)\" },\n  { id: \"blackberrycsv\", name: \"BlackBerry Password Keeper (csv)\" },\n  { id: \"buttercupcsv\", name: \"Buttercup (csv)\" },\n  { id: \"codebookcsv\", name: \"Codebook (csv)\" },\n  { id: \"encryptrcsv\", name: \"Encryptr (csv)\" },\n  { id: \"yoticsv\", name: \"Yoti (csv)\" },\n  { id: \"nordpasscsv\", name: \"Nordpass (csv)\" },\n] as const;\n\nexport type ImportType =\n  | typeof featuredImportOptions[number][\"id\"]\n  | typeof regularImportOptions[number][\"id\"];\n","import { CipherView } from \"../view/cipher.view\";\nimport { CollectionView } from \"../view/collection.view\";\nimport { FolderView } from \"../view/folder.view\";\n\nexport class ImportResult {\n  success = false;\n  missingPassword = false;\n  errorMessage: string;\n  ciphers: CipherView[] = [];\n  folders: FolderView[] = [];\n  folderRelationships: [number, number][] = [];\n  collections: CollectionView[] = [];\n  collectionRelationships: [number, number][] = [];\n}\n","import * as papa from \"papaparse\";\n\nimport { LogService } from \"../abstractions/log.service\";\nimport { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { Utils } from \"../misc/utils\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CipherView } from \"../models/view/cipher.view\";\nimport { CollectionView } from \"../models/view/collection.view\";\nimport { FieldView } from \"../models/view/field.view\";\nimport { FolderView } from \"../models/view/folder.view\";\nimport { LoginUriView } from \"../models/view/login-uri.view\";\nimport { LoginView } from \"../models/view/login.view\";\nimport { SecureNoteView } from \"../models/view/secure-note.view\";\nimport { ConsoleLogService } from \"../services/consoleLog.service\";\n\nexport abstract class BaseImporter {\n  organizationId: string = null;\n\n  protected logService: LogService = new ConsoleLogService(false);\n\n  protected newLineRegex = /(?:\\r\\n|\\r|\\n)/;\n\n  protected passwordFieldNames = [\n    \"password\",\n    \"pass word\",\n    \"passphrase\",\n    \"pass phrase\",\n    \"pass\",\n    \"code\",\n    \"code word\",\n    \"codeword\",\n    \"secret\",\n    \"secret word\",\n    \"personpwd\",\n    \"key\",\n    \"keyword\",\n    \"key word\",\n    \"keyphrase\",\n    \"key phrase\",\n    \"form_pw\",\n    \"wppassword\",\n    \"pin\",\n    \"pwd\",\n    \"pw\",\n    \"pword\",\n    \"passwd\",\n    \"p\",\n    \"serial\",\n    \"serial#\",\n    \"license key\",\n    \"reg #\",\n\n    // Non-English names\n    \"passwort\",\n  ];\n\n  protected usernameFieldNames = [\n    \"user\",\n    \"name\",\n    \"user name\",\n    \"username\",\n    \"login name\",\n    \"email\",\n    \"e-mail\",\n    \"id\",\n    \"userid\",\n    \"user id\",\n    \"login\",\n    \"form_loginname\",\n    \"wpname\",\n    \"mail\",\n    \"loginid\",\n    \"login id\",\n    \"log\",\n    \"personlogin\",\n    \"first name\",\n    \"last name\",\n    \"card#\",\n    \"account #\",\n    \"member\",\n    \"member #\",\n\n    // Non-English names\n    \"nom\",\n    \"benutzername\",\n  ];\n\n  protected notesFieldNames = [\n    \"note\",\n    \"notes\",\n    \"comment\",\n    \"comments\",\n    \"memo\",\n    \"description\",\n    \"free form\",\n    \"freeform\",\n    \"free text\",\n    \"freetext\",\n    \"free\",\n\n    // Non-English names\n    \"kommentar\",\n  ];\n\n  protected uriFieldNames: string[] = [\n    \"url\",\n    \"hyper link\",\n    \"hyperlink\",\n    \"link\",\n    \"host\",\n    \"hostname\",\n    \"host name\",\n    \"server\",\n    \"address\",\n    \"hyper ref\",\n    \"href\",\n    \"web\",\n    \"website\",\n    \"web site\",\n    \"site\",\n    \"web-site\",\n    \"uri\",\n\n    // Non-English names\n    \"ort\",\n    \"adresse\",\n  ];\n\n  protected parseCsvOptions = {\n    encoding: \"UTF-8\",\n    skipEmptyLines: false,\n  };\n\n  protected get organization() {\n    return this.organizationId != null;\n  }\n\n  protected parseXml(data: string): Document {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(data, \"application/xml\");\n    return doc != null && doc.querySelector(\"parsererror\") == null ? doc : null;\n  }\n\n  protected parseCsv(data: string, header: boolean, options: any = {}): any[] {\n    const parseOptions: papa.ParseConfig<string> = Object.assign(\n      { header: header },\n      this.parseCsvOptions,\n      options\n    );\n    data = this.splitNewLine(data).join(\"\\n\").trim();\n    const result = papa.parse(data, parseOptions);\n    if (result.errors != null && result.errors.length > 0) {\n      result.errors.forEach((e) => {\n        if (e.row != null) {\n          this.logService.warning(\"Error parsing row \" + e.row + \": \" + e.message);\n        }\n      });\n    }\n    return result.data && result.data.length > 0 ? result.data : null;\n  }\n\n  protected parseSingleRowCsv(rowData: string) {\n    if (this.isNullOrWhitespace(rowData)) {\n      return null;\n    }\n    const parsedRow = this.parseCsv(rowData, false);\n    if (parsedRow != null && parsedRow.length > 0 && parsedRow[0].length > 0) {\n      return parsedRow[0];\n    }\n    return null;\n  }\n\n  protected makeUriArray(uri: string | string[]): LoginUriView[] {\n    if (uri == null) {\n      return null;\n    }\n\n    if (typeof uri === \"string\") {\n      const loginUri = new LoginUriView();\n      loginUri.uri = this.fixUri(uri);\n      if (this.isNullOrWhitespace(loginUri.uri)) {\n        return null;\n      }\n      loginUri.match = null;\n      return [loginUri];\n    }\n\n    if (uri.length > 0) {\n      const returnArr: LoginUriView[] = [];\n      uri.forEach((u) => {\n        const loginUri = new LoginUriView();\n        loginUri.uri = this.fixUri(u);\n        if (this.isNullOrWhitespace(loginUri.uri)) {\n          return;\n        }\n        loginUri.match = null;\n        returnArr.push(loginUri);\n      });\n      return returnArr.length === 0 ? null : returnArr;\n    }\n\n    return null;\n  }\n\n  protected fixUri(uri: string) {\n    if (uri == null) {\n      return null;\n    }\n    uri = uri.trim();\n    if (uri.indexOf(\"://\") === -1 && uri.indexOf(\".\") >= 0) {\n      uri = \"http://\" + uri;\n    }\n    if (uri.length > 1000) {\n      return uri.substring(0, 1000);\n    }\n    return uri;\n  }\n\n  protected nameFromUrl(url: string) {\n    const hostname = Utils.getHostname(url);\n    if (this.isNullOrWhitespace(hostname)) {\n      return null;\n    }\n    return hostname.startsWith(\"www.\") ? hostname.replace(\"www.\", \"\") : hostname;\n  }\n\n  protected isNullOrWhitespace(str: string): boolean {\n    return Utils.isNullOrWhitespace(str);\n  }\n\n  protected getValueOrDefault(str: string, defaultValue: string = null): string {\n    if (this.isNullOrWhitespace(str)) {\n      return defaultValue;\n    }\n    return str;\n  }\n\n  protected splitNewLine(str: string): string[] {\n    return str.split(this.newLineRegex);\n  }\n\n  // ref https://stackoverflow.com/a/5911300\n  protected getCardBrand(cardNum: string) {\n    if (this.isNullOrWhitespace(cardNum)) {\n      return null;\n    }\n\n    // Visa\n    let re = new RegExp(\"^4\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    // Mastercard\n    // Updated for Mastercard 2017 BINs expansion\n    if (\n      /^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$/.test(\n        cardNum\n      )\n    ) {\n      return \"Mastercard\";\n    }\n\n    // AMEX\n    re = new RegExp(\"^3[47]\");\n    if (cardNum.match(re) != null) {\n      return \"Amex\";\n    }\n\n    // Discover\n    re = new RegExp(\n      \"^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)\"\n    );\n    if (cardNum.match(re) != null) {\n      return \"Discover\";\n    }\n\n    // Diners\n    re = new RegExp(\"^36\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // Diners - Carte Blanche\n    re = new RegExp(\"^30[0-5]\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // JCB\n    re = new RegExp(\"^35(2[89]|[3-8][0-9])\");\n    if (cardNum.match(re) != null) {\n      return \"JCB\";\n    }\n\n    // Visa Electron\n    re = new RegExp(\"^(4026|417500|4508|4844|491(3|7))\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    // Mir\n    re = new RegExp(\"^220[0-4]\");\n    if (cardNum.match(re) != null) {\n      return \"Mir\";\n    }\n\n    return null;\n  }\n\n  protected setCardExpiration(cipher: CipherView, expiration: string): boolean {\n    if (!this.isNullOrWhitespace(expiration)) {\n      expiration = expiration.replace(/\\s/g, \"\");\n      const parts = expiration.split(\"/\");\n      if (parts.length === 2) {\n        let month: string = null;\n        let year: string = null;\n        if (parts[0].length === 1 || parts[0].length === 2) {\n          month = parts[0];\n          if (month.length === 2 && month[0] === \"0\") {\n            month = month.substr(1, 1);\n          }\n        }\n        if (parts[1].length === 2 || parts[1].length === 4) {\n          year = month.length === 2 ? \"20\" + parts[1] : parts[1];\n        }\n        if (month != null && year != null) {\n          cipher.card.expMonth = month;\n          cipher.card.expYear = year;\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  protected moveFoldersToCollections(result: ImportResult) {\n    result.folderRelationships.forEach((r) => result.collectionRelationships.push(r));\n    result.collections = result.folders.map((f) => {\n      const collection = new CollectionView();\n      collection.name = f.name;\n      return collection;\n    });\n    result.folderRelationships = [];\n    result.folders = [];\n  }\n\n  protected querySelectorDirectChild(parentEl: Element, query: string) {\n    const els = this.querySelectorAllDirectChild(parentEl, query);\n    return els.length === 0 ? null : els[0];\n  }\n\n  protected querySelectorAllDirectChild(parentEl: Element, query: string) {\n    return Array.from(parentEl.querySelectorAll(query)).filter((el) => el.parentNode === parentEl);\n  }\n\n  protected initLoginCipher() {\n    const cipher = new CipherView();\n    cipher.favorite = false;\n    cipher.notes = \"\";\n    cipher.fields = [];\n    cipher.login = new LoginView();\n    cipher.type = CipherType.Login;\n    return cipher;\n  }\n\n  protected cleanupCipher(cipher: CipherView) {\n    if (cipher == null) {\n      return;\n    }\n    if (cipher.type !== CipherType.Login) {\n      cipher.login = null;\n    }\n    if (this.isNullOrWhitespace(cipher.name)) {\n      cipher.name = \"--\";\n    }\n    if (this.isNullOrWhitespace(cipher.notes)) {\n      cipher.notes = null;\n    } else {\n      cipher.notes = cipher.notes.trim();\n    }\n    if (cipher.fields != null && cipher.fields.length === 0) {\n      cipher.fields = null;\n    }\n  }\n\n  protected processKvp(\n    cipher: CipherView,\n    key: string,\n    value: string,\n    type: FieldType = FieldType.Text\n  ) {\n    if (this.isNullOrWhitespace(value)) {\n      return;\n    }\n    if (this.isNullOrWhitespace(key)) {\n      key = \"\";\n    }\n    if (value.length > 200 || value.trim().search(this.newLineRegex) > -1) {\n      if (cipher.notes == null) {\n        cipher.notes = \"\";\n      }\n      cipher.notes += key + \": \" + this.splitNewLine(value).join(\"\\n\") + \"\\n\";\n    } else {\n      if (cipher.fields == null) {\n        cipher.fields = [];\n      }\n      const field = new FieldView();\n      field.type = type;\n      field.name = key;\n      field.value = value;\n      cipher.fields.push(field);\n    }\n  }\n\n  protected processFolder(result: ImportResult, folderName: string) {\n    let folderIndex = result.folders.length;\n    const hasFolder = !this.isNullOrWhitespace(folderName);\n    let addFolder = hasFolder;\n\n    if (hasFolder) {\n      for (let i = 0; i < result.folders.length; i++) {\n        if (result.folders[i].name === folderName) {\n          addFolder = false;\n          folderIndex = i;\n          break;\n        }\n      }\n    }\n\n    if (addFolder) {\n      const f = new FolderView();\n      f.name = folderName;\n      result.folders.push(f);\n    }\n    if (hasFolder) {\n      result.folderRelationships.push([result.ciphers.length, folderIndex]);\n    }\n  }\n\n  protected convertToNoteIfNeeded(cipher: CipherView) {\n    if (\n      cipher.type === CipherType.Login &&\n      this.isNullOrWhitespace(cipher.login.username) &&\n      this.isNullOrWhitespace(cipher.login.password) &&\n      (cipher.login.uris == null || cipher.login.uris.length === 0)\n    ) {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    }\n  }\n\n  protected processFullName(cipher: CipherView, fullName: string) {\n    if (this.isNullOrWhitespace(fullName)) {\n      return;\n    }\n\n    const nameParts = fullName.split(\" \");\n    if (nameParts.length > 0) {\n      cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n    }\n    if (nameParts.length === 2) {\n      cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n    } else if (nameParts.length >= 3) {\n      cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n      cipher.identity.lastName = nameParts.slice(2, nameParts.length).join(\" \");\n    }\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class AscendoCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 2) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const val: string = value[i + 2];\n          const field: string = value[i + 1];\n          if (this.isNullOrWhitespace(val) || this.isNullOrWhitespace(field)) {\n            continue;\n          }\n\n          const fieldLower = field.toLowerCase();\n          if (cipher.login.password == null && this.passwordFieldNames.indexOf(fieldLower) > -1) {\n            cipher.login.password = this.getValueOrDefault(val);\n          } else if (\n            cipher.login.username == null &&\n            this.usernameFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.username = this.getValueOrDefault(val);\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n          } else {\n            this.processKvp(cipher, field, val);\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class AvastCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.login.uris = this.makeUriArray(value.web);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.username = this.getValueOrDefault(value.login);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class AvastJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.logins != null) {\n      results.logins.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.pwd);\n        cipher.login.username = this.getValueOrDefault(value.loginName);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.notes != null) {\n      results.notes.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.name = this.getValueOrDefault(value.label);\n        cipher.notes = this.getValueOrDefault(value.text);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.cards != null) {\n      results.cards.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Card;\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.card.cardholderName = this.getValueOrDefault(value.holderName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        if (value.expirationDate != null) {\n          if (value.expirationDate.month != null) {\n            cipher.card.expMonth = value.expirationDate.month + \"\";\n          }\n          if (value.expirationDate.year != null) {\n            cipher.card.expYear = value.expirationDate.year + \"\";\n          }\n        }\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class AviraCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.name,\n        this.getValueOrDefault(this.nameFromUrl(value.website), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.website);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (\n        this.isNullOrWhitespace(value.username) &&\n        !this.isNullOrWhitespace(value.secondary_username)\n      ) {\n        cipher.login.username = value.secondary_username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.notes = this.getValueOrDefault(value.secondary_username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherRepromptType } from \"../enums/cipherRepromptType\";\nimport { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CipherView } from \"../models/view/cipher.view\";\nimport { CollectionView } from \"../models/view/collection.view\";\nimport { FieldView } from \"../models/view/field.view\";\nimport { LoginView } from \"../models/view/login.view\";\nimport { SecureNoteView } from \"../models/view/secure-note.view\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class BitwardenCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.organization && !this.isNullOrWhitespace(value.collections)) {\n        const collections = (value.collections as string).split(\",\");\n        collections.forEach((col) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === col) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = col;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization) {\n        this.processFolder(result, value.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.favorite =\n        !this.organization && this.getValueOrDefault(value.favorite, \"0\") !== \"0\" ? true : false;\n      cipher.type = CipherType.Login;\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      try {\n        cipher.reprompt = parseInt(\n          this.getValueOrDefault(value.reprompt, CipherRepromptType.None.toString()),\n          10\n        );\n      } catch (e) {\n        // eslint-disable-next-line\n        console.error(\"Unable to parse reprompt value\", e);\n        cipher.reprompt = CipherRepromptType.None;\n      }\n\n      if (!this.isNullOrWhitespace(value.fields)) {\n        const fields = this.splitNewLine(value.fields);\n        for (let i = 0; i < fields.length; i++) {\n          if (this.isNullOrWhitespace(fields[i])) {\n            continue;\n          }\n\n          const delimPosition = fields[i].lastIndexOf(\": \");\n          if (delimPosition === -1) {\n            continue;\n          }\n\n          if (cipher.fields == null) {\n            cipher.fields = [];\n          }\n\n          const field = new FieldView();\n          field.name = fields[i].substr(0, delimPosition);\n          field.value = null;\n          field.type = FieldType.Text;\n          if (fields[i].length > delimPosition + 2) {\n            field.value = fields[i].substr(delimPosition + 2);\n          }\n          cipher.fields.push(field);\n        }\n      }\n\n      const valueType = value.type != null ? value.type.toLowerCase() : null;\n      switch (valueType) {\n        case \"note\":\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote = new SecureNoteView();\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default: {\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.totp = this.getValueOrDefault(value.login_totp || value.totp);\n          cipher.login.username = this.getValueOrDefault(value.login_username || value.username);\n          cipher.login.password = this.getValueOrDefault(value.login_password || value.password);\n          const uris = this.parseSingleRowCsv(value.login_uri || value.uri);\n          cipher.login.uris = this.makeUriArray(uris);\n          break;\n        }\n      }\n\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CryptoService } from \"../abstractions/crypto.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { EncString } from \"../models/domain/enc-string\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CipherWithIdExport } from \"../models/export/cipher-with-ids.export\";\nimport { CollectionWithIdExport } from \"../models/export/collection-with-id.export\";\nimport { FolderWithIdExport } from \"../models/export/folder-with-id.export\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class BitwardenJsonImporter extends BaseImporter implements Importer {\n  private results: any;\n  private result: ImportResult;\n\n  constructor(protected cryptoService: CryptoService, protected i18nService: I18nService) {\n    super();\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    this.results = JSON.parse(data);\n    if (this.results == null || this.results.items == null) {\n      if (this.results?.passwordProtected) {\n        this.result.success = false;\n        this.result.missingPassword = true;\n        this.result.errorMessage = this.i18nService.t(\"importPasswordRequired\");\n        return this.result;\n      }\n\n      this.result.success = false;\n      return this.result;\n    }\n\n    if (this.results.encrypted) {\n      await this.parseEncrypted();\n    } else {\n      this.parseDecrypted();\n    }\n\n    return this.result;\n  }\n\n  private async parseEncrypted() {\n    if (this.results.encKeyValidation_DO_NOT_EDIT != null) {\n      const orgKey = await this.cryptoService.getOrgKey(this.organizationId);\n      const encKeyValidation = new EncString(this.results.encKeyValidation_DO_NOT_EDIT);\n      const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n        encKeyValidation,\n        orgKey\n      );\n      if (encKeyValidationDecrypt === null) {\n        this.result.success = false;\n        this.result.errorMessage = this.i18nService.t(\"importEncKeyError\");\n        return;\n      }\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    if (this.organization && this.results.collections != null) {\n      for (const c of this.results.collections as CollectionWithIdExport[]) {\n        const collection = CollectionWithIdExport.toDomain(c);\n        if (collection != null) {\n          collection.id = null;\n          collection.organizationId = this.organizationId;\n          const view = await collection.decrypt();\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(view);\n        }\n      }\n    } else if (!this.organization && this.results.folders != null) {\n      for (const f of this.results.folders as FolderWithIdExport[]) {\n        const folder = FolderWithIdExport.toDomain(f);\n        if (folder != null) {\n          folder.id = null;\n          const view = await folder.decrypt();\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(view);\n        }\n      }\n    }\n\n    for (const c of this.results.items as CipherWithIdExport[]) {\n      const cipher = CipherWithIdExport.toDomain(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.folderId = null;\n      cipher.organizationId = this.organizationId;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      const view = await cipher.decrypt();\n      this.cleanupCipher(view);\n      this.result.ciphers.push(view);\n    }\n\n    this.result.success = true;\n  }\n\n  private parseDecrypted() {\n    const groupingsMap = new Map<string, number>();\n    if (this.organization && this.results.collections != null) {\n      this.results.collections.forEach((c: CollectionWithIdExport) => {\n        const collection = CollectionWithIdExport.toView(c);\n        if (collection != null) {\n          collection.id = null;\n          collection.organizationId = null;\n          groupingsMap.set(c.id, this.result.collections.length);\n          this.result.collections.push(collection);\n        }\n      });\n    } else if (!this.organization && this.results.folders != null) {\n      this.results.folders.forEach((f: FolderWithIdExport) => {\n        const folder = FolderWithIdExport.toView(f);\n        if (folder != null) {\n          folder.id = null;\n          groupingsMap.set(f.id, this.result.folders.length);\n          this.result.folders.push(folder);\n        }\n      });\n    }\n\n    this.results.items.forEach((c: CipherWithIdExport) => {\n      const cipher = CipherWithIdExport.toView(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.folderId = null;\n      cipher.organizationId = null;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n  }\n}\n","import { CryptoService } from \"../abstractions/crypto.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { KdfType } from \"../enums/kdfType\";\nimport { EncString } from \"../models/domain/enc-string\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetric-crypto-key\";\n\nimport { BitwardenJsonImporter } from \"./bitwardenJsonImporter\";\nimport { Importer } from \"./importer\";\n\ninterface BitwardenPasswordProtectedFileFormat {\n  encrypted: boolean;\n  passwordProtected: boolean;\n  salt: string;\n  kdfIterations: number;\n  kdfType: number;\n  encKeyValidation_DO_NOT_EDIT: string;\n  data: string;\n}\n\nexport class BitwardenPasswordProtectedImporter extends BitwardenJsonImporter implements Importer {\n  private key: SymmetricCryptoKey;\n\n  constructor(cryptoService: CryptoService, i18nService: I18nService, private password: string) {\n    super(cryptoService, i18nService);\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const parsedData = JSON.parse(data);\n    if (this.cannotParseFile(parsedData)) {\n      result.success = false;\n      return result;\n    }\n\n    if (!(await this.checkPassword(parsedData))) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"invalidFilePassword\");\n      return result;\n    }\n\n    const encData = new EncString(parsedData.data);\n    const clearTextData = await this.cryptoService.decryptToUtf8(encData, this.key);\n    return await super.parse(clearTextData);\n  }\n\n  private async checkPassword(jdoc: BitwardenPasswordProtectedFileFormat): Promise<boolean> {\n    this.key = await this.cryptoService.makePinKey(\n      this.password,\n      jdoc.salt,\n      KdfType.PBKDF2_SHA256,\n      jdoc.kdfIterations\n    );\n\n    const encKeyValidation = new EncString(jdoc.encKeyValidation_DO_NOT_EDIT);\n\n    const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n      encKeyValidation,\n      this.key\n    );\n    if (encKeyValidationDecrypt === null) {\n      return false;\n    }\n    return true;\n  }\n\n  private cannotParseFile(jdoc: BitwardenPasswordProtectedFileFormat): boolean {\n    return (\n      !jdoc ||\n      !jdoc.encrypted ||\n      !jdoc.passwordProtected ||\n      !jdoc.salt ||\n      !jdoc.kdfIterations ||\n      typeof jdoc.kdfIterations !== \"number\" ||\n      jdoc.kdfType == null ||\n      KdfType[jdoc.kdfType] == null ||\n      !jdoc.encKeyValidation_DO_NOT_EDIT ||\n      !jdoc.data\n    );\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class BlackBerryCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.grouping === \"list\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.favorite = value.fav === \"1\";\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.extra);\n      if (value.grouping !== \"note\") {\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class BlurCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.label === \"null\") {\n        value.label = null;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.label,\n        this.getValueOrDefault(this.nameFromUrl(value.domain), \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(value.domain);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (this.isNullOrWhitespace(value.email) && !this.isNullOrWhitespace(value.username)) {\n        cipher.login.username = value.username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.email);\n        cipher.notes = this.getValueOrDefault(value.username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nconst OfficialProps = [\"!group_id\", \"!group_name\", \"title\", \"username\", \"password\", \"URL\", \"id\"];\n\nexport class ButtercupCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value[\"!group_name\"]));\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      let processingCustomFields = false;\n      for (const prop in value) {\n        // eslint-disable-next-line\n        if (value.hasOwnProperty(prop)) {\n          if (!processingCustomFields && OfficialProps.indexOf(prop) === -1) {\n            processingCustomFields = true;\n          }\n          if (processingCustomFields) {\n            this.processKvp(cipher, prop, value[prop]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class ChromeCsvImporter extends BaseImporter implements Importer {\n  private androidPatternRegex = new RegExp(\"^android:\\\\/\\\\/.*(?<=@)(.*)(?=\\\\/)\");\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      let name = value.name;\n      if (!name && this.androidPatternRegex.test(value.url)) {\n        name = value.url.match(this.androidPatternRegex)[1];\n      }\n      cipher.name = this.getValueOrDefault(name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class ClipperzHtmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const textarea = doc.querySelector(\"textarea\");\n    if (textarea == null || this.isNullOrWhitespace(textarea.textContent)) {\n      result.errorMessage = \"Missing textarea.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const entries = JSON.parse(textarea.textContent);\n    entries.forEach((entry: any) => {\n      const cipher = this.initLoginCipher();\n      if (!this.isNullOrWhitespace(entry.label)) {\n        cipher.name = entry.label.split(\" \")[0];\n      }\n      if (entry.data != null && !this.isNullOrWhitespace(entry.data.notes)) {\n        cipher.notes = entry.data.notes.split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (entry.currentVersion != null && entry.currentVersion.fields != null) {\n        for (const property in entry.currentVersion.fields) {\n          // eslint-disable-next-line\n          if (!entry.currentVersion.fields.hasOwnProperty(property)) {\n            continue;\n          }\n\n          const field = entry.currentVersion.fields[property];\n          const actionType = field.actionType != null ? field.actionType.toLowerCase() : null;\n          switch (actionType) {\n            case \"password\":\n              cipher.login.password = this.getValueOrDefault(field.value);\n              break;\n            case \"email\":\n            case \"username\":\n            case \"user\":\n            case \"name\":\n              cipher.login.username = this.getValueOrDefault(field.value);\n              break;\n            case \"url\":\n              cipher.login.uris = this.makeUriArray(field.value);\n              break;\n            default: {\n              const labelLower = field.label != null ? field.label.toLowerCase() : null;\n              if (\n                cipher.login.password == null &&\n                this.passwordFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.password = this.getValueOrDefault(field.value);\n              } else if (\n                cipher.login.username == null &&\n                this.usernameFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.username = this.getValueOrDefault(field.value);\n              } else if (\n                (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n                this.uriFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.uris = this.makeUriArray(field.value);\n              } else {\n                this.processKvp(cipher, field.label, field.value);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class CodebookCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value.Category));\n\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite) === \"True\";\n      cipher.name = this.getValueOrDefault(value.Entry, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.login.username = this.getValueOrDefault(value.Username, value.Email);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.totp = this.getValueOrDefault(value.TOTP);\n      cipher.login.uris = this.makeUriArray(value.Website);\n\n      if (!this.isNullOrWhitespace(value.Username)) {\n        this.processKvp(cipher, \"Email\", value.Email);\n      }\n      this.processKvp(cipher, \"Phone\", value.Phone);\n      this.processKvp(cipher, \"PIN\", value.PIN);\n      this.processKvp(cipher, \"Account\", value.Account);\n      this.processKvp(cipher, \"Date\", value.Date);\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../../enums/cipherType\";\nimport { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { ImportResult } from \"../../models/domain/import-result\";\nimport { CardView } from \"../../models/view/card.view\";\nimport { CipherView } from \"../../models/view/cipher.view\";\nimport { IdentityView } from \"../../models/view/identity.view\";\nimport { LoginView } from \"../../models/view/login.view\";\nimport { BaseImporter } from \"../baseImporter\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CredentialsRecord,\n  IdRecord,\n  PaymentsRecord,\n  PersonalInformationRecord,\n  SecureNoteRecord,\n} from \"./types/dashlaneCsvTypes\";\n\nconst _mappedCredentialsColums = new Set([\n  \"title\",\n  \"note\",\n  \"username\",\n  \"password\",\n  \"url\",\n  \"otpSecret\",\n  \"category\",\n]);\n\nconst _mappedPersonalInfoAsIdentiyColumns = new Set([\n  \"type\",\n  \"title\",\n  \"first_name\",\n  \"middle_name\",\n  \"last_name\",\n  \"login\",\n  \"email\",\n  \"phone_number\",\n  \"address\",\n  \"country\",\n  \"state\",\n  \"city\",\n  \"zip\",\n  // Skip item_name as we already have set a combined name\n  \"item_name\",\n]);\n\nconst _mappedSecureNoteColumns = new Set([\"title\", \"note\"]);\n\nexport class DashlaneCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results[0].type != null && results[0].title != null) {\n      const personalRecords = results as PersonalInformationRecord[];\n\n      // If personalRecords has only one \"name\" then create an Identity-Cipher\n      if (personalRecords.filter((x) => x.type === \"name\").length === 1) {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        results.forEach((row) => {\n          this.parsePersonalInformationRecordAsIdentity(cipher, row);\n        });\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n        result.success = true;\n        return Promise.resolve(result);\n      }\n    }\n\n    results.forEach((row) => {\n      const cipher = this.initLoginCipher();\n\n      const rowKeys = Object.keys(row);\n      if (rowKeys[0] === \"username\") {\n        this.processFolder(result, row.category);\n        this.parseCredentialsRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"account_name\") {\n        this.parsePaymentRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"number\") {\n        this.parseIdRecord(cipher, row);\n      }\n\n      if ((rowKeys[0] === \"type\") != null && rowKeys[1] === \"title\") {\n        this.parsePersonalInformationRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"title\" && rowKeys[1] === \"note\") {\n        this.parseSecureNoteRecords(cipher, row);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  parseCredentialsRecord(cipher: CipherView, row: CredentialsRecord) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    cipher.name = row.title;\n    cipher.notes = row.note;\n    cipher.login.username = row.username;\n    cipher.login.password = row.password;\n    cipher.login.totp = row.otpSecret;\n    cipher.login.uris = this.makeUriArray(row.url);\n\n    this.importUnmappedFields(cipher, row, _mappedCredentialsColums);\n  }\n\n  parsePaymentRecord(cipher: CipherView, row: PaymentsRecord) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n\n    cipher.name = row.account_name;\n    let mappedValues: string[] = [];\n    switch (row.type) {\n      case \"credit_card\":\n        cipher.card.cardholderName = row.account_name;\n        cipher.card.number = row.cc_number;\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = row.code;\n        cipher.card.expMonth = row.expiration_month;\n        cipher.card.expYear = row.expiration_year.substring(2, 4);\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\n          \"account_name\",\n          \"account_holder\",\n          \"cc_number\",\n          \"code\",\n          \"expiration_month\",\n          \"expiration_year\",\n        ];\n        break;\n      case \"bank\":\n        cipher.card.cardholderName = row.account_holder;\n        cipher.card.number = row.account_number;\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\"account_name\", \"account_holder\", \"account_number\"];\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parseIdRecord(cipher: CipherView, row: IdRecord) {\n    cipher.type = CipherType.Identity;\n    cipher.identity = new IdentityView();\n\n    const mappedValues: string[] = [\"name\", \"number\"];\n    switch (row.type) {\n      case \"card\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        break;\n      case \"passport\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.passportNumber = row.number;\n        break;\n      case \"license\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        cipher.identity.state = row.state;\n\n        mappedValues.push(\"state\");\n        break;\n      case \"social_security\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.ssn = row.number;\n        break;\n      case \"tax_number\":\n        cipher.name = row.type;\n        cipher.identity.licenseNumber = row.number;\n        break;\n\n      default:\n        break;\n    }\n\n    // If you add more mapped fields please extend this\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parsePersonalInformationRecord(cipher: CipherView, row: PersonalInformationRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    if (row.type === \"name\") {\n      cipher.name = `${row.title} ${row.first_name} ${row.middle_name} ${row.last_name}`\n        .replace(\"  \", \" \")\n        .trim();\n    } else {\n      cipher.name = row.item_name;\n    }\n\n    const dataRow = row as any;\n    Object.keys(row).forEach((key) => {\n      this.processKvp(cipher, key, dataRow[key]);\n    });\n  }\n\n  parsePersonalInformationRecordAsIdentity(cipher: CipherView, row: PersonalInformationRecord) {\n    switch (row.type) {\n      case \"name\":\n        this.processFullName(cipher, `${row.first_name} ${row.middle_name} ${row.last_name}`);\n        cipher.identity.title = row.title;\n        cipher.name = cipher.identity.fullName;\n\n        cipher.identity.username = row.login;\n        break;\n      case \"email\":\n        cipher.identity.email = row.email;\n        break;\n      case \"number\":\n        cipher.identity.phone = row.phone_number;\n        break;\n      case \"address\":\n        cipher.identity.address1 = row.address;\n        cipher.identity.city = row.city;\n        cipher.identity.postalCode = row.zip;\n        cipher.identity.state = row.state;\n        cipher.identity.country = row.country;\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, _mappedPersonalInfoAsIdentiyColumns);\n  }\n\n  parseSecureNoteRecords(cipher: CipherView, row: SecureNoteRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = row.title;\n    cipher.notes = row.note;\n\n    this.importUnmappedFields(cipher, row, _mappedSecureNoteColumns);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { CipherType } from \"../../enums/cipherType\";\nimport { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { ImportResult } from \"../../models/domain/import-result\";\nimport { CardView } from \"../../models/view/card.view\";\nimport { CipherView } from \"../../models/view/cipher.view\";\nimport { IdentityView } from \"../../models/view/identity.view\";\nimport { SecureNoteView } from \"../../models/view/secure-note.view\";\nimport { BaseImporter } from \"../baseImporter\";\nimport { Importer } from \"../importer\";\n\nconst HandledResults = new Set([\n  \"ADDRESS\",\n  \"AUTHENTIFIANT\",\n  \"BANKSTATEMENT\",\n  \"IDCARD\",\n  \"IDENTITY\",\n  \"PAYMENTMEANS_CREDITCARD\",\n  \"PAYMENTMEAN_PAYPAL\",\n  \"EMAIL\",\n]);\n\nexport class DashlaneJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    if (results.ADDRESS != null) {\n      this.processAddress(results.ADDRESS);\n    }\n    if (results.AUTHENTIFIANT != null) {\n      this.processAuth(results.AUTHENTIFIANT);\n    }\n    if (results.BANKSTATEMENT != null) {\n      this.processNote(results.BANKSTATEMENT, \"BankAccountName\");\n    }\n    if (results.IDCARD != null) {\n      this.processNote(results.IDCARD, \"Fullname\");\n    }\n    if (results.PAYMENTMEANS_CREDITCARD != null) {\n      this.processCard(results.PAYMENTMEANS_CREDITCARD);\n    }\n    if (results.IDENTITY != null) {\n      this.processIdentity(results.IDENTITY);\n    }\n\n    for (const key in results) {\n      // eslint-disable-next-line\n      if (results.hasOwnProperty(key) && !HandledResults.has(key)) {\n        this.processNote(results[key], null, \"Generic Note\");\n      }\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processAuth(results: any[]) {\n    results.forEach((credential: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(credential.title);\n\n      cipher.login.username = this.getValueOrDefault(\n        credential.login,\n        this.getValueOrDefault(credential.secondaryLogin)\n      );\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.domain);\n      cipher.notes += this.getValueOrDefault(credential.note, \"\");\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processIdentity(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.fullName, \"\");\n      const nameParts = cipher.name.split(\" \");\n      if (nameParts.length > 0) {\n        cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n      }\n      if (nameParts.length === 2) {\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n      } else if (nameParts.length === 3) {\n        cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[2]);\n      }\n      cipher.identity.username = this.getValueOrDefault(obj.pseudo);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processAddress(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.addressName);\n      cipher.identity.address1 = this.getValueOrDefault(obj.addressFull);\n      cipher.identity.city = this.getValueOrDefault(obj.city);\n      cipher.identity.state = this.getValueOrDefault(obj.state);\n      cipher.identity.postalCode = this.getValueOrDefault(obj.zipcode);\n      cipher.identity.country = this.getValueOrDefault(obj.country);\n      if (cipher.identity.country != null) {\n        cipher.identity.country = cipher.identity.country.toUpperCase();\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processCard(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.card = new CardView();\n      cipher.type = CipherType.Card;\n      cipher.name = this.getValueOrDefault(obj.bank);\n      cipher.card.number = this.getValueOrDefault(obj.cardNumber);\n      cipher.card.brand = this.getCardBrand(cipher.card.number);\n      cipher.card.cardholderName = this.getValueOrDefault(obj.owner);\n      if (!this.isNullOrWhitespace(cipher.card.brand)) {\n        if (this.isNullOrWhitespace(cipher.name)) {\n          cipher.name = cipher.card.brand;\n        } else {\n          cipher.name += \" - \" + cipher.card.brand;\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processNote(results: any[], nameProperty: string, name: string = null) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.secureNote = new SecureNoteView();\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote.type = SecureNoteType.Generic;\n      if (name != null) {\n        cipher.name = name;\n      } else {\n        cipher.name = this.getValueOrDefault(obj[nameProperty]);\n      }\n      for (const key in obj) {\n        // eslint-disable-next-line\n        if (obj.hasOwnProperty(key) && key !== nameProperty) {\n          this.processKvp(cipher, key, obj[key].toString());\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CardView } from \"../models/view/card.view\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class EncryptrCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Label, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      const text = this.getValueOrDefault(value.Text);\n      if (!this.isNullOrWhitespace(text)) {\n        if (this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = text;\n        } else {\n          cipher.notes += \"\\n\\n\" + text;\n        }\n      }\n\n      const type = value[\"Entry Type\"];\n      if (type === \"Password\") {\n        cipher.login.username = this.getValueOrDefault(value.Username);\n        cipher.login.password = this.getValueOrDefault(value.Password);\n        cipher.login.uris = this.makeUriArray(value[\"Site URL\"]);\n      } else if (type === \"Credit Card\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value[\"Name on card\"]);\n        cipher.card.number = this.getValueOrDefault(value[\"Card Number\"]);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.CVV);\n        const expiry = this.getValueOrDefault(value.Expiry);\n        if (!this.isNullOrWhitespace(expiry)) {\n          const expParts = expiry.split(\"/\");\n          if (expParts.length > 1) {\n            cipher.card.expMonth = parseInt(expParts[0], null).toString();\n            cipher.card.expYear = (2000 + parseInt(expParts[1], null)).toString();\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CardView } from \"../models/view/card.view\";\nimport { SecureNoteView } from \"../models/view/secure-note.view\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class EnpassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let firstRow = true;\n    results.forEach((value) => {\n      if (value.length < 2 || (firstRow && (value[0] === \"Title\" || value[0] === \"title\"))) {\n        firstRow = false;\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (\n        value.length === 2 ||\n        (!this.containsField(value, \"username\") &&\n          !this.containsField(value, \"password\") &&\n          !this.containsField(value, \"email\") &&\n          !this.containsField(value, \"url\"))\n      ) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      }\n\n      if (\n        this.containsField(value, \"cardholder\") &&\n        this.containsField(value, \"number\") &&\n        this.containsField(value, \"expiry date\")\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      }\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const fieldValue: string = value[i + 2];\n          if (this.isNullOrWhitespace(fieldValue)) {\n            continue;\n          }\n\n          const fieldName: string = value[i + 1];\n          const fieldNameLower = fieldName.toLowerCase();\n\n          if (cipher.type === CipherType.Login) {\n            if (\n              fieldNameLower === \"url\" &&\n              (cipher.login.uris == null || cipher.login.uris.length === 0)\n            ) {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              continue;\n            } else if (\n              (fieldNameLower === \"username\" || fieldNameLower === \"email\") &&\n              this.isNullOrWhitespace(cipher.login.username)\n            ) {\n              cipher.login.username = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"password\" &&\n              this.isNullOrWhitespace(cipher.login.password)\n            ) {\n              cipher.login.password = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n              cipher.login.totp = fieldValue;\n              continue;\n            }\n          } else if (cipher.type === CipherType.Card) {\n            if (\n              fieldNameLower === \"cardholder\" &&\n              this.isNullOrWhitespace(cipher.card.cardholderName)\n            ) {\n              cipher.card.cardholderName = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"number\" && this.isNullOrWhitespace(cipher.card.number)) {\n              cipher.card.number = fieldValue;\n              cipher.card.brand = this.getCardBrand(fieldValue);\n              continue;\n            } else if (fieldNameLower === \"cvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n              cipher.card.code = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"expiry date\" &&\n              this.isNullOrWhitespace(cipher.card.expMonth) &&\n              this.isNullOrWhitespace(cipher.card.expYear)\n            ) {\n              if (this.setCardExpiration(cipher, fieldValue)) {\n                continue;\n              }\n            } else if (fieldNameLower === \"type\") {\n              // Skip since brand was determined from number above\n              continue;\n            }\n          }\n\n          this.processKvp(cipher, fieldName, fieldValue);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private containsField(fields: any[], name: string) {\n    if (fields == null || name == null) {\n      return false;\n    }\n    return (\n      fields.filter((f) => !this.isNullOrWhitespace(f) && f.toLowerCase() === name.toLowerCase())\n        .length > 0\n    );\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CardView } from \"../models/view/card.view\";\nimport { CipherView } from \"../models/view/cipher.view\";\nimport { FolderView } from \"../models/view/folder.view\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class EnpassJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.items == null || results.items.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    const foldersIndexMap = new Map<string, number>();\n    const folderTree = this.buildFolderTree(results.folders);\n    this.flattenFolderTree(null, folderTree, foldersMap);\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((item: any) => {\n      if (item.folders != null && item.folders.length > 0 && foldersIndexMap.has(item.folders[0])) {\n        result.folderRelationships.push([\n          result.ciphers.length,\n          foldersIndexMap.get(item.folders[0]),\n        ]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(item.title);\n      cipher.favorite = item.favorite > 0;\n\n      if (item.template_type != null && item.fields != null && item.fields.length > 0) {\n        if (\n          item.template_type.indexOf(\"login.\") === 0 ||\n          item.template_type.indexOf(\"password.\") === 0\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else if (item.template_type.indexOf(\"creditcard.\") === 0) {\n          this.processCard(cipher, item.fields);\n        } else if (\n          item.template_type.indexOf(\"identity.\") < 0 &&\n          item.fields.some((f: any) => f.type === \"password\" && !this.isNullOrWhitespace(f.value))\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else {\n          this.processNote(cipher, item.fields);\n        }\n      }\n\n      cipher.notes += \"\\n\" + this.getValueOrDefault(item.note, \"\");\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private processLogin(cipher: CipherView, fields: any[]) {\n    const urls: string[] = [];\n    fields.forEach((field: any) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n\n      if (\n        (field.type === \"username\" || field.type === \"email\") &&\n        this.isNullOrWhitespace(cipher.login.username)\n      ) {\n        cipher.login.username = field.value;\n      } else if (field.type === \"password\" && this.isNullOrWhitespace(cipher.login.password)) {\n        cipher.login.password = field.value;\n      } else if (field.type === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n        cipher.login.totp = field.value;\n      } else if (field.type === \"url\") {\n        urls.push(field.value);\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n    cipher.login.uris = this.makeUriArray(urls);\n  }\n\n  private processCard(cipher: CipherView, fields: any[]) {\n    cipher.card = new CardView();\n    cipher.type = CipherType.Card;\n    fields.forEach((field: any) => {\n      if (\n        this.isNullOrWhitespace(field.value) ||\n        field.type === \"section\" ||\n        field.type === \"ccType\"\n      ) {\n        return;\n      }\n\n      if (field.type === \"ccName\" && this.isNullOrWhitespace(cipher.card.cardholderName)) {\n        cipher.card.cardholderName = field.value;\n      } else if (field.type === \"ccNumber\" && this.isNullOrWhitespace(cipher.card.number)) {\n        cipher.card.number = field.value;\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n      } else if (field.type === \"ccCvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n        cipher.card.code = field.value;\n      } else if (field.type === \"ccExpiry\" && this.isNullOrWhitespace(cipher.card.expYear)) {\n        if (!this.setCardExpiration(cipher, field.value)) {\n          this.processKvp(\n            cipher,\n            field.label,\n            field.value,\n            field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n          );\n        }\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n        );\n      }\n    });\n  }\n\n  private processNote(cipher: CipherView, fields: any[]) {\n    fields.forEach((field: any) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n      this.processKvp(\n        cipher,\n        field.label,\n        field.value,\n        field.sensitive === 1 ? FieldType.Hidden : FieldType.Text\n      );\n    });\n  }\n\n  private buildFolderTree(folders: any[]): any[] {\n    if (folders == null) {\n      return [];\n    }\n    const folderTree: any[] = [];\n    const map = new Map<string, any>([]);\n    folders.forEach((obj: any) => {\n      map.set(obj.uuid, obj);\n      obj.children = [];\n    });\n    folders.forEach((obj: any) => {\n      if (obj.parent_uuid != null && obj.parent_uuid !== \"\" && map.has(obj.parent_uuid)) {\n        map.get(obj.parent_uuid).children.push(obj);\n      } else {\n        folderTree.push(obj);\n      }\n    });\n    return folderTree;\n  }\n\n  private flattenFolderTree(titlePrefix: string, tree: any[], map: Map<string, string>) {\n    if (tree == null) {\n      return;\n    }\n    tree.forEach((f: any) => {\n      if (f.title != null && f.title.trim() !== \"\") {\n        let title = f.title.trim();\n        if (titlePrefix != null && titlePrefix.trim() !== \"\") {\n          title = titlePrefix + \"/\" + title;\n        }\n        map.set(f.uuid, title);\n        if (f.children != null && f.children.length !== 0) {\n          this.flattenFolderTree(title, f.children, map);\n        }\n      }\n    });\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class FirefoxCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results\n      .filter((value) => {\n        return value.url !== \"chrome://FirefoxAccounts\";\n      })\n      .forEach((value) => {\n        const cipher = this.initLoginCipher();\n        const url = this.getValueOrDefault(value.url, this.getValueOrDefault(value.hostname));\n        cipher.name = this.getValueOrDefault(this.nameFromUrl(url), \"--\");\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.uris = this.makeUriArray(url);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CardView } from \"../models/view/card.view\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class FSecureFskImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.data == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const key in results.data) {\n      // eslint-disable-next-line\n      if (!results.data.hasOwnProperty(key)) {\n        continue;\n      }\n\n      const value = results.data[key];\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.service);\n      cipher.notes = this.getValueOrDefault(value.notes);\n\n      if (value.style === \"website\" || value.style === \"globe\") {\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.uris = this.makeUriArray(value.url);\n      } else if (value.style === \"creditcard\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.username);\n        cipher.card.number = this.getValueOrDefault(value.creditNumber);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.creditCvv);\n        if (!this.isNullOrWhitespace(value.creditExpiry)) {\n          if (!this.setCardExpiration(cipher, value.creditExpiry)) {\n            this.processKvp(cipher, \"Expiration\", value.creditExpiry);\n          }\n        }\n        if (!this.isNullOrWhitespace(value.password)) {\n          this.processKvp(cipher, \"PIN\", value.password);\n        }\n      } else {\n        continue;\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class GnomeJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || Object.keys(results).length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const keyRing in results) {\n      if (\n        !results.hasOwnProperty(keyRing) || // eslint-disable-line\n        this.isNullOrWhitespace(keyRing) ||\n        results[keyRing].length === 0\n      ) {\n        continue;\n      }\n\n      results[keyRing].forEach((value: any) => {\n        if (\n          this.isNullOrWhitespace(value.display_name) ||\n          value.display_name.indexOf(\"http\") !== 0\n        ) {\n          return;\n        }\n\n        this.processFolder(result, keyRing);\n        const cipher = this.initLoginCipher();\n        cipher.name = value.display_name.replace(\"http://\", \"\").replace(\"https://\", \"\");\n        if (cipher.name.length > 30) {\n          cipher.name = cipher.name.substring(0, 30);\n        }\n        cipher.login.password = this.getValueOrDefault(value.secret);\n        cipher.login.uris = this.makeUriArray(value.display_name);\n\n        if (value.attributes != null) {\n          cipher.login.username =\n            value.attributes != null\n              ? this.getValueOrDefault(value.attributes.username_value)\n              : null;\n          for (const attr in value.attributes) {\n            if (\n              !value.attributes.hasOwnProperty(attr) || // eslint-disable-line\n              attr === \"username_value\" ||\n              attr === \"xdg:schema\"\n            ) {\n              continue;\n            }\n            this.processKvp(cipher, attr, value.attributes[attr]);\n          }\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export class ImportError extends Error {\n  constructor(message?: string, public passwordRequired: boolean = false) {\n    super(message);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nconst NotesHeader = \"Notes\\n\\n\";\nconst ApplicationsHeader = \"Applications\\n\\n\";\nconst WebsitesHeader = \"Websites\\n\\n\";\nconst Delimiter = \"\\n---\\n\";\n\nexport class KasperskyTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n\n    let notesData: string;\n    let applicationsData: string;\n    let websitesData: string;\n    let workingData = this.splitNewLine(data).join(\"\\n\");\n\n    if (workingData.indexOf(NotesHeader) !== -1) {\n      const parts = workingData.split(NotesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        notesData = parts[1];\n      }\n    }\n    if (workingData.indexOf(ApplicationsHeader) !== -1) {\n      const parts = workingData.split(ApplicationsHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        applicationsData = parts[1];\n      }\n    }\n    if (workingData.indexOf(WebsitesHeader) === 0) {\n      const parts = workingData.split(WebsitesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        websitesData = parts[1];\n      }\n    }\n\n    const notes = this.parseDataCategory(notesData);\n    const applications = this.parseDataCategory(applicationsData);\n    const websites = this.parseDataCategory(websitesData);\n\n    notes.forEach((n) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(n.get(\"Name\"));\n      cipher.notes = this.getValueOrDefault(n.get(\"Text\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    websites.concat(applications).forEach((w) => {\n      const cipher = this.initLoginCipher();\n      const nameKey = w.has(\"Website name\") ? \"Website name\" : \"Application\";\n      cipher.name = this.getValueOrDefault(w.get(nameKey), \"\");\n      if (!this.isNullOrWhitespace(w.get(\"Login name\"))) {\n        if (!this.isNullOrWhitespace(cipher.name)) {\n          cipher.name += \": \";\n        }\n        cipher.name += w.get(\"Login name\");\n      }\n      cipher.notes = this.getValueOrDefault(w.get(\"Comment\"));\n      if (w.has(\"Website URL\")) {\n        cipher.login.uris = this.makeUriArray(w.get(\"Website URL\"));\n      }\n      cipher.login.username = this.getValueOrDefault(w.get(\"Login\"));\n      cipher.login.password = this.getValueOrDefault(w.get(\"Password\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseDataCategory(data: string): Map<string, string>[] {\n    if (this.isNullOrWhitespace(data) || data.indexOf(Delimiter) === -1) {\n      return [];\n    }\n    const items: Map<string, string>[] = [];\n    data.split(Delimiter).forEach((p) => {\n      if (p.indexOf(\"\\n\") === -1) {\n        return;\n      }\n      const item = new Map<string, string>();\n      let itemComment: string;\n      let itemCommentKey: string;\n      p.split(\"\\n\").forEach((l) => {\n        if (itemComment != null) {\n          itemComment += \"\\n\" + l;\n          return;\n        }\n        const colonIndex = l.indexOf(\":\");\n        let key: string;\n        let val: string;\n        if (colonIndex === -1) {\n          return;\n        } else {\n          key = l.substring(0, colonIndex);\n          if (l.length > colonIndex + 1) {\n            val = l.substring(colonIndex + 2);\n          }\n        }\n        if (key != null) {\n          item.set(key, val);\n        }\n        if (key === \"Comment\" || key === \"Text\") {\n          itemComment = val;\n          itemCommentKey = key;\n        }\n      });\n      if (itemComment != null && itemCommentKey != null) {\n        item.set(itemCommentKey, itemComment);\n      }\n      if (item.size === 0) {\n        return;\n      }\n      items.push(item);\n    });\n    return items;\n  }\n}\n","import { FieldType } from \"../enums/fieldType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { FolderView } from \"../models/view/folder.view\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class KeePass2XmlImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const rootGroup = doc.querySelector(\"KeePassFile > Root > Group\");\n    if (rootGroup == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root > Group` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    this.traverse(rootGroup, true, \"\");\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  traverse(node: Element, isRootNode: boolean, groupPrefixName: string) {\n    const folderIndex = this.result.folders.length;\n    let groupName = groupPrefixName;\n\n    if (!isRootNode) {\n      if (groupName !== \"\") {\n        groupName += \"/\";\n      }\n      const nameEl = this.querySelectorDirectChild(node, \"Name\");\n      groupName += nameEl == null ? \"-\" : nameEl.textContent;\n      const folder = new FolderView();\n      folder.name = groupName;\n      this.result.folders.push(folder);\n    }\n\n    this.querySelectorAllDirectChild(node, \"Entry\").forEach((entry) => {\n      const cipherIndex = this.result.ciphers.length;\n\n      const cipher = this.initLoginCipher();\n      this.querySelectorAllDirectChild(entry, \"String\").forEach((entryString) => {\n        const valueEl = this.querySelectorDirectChild(entryString, \"Value\");\n        const value = valueEl != null ? valueEl.textContent : null;\n        if (this.isNullOrWhitespace(value)) {\n          return;\n        }\n        const keyEl = this.querySelectorDirectChild(entryString, \"Key\");\n        const key = keyEl != null ? keyEl.textContent : null;\n\n        if (key === \"URL\") {\n          cipher.login.uris = this.makeUriArray(value);\n        } else if (key === \"UserName\") {\n          cipher.login.username = value;\n        } else if (key === \"Password\") {\n          cipher.login.password = value;\n        } else if (key === \"otp\") {\n          cipher.login.totp = value.replace(\"key=\", \"\");\n        } else if (key === \"Title\") {\n          cipher.name = value;\n        } else if (key === \"Notes\") {\n          cipher.notes += value + \"\\n\";\n        } else {\n          let type = FieldType.Text;\n          const attrs = valueEl.attributes as any;\n          if (\n            attrs.length > 0 &&\n            attrs.ProtectInMemory != null &&\n            attrs.ProtectInMemory.value === \"True\"\n          ) {\n            type = FieldType.Hidden;\n          }\n          this.processKvp(cipher, key, value, type);\n        }\n      });\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n\n      if (!isRootNode) {\n        this.result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    this.querySelectorAllDirectChild(node, \"Group\").forEach((group) => {\n      this.traverse(group, false, groupName);\n    });\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class KeePassXCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(value.Title)) {\n        return;\n      }\n\n      value.Group =\n        !this.isNullOrWhitespace(value.Group) && value.Group.startsWith(\"Root/\")\n          ? value.Group.replace(\"Root/\", \"\")\n          : value.Group;\n      const groupName = !this.isNullOrWhitespace(value.Group) ? value.Group : null;\n      this.processFolder(result, groupName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/domain/import-result\";\nimport { BaseImporter } from \"../baseImporter\";\nimport { Importer } from \"../importer\";\n\nexport class KeeperCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 6) {\n        return;\n      }\n\n      this.processFolder(result, value[0]);\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[5]) + \"\\n\";\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[4]);\n\n      if (value.length > 7) {\n        // we have some custom fields.\n        for (let i = 7; i < value.length; i = i + 2) {\n          this.processKvp(cipher, value[i], value[i + 1]);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CardView } from \"../models/view/card.view\";\nimport { CipherView } from \"../models/view/cipher.view\";\nimport { FolderView } from \"../models/view/folder.view\";\nimport { IdentityView } from \"../models/view/identity.view\";\nimport { LoginView } from \"../models/view/login.view\";\nimport { SecureNoteView } from \"../models/view/secure-note.view\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class LastPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipherIndex = result.ciphers.length;\n      let folderIndex = result.folders.length;\n      let grouping = value.grouping;\n      if (grouping != null) {\n        // eslint-disable-next-line\n        grouping = grouping.replace(/\\\\/g, \"/\").replace(/[\\x00-\\x1F\\x7F-\\x9F]/g, \"\");\n      }\n      const hasFolder = this.getValueOrDefault(grouping, \"(none)\") !== \"(none)\";\n      let addFolder = hasFolder;\n\n      if (hasFolder) {\n        for (let i = 0; i < result.folders.length; i++) {\n          if (result.folders[i].name === grouping) {\n            addFolder = false;\n            folderIndex = i;\n            break;\n          }\n        }\n      }\n\n      const cipher = this.buildBaseCipher(value);\n      if (cipher.type === CipherType.Login) {\n        cipher.notes = this.getValueOrDefault(value.extra);\n        cipher.login = new LoginView();\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.totp);\n      } else if (cipher.type === CipherType.SecureNote) {\n        this.parseSecureNote(value, cipher);\n      } else if (cipher.type === CipherType.Card) {\n        cipher.card = this.parseCard(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n      } else if (cipher.type === CipherType.Identity) {\n        cipher.identity = this.parseIdentity(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n        if (!this.isNullOrWhitespace(value.ccnum)) {\n          // there is a card on this identity too\n          const cardCipher = this.buildBaseCipher(value);\n          cardCipher.identity = null;\n          cardCipher.type = CipherType.Card;\n          cardCipher.card = this.parseCard(value);\n          result.ciphers.push(cardCipher);\n        }\n      }\n\n      result.ciphers.push(cipher);\n\n      if (addFolder) {\n        const f = new FolderView();\n        f.name = grouping;\n        result.folders.push(f);\n      }\n      if (hasFolder) {\n        result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private buildBaseCipher(value: any) {\n    const cipher = new CipherView();\n    // eslint-disable-next-line\n    if (value.hasOwnProperty(\"profilename\") && value.hasOwnProperty(\"profilelanguage\")) {\n      // form fill\n      cipher.favorite = false;\n      cipher.name = this.getValueOrDefault(value.profilename, \"--\");\n      cipher.type = CipherType.Card;\n\n      if (\n        !this.isNullOrWhitespace(value.title) ||\n        !this.isNullOrWhitespace(value.firstname) ||\n        !this.isNullOrWhitespace(value.lastname) ||\n        !this.isNullOrWhitespace(value.address1) ||\n        !this.isNullOrWhitespace(value.phone) ||\n        !this.isNullOrWhitespace(value.username) ||\n        !this.isNullOrWhitespace(value.email)\n      ) {\n        cipher.type = CipherType.Identity;\n      }\n    } else {\n      // site or secure note\n      cipher.favorite = !this.organization && this.getValueOrDefault(value.fav, \"0\") === \"1\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.type = value.url === \"http://sn\" ? CipherType.SecureNote : CipherType.Login;\n    }\n    return cipher;\n  }\n\n  private parseCard(value: any): CardView {\n    const card = new CardView();\n    card.cardholderName = this.getValueOrDefault(value.ccname);\n    card.number = this.getValueOrDefault(value.ccnum);\n    card.code = this.getValueOrDefault(value.cccsc);\n    card.brand = this.getCardBrand(value.ccnum);\n\n    if (!this.isNullOrWhitespace(value.ccexp) && value.ccexp.indexOf(\"-\") > -1) {\n      const ccexpParts = (value.ccexp as string).split(\"-\");\n      if (ccexpParts.length > 1) {\n        card.expYear = ccexpParts[0];\n        card.expMonth = ccexpParts[1];\n        if (card.expMonth.length === 2 && card.expMonth[0] === \"0\") {\n          card.expMonth = card.expMonth[1];\n        }\n      }\n    }\n\n    return card;\n  }\n\n  private parseIdentity(value: any): IdentityView {\n    const identity = new IdentityView();\n    identity.title = this.getValueOrDefault(value.title);\n    identity.firstName = this.getValueOrDefault(value.firstname);\n    identity.middleName = this.getValueOrDefault(value.middlename);\n    identity.lastName = this.getValueOrDefault(value.lastname);\n    identity.username = this.getValueOrDefault(value.username);\n    identity.company = this.getValueOrDefault(value.company);\n    identity.ssn = this.getValueOrDefault(value.ssn);\n    identity.address1 = this.getValueOrDefault(value.address1);\n    identity.address2 = this.getValueOrDefault(value.address2);\n    identity.address3 = this.getValueOrDefault(value.address3);\n    identity.city = this.getValueOrDefault(value.city);\n    identity.state = this.getValueOrDefault(value.state);\n    identity.postalCode = this.getValueOrDefault(value.zip);\n    identity.country = this.getValueOrDefault(value.country);\n    identity.email = this.getValueOrDefault(value.email);\n    identity.phone = this.getValueOrDefault(value.phone);\n\n    if (!this.isNullOrWhitespace(identity.title)) {\n      identity.title = identity.title.charAt(0).toUpperCase() + identity.title.slice(1);\n    }\n\n    return identity;\n  }\n\n  private parseSecureNote(value: any, cipher: CipherView) {\n    const extraParts = this.splitNewLine(value.extra);\n    let processedNote = false;\n\n    if (extraParts.length) {\n      const typeParts = extraParts[0].split(\":\");\n      if (\n        typeParts.length > 1 &&\n        typeParts[0] === \"NoteType\" &&\n        (typeParts[1] === \"Credit Card\" || typeParts[1] === \"Address\")\n      ) {\n        if (typeParts[1] === \"Credit Card\") {\n          const mappedData = this.parseSecureNoteMapping<CardView>(cipher, extraParts, {\n            Number: \"number\",\n            \"Name on Card\": \"cardholderName\",\n            \"Security Code\": \"code\",\n            // LP provides date in a format like 'June,2020'\n            // Store in expMonth, then parse and modify\n            \"Expiration Date\": \"expMonth\",\n          });\n\n          if (this.isNullOrWhitespace(mappedData.expMonth) || mappedData.expMonth === \",\") {\n            // No expiration data\n            mappedData.expMonth = undefined;\n          } else {\n            const [monthString, year] = mappedData.expMonth.split(\",\");\n            // Parse month name into number\n            if (!this.isNullOrWhitespace(monthString)) {\n              const month = new Date(Date.parse(monthString.trim() + \" 1, 2012\")).getMonth() + 1;\n              if (isNaN(month)) {\n                mappedData.expMonth = undefined;\n              } else {\n                mappedData.expMonth = month.toString();\n              }\n            } else {\n              mappedData.expMonth = undefined;\n            }\n            if (!this.isNullOrWhitespace(year)) {\n              mappedData.expYear = year;\n            }\n          }\n\n          cipher.type = CipherType.Card;\n          cipher.card = mappedData;\n        } else if (typeParts[1] === \"Address\") {\n          const mappedData = this.parseSecureNoteMapping<IdentityView>(cipher, extraParts, {\n            Title: \"title\",\n            \"First Name\": \"firstName\",\n            \"Last Name\": \"lastName\",\n            \"Middle Name\": \"middleName\",\n            Company: \"company\",\n            \"Address 1\": \"address1\",\n            \"Address 2\": \"address2\",\n            \"Address 3\": \"address3\",\n            \"City / Town\": \"city\",\n            State: \"state\",\n            \"Zip / Postal Code\": \"postalCode\",\n            Country: \"country\",\n            \"Email Address\": \"email\",\n            Username: \"username\",\n          });\n          cipher.type = CipherType.Identity;\n          cipher.identity = mappedData;\n        }\n        processedNote = true;\n      }\n    }\n\n    if (!processedNote) {\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n      cipher.notes = this.getValueOrDefault(value.extra);\n    }\n  }\n\n  private parseSecureNoteMapping<T>(cipher: CipherView, extraParts: string[], map: any): T {\n    const dataObj: any = {};\n\n    let processingNotes = false;\n    extraParts.forEach((extraPart) => {\n      let key: string = null;\n      let val: string = null;\n      if (!processingNotes) {\n        if (this.isNullOrWhitespace(extraPart)) {\n          return;\n        }\n        const colonIndex = extraPart.indexOf(\":\");\n        if (colonIndex === -1) {\n          key = extraPart;\n        } else {\n          key = extraPart.substring(0, colonIndex);\n          if (extraPart.length > colonIndex) {\n            val = extraPart.substring(colonIndex + 1);\n          }\n        }\n        if (this.isNullOrWhitespace(key) || this.isNullOrWhitespace(val) || key === \"NoteType\") {\n          return;\n        }\n      }\n\n      if (processingNotes) {\n        cipher.notes += \"\\n\" + extraPart;\n      } else if (key === \"Notes\") {\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes += \"\\n\" + val;\n        } else {\n          cipher.notes = val;\n        }\n        processingNotes = true;\n        // eslint-disable-next-line\n      } else if (map.hasOwnProperty(key)) {\n        dataObj[map[key]] = val;\n      } else {\n        this.processKvp(cipher, key, val);\n      }\n    });\n\n    return dataObj;\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class LogMeOnceCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 4) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[1]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class MeldiumCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.DisplayName, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.login.username = this.getValueOrDefault(value.UserName);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { SecureNoteView } from \"../models/view/secure-note.view\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class MSecureCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      const folderName =\n        this.getValueOrDefault(value[0], \"Unassigned\") !== \"Unassigned\" ? value[0] : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[2], \"--\");\n\n      if (value[1] === \"Web Logins\" || value[1] === \"Login\") {\n        cipher.login.uris = this.makeUriArray(value[4]);\n        cipher.login.username = this.getValueOrDefault(value[5]);\n        cipher.login.password = this.getValueOrDefault(value[6]);\n        cipher.notes = !this.isNullOrWhitespace(value[3]) ? value[3].split(\"\\\\n\").join(\"\\n\") : null;\n      } else if (value.length > 3) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        for (let i = 3; i < value.length; i++) {\n          if (!this.isNullOrWhitespace(value[i])) {\n            cipher.notes += value[i] + \"\\n\";\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(value[1]) && cipher.type !== CipherType.Login) {\n        cipher.name = value[1] + \": \" + cipher.name;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CardView } from \"../models/view/card.view\";\nimport { CipherView } from \"../models/view/cipher.view\";\nimport { IdentityView } from \"../models/view/identity.view\";\nimport { SecureNoteView } from \"../models/view/secure-note.view\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nconst mappedBaseColumns = [\"nickname\", \"additionalInfo\"];\nconst _mappedUserAccountColumns = new Set(\n  mappedBaseColumns.concat([\"url\", \"username\", \"password\", \"twofaSecret\"])\n);\nconst _mappedCreditCardColumns = new Set(\n  mappedBaseColumns.concat([\"cardNumber\", \"cardName\", \"exp_month\", \"exp_year\", \"cvv\"])\n);\n\nconst _mappedIdentityColumns = new Set(\n  mappedBaseColumns.concat([\n    \"title\",\n    \"firstName\",\n    \"middleName\",\n    \"lastName\",\n    \"email\",\n    \"firstAddressLine\",\n    \"secondAddressLine\",\n    \"city\",\n    \"country\",\n    \"zipCode\",\n  ])\n);\n\nconst _mappedIdCardColumns = new Set(mappedBaseColumns.concat([\"idName\", \"idNumber\", \"idCountry\"]));\n\nconst _mappedTwoFaColumns = new Set(mappedBaseColumns.concat([\"authToken\"]));\n\nconst _mappedUserNoteColumns = new Set(mappedBaseColumns.concat([\"content\"]));\n\nexport class MykiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.nickname, \"--\");\n      cipher.notes = this.getValueOrDefault(value.additionalInfo);\n\n      if (value.url !== undefined) {\n        // Accounts\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.twofaSecret);\n\n        this.importUnmappedFields(cipher, value, _mappedUserAccountColumns);\n      } else if (value.authToken !== undefined) {\n        // TwoFA\n        cipher.login.totp = this.getValueOrDefault(value.authToken);\n\n        this.importUnmappedFields(cipher, value, _mappedTwoFaColumns);\n      } else if (value.cardNumber !== undefined) {\n        // Cards\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.expMonth = this.getValueOrDefault(value.exp_month);\n        cipher.card.expYear = this.getValueOrDefault(value.exp_year);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n\n        this.importUnmappedFields(cipher, value, _mappedCreditCardColumns);\n      } else if (value.firstName !== undefined) {\n        // Identities\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        cipher.identity.title = this.getValueOrDefault(value.title);\n        cipher.identity.firstName = this.getValueOrDefault(value.firstName);\n        cipher.identity.middleName = this.getValueOrDefault(value.middleName);\n        cipher.identity.lastName = this.getValueOrDefault(value.lastName);\n        cipher.identity.phone = this.getValueOrDefault(value.number);\n        cipher.identity.email = this.getValueOrDefault(value.email);\n        cipher.identity.address1 = this.getValueOrDefault(value.firstAddressLine);\n        cipher.identity.address2 = this.getValueOrDefault(value.secondAddressLine);\n        cipher.identity.city = this.getValueOrDefault(value.city);\n        cipher.identity.country = this.getValueOrDefault(value.country);\n        cipher.identity.postalCode = this.getValueOrDefault(value.zipCode);\n\n        this.importUnmappedFields(cipher, value, _mappedIdentityColumns);\n      } else if (value.idType !== undefined) {\n        // IdCards\n\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        this.processFullName(cipher, value.idName);\n        cipher.identity.country = this.getValueOrDefault(value.idCountry);\n\n        switch (value.idType) {\n          // case \"Driver's License\":\n          // case \"ID Card\":\n          // case \"Outdoor License\":\n          // case \"Software License\":\n          // case \"Tax Number\":\n          // case \"Bank Account\":\n          // case \"Insurance Card\":\n          // case \"Health Card\":\n          // case \"Membership\":\n          // case \"Database\":\n          // case \"Reward Program\":\n          // case \"Tour Visa\":\n          case \"Passport\":\n            cipher.identity.passportNumber = value.idNumber;\n            break;\n          case \"Social Security\":\n            cipher.identity.ssn = value.idNumber;\n            break;\n          default:\n            cipher.identity.licenseNumber = value.idNumber;\n            break;\n        }\n\n        this.importUnmappedFields(cipher, value, _mappedIdCardColumns);\n      } else if (value.content !== undefined) {\n        // Notes\n        cipher.secureNote = new SecureNoteView();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.notes = this.getValueOrDefault(value.content);\n\n        this.importUnmappedFields(cipher, value, _mappedUserNoteColumns);\n      } else {\n        return;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CipherView } from \"../models/view/cipher.view\";\nimport { LoginView } from \"../models/view/login.view\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\ntype nodePassCsvParsed = {\n  name: string;\n  url: string;\n  username: string;\n  password: string;\n  note: string;\n  cardholdername: string;\n  cardnumber: string;\n  cvc: string;\n  expirydate: string;\n  zipcode: string;\n  folder: string;\n  full_name: string;\n  phone_number: string;\n  email: string;\n  address1: string;\n  address2: string;\n  city: string;\n  country: string;\n  state: string;\n};\n\nexport class NordPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: nodePassCsvParsed[] = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((record) => {\n      const recordType = this.evaluateType(record);\n      if (recordType === undefined) {\n        return;\n      }\n\n      if (!this.organization) {\n        this.processFolder(result, record.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.name = this.getValueOrDefault(record.name, \"--\");\n      cipher.notes = this.getValueOrDefault(record.note);\n\n      switch (recordType) {\n        case CipherType.Login:\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.username = this.getValueOrDefault(record.username);\n          cipher.login.password = this.getValueOrDefault(record.password);\n          cipher.login.uris = this.makeUriArray(record.url);\n          break;\n        case CipherType.Card:\n          cipher.type = CipherType.Card;\n          cipher.card.cardholderName = this.getValueOrDefault(record.cardholdername);\n          cipher.card.number = this.getValueOrDefault(record.cardnumber);\n          cipher.card.code = this.getValueOrDefault(record.cvc);\n          cipher.card.brand = this.getCardBrand(cipher.card.number);\n          this.setCardExpiration(cipher, record.expirydate);\n          break;\n\n        case CipherType.Identity:\n          cipher.type = CipherType.Identity;\n\n          this.processFullName(cipher, this.getValueOrDefault(record.full_name));\n          cipher.identity.address1 = this.getValueOrDefault(record.address1);\n          cipher.identity.address2 = this.getValueOrDefault(record.address2);\n          cipher.identity.city = this.getValueOrDefault(record.city);\n          cipher.identity.state = this.getValueOrDefault(record.state);\n          cipher.identity.postalCode = this.getValueOrDefault(record.zipcode);\n          cipher.identity.country = this.getValueOrDefault(record.country);\n          if (cipher.identity.country != null) {\n            cipher.identity.country = cipher.identity.country.toUpperCase();\n          }\n          cipher.identity.email = this.getValueOrDefault(record.email);\n          cipher.identity.phone = this.getValueOrDefault(record.phone_number);\n          break;\n        case CipherType.SecureNote:\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default:\n          break;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private evaluateType(record: nodePassCsvParsed): CipherType {\n    if (!this.isNullOrWhitespace(record.username)) {\n      return CipherType.Login;\n    }\n\n    if (!this.isNullOrWhitespace(record.cardnumber)) {\n      return CipherType.Card;\n    }\n\n    if (!this.isNullOrWhitespace(record.full_name)) {\n      return CipherType.Identity;\n    }\n\n    if (!this.isNullOrWhitespace(record.note)) {\n      return CipherType.SecureNote;\n    }\n\n    return undefined;\n  }\n}\n","export interface ExportData {\n  accounts?: AccountsEntity[] | null;\n}\nexport interface AccountsEntity {\n  attrs: AccountAttributes;\n  vaults?: VaultsEntity[] | null;\n}\nexport interface AccountAttributes {\n  accountName: string;\n  name: string;\n  avatar: string;\n  email: string;\n  uuid: string;\n  domain: string;\n}\nexport interface VaultsEntity {\n  attrs: VaultAttributes;\n  items?: Item[] | null;\n}\nexport interface VaultAttributes {\n  uuid: string;\n  desc: string;\n  avatar: string;\n  name: string;\n  type: string;\n}\n\nexport enum CategoryEnum {\n  Login = \"001\",\n  CreditCard = \"002\",\n  SecureNote = \"003\",\n  Identity = \"004\",\n  Password = \"005\",\n  Document = \"006\",\n  SoftwareLicense = \"100\",\n  BankAccount = \"101\",\n  Database = \"102\",\n  DriversLicense = \"103\",\n  OutdoorLicense = \"104\",\n  Membership = \"105\",\n  Passport = \"106\",\n  RewardsProgram = \"107\",\n  SocialSecurityNumber = \"108\",\n  WirelessRouter = \"109\",\n  Server = \"110\",\n  EmailAccount = \"111\",\n  API_Credential = \"112\",\n  MedicalRecord = \"113\",\n}\n\nexport interface Item {\n  uuid: string;\n  favIndex: number;\n  createdAt: number;\n  updatedAt: number;\n  trashed?: boolean;\n  categoryUuid: string;\n  details: Details;\n  overview: Overview;\n}\nexport interface Details {\n  loginFields?: (LoginFieldsEntity | null)[] | null;\n  notesPlain?: string | null;\n  sections?: (SectionsEntity | null)[] | null;\n  passwordHistory?: (PasswordHistoryEntity | null)[] | null;\n  documentAttributes?: DocumentAttributes | null;\n  password?: string | null;\n}\n\nexport enum LoginFieldTypeEnum {\n  TextOrHtml = \"T\",\n  EmailAddress = \"E\",\n  URL = \"U\",\n  Number = \"N\",\n  Password = \"P\",\n  TextArea = \"A\",\n  PhoneNumber = \"T\",\n  CheckBox = \"C\",\n}\nexport interface LoginFieldsEntity {\n  value: string;\n  id: string;\n  name: string;\n  fieldType: LoginFieldTypeEnum | string;\n  designation?: string | null;\n}\nexport interface SectionsEntity {\n  title: string;\n  name?: string | null;\n  fields?: FieldsEntity[] | null;\n}\nexport interface FieldsEntity {\n  title: string;\n  id: string;\n  value: Value;\n  indexAtSource: number;\n  guarded: boolean;\n  multiline: boolean;\n  dontGenerate: boolean;\n  placeholder?: string;\n  inputTraits: InputTraits;\n  clipboardFilter?: string | null;\n}\nexport interface Value {\n  totp?: string | null;\n  date?: number | null;\n  string?: string | null;\n  concealed?: string | null;\n  email?: Email | null;\n  phone?: string | null;\n  menu?: string | null;\n  gender?: string | null;\n  monthYear?: number | null;\n  url?: string | null;\n  address?: Address | null;\n  creditCardType?: string | null;\n  creditCardNumber?: string | null;\n  reference?: string | null;\n}\n\nexport interface Email {\n  email_address: string;\n  provider: string;\n}\n\nexport interface Address {\n  street: string;\n  city: string;\n  country: string;\n  zip: string;\n  state: string;\n}\nexport interface InputTraits {\n  keyboard: string;\n  correction: string;\n  capitalization: string;\n}\nexport interface PasswordHistoryEntity {\n  value: string;\n  time: number;\n}\nexport interface DocumentAttributes {\n  fileName: string;\n  documentId: string;\n  decryptedSize: number;\n}\nexport interface Overview {\n  subtitle: string;\n  title: string;\n  url: string;\n  urls?: UrlsEntity[] | null;\n  ps?: number | null;\n  pbe?: number | null;\n  pgrng?: boolean | null;\n  tags?: string[] | null;\n}\nexport interface UrlsEntity {\n  label: string;\n  url: string;\n}\n","import { CipherType } from \"../../enums/cipherType\";\nimport { FieldType } from \"../../enums/fieldType\";\nimport { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { ImportResult } from \"../../models/domain/import-result\";\nimport { CardView } from \"../../models/view/card.view\";\nimport { CipherView } from \"../../models/view/cipher.view\";\nimport { IdentityView } from \"../../models/view/identity.view\";\nimport { PasswordHistoryView } from \"../../models/view/password-history.view\";\nimport { SecureNoteView } from \"../../models/view/secure-note.view\";\nimport { BaseImporter } from \"../baseImporter\";\nimport { Importer } from \"../importer\";\n\nexport class OnePassword1PifImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    data.split(this.newLineRegex).forEach((line) => {\n      if (this.isNullOrWhitespace(line) || line[0] !== \"{\") {\n        return;\n      }\n      const item = JSON.parse(line);\n      if (item.trashed === true) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n\n      if (this.isNullOrWhitespace(item.hmac)) {\n        this.processStandardItem(item, cipher);\n      } else {\n        this.processWinOpVaultItem(item, cipher);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processWinOpVaultItem(item: any, cipher: CipherView) {\n    if (item.overview != null) {\n      cipher.name = this.getValueOrDefault(item.overview.title);\n      if (item.overview.URLs != null) {\n        const urls: string[] = [];\n        item.overview.URLs.forEach((url: any) => {\n          if (!this.isNullOrWhitespace(url.u)) {\n            urls.push(url.u);\n          }\n        });\n        cipher.login.uris = this.makeUriArray(urls);\n      }\n    }\n\n    if (item.details != null) {\n      if (item.details.passwordHistory != null) {\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n      }\n      if (\n        !this.isNullOrWhitespace(item.details.ccnum) ||\n        !this.isNullOrWhitespace(item.details.cvv)\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      } else if (\n        !this.isNullOrWhitespace(item.details.firstname) ||\n        !this.isNullOrWhitespace(item.details.address1)\n      ) {\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n      }\n      if (cipher.type === CipherType.Login && !this.isNullOrWhitespace(item.details.password)) {\n        cipher.login.password = item.details.password;\n      }\n      if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n        cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (item.details.fields != null) {\n        this.parseFields(item.details.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.details.sections != null) {\n        item.details.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private processStandardItem(item: any, cipher: CipherView) {\n    cipher.favorite = item.openContents && item.openContents.faveIndex ? true : false;\n    cipher.name = this.getValueOrDefault(item.title);\n\n    if (item.typeName === \"securenotes.SecureNote\") {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    } else if (item.typeName === \"wallet.financial.CreditCard\") {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    } else if (item.typeName === \"identities.Identity\") {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    } else {\n      cipher.login.uris = this.makeUriArray(item.location);\n    }\n\n    if (item.secureContents != null) {\n      if (item.secureContents.passwordHistory != null) {\n        this.parsePasswordHistory(item.secureContents.passwordHistory, cipher);\n      }\n      if (!this.isNullOrWhitespace(item.secureContents.notesPlain)) {\n        cipher.notes = item.secureContents.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (cipher.type === CipherType.Login) {\n        if (!this.isNullOrWhitespace(item.secureContents.password)) {\n          cipher.login.password = item.secureContents.password;\n        }\n        if (item.secureContents.URLs != null) {\n          const urls: string[] = [];\n          item.secureContents.URLs.forEach((u: any) => {\n            if (!this.isNullOrWhitespace(u.url)) {\n              urls.push(u.url);\n            }\n          });\n          if (urls.length > 0) {\n            cipher.login.uris = this.makeUriArray(urls);\n          }\n        }\n      }\n      if (item.secureContents.fields != null) {\n        this.parseFields(item.secureContents.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.secureContents.sections != null) {\n        item.secureContents.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private parsePasswordHistory(items: any[], cipher: CipherView) {\n    const maxSize = items.length > 5 ? 5 : items.length;\n    cipher.passwordHistory = items\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n\n  private parseFields(\n    fields: any[],\n    cipher: CipherView,\n    designationKey: string,\n    valueKey: string,\n    nameKey: string\n  ) {\n    fields.forEach((field: any) => {\n      if (field[valueKey] == null || field[valueKey].toString().trim() === \"\") {\n        return;\n      }\n\n      // TODO: when date FieldType exists, store this as a date field type instead of formatted Text if k is 'date'\n      const fieldValue =\n        field.k === \"date\"\n          ? new Date(field[valueKey] * 1000).toUTCString()\n          : field[valueKey].toString();\n      const fieldDesignation =\n        field[designationKey] != null ? field[designationKey].toString() : null;\n\n      if (cipher.type === CipherType.Login) {\n        if (this.isNullOrWhitespace(cipher.login.username) && fieldDesignation === \"username\") {\n          cipher.login.username = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.password) &&\n          fieldDesignation === \"password\"\n        ) {\n          cipher.login.password = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.totp) &&\n          fieldDesignation != null &&\n          fieldDesignation.startsWith(\"TOTP_\")\n        ) {\n          cipher.login.totp = fieldValue;\n          return;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.isNullOrWhitespace(cipher.card.number) && fieldDesignation === \"ccnum\") {\n          cipher.card.number = fieldValue;\n          cipher.card.brand = this.getCardBrand(fieldValue);\n          return;\n        } else if (this.isNullOrWhitespace(cipher.card.code) && fieldDesignation === \"cvv\") {\n          cipher.card.code = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.cardholderName) &&\n          fieldDesignation === \"cardholder\"\n        ) {\n          cipher.card.cardholderName = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.expiration) &&\n          fieldDesignation === \"expiry\" &&\n          fieldValue.length === 6\n        ) {\n          cipher.card.expMonth = (fieldValue as string).substr(4, 2);\n          if (cipher.card.expMonth[0] === \"0\") {\n            cipher.card.expMonth = cipher.card.expMonth.substr(1, 1);\n          }\n          cipher.card.expYear = (fieldValue as string).substr(0, 4);\n          return;\n        } else if (fieldDesignation === \"type\") {\n          // Skip since brand was determined from number above\n          return;\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        const identity = cipher.identity;\n        if (this.isNullOrWhitespace(identity.firstName) && fieldDesignation === \"firstname\") {\n          identity.firstName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.lastName) && fieldDesignation === \"lastname\") {\n          identity.lastName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.middleName) && fieldDesignation === \"initial\") {\n          identity.middleName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.phone) && fieldDesignation === \"defphone\") {\n          identity.phone = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.company) && fieldDesignation === \"company\") {\n          identity.company = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.email) && fieldDesignation === \"email\") {\n          identity.email = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.username) && fieldDesignation === \"username\") {\n          identity.username = fieldValue;\n          return;\n        } else if (fieldDesignation === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip } = field[valueKey];\n          identity.address1 = this.getValueOrDefault(street);\n          identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            identity.country = country.toUpperCase();\n          }\n          identity.postalCode = this.getValueOrDefault(zip);\n          return;\n        }\n      }\n\n      const fieldName = this.isNullOrWhitespace(field[nameKey]) ? \"no_name\" : field[nameKey];\n      if (\n        fieldName === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      const fieldType = field.k === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n}\n","import { CipherRepromptType } from \"../../enums/cipherRepromptType\";\nimport { CipherType } from \"../../enums/cipherType\";\nimport { FieldType } from \"../../enums/fieldType\";\nimport { SecureNoteType } from \"../../enums/secureNoteType\";\nimport { ImportResult } from \"../../models/domain/import-result\";\nimport { CardView } from \"../../models/view/card.view\";\nimport { CipherView } from \"../../models/view/cipher.view\";\nimport { IdentityView } from \"../../models/view/identity.view\";\nimport { LoginView } from \"../../models/view/login.view\";\nimport { PasswordHistoryView } from \"../../models/view/password-history.view\";\nimport { SecureNoteView } from \"../../models/view/secure-note.view\";\nimport { BaseImporter } from \"../baseImporter\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CategoryEnum,\n  Details,\n  ExportData,\n  FieldsEntity,\n  Item,\n  LoginFieldTypeEnum,\n  Overview,\n  PasswordHistoryEntity,\n  SectionsEntity,\n  UrlsEntity,\n  Value,\n  VaultsEntity,\n} from \"./types/onepassword1PuxImporterTypes\";\n\nexport class OnePassword1PuxImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const exportData: ExportData = JSON.parse(data);\n\n    const account = exportData.accounts[0];\n    // TODO Add handling of multiple vaults\n    // const personalVaults = account.vaults[0].filter((v) => v.attrs.type === VaultAttributeTypeEnum.Personal);\n    account.vaults.forEach((vault: VaultsEntity) => {\n      vault.items.forEach((item: Item) => {\n        if (item.trashed === true) {\n          return;\n        }\n\n        const cipher = this.initLoginCipher();\n\n        const category = item.categoryUuid as CategoryEnum;\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.Password:\n          case CategoryEnum.WirelessRouter:\n          case CategoryEnum.Server:\n          case CategoryEnum.API_Credential:\n            cipher.type = CipherType.Login;\n            cipher.login = new LoginView();\n            break;\n          case CategoryEnum.CreditCard:\n          case CategoryEnum.BankAccount:\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            break;\n          case CategoryEnum.SecureNote:\n          case CategoryEnum.SoftwareLicense:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.MedicalRecord:\n            // case CategoryEnum.Document:\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case CategoryEnum.Identity:\n          case CategoryEnum.DriversLicense:\n          case CategoryEnum.OutdoorLicense:\n          case CategoryEnum.Membership:\n          case CategoryEnum.Passport:\n          case CategoryEnum.RewardsProgram:\n          case CategoryEnum.SocialSecurityNumber:\n            cipher.type = CipherType.Identity;\n            cipher.identity = new IdentityView();\n            break;\n          default:\n            break;\n        }\n\n        cipher.favorite = item.favIndex === 1 ? true : false;\n\n        this.processOverview(item.overview, cipher);\n\n        this.processLoginFields(item, cipher);\n\n        this.processDetails(category, item.details, cipher);\n\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n\n        this.processSections(category, item.details.sections, cipher);\n\n        if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n          cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        this.result.ciphers.push(cipher);\n      });\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processOverview(overview: Overview, cipher: CipherView) {\n    if (overview == null) {\n      return;\n    }\n\n    cipher.name = this.getValueOrDefault(overview.title);\n\n    if (overview.urls != null) {\n      const urls: string[] = [];\n      overview.urls.forEach((url: UrlsEntity) => {\n        if (!this.isNullOrWhitespace(url.url)) {\n          urls.push(url.url);\n        }\n      });\n      cipher.login.uris = this.makeUriArray(urls);\n    }\n\n    if (overview.tags != null && overview.tags.length > 0) {\n      const folderName = this.capitalize(overview.tags[0]);\n      this.processFolder(this.result, folderName);\n    }\n  }\n\n  private capitalize(inputString: string): string {\n    return inputString.trim().replace(/\\w\\S*/g, (w) => w.replace(/^\\w/, (c) => c.toUpperCase()));\n  }\n\n  private processLoginFields(item: Item, cipher: CipherView) {\n    if (item.details == null) {\n      return;\n    }\n\n    if (item.details.loginFields == null || item.details.loginFields.length === 0) {\n      return;\n    }\n\n    item.details.loginFields.forEach((loginField) => {\n      if (loginField.designation === \"username\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.username = loginField.value;\n        return;\n      }\n\n      if (loginField.designation === \"password\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.password = loginField.value;\n        return;\n      }\n\n      let fieldValue = loginField.value;\n      let fieldType: FieldType = FieldType.Text;\n      switch (loginField.fieldType) {\n        case LoginFieldTypeEnum.Password:\n          fieldType = FieldType.Hidden;\n          break;\n        case LoginFieldTypeEnum.CheckBox:\n          fieldValue = loginField.value !== \"\" ? \"true\" : \"false\";\n          fieldType = FieldType.Boolean;\n          break;\n        default:\n          break;\n      }\n      this.processKvp(cipher, loginField.name, fieldValue, fieldType);\n    });\n  }\n\n  private processDetails(category: CategoryEnum, details: Details, cipher: CipherView) {\n    if (category !== CategoryEnum.Password) {\n      return;\n    }\n\n    if (details == null) {\n      return;\n    }\n    cipher.login.password = details.password;\n  }\n\n  private processSections(category: CategoryEnum, sections: SectionsEntity[], cipher: CipherView) {\n    if (sections == null || sections.length === 0) {\n      return;\n    }\n\n    sections.forEach((section: SectionsEntity) => {\n      if (section.fields == null) {\n        return;\n      }\n\n      this.parseSectionFields(category, section.fields, cipher);\n    });\n  }\n\n  private parseSectionFields(category: CategoryEnum, fields: FieldsEntity[], cipher: CipherView) {\n    fields.forEach((field: FieldsEntity) => {\n      const valueKey = Object.keys(field.value)[0];\n      const anyField = field as any;\n\n      if (\n        anyField.value == null ||\n        anyField.value[valueKey] == null ||\n        anyField.value[valueKey] === \"\"\n      ) {\n        return;\n      }\n\n      const fieldName = this.getFieldName(field.id, field.title);\n      const fieldValue = this.extractValue(field.value, valueKey);\n\n      if (cipher.type === CipherType.Login) {\n        if (this.fillLogin(field, fieldValue, cipher)) {\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.WirelessRouter:\n            break;\n\n          case CategoryEnum.Server:\n            if (this.isNullOrWhitespace(cipher.login.uri) && field.id === \"url\") {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              return;\n            }\n            break;\n\n          case CategoryEnum.API_Credential:\n            if (this.fillApiCredentials(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.fillCreditCard(field, fieldValue, cipher)) {\n          return;\n        }\n\n        if (category === CategoryEnum.BankAccount) {\n          if (this.fillBankAccount(field, fieldValue, cipher)) {\n            return;\n          }\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        if (this.fillIdentity(field, fieldValue, cipher, valueKey)) {\n          return;\n        }\n        if (valueKey === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip, state } = field.value.address;\n          cipher.identity.address1 = this.getValueOrDefault(street);\n          cipher.identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            cipher.identity.country = country.toUpperCase();\n          }\n          cipher.identity.postalCode = this.getValueOrDefault(zip);\n          cipher.identity.state = this.getValueOrDefault(state);\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Identity:\n            break;\n          case CategoryEnum.DriversLicense:\n            if (this.fillDriversLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.OutdoorLicense:\n            if (this.fillOutdoorLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Membership:\n            if (this.fillMembership(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Passport:\n            if (this.fillPassport(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.RewardsProgram:\n            if (this.fillRewardsProgram(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.SocialSecurityNumber:\n            if (this.fillSSN(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (valueKey === \"email\") {\n        // fieldValue is an object casted into a string, so access the plain value instead\n        const { email_address, provider } = field.value.email;\n        this.processKvp(cipher, fieldName, email_address, FieldType.Text);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return;\n      }\n\n      // Do not include a password field if it's already in the history\n      if (\n        field.title === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      // TODO ?? If one of the fields is marked as guarded, then activate Password-Reprompt for the entire item\n      if (field.guarded && cipher.reprompt === CipherRepromptType.None) {\n        cipher.reprompt = CipherRepromptType.Password;\n      }\n\n      const fieldType = valueKey === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n\n  private getFieldName(id: string, title: string): string {\n    if (this.isNullOrWhitespace(title)) {\n      return id;\n    }\n\n    // Naive approach of checking if the fields id is usable\n    if (id.length > 25 && RegExp(/[0-9]{2}[A-Z]{2}/, \"i\").test(id)) {\n      return title;\n    }\n    return id;\n  }\n\n  private extractValue(value: Value, valueKey: string): string {\n    if (valueKey === \"date\") {\n      return new Date(value.date * 1000).toUTCString();\n    }\n\n    if (valueKey === \"monthYear\") {\n      return value.monthYear.toString();\n    }\n\n    return (value as any)[valueKey];\n  }\n\n  private fillLogin(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.username) && fieldName === \"username\") {\n      cipher.login.username = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"password\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (\n      this.isNullOrWhitespace(cipher.login.totp) &&\n      field.id != null &&\n      field.id.startsWith(\"TOTP_\")\n    ) {\n      cipher.login.totp = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillApiCredentials(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.id, field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"credential\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.uri) && fieldName === \"hostname\") {\n      cipher.login.uris = this.makeUriArray(fieldValue);\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillCreditCard(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.number) && field.id === \"ccnum\") {\n      cipher.card.number = fieldValue;\n      cipher.card.brand = this.getCardBrand(fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.code) && field.id === \"cvv\") {\n      cipher.card.code = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"cardholder\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.expiration) && field.id === \"expiry\") {\n      const monthYear: string = fieldValue.toString().trim();\n      cipher.card.expMonth = monthYear.substring(4, 6);\n      if (cipher.card.expMonth[0] === \"0\") {\n        cipher.card.expMonth = cipher.card.expMonth.substring(1, 2);\n      }\n      cipher.card.expYear = monthYear.substring(0, 4);\n      return true;\n    }\n\n    if (field.id === \"type\") {\n      // Skip since brand was determined from number above\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillBankAccount(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"owner\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillIdentity(\n    field: FieldsEntity,\n    fieldValue: string,\n    cipher: CipherView,\n    valueKey: string\n  ): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"firstname\") {\n      cipher.identity.firstName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.lastName) && field.id === \"lastname\") {\n      cipher.identity.lastName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.middleName) && field.id === \"initial\") {\n      cipher.identity.middleName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"defphone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.email)) {\n      if (valueKey === \"email\") {\n        const { email_address, provider } = field.value.email;\n        cipher.identity.email = this.getValueOrDefault(email_address);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return true;\n      }\n\n      if (field.id === \"email\") {\n        cipher.identity.email = fieldValue;\n        return true;\n      }\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.username) && field.id === \"username\") {\n      cipher.identity.username = fieldValue;\n      return true;\n    }\n    return false;\n  }\n\n  private fillDriversLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.address1) && field.id === \"address\") {\n      cipher.identity.address1 = fieldValue;\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.licenseNumber) && field.id === \"number\") {\n      cipher.identity.licenseNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillOutdoorLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillMembership(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"org_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"phone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillPassport(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO Iso\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"issuing_country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.passportNumber) && field.id === \"number\") {\n      cipher.identity.passportNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillRewardsProgram(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillSSN(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.ssn) && field.id === \"number\") {\n      cipher.identity.ssn = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private parsePasswordHistory(historyItems: PasswordHistoryEntity[], cipher: CipherView) {\n    if (historyItems == null || historyItems.length === 0) {\n      return;\n    }\n\n    const maxSize = historyItems.length > 5 ? 5 : historyItems.length;\n    cipher.passwordHistory = historyItems\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n}\n","import { CipherView } from \"../../models/view/cipher.view\";\n\nexport class CipherImportContext {\n  lowerProperty: string;\n  constructor(public importRecord: any, public property: string, public cipher: CipherView) {\n    this.lowerProperty = property.toLowerCase();\n  }\n}\n","import { CipherType } from \"../../enums/cipherType\";\nimport { FieldType } from \"../../enums/fieldType\";\nimport { ImportResult } from \"../../models/domain/import-result\";\nimport { CipherView } from \"../../models/view/cipher.view\";\nimport { BaseImporter } from \"../baseImporter\";\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipherImportContext\";\n\nexport const IgnoredProperties = [\n  \"ainfo\",\n  \"autosubmit\",\n  \"notesplain\",\n  \"ps\",\n  \"scope\",\n  \"tags\",\n  \"title\",\n  \"uuid\",\n  \"notes\",\n];\n\nexport abstract class OnePasswordCsvImporter extends BaseImporter implements Importer {\n  protected loginPropertyParsers = [\n    this.setLoginUsername,\n    this.setLoginPassword,\n    this.setLoginUris,\n  ];\n  protected creditCardPropertyParsers = [\n    this.setCreditCardNumber,\n    this.setCreditCardVerification,\n    this.setCreditCardCardholderName,\n    this.setCreditCardExpiry,\n  ];\n  protected identityPropertyParsers = [\n    this.setIdentityFirstName,\n    this.setIdentityInitial,\n    this.setIdentityLastName,\n    this.setIdentityUserName,\n    this.setIdentityEmail,\n    this.setIdentityPhone,\n    this.setIdentityCompany,\n  ];\n\n  abstract setCipherType(value: any, cipher: CipherView): void;\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true, {\n      quoteChar: '\"',\n      escapeChar: \"\\\\\",\n    });\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(this.getProp(value, \"title\"))) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.getProp(value, \"title\"), \"--\");\n\n      this.setNotes(value, cipher);\n\n      this.setCipherType(value, cipher);\n\n      let altUsername: string = null;\n      for (const property in value) {\n        // eslint-disable-next-line\n        if (!value.hasOwnProperty(property) || this.isNullOrWhitespace(value[property])) {\n          continue;\n        }\n\n        const context = new CipherImportContext(value, property, cipher);\n        if (cipher.type === CipherType.Login && this.setKnownLoginValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Card && this.setKnownCreditCardValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Identity && this.setKnownIdentityValue(context)) {\n          continue;\n        }\n\n        altUsername = this.setUnknownValue(context, altUsername);\n      }\n\n      if (\n        cipher.type === CipherType.Login &&\n        !this.isNullOrWhitespace(altUsername) &&\n        this.isNullOrWhitespace(cipher.login.username) &&\n        altUsername.indexOf(\"://\") === -1\n      ) {\n        cipher.login.username = altUsername;\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  protected getProp(obj: any, name: string): any {\n    const lowerObj = Object.entries(obj).reduce((agg: any, entry: [string, any]) => {\n      agg[entry[0].toLowerCase()] = entry[1];\n      return agg;\n    }, {});\n    return lowerObj[name.toLowerCase()];\n  }\n\n  protected getPropByRegexp(obj: any, regexp: RegExp): any {\n    const matchingKeys = Object.keys(obj).reduce((agg: string[], key: string) => {\n      if (key.match(regexp)) {\n        agg.push(key);\n      }\n      return agg;\n    }, []);\n    if (matchingKeys.length === 0) {\n      return null;\n    } else {\n      return obj[matchingKeys[0]];\n    }\n  }\n\n  protected getPropIncluding(obj: any, name: string): any {\n    const includesMap = Object.keys(obj).reduce((agg: string[], entry: string) => {\n      if (entry.toLowerCase().includes(name.toLowerCase())) {\n        agg.push(entry);\n      }\n      return agg;\n    }, []);\n    if (includesMap.length === 0) {\n      return null;\n    } else {\n      return obj[includesMap[0]];\n    }\n  }\n\n  protected setNotes(importRecord: any, cipher: CipherView) {\n    cipher.notes =\n      this.getValueOrDefault(this.getProp(importRecord, \"notesPlain\"), \"\") +\n      \"\\n\" +\n      this.getValueOrDefault(this.getProp(importRecord, \"notes\"), \"\") +\n      \"\\n\";\n    cipher.notes.trim();\n  }\n\n  protected setKnownLoginValue(context: CipherImportContext): boolean {\n    return this.loginPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownCreditCardValue(context: CipherImportContext): boolean {\n    return this.creditCardPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownIdentityValue(context: CipherImportContext): boolean {\n    return this.identityPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setUnknownValue(context: CipherImportContext, altUsername: string): string {\n    if (\n      IgnoredProperties.indexOf(context.lowerProperty) === -1 &&\n      !context.lowerProperty.startsWith(\"section:\") &&\n      !context.lowerProperty.startsWith(\"section \")\n    ) {\n      if (altUsername == null && context.lowerProperty === \"email\") {\n        return context.importRecord[context.property];\n      } else if (\n        context.lowerProperty === \"created date\" ||\n        context.lowerProperty === \"modified date\"\n      ) {\n        const readableDate = new Date(\n          parseInt(context.importRecord[context.property], 10) * 1000\n        ).toUTCString();\n        this.processKvp(context.cipher, \"1Password \" + context.property, readableDate);\n        return null;\n      }\n      if (\n        context.lowerProperty.includes(\"password\") ||\n        context.lowerProperty.includes(\"key\") ||\n        context.lowerProperty.includes(\"secret\")\n      ) {\n        this.processKvp(\n          context.cipher,\n          context.property,\n          context.importRecord[context.property],\n          FieldType.Hidden\n        );\n      } else {\n        this.processKvp(context.cipher, context.property, context.importRecord[context.property]);\n      }\n    }\n    return null;\n  }\n\n  protected setIdentityFirstName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.firstName) &&\n      context.lowerProperty.includes(\"first name\")\n    ) {\n      context.cipher.identity.firstName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityInitial(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.middleName) &&\n      context.lowerProperty.includes(\"initial\")\n    ) {\n      context.cipher.identity.middleName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityLastName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.lastName) &&\n      context.lowerProperty.includes(\"last name\")\n    ) {\n      context.cipher.identity.lastName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityUserName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.username) &&\n      context.lowerProperty.includes(\"username\")\n    ) {\n      context.cipher.identity.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityCompany(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.company) &&\n      context.lowerProperty.includes(\"company\")\n    ) {\n      context.cipher.identity.company = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityPhone(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.phone) &&\n      context.lowerProperty.includes(\"default phone\")\n    ) {\n      context.cipher.identity.phone = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityEmail(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.email) &&\n      context.lowerProperty.includes(\"email\")\n    ) {\n      context.cipher.identity.email = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardNumber(context: CipherImportContext): boolean {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.number) &&\n      context.lowerProperty.includes(\"number\")\n    ) {\n      context.cipher.card.number = context.importRecord[context.property];\n      context.cipher.card.brand = this.getCardBrand(context.cipher.card.number);\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardVerification(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.code) &&\n      context.lowerProperty.includes(\"verification number\")\n    ) {\n      context.cipher.card.code = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardCardholderName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.cardholderName) &&\n      context.lowerProperty.includes(\"cardholder name\")\n    ) {\n      context.cipher.card.cardholderName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\") &&\n      context.importRecord[context.property].length === 7\n    ) {\n      context.cipher.card.expMonth = (context.importRecord[context.property] as string).substr(\n        0,\n        2\n      );\n      if (context.cipher.card.expMonth[0] === \"0\") {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = (context.importRecord[context.property] as string).substr(3, 4);\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginPassword(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.password) &&\n      context.lowerProperty === \"password\"\n    ) {\n      context.cipher.login.password = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUsername(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.username) &&\n      context.lowerProperty === \"username\"\n    ) {\n      context.cipher.login.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUris(context: CipherImportContext) {\n    if (\n      (context.cipher.login.uris == null || context.cipher.login.uris.length === 0) &&\n      context.lowerProperty === \"urls\"\n    ) {\n      const urls = context.importRecord[context.property].split(this.newLineRegex);\n      context.cipher.login.uris = this.makeUriArray(urls);\n      return true;\n    } else if (context.lowerProperty === \"url\") {\n      if (context.cipher.login.uris == null) {\n        context.cipher.login.uris = [];\n      }\n      context.cipher.login.uris.concat(this.makeUriArray(context.importRecord[context.property]));\n      return true;\n    }\n    return false;\n  }\n}\n","import { CipherType } from \"../../enums/cipherType\";\nimport { CardView } from \"../../models/view/card.view\";\nimport { CipherView } from \"../../models/view/cipher.view\";\nimport { IdentityView } from \"../../models/view/identity.view\";\nimport { Importer } from \"../importer\";\n\nimport { IgnoredProperties, OnePasswordCsvImporter } from \"./onepasswordCsvImporter\";\n\nexport class OnePasswordMacCsvImporter extends OnePasswordCsvImporter implements Importer {\n  setCipherType(value: any, cipher: CipherView) {\n    const onePassType = this.getValueOrDefault(this.getProp(value, \"type\"), \"Login\");\n    switch (onePassType) {\n      case \"Credit Card\":\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Identity\":\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Login\":\n      case \"Secure Note\":\n        IgnoredProperties.push(\"type\");\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { CipherType } from \"../../enums/cipherType\";\nimport { CardView } from \"../../models/view/card.view\";\nimport { CipherView } from \"../../models/view/cipher.view\";\nimport { IdentityView } from \"../../models/view/identity.view\";\nimport { LoginView } from \"../../models/view/login.view\";\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipherImportContext\";\nimport { OnePasswordCsvImporter } from \"./onepasswordCsvImporter\";\n\nexport class OnePasswordWinCsvImporter extends OnePasswordCsvImporter implements Importer {\n  constructor() {\n    super();\n    this.identityPropertyParsers.push(this.setIdentityAddress);\n  }\n\n  setCipherType(value: any, cipher: CipherView) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: number/i)) &&\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: expiry date/i))\n    ) {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    }\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: first name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: initial/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: last name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /internet \\d+: email/i))\n    ) {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    }\n  }\n\n  setIdentityAddress(context: CipherImportContext) {\n    if (context.lowerProperty.match(/address \\d+: address/i)) {\n      this.processKvp(context.cipher, \"address\", context.importRecord[context.property]);\n      return true;\n    }\n    return false;\n  }\n\n  setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\")\n    ) {\n      const expSplit = (context.importRecord[context.property] as string).split(\"/\");\n      context.cipher.card.expMonth = expSplit[0];\n      if (context.cipher.card.expMonth[0] === \"0\" && context.cipher.card.expMonth.length === 2) {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = expSplit[2].length > 4 ? expSplit[2].substr(0, 4) : expSplit[2];\n      return true;\n    }\n    return false;\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\nimport { CollectionView } from \"../models/view/collection.view\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PadlockCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let headers: string[] = null;\n    results.forEach((value) => {\n      if (headers == null) {\n        headers = value.map((v: string) => v);\n        return;\n      }\n\n      if (value.length < 2 || value.length !== headers.length) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value[1])) {\n        if (this.organization) {\n          const tags = (value[1] as string).split(\",\");\n          tags.forEach((tag) => {\n            tag = tag.trim();\n            let addCollection = true;\n            let collectionIndex = result.collections.length;\n\n            for (let i = 0; i < result.collections.length; i++) {\n              if (result.collections[i].name === tag) {\n                addCollection = false;\n                collectionIndex = i;\n                break;\n              }\n            }\n\n            if (addCollection) {\n              const collection = new CollectionView();\n              collection.name = tag;\n              result.collections.push(collection);\n            }\n\n            result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n          });\n        } else {\n          const tags = (value[1] as string).split(\",\");\n          const tag = tags.length > 0 ? tags[0].trim() : null;\n          this.processFolder(result, tag);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      for (let i = 2; i < value.length; i++) {\n        const header = headers[i].trim().toLowerCase();\n        if (this.isNullOrWhitespace(value[i]) || this.isNullOrWhitespace(header)) {\n          continue;\n        }\n\n        if (this.usernameFieldNames.indexOf(header) > -1) {\n          cipher.login.username = value[i];\n        } else if (this.passwordFieldNames.indexOf(header) > -1) {\n          cipher.login.password = value[i];\n        } else if (this.uriFieldNames.indexOf(header) > -1) {\n          cipher.login.uris = this.makeUriArray(value[i]);\n        } else {\n          this.processKvp(cipher, headers[i], value[i]);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PassKeepCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValue(\"category\", value));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValue(\"description\", value);\n      cipher.name = this.getValueOrDefault(this.getValue(\"title\", value), \"--\");\n      cipher.login.username = this.getValue(\"username\", value);\n      cipher.login.password = this.getValue(\"password\", value);\n      cipher.login.uris = this.makeUriArray(this.getValue(\"site\", value));\n      this.processKvp(cipher, \"Password 2\", this.getValue(\"password2\", value));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private getValue(key: string, value: any) {\n    return this.getValueOrDefault(value[key], this.getValueOrDefault(value[\" \" + key]));\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PassmanJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((credential: any) => {\n      if (credential.tags != null && credential.tags.length > 0) {\n        const folderName = credential.tags[0].text;\n        this.processFolder(result, folderName);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = credential.label;\n\n      cipher.login.username = this.getValueOrDefault(credential.username);\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.url);\n      cipher.notes += this.getValueOrDefault(credential.description, \"\");\n      if (credential.otp != null) {\n        cipher.login.totp = this.getValueOrDefault(credential.otp.secret);\n      }\n\n      if (credential.custom_fields != null) {\n        credential.custom_fields.forEach((customField: any) => {\n          switch (customField.field_type) {\n            case \"text\":\n            case \"password\":\n              this.processKvp(cipher, customField.label, customField.value);\n              break;\n          }\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\nimport { CollectionView } from \"../models/view/collection.view\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PasspackCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const tagsJson = !this.isNullOrWhitespace(value.Tags) ? JSON.parse(value.Tags) : null;\n      const tags: string[] =\n        tagsJson != null && tagsJson.tags != null && tagsJson.tags.length > 0\n          ? tagsJson.tags\n              .map((tagJson: string) => {\n                try {\n                  const t = JSON.parse(tagJson);\n                  return this.getValueOrDefault(t.tag);\n                } catch {\n                  // Ignore error\n                }\n                return null;\n              })\n              .filter((t: string) => !this.isNullOrWhitespace(t))\n          : null;\n\n      if (this.organization && tags != null && tags.length > 0) {\n        tags.forEach((tag) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === tag) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = tag;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization && tags != null && tags.length > 0) {\n        this.processFolder(result, tags[0]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes, \"\");\n      cipher.notes += \"\\n\\n\" + this.getValueOrDefault(value[\"Shared Notes\"], \"\") + \"\\n\";\n      cipher.name = this.getValueOrDefault(value[\"Entry Name\"], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User ID\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n        value.__parsed_extra.forEach((extra: string) => {\n          if (!this.isNullOrWhitespace(extra)) {\n            cipher.notes += \"\\n\" + extra;\n          }\n        });\n      }\n\n      const fieldsJson = !this.isNullOrWhitespace(value[\"Extra Fields\"])\n        ? JSON.parse(value[\"Extra Fields\"])\n        : null;\n      const fields =\n        fieldsJson != null && fieldsJson.extraFields != null && fieldsJson.extraFields.length > 0\n          ? fieldsJson.extraFields.map((fieldJson: string) => {\n              try {\n                return JSON.parse(fieldJson);\n              } catch {\n                // Ignore error\n              }\n              return null;\n            })\n          : null;\n      if (fields != null) {\n        fields.forEach((f: any) => {\n          if (f != null) {\n            this.processKvp(cipher, f.name, f.data);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordAgentCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let newVersion = true;\n    results.forEach((value) => {\n      if (value.length !== 5 && value.length < 9) {\n        return;\n      }\n      const altFormat = value.length === 10 && value[0] === \"0\";\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[altFormat ? 1 : 0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[altFormat ? 2 : 1]);\n      cipher.login.password = this.getValueOrDefault(value[altFormat ? 3 : 2]);\n      if (value.length === 5) {\n        newVersion = false;\n        cipher.notes = this.getValueOrDefault(value[4]);\n        cipher.login.uris = this.makeUriArray(value[3]);\n      } else {\n        const folder = this.getValueOrDefault(value[altFormat ? 9 : 8], \"(None)\");\n        let folderName = folder !== \"(None)\" ? folder.split(\"\\\\\").join(\"/\") : null;\n        if (folderName != null) {\n          folderName = folder.split(\" > \").join(\"/\");\n          folderName = folder.split(\">\").join(\"/\");\n        }\n        this.processFolder(result, folderName);\n        cipher.notes = this.getValueOrDefault(value[altFormat ? 5 : 3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (newVersion && this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CardView } from \"../models/view/card.view\";\nimport { FolderView } from \"../models/view/folder.view\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordBossJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.items == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    results.folders.forEach((value: any) => {\n      foldersMap.set(value.id, value.name);\n    });\n    const foldersIndexMap = new Map<string, number>();\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((value: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.login.uris = this.makeUriArray(value.login_url);\n\n      if (value.folder != null && foldersIndexMap.has(value.folder)) {\n        result.folderRelationships.push([result.ciphers.length, foldersIndexMap.get(value.folder)]);\n      }\n\n      if (value.identifiers == null) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value.identifiers.notes)) {\n        cipher.notes = value.identifiers.notes.split(\"\\\\r\\\\n\").join(\"\\n\").split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (value.type === \"CreditCard\") {\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n      }\n\n      for (const property in value.identifiers) {\n        // eslint-disable-next-line\n        if (!value.identifiers.hasOwnProperty(property)) {\n          continue;\n        }\n        const valObj = value.identifiers[property];\n        const val = valObj != null ? valObj.toString() : null;\n        if (\n          this.isNullOrWhitespace(val) ||\n          property === \"notes\" ||\n          property === \"ignoreItemInSecurityScore\"\n        ) {\n          continue;\n        }\n\n        if (property === \"custom_fields\") {\n          valObj.forEach((cf: any) => {\n            this.processKvp(cipher, cf.name, cf.value);\n          });\n          continue;\n        }\n\n        if (cipher.type === CipherType.Card) {\n          if (property === \"cardNumber\") {\n            cipher.card.number = val;\n            cipher.card.brand = this.getCardBrand(val);\n            continue;\n          } else if (property === \"nameOnCard\") {\n            cipher.card.cardholderName = val;\n            continue;\n          } else if (property === \"security_code\") {\n            cipher.card.code = val;\n            continue;\n          } else if (property === \"expires\") {\n            try {\n              const expDate = new Date(val);\n              cipher.card.expYear = expDate.getFullYear().toString();\n              cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n            } catch {\n              // Ignore error\n            }\n            continue;\n          } else if (property === \"cardType\") {\n            continue;\n          }\n        } else {\n          if (\n            (property === \"username\" || property === \"email\") &&\n            this.isNullOrWhitespace(cipher.login.username)\n          ) {\n            cipher.login.username = val;\n            continue;\n          } else if (property === \"password\") {\n            cipher.login.password = val;\n            continue;\n          } else if (property === \"totp\") {\n            cipher.login.totp = val;\n            continue;\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(property) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n            continue;\n          }\n        }\n\n        this.processKvp(cipher, property, val);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordDragonXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const records = doc.querySelectorAll(\"PasswordManager > record\");\n    Array.from(records).forEach((record) => {\n      const category = this.querySelectorDirectChild(record, \"Category\");\n      const categoryText =\n        category != null &&\n        !this.isNullOrWhitespace(category.textContent) &&\n        category.textContent !== \"Unfiled\"\n          ? category.textContent\n          : null;\n      this.processFolder(result, categoryText);\n\n      const accountName = this.querySelectorDirectChild(record, \"Account-Name\");\n      const userId = this.querySelectorDirectChild(record, \"User-Id\");\n      const password = this.querySelectorDirectChild(record, \"Password\");\n      const url = this.querySelectorDirectChild(record, \"URL\");\n      const notes = this.querySelectorDirectChild(record, \"Notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name =\n        accountName != null ? this.getValueOrDefault(accountName.textContent, \"--\") : \"--\";\n      cipher.notes = notes != null ? this.getValueOrDefault(notes.textContent) : \"\";\n      cipher.login.username = userId != null ? this.getValueOrDefault(userId.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      const attributes: string[] = [];\n      for (let i = 1; i <= 10; i++) {\n        attributes.push(\"Attribute-\" + i);\n      }\n\n      this.querySelectorAllDirectChild(record, attributes.join(\",\")).forEach((attr) => {\n        if (this.isNullOrWhitespace(attr.textContent) || attr.textContent === \"null\") {\n          return;\n        }\n        this.processKvp(cipher, attr.tagName, attr.textContent);\n      });\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordSafeXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const passwordSafe = doc.querySelector(\"passwordsafe\");\n    if (passwordSafe == null) {\n      result.errorMessage = \"Missing `passwordsafe` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const notesDelimiter = passwordSafe.getAttribute(\"delimiter\");\n    const entries = doc.querySelectorAll(\"passwordsafe > entry\");\n    Array.from(entries).forEach((entry) => {\n      const group = this.querySelectorDirectChild(entry, \"group\");\n      const groupText =\n        group != null && !this.isNullOrWhitespace(group.textContent)\n          ? group.textContent.split(\".\").join(\"/\")\n          : null;\n      this.processFolder(result, groupText);\n\n      const title = this.querySelectorDirectChild(entry, \"title\");\n      const username = this.querySelectorDirectChild(entry, \"username\");\n      const email = this.querySelectorDirectChild(entry, \"email\");\n      const password = this.querySelectorDirectChild(entry, \"password\");\n      const url = this.querySelectorDirectChild(entry, \"url\");\n      const notes = this.querySelectorDirectChild(entry, \"notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name = title != null ? this.getValueOrDefault(title.textContent, \"--\") : \"--\";\n      cipher.notes =\n        notes != null\n          ? this.getValueOrDefault(notes.textContent, \"\").split(notesDelimiter).join(\"\\n\")\n          : null;\n      cipher.login.username =\n        username != null ? this.getValueOrDefault(username.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      if (this.isNullOrWhitespace(cipher.login.username) && email != null) {\n        cipher.login.username = this.getValueOrDefault(email.textContent);\n      } else if (email != null && !this.isNullOrWhitespace(email.textContent)) {\n        cipher.notes = this.isNullOrWhitespace(cipher.notes)\n          ? \"Email: \" + email.textContent\n          : cipher.notes + \"\\n\" + \"Email: \" + email.textContent;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordWalletTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 1) {\n        return;\n      }\n      if (value.length > 5) {\n        this.processFolder(result, value[5]);\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      if (value.length > 4) {\n        cipher.notes = this.getValueOrDefault(value[4], \"\").split(\"¬\").join(\"\\n\");\n      }\n      if (value.length > 2) {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n      }\n      if (value.length > 3) {\n        cipher.login.password = this.getValueOrDefault(value[3]);\n      }\n      if (value.length > 1) {\n        cipher.login.uris = this.makeUriArray(value[1]);\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CardView } from \"../models/view/card.view\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class RememBearCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.trash === \"true\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.notes);\n      if (value.type === \"LoginItem\") {\n        cipher.login.uris = this.makeUriArray(value.website);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      } else if (value.type === \"CreditCardItem\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.verification);\n\n        try {\n          const expMonth = this.getValueOrDefault(value.expiryMonth);\n          if (expMonth != null) {\n            const expMonthNumber = parseInt(expMonth, null);\n            if (expMonthNumber != null && expMonthNumber >= 1 && expMonthNumber <= 12) {\n              cipher.card.expMonth = expMonthNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n        try {\n          const expYear = this.getValueOrDefault(value.expiryYear);\n          if (expYear != null) {\n            const expYearNumber = parseInt(expYear, null);\n            if (expYearNumber != null) {\n              cipher.card.expYear = expYearNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n\n        const pin = this.getValueOrDefault(value.pin);\n        if (pin != null) {\n          this.processKvp(cipher, \"PIN\", pin);\n        }\n        const zip = this.getValueOrDefault(value.zipCode);\n        if (zip != null) {\n          this.processKvp(cipher, \"Zip Code\", zip);\n        }\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class RoboFormCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let i = 1;\n    results.forEach((value) => {\n      const folder =\n        !this.isNullOrWhitespace(value.Folder) && value.Folder.startsWith(\"/\")\n          ? value.Folder.replace(\"/\", \"\")\n          : value.Folder;\n      const folderName = !this.isNullOrWhitespace(folder) ? folder : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Login);\n      cipher.login.password = this.getValueOrDefault(value.Pwd);\n      cipher.login.uris = this.makeUriArray(value.Url);\n\n      if (!this.isNullOrWhitespace(value.Rf_fields)) {\n        let fields: string[] = [value.Rf_fields];\n        if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n          fields = fields.concat(value.__parsed_extra);\n        }\n        fields.forEach((field: string) => {\n          const parts = field.split(\":\");\n          if (parts.length < 3) {\n            return;\n          }\n          const key = parts[0] === \"-no-name-\" ? null : parts[0];\n          const val = parts.length === 4 && parts[2] === \"rck\" ? parts[1] : parts[2];\n          this.processKvp(cipher, key, val);\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n\n      if (\n        i === results.length &&\n        cipher.name === \"--\" &&\n        this.isNullOrWhitespace(cipher.login.password)\n      ) {\n        return;\n      }\n\n      result.ciphers.push(cipher);\n      i++;\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class SafariCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url ?? value.URL);\n      cipher.login.totp = this.getValueOrDefault(value.OTPAuth);\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { FieldType } from \"../enums/fieldType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CipherView } from \"../models/view/cipher.view\";\nimport { FieldView } from \"../models/view/field.view\";\nimport { FolderView } from \"../models/view/folder.view\";\nimport { SecureNoteView } from \"../models/view/secure-note.view\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class SafeInCloudXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const db = doc.querySelector(\"database\");\n    if (db == null) {\n      result.errorMessage = \"Missing `database` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, number>();\n\n    Array.from(doc.querySelectorAll(\"database > label\")).forEach((labelEl) => {\n      const name = labelEl.getAttribute(\"name\");\n      const id = labelEl.getAttribute(\"id\");\n      if (!this.isNullOrWhitespace(name) && !this.isNullOrWhitespace(id)) {\n        foldersMap.set(id, result.folders.length);\n        const folder = new FolderView();\n        folder.name = name;\n        result.folders.push(folder);\n      }\n    });\n\n    Array.from(doc.querySelectorAll(\"database > card\")).forEach((cardEl) => {\n      if (cardEl.getAttribute(\"template\") === \"true\" || cardEl.getAttribute(\"deleted\") === \"true\") {\n        return;\n      }\n\n      const labelIdEl = this.querySelectorDirectChild(cardEl, \"label_id\");\n      if (labelIdEl != null) {\n        const labelId = labelIdEl.textContent;\n        if (!this.isNullOrWhitespace(labelId) && foldersMap.has(labelId)) {\n          result.folderRelationships.push([result.ciphers.length, foldersMap.get(labelId)]);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(cardEl.getAttribute(\"title\"), \"--\");\n\n      if (cardEl.getAttribute(\"star\") === \"true\") {\n        cipher.favorite = true;\n      }\n\n      const cardType = cardEl.getAttribute(\"type\");\n      if (cardType === \"note\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      } else {\n        Array.from(this.querySelectorAllDirectChild(cardEl, \"field\")).forEach((fieldEl) => {\n          const text = fieldEl.textContent;\n          if (this.isNullOrWhitespace(text)) {\n            return;\n          }\n          const name = fieldEl.getAttribute(\"name\");\n          const fieldType = this.getValueOrDefault(fieldEl.getAttribute(\"type\"), \"\").toLowerCase();\n          if (fieldType === \"login\") {\n            cipher.login.username = text;\n          } else if (fieldType === \"password\" || fieldType === \"secret\") {\n            // safeInCloud allows for more than one password. we just insert them here and find the one used as password later\n            this.processKvp(cipher, name, text, FieldType.Hidden);\n          } else if (fieldType === \"one_time_password\") {\n            cipher.login.totp = text;\n          } else if (fieldType === \"notes\") {\n            cipher.notes += text + \"\\n\";\n          } else if (fieldType === \"weblogin\" || fieldType === \"website\") {\n            cipher.login.uris = this.makeUriArray(text);\n          } else {\n            this.processKvp(cipher, name, text);\n          }\n        });\n      }\n\n      Array.from(this.querySelectorAllDirectChild(cardEl, \"notes\")).forEach((notesEl) => {\n        cipher.notes += notesEl.textContent + \"\\n\";\n      });\n\n      this.setPassword(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  // Choose a password from all passwords. Take one that has password in its name, or the first one if there is no such entry\n  // if its name is password, we can safely remove it form the fields. otherwise, it would maybe be best to keep it as a hidden field\n  setPassword(cipher: CipherView) {\n    const candidates = cipher.fields.filter((field) => field.type === FieldType.Hidden);\n    if (!candidates.length) {\n      return;\n    }\n\n    let choice: FieldView;\n    for (const field of candidates) {\n      if (this.passwordFieldNames.includes(field.name.toLowerCase())) {\n        choice = field;\n        cipher.fields = cipher.fields.filter((f) => f !== choice);\n        break;\n      }\n    }\n\n    if (!choice) {\n      choice = candidates[0];\n    }\n\n    cipher.login.password = choice.value;\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class SaferPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.nameFromUrl(value.url), \"--\");\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class SecureSafeCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title);\n      cipher.notes = this.getValueOrDefault(value.Comment);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\nimport { CipherView } from \"../models/view/cipher.view\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class SplashIdCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      this.processFolder(result, this.getValueOrDefault(value[value.length - 1]));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 2], \"\");\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n\n      if (value[0] === \"Web Logins\" || value[0] === \"Servers\" || value[0] === \"Email Accounts\") {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n        cipher.login.password = this.getValueOrDefault(value[3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n        this.parseFieldsToNotes(cipher, 5, value);\n      } else {\n        this.parseFieldsToNotes(cipher, 2, value);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFieldsToNotes(cipher: CipherView, startIndex: number, value: any) {\n    // last 3 rows do not get parsed\n    for (let i = startIndex; i < value.length - 3; i++) {\n      if (this.isNullOrWhitespace(value[i])) {\n        continue;\n      }\n      cipher.notes += value[i] + \"\\n\";\n    }\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class StickyPasswordXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const loginNodes = doc.querySelectorAll(\"root > Database > Logins > Login\");\n    Array.from(loginNodes).forEach((loginNode) => {\n      const accountId = loginNode.getAttribute(\"ID\");\n      if (this.isNullOrWhitespace(accountId)) {\n        return;\n      }\n\n      const usernameText = loginNode.getAttribute(\"Name\");\n      const passwordText = loginNode.getAttribute(\"Password\");\n      let titleText: string = null;\n      let linkText: string = null;\n      let notesText: string = null;\n      let groupId: string = null;\n      let groupText: string = null;\n\n      const accountLogin = doc.querySelector(\n        \"root > Database > Accounts > Account > \" +\n          'LoginLinks > Login[SourceLoginID=\"' +\n          accountId +\n          '\"]'\n      );\n      if (accountLogin != null) {\n        const account = accountLogin.parentElement.parentElement;\n        if (account != null) {\n          titleText = account.getAttribute(\"Name\");\n          linkText = account.getAttribute(\"Link\");\n          groupId = account.getAttribute(\"ParentID\");\n          notesText = account.getAttribute(\"Comments\");\n          if (!this.isNullOrWhitespace(notesText)) {\n            notesText = notesText.split(\"/n\").join(\"\\n\");\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(groupId)) {\n        groupText = this.buildGroupText(doc, groupId, \"\");\n        this.processFolder(result, groupText);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(titleText, \"--\");\n      cipher.notes = this.getValueOrDefault(notesText);\n      cipher.login.username = this.getValueOrDefault(usernameText);\n      cipher.login.password = this.getValueOrDefault(passwordText);\n      cipher.login.uris = this.makeUriArray(linkText);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  buildGroupText(doc: Document, groupId: string, groupText: string): string {\n    const group = doc.querySelector('root > Database > Groups > Group[ID=\"' + groupId + '\"]');\n    if (group == null) {\n      return groupText;\n    }\n    if (!this.isNullOrWhitespace(groupText)) {\n      groupText = \"/\" + groupText;\n    }\n    groupText = group.getAttribute(\"Name\") + groupText;\n    return this.buildGroupText(doc, group.getAttribute(\"ParentID\"), groupText);\n  }\n}\n","import { CipherType } from \"../enums/cipherType\";\nimport { SecureNoteType } from \"../enums/secureNoteType\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CardView } from \"../models/view/card.view\";\nimport { SecureNoteView } from \"../models/view/secure-note.view\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nconst PropertiesToIgnore = [\n  \"kind\",\n  \"autologin\",\n  \"favorite\",\n  \"hexcolor\",\n  \"protectedwithpassword\",\n  \"subdomainonly\",\n  \"type\",\n  \"tk_export_version\",\n  \"note\",\n  \"title\",\n  \"document_content\",\n];\n\nexport class TrueKeyCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.favorite, \"\").toLowerCase() === \"true\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.notes = this.getValueOrDefault(value.memo, \"\");\n      cipher.login.username = this.getValueOrDefault(value.login);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n\n      if (value.kind !== \"login\") {\n        cipher.name = this.getValueOrDefault(value.title, \"--\");\n        cipher.notes = this.getValueOrDefault(value.note, \"\");\n      }\n\n      if (value.kind === \"cc\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = this.getCardBrand(cipher.card.number);\n        if (!this.isNullOrWhitespace(value.expiryDate)) {\n          try {\n            const expDate = new Date(value.expiryDate);\n            cipher.card.expYear = expDate.getFullYear().toString();\n            cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n          } catch {\n            // Ignore error\n          }\n        }\n      } else if (value.kind !== \"login\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = this.getValueOrDefault(value.document_content, \"\");\n        }\n        for (const property in value) {\n          if (\n            value.hasOwnProperty(property) && // eslint-disable-line\n            PropertiesToIgnore.indexOf(property.toLowerCase()) < 0 &&\n            !this.isNullOrWhitespace(value[property])\n          ) {\n            this.processKvp(cipher, property, value[property]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class UpmCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length !== 5) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.notes = this.getValueOrDefault(value[4]);\n      cipher.login.username = this.getValueOrDefault(value[1]);\n      cipher.login.password = this.getValueOrDefault(value[2]);\n      cipher.login.uris = this.makeUriArray(value[3]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class YotiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User name\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/domain/import-result\";\nimport { CipherView } from \"../models/view/cipher.view\";\n\nimport { BaseImporter } from \"./baseImporter\";\nimport { Importer } from \"./importer\";\n\nexport class ZohoVaultCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (\n        this.isNullOrWhitespace(value[\"Password Name\"]) &&\n        this.isNullOrWhitespace(value[\"Secret Name\"])\n      ) {\n        return;\n      }\n      this.processFolder(result, this.getValueOrDefault(value.ChamberName));\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite, \"0\") === \"1\";\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(\n        value[\"Password Name\"],\n        this.getValueOrDefault(value[\"Secret Name\"], \"--\")\n      );\n      cipher.login.uris = this.makeUriArray(\n        this.getValueOrDefault(value[\"Password URL\"], this.getValueOrDefault(value[\"Secret URL\"]))\n      );\n      this.parseData(cipher, value.SecretData);\n      this.parseData(cipher, value.CustomData);\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseData(cipher: CipherView, data: string) {\n    if (this.isNullOrWhitespace(data)) {\n      return;\n    }\n    const dataLines = this.splitNewLine(data);\n    dataLines.forEach((line) => {\n      const delimPosition = line.indexOf(\":\");\n      if (delimPosition < 0) {\n        return;\n      }\n      const field = line.substring(0, delimPosition);\n      const value = line.length > delimPosition ? line.substring(delimPosition + 1) : null;\n      if (\n        this.isNullOrWhitespace(field) ||\n        this.isNullOrWhitespace(value) ||\n        field === \"SecretType\"\n      ) {\n        return;\n      }\n      const fieldLower = field.toLowerCase();\n      if (cipher.login.username == null && this.usernameFieldNames.indexOf(fieldLower) > -1) {\n        cipher.login.username = value;\n      } else if (\n        cipher.login.password == null &&\n        this.passwordFieldNames.indexOf(fieldLower) > -1\n      ) {\n        cipher.login.password = value;\n      } else {\n        this.processKvp(cipher, field, value);\n      }\n    });\n  }\n}\n","import { CipherRequest } from \"./cipher.request\";\nimport { FolderRequest } from \"./folder.request\";\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  folders: FolderRequest[] = [];\n  folderRelationships: KvpRequest<number, number>[] = [];\n}\n","import { CipherRequest } from \"./cipher.request\";\nimport { CollectionRequest } from \"./collection.request\";\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportOrganizationCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  collections: CollectionRequest[] = [];\n  collectionRelationships: KvpRequest<number, number>[] = [];\n}\n","export class KvpRequest<TK, TV> {\n  key: TK;\n  value: TV;\n\n  constructor(key: TK, value: TV) {\n    this.key = key;\n    this.value = value;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { CipherService } from \"../abstractions/cipher.service\";\nimport { CollectionService } from \"../abstractions/collection.service\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { FolderService } from \"../abstractions/folder/folder.service.abstraction\";\nimport { I18nService } from \"../abstractions/i18n.service\";\nimport { ImportService as ImportServiceAbstraction } from \"../abstractions/import.service\";\nimport { CipherType } from \"../enums/cipherType\";\nimport {\n  featuredImportOptions,\n  ImportOption,\n  ImportType,\n  regularImportOptions,\n} from \"../enums/importOptions\";\nimport { AscendoCsvImporter } from \"../importers/ascendoCsvImporter\";\nimport { AvastCsvImporter } from \"../importers/avastCsvImporter\";\nimport { AvastJsonImporter } from \"../importers/avastJsonImporter\";\nimport { AviraCsvImporter } from \"../importers/aviraCsvImporter\";\nimport { BitwardenCsvImporter } from \"../importers/bitwardenCsvImporter\";\nimport { BitwardenJsonImporter } from \"../importers/bitwardenJsonImporter\";\nimport { BitwardenPasswordProtectedImporter } from \"../importers/bitwardenPasswordProtectedImporter\";\nimport { BlackBerryCsvImporter } from \"../importers/blackBerryCsvImporter\";\nimport { BlurCsvImporter } from \"../importers/blurCsvImporter\";\nimport { ButtercupCsvImporter } from \"../importers/buttercupCsvImporter\";\nimport { ChromeCsvImporter } from \"../importers/chrome-csv-importer\";\nimport { ClipperzHtmlImporter } from \"../importers/clipperzHtmlImporter\";\nimport { CodebookCsvImporter } from \"../importers/codebookCsvImporter\";\nimport { DashlaneCsvImporter } from \"../importers/dashlaneImporters/dashlaneCsvImporter\";\nimport { DashlaneJsonImporter } from \"../importers/dashlaneImporters/dashlaneJsonImporter\";\nimport { EncryptrCsvImporter } from \"../importers/encryptrCsvImporter\";\nimport { EnpassCsvImporter } from \"../importers/enpassCsvImporter\";\nimport { EnpassJsonImporter } from \"../importers/enpassJsonImporter\";\nimport { FirefoxCsvImporter } from \"../importers/firefoxCsvImporter\";\nimport { FSecureFskImporter } from \"../importers/fsecureFskImporter\";\nimport { GnomeJsonImporter } from \"../importers/gnomeJsonImporter\";\nimport { ImportError } from \"../importers/importError\";\nimport { Importer } from \"../importers/importer\";\nimport { KasperskyTxtImporter } from \"../importers/kasperskyTxtImporter\";\nimport { KeePass2XmlImporter } from \"../importers/keepass2XmlImporter\";\nimport { KeePassXCsvImporter } from \"../importers/keepassxCsvImporter\";\nimport { KeeperCsvImporter } from \"../importers/keeperImporters/keeperCsvImporter\";\nimport { LastPassCsvImporter } from \"../importers/lastpassCsvImporter\";\nimport { LogMeOnceCsvImporter } from \"../importers/logMeOnceCsvImporter\";\nimport { MeldiumCsvImporter } from \"../importers/meldiumCsvImporter\";\nimport { MSecureCsvImporter } from \"../importers/msecureCsvImporter\";\nimport { MykiCsvImporter } from \"../importers/mykiCsvImporter\";\nimport { NordPassCsvImporter } from \"../importers/nordpassCsvImporter\";\nimport { OnePassword1PifImporter } from \"../importers/onepasswordImporters/onepassword1PifImporter\";\nimport { OnePassword1PuxImporter } from \"../importers/onepasswordImporters/onepassword1PuxImporter\";\nimport { OnePasswordMacCsvImporter } from \"../importers/onepasswordImporters/onepasswordMacCsvImporter\";\nimport { OnePasswordWinCsvImporter } from \"../importers/onepasswordImporters/onepasswordWinCsvImporter\";\nimport { PadlockCsvImporter } from \"../importers/padlockCsvImporter\";\nimport { PassKeepCsvImporter } from \"../importers/passkeepCsvImporter\";\nimport { PassmanJsonImporter } from \"../importers/passmanJsonImporter\";\nimport { PasspackCsvImporter } from \"../importers/passpackCsvImporter\";\nimport { PasswordAgentCsvImporter } from \"../importers/passwordAgentCsvImporter\";\nimport { PasswordBossJsonImporter } from \"../importers/passwordBossJsonImporter\";\nimport { PasswordDragonXmlImporter } from \"../importers/passwordDragonXmlImporter\";\nimport { PasswordSafeXmlImporter } from \"../importers/passwordSafeXmlImporter\";\nimport { PasswordWalletTxtImporter } from \"../importers/passwordWalletTxtImporter\";\nimport { RememBearCsvImporter } from \"../importers/rememBearCsvImporter\";\nimport { RoboFormCsvImporter } from \"../importers/roboformCsvImporter\";\nimport { SafariCsvImporter } from \"../importers/safariCsvImporter\";\nimport { SafeInCloudXmlImporter } from \"../importers/safeInCloudXmlImporter\";\nimport { SaferPassCsvImporter } from \"../importers/saferpassCsvImport\";\nimport { SecureSafeCsvImporter } from \"../importers/secureSafeCsvImporter\";\nimport { SplashIdCsvImporter } from \"../importers/splashIdCsvImporter\";\nimport { StickyPasswordXmlImporter } from \"../importers/stickyPasswordXmlImporter\";\nimport { TrueKeyCsvImporter } from \"../importers/truekeyCsvImporter\";\nimport { UpmCsvImporter } from \"../importers/upmCsvImporter\";\nimport { YotiCsvImporter } from \"../importers/yotiCsvImporter\";\nimport { ZohoVaultCsvImporter } from \"../importers/zohoVaultCsvImporter\";\nimport { Utils } from \"../misc/utils\";\nimport { ImportResult } from \"../models/domain/import-result\";\nimport { CipherRequest } from \"../models/request/cipher.request\";\nimport { CollectionRequest } from \"../models/request/collection.request\";\nimport { FolderRequest } from \"../models/request/folder.request\";\nimport { ImportCiphersRequest } from \"../models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"../models/request/import-organization-ciphers.request\";\nimport { KvpRequest } from \"../models/request/kvp.request\";\nimport { ErrorResponse } from \"../models/response/error.response\";\nimport { CipherView } from \"../models/view/cipher.view\";\n\nexport class ImportService implements ImportServiceAbstraction {\n  featuredImportOptions = featuredImportOptions as readonly ImportOption[];\n\n  regularImportOptions = regularImportOptions as readonly ImportOption[];\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private apiService: ApiService,\n    private i18nService: I18nService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService\n  ) {}\n\n  getImportOptions(): ImportOption[] {\n    return this.featuredImportOptions.concat(this.regularImportOptions);\n  }\n\n  async import(\n    importer: Importer,\n    fileContents: string,\n    organizationId: string = null\n  ): Promise<ImportError> {\n    const importResult = await importer.parse(fileContents);\n    if (importResult.success) {\n      if (importResult.folders.length === 0 && importResult.ciphers.length === 0) {\n        return new ImportError(this.i18nService.t(\"importNothingError\"));\n      } else if (importResult.ciphers.length > 0) {\n        const halfway = Math.floor(importResult.ciphers.length / 2);\n        const last = importResult.ciphers.length - 1;\n\n        if (\n          this.badData(importResult.ciphers[0]) &&\n          this.badData(importResult.ciphers[halfway]) &&\n          this.badData(importResult.ciphers[last])\n        ) {\n          return new ImportError(this.i18nService.t(\"importFormatError\"));\n        }\n      }\n      try {\n        await this.postImport(importResult, organizationId);\n      } catch (error) {\n        const errorResponse = new ErrorResponse(error, 400);\n        return this.handleServerError(errorResponse, importResult);\n      }\n      return null;\n    } else {\n      if (!Utils.isNullOrWhitespace(importResult.errorMessage)) {\n        return new ImportError(importResult.errorMessage, importResult.missingPassword);\n      } else {\n        return new ImportError(\n          this.i18nService.t(\"importFormatError\"),\n          importResult.missingPassword\n        );\n      }\n    }\n  }\n\n  getImporter(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    organizationId: string = null,\n    password: string = null\n  ): Importer {\n    const importer = this.getImporterInstance(format, password);\n    if (importer == null) {\n      return null;\n    }\n    importer.organizationId = organizationId;\n    return importer;\n  }\n\n  private getImporterInstance(format: ImportType | \"bitwardenpasswordprotected\", password: string) {\n    if (format == null) {\n      return null;\n    }\n\n    switch (format) {\n      case \"bitwardencsv\":\n        return new BitwardenCsvImporter();\n      case \"bitwardenjson\":\n        return new BitwardenJsonImporter(this.cryptoService, this.i18nService);\n      case \"bitwardenpasswordprotected\":\n        return new BitwardenPasswordProtectedImporter(\n          this.cryptoService,\n          this.i18nService,\n          password\n        );\n      case \"lastpasscsv\":\n      case \"passboltcsv\":\n        return new LastPassCsvImporter();\n      case \"keepassxcsv\":\n        return new KeePassXCsvImporter();\n      case \"aviracsv\":\n        return new AviraCsvImporter();\n      case \"blurcsv\":\n        return new BlurCsvImporter();\n      case \"safeincloudxml\":\n        return new SafeInCloudXmlImporter();\n      case \"padlockcsv\":\n        return new PadlockCsvImporter();\n      case \"keepass2xml\":\n        return new KeePass2XmlImporter();\n      case \"chromecsv\":\n      case \"operacsv\":\n      case \"vivaldicsv\":\n        return new ChromeCsvImporter();\n      case \"firefoxcsv\":\n        return new FirefoxCsvImporter();\n      case \"upmcsv\":\n        return new UpmCsvImporter();\n      case \"saferpasscsv\":\n        return new SaferPassCsvImporter();\n      case \"safaricsv\":\n        return new SafariCsvImporter();\n      case \"meldiumcsv\":\n        return new MeldiumCsvImporter();\n      case \"1password1pif\":\n        return new OnePassword1PifImporter();\n      case \"1password1pux\":\n        return new OnePassword1PuxImporter();\n      case \"1passwordwincsv\":\n        return new OnePasswordWinCsvImporter();\n      case \"1passwordmaccsv\":\n        return new OnePasswordMacCsvImporter();\n      case \"keepercsv\":\n        return new KeeperCsvImporter();\n      // case \"keeperjson\":\n      //   return new KeeperJsonImporter();\n      case \"passworddragonxml\":\n        return new PasswordDragonXmlImporter();\n      case \"enpasscsv\":\n        return new EnpassCsvImporter();\n      case \"enpassjson\":\n        return new EnpassJsonImporter();\n      case \"pwsafexml\":\n        return new PasswordSafeXmlImporter();\n      case \"dashlanecsv\":\n        return new DashlaneCsvImporter();\n      case \"dashlanejson\":\n        return new DashlaneJsonImporter();\n      case \"msecurecsv\":\n        return new MSecureCsvImporter();\n      case \"stickypasswordxml\":\n        return new StickyPasswordXmlImporter();\n      case \"truekeycsv\":\n        return new TrueKeyCsvImporter();\n      case \"clipperzhtml\":\n        return new ClipperzHtmlImporter();\n      case \"roboformcsv\":\n        return new RoboFormCsvImporter();\n      case \"ascendocsv\":\n        return new AscendoCsvImporter();\n      case \"passwordbossjson\":\n        return new PasswordBossJsonImporter();\n      case \"zohovaultcsv\":\n        return new ZohoVaultCsvImporter();\n      case \"splashidcsv\":\n        return new SplashIdCsvImporter();\n      case \"passkeepcsv\":\n        return new PassKeepCsvImporter();\n      case \"gnomejson\":\n        return new GnomeJsonImporter();\n      case \"passwordagentcsv\":\n        return new PasswordAgentCsvImporter();\n      case \"passpackcsv\":\n        return new PasspackCsvImporter();\n      case \"passmanjson\":\n        return new PassmanJsonImporter();\n      case \"avastcsv\":\n        return new AvastCsvImporter();\n      case \"avastjson\":\n        return new AvastJsonImporter();\n      case \"fsecurefsk\":\n        return new FSecureFskImporter();\n      case \"kasperskytxt\":\n        return new KasperskyTxtImporter();\n      case \"remembearcsv\":\n        return new RememBearCsvImporter();\n      case \"passwordwallettxt\":\n        return new PasswordWalletTxtImporter();\n      case \"mykicsv\":\n        return new MykiCsvImporter();\n      case \"securesafecsv\":\n        return new SecureSafeCsvImporter();\n      case \"logmeoncecsv\":\n        return new LogMeOnceCsvImporter();\n      case \"blackberrycsv\":\n        return new BlackBerryCsvImporter();\n      case \"buttercupcsv\":\n        return new ButtercupCsvImporter();\n      case \"codebookcsv\":\n        return new CodebookCsvImporter();\n      case \"encryptrcsv\":\n        return new EncryptrCsvImporter();\n      case \"yoticsv\":\n        return new YotiCsvImporter();\n      case \"nordpasscsv\":\n        return new NordPassCsvImporter();\n      default:\n        return null;\n    }\n  }\n\n  private async postImport(importResult: ImportResult, organizationId: string = null) {\n    if (organizationId == null) {\n      const request = new ImportCiphersRequest();\n      for (let i = 0; i < importResult.ciphers.length; i++) {\n        const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n        request.ciphers.push(new CipherRequest(c));\n      }\n      if (importResult.folders != null) {\n        for (let i = 0; i < importResult.folders.length; i++) {\n          const f = await this.folderService.encrypt(importResult.folders[i]);\n          request.folders.push(new FolderRequest(f));\n        }\n      }\n      if (importResult.folderRelationships != null) {\n        importResult.folderRelationships.forEach((r) =>\n          request.folderRelationships.push(new KvpRequest(r[0], r[1]))\n        );\n      }\n      return await this.apiService.postImportCiphers(request);\n    } else {\n      const request = new ImportOrganizationCiphersRequest();\n      for (let i = 0; i < importResult.ciphers.length; i++) {\n        importResult.ciphers[i].organizationId = organizationId;\n        const c = await this.cipherService.encrypt(importResult.ciphers[i]);\n        request.ciphers.push(new CipherRequest(c));\n      }\n      if (importResult.collections != null) {\n        for (let i = 0; i < importResult.collections.length; i++) {\n          importResult.collections[i].organizationId = organizationId;\n          const c = await this.collectionService.encrypt(importResult.collections[i]);\n          request.collections.push(new CollectionRequest(c));\n        }\n      }\n      if (importResult.collectionRelationships != null) {\n        importResult.collectionRelationships.forEach((r) =>\n          request.collectionRelationships.push(new KvpRequest(r[0], r[1]))\n        );\n      }\n      return await this.apiService.postImportOrganizationCiphers(organizationId, request);\n    }\n  }\n\n  private badData(c: CipherView) {\n    return (\n      (c.name == null || c.name === \"--\") &&\n      c.type === CipherType.Login &&\n      c.login != null &&\n      Utils.isNullOrWhitespace(c.login.password)\n    );\n  }\n\n  private handleServerError(errorResponse: ErrorResponse, importResult: ImportResult): ImportError {\n    if (errorResponse.validationErrors == null) {\n      return new ImportError(errorResponse.message);\n    }\n\n    let errorMessage = \"\";\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const i = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Ciphers\":\n          item = importResult.ciphers[i];\n          itemType = CipherType[item.type];\n          break;\n        case \"Folders\":\n          item = importResult.folders[i];\n          itemType = \"Folder\";\n          break;\n        case \"Collections\":\n          item = importResult.collections[i];\n          itemType = \"Collection\";\n          break;\n        default:\n          return;\n      }\n\n      if (index > 0) {\n        errorMessage += \"\\n\\n\";\n      }\n\n      if (itemType !== \"Folder\" && itemType !== \"Collection\") {\n        errorMessage += \"[\" + (i + 1) + \"] \";\n      }\n\n      errorMessage += \"[\" + itemType + '] \"' + item.name + '\": ' + value;\n    });\n\n    return new ImportError(errorMessage);\n  }\n}\n"],"names":["EncryptedExportType","constructor","cryptoService","i18nService","platformUtilsService","exportService","eventService","policyService","win","logService","userVerificationService","formBuilder","fileDownloadService","onSaved","disabledByPolicy","exportForm","this","group","format","secret","filePassword","confirmFilePassword","fileEncryptionType","AccountEncrypted","formatOptions","name","value","destroy$","Subject","ngOnInit","policyAppliesToActiveUser$","pipe","takeUntil","subscribe","policyAppliesToActiveUser","checkExportDisabled","merge","get","valueChanges","startWith","adjustValidators","ngOnDestroy","next","disable","encryptedFormat","doExport","formPromise","getExportData","data","downloadFile","saved","collectEvent","setValue","clearValidators","e","error","submit","showToast","t","warningDialog","verifyUser","message","showDialog","emit","FileEncrypted","getPasswordProtectedExport","getExport","getFileName","prefix","extension","collect","toggleFilePassword","showFilePassword","document","getElementById","focus","toggleConfirmFilePassword","showConfirmFilePassword","reset","controls","enable","csv","fileName","download","blobData","blobOptions","type","Window","modalRef","config","confirmDescription","confirmButtonText","modalTitle","close","UserVerificationPromptComponent","ExportComponent","modalService","super","window","encryptedExportType","isFileEncryptedExport","markAllAsTouched","valid","isAccountEncryptedExport","ref","open","allowMultipleModals","onClosedPromise","FilePasswordPromptComponent","markAsTouched","cancel","ImportComponent","importService","router","loading","importBlockedByPolicy$","organizationId","successNavigate","setImportOptions","complete","firstValueFrom","importer","getImporter","files","length","fileContents","content","getFileContents","import","passwordRequired","getFilePassword","doPasswordProtectedImport","navigate","getFormatInstructionTitle","results","featuredImportOptions","concat","importOptions","filter","o","id","regularImportOptions","sort","a","b","collator","compare","localeCompare","heightAuto","buttonsStyling","icon","iconHtml","input","inputValue","inputAttributes","readonly","titleText","text","showConfirmButton","onOpen","popupEl","querySelector","scrollTo","file","extract1PuxContent","Promise","resolve","reject","reader","FileReader","readAsText","onload","evt","pre","DOMParser","parseFromString","target","result","textContent","onerror","loadAsync","then","zip","async","passwordProtectedImporter","title","ExportScopeCalloutComponent","organizationService","stateService","show","hasOrganizations","scopeConfig","description","scopeIdentifier","getEmail","BoxRowDirective","elRef","el","nativeElement","formEls","Array","from","querySelectorAll","forEach","formEl","addEventListener","classList","add","remove","onClick","event","contains","tagName","toLowerCase","inputEl","click","ImportService","ImportResult","success","missingPassword","ciphers","folders","folderRelationships","collections","collectionRelationships","BaseImporter","newLineRegex","passwordFieldNames","usernameFieldNames","notesFieldNames","uriFieldNames","parseCsvOptions","encoding","skipEmptyLines","organization","parseXml","doc","parseCsv","header","options","parseOptions","Object","assign","splitNewLine","join","trim","errors","row","warning","parseSingleRowCsv","rowData","isNullOrWhitespace","parsedRow","makeUriArray","uri","loginUri","fixUri","match","returnArr","u","push","indexOf","substring","nameFromUrl","url","hostname","startsWith","replace","str","getValueOrDefault","defaultValue","split","getCardBrand","cardNum","re","RegExp","test","setCardExpiration","cipher","expiration","parts","month","year","substr","card","expMonth","expYear","moveFoldersToCollections","r","map","f","collection","querySelectorDirectChild","parentEl","query","els","querySelectorAllDirectChild","parentNode","initLoginCipher","favorite","notes","fields","login","cleanupCipher","processKvp","key","search","field","processFolder","folderName","folderIndex","hasFolder","addFolder","i","convertToNoteIfNeeded","username","password","uris","secureNote","processFullName","fullName","nameParts","identity","firstName","lastName","middleName","slice","AscendoCsvImporter","parse","val","fieldLower","AvastCsvImporter","web","AvastJsonImporter","JSON","logins","custName","note","pwd","loginName","label","cards","cardholderName","holderName","number","cardNumber","code","cvv","brand","expirationDate","AviraCsvImporter","website","secondary_username","BitwardenCsvImporter","col","addCollection","collectionIndex","folder","reprompt","parseInt","console","delimPosition","lastIndexOf","totp","login_totp","login_username","login_password","login_uri","BitwardenJsonImporter","items","passwordProtected","errorMessage","encrypted","parseEncrypted","parseDecrypted","encKeyValidation_DO_NOT_EDIT","orgKey","getOrgKey","encKeyValidation","decryptToUtf8","groupingsMap","Map","c","view","decrypt","set","folderId","collectionIds","passwordHistory","has","cId","BitwardenPasswordProtectedImporter","parsedData","cannotParseFile","checkPassword","encData","clearTextData","jdoc","makePinKey","salt","kdfIterations","kdfType","BlackBerryCsvImporter","grouping","fav","extra","BlurCsvImporter","domain","email","OfficialProps","ButtercupCsvImporter","URL","processingCustomFields","prop","hasOwnProperty","ChromeCsvImporter","androidPatternRegex","ClipperzHtmlImporter","textarea","entry","currentVersion","property","actionType","labelLower","CodebookCsvImporter","Category","Favorite","Entry","Note","Username","Email","Password","TOTP","Website","Phone","PIN","Account","Date","_mappedCredentialsColums","Set","_mappedPersonalInfoAsIdentiyColumns","_mappedSecureNoteColumns","DashlaneCsvImporter","x","parsePersonalInformationRecordAsIdentity","rowKeys","keys","category","parseCredentialsRecord","parsePaymentRecord","parseIdRecord","parsePersonalInformationRecord","parseSecureNoteRecords","otpSecret","importUnmappedFields","account_name","mappedValues","cc_number","expiration_month","expiration_year","account_holder","account_number","licenseNumber","passportNumber","state","ssn","first_name","middle_name","last_name","item_name","dataRow","phone","phone_number","address1","address","city","postalCode","country","item","HandledResults","DashlaneJsonImporter","ADDRESS","processAddress","AUTHENTIFIANT","processAuth","BANKSTATEMENT","processNote","IDCARD","PAYMENTMEANS_CREDITCARD","processCard","IDENTITY","processIdentity","credential","secondaryLogin","obj","pseudo","addressName","addressFull","zipcode","toUpperCase","bank","owner","nameProperty","toString","EncryptrCsvImporter","Label","Notes","Text","CVV","expiry","Expiry","expParts","EnpassCsvImporter","firstRow","containsField","fieldValue","fieldName","fieldNameLower","EnpassJsonImporter","foldersMap","foldersIndexMap","folderTree","buildFolderTree","flattenFolderTree","template_type","processLogin","some","urls","sensitive","uuid","children","parent_uuid","titlePrefix","tree","FirefoxCsvImporter","FSecureFskImporter","service","style","creditNumber","creditCvv","creditExpiry","GnomeJsonImporter","keyRing","display_name","attributes","username_value","attr","ImportError","Error","NotesHeader","ApplicationsHeader","WebsitesHeader","Delimiter","KasperskyTxtImporter","notesData","applicationsData","websitesData","workingData","parseDataCategory","applications","websites","n","w","nameKey","p","itemComment","itemCommentKey","l","colonIndex","size","KeePass2XmlImporter","rootGroup","traverse","node","isRootNode","groupPrefixName","groupName","nameEl","cipherIndex","entryString","valueEl","keyEl","attrs","ProtectInMemory","KeePassXCsvImporter","Title","Group","KeeperCsvImporter","LastPassCsvImporter","buildBaseCipher","parseSecureNote","parseCard","parseIdentity","ccnum","cardCipher","profilename","firstname","lastname","ccname","cccsc","ccexp","ccexpParts","middlename","company","address2","address3","charAt","extraParts","processedNote","typeParts","mappedData","parseSecureNoteMapping","Number","undefined","monthString","getMonth","isNaN","Company","State","Country","dataObj","processingNotes","extraPart","LogMeOnceCsvImporter","MeldiumCsvImporter","DisplayName","UserName","Url","MSecureCsvImporter","mappedBaseColumns","_mappedUserAccountColumns","_mappedCreditCardColumns","_mappedIdentityColumns","_mappedIdCardColumns","_mappedTwoFaColumns","_mappedUserNoteColumns","MykiCsvImporter","nickname","additionalInfo","twofaSecret","authToken","cardName","exp_month","exp_year","firstAddressLine","secondAddressLine","zipCode","idType","idName","idCountry","idNumber","NordPassCsvImporter","record","recordType","evaluateType","cardholdername","cardnumber","cvc","expirydate","full_name","CategoryEnum","LoginFieldTypeEnum","OnePassword1PifImporter","line","trashed","hmac","processStandardItem","processWinOpVaultItem","overview","URLs","details","parsePasswordHistory","notesPlain","parseFields","sections","section","openContents","faveIndex","typeName","location","secureContents","maxSize","h","time","ph","lastUsedDate","designationKey","valueKey","k","toUTCString","fieldDesignation","street","fieldType","OnePassword1PuxImporter","accounts","vaults","vault","categoryUuid","Login","Database","WirelessRouter","Server","API_Credential","CreditCard","BankAccount","SecureNote","SoftwareLicense","EmailAccount","MedicalRecord","Identity","DriversLicense","OutdoorLicense","Membership","Passport","RewardsProgram","SocialSecurityNumber","favIndex","processOverview","processLoginFields","processDetails","processSections","tags","capitalize","inputString","loginFields","loginField","designation","CheckBox","parseSectionFields","anyField","getFieldName","extractValue","fillLogin","fillApiCredentials","fillCreditCard","fillBankAccount","fillIdentity","fillDriversLicense","fillOutdoorLicense","fillMembership","fillPassport","fillRewardsProgram","fillSSN","email_address","provider","guarded","date","monthYear","historyItems","CipherImportContext","importRecord","lowerProperty","IgnoredProperties","OnePasswordCsvImporter","loginPropertyParsers","setLoginUsername","setLoginPassword","setLoginUris","creditCardPropertyParsers","setCreditCardNumber","setCreditCardVerification","setCreditCardCardholderName","setCreditCardExpiry","identityPropertyParsers","setIdentityFirstName","setIdentityInitial","setIdentityLastName","setIdentityUserName","setIdentityEmail","setIdentityPhone","setIdentityCompany","quoteChar","escapeChar","getProp","setNotes","setCipherType","altUsername","context","setKnownLoginValue","setKnownCreditCardValue","setKnownIdentityValue","setUnknownValue","entries","reduce","agg","getPropByRegexp","regexp","matchingKeys","getPropIncluding","includesMap","includes","func","bind","readableDate","OnePasswordMacCsvImporter","OnePasswordWinCsvImporter","setIdentityAddress","expSplit","PadlockCsvImporter","headers","v","tag","PassKeepCsvImporter","getValue","PassmanJsonImporter","otp","custom_fields","customField","field_type","PasspackCsvImporter","tagsJson","Tags","tagJson","__parsed_extra","fieldsJson","extraFields","fieldJson","PasswordAgentCsvImporter","newVersion","altFormat","PasswordBossJsonImporter","login_url","identifiers","valObj","expDate","getFullYear","cf","PasswordDragonXmlImporter","records","categoryText","accountName","userId","PasswordSafeXmlImporter","passwordSafe","notesDelimiter","getAttribute","groupText","PasswordWalletTxtImporter","RememBearCsvImporter","trash","cardholder","verification","expiryMonth","expMonthNumber","expiryYear","expYearNumber","pin","RoboFormCsvImporter","Folder","Name","Pwd","Rf_fields","SafariCsvImporter","OTPAuth","SafeInCloudXmlImporter","labelEl","cardEl","labelIdEl","labelId","fieldEl","notesEl","setPassword","candidates","choice","SaferPassCsvImporter","SecureSafeCsvImporter","Comment","SplashIdCsvImporter","parseFieldsToNotes","startIndex","StickyPasswordXmlImporter","loginNodes","loginNode","accountId","usernameText","passwordText","linkText","notesText","groupId","accountLogin","account","parentElement","buildGroupText","PropertiesToIgnore","TrueKeyCsvImporter","memo","kind","expiryDate","document_content","UpmCsvImporter","YotiCsvImporter","ZohoVaultCsvImporter","ChamberName","parseData","SecretData","CustomData","ImportCiphersRequest","ImportOrganizationCiphersRequest","KvpRequest","cipherService","folderService","apiService","collectionService","getImportOptions","importResult","halfway","Math","floor","last","badData","postImport","errorResponse","handleServerError","getImporterInstance","request","encrypt","postImportCiphers","postImportOrganizationCiphers","validationErrors","index","itemType"],"sourceRoot":""}