
    // rp_id_hash + flags + sign_count + self.aaguid + credential_id_length + self.credential_id + cose_key,
    // const rpIdHash = new Uint8Array(
    //   await crypto.subtle.digest({ name: "SHA-256" }, encoder.encode(rpId))
    // );
    // const flags = Uint8Array.from([0x41]); // attested_data + user_present
    // const signCount = Uint8Array.from([SignCount++]);
    // const aaguid = Uint8Array.from([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);

    // const authData = new Uint8Array(
    //   rpIdHash.length +
    //     flags.length +
    //     signCount.length +
    //     aaguid.length +
    //     rawId.length +
    //     publicKey.length
    // );
    // authData.set(rpIdHash, 0);
    // authData.set(flags, rpIdHash.length);
    // authData.set(signCount, rpIdHash.length + flags.length);
    // authData.set(aaguid, rpIdHash.length + flags.length + signCount.length);
    // authData.set(rawId, rpIdHash.length + flags.length + signCount.length + aaguid.length);
    // authData.set(
    //   publicKey,
    //   rpIdHash.length + flags.length + signCount.length + aaguid.length + rawId.length
    // );


        // const registrationData = new Uint8Array(
    //   1 + publicKey.length + 1 + keyHandleLength + certificate.length + signature.length
    // );
    // registrationData.set([ReservedByte], 0);
    // registrationData.set(publicKey, 1);
    // registrationData.set([keyHandleLength], 1 + 65);
    // registrationData.set(rawId, 1 + 65 + 1);
    // registrationData.set(certificate, 1 + 65 + 1 + keyHandleLength);
    // registrationData.set(signature, 1 + 65 + 1 + keyHandleLength + 200);
