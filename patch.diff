diff --git a/apps/desktop/desktop_native/Cargo.lock b/apps/desktop/desktop_native/Cargo.lock
index a3a20cd64..32af5fda5 100644
--- a/apps/desktop/desktop_native/Cargo.lock
+++ b/apps/desktop/desktop_native/Cargo.lock
@@ -2,6 +2,17 @@
 # It is not intended for manual editing.
 version = 3
 
+[[package]]
+name = "aes"
+version = "0.8.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bfe0133578c0986e1fe3dfcd4af1cc5b2dd6c3dbf534d69916ce16a2701d40ba"
+dependencies = [
+ "cfg-if",
+ "cipher",
+ "cpufeatures",
+]
+
 [[package]]
 name = "aho-corasick"
 version = "0.7.18"
@@ -17,18 +28,51 @@ version = "1.0.55"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "159bb86af3a200e19a068f4224eae4c8bb2d0fa054c7e5d1cacd5cef95e684cd"
 
+[[package]]
+name = "base64"
+version = "0.13.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "904dfeac50f3cdaba28fc6f57fdcddb75f49ed61346676a78c4ffe55877802fd"
+
 [[package]]
 name = "bitflags"
 version = "1.3.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"
 
+[[package]]
+name = "block-buffer"
+version = "0.10.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "69cce20737498f97b993470a6e536b8523f0af7892a4f928cceb1ac5e52ebe7e"
+dependencies = [
+ "generic-array",
+]
+
+[[package]]
+name = "block-padding"
+version = "0.3.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "0a90ec2df9600c28a01c56c4784c9207a96d2451833aeceb8cc97e4c9548bb78"
+dependencies = [
+ "generic-array",
+]
+
 [[package]]
 name = "bytes"
 version = "1.1.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "c4872d67bab6358e59559027aa3b9157c53d9358c51423c17554809a8858e0f8"
 
+[[package]]
+name = "cbc"
+version = "0.1.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "26b52a9543ae338f279b96b0b9fed9c8093744685043739079ce85cd58f289a6"
+dependencies = [
+ "cipher",
+]
+
 [[package]]
 name = "cc"
 version = "1.0.73"
@@ -50,6 +94,16 @@ version = "1.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd"
 
+[[package]]
+name = "cipher"
+version = "0.4.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "d1873270f8f7942c191139cb8a40fd228da6c3fd2fc376d7e92d47aa14aeb59e"
+dependencies = [
+ "crypto-common",
+ "inout",
+]
+
 [[package]]
 name = "codespan-reporting"
 version = "0.11.1"
@@ -82,6 +136,25 @@ version = "0.8.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "5827cebf4670468b8772dd191856768aedcb1b0278a04f989f7766351917b9dc"
 
+[[package]]
+name = "cpufeatures"
+version = "0.2.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "28d997bd5e24a5928dd43e46dc529867e207907fe0b239c3477d924f7f2ca320"
+dependencies = [
+ "libc",
+]
+
+[[package]]
+name = "crypto-common"
+version = "0.1.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1bfb12502f3fc46cca1bb51ac28df9d618d813cdc3d2f25b9fe775a34af26bb3"
+dependencies = [
+ "generic-array",
+ "typenum",
+]
+
 [[package]]
 name = "ctor"
 version = "0.1.21"
@@ -140,7 +213,10 @@ dependencies = [
 name = "desktop_native"
 version = "0.0.0"
 dependencies = [
+ "aes",
  "anyhow",
+ "base64",
+ "cbc",
  "core-foundation",
  "gio",
  "keytar",
@@ -148,14 +224,28 @@ dependencies = [
  "napi",
  "napi-build",
  "napi-derive",
+ "rand",
  "scopeguard",
  "security-framework",
  "security-framework-sys",
+ "sha2",
+ "thiserror",
  "tokio",
+ "typenum",
  "widestring",
  "windows",
 ]
 
+[[package]]
+name = "digest"
+version = "0.10.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "adfbc57365a37acbd2ebf2b64d7e69bb766e2fea813521ed536f5d0520dcf86c"
+dependencies = [
+ "block-buffer",
+ "crypto-common",
+]
+
 [[package]]
 name = "futures-channel"
 version = "0.3.21"
@@ -207,6 +297,27 @@ dependencies = [
  "slab",
 ]
 
+[[package]]
+name = "generic-array"
+version = "0.14.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bff49e947297f3312447abdca79f45f4738097cc82b06e72054d2223f601f1b9"
+dependencies = [
+ "typenum",
+ "version_check",
+]
+
+[[package]]
+name = "getrandom"
+version = "0.2.7"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4eb1a864a501629691edf6c15a593b7a51eebaa1e8468e9ddc623de7c9b58ec6"
+dependencies = [
+ "cfg-if",
+ "libc",
+ "wasi",
+]
+
 [[package]]
 name = "gio"
 version = "0.15.6"
@@ -308,6 +419,16 @@ dependencies = [
  "libc",
 ]
 
+[[package]]
+name = "inout"
+version = "0.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a0c10553d664a4d0bcff9f4215d0aac67a639cc68ef660840afe309b807bc9f5"
+dependencies = [
+ "block-padding",
+ "generic-array",
+]
+
 [[package]]
 name = "keytar"
 version = "0.1.6"
@@ -331,9 +452,9 @@ dependencies = [
 
 [[package]]
 name = "libc"
-version = "0.2.119"
+version = "0.2.133"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "1bf2e165bb3457c8e098ea76f3e3bc9db55f87aa90d52d0e6be741470916aaa4"
+checksum = "c0f80d65747a3e43d1596c7c5492d95d5edddaabd45a7fcdb02b95f644164966"
 
 [[package]]
 name = "libloading"
@@ -550,6 +671,12 @@ version = "0.3.24"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "58893f751c9b0412871a09abd62ecd2a00298c6c83befa223ef98c52aef40cbe"
 
+[[package]]
+name = "ppv-lite86"
+version = "0.2.16"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "eb9f9e6e233e5c4a35559a617bf40a4ec447db2e84c20b55a6f83167b7e57872"
+
 [[package]]
 name = "proc-macro-crate"
 version = "1.1.3"
@@ -602,6 +729,36 @@ dependencies = [
  "proc-macro2",
 ]
 
+[[package]]
+name = "rand"
+version = "0.8.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404"
+dependencies = [
+ "libc",
+ "rand_chacha",
+ "rand_core",
+]
+
+[[package]]
+name = "rand_chacha"
+version = "0.3.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "e6c10a63a0fa32252be49d21e7709d4d4baf8d231c2dbce1eaa8141b9b127d88"
+dependencies = [
+ "ppv-lite86",
+ "rand_core",
+]
+
+[[package]]
+name = "rand_core"
+version = "0.6.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c"
+dependencies = [
+ "getrandom",
+]
+
 [[package]]
 name = "redox_syscall"
 version = "0.2.10"
@@ -669,6 +826,17 @@ version = "1.0.136"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "ce31e24b01e1e524df96f1c2fdd054405f8d7376249a5110886fb4b658484789"
 
+[[package]]
+name = "sha2"
+version = "0.10.6"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "82e6b795fe2e3b1e845bafcb27aa35405c4d47cdfc92af5fc8d3002f76cebdc0"
+dependencies = [
+ "cfg-if",
+ "cpufeatures",
+ "digest",
+]
+
 [[package]]
 name = "signal-hook-registry"
 version = "1.4.0"
@@ -735,18 +903,18 @@ dependencies = [
 
 [[package]]
 name = "thiserror"
-version = "1.0.30"
+version = "1.0.37"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "854babe52e4df1653706b98fcfc05843010039b406875930a70e4d9644e5c417"
+checksum = "10deb33631e3c9018b9baf9dcbbc4f737320d2b576bac10f6aefa048fa407e3e"
 dependencies = [
  "thiserror-impl",
 ]
 
 [[package]]
 name = "thiserror-impl"
-version = "1.0.30"
+version = "1.0.37"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "aa32fd3f627f367fe16f893e2597ae3c05020f8bba2666a4e6ea73d377e5714b"
+checksum = "982d17546b47146b28f7c22e3d08465f6b8903d0ea13c1660d9d84a6e7adcdbb"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -802,6 +970,12 @@ dependencies = [
  "serde",
 ]
 
+[[package]]
+name = "typenum"
+version = "1.15.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "dcf81ac59edc17cc8697ff311e8f5ef2d99fcbd9817b34cec66f90b6c3dfd987"
+
 [[package]]
 name = "unicode-width"
 version = "0.1.9"
@@ -826,6 +1000,12 @@ version = "0.9.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f"
 
+[[package]]
+name = "wasi"
+version = "0.11.0+wasi-snapshot-preview1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423"
+
 [[package]]
 name = "widestring"
 version = "0.5.1"
diff --git a/apps/desktop/desktop_native/Cargo.toml b/apps/desktop/desktop_native/Cargo.toml
index b7d95bf96..b79675bff 100644
--- a/apps/desktop/desktop_native/Cargo.toml
+++ b/apps/desktop/desktop_native/Cargo.toml
@@ -16,6 +16,13 @@ napi = {version = "2.9.1", features = ["async"]}
 napi-derive = "2.9.1"
 scopeguard = "1.1.0"
 tokio = {version = "1.17.0", features = ["full"]}
+aes = "0.8.1"
+cbc = { version = "0.1.2", features = ["alloc"] }
+sha2 = "0.10.6"
+rand = "0.8.5"
+base64 = "0.13.0"
+thiserror = "1.0.34"
+typenum = "1.15.0"
 
 [build-dependencies]
 napi-build = "2.0.1"
@@ -26,6 +33,7 @@ windows = {version = "0.32.0", features = [
   "alloc",
   "Foundation",
   "Security_Credentials_UI",
+  "Security_Cryptography",
   "Storage_Streams",
   "Win32_Foundation",
   "Win32_Security_Credentials",
diff --git a/apps/desktop/desktop_native/index.d.ts b/apps/desktop/desktop_native/index.d.ts
index 023c7ecca..6db39ce8e 100644
--- a/apps/desktop/desktop_native/index.d.ts
+++ b/apps/desktop/desktop_native/index.d.ts
@@ -16,4 +16,6 @@ export namespace passwords {
 export namespace biometrics {
   export function prompt(hwnd: Buffer, message: string): Promise<boolean>
   export function available(): Promise<boolean>
+  export function encrpt(account: string, secret: string): Promise<void>
+  export function decrypt(account: string): Promise<string>
 }
diff --git a/apps/desktop/desktop_native/src/biometric/macos.rs b/apps/desktop/desktop_native/src/biometric/macos.rs
index 3401b7f6d..35539dae2 100644
--- a/apps/desktop/desktop_native/src/biometric/macos.rs
+++ b/apps/desktop/desktop_native/src/biometric/macos.rs
@@ -1,4 +1,4 @@
-use anyhow::{Result, bail};
+use anyhow::{bail, Result};
 
 pub fn prompt(_hwnd: Vec<u8>, _message: String) -> Result<bool> {
     bail!("platform not supported");
diff --git a/apps/desktop/desktop_native/src/biometric/unix.rs b/apps/desktop/desktop_native/src/biometric/unix.rs
index 3401b7f6d..35539dae2 100644
--- a/apps/desktop/desktop_native/src/biometric/unix.rs
+++ b/apps/desktop/desktop_native/src/biometric/unix.rs
@@ -1,4 +1,4 @@
-use anyhow::{Result, bail};
+use anyhow::{bail, Result};
 
 pub fn prompt(_hwnd: Vec<u8>, _message: String) -> Result<bool> {
     bail!("platform not supported");
diff --git a/apps/desktop/desktop_native/src/biometric/windows.rs b/apps/desktop/desktop_native/src/biometric/windows.rs
index f49730cc5..57d80e11a 100644
--- a/apps/desktop/desktop_native/src/biometric/windows.rs
+++ b/apps/desktop/desktop_native/src/biometric/windows.rs
@@ -1,21 +1,62 @@
-use anyhow::Result;
+use std::str::FromStr;
+
+use aes::cipher::generic_array::GenericArray;
+use anyhow::{anyhow, Result};
+use rand::RngCore;
+use sha2::{Digest, Sha256};
 use windows::{
     core::{factory, HSTRING},
     Foundation::IAsyncOperation,
-    Security::Credentials::UI::*,
+    Security::{
+        Credentials::{
+            KeyCredentialCreationOption, KeyCredentialManager, KeyCredentialStatus, UI::*,
+        },
+        Cryptography::CryptographicBuffer,
+    },
     Win32::{
         Foundation::HWND,
         System::WinRT::IUserConsentVerifierInterop,
         UI::{
             Input::KeyboardAndMouse::{
-                self, keybd_event, GetAsyncKeyState, SetFocus, KEYEVENTF_EXTENDEDKEY,
-                KEYEVENTF_KEYUP, VK_MENU,
+                keybd_event, GetAsyncKeyState, SetFocus, KEYEVENTF_EXTENDEDKEY, KEYEVENTF_KEYUP,
+                VK_MENU,
             },
-            WindowsAndMessaging::{self, SetForegroundWindow},
+            WindowsAndMessaging::SetForegroundWindow,
         },
     },
 };
 
+use crate::{
+    crypto::{self, CipherString},
+    password,
+};
+
+pub fn encrypt(account: &str, secret: &str) -> Result<()> {
+    // We also use the challenge as the IV
+    let mut challenge = [0u8; 16];
+    rand::thread_rng().fill_bytes(&mut challenge);
+
+    let key = derive_key(&challenge)?;
+    let encrypted = crypto::encrypt_aes256(secret.as_bytes(), challenge, key)?;
+
+    let s = encrypted.to_string();
+
+    password::set_password("Bitwarden", &account, &s)
+}
+
+pub fn decrypt(account: &str) -> Result<String> {
+    let secret = CipherString::from_str(&password::get_password("Bitwarden", &account)?)?;
+
+    if let CipherString::AesCbc256_B64 { iv, data } = secret {
+        let key = derive_key(&iv)?;
+        let decrypted = crypto::decrypt_aes256(&iv, &data, key)?;
+
+        Ok(String::from_utf8(decrypted)?)
+    } else {
+        Err(anyhow!("Invalid cipher string"))
+    }
+}
+
 pub fn prompt(hwnd: Vec<u8>, message: String) -> Result<bool> {
     let h = isize::from_le_bytes(hwnd.clone().try_into().unwrap());
     let window = HWND(h);
@@ -36,13 +77,52 @@ pub fn prompt(hwnd: Vec<u8>, message: String) -> Result<bool> {
 }
 
 pub fn available() -> Result<bool> {
-    let ucv_available = UserConsentVerifier::CheckAvailabilityAsync()?.get()?;
+    let available = KeyCredentialManager::IsSupportedAsync()?.get()?;
 
-    match ucv_available {
-        UserConsentVerifierAvailability::Available => Ok(true),
-        UserConsentVerifierAvailability::DeviceBusy => Ok(true), // TODO: Look into removing this and making the check more ad-hoc
-        _ => Ok(false),
+    Ok(available)
+}
+
+// Derive the symmetric encryption key from the Windows Hello signature.
+//
+// This works by signing a static challenge string with Windows Hello protected key store. The
+// signed challenge is then hashed using SHA-256 and used as the symmetric encryption key for the
+// windows hello protected keys.
+//
+// The Windows Hello API ensues each application has its own key store. This means that other
+// applications cannot access the keys stored by this application.
+fn derive_key(challenge: &[u8; 16]) -> Result<GenericArray<u8, typenum::U32>> {
+    let result = KeyCredentialManager::RequestCreateAsync(
+        "Bitwarden",
+        KeyCredentialCreationOption::FailIfExists,
+    )?
+    .get()?;
+
+    let result = match result.Status()? {
+        KeyCredentialStatus::CredentialAlreadyExists => {
+            KeyCredentialManager::OpenAsync("Bitwarden")?.get()?
+        }
+        KeyCredentialStatus::Success => result,
+        _ => return Err(anyhow!("Failed to create key credential")),
+    };
+
+    let challenge_buffer = CryptographicBuffer::CreateFromByteArray(challenge)?;
+    let signature = result
+        .Credential()?
+        .RequestSignAsync(&challenge_buffer)?
+        .get()?;
+
+    if signature.Status()? != KeyCredentialStatus::Success {
+        return Err(anyhow!("Failed to sign data"));
     }
+
+    let signature_buffer = signature.Result()?;
+    let mut signature_value =
+        windows::core::Array::<u8>::with_len(signature_buffer.Length().unwrap() as usize);
+    CryptographicBuffer::CopyToByteArray(signature_buffer, &mut signature_value)?;
+
+    let key = Sha256::digest(&*signature_value);
+
+    Ok(key)
 }
 
 fn set_focus(window: HWND) {
@@ -75,6 +155,17 @@ mod tests {
     use super::*;
 
     #[test]
+    fn test_encrypt() {
+        encrypt("test", "secret").unwrap();
+    }
+
+    #[test]
+    fn test_decrypt() {
+        assert_eq!(decrypt("test").unwrap(), "secret");
+    }
+
+    #[test]
+    #[ignore]
     fn test_prompt() {
         prompt(
             vec![0, 0, 0, 0, 0, 0, 0, 0],
diff --git a/apps/desktop/desktop_native/src/lib.rs b/apps/desktop/desktop_native/src/lib.rs
index 1906dccb3..99a98aef5 100644
--- a/apps/desktop/desktop_native/src/lib.rs
+++ b/apps/desktop/desktop_native/src/lib.rs
@@ -2,6 +2,7 @@
 extern crate napi_derive;
 
 mod biometric;
+mod crypto;
 mod password;
 
 #[napi]
@@ -55,4 +56,16 @@ pub mod biometrics {
     pub async fn available() -> napi::Result<bool> {
         super::biometric::available().map_err(|e| napi::Error::from_reason(e.to_string()))
     }
+
+    #[napi]
+    pub async fn encrpt(account: String, secret: String) -> napi::Result<()> {
+        super::biometric::encrypt(&account, &secret)
+            .map_err(|e| napi::Error::from_reason(e.to_string()))
+    }
+
+    #[napi]
+    pub async fn decrypt(account: String) -> napi::Result<String> {
+        super::biometric::decrypt(&account)
+            .map_err(|e| napi::Error::from_reason(e.to_string()))
+    }
 }
